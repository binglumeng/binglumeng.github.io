{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/img/avatar.jpg","path":"img/avatar.jpg","modified":1,"renderable":0},{"_id":"source/img/home-bg.jpg","path":"img/home-bg.jpg","modified":1,"renderable":0},{"_id":"source/img/icon_wechat.png","path":"img/icon_wechat.png","modified":1,"renderable":0},{"_id":"source/img/contact-bg.jpg","path":"img/contact-bg.jpg","modified":1,"renderable":0},{"_id":"source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":0},{"_id":"source/img/favicon_1.ico","path":"img/favicon_1.ico","modified":1,"renderable":0},{"_id":"source/img/404-bg.jpg","path":"img/404-bg.jpg","modified":1,"renderable":0},{"_id":"themes/pure/source/css/hux-blog.css","path":"css/hux-blog.css","modified":1,"renderable":1},{"_id":"themes/pure/source/fonts/1.ttf","path":"fonts/1.ttf","modified":1,"renderable":1},{"_id":"themes/pure/source/css/highlight.styl","path":"css/highlight.styl","modified":1,"renderable":1},{"_id":"themes/pure/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":1,"renderable":1},{"_id":"themes/pure/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":1,"renderable":1},{"_id":"themes/pure/source/css/hux-blog.min.css","path":"css/hux-blog.min.css","modified":1,"renderable":1},{"_id":"themes/pure/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":1,"renderable":1},{"_id":"themes/pure/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":1,"renderable":1},{"_id":"themes/pure/source/js/hux-blog.min.js","path":"js/hux-blog.min.js","modified":1,"renderable":1},{"_id":"themes/pure/source/js/hux-blog.js","path":"js/hux-blog.js","modified":1,"renderable":1},{"_id":"themes/pure/source/js/jquery.nav.js","path":"js/jquery.nav.js","modified":1,"renderable":1},{"_id":"themes/pure/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":1,"renderable":1},{"_id":"themes/pure/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":1,"renderable":1},{"_id":"themes/pure/source/js/bootstrap.js","path":"js/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/pure/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":1,"renderable":1},{"_id":"themes/pure/source/js/jquery.min.js","path":"js/jquery.min.js","modified":1,"renderable":1},{"_id":"source/img/about-bg.jpg","path":"img/about-bg.jpg","modified":1,"renderable":0},{"_id":"themes/pure/source/css/bootstrap.css","path":"css/bootstrap.css","modified":1,"renderable":1},{"_id":"themes/pure/source/js/jquery.js","path":"js/jquery.js","modified":1,"renderable":1},{"_id":"source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":0},{"_id":"source/img/tag-bg.jpg","path":"img/tag-bg.jpg","modified":1,"renderable":0}],"Cache":[{"_id":"source/_除了post文件夹外，其他用_开头或隐藏的文件夹都会被忽略。MD和HTML会被解析放到public中，其他文件copy过去.txt","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490667675576},{"_id":"themes/pure/README.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1485083874000},{"_id":"source/404.md","hash":"fd184e653d1c97d76de37268e6d7f7c4afacee7e","modified":1490689359650},{"_id":"themes/pure/LICENSE","hash":"2b209f06bebeb2a8c2b7e187e436f3e1e1fbc8a7","modified":1485083874000},{"_id":"themes/pure/_config.yml","hash":"5d235aa7716657282795ee86d9c9db2374197a66","modified":1490753253452},{"_id":"source/_posts/Android学习笔记第五篇--网络连接与云服务.md","hash":"a14a7381ca9176bb12f6c6de2373aba9c431a12a","modified":1490694050673},{"_id":"source/_posts/Android开源控件搜集--Button.md","hash":"f6b995cbf8e4903f3a51426a9014a9ddf6d5e957","modified":1490694014951},{"_id":"source/_posts/Android开源控件搜集--ProgressBar.md","hash":"30a1d8c117a41205e2485edc4f88d11dc6380b38","modified":1490694026666},{"_id":"source/_posts/Android开源控件搜集--TextView.md","hash":"8c348e3de4aeb8183c221daa253e41f035ee2d84","modified":1490694037127},{"_id":"source/_posts/Git学习笔记.md","hash":"84d23695f6cddc670d8ae00892ffa40b4558552e","modified":1490928953287},{"_id":"source/_posts/Markdown基本语法.md","hash":"29fe40193f69f02d0c126e54df7c0d1eb6a26eec","modified":1490943218241},{"_id":"source/_posts/Markdown语法简要.md","hash":"7d486f43bc09ade090c4ad8bf2ec4af9fc75e8d6","modified":1490929044996},{"_id":"source/_posts/Shell学习笔记.md","hash":"2e64652071443b4902ebbfc89c78a1e2d223f635","modified":1490929866079},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1490699190913},{"_id":"source/_posts/windowsPE系统制作.md","hash":"baf817b562f809377ec53e475e2f46eabe89da75","modified":1490940167637},{"_id":"source/_posts/windows系统安装.md","hash":"dcc2ce8984db59fc233ed7f15c9e3dbe2632772c","modified":1490940203285},{"_id":"source/_posts/个人开发工具集.md","hash":"daa5f9cde36fb65836bfaa5a34808e906b062524","modified":1490946255051},{"_id":"source/_posts/第一篇、Android入门基础.md","hash":"cd82d88f6b566dd778d8767f0328c8ddd7fdf4da","modified":1490696088552},{"_id":"source/_posts/第三篇、Android多媒体.md","hash":"9e476e400928f01b5274f2a7ff3f5ff3b0edad26","modified":1490694147486},{"_id":"source/about/index.md","hash":"82cd2dc5e0d4e6dca9ea505f78ebb4109bca4997","modified":1490756050425},{"_id":"source/_posts/第二篇、Android分享操作.md","hash":"54c3f110ec653d8fa6c134bbdfafad6b31c931cf","modified":1490694135071},{"_id":"source/archives/index.md","hash":"6efd1c0fa4e9ec85c1a7f9e9cb99da4a33018d7b","modified":1490689387977},{"_id":"source/img/avatar.jpg","hash":"0bcf9b357a386069eb7b48eec2f3b154d6df360f","modified":1490687917061},{"_id":"source/img/home-bg.jpg","hash":"06a9131503e86f23ce2d8e9e188d30279dd5a96f","modified":1490688877694},{"_id":"source/img/icon_wechat.png","hash":"b30f5f7b7ab5c74ced0cc6f1ff56558e4e3156fc","modified":1490689300197},{"_id":"source/tags/index.md","hash":"0bc541f4c6a0f21bec67b6717ee86226f0eddf39","modified":1485083874000},{"_id":"themes/pure/languages/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1485083874000},{"_id":"themes/pure/languages/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1485083874000},{"_id":"themes/pure/languages/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1485083874000},{"_id":"themes/pure/languages/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1485083874000},{"_id":"themes/pure/languages/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1485083874000},{"_id":"themes/pure/languages/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1485083874000},{"_id":"themes/pure/languages/zh-TW.yml","hash":"0ea4f7c2d293bc354b911c6c02d1dc85cea72395","modified":1490686245364},{"_id":"themes/pure/languages/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1485083874000},{"_id":"themes/pure/layout/404.ejs","hash":"a4d73541a53e56b7dd46249c6d27cb59f4d97422","modified":1485083874000},{"_id":"themes/pure/languages/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1485083874000},{"_id":"themes/pure/layout/about.ejs","hash":"7f56c71383ef6c156b56d79b3984e07cc466606a","modified":1485083874000},{"_id":"themes/pure/layout/archive.ejs","hash":"6c3ed5d914379319efe835a4aa505abbc616c328","modified":1485083874000},{"_id":"themes/pure/layout/archives.ejs","hash":"f0046e58cc1dd876133be2bf927aed2b1821cb3e","modified":1485083874000},{"_id":"themes/pure/layout/index.ejs","hash":"70ac58c46625300a70791e210daf446afa6d1cd4","modified":1485083874000},{"_id":"themes/pure/layout/keynote.ejs","hash":"f5689862281e34dbe8402b0e72f632902e53e88b","modified":1485083874000},{"_id":"themes/pure/layout/layout.ejs","hash":"b44ca6367e9ea5576fefc6955b345e6bab59f6ef","modified":1490753259035},{"_id":"themes/pure/layout/page.ejs","hash":"3fde0787e883274563f9de5aaeb8130b667e132a","modified":1485083874000},{"_id":"themes/pure/layout/post.ejs","hash":"fd68124c3de2bbe7d870cecadcf684df7cf82519","modified":1485083874000},{"_id":"themes/pure/layout/tags.ejs","hash":"a51bf2828af20939d702de1fdae067439a1153c0","modified":1485083874000},{"_id":"source/_posts/Python学习笔记.md","hash":"1b7a2d2528a2e06c6b71c909c6b3f07ca34422d5","modified":1490929353619},{"_id":"source/_posts/第四篇、Android图像与动画.md","hash":"bc4bdaa091841a06c1ad54aaf9c68e84f4ab8329","modified":1490696208523},{"_id":"source/img/contact-bg.jpg","hash":"b1b891a515c31ba22bafc032a29dc6f2111e0b90","modified":1490689044928},{"_id":"source/img/favicon.ico","hash":"8d4787473ec83114b7c2ea1ef5686ffd996c1a59","modified":1490688544980},{"_id":"source/img/favicon_1.ico","hash":"d9e1b4ecbbc3964d86cd36ab079cb1227a1d3074","modified":1490688568601},{"_id":"source/_posts/windowsPE系统制作/pe.png","hash":"62868b634b9e492054affd35509ce185290fc557","modified":1490932812912},{"_id":"source/_posts/windowsPE系统制作/upan.png","hash":"d115eb40bd3f3ce2e3d60e5a0044c7d9631fcf86","modified":1490932917820},{"_id":"source/_posts/windows系统安装/onekey.png","hash":"96c026a1ef8cc24fd4715bc70cd6df58714dd42d","modified":1490930636628},{"_id":"source/_posts/windows系统安装/pe.png","hash":"1b027729407e3d24e50cf74c2771dc73594dbe3a","modified":1490930656528},{"_id":"source/_posts/windows系统安装/安装.png","hash":"de53f97a58d8a24d48d0188cf17211c8e5959c25","modified":1490930482773},{"_id":"source/_posts/windows系统安装/刻录.png","hash":"5de1c7ed4f91e0e130e7d7d629727fb9249ca558","modified":1490930267722},{"_id":"source/_posts/windows系统安装/校验.png","hash":"fb5ea8898ed471dd2b467d9eb893c2978a2bfc19","modified":1490930304336},{"_id":"source/img/404-bg.jpg","hash":"327d2ef9c17768cb6df8b41dd265765162cfa3e2","modified":1490687204118},{"_id":"source/_posts/第四篇、Android图像与动画/ccw-square.png","hash":"fa1e037486d69915f97393ffedf085d19f3714d3","modified":1479202750027},{"_id":"source/_posts/windows系统安装/镜像2.png","hash":"d109394821ca430e282fec12f7ff3c31b1580eec","modified":1490930405553},{"_id":"source/_posts/第四篇、Android图像与动画/ogl-triangle-projected.png","hash":"654ec2464db38f25bd49dd50999117355358e13b","modified":1479266124692},{"_id":"source/_posts/windows系统安装/镜像.png","hash":"c47b57c613aa8dad1be97fc87a741ee4fe0b9643","modified":1490930376977},{"_id":"source/_posts/第四篇、Android图像与动画/ogl-triangle-touch.png","hash":"40f7278e4d4c8c2d9cd8ead21c093e55080c9532","modified":1479267639820},{"_id":"source/_posts/第四篇、Android图像与动画/ogl-triangle.png","hash":"294a33bdc1c360199d8c5f5f56286395309b46c7","modified":1479264372471},{"_id":"themes/pure/layout/_partial/footer.ejs","hash":"86b0b8f232dd34574f38323bc59dd68b219a21b6","modified":1490755380292},{"_id":"themes/pure/layout/_partial/head.ejs","hash":"883afeaffa084d96f8a04fae901c751a6ce2a1fa","modified":1490707848786},{"_id":"themes/pure/layout/_partial/nav.ejs","hash":"4c905166c960852e9b9a3c9d5c680091e37b481f","modified":1485083874000},{"_id":"themes/pure/layout/_partial/pagination.ejs","hash":"557d6bb069a1d48af49ae912994653f44b32a570","modified":1485083874000},{"_id":"themes/pure/source/css/hux-blog.css","hash":"c1b0a32ad8075ac09d99fb4d64a9fbc84163abf8","modified":1485083874000},{"_id":"themes/pure/source/fonts/1.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1485083874000},{"_id":"themes/pure/source/css/highlight.styl","hash":"e842080e6d580f0f70a7df71fbde3c4e49463c19","modified":1485083874000},{"_id":"themes/pure/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1485083874000},{"_id":"themes/pure/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1485083874000},{"_id":"themes/pure/source/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1485083874000},{"_id":"themes/pure/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1485083874000},{"_id":"themes/pure/source/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1485083874000},{"_id":"themes/pure/source/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1485083874000},{"_id":"themes/pure/source/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1485083874000},{"_id":"themes/pure/source/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1485083874000},{"_id":"themes/pure/source/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1485083874000},{"_id":"source/_posts/windowsPE系统制作/zhizuo2.png","hash":"f86fd5b179c1a19258cfab2c27ef3114bc3f6a0b","modified":1490932969149},{"_id":"source/_posts/windows系统安装/msdn.png","hash":"f45cf62180fd53489b09edacf90acf722e138b75","modified":1490930025013},{"_id":"source/_posts/windows系统安装/ultralISO.png","hash":"e7ba6e18714a1a0df082b1878ae2648025bfaa27","modified":1490930217382},{"_id":"source/_posts/windows系统安装/写入.png","hash":"6f0d5b02decb5babd7ff5a61753d0fafc6599e51","modified":1490930333965},{"_id":"source/_posts/第一篇、Android入门基础/basic-lifecycle.png","hash":"6efc2f3fdc2dca6dc4b36ec2622506d5ea4764e4","modified":1476965486366},{"_id":"themes/pure/source/css/bootstrap.min.css","hash":"973e37a8502921d56bc02bb55321f45b072b6f71","modified":1485083874000},{"_id":"themes/pure/source/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1485083874000},{"_id":"themes/pure/source/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1485083874000},{"_id":"themes/pure/source/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1485083874000},{"_id":"source/_posts/windowsPE系统制作/zhizuo.png","hash":"6407496fc53a4af4202d1f89cf085f14fbe89886","modified":1490932942680},{"_id":"source/_posts/windows系统安装/安装语言.png","hash":"08f38d1f66a3bf2438e4aa12c06fef79ff014392","modified":1490930428384},{"_id":"source/_posts/windows系统安装/选择分区.png","hash":"22828b087f4a49a6eba8a8abe767ddfdadcd0f32","modified":1490930457016},{"_id":"source/_posts/windows系统安装/引导.png","hash":"13a5c1aa292afef9ae235a7e75b6d5e9e42e0304","modified":1490930358618},{"_id":"source/img/about-bg.jpg","hash":"20962523d5eb9084b8bea72051037c304d603379","modified":1490687410475},{"_id":"themes/pure/source/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1485083874000},{"_id":"source/_posts/windows系统安装/安装完成.png","hash":"1b354cfa2a158909872110831590ae1056808bf2","modified":1490930611920},{"_id":"themes/pure/source/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1485083874000},{"_id":"source/img/avatar.png","hash":"0e761214a345c7e02a34c23132f2a47108be2d50","modified":1490688466970},{"_id":"source/_posts/windowsPE系统制作/view.png","hash":"89660dde4a30990bf86e0997dbca4f2f764052b3","modified":1490932989282},{"_id":"source/img/tag-bg.jpg","hash":"d992a00393a7156bc29e4f4f8fd38f4cc0886ea8","modified":1490689123537},{"_id":"public/404.html","hash":"e0c58f9f7e0c87a9509b96df6f31e6703c881c64","modified":1490946492494},{"_id":"public/i_dont_wanna_use_default_archives/index.html","hash":"9a9f7d4ed350a8d51e995a1de21f15f2310839d3","modified":1490946492494},{"_id":"public/i_dont_wanna_use_default_archives/page/2/index.html","hash":"924adf20d153a79b6c6e36ab4df5d29d65d797e2","modified":1490946492495},{"_id":"public/i_dont_wanna_use_default_archives/2015/index.html","hash":"89ed1fdfea3a5f2df8cf4f8cb5add876239b190f","modified":1490946492495},{"_id":"public/i_dont_wanna_use_default_archives/2015/12/index.html","hash":"470d61cda875f2c03b6f297ee71e6c616a8f5daa","modified":1490946492495},{"_id":"public/i_dont_wanna_use_default_archives/2016/index.html","hash":"77f870fd19c2dbeb35ba35e2462aabdb15d10bd2","modified":1490946492495},{"_id":"public/i_dont_wanna_use_default_archives/2016/09/index.html","hash":"988634c81a1bbdd3de0d7c6b39cd96375a698246","modified":1490946492495},{"_id":"public/i_dont_wanna_use_default_archives/2016/11/index.html","hash":"431a59465310a18b29a98e5d69b4eb4f3ea75c81","modified":1490946492495},{"_id":"public/i_dont_wanna_use_default_archives/2016/10/index.html","hash":"a1a62d9880ce318b6c9afdc2cadc6c9a00ca2354","modified":1490946492495},{"_id":"public/i_dont_wanna_use_default_archives/2017/index.html","hash":"6a102d572cdeda8d712670951af6eb2ea5784296","modified":1490946492495},{"_id":"public/i_dont_wanna_use_default_archives/2017/03/index.html","hash":"0a0e3d8c89d09a9909070c28abb2e460c1bccc04","modified":1490946492495},{"_id":"public/categories/Android/index.html","hash":"c5d326d29c91b22c44397421766dc1dd326650bc","modified":1490946492495},{"_id":"public/categories/Linux/index.html","hash":"0ce10050e41059f4b878bc0685e7b3b24ad90e86","modified":1490946492496},{"_id":"public/categories/编程相关/index.html","hash":"482dff9df1a427b2945b8782fa96e950a8bfc6e4","modified":1490946492496},{"_id":"public/categories/Windows/index.html","hash":"def7e6c637b4dc573078d52467a37622f07032d4","modified":1490946492496},{"_id":"public/categories/Tools/index.html","hash":"c1a6a4739d23822d868a419f3cd3eee4227f03e5","modified":1490946492496},{"_id":"public/tags/Android/index.html","hash":"c7092c78b7daa35fc497ae4da536744c34cb8063","modified":1490946492496},{"_id":"public/tags/Linux/index.html","hash":"5e395635b01701cabe044f9dccb2ec63ca0beb19","modified":1490946492496},{"_id":"public/tags/Git/index.html","hash":"3e936b41890cb416efa21a3e8b281825bc497f53","modified":1490946492496},{"_id":"public/tags/Markdown/index.html","hash":"3a6664f29cbb07449c1ee4d4fa681c8c83438f4d","modified":1490946492496},{"_id":"public/tags/Windows/index.html","hash":"53888b13bc1070faba27680ceead6ccd6ed27d08","modified":1490946492496},{"_id":"public/tags/index.html","hash":"59c30bfaf3260cbcc31681a0157d527fe656934c","modified":1490946492496},{"_id":"public/archives/index.html","hash":"2c0c5d1a8908d03399ac862336229e6fa639843d","modified":1490946492496},{"_id":"public/2017/03/31/个人开发工具集/index.html","hash":"4b98764d73147c9bec05eb9d3240e1a9ade2440c","modified":1490946492496},{"_id":"public/2017/03/28/hello-world/index.html","hash":"758f50529e7eebf596ab5ce2a10cfc063b5ba4a7","modified":1490946492496},{"_id":"public/2017/03/27/Android开源控件搜集--ProgressBar/index.html","hash":"a0b4a94790dd9e72a25e97f92789342f37581d69","modified":1490946492497},{"_id":"public/2017/03/27/Android开源控件搜集--TextView/index.html","hash":"9688e18d6601e67094b3125d8f25c6806619958c","modified":1490946492497},{"_id":"public/2017/03/27/第二篇、Android分享操作/index.html","hash":"fcdac0135276dcef364d984525ccc416755c6796","modified":1490946492497},{"_id":"public/2017/03/27/第三篇、Android多媒体/index.html","hash":"fae0f0a494e0f7bcd31ad813a8cb902f11b50b08","modified":1490946492497},{"_id":"public/2017/03/27/第一篇、Android入门基础/index.html","hash":"334d83b7a9a51402c1dcd6a2c6d3e5f8ddf49e70","modified":1490946492497},{"_id":"public/2017/03/27/Android开源控件搜集--Button/index.html","hash":"e210f0bdf49d040ad7531da7b5821f6a83dba2b8","modified":1490946492497},{"_id":"public/2017/03/27/Android学习笔记第五篇--网络连接与云服务/index.html","hash":"00b907bbe1d90371d6071ba7c1d3f81a7759d4c6","modified":1490946492497},{"_id":"public/2017/03/27/第四篇、Android图像与动画/index.html","hash":"343125b4bb165804ef7702ede79f2f898017ee7b","modified":1490946492498},{"_id":"public/2016/11/18/Git学习笔记/index.html","hash":"b87e790957b323d6e3c1f9f2ae0eb54ce72c6c73","modified":1490946492498},{"_id":"public/2016/11/18/Shell学习笔记/index.html","hash":"ec03a9aca4880a1b7f451a3b284af6573f35ab78","modified":1490946492498},{"_id":"public/2016/11/03/Python学习笔记/index.html","hash":"626b9446fca63d127fea46ab13b497c08c76b145","modified":1490946492498},{"_id":"public/2016/10/27/Markdown语法简要/index.html","hash":"5062dfebc60aca1fb6206d45daa998279c28f5ee","modified":1490946492499},{"_id":"public/2015/12/06/windowsPE系统制作/index.html","hash":"60e7eec21f9e02a95636fbbd0d25e31c9522cf00","modified":1490946492499},{"_id":"public/2016/09/26/Markdown基本语法/index.html","hash":"df606ea83b443b19c36664339aef627356992482","modified":1490946492499},{"_id":"public/2015/12/06/windows系统安装/index.html","hash":"9d35f063c7505cc9f0d4b7c95747f04c53745b7c","modified":1490946492499},{"_id":"public/about/index.html","hash":"8dbfea7b7a780ebd9c52a650ecb8449d35c6f59b","modified":1490946492499},{"_id":"public/index.html","hash":"a5310fc3c13721d84256e444c6d861fbd926aa66","modified":1490946492499},{"_id":"public/page/2/index.html","hash":"1cf6005ace8deb8f7177e4135d3f61a1c9c1a4b3","modified":1490946492499},{"_id":"public/img/avatar.jpg","hash":"0bcf9b357a386069eb7b48eec2f3b154d6df360f","modified":1490946492520},{"_id":"public/img/home-bg.jpg","hash":"06a9131503e86f23ce2d8e9e188d30279dd5a96f","modified":1490946492520},{"_id":"public/img/icon_wechat.png","hash":"b30f5f7b7ab5c74ced0cc6f1ff56558e4e3156fc","modified":1490946492520},{"_id":"public/fonts/1.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1490946492520},{"_id":"public/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1490946492520},{"_id":"public/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1490946492520},{"_id":"public/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1490946492520},{"_id":"public/2015/12/06/windowsPE系统制作/pe.png","hash":"62868b634b9e492054affd35509ce185290fc557","modified":1490946492520},{"_id":"public/2015/12/06/windowsPE系统制作/upan.png","hash":"d115eb40bd3f3ce2e3d60e5a0044c7d9631fcf86","modified":1490946492520},{"_id":"public/2015/12/06/windows系统安装/pe.png","hash":"1b027729407e3d24e50cf74c2771dc73594dbe3a","modified":1490946492521},{"_id":"public/2015/12/06/windows系统安装/onekey.png","hash":"96c026a1ef8cc24fd4715bc70cd6df58714dd42d","modified":1490946492521},{"_id":"public/2015/12/06/windows系统安装/刻录.png","hash":"5de1c7ed4f91e0e130e7d7d629727fb9249ca558","modified":1490946492521},{"_id":"public/2015/12/06/windows系统安装/安装.png","hash":"de53f97a58d8a24d48d0188cf17211c8e5959c25","modified":1490946492521},{"_id":"public/2015/12/06/windows系统安装/校验.png","hash":"fb5ea8898ed471dd2b467d9eb893c2978a2bfc19","modified":1490946492521},{"_id":"public/2015/12/06/windows系统安装/镜像.png","hash":"c47b57c613aa8dad1be97fc87a741ee4fe0b9643","modified":1490946492521},{"_id":"public/2015/12/06/windows系统安装/镜像2.png","hash":"d109394821ca430e282fec12f7ff3c31b1580eec","modified":1490946492521},{"_id":"public/2017/03/27/第四篇、Android图像与动画/ccw-square.png","hash":"fa1e037486d69915f97393ffedf085d19f3714d3","modified":1490946492521},{"_id":"public/2017/03/27/第四篇、Android图像与动画/ogl-triangle-projected.png","hash":"654ec2464db38f25bd49dd50999117355358e13b","modified":1490946492521},{"_id":"public/2017/03/27/第四篇、Android图像与动画/ogl-triangle-touch.png","hash":"40f7278e4d4c8c2d9cd8ead21c093e55080c9532","modified":1490946492521},{"_id":"public/2017/03/27/第四篇、Android图像与动画/ogl-triangle.png","hash":"294a33bdc1c360199d8c5f5f56286395309b46c7","modified":1490946492521},{"_id":"public/img/contact-bg.jpg","hash":"b1b891a515c31ba22bafc032a29dc6f2111e0b90","modified":1490946492846},{"_id":"public/img/favicon.ico","hash":"8d4787473ec83114b7c2ea1ef5686ffd996c1a59","modified":1490946492847},{"_id":"public/img/favicon_1.ico","hash":"d9e1b4ecbbc3964d86cd36ab079cb1227a1d3074","modified":1490946492849},{"_id":"public/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1490946492849},{"_id":"public/2017/03/27/第一篇、Android入门基础/basic-lifecycle.png","hash":"6efc2f3fdc2dca6dc4b36ec2622506d5ea4764e4","modified":1490946492849},{"_id":"public/2015/12/06/windowsPE系统制作/zhizuo2.png","hash":"f86fd5b179c1a19258cfab2c27ef3114bc3f6a0b","modified":1490946492849},{"_id":"public/2015/12/06/windows系统安装/msdn.png","hash":"f45cf62180fd53489b09edacf90acf722e138b75","modified":1490946492849},{"_id":"public/2015/12/06/windows系统安装/ultralISO.png","hash":"e7ba6e18714a1a0df082b1878ae2648025bfaa27","modified":1490946492849},{"_id":"public/2015/12/06/windows系统安装/写入.png","hash":"6f0d5b02decb5babd7ff5a61753d0fafc6599e51","modified":1490946492849},{"_id":"public/css/highlight.css","hash":"8bc5e670b028eda8097f58bdc85269c5124c2951","modified":1490946492857},{"_id":"public/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1490946492857},{"_id":"public/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1490946492857},{"_id":"public/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1490946492857},{"_id":"public/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1490946492857},{"_id":"public/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1490946492857},{"_id":"public/css/hux-blog.css","hash":"c1b0a32ad8075ac09d99fb4d64a9fbc84163abf8","modified":1490946492857},{"_id":"public/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1490946492858},{"_id":"public/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1490946492858},{"_id":"public/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1490946492858},{"_id":"public/css/bootstrap.min.css","hash":"973e37a8502921d56bc02bb55321f45b072b6f71","modified":1490946492858},{"_id":"public/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1490946492858},{"_id":"public/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1490946492858},{"_id":"public/img/404-bg.jpg","hash":"327d2ef9c17768cb6df8b41dd265765162cfa3e2","modified":1490946492858},{"_id":"public/2015/12/06/windowsPE系统制作/zhizuo.png","hash":"6407496fc53a4af4202d1f89cf085f14fbe89886","modified":1490946492858},{"_id":"public/2015/12/06/windows系统安装/安装语言.png","hash":"08f38d1f66a3bf2438e4aa12c06fef79ff014392","modified":1490946492858},{"_id":"public/2015/12/06/windows系统安装/引导.png","hash":"13a5c1aa292afef9ae235a7e75b6d5e9e42e0304","modified":1490946492860},{"_id":"public/2015/12/06/windows系统安装/选择分区.png","hash":"22828b087f4a49a6eba8a8abe767ddfdadcd0f32","modified":1490946492860},{"_id":"public/2015/12/06/windows系统安装/安装完成.png","hash":"1b354cfa2a158909872110831590ae1056808bf2","modified":1490946492866},{"_id":"public/img/about-bg.jpg","hash":"20962523d5eb9084b8bea72051037c304d603379","modified":1490946492870},{"_id":"public/2015/12/06/windowsPE系统制作/view.png","hash":"89660dde4a30990bf86e0997dbca4f2f764052b3","modified":1490946492874},{"_id":"public/img/avatar.png","hash":"0e761214a345c7e02a34c23132f2a47108be2d50","modified":1490946492882},{"_id":"public/img/tag-bg.jpg","hash":"d992a00393a7156bc29e4f4f8fd38f4cc0886ea8","modified":1490946492889}],"Category":[{"name":"Android","_id":"cj0xj1nen0005scowiqojs978"},{"name":"Linux","_id":"cj0xj1nfc000pscowarojnrkf"},{"name":"编程相关","_id":"cj0xj1nfm000vscow2ssqnr72"},{"name":"Windows","_id":"cj0xj1nfu001dscowtmcvpybk"},{"name":"Tools","_id":"cj0xj1nfy001pscowwl87ygas"}],"Data":[],"Page":[{"layout":"404","description":"黄色的树林里分出两条路，而你却选择了人际更少的一条，从此决定了你一生的道路......","header-img":"img/404-bg.jpg","_content":"","source":"404.md","raw":"---\nlayout: 404\ndescription: \"黄色的树林里分出两条路，而你却选择了人际更少的一条，从此决定了你一生的道路......\"\nheader-img: \"img/404-bg.jpg\"\n---\n","date":"2017-03-31T06:24:23.134Z","updated":"2017-03-28T08:22:39.650Z","path":"404.html","title":"","comments":1,"_id":"cj0xj1ndp0000scowhwvpj8tz","content":"","excerpt":"","more":""},{"layout":"tags","title":"Tags","description":"Hey, this is Tags.","header-img":"img/tag-bg.jpg","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"Tags\"\ndescription: \"Hey, this is Tags.\"\nheader-img: \"img/tag-bg.jpg\"\n---\n","date":"2017-03-31T06:24:23.136Z","updated":"2017-01-22T11:17:54.000Z","path":"tags/index.html","comments":1,"_id":"cj0xj1nea0002scowg7s7qfai","content":"","excerpt":"","more":""},{"layout":"about","title":"About Author","date":"2017-03-27T08:25:27.000Z","description":"冰路梦,梦境你我心灵...","header-img":"img/about-bg.jpg","comments":1,"_content":"\n冰路梦\n\n> 用冰雪晶莹的心灵，感悟人生，寻找那一片属于自己的梦......\n\n\n\n\n\n","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"About Author\"\ndate: 2017-03-27 16:25:27\ndescription: \"冰路梦,梦境你我心灵...\"\nheader-img: \"img/about-bg.jpg\"\ncomments: true\n---\n\n冰路梦\n\n> 用冰雪晶莹的心灵，感悟人生，寻找那一片属于自己的梦......\n\n\n\n\n\n","updated":"2017-03-29T02:54:10.425Z","path":"about/index.html","_id":"cj0xj1nej0004scowmwmxhofs","content":"<p>冰路梦</p>\n<blockquote>\n<p>用冰雪晶莹的心灵，感悟人生，寻找那一片属于自己的梦……</p>\n</blockquote>\n","excerpt":"","more":"<p>冰路梦</p>\n<blockquote>\n<p>用冰雪晶莹的心灵，感悟人生，寻找那一片属于自己的梦……</p>\n</blockquote>\n"},{"layout":"archives","title":"Archives","description":"思维的空间，需要归纳梳理","header-img":"img/tag-bg.jpg","_content":"","source":"archives/index.md","raw":"---\nlayout: \"archives\"\ntitle: \"Archives\"\ndescription: \"思维的空间，需要归纳梳理\"\nheader-img: \"img/tag-bg.jpg\"\n---\n","date":"2017-03-31T06:24:23.134Z","updated":"2017-03-28T08:23:07.977Z","path":"archives/index.html","comments":1,"_id":"cj0xj1nes0008scow3ptwvetj","content":"","excerpt":"","more":""}],"Post":[{"title":"Android开源控件搜集----Button","date":"2017-03-27T08:57:00.000Z","author":"冰路梦","_content":"# Android开源控件搜集--Button\n\n**Note：**本篇博客长期维护更新，欢迎各位网友共同合作，共享知识与技术。\n\n本篇博客主要搜集个人任务比较优秀的Android开源控件，大多来自github，并附上链接，自己学习之余，亦希望于大家有所帮助。\n\nAndroid的控件还算比较多，官方和第三方自定义优秀控件数不胜数，搜集难免不全，逐步更新丰富吧。\n\n## Button\n\nButton可以说是Android中仅次于Text View的，比较重要的一个控件，下面主要是搜集一些第三方优化效果的Button,其中有的也算是菜单Menu，或者progressbar，以后再修改分类吧。\n\n1. FloatingActionButton \n\n   悬浮式的actionbutton，效果：\n\n   ![floatingbutton](https://github.com/futuresimple/android-floating-action-button/raw/master/screenshots/menu.gif)\n\n   github:https://github.com/futuresimple/android-floating-action-button\n\n2. floatingButton\n\n   类似上面，这是一个可以监视滑动事件的floatingButton，效果：\n\n   ![button](https://github.com/makovkastar/FloatingActionButton/raw/master/art/demo.gif)\n\n   github:https://github.com/makovkastar/FloatingActionButton\n\n3. circularProgressbutton\n\n   带有圆形进度的button，效果：\n\n   ![button](https://github.com/dmytrodanylyk/circular-progress-button/raw/master/screenshots/intro.gif)\n\n   github:https://github.com/dmytrodanylyk/circular-progress-button\n\n4. FloatingButton\n\n   这个真是个全面的悬浮按钮button，效果：\n\n   ![button](https://github.com/Clans/FloatingActionButton/raw/master/screenshots/menu_custom_opened.png)\n\n   ![button](https://github.com/Clans/FloatingActionButton/raw/master/screenshots/progress_background.png)\n\n   github:https://github.com/Clans/FloatingActionButton\n\n5. SwitchButton\n\n   包含各式各样的开关button，效果：\n\n   ![switch](https://github.com/kyleduo/SwitchButton/raw/master/preview/demo_140.jpg)\n\n   github:https://github.com/kyleduo/SwitchButton\n\n6. ProcessButton\n\n   带有进度加载的Button，效果：\n\n   ![button](https://github.com/dmytrodanylyk/android-process-button/raw/master/screenshots/sample1_small2.gif)\n\n   github:https://github.com/dmytrodanylyk/android-process-button\n\n7. ShineButton\n\n   点赞的Button，效果：\n\n   ![button](https://github.com/ChadCSong/ShineButton/raw/master/demo_shine_others.gif)\n\n   github:https://github.com/ChadCSong/ShineButton\n\n8. ToggleButton\n\n   类似IOS开关效果的button，效果：\n\n   ![button](https://github.com/zcweng/ToggleButton/raw/master/ToggleButtonSample/21879.gif)\n\n   github:https://github.com/zcweng/ToggleButton\n\n9. FlatButton\n\n   扁平风格的可变色button，效果：\n\n   ![button](https://raw.githubusercontent.com/hoang8f/android-flat-button/master/screenshot/screenshot.gif)\n\n   github:https://github.com/hoang8f/android-flat-button\n\n10. RapidFloatingButton\n\n  好多floatingbutton啊，这个也是大同小异，效果：\n\n  ![button](https://raw.githubusercontent.com/wangjiegulu/RapidFloatingActionButton/master/screenshot/rfab_card_view.gif)\n\n  github:https://github.com/wangjiegulu/RapidFloatingActionButton\n\n11. ArrowDoanloadButton\n\n    准确的说这个是progressbutton更合适，效果：\n\n    ![button](https://github.com/fenjuly/ArrowDownloadButton/raw/master/screenshots/arrowdownloadbutton.gif)\n\n    github:https://github.com/fenjuly/ArrowDownloadButton\n\n12. fab\n\n    可以说是拥有不同效果的floatingbutton，效果：\n\n    ![button](https://github.com/Scalified/fab/raw/master/demo/animation_fade_in_fade_out.gif)\n\n    github:https://github.com/Scalified/fab\n\n13. FloatingNavButton\n\n    悬浮式的导航菜单按钮button，效果：\n\n    ![button](https://raw.githubusercontent.com/andremion/Floating-Navigation-View/master/art/sample.gif)\n\n    github:https://github.com/andremion/Floating-Navigation-View\n\n14. FabButton\n\n    都是floating了，效果：\n\n    ![button](https://github.com/ckurtm/FabButton/raw/master/example.gif?raw=true)\n\n    github:https://github.com/ckurtm/FabButton\n\n15. JellyToggleButton\n\n    花样繁多的togglebutton，效果：\n\n    ![button](https://github.com/Nightonke/JellyToggleButton/raw/master/img/JellyToggleButton4.gif?raw=true)\n\n    github:https://github.com/Nightonke/JellyToggleButton\n\n16. fab\n\n    又是一个fab，效果：\n\n    ![button](https://github.com/konifar/fab-transformation/raw/master/art/transform_to_toolbar.gif)\n\n    github:https://github.com/konifar/fab-transformation\n\n17. morphingButton\n\n    进度变形的button，效果：\n\n    ![button](https://github.com/dmytrodanylyk/android-morphing-button/raw/master/screenshots/intro1.gif)\n\n    github:https://github.com/dmytrodanylyk/android-morphing-button\n\n18. gooeyMenu\n\n    粘性泡泡效果的菜单button，效果：\n\n    ![button](https://github.com/anshulagarwal2k/GooeyMenu/raw/master/gooeyeffect.gif)\n\n    github:https://github.com/anshulagarwal2k/GooeyMenu\n\n19. SatelliteMenu\n\n    卫星菜单button，效果：\n\n    ![button](https://camo.githubusercontent.com/69c60ccfcc45203014ad793da924d2ca10ef0a65/687474703a2f2f692e696d6775722e636f6d2f3049676b6b74642e706e67)\n\n    github:https://github.com/siyamed/android-satellite-menu\n\n20. TagGroup\n\n    tag标签，效果：\n\n    ![button](https://camo.githubusercontent.com/8adbb5c44c656151cb108ada6d1383e2c6af38b7/687474703a2f2f7777342e73696e61696d672e636e2f6c617267652f62636532646561396a7731657362736279397635666a323075303077386a78782e6a7067)\n\n    github:https://github.com/2dxgujun/AndroidTagGroup/\n\n21. ArcMenu\n\n    环形菜单button，效果：\n\n    ![button](https://camo.githubusercontent.com/7c3d707678e6aa187cdf2ee3ac701d77fba92f48/68747470733a2f2f646c2e64726f70626f782e636f6d2f752f31313336393638372f70726576696577312e706e67)\n\n    github:https://github.com/daCapricorn/ArcMenu\n\n22. StateButton\n\n    包含多种select效果的button，效果：\n\n    ![button](https://github.com/niniloveyou/StateButton/raw/master/stateButton.gif)\n\n    github:https://github.com/niniloveyou/StateButton\n\n23. AllAnagleButton\n\n    综合卫星菜单和环形菜单的一个button，效果：\n\n    ![button](https://github.com/uin3566/AllAngleExpandableButton/raw/master/screenshot/demo.gif)\n\n    github:https://github.com/uin3566/AllAngleExpandableButton\n\n24. ShareButton\n\n    简单含有分享模块的button，效果：\n\n    ![button](https://github.com/kayan1990/ShareButton/raw/master/ShareButton/gif/sharebutton.gif)\n\n    github:https://github.com/kayan1990/ShareButton\n\n25. faceOffButton\n\n    一个修改带有笑脸的togglebutton，效果：\n\n    ![button](https://github.com/Nightonke/FaceOffToggleButton/raw/master/img/Animation.gif?raw=true)\n\n    github:https://github.com/Nightonke/FaceOffToggleButton\n\n26. undoBar\n\n    带有撤销功能的button，效果：\n\n    ![button](https://camo.githubusercontent.com/a32255c0a1f5abe56607d46bb9782b8f338fd9e3/68747470733a2f2f7261772e6769746875622e636f6d2f6a656e7a7a2f416e64726f69642d556e646f4261722f6d61737465722f6173736574732f53637265656e73686f74352e706e67)\n\n    github:https://github.com/jenzz/Android-UndoBar\n\n27. BootstrapButton\n\n    具有字形效果的button，效果：\n\n    ![button](https://camo.githubusercontent.com/51755d59ed6fd53158a0d84696e6d184c3a6f4d5/68747470733a2f2f7261772e6769746875622e636f6d2f426561726465642d48656e2f416e64726f69642d426f6f7473747261702f6d61737465722f696d616765732f626f6f7473747261705f627574746f6e2e706e67)\n\n    github:https://github.com/Bearded-Hen/Android-Bootstrap\n\n28. LiquidButton\n\n    又是一个加载的button，效果：\n\n    ![button](https://camo.githubusercontent.com/6e51af802823444540390be079ecad75ef60019e/68747470733a2f2f6431337961637572716a676172612e636c6f756466726f6e742e6e65742f75736572732f3333303137342f73637265656e73686f74732f323639353630302f636f6d705f322e676966)\n\n    github:https://github.com/yoruriko/LiquidButton\n\n29. MagicButton\n\n    简单的变形button，效果：\n\n    ![button](https://github.com/daniel-martins-IR/MagicButton/raw/master/app/src/main/res/drawable/giphy.gif)\n\n    github:https://github.com/daniel-martins-ir/MagicButton\n\n30. RingButton\n\n    可以一分为二的button，各自有各自的图标和点击事件，效果：\n\n    ![button](https://github.com/yankai-victor/RingButton/raw/master/image/Screenshot.png)\n\n    github:https://github.com/yankai-victor/RingButton\n\n31. ​","source":"_posts/Android开源控件搜集--Button.md","raw":"---\ntitle: \"Android开源控件搜集----Button\"\ndate: 2017-03-27 16:57\nauthor: 冰路梦\ntag:\n    - Android\ncategories:\n    - Android\n---\n# Android开源控件搜集--Button\n\n**Note：**本篇博客长期维护更新，欢迎各位网友共同合作，共享知识与技术。\n\n本篇博客主要搜集个人任务比较优秀的Android开源控件，大多来自github，并附上链接，自己学习之余，亦希望于大家有所帮助。\n\nAndroid的控件还算比较多，官方和第三方自定义优秀控件数不胜数，搜集难免不全，逐步更新丰富吧。\n\n## Button\n\nButton可以说是Android中仅次于Text View的，比较重要的一个控件，下面主要是搜集一些第三方优化效果的Button,其中有的也算是菜单Menu，或者progressbar，以后再修改分类吧。\n\n1. FloatingActionButton \n\n   悬浮式的actionbutton，效果：\n\n   ![floatingbutton](https://github.com/futuresimple/android-floating-action-button/raw/master/screenshots/menu.gif)\n\n   github:https://github.com/futuresimple/android-floating-action-button\n\n2. floatingButton\n\n   类似上面，这是一个可以监视滑动事件的floatingButton，效果：\n\n   ![button](https://github.com/makovkastar/FloatingActionButton/raw/master/art/demo.gif)\n\n   github:https://github.com/makovkastar/FloatingActionButton\n\n3. circularProgressbutton\n\n   带有圆形进度的button，效果：\n\n   ![button](https://github.com/dmytrodanylyk/circular-progress-button/raw/master/screenshots/intro.gif)\n\n   github:https://github.com/dmytrodanylyk/circular-progress-button\n\n4. FloatingButton\n\n   这个真是个全面的悬浮按钮button，效果：\n\n   ![button](https://github.com/Clans/FloatingActionButton/raw/master/screenshots/menu_custom_opened.png)\n\n   ![button](https://github.com/Clans/FloatingActionButton/raw/master/screenshots/progress_background.png)\n\n   github:https://github.com/Clans/FloatingActionButton\n\n5. SwitchButton\n\n   包含各式各样的开关button，效果：\n\n   ![switch](https://github.com/kyleduo/SwitchButton/raw/master/preview/demo_140.jpg)\n\n   github:https://github.com/kyleduo/SwitchButton\n\n6. ProcessButton\n\n   带有进度加载的Button，效果：\n\n   ![button](https://github.com/dmytrodanylyk/android-process-button/raw/master/screenshots/sample1_small2.gif)\n\n   github:https://github.com/dmytrodanylyk/android-process-button\n\n7. ShineButton\n\n   点赞的Button，效果：\n\n   ![button](https://github.com/ChadCSong/ShineButton/raw/master/demo_shine_others.gif)\n\n   github:https://github.com/ChadCSong/ShineButton\n\n8. ToggleButton\n\n   类似IOS开关效果的button，效果：\n\n   ![button](https://github.com/zcweng/ToggleButton/raw/master/ToggleButtonSample/21879.gif)\n\n   github:https://github.com/zcweng/ToggleButton\n\n9. FlatButton\n\n   扁平风格的可变色button，效果：\n\n   ![button](https://raw.githubusercontent.com/hoang8f/android-flat-button/master/screenshot/screenshot.gif)\n\n   github:https://github.com/hoang8f/android-flat-button\n\n10. RapidFloatingButton\n\n  好多floatingbutton啊，这个也是大同小异，效果：\n\n  ![button](https://raw.githubusercontent.com/wangjiegulu/RapidFloatingActionButton/master/screenshot/rfab_card_view.gif)\n\n  github:https://github.com/wangjiegulu/RapidFloatingActionButton\n\n11. ArrowDoanloadButton\n\n    准确的说这个是progressbutton更合适，效果：\n\n    ![button](https://github.com/fenjuly/ArrowDownloadButton/raw/master/screenshots/arrowdownloadbutton.gif)\n\n    github:https://github.com/fenjuly/ArrowDownloadButton\n\n12. fab\n\n    可以说是拥有不同效果的floatingbutton，效果：\n\n    ![button](https://github.com/Scalified/fab/raw/master/demo/animation_fade_in_fade_out.gif)\n\n    github:https://github.com/Scalified/fab\n\n13. FloatingNavButton\n\n    悬浮式的导航菜单按钮button，效果：\n\n    ![button](https://raw.githubusercontent.com/andremion/Floating-Navigation-View/master/art/sample.gif)\n\n    github:https://github.com/andremion/Floating-Navigation-View\n\n14. FabButton\n\n    都是floating了，效果：\n\n    ![button](https://github.com/ckurtm/FabButton/raw/master/example.gif?raw=true)\n\n    github:https://github.com/ckurtm/FabButton\n\n15. JellyToggleButton\n\n    花样繁多的togglebutton，效果：\n\n    ![button](https://github.com/Nightonke/JellyToggleButton/raw/master/img/JellyToggleButton4.gif?raw=true)\n\n    github:https://github.com/Nightonke/JellyToggleButton\n\n16. fab\n\n    又是一个fab，效果：\n\n    ![button](https://github.com/konifar/fab-transformation/raw/master/art/transform_to_toolbar.gif)\n\n    github:https://github.com/konifar/fab-transformation\n\n17. morphingButton\n\n    进度变形的button，效果：\n\n    ![button](https://github.com/dmytrodanylyk/android-morphing-button/raw/master/screenshots/intro1.gif)\n\n    github:https://github.com/dmytrodanylyk/android-morphing-button\n\n18. gooeyMenu\n\n    粘性泡泡效果的菜单button，效果：\n\n    ![button](https://github.com/anshulagarwal2k/GooeyMenu/raw/master/gooeyeffect.gif)\n\n    github:https://github.com/anshulagarwal2k/GooeyMenu\n\n19. SatelliteMenu\n\n    卫星菜单button，效果：\n\n    ![button](https://camo.githubusercontent.com/69c60ccfcc45203014ad793da924d2ca10ef0a65/687474703a2f2f692e696d6775722e636f6d2f3049676b6b74642e706e67)\n\n    github:https://github.com/siyamed/android-satellite-menu\n\n20. TagGroup\n\n    tag标签，效果：\n\n    ![button](https://camo.githubusercontent.com/8adbb5c44c656151cb108ada6d1383e2c6af38b7/687474703a2f2f7777342e73696e61696d672e636e2f6c617267652f62636532646561396a7731657362736279397635666a323075303077386a78782e6a7067)\n\n    github:https://github.com/2dxgujun/AndroidTagGroup/\n\n21. ArcMenu\n\n    环形菜单button，效果：\n\n    ![button](https://camo.githubusercontent.com/7c3d707678e6aa187cdf2ee3ac701d77fba92f48/68747470733a2f2f646c2e64726f70626f782e636f6d2f752f31313336393638372f70726576696577312e706e67)\n\n    github:https://github.com/daCapricorn/ArcMenu\n\n22. StateButton\n\n    包含多种select效果的button，效果：\n\n    ![button](https://github.com/niniloveyou/StateButton/raw/master/stateButton.gif)\n\n    github:https://github.com/niniloveyou/StateButton\n\n23. AllAnagleButton\n\n    综合卫星菜单和环形菜单的一个button，效果：\n\n    ![button](https://github.com/uin3566/AllAngleExpandableButton/raw/master/screenshot/demo.gif)\n\n    github:https://github.com/uin3566/AllAngleExpandableButton\n\n24. ShareButton\n\n    简单含有分享模块的button，效果：\n\n    ![button](https://github.com/kayan1990/ShareButton/raw/master/ShareButton/gif/sharebutton.gif)\n\n    github:https://github.com/kayan1990/ShareButton\n\n25. faceOffButton\n\n    一个修改带有笑脸的togglebutton，效果：\n\n    ![button](https://github.com/Nightonke/FaceOffToggleButton/raw/master/img/Animation.gif?raw=true)\n\n    github:https://github.com/Nightonke/FaceOffToggleButton\n\n26. undoBar\n\n    带有撤销功能的button，效果：\n\n    ![button](https://camo.githubusercontent.com/a32255c0a1f5abe56607d46bb9782b8f338fd9e3/68747470733a2f2f7261772e6769746875622e636f6d2f6a656e7a7a2f416e64726f69642d556e646f4261722f6d61737465722f6173736574732f53637265656e73686f74352e706e67)\n\n    github:https://github.com/jenzz/Android-UndoBar\n\n27. BootstrapButton\n\n    具有字形效果的button，效果：\n\n    ![button](https://camo.githubusercontent.com/51755d59ed6fd53158a0d84696e6d184c3a6f4d5/68747470733a2f2f7261772e6769746875622e636f6d2f426561726465642d48656e2f416e64726f69642d426f6f7473747261702f6d61737465722f696d616765732f626f6f7473747261705f627574746f6e2e706e67)\n\n    github:https://github.com/Bearded-Hen/Android-Bootstrap\n\n28. LiquidButton\n\n    又是一个加载的button，效果：\n\n    ![button](https://camo.githubusercontent.com/6e51af802823444540390be079ecad75ef60019e/68747470733a2f2f6431337961637572716a676172612e636c6f756466726f6e742e6e65742f75736572732f3333303137342f73637265656e73686f74732f323639353630302f636f6d705f322e676966)\n\n    github:https://github.com/yoruriko/LiquidButton\n\n29. MagicButton\n\n    简单的变形button，效果：\n\n    ![button](https://github.com/daniel-martins-IR/MagicButton/raw/master/app/src/main/res/drawable/giphy.gif)\n\n    github:https://github.com/daniel-martins-ir/MagicButton\n\n30. RingButton\n\n    可以一分为二的button，各自有各自的图标和点击事件，效果：\n\n    ![button](https://github.com/yankai-victor/RingButton/raw/master/image/Screenshot.png)\n\n    github:https://github.com/yankai-victor/RingButton\n\n31. ​","slug":"Android开源控件搜集--Button","published":1,"updated":"2017-03-28T09:40:14.951Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0xj1ne50001scow6tdd9i33","content":"<h1 id=\"Android开源控件搜集–Button\"><a href=\"#Android开源控件搜集–Button\" class=\"headerlink\" title=\"Android开源控件搜集–Button\"></a>Android开源控件搜集–Button</h1><p><strong>Note：</strong>本篇博客长期维护更新，欢迎各位网友共同合作，共享知识与技术。</p>\n<p>本篇博客主要搜集个人任务比较优秀的Android开源控件，大多来自github，并附上链接，自己学习之余，亦希望于大家有所帮助。</p>\n<p>Android的控件还算比较多，官方和第三方自定义优秀控件数不胜数，搜集难免不全，逐步更新丰富吧。</p>\n<h2 id=\"Button\"><a href=\"#Button\" class=\"headerlink\" title=\"Button\"></a>Button</h2><p>Button可以说是Android中仅次于Text View的，比较重要的一个控件，下面主要是搜集一些第三方优化效果的Button,其中有的也算是菜单Menu，或者progressbar，以后再修改分类吧。</p>\n<ol>\n<li><p>FloatingActionButton </p>\n<p>悬浮式的actionbutton，效果：</p>\n<p><img src=\"https://github.com/futuresimple/android-floating-action-button/raw/master/screenshots/menu.gif\" alt=\"floatingbutton\"></p>\n<p>github:<a href=\"https://github.com/futuresimple/android-floating-action-button\" target=\"_blank\" rel=\"external\">https://github.com/futuresimple/android-floating-action-button</a></p>\n</li>\n<li><p>floatingButton</p>\n<p>类似上面，这是一个可以监视滑动事件的floatingButton，效果：</p>\n<p><img src=\"https://github.com/makovkastar/FloatingActionButton/raw/master/art/demo.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/makovkastar/FloatingActionButton\" target=\"_blank\" rel=\"external\">https://github.com/makovkastar/FloatingActionButton</a></p>\n</li>\n<li><p>circularProgressbutton</p>\n<p>带有圆形进度的button，效果：</p>\n<p><img src=\"https://github.com/dmytrodanylyk/circular-progress-button/raw/master/screenshots/intro.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/dmytrodanylyk/circular-progress-button\" target=\"_blank\" rel=\"external\">https://github.com/dmytrodanylyk/circular-progress-button</a></p>\n</li>\n<li><p>FloatingButton</p>\n<p>这个真是个全面的悬浮按钮button，效果：</p>\n<p><img src=\"https://github.com/Clans/FloatingActionButton/raw/master/screenshots/menu_custom_opened.png\" alt=\"button\"></p>\n<p><img src=\"https://github.com/Clans/FloatingActionButton/raw/master/screenshots/progress_background.png\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/Clans/FloatingActionButton\" target=\"_blank\" rel=\"external\">https://github.com/Clans/FloatingActionButton</a></p>\n</li>\n<li><p>SwitchButton</p>\n<p>包含各式各样的开关button，效果：</p>\n<p><img src=\"https://github.com/kyleduo/SwitchButton/raw/master/preview/demo_140.jpg\" alt=\"switch\"></p>\n<p>github:<a href=\"https://github.com/kyleduo/SwitchButton\" target=\"_blank\" rel=\"external\">https://github.com/kyleduo/SwitchButton</a></p>\n</li>\n<li><p>ProcessButton</p>\n<p>带有进度加载的Button，效果：</p>\n<p><img src=\"https://github.com/dmytrodanylyk/android-process-button/raw/master/screenshots/sample1_small2.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/dmytrodanylyk/android-process-button\" target=\"_blank\" rel=\"external\">https://github.com/dmytrodanylyk/android-process-button</a></p>\n</li>\n<li><p>ShineButton</p>\n<p>点赞的Button，效果：</p>\n<p><img src=\"https://github.com/ChadCSong/ShineButton/raw/master/demo_shine_others.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/ChadCSong/ShineButton\" target=\"_blank\" rel=\"external\">https://github.com/ChadCSong/ShineButton</a></p>\n</li>\n<li><p>ToggleButton</p>\n<p>类似IOS开关效果的button，效果：</p>\n<p><img src=\"https://github.com/zcweng/ToggleButton/raw/master/ToggleButtonSample/21879.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/zcweng/ToggleButton\" target=\"_blank\" rel=\"external\">https://github.com/zcweng/ToggleButton</a></p>\n</li>\n<li><p>FlatButton</p>\n<p>扁平风格的可变色button，效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/hoang8f/android-flat-button/master/screenshot/screenshot.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/hoang8f/android-flat-button\" target=\"_blank\" rel=\"external\">https://github.com/hoang8f/android-flat-button</a></p>\n</li>\n<li><p>RapidFloatingButton</p>\n<p>好多floatingbutton啊，这个也是大同小异，效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/wangjiegulu/RapidFloatingActionButton/master/screenshot/rfab_card_view.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/wangjiegulu/RapidFloatingActionButton\" target=\"_blank\" rel=\"external\">https://github.com/wangjiegulu/RapidFloatingActionButton</a></p>\n</li>\n<li><p>ArrowDoanloadButton</p>\n<p>准确的说这个是progressbutton更合适，效果：</p>\n<p><img src=\"https://github.com/fenjuly/ArrowDownloadButton/raw/master/screenshots/arrowdownloadbutton.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/fenjuly/ArrowDownloadButton\" target=\"_blank\" rel=\"external\">https://github.com/fenjuly/ArrowDownloadButton</a></p>\n</li>\n<li><p>fab</p>\n<p>可以说是拥有不同效果的floatingbutton，效果：</p>\n<p><img src=\"https://github.com/Scalified/fab/raw/master/demo/animation_fade_in_fade_out.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/Scalified/fab\" target=\"_blank\" rel=\"external\">https://github.com/Scalified/fab</a></p>\n</li>\n<li><p>FloatingNavButton</p>\n<p>悬浮式的导航菜单按钮button，效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/andremion/Floating-Navigation-View/master/art/sample.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/andremion/Floating-Navigation-View\" target=\"_blank\" rel=\"external\">https://github.com/andremion/Floating-Navigation-View</a></p>\n</li>\n<li><p>FabButton</p>\n<p>都是floating了，效果：</p>\n<p><img src=\"https://github.com/ckurtm/FabButton/raw/master/example.gif?raw=true\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/ckurtm/FabButton\" target=\"_blank\" rel=\"external\">https://github.com/ckurtm/FabButton</a></p>\n</li>\n<li><p>JellyToggleButton</p>\n<p>花样繁多的togglebutton，效果：</p>\n<p><img src=\"https://github.com/Nightonke/JellyToggleButton/raw/master/img/JellyToggleButton4.gif?raw=true\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/Nightonke/JellyToggleButton\" target=\"_blank\" rel=\"external\">https://github.com/Nightonke/JellyToggleButton</a></p>\n</li>\n<li><p>fab</p>\n<p>又是一个fab，效果：</p>\n<p><img src=\"https://github.com/konifar/fab-transformation/raw/master/art/transform_to_toolbar.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/konifar/fab-transformation\" target=\"_blank\" rel=\"external\">https://github.com/konifar/fab-transformation</a></p>\n</li>\n<li><p>morphingButton</p>\n<p>进度变形的button，效果：</p>\n<p><img src=\"https://github.com/dmytrodanylyk/android-morphing-button/raw/master/screenshots/intro1.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/dmytrodanylyk/android-morphing-button\" target=\"_blank\" rel=\"external\">https://github.com/dmytrodanylyk/android-morphing-button</a></p>\n</li>\n<li><p>gooeyMenu</p>\n<p>粘性泡泡效果的菜单button，效果：</p>\n<p><img src=\"https://github.com/anshulagarwal2k/GooeyMenu/raw/master/gooeyeffect.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/anshulagarwal2k/GooeyMenu\" target=\"_blank\" rel=\"external\">https://github.com/anshulagarwal2k/GooeyMenu</a></p>\n</li>\n<li><p>SatelliteMenu</p>\n<p>卫星菜单button，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/69c60ccfcc45203014ad793da924d2ca10ef0a65/687474703a2f2f692e696d6775722e636f6d2f3049676b6b74642e706e67\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/siyamed/android-satellite-menu\" target=\"_blank\" rel=\"external\">https://github.com/siyamed/android-satellite-menu</a></p>\n</li>\n<li><p>TagGroup</p>\n<p>tag标签，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/8adbb5c44c656151cb108ada6d1383e2c6af38b7/687474703a2f2f7777342e73696e61696d672e636e2f6c617267652f62636532646561396a7731657362736279397635666a323075303077386a78782e6a7067\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/2dxgujun/AndroidTagGroup/\" target=\"_blank\" rel=\"external\">https://github.com/2dxgujun/AndroidTagGroup/</a></p>\n</li>\n<li><p>ArcMenu</p>\n<p>环形菜单button，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/7c3d707678e6aa187cdf2ee3ac701d77fba92f48/68747470733a2f2f646c2e64726f70626f782e636f6d2f752f31313336393638372f70726576696577312e706e67\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/daCapricorn/ArcMenu\" target=\"_blank\" rel=\"external\">https://github.com/daCapricorn/ArcMenu</a></p>\n</li>\n<li><p>StateButton</p>\n<p>包含多种select效果的button，效果：</p>\n<p><img src=\"https://github.com/niniloveyou/StateButton/raw/master/stateButton.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/niniloveyou/StateButton\" target=\"_blank\" rel=\"external\">https://github.com/niniloveyou/StateButton</a></p>\n</li>\n<li><p>AllAnagleButton</p>\n<p>综合卫星菜单和环形菜单的一个button，效果：</p>\n<p><img src=\"https://github.com/uin3566/AllAngleExpandableButton/raw/master/screenshot/demo.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/uin3566/AllAngleExpandableButton\" target=\"_blank\" rel=\"external\">https://github.com/uin3566/AllAngleExpandableButton</a></p>\n</li>\n<li><p>ShareButton</p>\n<p>简单含有分享模块的button，效果：</p>\n<p><img src=\"https://github.com/kayan1990/ShareButton/raw/master/ShareButton/gif/sharebutton.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/kayan1990/ShareButton\" target=\"_blank\" rel=\"external\">https://github.com/kayan1990/ShareButton</a></p>\n</li>\n<li><p>faceOffButton</p>\n<p>一个修改带有笑脸的togglebutton，效果：</p>\n<p><img src=\"https://github.com/Nightonke/FaceOffToggleButton/raw/master/img/Animation.gif?raw=true\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/Nightonke/FaceOffToggleButton\" target=\"_blank\" rel=\"external\">https://github.com/Nightonke/FaceOffToggleButton</a></p>\n</li>\n<li><p>undoBar</p>\n<p>带有撤销功能的button，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/a32255c0a1f5abe56607d46bb9782b8f338fd9e3/68747470733a2f2f7261772e6769746875622e636f6d2f6a656e7a7a2f416e64726f69642d556e646f4261722f6d61737465722f6173736574732f53637265656e73686f74352e706e67\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/jenzz/Android-UndoBar\" target=\"_blank\" rel=\"external\">https://github.com/jenzz/Android-UndoBar</a></p>\n</li>\n<li><p>BootstrapButton</p>\n<p>具有字形效果的button，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/51755d59ed6fd53158a0d84696e6d184c3a6f4d5/68747470733a2f2f7261772e6769746875622e636f6d2f426561726465642d48656e2f416e64726f69642d426f6f7473747261702f6d61737465722f696d616765732f626f6f7473747261705f627574746f6e2e706e67\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/Bearded-Hen/Android-Bootstrap\" target=\"_blank\" rel=\"external\">https://github.com/Bearded-Hen/Android-Bootstrap</a></p>\n</li>\n<li><p>LiquidButton</p>\n<p>又是一个加载的button，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/6e51af802823444540390be079ecad75ef60019e/68747470733a2f2f6431337961637572716a676172612e636c6f756466726f6e742e6e65742f75736572732f3333303137342f73637265656e73686f74732f323639353630302f636f6d705f322e676966\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/yoruriko/LiquidButton\" target=\"_blank\" rel=\"external\">https://github.com/yoruriko/LiquidButton</a></p>\n</li>\n<li><p>MagicButton</p>\n<p>简单的变形button，效果：</p>\n<p><img src=\"https://github.com/daniel-martins-IR/MagicButton/raw/master/app/src/main/res/drawable/giphy.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/daniel-martins-ir/MagicButton\" target=\"_blank\" rel=\"external\">https://github.com/daniel-martins-ir/MagicButton</a></p>\n</li>\n<li><p>RingButton</p>\n<p>可以一分为二的button，各自有各自的图标和点击事件，效果：</p>\n<p><img src=\"https://github.com/yankai-victor/RingButton/raw/master/image/Screenshot.png\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/yankai-victor/RingButton\" target=\"_blank\" rel=\"external\">https://github.com/yankai-victor/RingButton</a></p>\n</li>\n<li><p>​</p>\n</li>\n</ol>\n","excerpt":"","more":"<h1 id=\"Android开源控件搜集–Button\"><a href=\"#Android开源控件搜集–Button\" class=\"headerlink\" title=\"Android开源控件搜集–Button\"></a>Android开源控件搜集–Button</h1><p><strong>Note：</strong>本篇博客长期维护更新，欢迎各位网友共同合作，共享知识与技术。</p>\n<p>本篇博客主要搜集个人任务比较优秀的Android开源控件，大多来自github，并附上链接，自己学习之余，亦希望于大家有所帮助。</p>\n<p>Android的控件还算比较多，官方和第三方自定义优秀控件数不胜数，搜集难免不全，逐步更新丰富吧。</p>\n<h2 id=\"Button\"><a href=\"#Button\" class=\"headerlink\" title=\"Button\"></a>Button</h2><p>Button可以说是Android中仅次于Text View的，比较重要的一个控件，下面主要是搜集一些第三方优化效果的Button,其中有的也算是菜单Menu，或者progressbar，以后再修改分类吧。</p>\n<ol>\n<li><p>FloatingActionButton </p>\n<p>悬浮式的actionbutton，效果：</p>\n<p><img src=\"https://github.com/futuresimple/android-floating-action-button/raw/master/screenshots/menu.gif\" alt=\"floatingbutton\"></p>\n<p>github:<a href=\"https://github.com/futuresimple/android-floating-action-button\">https://github.com/futuresimple/android-floating-action-button</a></p>\n</li>\n<li><p>floatingButton</p>\n<p>类似上面，这是一个可以监视滑动事件的floatingButton，效果：</p>\n<p><img src=\"https://github.com/makovkastar/FloatingActionButton/raw/master/art/demo.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/makovkastar/FloatingActionButton\">https://github.com/makovkastar/FloatingActionButton</a></p>\n</li>\n<li><p>circularProgressbutton</p>\n<p>带有圆形进度的button，效果：</p>\n<p><img src=\"https://github.com/dmytrodanylyk/circular-progress-button/raw/master/screenshots/intro.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/dmytrodanylyk/circular-progress-button\">https://github.com/dmytrodanylyk/circular-progress-button</a></p>\n</li>\n<li><p>FloatingButton</p>\n<p>这个真是个全面的悬浮按钮button，效果：</p>\n<p><img src=\"https://github.com/Clans/FloatingActionButton/raw/master/screenshots/menu_custom_opened.png\" alt=\"button\"></p>\n<p><img src=\"https://github.com/Clans/FloatingActionButton/raw/master/screenshots/progress_background.png\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/Clans/FloatingActionButton\">https://github.com/Clans/FloatingActionButton</a></p>\n</li>\n<li><p>SwitchButton</p>\n<p>包含各式各样的开关button，效果：</p>\n<p><img src=\"https://github.com/kyleduo/SwitchButton/raw/master/preview/demo_140.jpg\" alt=\"switch\"></p>\n<p>github:<a href=\"https://github.com/kyleduo/SwitchButton\">https://github.com/kyleduo/SwitchButton</a></p>\n</li>\n<li><p>ProcessButton</p>\n<p>带有进度加载的Button，效果：</p>\n<p><img src=\"https://github.com/dmytrodanylyk/android-process-button/raw/master/screenshots/sample1_small2.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/dmytrodanylyk/android-process-button\">https://github.com/dmytrodanylyk/android-process-button</a></p>\n</li>\n<li><p>ShineButton</p>\n<p>点赞的Button，效果：</p>\n<p><img src=\"https://github.com/ChadCSong/ShineButton/raw/master/demo_shine_others.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/ChadCSong/ShineButton\">https://github.com/ChadCSong/ShineButton</a></p>\n</li>\n<li><p>ToggleButton</p>\n<p>类似IOS开关效果的button，效果：</p>\n<p><img src=\"https://github.com/zcweng/ToggleButton/raw/master/ToggleButtonSample/21879.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/zcweng/ToggleButton\">https://github.com/zcweng/ToggleButton</a></p>\n</li>\n<li><p>FlatButton</p>\n<p>扁平风格的可变色button，效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/hoang8f/android-flat-button/master/screenshot/screenshot.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/hoang8f/android-flat-button\">https://github.com/hoang8f/android-flat-button</a></p>\n</li>\n<li><p>RapidFloatingButton</p>\n<p>好多floatingbutton啊，这个也是大同小异，效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/wangjiegulu/RapidFloatingActionButton/master/screenshot/rfab_card_view.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/wangjiegulu/RapidFloatingActionButton\">https://github.com/wangjiegulu/RapidFloatingActionButton</a></p>\n</li>\n<li><p>ArrowDoanloadButton</p>\n<p>准确的说这个是progressbutton更合适，效果：</p>\n<p><img src=\"https://github.com/fenjuly/ArrowDownloadButton/raw/master/screenshots/arrowdownloadbutton.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/fenjuly/ArrowDownloadButton\">https://github.com/fenjuly/ArrowDownloadButton</a></p>\n</li>\n<li><p>fab</p>\n<p>可以说是拥有不同效果的floatingbutton，效果：</p>\n<p><img src=\"https://github.com/Scalified/fab/raw/master/demo/animation_fade_in_fade_out.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/Scalified/fab\">https://github.com/Scalified/fab</a></p>\n</li>\n<li><p>FloatingNavButton</p>\n<p>悬浮式的导航菜单按钮button，效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/andremion/Floating-Navigation-View/master/art/sample.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/andremion/Floating-Navigation-View\">https://github.com/andremion/Floating-Navigation-View</a></p>\n</li>\n<li><p>FabButton</p>\n<p>都是floating了，效果：</p>\n<p><img src=\"https://github.com/ckurtm/FabButton/raw/master/example.gif?raw=true\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/ckurtm/FabButton\">https://github.com/ckurtm/FabButton</a></p>\n</li>\n<li><p>JellyToggleButton</p>\n<p>花样繁多的togglebutton，效果：</p>\n<p><img src=\"https://github.com/Nightonke/JellyToggleButton/raw/master/img/JellyToggleButton4.gif?raw=true\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/Nightonke/JellyToggleButton\">https://github.com/Nightonke/JellyToggleButton</a></p>\n</li>\n<li><p>fab</p>\n<p>又是一个fab，效果：</p>\n<p><img src=\"https://github.com/konifar/fab-transformation/raw/master/art/transform_to_toolbar.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/konifar/fab-transformation\">https://github.com/konifar/fab-transformation</a></p>\n</li>\n<li><p>morphingButton</p>\n<p>进度变形的button，效果：</p>\n<p><img src=\"https://github.com/dmytrodanylyk/android-morphing-button/raw/master/screenshots/intro1.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/dmytrodanylyk/android-morphing-button\">https://github.com/dmytrodanylyk/android-morphing-button</a></p>\n</li>\n<li><p>gooeyMenu</p>\n<p>粘性泡泡效果的菜单button，效果：</p>\n<p><img src=\"https://github.com/anshulagarwal2k/GooeyMenu/raw/master/gooeyeffect.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/anshulagarwal2k/GooeyMenu\">https://github.com/anshulagarwal2k/GooeyMenu</a></p>\n</li>\n<li><p>SatelliteMenu</p>\n<p>卫星菜单button，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/69c60ccfcc45203014ad793da924d2ca10ef0a65/687474703a2f2f692e696d6775722e636f6d2f3049676b6b74642e706e67\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/siyamed/android-satellite-menu\">https://github.com/siyamed/android-satellite-menu</a></p>\n</li>\n<li><p>TagGroup</p>\n<p>tag标签，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/8adbb5c44c656151cb108ada6d1383e2c6af38b7/687474703a2f2f7777342e73696e61696d672e636e2f6c617267652f62636532646561396a7731657362736279397635666a323075303077386a78782e6a7067\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/2dxgujun/AndroidTagGroup/\">https://github.com/2dxgujun/AndroidTagGroup/</a></p>\n</li>\n<li><p>ArcMenu</p>\n<p>环形菜单button，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/7c3d707678e6aa187cdf2ee3ac701d77fba92f48/68747470733a2f2f646c2e64726f70626f782e636f6d2f752f31313336393638372f70726576696577312e706e67\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/daCapricorn/ArcMenu\">https://github.com/daCapricorn/ArcMenu</a></p>\n</li>\n<li><p>StateButton</p>\n<p>包含多种select效果的button，效果：</p>\n<p><img src=\"https://github.com/niniloveyou/StateButton/raw/master/stateButton.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/niniloveyou/StateButton\">https://github.com/niniloveyou/StateButton</a></p>\n</li>\n<li><p>AllAnagleButton</p>\n<p>综合卫星菜单和环形菜单的一个button，效果：</p>\n<p><img src=\"https://github.com/uin3566/AllAngleExpandableButton/raw/master/screenshot/demo.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/uin3566/AllAngleExpandableButton\">https://github.com/uin3566/AllAngleExpandableButton</a></p>\n</li>\n<li><p>ShareButton</p>\n<p>简单含有分享模块的button，效果：</p>\n<p><img src=\"https://github.com/kayan1990/ShareButton/raw/master/ShareButton/gif/sharebutton.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/kayan1990/ShareButton\">https://github.com/kayan1990/ShareButton</a></p>\n</li>\n<li><p>faceOffButton</p>\n<p>一个修改带有笑脸的togglebutton，效果：</p>\n<p><img src=\"https://github.com/Nightonke/FaceOffToggleButton/raw/master/img/Animation.gif?raw=true\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/Nightonke/FaceOffToggleButton\">https://github.com/Nightonke/FaceOffToggleButton</a></p>\n</li>\n<li><p>undoBar</p>\n<p>带有撤销功能的button，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/a32255c0a1f5abe56607d46bb9782b8f338fd9e3/68747470733a2f2f7261772e6769746875622e636f6d2f6a656e7a7a2f416e64726f69642d556e646f4261722f6d61737465722f6173736574732f53637265656e73686f74352e706e67\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/jenzz/Android-UndoBar\">https://github.com/jenzz/Android-UndoBar</a></p>\n</li>\n<li><p>BootstrapButton</p>\n<p>具有字形效果的button，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/51755d59ed6fd53158a0d84696e6d184c3a6f4d5/68747470733a2f2f7261772e6769746875622e636f6d2f426561726465642d48656e2f416e64726f69642d426f6f7473747261702f6d61737465722f696d616765732f626f6f7473747261705f627574746f6e2e706e67\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/Bearded-Hen/Android-Bootstrap\">https://github.com/Bearded-Hen/Android-Bootstrap</a></p>\n</li>\n<li><p>LiquidButton</p>\n<p>又是一个加载的button，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/6e51af802823444540390be079ecad75ef60019e/68747470733a2f2f6431337961637572716a676172612e636c6f756466726f6e742e6e65742f75736572732f3333303137342f73637265656e73686f74732f323639353630302f636f6d705f322e676966\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/yoruriko/LiquidButton\">https://github.com/yoruriko/LiquidButton</a></p>\n</li>\n<li><p>MagicButton</p>\n<p>简单的变形button，效果：</p>\n<p><img src=\"https://github.com/daniel-martins-IR/MagicButton/raw/master/app/src/main/res/drawable/giphy.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/daniel-martins-ir/MagicButton\">https://github.com/daniel-martins-ir/MagicButton</a></p>\n</li>\n<li><p>RingButton</p>\n<p>可以一分为二的button，各自有各自的图标和点击事件，效果：</p>\n<p><img src=\"https://github.com/yankai-victor/RingButton/raw/master/image/Screenshot.png\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/yankai-victor/RingButton\">https://github.com/yankai-victor/RingButton</a></p>\n</li>\n<li><p>​</p>\n</li>\n</ol>\n"},{"title":"Android网络连接与云服务","date":"2017-03-27T08:57:00.000Z","author":"冰路梦","_content":"# Android学习笔记第五篇--网络连接与云服务\n\n## 第一章、无线连接设备\n\n​\t除了能够在云端通讯，Android的无线API也允许在同一局域网内的设备通讯，**甚至没有连接网络，而是物理具体相近，也可以相互通讯。**Network Service Discovery 简称NSD可以允许应用相互通讯发现附近设备。\n\n​\t本节主要介绍Android应用发现与连接其他设备的API。主要介绍NSD的API和点对点无线(the Wi-Fi Peer-to-Peer)API。\n\n### 1、使用网络服务发现(NSD)\n\n添加NSD服务到App中，可以使用户辨识在局域网内支持app请求的设备。有助于更好的实现文件共享、联机游戏等服务需求。\n\n- 注册NSD服务\n\n  > **Note:**注册NSD服务为非必选项，若是不关注本地网络的广播，则可以不用注册。\n\n  在局域网内注册自身服务首先要创建`NsdServiceInfo`对象。\n\n  ```java\n  public void registerService(int port){\n    //创建并初始化NSD对象\n    NsdServiceInfo serviceInfo = new NsdServiceInfo();\n    //服务名称要保证唯一性\n    serviceInfo.serServiceName(\"NsdChat\");\n    //指定协议和传输层，如指定打印服务\"_ipp._tcp\"\n    serviceInfo.setServiceType(\"_http._tcp.\");\n    serviceInfo.setPort(port);\n    .....\n  }\n  ```\n\n  如上创建了一个NSD服务，并设置了名称、服务类型。其中服务类型制定的是应用使用的协议和传输层。语法是`_<protocol>._<transportlayer>`。\n\n  > **Note:**互联网编号分配机构(International Assigned Numbers Authority)提供用于服务发现协议，如NSD和Bonjour等。\n\n  服务端口号应避免硬代码，以便于可以动态更改端口号，并更新通知。\n\n  ```java\n  public void initializeServerSocket(){\n    //初始化一个server socket，指定下面的端口\n    mServiceSocket = new ServerSocket(0);\n    //存储选择的端口号\n    mLocalPort = mServerSocket.getLocalPort();\n    ......\n  }\n  ```\n\n  至此已经创建了`NsdServiceInfo`对象，接着要实现`RegistrationListener`接口，实现注册功能。\n\n  ```java\n  public void initializeRegistrationListener(){\n    mRegistrationListener = new NsdManager.RegistrationListener(){\n      @Override\n      public void onServiceRegistered(NsdServiceInfo nsdServiceInfo){\n        //需要更新已经保存的注册服务名称，因为它需要唯一性，若是命名冲突，Android会自动解决冲突，此处就需要更新获取。\n        mServiceName = nsdServiceInfo.getServiceName();\n      }\n      @Override\n      public void onRegistrationFailed(NsdServiceInfo serviceInfo,int errorCode){\n       //注册失败时候，在此处可以记录日志 \n      }\n      @Override\n      public void onServiceUnregistered(NsdServiceInfo arg0){\n        //注销服务，只有通过NsdManager来注销才会调用这里。\n      }\n      \n      @Override\n      public void onUnregistrationFailed(NsdService serviceInfo,int errorCode){\n       //注销失败，记录日志 \n      }\n    };\n  }\n  ```\n\n  因为`registerService()`方法是异步的，在注册服务之后的操作，需要在`onServiceRegistered()`方法中进行。\n\n  ```java\n  public void registerService(int port){\n    NsdServiceInfo serviceInfo = new NsdServiceInfo();\n    serviceInfo.setServiceName(\"NsdChat\");\n    serviceInfo.setServiceType(\"_http._tcp.\");\n    serviceInfo.setPort(Port);\n    \n    mNsdManager = Context.getSystemService(Context.NSD_SERVICE);\n    mNsdManager.registerService(serviceInfo,NsdManager.PROTOCOL_DNS_SD,mRegistrationListener);\n  }\n  ```\n\n- 发现网络中的服务\n\n  发现网络服务需要两步：\n\n  - 注册网络监听器\n  - 调用`discoverServices()`异步API\n\n  1、创建`NsdManager.DiscoveryListener`接口的实现类。\n\n  ```java\n  public void initializeDiscoveryListener(){\n    //实例化网络发现监听器\n    mDiscoverListener = new NsdManager.DiscoveryListener(){\n      //发现服务时候调用该方法\n      @Override\n      public void onDiscoveryStarted(String regType){\n        Log.d(TAG,\"Service discovery started\");\n      }\n      @Override\n          public void onServiceFound(NsdServiceInfo service) {\n              // A service was found!  Do something with it.\n              Log.d(TAG, \"Service discovery success\" + service);\n              if (!service.getServiceType().equals(SERVICE_TYPE)) {\n                  // Service type is the string containing the protocol and\n                  // transport layer for this service.\n                  Log.d(TAG, \"Unknown Service Type: \" + service.getServiceType());\n              } else if (service.getServiceName().equals(mServiceName)) {\n                  // The name of the service tells the user what they'd be\n                  // connecting to. It could be \"Bob's Chat App\".\n                  Log.d(TAG, \"Same machine: \" + mServiceName);\n              } else if (service.getServiceName().contains(\"NsdChat\")){\n                  mNsdManager.resolveService(service, mResolveListener);\n              }\n          }\n\n          @Override\n          public void onServiceLost(NsdServiceInfo service) {\n              // When the network service is no longer available.\n              // Internal bookkeeping code goes here.\n              Log.e(TAG, \"service lost\" + service);\n          }\n\n          @Override\n          public void onDiscoveryStopped(String serviceType) {\n              Log.i(TAG, \"Discovery stopped: \" + serviceType);\n          }\n\n          @Override\n          public void onStartDiscoveryFailed(String serviceType, int errorCode) {\n              Log.e(TAG, \"Discovery failed: Error code:\" + errorCode);\n              mNsdManager.stopServiceDiscovery(this);\n          }\n\n          @Override\n          public void onStopDiscoveryFailed(String serviceType, int errorCode) {\n              Log.e(TAG, \"Discovery failed: Error code:\" + errorCode);\n              mNsdManager.stopServiceDiscovery(this);\n          }\n      };\n    }\n  }\n  ```\n\n  `NSD API`通过使用该接口中的方法，可以对网络服务状态进行监控。设置好监听器后，调用`discoverService()`函数：\n\n  ```java\n  mNsdManager.discoveryService(SERVICE_TYPE,NsdManager.PROTOCOL_DNS_SD,mDiscoveryListener);\n  ```\n\n- 连接到网络上的服务\n\n  发现网络上的可接入服务时，首先调用resolveService()方法，来确定服务连接信息。实现`NsdManage.ResolveListener`对象并将其传入`resolveService()`方法，并使用该对象获得`NsdSerServiceInfo`。\n\n  ```java\n  public void initializeResolveListener(){\n    mResolveListener = new NsdManager.ResolveListener(){\n      @Override\n          public void onResolveFailed(NsdServiceInfo serviceInfo, int errorCode) {\n              // Called when the resolve fails.  Use the error code to debug.\n              Log.e(TAG, \"Resolve failed\" + errorCode);\n          }\n\n          @Override\n          public void onServiceResolved(NsdServiceInfo serviceInfo) {\n              Log.e(TAG, \"Resolve Succeeded. \" + serviceInfo);\n\n              if (serviceInfo.getServiceName().equals(mServiceName)) {\n                  Log.d(TAG, \"Same IP.\");\n                  return;\n              }\n              mService = serviceInfo;\n              int port = mService.getPort();\n              InetAddress host = mService.getHost();\n          }\n    };\n  }\n  ```\n\n  至此完成服务接入，即可实现本地与之通讯。\n\n- 程序退出注销服务\n\n  使用NSD服务是比较消耗资源的，而且重复链接会导致问题，所以需要在app生命周期内的合适阶段开启、关闭服务。\n\n  ```java\n  //Activity\n  \t@Override\n      protected void onPause() {\n          if (mNsdHelper != null) {\n              mNsdHelper.tearDown();\n          }\n          super.onPause();\n      }\n\n      @Override\n      protected void onResume() {\n          super.onResume();\n          if (mNsdHelper != null) {\n              mNsdHelper.registerService(mConnection.getLocalPort());\n              mNsdHelper.discoverServices();\n          }\n      }\n\n      @Override\n      protected void onDestroy() {\n          mNsdHelper.tearDown();\n          mConnection.tearDown();\n          super.onDestroy();\n      }\n\n      // NsdHelper's tearDown method\n          public void tearDown() {\n          mNsdManager.unregisterService(mRegistrationListener);\n          mNsdManager.stopServiceDiscovery(mDiscoveryListener);\n      }\n  ```\n\n### 2、使用WiFi建立P2P连接\n\nWiFi点对点(P2P)API允许应用程序在无需连接到网络和热点的情况下连接到附近的设备。相比于蓝牙技术，其具有加大的连接范围。\n\n- 配置应用权限\n\n  使用Wi-Fi P2P技术需要添加`CHANGE_WIFI_STATE`,`ACCESS_WIFI_STATE`以及`INTERNET`三种权限，因为虽然Wi-Fi P2P技术可以不用访问互联网，但是它使用的是`Java socket`的标准，所以需要`INTERNET`权限。\n\n  ```xml\n  <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n            package=\"com.example.android.nsdchat\"\n            ...\n  \t<uses-permission\n          android:required=\"true\"\n          android:name=\"android.permission.ACCESS_WIFI_STATE\"/>\n  \t<uses-permission\n          android:required=\"true\"\n          android:name=\"android.permission.CHANGE_WIFI_STATE\"/>\n      <uses-permission\n          android:required=\"true\"\n          android:name=\"android.permission.INTERNET\"/>\n      ...\n  ```\n\n- 设置广播接收器和P2P管理器\n\n  使用WiFi P2P时，需要侦听事件发生时的broadcast intent。需要`IntentFilter`\n\n  - `WIFI_P2P_STATE_CHANGED_ACTION`指示Wi-Fi P2P是否开启\n  - `WIFI_P2P_PEERS_CHANGED_ACTION`代表对等列表节点发生了变化。\n  - `WIFI_P2P_CONNECTION_CHANGED_ACTION`表明Wi-Fi P2P连接状态发生了变化。\n  - `WIFI_P2P_THIS_DEVICE_CHANGED_ACTION`指示设备详细配置发生了变化。\n\n  ```java\n  private final IntentFilter intentFilter = new IntentFilter();\n  ...\n  @Override\n  public void onCreate(Bundle savedInstanceState) {\n      super.onCreate(savedInstanceState);\n      setContentView(R.layout.main);\n\n      //  Indicates a change in the Wi-Fi P2P status.\n      intentFilter.addAction(WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION);\n\n      // Indicates a change in the list of available peers.\n      intentFilter.addAction(WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION);\n\n      // Indicates the state of Wi-Fi P2P connectivity has changed.\n      intentFilter.addAction(WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION);\n\n      // Indicates this device's details have changed.\n      intentFilter.addAction(WifiP2pManager.WIFI_P2P_THIS_DEVICE_CHANGED_ACTION);\n\n      ...\n  }\n  ```\n\n  在`onCreate()`方法的最后，需要获得`WifiP2pManager`的实例，并调用他的`initailize()`方法，以获得`WifiP2pManager.Channel`对象.\n\n  ```java\n  Channel mChannel;\n  @Override\n  public void onCreate(Bundle savedInstanceState){\n    ...\n      mManager = (WifiP2pManager)getSystemService(Context.WIFI_P2P_SERVICE);\n  \tmChannel = mManager.initialize(this,getMainLooper(),null);\n  }\n  ```\n\n  然后创建广播接收着，监听上述不同的P2P状态变化。\n\n  ```java\n  @Override\n      public void onReceive(Context context, Intent intent) {\n          String action = intent.getAction();\n          if (WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION.equals(action)) {\n              // Determine if Wifi P2P mode is enabled or not, alert\n              // the Activity.\n              int state = intent.getIntExtra(WifiP2pManager.EXTRA_WIFI_STATE, -1);\n              if (state == WifiP2pManager.WIFI_P2P_STATE_ENABLED) {\n                  activity.setIsWifiP2pEnabled(true);\n              } else {\n                  activity.setIsWifiP2pEnabled(false);\n              }\n          } else if (WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION.equals(action)) {\n\n              // The peer list has changed!  We should probably do something about\n              // that.\n\n          } else if (WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION.equals(action)) {\n\n              // Connection state changed!  We should probably do something about\n              // that.\n\n          } else if (WifiP2pManager.WIFI_P2P_THIS_DEVICE_CHANGED_ACTION.equals(action)) {\n              DeviceListFragment fragment = (DeviceListFragment) activity.getFragmentManager()\n                      .findFragmentById(R.id.frag_list);\n              fragment.updateThisDevice((WifiP2pDevice) intent.getParcelableExtra(\n                      WifiP2pManager.EXTRA_WIFI_P2P_DEVICE));\n\n          }\n      }\n  ```\n\n  并在Activity启动时，注册广播，添加过滤器。Activity暂停或者关闭时候，注销广播。\n\n  ```java\n   //在Activity启动后注册广播\n      @Override\n      public void onResume() {\n          super.onResume();\n          receiver = new WiFiDirectBroadcastReceiver(mManager, mChannel, this);\n          registerReceiver(receiver, intentFilter);\n      }\n  //Activity关闭前，注销广播。\n      @Override\n      public void onPause() {\n          super.onPause();\n          unregisterReceiver(receiver);\n      }\n  ```\n\n- 初始化对等节点发现(Peer Discovery)\n\n  调用`discoveryPeers()`开始搜寻附近设备，需要传入参数\n\n  - 上面得到的`WifiP2pManager.Channel`对象。\n  - 对`WifiP2pManager.ActionListener`接口的实现，确定发现成功与失败时候的事件处理。\n\n  ```java\n  mManager.discoverPeers(mChannel, new WifiP2pManager.ActionListener() {\n\n          @Override\n          public void onSuccess() {\n              // Code for when the discovery initiation is successful goes here.\n              // No services have actually been discovered yet, so this method\n              // can often be left blank.  Code for peer discovery goes in the\n              // onReceive method, detailed below.\n          }\n\n          @Override\n          public void onFailure(int reasonCode) {\n              // Code for when the discovery initiation fails goes here.\n              // Alert the user that something went wrong.\n          }\n  });\n  ```\n\n  **注意：**如上仅仅完成了对匹配设备的发现扫描的初始化，`WifiP2pManager.ActionListener`中国年的方法会通知应用初始化是否正确等消息。\n\n- 获取对等节点列表\n\n  完成初始化后，扫描会得到匹配的附近设备列表信息。需要实现`WifiP2pManager.PeerListener`接口。\n\n  ```java\n  private List peers = new ArrayList();//匹配到的设备信息列表。\n      ...\n\n      private PeerListListener peerListListener = new PeerListListener() {\n          @Override\n          public void onPeersAvailable(WifiP2pDeviceList peerList) {\n\n              // Out with the old, in with the new.\n              peers.clear();\n              peers.addAll(peerList.getDeviceList());\n\n              // If an AdapterView is backed by this data, notify it\n              // of the change.  For instance, if you have a ListView of available\n              // peers, trigger an update.\n              ((WiFiPeerListAdapter) getListAdapter()).notifyDataSetChanged();\n              if (peers.size() == 0) {\n                  Log.d(WiFiDirectActivity.TAG, \"No devices found\");\n                  return;\n              }\n          }\n      }\n  ```\n\n  如上获得的匹配列表，我们需要将它传递给广播接收者做进一步处理。\n\n  ```java\n  public void onReceive(Context context,Intent intent){\n    ...\n  \telse if (WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION.equals(action)) {\n          // Request available peers from the wifi p2p manager. This is an\n          // asynchronous call and the calling activity is notified with a\n          // callback on PeerListListener.onPeersAvailable()\n          if (mManager != null) {\n              mManager.requestPeers(mChannel, peerListListener);\n          }\n          Log.d(WiFiDirectActivity.TAG, \"P2P peers changed\");\n      }...\n  }\n  ```\n\n- 连接一个对等节点\n\n  发现到附近可用设备，则可以进一步的连接它，需要创建一个新的WifiP2pConfig对象，并将连接信息从设备WifiP2pDevice拷贝到其中，调用connect()方法。\n\n  ```java\n      @Override\n      public void connect() {\n          // Picking the first device found on the network.\n          WifiP2pDevice device = peers.get(0);\n\n          WifiP2pConfig config = new WifiP2pConfig();\n          config.deviceAddress = device.deviceAddress;\n          config.wps.setup = WpsInfo.PBC;\n  \t\t//ActionListener仅实现通知初始化成功与否\n          mManager.connect(mChannel, config, new ActionListener() {\n\n              @Override\n              public void onSuccess() {\n                  // WiFiDirectBroadcastReceiver will notify us. Ignore for now.\n              }\n\n              @Override\n              public void onFailure(int reason) {\n                  Toast.makeText(WiFiDirectActivity.this, \"Connect failed. Retry.\",\n                          Toast.LENGTH_SHORT).show();\n              }\n          });\n      }\n  ```\n\n  使用`WifiP2pManager.ConnectionInfoListener`接口，`onConnectionInfoAvailable()`来确定连接状态。\n\n  ```java\n      @Override\n      public void onConnectionInfoAvailable(final WifiP2pInfo info) {\n\n          // InetAddress from WifiP2pInfo struct.\n          InetAddress groupOwnerAddress = info.groupOwnerAddress.getHostAddress());\n\n          // After the group negotiation, we can determine the group owner.\n          if (info.groupFormed && info.isGroupOwner) {\n              // Do whatever tasks are specific to the group owner.\n              // One common case is creating a server thread and accepting\n              // incoming connections.\n          } else if (info.groupFormed) {\n              // The other device acts as the client. In this case,\n              // you'll want to create a client thread that connects to the group\n              // owner.\n          }\n      }\n  ```\n\n  完善广播接收者的代码,监听到连接广播信号时候，请求连接。\n\n  ```java\n   ...\n          } else if (WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION.equals(action)) {\n\n              if (mManager == null) {\n                  return;\n              }\n\n              NetworkInfo networkInfo = (NetworkInfo) intent\n                      .getParcelableExtra(WifiP2pManager.EXTRA_NETWORK_INFO);\n\n              if (networkInfo.isConnected()) {\n\n                  // We are connected with the other device, request connection\n                  // info to find group owner IP\n\n                  mManager.requestConnectionInfo(mChannel, connectionListener);\n              }\n              ...\n  ```\n\n### 3、使用WiFi P2P服务\n\n第一节讲述了`NSD`服务用于局域网之间的连接通讯，本节的WiFi P2P有点类似，但是并不相同。\n\n- 配置Manifest\n\n  需要网络权限以及wifi相关权限。如上节所讲的三个权限，配置在Android manifest清单文件中。\n\n  ```xml\n  <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      package=\"com.example.android.nsdchat\"\n      ...\n\n      <uses-permission\n          android:required=\"true\"\n          android:name=\"android.permission.ACCESS_WIFI_STATE\"/>\n      <uses-permission\n          android:required=\"true\"\n          android:name=\"android.permission.CHANGE_WIFI_STATE\"/>\n      <uses-permission\n          android:required=\"true\"\n          android:name=\"android.permission.INTERNET\"/>\n      ...\n  ```\n\n- 添加本地服务\n\n  需要在服务框架中注册该服务，才能对外提供。\n\n  - 新建`WifiP2pServiceInfo`对象\n  - 加入相应的服务详细信息\n  - 调用`addLocalService()`来注册为本地服务。\n\n  ```java\n  private void startRegistration() {\n          //  Create a string map containing information about your service.\n          Map record = new HashMap();\n          record.put(\"listenport\", String.valueOf(SERVER_PORT));\n          record.put(\"buddyname\", \"John Doe\" + (int) (Math.random() * 1000));\n          record.put(\"available\", \"visible\");\n\n          // Service information.  Pass it an instance name, service type\n          // _protocol._transportlayer , and the map containing\n          // information other devices will want once they connect to this one.\n          WifiP2pDnsSdServiceInfo serviceInfo =\n                  WifiP2pDnsSdServiceInfo.newInstance(\"_test\", \"_presence._tcp\", record);\n\n          // Add the local service, sending the service info, network channel,\n          // and listener that will be used to indicate success or failure of\n          // the request.\n          mManager.addLocalService(channel, serviceInfo, new ActionListener() {\n              @Override\n              public void onSuccess() {\n                  // Command successful! Code isn't necessarily needed here,\n                  // Unless you want to update the UI or add logging statements.\n              }\n\n              @Override\n              public void onFailure(int arg0) {\n                  // Command failed.  Check for P2P_UNSUPPORTED, ERROR, or BUSY\n              }\n          });\n  }\n  ```\n\n- 发现附近的服务\n\n  新建一个`WifiP2pManager.DnsSdTxtRecordListener`实例来监听实时收到到记录。记录到的周边设备服务信息会拷贝到外部数据机构中，以供使用。\n\n  ```java\n  final HashMap<String, String> buddies = new HashMap<String, String>();\n  ...\n  private void discoverService() {\n      DnsSdTxtRecordListener txtListener = new DnsSdTxtRecordListener() {\n          @Override\n          /* Callback includes:\n           * fullDomain: full domain name: e.g \"printer._ipp._tcp.local.\"\n           * record: TXT record dta as a map of key/value pairs.\n           * device: The device running the advertised service.\n           */\n\n          public void onDnsSdTxtRecordAvailable(\n                  String fullDomain, Map record, WifiP2pDevice device) {\n                  Log.d(TAG, \"DnsSdTxtRecord available -\" + record.toString());\n                  buddies.put(device.deviceAddress, record.get(\"buddyname\"));\n              }\n          };\n      ...\n  }\n  ```\n\n  然后创建`WifiP2pManager.DnsSdServiceResponseListener`对象，来响应服务请求。上述两个listener匹配构建后，调用`setDnsResponseListener()`将它们加入`WifiP2pManager`。\n\n  ```java\n  private void discoverService() {\n  ...\n\n      DnsSdServiceResponseListener servListener = new DnsSdServiceResponseListener() {\n          @Override\n          public void onDnsSdServiceAvailable(String instanceName, String registrationType,\n                  WifiP2pDevice resourceType) {\n\n                  // Update the device name with the human-friendly version from\n                  // the DnsTxtRecord, assuming one arrived.\n                  resourceType.deviceName = buddies\n                          .containsKey(resourceType.deviceAddress) ? buddies\n                          .get(resourceType.deviceAddress) : resourceType.deviceName;\n\n                  // Add to the custom adapter defined specifically for showing\n                  // wifi devices.\n                  WiFiDirectServicesList fragment = (WiFiDirectServicesList) getFragmentManager()\n                          .findFragmentById(R.id.frag_peerlist);\n                  WiFiDevicesAdapter adapter = ((WiFiDevicesAdapter) fragment\n                          .getListAdapter());\n\n                  adapter.add(resourceType);\n                  adapter.notifyDataSetChanged();\n                  Log.d(TAG, \"onBonjourServiceAvailable \" + instanceName);\n          }\n      };\n\n      mManager.setDnsSdResponseListeners(channel, servListener, txtListener);\n      ...\n  }\n  ```\n\n  调用`addServiceRequest()`创建服务请求,它需要一个listener来通知创建成功与否。\n\n  ```java\n   serviceRequest = WifiP2pDnsSdServiceRequest.newInstance();\n          mManager.addServiceRequest(channel,\n                  serviceRequest,\n                  new ActionListener() {\n                      @Override\n                      public void onSuccess() {\n                          // Success!\n                      }\n\n                      @Override\n                      public void onFailure(int code) {\n                          // Command failed.  Check for P2P_UNSUPPORTED, ERROR, or BUSY\n                      }\n                  });\n  ```\n\n  最后是调用`discoverService()`\n\n  ```java\n  mManager.discoverServices(channel, new ActionListener() {\n\n              @Override\n              public void onSuccess() {\n                  // Success!\n              }\n\n              @Override\n              public void onFailure(int code) {\n                  // Command failed.  Check for P2P_UNSUPPORTED, ERROR, or BUSY\n                  if (code == WifiP2pManager.P2P_UNSUPPORTED) {\n                      Log.d(TAG, \"P2P isn't supported on this device.\");\n                  else if(...)\n                      ...\n              }\n          });\n  ```\n\n  顺利的话，可以实现匹配连接的效果，常见错误代码：\n\n  - P2P_UNSUPPORTED 当前设备不支持\n  - BUSY 系统繁忙\n  - ERROR 内部错误","source":"_posts/Android学习笔记第五篇--网络连接与云服务.md","raw":"---\ntitle: \"Android网络连接与云服务\"\ndate: 2017-03-27 16:57\nauthor: 冰路梦\ntag:\n    - Android\ncategories:\n    - Android\n---\n# Android学习笔记第五篇--网络连接与云服务\n\n## 第一章、无线连接设备\n\n​\t除了能够在云端通讯，Android的无线API也允许在同一局域网内的设备通讯，**甚至没有连接网络，而是物理具体相近，也可以相互通讯。**Network Service Discovery 简称NSD可以允许应用相互通讯发现附近设备。\n\n​\t本节主要介绍Android应用发现与连接其他设备的API。主要介绍NSD的API和点对点无线(the Wi-Fi Peer-to-Peer)API。\n\n### 1、使用网络服务发现(NSD)\n\n添加NSD服务到App中，可以使用户辨识在局域网内支持app请求的设备。有助于更好的实现文件共享、联机游戏等服务需求。\n\n- 注册NSD服务\n\n  > **Note:**注册NSD服务为非必选项，若是不关注本地网络的广播，则可以不用注册。\n\n  在局域网内注册自身服务首先要创建`NsdServiceInfo`对象。\n\n  ```java\n  public void registerService(int port){\n    //创建并初始化NSD对象\n    NsdServiceInfo serviceInfo = new NsdServiceInfo();\n    //服务名称要保证唯一性\n    serviceInfo.serServiceName(\"NsdChat\");\n    //指定协议和传输层，如指定打印服务\"_ipp._tcp\"\n    serviceInfo.setServiceType(\"_http._tcp.\");\n    serviceInfo.setPort(port);\n    .....\n  }\n  ```\n\n  如上创建了一个NSD服务，并设置了名称、服务类型。其中服务类型制定的是应用使用的协议和传输层。语法是`_<protocol>._<transportlayer>`。\n\n  > **Note:**互联网编号分配机构(International Assigned Numbers Authority)提供用于服务发现协议，如NSD和Bonjour等。\n\n  服务端口号应避免硬代码，以便于可以动态更改端口号，并更新通知。\n\n  ```java\n  public void initializeServerSocket(){\n    //初始化一个server socket，指定下面的端口\n    mServiceSocket = new ServerSocket(0);\n    //存储选择的端口号\n    mLocalPort = mServerSocket.getLocalPort();\n    ......\n  }\n  ```\n\n  至此已经创建了`NsdServiceInfo`对象，接着要实现`RegistrationListener`接口，实现注册功能。\n\n  ```java\n  public void initializeRegistrationListener(){\n    mRegistrationListener = new NsdManager.RegistrationListener(){\n      @Override\n      public void onServiceRegistered(NsdServiceInfo nsdServiceInfo){\n        //需要更新已经保存的注册服务名称，因为它需要唯一性，若是命名冲突，Android会自动解决冲突，此处就需要更新获取。\n        mServiceName = nsdServiceInfo.getServiceName();\n      }\n      @Override\n      public void onRegistrationFailed(NsdServiceInfo serviceInfo,int errorCode){\n       //注册失败时候，在此处可以记录日志 \n      }\n      @Override\n      public void onServiceUnregistered(NsdServiceInfo arg0){\n        //注销服务，只有通过NsdManager来注销才会调用这里。\n      }\n      \n      @Override\n      public void onUnregistrationFailed(NsdService serviceInfo,int errorCode){\n       //注销失败，记录日志 \n      }\n    };\n  }\n  ```\n\n  因为`registerService()`方法是异步的，在注册服务之后的操作，需要在`onServiceRegistered()`方法中进行。\n\n  ```java\n  public void registerService(int port){\n    NsdServiceInfo serviceInfo = new NsdServiceInfo();\n    serviceInfo.setServiceName(\"NsdChat\");\n    serviceInfo.setServiceType(\"_http._tcp.\");\n    serviceInfo.setPort(Port);\n    \n    mNsdManager = Context.getSystemService(Context.NSD_SERVICE);\n    mNsdManager.registerService(serviceInfo,NsdManager.PROTOCOL_DNS_SD,mRegistrationListener);\n  }\n  ```\n\n- 发现网络中的服务\n\n  发现网络服务需要两步：\n\n  - 注册网络监听器\n  - 调用`discoverServices()`异步API\n\n  1、创建`NsdManager.DiscoveryListener`接口的实现类。\n\n  ```java\n  public void initializeDiscoveryListener(){\n    //实例化网络发现监听器\n    mDiscoverListener = new NsdManager.DiscoveryListener(){\n      //发现服务时候调用该方法\n      @Override\n      public void onDiscoveryStarted(String regType){\n        Log.d(TAG,\"Service discovery started\");\n      }\n      @Override\n          public void onServiceFound(NsdServiceInfo service) {\n              // A service was found!  Do something with it.\n              Log.d(TAG, \"Service discovery success\" + service);\n              if (!service.getServiceType().equals(SERVICE_TYPE)) {\n                  // Service type is the string containing the protocol and\n                  // transport layer for this service.\n                  Log.d(TAG, \"Unknown Service Type: \" + service.getServiceType());\n              } else if (service.getServiceName().equals(mServiceName)) {\n                  // The name of the service tells the user what they'd be\n                  // connecting to. It could be \"Bob's Chat App\".\n                  Log.d(TAG, \"Same machine: \" + mServiceName);\n              } else if (service.getServiceName().contains(\"NsdChat\")){\n                  mNsdManager.resolveService(service, mResolveListener);\n              }\n          }\n\n          @Override\n          public void onServiceLost(NsdServiceInfo service) {\n              // When the network service is no longer available.\n              // Internal bookkeeping code goes here.\n              Log.e(TAG, \"service lost\" + service);\n          }\n\n          @Override\n          public void onDiscoveryStopped(String serviceType) {\n              Log.i(TAG, \"Discovery stopped: \" + serviceType);\n          }\n\n          @Override\n          public void onStartDiscoveryFailed(String serviceType, int errorCode) {\n              Log.e(TAG, \"Discovery failed: Error code:\" + errorCode);\n              mNsdManager.stopServiceDiscovery(this);\n          }\n\n          @Override\n          public void onStopDiscoveryFailed(String serviceType, int errorCode) {\n              Log.e(TAG, \"Discovery failed: Error code:\" + errorCode);\n              mNsdManager.stopServiceDiscovery(this);\n          }\n      };\n    }\n  }\n  ```\n\n  `NSD API`通过使用该接口中的方法，可以对网络服务状态进行监控。设置好监听器后，调用`discoverService()`函数：\n\n  ```java\n  mNsdManager.discoveryService(SERVICE_TYPE,NsdManager.PROTOCOL_DNS_SD,mDiscoveryListener);\n  ```\n\n- 连接到网络上的服务\n\n  发现网络上的可接入服务时，首先调用resolveService()方法，来确定服务连接信息。实现`NsdManage.ResolveListener`对象并将其传入`resolveService()`方法，并使用该对象获得`NsdSerServiceInfo`。\n\n  ```java\n  public void initializeResolveListener(){\n    mResolveListener = new NsdManager.ResolveListener(){\n      @Override\n          public void onResolveFailed(NsdServiceInfo serviceInfo, int errorCode) {\n              // Called when the resolve fails.  Use the error code to debug.\n              Log.e(TAG, \"Resolve failed\" + errorCode);\n          }\n\n          @Override\n          public void onServiceResolved(NsdServiceInfo serviceInfo) {\n              Log.e(TAG, \"Resolve Succeeded. \" + serviceInfo);\n\n              if (serviceInfo.getServiceName().equals(mServiceName)) {\n                  Log.d(TAG, \"Same IP.\");\n                  return;\n              }\n              mService = serviceInfo;\n              int port = mService.getPort();\n              InetAddress host = mService.getHost();\n          }\n    };\n  }\n  ```\n\n  至此完成服务接入，即可实现本地与之通讯。\n\n- 程序退出注销服务\n\n  使用NSD服务是比较消耗资源的，而且重复链接会导致问题，所以需要在app生命周期内的合适阶段开启、关闭服务。\n\n  ```java\n  //Activity\n  \t@Override\n      protected void onPause() {\n          if (mNsdHelper != null) {\n              mNsdHelper.tearDown();\n          }\n          super.onPause();\n      }\n\n      @Override\n      protected void onResume() {\n          super.onResume();\n          if (mNsdHelper != null) {\n              mNsdHelper.registerService(mConnection.getLocalPort());\n              mNsdHelper.discoverServices();\n          }\n      }\n\n      @Override\n      protected void onDestroy() {\n          mNsdHelper.tearDown();\n          mConnection.tearDown();\n          super.onDestroy();\n      }\n\n      // NsdHelper's tearDown method\n          public void tearDown() {\n          mNsdManager.unregisterService(mRegistrationListener);\n          mNsdManager.stopServiceDiscovery(mDiscoveryListener);\n      }\n  ```\n\n### 2、使用WiFi建立P2P连接\n\nWiFi点对点(P2P)API允许应用程序在无需连接到网络和热点的情况下连接到附近的设备。相比于蓝牙技术，其具有加大的连接范围。\n\n- 配置应用权限\n\n  使用Wi-Fi P2P技术需要添加`CHANGE_WIFI_STATE`,`ACCESS_WIFI_STATE`以及`INTERNET`三种权限，因为虽然Wi-Fi P2P技术可以不用访问互联网，但是它使用的是`Java socket`的标准，所以需要`INTERNET`权限。\n\n  ```xml\n  <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n            package=\"com.example.android.nsdchat\"\n            ...\n  \t<uses-permission\n          android:required=\"true\"\n          android:name=\"android.permission.ACCESS_WIFI_STATE\"/>\n  \t<uses-permission\n          android:required=\"true\"\n          android:name=\"android.permission.CHANGE_WIFI_STATE\"/>\n      <uses-permission\n          android:required=\"true\"\n          android:name=\"android.permission.INTERNET\"/>\n      ...\n  ```\n\n- 设置广播接收器和P2P管理器\n\n  使用WiFi P2P时，需要侦听事件发生时的broadcast intent。需要`IntentFilter`\n\n  - `WIFI_P2P_STATE_CHANGED_ACTION`指示Wi-Fi P2P是否开启\n  - `WIFI_P2P_PEERS_CHANGED_ACTION`代表对等列表节点发生了变化。\n  - `WIFI_P2P_CONNECTION_CHANGED_ACTION`表明Wi-Fi P2P连接状态发生了变化。\n  - `WIFI_P2P_THIS_DEVICE_CHANGED_ACTION`指示设备详细配置发生了变化。\n\n  ```java\n  private final IntentFilter intentFilter = new IntentFilter();\n  ...\n  @Override\n  public void onCreate(Bundle savedInstanceState) {\n      super.onCreate(savedInstanceState);\n      setContentView(R.layout.main);\n\n      //  Indicates a change in the Wi-Fi P2P status.\n      intentFilter.addAction(WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION);\n\n      // Indicates a change in the list of available peers.\n      intentFilter.addAction(WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION);\n\n      // Indicates the state of Wi-Fi P2P connectivity has changed.\n      intentFilter.addAction(WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION);\n\n      // Indicates this device's details have changed.\n      intentFilter.addAction(WifiP2pManager.WIFI_P2P_THIS_DEVICE_CHANGED_ACTION);\n\n      ...\n  }\n  ```\n\n  在`onCreate()`方法的最后，需要获得`WifiP2pManager`的实例，并调用他的`initailize()`方法，以获得`WifiP2pManager.Channel`对象.\n\n  ```java\n  Channel mChannel;\n  @Override\n  public void onCreate(Bundle savedInstanceState){\n    ...\n      mManager = (WifiP2pManager)getSystemService(Context.WIFI_P2P_SERVICE);\n  \tmChannel = mManager.initialize(this,getMainLooper(),null);\n  }\n  ```\n\n  然后创建广播接收着，监听上述不同的P2P状态变化。\n\n  ```java\n  @Override\n      public void onReceive(Context context, Intent intent) {\n          String action = intent.getAction();\n          if (WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION.equals(action)) {\n              // Determine if Wifi P2P mode is enabled or not, alert\n              // the Activity.\n              int state = intent.getIntExtra(WifiP2pManager.EXTRA_WIFI_STATE, -1);\n              if (state == WifiP2pManager.WIFI_P2P_STATE_ENABLED) {\n                  activity.setIsWifiP2pEnabled(true);\n              } else {\n                  activity.setIsWifiP2pEnabled(false);\n              }\n          } else if (WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION.equals(action)) {\n\n              // The peer list has changed!  We should probably do something about\n              // that.\n\n          } else if (WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION.equals(action)) {\n\n              // Connection state changed!  We should probably do something about\n              // that.\n\n          } else if (WifiP2pManager.WIFI_P2P_THIS_DEVICE_CHANGED_ACTION.equals(action)) {\n              DeviceListFragment fragment = (DeviceListFragment) activity.getFragmentManager()\n                      .findFragmentById(R.id.frag_list);\n              fragment.updateThisDevice((WifiP2pDevice) intent.getParcelableExtra(\n                      WifiP2pManager.EXTRA_WIFI_P2P_DEVICE));\n\n          }\n      }\n  ```\n\n  并在Activity启动时，注册广播，添加过滤器。Activity暂停或者关闭时候，注销广播。\n\n  ```java\n   //在Activity启动后注册广播\n      @Override\n      public void onResume() {\n          super.onResume();\n          receiver = new WiFiDirectBroadcastReceiver(mManager, mChannel, this);\n          registerReceiver(receiver, intentFilter);\n      }\n  //Activity关闭前，注销广播。\n      @Override\n      public void onPause() {\n          super.onPause();\n          unregisterReceiver(receiver);\n      }\n  ```\n\n- 初始化对等节点发现(Peer Discovery)\n\n  调用`discoveryPeers()`开始搜寻附近设备，需要传入参数\n\n  - 上面得到的`WifiP2pManager.Channel`对象。\n  - 对`WifiP2pManager.ActionListener`接口的实现，确定发现成功与失败时候的事件处理。\n\n  ```java\n  mManager.discoverPeers(mChannel, new WifiP2pManager.ActionListener() {\n\n          @Override\n          public void onSuccess() {\n              // Code for when the discovery initiation is successful goes here.\n              // No services have actually been discovered yet, so this method\n              // can often be left blank.  Code for peer discovery goes in the\n              // onReceive method, detailed below.\n          }\n\n          @Override\n          public void onFailure(int reasonCode) {\n              // Code for when the discovery initiation fails goes here.\n              // Alert the user that something went wrong.\n          }\n  });\n  ```\n\n  **注意：**如上仅仅完成了对匹配设备的发现扫描的初始化，`WifiP2pManager.ActionListener`中国年的方法会通知应用初始化是否正确等消息。\n\n- 获取对等节点列表\n\n  完成初始化后，扫描会得到匹配的附近设备列表信息。需要实现`WifiP2pManager.PeerListener`接口。\n\n  ```java\n  private List peers = new ArrayList();//匹配到的设备信息列表。\n      ...\n\n      private PeerListListener peerListListener = new PeerListListener() {\n          @Override\n          public void onPeersAvailable(WifiP2pDeviceList peerList) {\n\n              // Out with the old, in with the new.\n              peers.clear();\n              peers.addAll(peerList.getDeviceList());\n\n              // If an AdapterView is backed by this data, notify it\n              // of the change.  For instance, if you have a ListView of available\n              // peers, trigger an update.\n              ((WiFiPeerListAdapter) getListAdapter()).notifyDataSetChanged();\n              if (peers.size() == 0) {\n                  Log.d(WiFiDirectActivity.TAG, \"No devices found\");\n                  return;\n              }\n          }\n      }\n  ```\n\n  如上获得的匹配列表，我们需要将它传递给广播接收者做进一步处理。\n\n  ```java\n  public void onReceive(Context context,Intent intent){\n    ...\n  \telse if (WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION.equals(action)) {\n          // Request available peers from the wifi p2p manager. This is an\n          // asynchronous call and the calling activity is notified with a\n          // callback on PeerListListener.onPeersAvailable()\n          if (mManager != null) {\n              mManager.requestPeers(mChannel, peerListListener);\n          }\n          Log.d(WiFiDirectActivity.TAG, \"P2P peers changed\");\n      }...\n  }\n  ```\n\n- 连接一个对等节点\n\n  发现到附近可用设备，则可以进一步的连接它，需要创建一个新的WifiP2pConfig对象，并将连接信息从设备WifiP2pDevice拷贝到其中，调用connect()方法。\n\n  ```java\n      @Override\n      public void connect() {\n          // Picking the first device found on the network.\n          WifiP2pDevice device = peers.get(0);\n\n          WifiP2pConfig config = new WifiP2pConfig();\n          config.deviceAddress = device.deviceAddress;\n          config.wps.setup = WpsInfo.PBC;\n  \t\t//ActionListener仅实现通知初始化成功与否\n          mManager.connect(mChannel, config, new ActionListener() {\n\n              @Override\n              public void onSuccess() {\n                  // WiFiDirectBroadcastReceiver will notify us. Ignore for now.\n              }\n\n              @Override\n              public void onFailure(int reason) {\n                  Toast.makeText(WiFiDirectActivity.this, \"Connect failed. Retry.\",\n                          Toast.LENGTH_SHORT).show();\n              }\n          });\n      }\n  ```\n\n  使用`WifiP2pManager.ConnectionInfoListener`接口，`onConnectionInfoAvailable()`来确定连接状态。\n\n  ```java\n      @Override\n      public void onConnectionInfoAvailable(final WifiP2pInfo info) {\n\n          // InetAddress from WifiP2pInfo struct.\n          InetAddress groupOwnerAddress = info.groupOwnerAddress.getHostAddress());\n\n          // After the group negotiation, we can determine the group owner.\n          if (info.groupFormed && info.isGroupOwner) {\n              // Do whatever tasks are specific to the group owner.\n              // One common case is creating a server thread and accepting\n              // incoming connections.\n          } else if (info.groupFormed) {\n              // The other device acts as the client. In this case,\n              // you'll want to create a client thread that connects to the group\n              // owner.\n          }\n      }\n  ```\n\n  完善广播接收者的代码,监听到连接广播信号时候，请求连接。\n\n  ```java\n   ...\n          } else if (WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION.equals(action)) {\n\n              if (mManager == null) {\n                  return;\n              }\n\n              NetworkInfo networkInfo = (NetworkInfo) intent\n                      .getParcelableExtra(WifiP2pManager.EXTRA_NETWORK_INFO);\n\n              if (networkInfo.isConnected()) {\n\n                  // We are connected with the other device, request connection\n                  // info to find group owner IP\n\n                  mManager.requestConnectionInfo(mChannel, connectionListener);\n              }\n              ...\n  ```\n\n### 3、使用WiFi P2P服务\n\n第一节讲述了`NSD`服务用于局域网之间的连接通讯，本节的WiFi P2P有点类似，但是并不相同。\n\n- 配置Manifest\n\n  需要网络权限以及wifi相关权限。如上节所讲的三个权限，配置在Android manifest清单文件中。\n\n  ```xml\n  <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      package=\"com.example.android.nsdchat\"\n      ...\n\n      <uses-permission\n          android:required=\"true\"\n          android:name=\"android.permission.ACCESS_WIFI_STATE\"/>\n      <uses-permission\n          android:required=\"true\"\n          android:name=\"android.permission.CHANGE_WIFI_STATE\"/>\n      <uses-permission\n          android:required=\"true\"\n          android:name=\"android.permission.INTERNET\"/>\n      ...\n  ```\n\n- 添加本地服务\n\n  需要在服务框架中注册该服务，才能对外提供。\n\n  - 新建`WifiP2pServiceInfo`对象\n  - 加入相应的服务详细信息\n  - 调用`addLocalService()`来注册为本地服务。\n\n  ```java\n  private void startRegistration() {\n          //  Create a string map containing information about your service.\n          Map record = new HashMap();\n          record.put(\"listenport\", String.valueOf(SERVER_PORT));\n          record.put(\"buddyname\", \"John Doe\" + (int) (Math.random() * 1000));\n          record.put(\"available\", \"visible\");\n\n          // Service information.  Pass it an instance name, service type\n          // _protocol._transportlayer , and the map containing\n          // information other devices will want once they connect to this one.\n          WifiP2pDnsSdServiceInfo serviceInfo =\n                  WifiP2pDnsSdServiceInfo.newInstance(\"_test\", \"_presence._tcp\", record);\n\n          // Add the local service, sending the service info, network channel,\n          // and listener that will be used to indicate success or failure of\n          // the request.\n          mManager.addLocalService(channel, serviceInfo, new ActionListener() {\n              @Override\n              public void onSuccess() {\n                  // Command successful! Code isn't necessarily needed here,\n                  // Unless you want to update the UI or add logging statements.\n              }\n\n              @Override\n              public void onFailure(int arg0) {\n                  // Command failed.  Check for P2P_UNSUPPORTED, ERROR, or BUSY\n              }\n          });\n  }\n  ```\n\n- 发现附近的服务\n\n  新建一个`WifiP2pManager.DnsSdTxtRecordListener`实例来监听实时收到到记录。记录到的周边设备服务信息会拷贝到外部数据机构中，以供使用。\n\n  ```java\n  final HashMap<String, String> buddies = new HashMap<String, String>();\n  ...\n  private void discoverService() {\n      DnsSdTxtRecordListener txtListener = new DnsSdTxtRecordListener() {\n          @Override\n          /* Callback includes:\n           * fullDomain: full domain name: e.g \"printer._ipp._tcp.local.\"\n           * record: TXT record dta as a map of key/value pairs.\n           * device: The device running the advertised service.\n           */\n\n          public void onDnsSdTxtRecordAvailable(\n                  String fullDomain, Map record, WifiP2pDevice device) {\n                  Log.d(TAG, \"DnsSdTxtRecord available -\" + record.toString());\n                  buddies.put(device.deviceAddress, record.get(\"buddyname\"));\n              }\n          };\n      ...\n  }\n  ```\n\n  然后创建`WifiP2pManager.DnsSdServiceResponseListener`对象，来响应服务请求。上述两个listener匹配构建后，调用`setDnsResponseListener()`将它们加入`WifiP2pManager`。\n\n  ```java\n  private void discoverService() {\n  ...\n\n      DnsSdServiceResponseListener servListener = new DnsSdServiceResponseListener() {\n          @Override\n          public void onDnsSdServiceAvailable(String instanceName, String registrationType,\n                  WifiP2pDevice resourceType) {\n\n                  // Update the device name with the human-friendly version from\n                  // the DnsTxtRecord, assuming one arrived.\n                  resourceType.deviceName = buddies\n                          .containsKey(resourceType.deviceAddress) ? buddies\n                          .get(resourceType.deviceAddress) : resourceType.deviceName;\n\n                  // Add to the custom adapter defined specifically for showing\n                  // wifi devices.\n                  WiFiDirectServicesList fragment = (WiFiDirectServicesList) getFragmentManager()\n                          .findFragmentById(R.id.frag_peerlist);\n                  WiFiDevicesAdapter adapter = ((WiFiDevicesAdapter) fragment\n                          .getListAdapter());\n\n                  adapter.add(resourceType);\n                  adapter.notifyDataSetChanged();\n                  Log.d(TAG, \"onBonjourServiceAvailable \" + instanceName);\n          }\n      };\n\n      mManager.setDnsSdResponseListeners(channel, servListener, txtListener);\n      ...\n  }\n  ```\n\n  调用`addServiceRequest()`创建服务请求,它需要一个listener来通知创建成功与否。\n\n  ```java\n   serviceRequest = WifiP2pDnsSdServiceRequest.newInstance();\n          mManager.addServiceRequest(channel,\n                  serviceRequest,\n                  new ActionListener() {\n                      @Override\n                      public void onSuccess() {\n                          // Success!\n                      }\n\n                      @Override\n                      public void onFailure(int code) {\n                          // Command failed.  Check for P2P_UNSUPPORTED, ERROR, or BUSY\n                      }\n                  });\n  ```\n\n  最后是调用`discoverService()`\n\n  ```java\n  mManager.discoverServices(channel, new ActionListener() {\n\n              @Override\n              public void onSuccess() {\n                  // Success!\n              }\n\n              @Override\n              public void onFailure(int code) {\n                  // Command failed.  Check for P2P_UNSUPPORTED, ERROR, or BUSY\n                  if (code == WifiP2pManager.P2P_UNSUPPORTED) {\n                      Log.d(TAG, \"P2P isn't supported on this device.\");\n                  else if(...)\n                      ...\n              }\n          });\n  ```\n\n  顺利的话，可以实现匹配连接的效果，常见错误代码：\n\n  - P2P_UNSUPPORTED 当前设备不支持\n  - BUSY 系统繁忙\n  - ERROR 内部错误","slug":"Android学习笔记第五篇--网络连接与云服务","published":1,"updated":"2017-03-28T09:40:50.673Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0xj1neb0003scowpd0tnets","content":"<h1 id=\"Android学习笔记第五篇–网络连接与云服务\"><a href=\"#Android学习笔记第五篇–网络连接与云服务\" class=\"headerlink\" title=\"Android学习笔记第五篇–网络连接与云服务\"></a>Android学习笔记第五篇–网络连接与云服务</h1><h2 id=\"第一章、无线连接设备\"><a href=\"#第一章、无线连接设备\" class=\"headerlink\" title=\"第一章、无线连接设备\"></a>第一章、无线连接设备</h2><p>​    除了能够在云端通讯，Android的无线API也允许在同一局域网内的设备通讯，<strong>甚至没有连接网络，而是物理具体相近，也可以相互通讯。</strong>Network Service Discovery 简称NSD可以允许应用相互通讯发现附近设备。</p>\n<p>​    本节主要介绍Android应用发现与连接其他设备的API。主要介绍NSD的API和点对点无线(the Wi-Fi Peer-to-Peer)API。</p>\n<h3 id=\"1、使用网络服务发现-NSD\"><a href=\"#1、使用网络服务发现-NSD\" class=\"headerlink\" title=\"1、使用网络服务发现(NSD)\"></a>1、使用网络服务发现(NSD)</h3><p>添加NSD服务到App中，可以使用户辨识在局域网内支持app请求的设备。有助于更好的实现文件共享、联机游戏等服务需求。</p>\n<ul>\n<li><p>注册NSD服务</p>\n<blockquote>\n<p><strong>Note:</strong>注册NSD服务为非必选项，若是不关注本地网络的广播，则可以不用注册。</p>\n</blockquote>\n<p>在局域网内注册自身服务首先要创建<code>NsdServiceInfo</code>对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerService</span><span class=\"params\">(<span class=\"keyword\">int</span> port)</span></span>&#123;</div><div class=\"line\">  <span class=\"comment\">//创建并初始化NSD对象</span></div><div class=\"line\">  NsdServiceInfo serviceInfo = <span class=\"keyword\">new</span> NsdServiceInfo();</div><div class=\"line\">  <span class=\"comment\">//服务名称要保证唯一性</span></div><div class=\"line\">  serviceInfo.serServiceName(<span class=\"string\">\"NsdChat\"</span>);</div><div class=\"line\">  <span class=\"comment\">//指定协议和传输层，如指定打印服务\"_ipp._tcp\"</span></div><div class=\"line\">  serviceInfo.setServiceType(<span class=\"string\">\"_http._tcp.\"</span>);</div><div class=\"line\">  serviceInfo.setPort(port);</div><div class=\"line\">  .....</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如上创建了一个NSD服务，并设置了名称、服务类型。其中服务类型制定的是应用使用的协议和传输层。语法是<code>_&lt;protocol&gt;._&lt;transportlayer&gt;</code>。</p>\n<blockquote>\n<p><strong>Note:</strong>互联网编号分配机构(International Assigned Numbers Authority)提供用于服务发现协议，如NSD和Bonjour等。</p>\n</blockquote>\n<p>服务端口号应避免硬代码，以便于可以动态更改端口号，并更新通知。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initializeServerSocket</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"comment\">//初始化一个server socket，指定下面的端口</span></div><div class=\"line\">  mServiceSocket = <span class=\"keyword\">new</span> ServerSocket(<span class=\"number\">0</span>);</div><div class=\"line\">  <span class=\"comment\">//存储选择的端口号</span></div><div class=\"line\">  mLocalPort = mServerSocket.getLocalPort();</div><div class=\"line\">  ......</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>至此已经创建了<code>NsdServiceInfo</code>对象，接着要实现<code>RegistrationListener</code>接口，实现注册功能。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initializeRegistrationListener</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  mRegistrationListener = <span class=\"keyword\">new</span> NsdManager.RegistrationListener()&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceRegistered</span><span class=\"params\">(NsdServiceInfo nsdServiceInfo)</span></span>&#123;</div><div class=\"line\">      <span class=\"comment\">//需要更新已经保存的注册服务名称，因为它需要唯一性，若是命名冲突，Android会自动解决冲突，此处就需要更新获取。</span></div><div class=\"line\">      mServiceName = nsdServiceInfo.getServiceName();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onRegistrationFailed</span><span class=\"params\">(NsdServiceInfo serviceInfo,<span class=\"keyword\">int</span> errorCode)</span></span>&#123;</div><div class=\"line\">     <span class=\"comment\">//注册失败时候，在此处可以记录日志 </span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceUnregistered</span><span class=\"params\">(NsdServiceInfo arg0)</span></span>&#123;</div><div class=\"line\">      <span class=\"comment\">//注销服务，只有通过NsdManager来注销才会调用这里。</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onUnregistrationFailed</span><span class=\"params\">(NsdService serviceInfo,<span class=\"keyword\">int</span> errorCode)</span></span>&#123;</div><div class=\"line\">     <span class=\"comment\">//注销失败，记录日志 </span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>因为<code>registerService()</code>方法是异步的，在注册服务之后的操作，需要在<code>onServiceRegistered()</code>方法中进行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerService</span><span class=\"params\">(<span class=\"keyword\">int</span> port)</span></span>&#123;</div><div class=\"line\">  NsdServiceInfo serviceInfo = <span class=\"keyword\">new</span> NsdServiceInfo();</div><div class=\"line\">  serviceInfo.setServiceName(<span class=\"string\">\"NsdChat\"</span>);</div><div class=\"line\">  serviceInfo.setServiceType(<span class=\"string\">\"_http._tcp.\"</span>);</div><div class=\"line\">  serviceInfo.setPort(Port);</div><div class=\"line\">  </div><div class=\"line\">  mNsdManager = Context.getSystemService(Context.NSD_SERVICE);</div><div class=\"line\">  mNsdManager.registerService(serviceInfo,NsdManager.PROTOCOL_DNS_SD,mRegistrationListener);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>发现网络中的服务</p>\n<p>发现网络服务需要两步：</p>\n<ul>\n<li>注册网络监听器</li>\n<li>调用<code>discoverServices()</code>异步API</li>\n</ul>\n<p>1、创建<code>NsdManager.DiscoveryListener</code>接口的实现类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initializeDiscoveryListener</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"comment\">//实例化网络发现监听器</span></div><div class=\"line\">  mDiscoverListener = <span class=\"keyword\">new</span> NsdManager.DiscoveryListener()&#123;</div><div class=\"line\">    <span class=\"comment\">//发现服务时候调用该方法</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDiscoveryStarted</span><span class=\"params\">(String regType)</span></span>&#123;</div><div class=\"line\">      Log.d(TAG,<span class=\"string\">\"Service discovery started\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceFound</span><span class=\"params\">(NsdServiceInfo service)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// A service was found!  Do something with it.</span></div><div class=\"line\">            Log.d(TAG, <span class=\"string\">\"Service discovery success\"</span> + service);</div><div class=\"line\">            <span class=\"keyword\">if</span> (!service.getServiceType().equals(SERVICE_TYPE)) &#123;</div><div class=\"line\">                <span class=\"comment\">// Service type is the string containing the protocol and</span></div><div class=\"line\">                <span class=\"comment\">// transport layer for this service.</span></div><div class=\"line\">                Log.d(TAG, <span class=\"string\">\"Unknown Service Type: \"</span> + service.getServiceType());</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (service.getServiceName().equals(mServiceName)) &#123;</div><div class=\"line\">                <span class=\"comment\">// The name of the service tells the user what they'd be</span></div><div class=\"line\">                <span class=\"comment\">// connecting to. It could be \"Bob's Chat App\".</span></div><div class=\"line\">                Log.d(TAG, <span class=\"string\">\"Same machine: \"</span> + mServiceName);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (service.getServiceName().contains(<span class=\"string\">\"NsdChat\"</span>))&#123;</div><div class=\"line\">                mNsdManager.resolveService(service, mResolveListener);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceLost</span><span class=\"params\">(NsdServiceInfo service)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// When the network service is no longer available.</span></div><div class=\"line\">            <span class=\"comment\">// Internal bookkeeping code goes here.</span></div><div class=\"line\">            Log.e(TAG, <span class=\"string\">\"service lost\"</span> + service);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDiscoveryStopped</span><span class=\"params\">(String serviceType)</span> </span>&#123;</div><div class=\"line\">            Log.i(TAG, <span class=\"string\">\"Discovery stopped: \"</span> + serviceType);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStartDiscoveryFailed</span><span class=\"params\">(String serviceType, <span class=\"keyword\">int</span> errorCode)</span> </span>&#123;</div><div class=\"line\">            Log.e(TAG, <span class=\"string\">\"Discovery failed: Error code:\"</span> + errorCode);</div><div class=\"line\">            mNsdManager.stopServiceDiscovery(<span class=\"keyword\">this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStopDiscoveryFailed</span><span class=\"params\">(String serviceType, <span class=\"keyword\">int</span> errorCode)</span> </span>&#123;</div><div class=\"line\">            Log.e(TAG, <span class=\"string\">\"Discovery failed: Error code:\"</span> + errorCode);</div><div class=\"line\">            mNsdManager.stopServiceDiscovery(<span class=\"keyword\">this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>NSD API</code>通过使用该接口中的方法，可以对网络服务状态进行监控。设置好监听器后，调用<code>discoverService()</code>函数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mNsdManager.discoveryService(SERVICE_TYPE,NsdManager.PROTOCOL_DNS_SD,mDiscoveryListener);</div></pre></td></tr></table></figure>\n</li>\n<li><p>连接到网络上的服务</p>\n<p>发现网络上的可接入服务时，首先调用resolveService()方法，来确定服务连接信息。实现<code>NsdManage.ResolveListener</code>对象并将其传入<code>resolveService()</code>方法，并使用该对象获得<code>NsdSerServiceInfo</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initializeResolveListener</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  mResolveListener = <span class=\"keyword\">new</span> NsdManager.ResolveListener()&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResolveFailed</span><span class=\"params\">(NsdServiceInfo serviceInfo, <span class=\"keyword\">int</span> errorCode)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// Called when the resolve fails.  Use the error code to debug.</span></div><div class=\"line\">            Log.e(TAG, <span class=\"string\">\"Resolve failed\"</span> + errorCode);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceResolved</span><span class=\"params\">(NsdServiceInfo serviceInfo)</span> </span>&#123;</div><div class=\"line\">            Log.e(TAG, <span class=\"string\">\"Resolve Succeeded. \"</span> + serviceInfo);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (serviceInfo.getServiceName().equals(mServiceName)) &#123;</div><div class=\"line\">                Log.d(TAG, <span class=\"string\">\"Same IP.\"</span>);</div><div class=\"line\">                <span class=\"keyword\">return</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            mService = serviceInfo;</div><div class=\"line\">            <span class=\"keyword\">int</span> port = mService.getPort();</div><div class=\"line\">            InetAddress host = mService.getHost();</div><div class=\"line\">        &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>至此完成服务接入，即可实现本地与之通讯。</p>\n</li>\n<li><p>程序退出注销服务</p>\n<p>使用NSD服务是比较消耗资源的，而且重复链接会导致问题，所以需要在app生命周期内的合适阶段开启、关闭服务。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Activity</span></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onPause</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mNsdHelper != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            mNsdHelper.tearDown();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onPause();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onResume</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onResume();</div><div class=\"line\">        <span class=\"keyword\">if</span> (mNsdHelper != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            mNsdHelper.registerService(mConnection.getLocalPort());</div><div class=\"line\">            mNsdHelper.discoverServices();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mNsdHelper.tearDown();</div><div class=\"line\">        mConnection.tearDown();</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// NsdHelper's tearDown method</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">tearDown</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mNsdManager.unregisterService(mRegistrationListener);</div><div class=\"line\">        mNsdManager.stopServiceDiscovery(mDiscoveryListener);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"2、使用WiFi建立P2P连接\"><a href=\"#2、使用WiFi建立P2P连接\" class=\"headerlink\" title=\"2、使用WiFi建立P2P连接\"></a>2、使用WiFi建立P2P连接</h3><p>WiFi点对点(P2P)API允许应用程序在无需连接到网络和热点的情况下连接到附近的设备。相比于蓝牙技术，其具有加大的连接范围。</p>\n<ul>\n<li><p>配置应用权限</p>\n<p>使用Wi-Fi P2P技术需要添加<code>CHANGE_WIFI_STATE</code>,<code>ACCESS_WIFI_STATE</code>以及<code>INTERNET</code>三种权限，因为虽然Wi-Fi P2P技术可以不用访问互联网，但是它使用的是<code>Java socket</code>的标准，所以需要<code>INTERNET</code>权限。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"</div><div class=\"line\">          package=\"com.example.android.nsdchat\"</div><div class=\"line\">          ...</div><div class=\"line\">\t&lt;uses-permission</div><div class=\"line\">        android:required=\"true\"</div><div class=\"line\">        android:name=\"android.permission.ACCESS_WIFI_STATE\"/&gt;</div><div class=\"line\">\t&lt;uses-permission</div><div class=\"line\">        android:required=\"true\"</div><div class=\"line\">        android:name=\"android.permission.CHANGE_WIFI_STATE\"/&gt;</div><div class=\"line\">    &lt;uses-permission</div><div class=\"line\">        android:required=\"true\"</div><div class=\"line\">        android:name=\"android.permission.INTERNET\"/&gt;</div><div class=\"line\">    ...</div></pre></td></tr></table></figure>\n</li>\n<li><p>设置广播接收器和P2P管理器</p>\n<p>使用WiFi P2P时，需要侦听事件发生时的broadcast intent。需要<code>IntentFilter</code></p>\n<ul>\n<li><code>WIFI_P2P_STATE_CHANGED_ACTION</code>指示Wi-Fi P2P是否开启</li>\n<li><code>WIFI_P2P_PEERS_CHANGED_ACTION</code>代表对等列表节点发生了变化。</li>\n<li><code>WIFI_P2P_CONNECTION_CHANGED_ACTION</code>表明Wi-Fi P2P连接状态发生了变化。</li>\n<li><code>WIFI_P2P_THIS_DEVICE_CHANGED_ACTION</code>指示设备详细配置发生了变化。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> IntentFilter intentFilter = <span class=\"keyword\">new</span> IntentFilter();</div><div class=\"line\">...</div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">    setContentView(R.layout.main);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//  Indicates a change in the Wi-Fi P2P status.</span></div><div class=\"line\">    intentFilter.addAction(WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Indicates a change in the list of available peers.</span></div><div class=\"line\">    intentFilter.addAction(WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Indicates the state of Wi-Fi P2P connectivity has changed.</span></div><div class=\"line\">    intentFilter.addAction(WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Indicates this device's details have changed.</span></div><div class=\"line\">    intentFilter.addAction(WifiP2pManager.WIFI_P2P_THIS_DEVICE_CHANGED_ACTION);</div><div class=\"line\"></div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在<code>onCreate()</code>方法的最后，需要获得<code>WifiP2pManager</code>的实例，并调用他的<code>initailize()</code>方法，以获得<code>WifiP2pManager.Channel</code>对象.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Channel mChannel;</div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span></span>&#123;</div><div class=\"line\">  ...</div><div class=\"line\">    mManager = (WifiP2pManager)getSystemService(Context.WIFI_P2P_SERVICE);</div><div class=\"line\">\tmChannel = mManager.initialize(<span class=\"keyword\">this</span>,getMainLooper(),<span class=\"keyword\">null</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后创建广播接收着，监听上述不同的P2P状态变化。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceive</span><span class=\"params\">(Context context, Intent intent)</span> </span>&#123;</div><div class=\"line\">        String action = intent.getAction();</div><div class=\"line\">        <span class=\"keyword\">if</span> (WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION.equals(action)) &#123;</div><div class=\"line\">            <span class=\"comment\">// Determine if Wifi P2P mode is enabled or not, alert</span></div><div class=\"line\">            <span class=\"comment\">// the Activity.</span></div><div class=\"line\">            <span class=\"keyword\">int</span> state = intent.getIntExtra(WifiP2pManager.EXTRA_WIFI_STATE, -<span class=\"number\">1</span>);</div><div class=\"line\">            <span class=\"keyword\">if</span> (state == WifiP2pManager.WIFI_P2P_STATE_ENABLED) &#123;</div><div class=\"line\">                activity.setIsWifiP2pEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                activity.setIsWifiP2pEnabled(<span class=\"keyword\">false</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION.equals(action)) &#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// The peer list has changed!  We should probably do something about</span></div><div class=\"line\">            <span class=\"comment\">// that.</span></div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION.equals(action)) &#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// Connection state changed!  We should probably do something about</span></div><div class=\"line\">            <span class=\"comment\">// that.</span></div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (WifiP2pManager.WIFI_P2P_THIS_DEVICE_CHANGED_ACTION.equals(action)) &#123;</div><div class=\"line\">            DeviceListFragment fragment = (DeviceListFragment) activity.getFragmentManager()</div><div class=\"line\">                    .findFragmentById(R.id.frag_list);</div><div class=\"line\">            fragment.updateThisDevice((WifiP2pDevice) intent.getParcelableExtra(</div><div class=\"line\">                    WifiP2pManager.EXTRA_WIFI_P2P_DEVICE));</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>并在Activity启动时，注册广播，添加过滤器。Activity暂停或者关闭时候，注销广播。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"comment\">//在Activity启动后注册广播</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResume</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onResume();</div><div class=\"line\">        receiver = <span class=\"keyword\">new</span> WiFiDirectBroadcastReceiver(mManager, mChannel, <span class=\"keyword\">this</span>);</div><div class=\"line\">        registerReceiver(receiver, intentFilter);</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"comment\">//Activity关闭前，注销广播。</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPause</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onPause();</div><div class=\"line\">        unregisterReceiver(receiver);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>初始化对等节点发现(Peer Discovery)</p>\n<p>调用<code>discoveryPeers()</code>开始搜寻附近设备，需要传入参数</p>\n<ul>\n<li>上面得到的<code>WifiP2pManager.Channel</code>对象。</li>\n<li>对<code>WifiP2pManager.ActionListener</code>接口的实现，确定发现成功与失败时候的事件处理。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">mManager.discoverPeers(mChannel, <span class=\"keyword\">new</span> WifiP2pManager.ActionListener() &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSuccess</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// Code for when the discovery initiation is successful goes here.</span></div><div class=\"line\">            <span class=\"comment\">// No services have actually been discovered yet, so this method</span></div><div class=\"line\">            <span class=\"comment\">// can often be left blank.  Code for peer discovery goes in the</span></div><div class=\"line\">            <span class=\"comment\">// onReceive method, detailed below.</span></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(<span class=\"keyword\">int</span> reasonCode)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// Code for when the discovery initiation fails goes here.</span></div><div class=\"line\">            <span class=\"comment\">// Alert the user that something went wrong.</span></div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><strong>注意：</strong>如上仅仅完成了对匹配设备的发现扫描的初始化，<code>WifiP2pManager.ActionListener</code>中国年的方法会通知应用初始化是否正确等消息。</p>\n</li>\n<li><p>获取对等节点列表</p>\n<p>完成初始化后，扫描会得到匹配的附近设备列表信息。需要实现<code>WifiP2pManager.PeerListener</code>接口。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> List peers = <span class=\"keyword\">new</span> ArrayList();<span class=\"comment\">//匹配到的设备信息列表。</span></div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> PeerListListener peerListListener = <span class=\"keyword\">new</span> PeerListListener() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPeersAvailable</span><span class=\"params\">(WifiP2pDeviceList peerList)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// Out with the old, in with the new.</span></div><div class=\"line\">            peers.clear();</div><div class=\"line\">            peers.addAll(peerList.getDeviceList());</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// If an AdapterView is backed by this data, notify it</span></div><div class=\"line\">            <span class=\"comment\">// of the change.  For instance, if you have a ListView of available</span></div><div class=\"line\">            <span class=\"comment\">// peers, trigger an update.</span></div><div class=\"line\">            ((WiFiPeerListAdapter) getListAdapter()).notifyDataSetChanged();</div><div class=\"line\">            <span class=\"keyword\">if</span> (peers.size() == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                Log.d(WiFiDirectActivity.TAG, <span class=\"string\">\"No devices found\"</span>);</div><div class=\"line\">                <span class=\"keyword\">return</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>如上获得的匹配列表，我们需要将它传递给广播接收者做进一步处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceive</span><span class=\"params\">(Context context,Intent intent)</span></span>&#123;</div><div class=\"line\">  ...</div><div class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION.equals(action)) &#123;</div><div class=\"line\">        <span class=\"comment\">// Request available peers from the wifi p2p manager. This is an</span></div><div class=\"line\">        <span class=\"comment\">// asynchronous call and the calling activity is notified with a</span></div><div class=\"line\">        <span class=\"comment\">// callback on PeerListListener.onPeersAvailable()</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (mManager != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            mManager.requestPeers(mChannel, peerListListener);</div><div class=\"line\">        &#125;</div><div class=\"line\">        Log.d(WiFiDirectActivity.TAG, <span class=\"string\">\"P2P peers changed\"</span>);</div><div class=\"line\">    &#125;...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>连接一个对等节点</p>\n<p>发现到附近可用设备，则可以进一步的连接它，需要创建一个新的WifiP2pConfig对象，并将连接信息从设备WifiP2pDevice拷贝到其中，调用connect()方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">connect</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// Picking the first device found on the network.</span></div><div class=\"line\">      WifiP2pDevice device = peers.get(<span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">      WifiP2pConfig config = <span class=\"keyword\">new</span> WifiP2pConfig();</div><div class=\"line\">      config.deviceAddress = device.deviceAddress;</div><div class=\"line\">      config.wps.setup = WpsInfo.PBC;</div><div class=\"line\"><span class=\"comment\">//ActionListener仅实现通知初始化成功与否</span></div><div class=\"line\">      mManager.connect(mChannel, config, <span class=\"keyword\">new</span> ActionListener() &#123;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"meta\">@Override</span></div><div class=\"line\">          <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSuccess</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">              <span class=\"comment\">// WiFiDirectBroadcastReceiver will notify us. Ignore for now.</span></div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"meta\">@Override</span></div><div class=\"line\">          <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(<span class=\"keyword\">int</span> reason)</span> </span>&#123;</div><div class=\"line\">              Toast.makeText(WiFiDirectActivity.<span class=\"keyword\">this</span>, <span class=\"string\">\"Connect failed. Retry.\"</span>,</div><div class=\"line\">                      Toast.LENGTH_SHORT).show();</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>使用<code>WifiP2pManager.ConnectionInfoListener</code>接口，<code>onConnectionInfoAvailable()</code>来确定连接状态。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onConnectionInfoAvailable</span><span class=\"params\">(<span class=\"keyword\">final</span> WifiP2pInfo info)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// InetAddress from WifiP2pInfo struct.</span></div><div class=\"line\">    InetAddress groupOwnerAddress = info.groupOwnerAddress.getHostAddress());</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// After the group negotiation, we can determine the group owner.</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (info.groupFormed &amp;&amp; info.isGroupOwner) &#123;</div><div class=\"line\">        <span class=\"comment\">// Do whatever tasks are specific to the group owner.</span></div><div class=\"line\">        <span class=\"comment\">// One common case is creating a server thread and accepting</span></div><div class=\"line\">        <span class=\"comment\">// incoming connections.</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (info.groupFormed) &#123;</div><div class=\"line\">        <span class=\"comment\">// The other device acts as the client. In this case,</span></div><div class=\"line\">        <span class=\"comment\">// you'll want to create a client thread that connects to the group</span></div><div class=\"line\">        <span class=\"comment\">// owner.</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>完善广播接收者的代码,监听到连接广播信号时候，请求连接。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION.equals(action)) &#123;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"keyword\">if</span> (mManager == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">               <span class=\"keyword\">return</span>;</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           NetworkInfo networkInfo = (NetworkInfo) intent</div><div class=\"line\">                   .getParcelableExtra(WifiP2pManager.EXTRA_NETWORK_INFO);</div><div class=\"line\"></div><div class=\"line\">           <span class=\"keyword\">if</span> (networkInfo.isConnected()) &#123;</div><div class=\"line\"></div><div class=\"line\">               <span class=\"comment\">// We are connected with the other device, request connection</span></div><div class=\"line\">               <span class=\"comment\">// info to find group owner IP</span></div><div class=\"line\"></div><div class=\"line\">               mManager.requestConnectionInfo(mChannel, connectionListener);</div><div class=\"line\">           &#125;</div><div class=\"line\">           ...</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"3、使用WiFi-P2P服务\"><a href=\"#3、使用WiFi-P2P服务\" class=\"headerlink\" title=\"3、使用WiFi P2P服务\"></a>3、使用WiFi P2P服务</h3><p>第一节讲述了<code>NSD</code>服务用于局域网之间的连接通讯，本节的WiFi P2P有点类似，但是并不相同。</p>\n<ul>\n<li><p>配置Manifest</p>\n<p>需要网络权限以及wifi相关权限。如上节所讲的三个权限，配置在Android manifest清单文件中。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"</div><div class=\"line\">    package=\"com.example.android.nsdchat\"</div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    &lt;uses-permission</div><div class=\"line\">        android:required=\"true\"</div><div class=\"line\">        android:name=\"android.permission.ACCESS_WIFI_STATE\"/&gt;</div><div class=\"line\">    &lt;uses-permission</div><div class=\"line\">        android:required=\"true\"</div><div class=\"line\">        android:name=\"android.permission.CHANGE_WIFI_STATE\"/&gt;</div><div class=\"line\">    &lt;uses-permission</div><div class=\"line\">        android:required=\"true\"</div><div class=\"line\">        android:name=\"android.permission.INTERNET\"/&gt;</div><div class=\"line\">    ...</div></pre></td></tr></table></figure>\n</li>\n<li><p>添加本地服务</p>\n<p>需要在服务框架中注册该服务，才能对外提供。</p>\n<ul>\n<li>新建<code>WifiP2pServiceInfo</code>对象</li>\n<li>加入相应的服务详细信息</li>\n<li>调用<code>addLocalService()</code>来注册为本地服务。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">startRegistration</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//  Create a string map containing information about your service.</span></div><div class=\"line\">        Map record = <span class=\"keyword\">new</span> HashMap();</div><div class=\"line\">        record.put(<span class=\"string\">\"listenport\"</span>, String.valueOf(SERVER_PORT));</div><div class=\"line\">        record.put(<span class=\"string\">\"buddyname\"</span>, <span class=\"string\">\"John Doe\"</span> + (<span class=\"keyword\">int</span>) (Math.random() * <span class=\"number\">1000</span>));</div><div class=\"line\">        record.put(<span class=\"string\">\"available\"</span>, <span class=\"string\">\"visible\"</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Service information.  Pass it an instance name, service type</span></div><div class=\"line\">        <span class=\"comment\">// _protocol._transportlayer , and the map containing</span></div><div class=\"line\">        <span class=\"comment\">// information other devices will want once they connect to this one.</span></div><div class=\"line\">        WifiP2pDnsSdServiceInfo serviceInfo =</div><div class=\"line\">                WifiP2pDnsSdServiceInfo.newInstance(<span class=\"string\">\"_test\"</span>, <span class=\"string\">\"_presence._tcp\"</span>, record);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Add the local service, sending the service info, network channel,</span></div><div class=\"line\">        <span class=\"comment\">// and listener that will be used to indicate success or failure of</span></div><div class=\"line\">        <span class=\"comment\">// the request.</span></div><div class=\"line\">        mManager.addLocalService(channel, serviceInfo, <span class=\"keyword\">new</span> ActionListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSuccess</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                <span class=\"comment\">// Command successful! Code isn't necessarily needed here,</span></div><div class=\"line\">                <span class=\"comment\">// Unless you want to update the UI or add logging statements.</span></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(<span class=\"keyword\">int</span> arg0)</span> </span>&#123;</div><div class=\"line\">                <span class=\"comment\">// Command failed.  Check for P2P_UNSUPPORTED, ERROR, or BUSY</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>发现附近的服务</p>\n<p>新建一个<code>WifiP2pManager.DnsSdTxtRecordListener</code>实例来监听实时收到到记录。记录到的周边设备服务信息会拷贝到外部数据机构中，以供使用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> HashMap&lt;String, String&gt; buddies = <span class=\"keyword\">new</span> HashMap&lt;String, String&gt;();</div><div class=\"line\">...</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">discoverService</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    DnsSdTxtRecordListener txtListener = <span class=\"keyword\">new</span> DnsSdTxtRecordListener() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"comment\">/* Callback includes:</span></div><div class=\"line\">         * fullDomain: full domain name: e.g \"printer._ipp._tcp.local.\"</div><div class=\"line\">         * record: TXT record dta as a map of key/value pairs.</div><div class=\"line\">         * device: The device running the advertised service.</div><div class=\"line\">         */</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDnsSdTxtRecordAvailable</span><span class=\"params\">(</span></span></div><div class=\"line\">                String fullDomain, Map record, WifiP2pDevice device) &#123;</div><div class=\"line\">                Log.d(TAG, <span class=\"string\">\"DnsSdTxtRecord available -\"</span> + record.toString());</div><div class=\"line\">                buddies.put(device.deviceAddress, record.get(<span class=\"string\">\"buddyname\"</span>));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后创建<code>WifiP2pManager.DnsSdServiceResponseListener</code>对象，来响应服务请求。上述两个listener匹配构建后，调用<code>setDnsResponseListener()</code>将它们加入<code>WifiP2pManager</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">discoverService</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\">    DnsSdServiceResponseListener servListener = <span class=\"keyword\">new</span> DnsSdServiceResponseListener() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDnsSdServiceAvailable</span><span class=\"params\">(String instanceName, String registrationType,</span></span></div><div class=\"line\">                WifiP2pDevice resourceType) &#123;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// Update the device name with the human-friendly version from</span></div><div class=\"line\">                <span class=\"comment\">// the DnsTxtRecord, assuming one arrived.</span></div><div class=\"line\">                resourceType.deviceName = buddies</div><div class=\"line\">                        .containsKey(resourceType.deviceAddress) ? buddies</div><div class=\"line\">                        .get(resourceType.deviceAddress) : resourceType.deviceName;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// Add to the custom adapter defined specifically for showing</span></div><div class=\"line\">                <span class=\"comment\">// wifi devices.</span></div><div class=\"line\">                WiFiDirectServicesList fragment = (WiFiDirectServicesList) getFragmentManager()</div><div class=\"line\">                        .findFragmentById(R.id.frag_peerlist);</div><div class=\"line\">                WiFiDevicesAdapter adapter = ((WiFiDevicesAdapter) fragment</div><div class=\"line\">                        .getListAdapter());</div><div class=\"line\"></div><div class=\"line\">                adapter.add(resourceType);</div><div class=\"line\">                adapter.notifyDataSetChanged();</div><div class=\"line\">                Log.d(TAG, <span class=\"string\">\"onBonjourServiceAvailable \"</span> + instanceName);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    mManager.setDnsSdResponseListeners(channel, servListener, txtListener);</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>调用<code>addServiceRequest()</code>创建服务请求,它需要一个listener来通知创建成功与否。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">serviceRequest = WifiP2pDnsSdServiceRequest.newInstance();</div><div class=\"line\">       mManager.addServiceRequest(channel,</div><div class=\"line\">               serviceRequest,</div><div class=\"line\">               <span class=\"keyword\">new</span> ActionListener() &#123;</div><div class=\"line\">                   <span class=\"meta\">@Override</span></div><div class=\"line\">                   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSuccess</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                       <span class=\"comment\">// Success!</span></div><div class=\"line\">                   &#125;</div><div class=\"line\"></div><div class=\"line\">                   <span class=\"meta\">@Override</span></div><div class=\"line\">                   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(<span class=\"keyword\">int</span> code)</span> </span>&#123;</div><div class=\"line\">                       <span class=\"comment\">// Command failed.  Check for P2P_UNSUPPORTED, ERROR, or BUSY</span></div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125;);</div></pre></td></tr></table></figure>\n<p>最后是调用<code>discoverService()</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">mManager.discoverServices(channel, <span class=\"keyword\">new</span> ActionListener() &#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSuccess</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                <span class=\"comment\">// Success!</span></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(<span class=\"keyword\">int</span> code)</span> </span>&#123;</div><div class=\"line\">                <span class=\"comment\">// Command failed.  Check for P2P_UNSUPPORTED, ERROR, or BUSY</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (code == WifiP2pManager.P2P_UNSUPPORTED) &#123;</div><div class=\"line\">                    Log.d(TAG, <span class=\"string\">\"P2P isn't supported on this device.\"</span>);</div><div class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(...)</div><div class=\"line\">                    ...</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div></pre></td></tr></table></figure>\n<p>顺利的话，可以实现匹配连接的效果，常见错误代码：</p>\n<ul>\n<li>P2P_UNSUPPORTED 当前设备不支持</li>\n<li>BUSY 系统繁忙</li>\n<li>ERROR 内部错误</li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"Android学习笔记第五篇–网络连接与云服务\"><a href=\"#Android学习笔记第五篇–网络连接与云服务\" class=\"headerlink\" title=\"Android学习笔记第五篇–网络连接与云服务\"></a>Android学习笔记第五篇–网络连接与云服务</h1><h2 id=\"第一章、无线连接设备\"><a href=\"#第一章、无线连接设备\" class=\"headerlink\" title=\"第一章、无线连接设备\"></a>第一章、无线连接设备</h2><p>​    除了能够在云端通讯，Android的无线API也允许在同一局域网内的设备通讯，<strong>甚至没有连接网络，而是物理具体相近，也可以相互通讯。</strong>Network Service Discovery 简称NSD可以允许应用相互通讯发现附近设备。</p>\n<p>​    本节主要介绍Android应用发现与连接其他设备的API。主要介绍NSD的API和点对点无线(the Wi-Fi Peer-to-Peer)API。</p>\n<h3 id=\"1、使用网络服务发现-NSD\"><a href=\"#1、使用网络服务发现-NSD\" class=\"headerlink\" title=\"1、使用网络服务发现(NSD)\"></a>1、使用网络服务发现(NSD)</h3><p>添加NSD服务到App中，可以使用户辨识在局域网内支持app请求的设备。有助于更好的实现文件共享、联机游戏等服务需求。</p>\n<ul>\n<li><p>注册NSD服务</p>\n<blockquote>\n<p><strong>Note:</strong>注册NSD服务为非必选项，若是不关注本地网络的广播，则可以不用注册。</p>\n</blockquote>\n<p>在局域网内注册自身服务首先要创建<code>NsdServiceInfo</code>对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerService</span><span class=\"params\">(<span class=\"keyword\">int</span> port)</span></span>&#123;</div><div class=\"line\">  <span class=\"comment\">//创建并初始化NSD对象</span></div><div class=\"line\">  NsdServiceInfo serviceInfo = <span class=\"keyword\">new</span> NsdServiceInfo();</div><div class=\"line\">  <span class=\"comment\">//服务名称要保证唯一性</span></div><div class=\"line\">  serviceInfo.serServiceName(<span class=\"string\">\"NsdChat\"</span>);</div><div class=\"line\">  <span class=\"comment\">//指定协议和传输层，如指定打印服务\"_ipp._tcp\"</span></div><div class=\"line\">  serviceInfo.setServiceType(<span class=\"string\">\"_http._tcp.\"</span>);</div><div class=\"line\">  serviceInfo.setPort(port);</div><div class=\"line\">  .....</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如上创建了一个NSD服务，并设置了名称、服务类型。其中服务类型制定的是应用使用的协议和传输层。语法是<code>_&lt;protocol&gt;._&lt;transportlayer&gt;</code>。</p>\n<blockquote>\n<p><strong>Note:</strong>互联网编号分配机构(International Assigned Numbers Authority)提供用于服务发现协议，如NSD和Bonjour等。</p>\n</blockquote>\n<p>服务端口号应避免硬代码，以便于可以动态更改端口号，并更新通知。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initializeServerSocket</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"comment\">//初始化一个server socket，指定下面的端口</span></div><div class=\"line\">  mServiceSocket = <span class=\"keyword\">new</span> ServerSocket(<span class=\"number\">0</span>);</div><div class=\"line\">  <span class=\"comment\">//存储选择的端口号</span></div><div class=\"line\">  mLocalPort = mServerSocket.getLocalPort();</div><div class=\"line\">  ......</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>至此已经创建了<code>NsdServiceInfo</code>对象，接着要实现<code>RegistrationListener</code>接口，实现注册功能。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initializeRegistrationListener</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  mRegistrationListener = <span class=\"keyword\">new</span> NsdManager.RegistrationListener()&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceRegistered</span><span class=\"params\">(NsdServiceInfo nsdServiceInfo)</span></span>&#123;</div><div class=\"line\">      <span class=\"comment\">//需要更新已经保存的注册服务名称，因为它需要唯一性，若是命名冲突，Android会自动解决冲突，此处就需要更新获取。</span></div><div class=\"line\">      mServiceName = nsdServiceInfo.getServiceName();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onRegistrationFailed</span><span class=\"params\">(NsdServiceInfo serviceInfo,<span class=\"keyword\">int</span> errorCode)</span></span>&#123;</div><div class=\"line\">     <span class=\"comment\">//注册失败时候，在此处可以记录日志 </span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceUnregistered</span><span class=\"params\">(NsdServiceInfo arg0)</span></span>&#123;</div><div class=\"line\">      <span class=\"comment\">//注销服务，只有通过NsdManager来注销才会调用这里。</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onUnregistrationFailed</span><span class=\"params\">(NsdService serviceInfo,<span class=\"keyword\">int</span> errorCode)</span></span>&#123;</div><div class=\"line\">     <span class=\"comment\">//注销失败，记录日志 </span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>因为<code>registerService()</code>方法是异步的，在注册服务之后的操作，需要在<code>onServiceRegistered()</code>方法中进行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerService</span><span class=\"params\">(<span class=\"keyword\">int</span> port)</span></span>&#123;</div><div class=\"line\">  NsdServiceInfo serviceInfo = <span class=\"keyword\">new</span> NsdServiceInfo();</div><div class=\"line\">  serviceInfo.setServiceName(<span class=\"string\">\"NsdChat\"</span>);</div><div class=\"line\">  serviceInfo.setServiceType(<span class=\"string\">\"_http._tcp.\"</span>);</div><div class=\"line\">  serviceInfo.setPort(Port);</div><div class=\"line\">  </div><div class=\"line\">  mNsdManager = Context.getSystemService(Context.NSD_SERVICE);</div><div class=\"line\">  mNsdManager.registerService(serviceInfo,NsdManager.PROTOCOL_DNS_SD,mRegistrationListener);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>发现网络中的服务</p>\n<p>发现网络服务需要两步：</p>\n<ul>\n<li>注册网络监听器</li>\n<li>调用<code>discoverServices()</code>异步API</li>\n</ul>\n<p>1、创建<code>NsdManager.DiscoveryListener</code>接口的实现类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initializeDiscoveryListener</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"comment\">//实例化网络发现监听器</span></div><div class=\"line\">  mDiscoverListener = <span class=\"keyword\">new</span> NsdManager.DiscoveryListener()&#123;</div><div class=\"line\">    <span class=\"comment\">//发现服务时候调用该方法</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDiscoveryStarted</span><span class=\"params\">(String regType)</span></span>&#123;</div><div class=\"line\">      Log.d(TAG,<span class=\"string\">\"Service discovery started\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceFound</span><span class=\"params\">(NsdServiceInfo service)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// A service was found!  Do something with it.</span></div><div class=\"line\">            Log.d(TAG, <span class=\"string\">\"Service discovery success\"</span> + service);</div><div class=\"line\">            <span class=\"keyword\">if</span> (!service.getServiceType().equals(SERVICE_TYPE)) &#123;</div><div class=\"line\">                <span class=\"comment\">// Service type is the string containing the protocol and</span></div><div class=\"line\">                <span class=\"comment\">// transport layer for this service.</span></div><div class=\"line\">                Log.d(TAG, <span class=\"string\">\"Unknown Service Type: \"</span> + service.getServiceType());</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (service.getServiceName().equals(mServiceName)) &#123;</div><div class=\"line\">                <span class=\"comment\">// The name of the service tells the user what they'd be</span></div><div class=\"line\">                <span class=\"comment\">// connecting to. It could be \"Bob's Chat App\".</span></div><div class=\"line\">                Log.d(TAG, <span class=\"string\">\"Same machine: \"</span> + mServiceName);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (service.getServiceName().contains(<span class=\"string\">\"NsdChat\"</span>))&#123;</div><div class=\"line\">                mNsdManager.resolveService(service, mResolveListener);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceLost</span><span class=\"params\">(NsdServiceInfo service)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// When the network service is no longer available.</span></div><div class=\"line\">            <span class=\"comment\">// Internal bookkeeping code goes here.</span></div><div class=\"line\">            Log.e(TAG, <span class=\"string\">\"service lost\"</span> + service);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDiscoveryStopped</span><span class=\"params\">(String serviceType)</span> </span>&#123;</div><div class=\"line\">            Log.i(TAG, <span class=\"string\">\"Discovery stopped: \"</span> + serviceType);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStartDiscoveryFailed</span><span class=\"params\">(String serviceType, <span class=\"keyword\">int</span> errorCode)</span> </span>&#123;</div><div class=\"line\">            Log.e(TAG, <span class=\"string\">\"Discovery failed: Error code:\"</span> + errorCode);</div><div class=\"line\">            mNsdManager.stopServiceDiscovery(<span class=\"keyword\">this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStopDiscoveryFailed</span><span class=\"params\">(String serviceType, <span class=\"keyword\">int</span> errorCode)</span> </span>&#123;</div><div class=\"line\">            Log.e(TAG, <span class=\"string\">\"Discovery failed: Error code:\"</span> + errorCode);</div><div class=\"line\">            mNsdManager.stopServiceDiscovery(<span class=\"keyword\">this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>NSD API</code>通过使用该接口中的方法，可以对网络服务状态进行监控。设置好监听器后，调用<code>discoverService()</code>函数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mNsdManager.discoveryService(SERVICE_TYPE,NsdManager.PROTOCOL_DNS_SD,mDiscoveryListener);</div></pre></td></tr></table></figure>\n</li>\n<li><p>连接到网络上的服务</p>\n<p>发现网络上的可接入服务时，首先调用resolveService()方法，来确定服务连接信息。实现<code>NsdManage.ResolveListener</code>对象并将其传入<code>resolveService()</code>方法，并使用该对象获得<code>NsdSerServiceInfo</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initializeResolveListener</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  mResolveListener = <span class=\"keyword\">new</span> NsdManager.ResolveListener()&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResolveFailed</span><span class=\"params\">(NsdServiceInfo serviceInfo, <span class=\"keyword\">int</span> errorCode)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// Called when the resolve fails.  Use the error code to debug.</span></div><div class=\"line\">            Log.e(TAG, <span class=\"string\">\"Resolve failed\"</span> + errorCode);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceResolved</span><span class=\"params\">(NsdServiceInfo serviceInfo)</span> </span>&#123;</div><div class=\"line\">            Log.e(TAG, <span class=\"string\">\"Resolve Succeeded. \"</span> + serviceInfo);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (serviceInfo.getServiceName().equals(mServiceName)) &#123;</div><div class=\"line\">                Log.d(TAG, <span class=\"string\">\"Same IP.\"</span>);</div><div class=\"line\">                <span class=\"keyword\">return</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            mService = serviceInfo;</div><div class=\"line\">            <span class=\"keyword\">int</span> port = mService.getPort();</div><div class=\"line\">            InetAddress host = mService.getHost();</div><div class=\"line\">        &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>至此完成服务接入，即可实现本地与之通讯。</p>\n</li>\n<li><p>程序退出注销服务</p>\n<p>使用NSD服务是比较消耗资源的，而且重复链接会导致问题，所以需要在app生命周期内的合适阶段开启、关闭服务。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Activity</span></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onPause</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mNsdHelper != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            mNsdHelper.tearDown();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onPause();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onResume</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onResume();</div><div class=\"line\">        <span class=\"keyword\">if</span> (mNsdHelper != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            mNsdHelper.registerService(mConnection.getLocalPort());</div><div class=\"line\">            mNsdHelper.discoverServices();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mNsdHelper.tearDown();</div><div class=\"line\">        mConnection.tearDown();</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// NsdHelper's tearDown method</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">tearDown</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mNsdManager.unregisterService(mRegistrationListener);</div><div class=\"line\">        mNsdManager.stopServiceDiscovery(mDiscoveryListener);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"2、使用WiFi建立P2P连接\"><a href=\"#2、使用WiFi建立P2P连接\" class=\"headerlink\" title=\"2、使用WiFi建立P2P连接\"></a>2、使用WiFi建立P2P连接</h3><p>WiFi点对点(P2P)API允许应用程序在无需连接到网络和热点的情况下连接到附近的设备。相比于蓝牙技术，其具有加大的连接范围。</p>\n<ul>\n<li><p>配置应用权限</p>\n<p>使用Wi-Fi P2P技术需要添加<code>CHANGE_WIFI_STATE</code>,<code>ACCESS_WIFI_STATE</code>以及<code>INTERNET</code>三种权限，因为虽然Wi-Fi P2P技术可以不用访问互联网，但是它使用的是<code>Java socket</code>的标准，所以需要<code>INTERNET</code>权限。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"</div><div class=\"line\">          package=\"com.example.android.nsdchat\"</div><div class=\"line\">          ...</div><div class=\"line\">\t&lt;uses-permission</div><div class=\"line\">        android:required=\"true\"</div><div class=\"line\">        android:name=\"android.permission.ACCESS_WIFI_STATE\"/&gt;</div><div class=\"line\">\t&lt;uses-permission</div><div class=\"line\">        android:required=\"true\"</div><div class=\"line\">        android:name=\"android.permission.CHANGE_WIFI_STATE\"/&gt;</div><div class=\"line\">    &lt;uses-permission</div><div class=\"line\">        android:required=\"true\"</div><div class=\"line\">        android:name=\"android.permission.INTERNET\"/&gt;</div><div class=\"line\">    ...</div></pre></td></tr></table></figure>\n</li>\n<li><p>设置广播接收器和P2P管理器</p>\n<p>使用WiFi P2P时，需要侦听事件发生时的broadcast intent。需要<code>IntentFilter</code></p>\n<ul>\n<li><code>WIFI_P2P_STATE_CHANGED_ACTION</code>指示Wi-Fi P2P是否开启</li>\n<li><code>WIFI_P2P_PEERS_CHANGED_ACTION</code>代表对等列表节点发生了变化。</li>\n<li><code>WIFI_P2P_CONNECTION_CHANGED_ACTION</code>表明Wi-Fi P2P连接状态发生了变化。</li>\n<li><code>WIFI_P2P_THIS_DEVICE_CHANGED_ACTION</code>指示设备详细配置发生了变化。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> IntentFilter intentFilter = <span class=\"keyword\">new</span> IntentFilter();</div><div class=\"line\">...</div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">    setContentView(R.layout.main);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//  Indicates a change in the Wi-Fi P2P status.</span></div><div class=\"line\">    intentFilter.addAction(WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Indicates a change in the list of available peers.</span></div><div class=\"line\">    intentFilter.addAction(WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Indicates the state of Wi-Fi P2P connectivity has changed.</span></div><div class=\"line\">    intentFilter.addAction(WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Indicates this device's details have changed.</span></div><div class=\"line\">    intentFilter.addAction(WifiP2pManager.WIFI_P2P_THIS_DEVICE_CHANGED_ACTION);</div><div class=\"line\"></div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在<code>onCreate()</code>方法的最后，需要获得<code>WifiP2pManager</code>的实例，并调用他的<code>initailize()</code>方法，以获得<code>WifiP2pManager.Channel</code>对象.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Channel mChannel;</div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span></span>&#123;</div><div class=\"line\">  ...</div><div class=\"line\">    mManager = (WifiP2pManager)getSystemService(Context.WIFI_P2P_SERVICE);</div><div class=\"line\">\tmChannel = mManager.initialize(<span class=\"keyword\">this</span>,getMainLooper(),<span class=\"keyword\">null</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后创建广播接收着，监听上述不同的P2P状态变化。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceive</span><span class=\"params\">(Context context, Intent intent)</span> </span>&#123;</div><div class=\"line\">        String action = intent.getAction();</div><div class=\"line\">        <span class=\"keyword\">if</span> (WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION.equals(action)) &#123;</div><div class=\"line\">            <span class=\"comment\">// Determine if Wifi P2P mode is enabled or not, alert</span></div><div class=\"line\">            <span class=\"comment\">// the Activity.</span></div><div class=\"line\">            <span class=\"keyword\">int</span> state = intent.getIntExtra(WifiP2pManager.EXTRA_WIFI_STATE, -<span class=\"number\">1</span>);</div><div class=\"line\">            <span class=\"keyword\">if</span> (state == WifiP2pManager.WIFI_P2P_STATE_ENABLED) &#123;</div><div class=\"line\">                activity.setIsWifiP2pEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                activity.setIsWifiP2pEnabled(<span class=\"keyword\">false</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION.equals(action)) &#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// The peer list has changed!  We should probably do something about</span></div><div class=\"line\">            <span class=\"comment\">// that.</span></div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION.equals(action)) &#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// Connection state changed!  We should probably do something about</span></div><div class=\"line\">            <span class=\"comment\">// that.</span></div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (WifiP2pManager.WIFI_P2P_THIS_DEVICE_CHANGED_ACTION.equals(action)) &#123;</div><div class=\"line\">            DeviceListFragment fragment = (DeviceListFragment) activity.getFragmentManager()</div><div class=\"line\">                    .findFragmentById(R.id.frag_list);</div><div class=\"line\">            fragment.updateThisDevice((WifiP2pDevice) intent.getParcelableExtra(</div><div class=\"line\">                    WifiP2pManager.EXTRA_WIFI_P2P_DEVICE));</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>并在Activity启动时，注册广播，添加过滤器。Activity暂停或者关闭时候，注销广播。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"comment\">//在Activity启动后注册广播</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResume</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onResume();</div><div class=\"line\">        receiver = <span class=\"keyword\">new</span> WiFiDirectBroadcastReceiver(mManager, mChannel, <span class=\"keyword\">this</span>);</div><div class=\"line\">        registerReceiver(receiver, intentFilter);</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"comment\">//Activity关闭前，注销广播。</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPause</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onPause();</div><div class=\"line\">        unregisterReceiver(receiver);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>初始化对等节点发现(Peer Discovery)</p>\n<p>调用<code>discoveryPeers()</code>开始搜寻附近设备，需要传入参数</p>\n<ul>\n<li>上面得到的<code>WifiP2pManager.Channel</code>对象。</li>\n<li>对<code>WifiP2pManager.ActionListener</code>接口的实现，确定发现成功与失败时候的事件处理。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">mManager.discoverPeers(mChannel, <span class=\"keyword\">new</span> WifiP2pManager.ActionListener() &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSuccess</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// Code for when the discovery initiation is successful goes here.</span></div><div class=\"line\">            <span class=\"comment\">// No services have actually been discovered yet, so this method</span></div><div class=\"line\">            <span class=\"comment\">// can often be left blank.  Code for peer discovery goes in the</span></div><div class=\"line\">            <span class=\"comment\">// onReceive method, detailed below.</span></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(<span class=\"keyword\">int</span> reasonCode)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// Code for when the discovery initiation fails goes here.</span></div><div class=\"line\">            <span class=\"comment\">// Alert the user that something went wrong.</span></div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><strong>注意：</strong>如上仅仅完成了对匹配设备的发现扫描的初始化，<code>WifiP2pManager.ActionListener</code>中国年的方法会通知应用初始化是否正确等消息。</p>\n</li>\n<li><p>获取对等节点列表</p>\n<p>完成初始化后，扫描会得到匹配的附近设备列表信息。需要实现<code>WifiP2pManager.PeerListener</code>接口。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> List peers = <span class=\"keyword\">new</span> ArrayList();<span class=\"comment\">//匹配到的设备信息列表。</span></div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> PeerListListener peerListListener = <span class=\"keyword\">new</span> PeerListListener() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPeersAvailable</span><span class=\"params\">(WifiP2pDeviceList peerList)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// Out with the old, in with the new.</span></div><div class=\"line\">            peers.clear();</div><div class=\"line\">            peers.addAll(peerList.getDeviceList());</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// If an AdapterView is backed by this data, notify it</span></div><div class=\"line\">            <span class=\"comment\">// of the change.  For instance, if you have a ListView of available</span></div><div class=\"line\">            <span class=\"comment\">// peers, trigger an update.</span></div><div class=\"line\">            ((WiFiPeerListAdapter) getListAdapter()).notifyDataSetChanged();</div><div class=\"line\">            <span class=\"keyword\">if</span> (peers.size() == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                Log.d(WiFiDirectActivity.TAG, <span class=\"string\">\"No devices found\"</span>);</div><div class=\"line\">                <span class=\"keyword\">return</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>如上获得的匹配列表，我们需要将它传递给广播接收者做进一步处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceive</span><span class=\"params\">(Context context,Intent intent)</span></span>&#123;</div><div class=\"line\">  ...</div><div class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION.equals(action)) &#123;</div><div class=\"line\">        <span class=\"comment\">// Request available peers from the wifi p2p manager. This is an</span></div><div class=\"line\">        <span class=\"comment\">// asynchronous call and the calling activity is notified with a</span></div><div class=\"line\">        <span class=\"comment\">// callback on PeerListListener.onPeersAvailable()</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (mManager != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            mManager.requestPeers(mChannel, peerListListener);</div><div class=\"line\">        &#125;</div><div class=\"line\">        Log.d(WiFiDirectActivity.TAG, <span class=\"string\">\"P2P peers changed\"</span>);</div><div class=\"line\">    &#125;...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>连接一个对等节点</p>\n<p>发现到附近可用设备，则可以进一步的连接它，需要创建一个新的WifiP2pConfig对象，并将连接信息从设备WifiP2pDevice拷贝到其中，调用connect()方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">connect</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// Picking the first device found on the network.</span></div><div class=\"line\">      WifiP2pDevice device = peers.get(<span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">      WifiP2pConfig config = <span class=\"keyword\">new</span> WifiP2pConfig();</div><div class=\"line\">      config.deviceAddress = device.deviceAddress;</div><div class=\"line\">      config.wps.setup = WpsInfo.PBC;</div><div class=\"line\"><span class=\"comment\">//ActionListener仅实现通知初始化成功与否</span></div><div class=\"line\">      mManager.connect(mChannel, config, <span class=\"keyword\">new</span> ActionListener() &#123;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"meta\">@Override</span></div><div class=\"line\">          <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSuccess</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">              <span class=\"comment\">// WiFiDirectBroadcastReceiver will notify us. Ignore for now.</span></div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"meta\">@Override</span></div><div class=\"line\">          <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(<span class=\"keyword\">int</span> reason)</span> </span>&#123;</div><div class=\"line\">              Toast.makeText(WiFiDirectActivity.<span class=\"keyword\">this</span>, <span class=\"string\">\"Connect failed. Retry.\"</span>,</div><div class=\"line\">                      Toast.LENGTH_SHORT).show();</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>使用<code>WifiP2pManager.ConnectionInfoListener</code>接口，<code>onConnectionInfoAvailable()</code>来确定连接状态。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onConnectionInfoAvailable</span><span class=\"params\">(<span class=\"keyword\">final</span> WifiP2pInfo info)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// InetAddress from WifiP2pInfo struct.</span></div><div class=\"line\">    InetAddress groupOwnerAddress = info.groupOwnerAddress.getHostAddress());</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// After the group negotiation, we can determine the group owner.</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (info.groupFormed &amp;&amp; info.isGroupOwner) &#123;</div><div class=\"line\">        <span class=\"comment\">// Do whatever tasks are specific to the group owner.</span></div><div class=\"line\">        <span class=\"comment\">// One common case is creating a server thread and accepting</span></div><div class=\"line\">        <span class=\"comment\">// incoming connections.</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (info.groupFormed) &#123;</div><div class=\"line\">        <span class=\"comment\">// The other device acts as the client. In this case,</span></div><div class=\"line\">        <span class=\"comment\">// you'll want to create a client thread that connects to the group</span></div><div class=\"line\">        <span class=\"comment\">// owner.</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>完善广播接收者的代码,监听到连接广播信号时候，请求连接。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION.equals(action)) &#123;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"keyword\">if</span> (mManager == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">               <span class=\"keyword\">return</span>;</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           NetworkInfo networkInfo = (NetworkInfo) intent</div><div class=\"line\">                   .getParcelableExtra(WifiP2pManager.EXTRA_NETWORK_INFO);</div><div class=\"line\"></div><div class=\"line\">           <span class=\"keyword\">if</span> (networkInfo.isConnected()) &#123;</div><div class=\"line\"></div><div class=\"line\">               <span class=\"comment\">// We are connected with the other device, request connection</span></div><div class=\"line\">               <span class=\"comment\">// info to find group owner IP</span></div><div class=\"line\"></div><div class=\"line\">               mManager.requestConnectionInfo(mChannel, connectionListener);</div><div class=\"line\">           &#125;</div><div class=\"line\">           ...</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"3、使用WiFi-P2P服务\"><a href=\"#3、使用WiFi-P2P服务\" class=\"headerlink\" title=\"3、使用WiFi P2P服务\"></a>3、使用WiFi P2P服务</h3><p>第一节讲述了<code>NSD</code>服务用于局域网之间的连接通讯，本节的WiFi P2P有点类似，但是并不相同。</p>\n<ul>\n<li><p>配置Manifest</p>\n<p>需要网络权限以及wifi相关权限。如上节所讲的三个权限，配置在Android manifest清单文件中。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"</div><div class=\"line\">    package=\"com.example.android.nsdchat\"</div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    &lt;uses-permission</div><div class=\"line\">        android:required=\"true\"</div><div class=\"line\">        android:name=\"android.permission.ACCESS_WIFI_STATE\"/&gt;</div><div class=\"line\">    &lt;uses-permission</div><div class=\"line\">        android:required=\"true\"</div><div class=\"line\">        android:name=\"android.permission.CHANGE_WIFI_STATE\"/&gt;</div><div class=\"line\">    &lt;uses-permission</div><div class=\"line\">        android:required=\"true\"</div><div class=\"line\">        android:name=\"android.permission.INTERNET\"/&gt;</div><div class=\"line\">    ...</div></pre></td></tr></table></figure>\n</li>\n<li><p>添加本地服务</p>\n<p>需要在服务框架中注册该服务，才能对外提供。</p>\n<ul>\n<li>新建<code>WifiP2pServiceInfo</code>对象</li>\n<li>加入相应的服务详细信息</li>\n<li>调用<code>addLocalService()</code>来注册为本地服务。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">startRegistration</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//  Create a string map containing information about your service.</span></div><div class=\"line\">        Map record = <span class=\"keyword\">new</span> HashMap();</div><div class=\"line\">        record.put(<span class=\"string\">\"listenport\"</span>, String.valueOf(SERVER_PORT));</div><div class=\"line\">        record.put(<span class=\"string\">\"buddyname\"</span>, <span class=\"string\">\"John Doe\"</span> + (<span class=\"keyword\">int</span>) (Math.random() * <span class=\"number\">1000</span>));</div><div class=\"line\">        record.put(<span class=\"string\">\"available\"</span>, <span class=\"string\">\"visible\"</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Service information.  Pass it an instance name, service type</span></div><div class=\"line\">        <span class=\"comment\">// _protocol._transportlayer , and the map containing</span></div><div class=\"line\">        <span class=\"comment\">// information other devices will want once they connect to this one.</span></div><div class=\"line\">        WifiP2pDnsSdServiceInfo serviceInfo =</div><div class=\"line\">                WifiP2pDnsSdServiceInfo.newInstance(<span class=\"string\">\"_test\"</span>, <span class=\"string\">\"_presence._tcp\"</span>, record);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Add the local service, sending the service info, network channel,</span></div><div class=\"line\">        <span class=\"comment\">// and listener that will be used to indicate success or failure of</span></div><div class=\"line\">        <span class=\"comment\">// the request.</span></div><div class=\"line\">        mManager.addLocalService(channel, serviceInfo, <span class=\"keyword\">new</span> ActionListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSuccess</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                <span class=\"comment\">// Command successful! Code isn't necessarily needed here,</span></div><div class=\"line\">                <span class=\"comment\">// Unless you want to update the UI or add logging statements.</span></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(<span class=\"keyword\">int</span> arg0)</span> </span>&#123;</div><div class=\"line\">                <span class=\"comment\">// Command failed.  Check for P2P_UNSUPPORTED, ERROR, or BUSY</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>发现附近的服务</p>\n<p>新建一个<code>WifiP2pManager.DnsSdTxtRecordListener</code>实例来监听实时收到到记录。记录到的周边设备服务信息会拷贝到外部数据机构中，以供使用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> HashMap&lt;String, String&gt; buddies = <span class=\"keyword\">new</span> HashMap&lt;String, String&gt;();</div><div class=\"line\">...</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">discoverService</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    DnsSdTxtRecordListener txtListener = <span class=\"keyword\">new</span> DnsSdTxtRecordListener() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"comment\">/* Callback includes:</span></div><div class=\"line\">         * fullDomain: full domain name: e.g \"printer._ipp._tcp.local.\"</div><div class=\"line\">         * record: TXT record dta as a map of key/value pairs.</div><div class=\"line\">         * device: The device running the advertised service.</div><div class=\"line\">         */</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDnsSdTxtRecordAvailable</span><span class=\"params\">(</span></span></div><div class=\"line\">                String fullDomain, Map record, WifiP2pDevice device) &#123;</div><div class=\"line\">                Log.d(TAG, <span class=\"string\">\"DnsSdTxtRecord available -\"</span> + record.toString());</div><div class=\"line\">                buddies.put(device.deviceAddress, record.get(<span class=\"string\">\"buddyname\"</span>));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后创建<code>WifiP2pManager.DnsSdServiceResponseListener</code>对象，来响应服务请求。上述两个listener匹配构建后，调用<code>setDnsResponseListener()</code>将它们加入<code>WifiP2pManager</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">discoverService</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\">    DnsSdServiceResponseListener servListener = <span class=\"keyword\">new</span> DnsSdServiceResponseListener() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDnsSdServiceAvailable</span><span class=\"params\">(String instanceName, String registrationType,</span></span></div><div class=\"line\">                WifiP2pDevice resourceType) &#123;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// Update the device name with the human-friendly version from</span></div><div class=\"line\">                <span class=\"comment\">// the DnsTxtRecord, assuming one arrived.</span></div><div class=\"line\">                resourceType.deviceName = buddies</div><div class=\"line\">                        .containsKey(resourceType.deviceAddress) ? buddies</div><div class=\"line\">                        .get(resourceType.deviceAddress) : resourceType.deviceName;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// Add to the custom adapter defined specifically for showing</span></div><div class=\"line\">                <span class=\"comment\">// wifi devices.</span></div><div class=\"line\">                WiFiDirectServicesList fragment = (WiFiDirectServicesList) getFragmentManager()</div><div class=\"line\">                        .findFragmentById(R.id.frag_peerlist);</div><div class=\"line\">                WiFiDevicesAdapter adapter = ((WiFiDevicesAdapter) fragment</div><div class=\"line\">                        .getListAdapter());</div><div class=\"line\"></div><div class=\"line\">                adapter.add(resourceType);</div><div class=\"line\">                adapter.notifyDataSetChanged();</div><div class=\"line\">                Log.d(TAG, <span class=\"string\">\"onBonjourServiceAvailable \"</span> + instanceName);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    mManager.setDnsSdResponseListeners(channel, servListener, txtListener);</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>调用<code>addServiceRequest()</code>创建服务请求,它需要一个listener来通知创建成功与否。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">serviceRequest = WifiP2pDnsSdServiceRequest.newInstance();</div><div class=\"line\">       mManager.addServiceRequest(channel,</div><div class=\"line\">               serviceRequest,</div><div class=\"line\">               <span class=\"keyword\">new</span> ActionListener() &#123;</div><div class=\"line\">                   <span class=\"meta\">@Override</span></div><div class=\"line\">                   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSuccess</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                       <span class=\"comment\">// Success!</span></div><div class=\"line\">                   &#125;</div><div class=\"line\"></div><div class=\"line\">                   <span class=\"meta\">@Override</span></div><div class=\"line\">                   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(<span class=\"keyword\">int</span> code)</span> </span>&#123;</div><div class=\"line\">                       <span class=\"comment\">// Command failed.  Check for P2P_UNSUPPORTED, ERROR, or BUSY</span></div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125;);</div></pre></td></tr></table></figure>\n<p>最后是调用<code>discoverService()</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">mManager.discoverServices(channel, <span class=\"keyword\">new</span> ActionListener() &#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSuccess</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                <span class=\"comment\">// Success!</span></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(<span class=\"keyword\">int</span> code)</span> </span>&#123;</div><div class=\"line\">                <span class=\"comment\">// Command failed.  Check for P2P_UNSUPPORTED, ERROR, or BUSY</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (code == WifiP2pManager.P2P_UNSUPPORTED) &#123;</div><div class=\"line\">                    Log.d(TAG, <span class=\"string\">\"P2P isn't supported on this device.\"</span>);</div><div class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(...)</div><div class=\"line\">                    ...</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div></pre></td></tr></table></figure>\n<p>顺利的话，可以实现匹配连接的效果，常见错误代码：</p>\n<ul>\n<li>P2P_UNSUPPORTED 当前设备不支持</li>\n<li>BUSY 系统繁忙</li>\n<li>ERROR 内部错误</li>\n</ul>\n</li>\n</ul>\n"},{"title":"Android开源控件搜集----ProgressBar","date":"2017-03-27T08:57:00.000Z","author":"冰路梦","_content":"# Android开源控件搜集--ProgressBar\n\n**Note：**本篇博客长期维护更新，欢迎各位网友共同合作，共享知识与技术。\n\n本篇博客主要搜集个人任务比较优秀的Android开源控件，大多来自github，并附上链接，自己学习之余，亦希望于大家有所帮助。\n\nAndroid的控件还算比较多，官方和第三方自定义优秀控件数不胜数，搜集难免不全，逐步更新丰富吧。\n\n## ProgressBar\n\n1. SmoothProgressBar\n\n   炫酷的水平进度条，效果：\n\n   ![progress](https://github.com/castorflex/SmoothProgressBar/raw/master/screenshots/SPB_sample.gif)\n\n   github:https://github.com/castorflex/SmoothProgressBar\n\n2. NumberProgressBar\n\n   漂亮纤细的进度条，带数字，效果：\n\n   ![progress](https://camo.githubusercontent.com/0c92568af7ec4e04e2e1503acdd2ca99854ab0b5/687474703a2f2f7777332e73696e61696d672e636e2f6d773639302f36313064633033346a77316566797264386e376937673230637a30326d7135662e676966)\n\n   github:https://github.com/daimajia/NumberProgressBar\n\n3. LoadingImage\n\n   各种漂亮效果的加载动画，效果：\n\n   ![progress](https://raw.githubusercontent.com/dinuscxj/LoadingDrawable/master/Preview/ShapeChangeDrawable.gif)\n\n   ![progress](https://raw.githubusercontent.com/dinuscxj/LoadingDrawable/master/Preview/CircleJumpDrawable.gif)\n\n   github:https://github.com/dinuscxj/LoadingDrawable\n\n4. ProgressWheel\n\n   一个wheel形的进度条，效果：\n\n   ![progress](https://github.com/Todd-Davies/ProgressWheel/raw/master/sample_image.png)\n\n   github:https://github.com/Todd-Davies/ProgressWheel\n\n5. CircleProgress\n\n   几种不同的环形进度，效果：\n\n   ![progress](https://raw.githubusercontent.com/lzyzsd/CircleProgress/master/demos/circle_progress.gif)\n\n   github:https://github.com/lzyzsd/CircleProgress\n\n6. materialish-progress\n\n   一个可以在android2.3上实现material效果的progress，效果：\n\n   ![progress](https://github.com/pnikosis/materialish-progress/raw/master/spinningwheel.gif)\n\n   github:https://github.com/pnikosis/materialish-progress\n\n7. AndroidFillableLoaders\n\n   炫酷图像的加载progress，效果：\n\n   ![progress](https://github.com/JorgeCastilloPrz/AndroidFillableLoaders/raw/master/art/demoWaves.gif)\n\n   github:https://github.com/JorgeCastilloPrz/AndroidFillableLoaders\n\n8. RoundCornerProgressBar\n\n   带有圆角和图标的进度条，效果：\n\n   ![progress](https://raw.githubusercontent.com/akexorcist/Android-RoundCornerProgressBar/master/image/screenshot_01.png)\n\n   github:https://github.com/akexorcist/Android-RoundCornerProgressBar\n\n9. GoogleProgressBar\n\n   Google应用的进度条,效果：\n\n   ![progress](https://raw.githubusercontent.com/jpardogo/GoogleProgressBar/dev/art/GoogleDices.gif)\n\n   ![progress](https://raw.githubusercontent.com/jpardogo/GoogleProgressBar/master/art/GoogleProgressBar.gif)\n\n   github:https://github.com/jpardogo/GoogleProgressBar\n\n10. MaterialProgressBar\n\n  实现material design风格的progress，效果：\n\n  ![progress](https://github.com/DreaminginCodeZH/MaterialProgressBar/raw/master/screenshot/android_4_4_4.png)\n\n  github:https://github.com/DreaminginCodeZH/MaterialProgressBar\n\n11. WaveView\n\n    水波波浪效果的progress，效果：\n\n    ![progress](https://camo.githubusercontent.com/60722e9d4f2d2daa78a8650cb27a32adea82bdd4/68747470733a2f2f7261772e6769746875622e636f6d2f6a6f686e3939302f57617665566965772f6d61737465722f73637265656e73686f7425323661706b2f73637265656e73686f742e676966)\n\n    github:https://github.com/john990/WaveView\n\n12. MaterialLoadingProgressBar\n\n    一个比较时代感的Material progress，效果：\n\n    ![progress](https://github.com/lsjwzh/MaterialLoadingProgressBar/raw/master/screen.gif)\n\n    github:https://github.com/lsjwzh/MaterialLoadingProgressBar\n\n13. MusicPlayerView\n\n    一个用于音乐播放进度的progress，效果：\n\n    ![progress](https://raw.githubusercontent.com/iammert/MusicPlayerView/master/art/art2.gif)\n\n    github:https://github.com/iammert/MusicPlayerView\n\n14. SquareProgressBar\n\n    一个方形的进度progress，效果：\n\n    ![progress](https://camo.githubusercontent.com/3ddc0a0d9ed3c39f806f1459d49e46e87be81e29/68747470733a2f2f6d61766868772d626e313330362e66696c65732e316472762e636f6d2f793270386e736e3035354b30583172663935725743634375686f6b583451453542313953506f686c74513735386174513948635632694b334b5f773830325765673668794d70624c507770574745476f62385f7a5f62725651536e4c572d50664e43773274554e6132672d5930786b344279344c6a4a316e564f7445394a7a6a5737535f6251716c4833796668657a793847646a744d4b717a6e5832486a74463834363163456536394b532d6f512f636f7665725f6769746875622e706e67)\n\n    github:https://github.com/mrwonderman/android-square-progressbar\n\n15. Download Progress\n\n    下载显示进度progress，效果：\n\n    ![progress](https://github.com/panwrona/DownloadProgressBar/raw/master/success.gif)\n\n    github:https://github.com/panwrona/DownloadProgressBar\n\n16. HoloCircularProgressBar\n\n    Holo风格的进度progress，效果：\n\n    ![progress](https://camo.githubusercontent.com/1df9a18184ed40918d7135d5db345fe1070137a7/68747470733a2f2f7261772e6769746875622e636f6d2f7061737373792f616e64726f69642d486f6c6f43697263756c617250726f67726573734261722f6d61737465722f7261772f73637265656e73686f74312e706e67)\n\n    github:https://github.com/passsy/android-HoloCircularProgressBar\n\n17. ArcProgressStackView\n\n    多层圆环进度progress，效果：\n\n    ![progress](https://camo.githubusercontent.com/611d22202564ed670837756695c1d712f23c26ce/68747470733a2f2f64726976652e676f6f676c652e636f6d2f75633f6578706f72743d646f776e6c6f61642669643d304278504f5f55655337775363546a6c564e6b6c6855485a69625645)\n\n    github:https://github.com/DevLight-Mobile-Agency/ArcProgressStackView\n\n18. LoadingBalls\n\n    类似android 5.1的开机加载进度，效果：\n\n    ![progress](https://github.com/glomadrian/loading-balls/raw/master/art/1.gif)\n\n    github:https://github.com/glomadrian/loading-balls\n\n19. FABProgressCircle\n\n    一个fab按钮进度progress，效果：\n\n    ![progress](https://github.com/JorgeCastilloPrz/FABProgressCircle/raw/master/art/fabprogresscircle.gif)\n\n20. CircularProgressDrawable\n\n    环形的进度图画，效果：\n\n    ![progress](https://github.com/Sefford/CircularProgressDrawable/raw/master/overshoot.gif)\n\n    github:https://github.com/Sefford/CircularProgressDrawable\n\n21. CircleProgress\n\n    折叠滚动的圆形进度，效果：\n\n    ![progress](https://github.com/Fichardu/CircleProgress/raw/master/art/progress.gif)\n\n    github:https://github.com/Fichardu/CircleProgress\n\n22. CircleProgressView\n\n    圆环形的进度条，效果：\n\n    ![progress](https://raw.githubusercontent.com/jakob-grabner/Circle-Progress-View/master/media/demo.gif)\n\n    github:https://github.com/jakob-grabner/Circle-Progress-View\n\n23. DilatingDotsProgressBar\n\n    跑马的个式的进度progress，效果：\n\n    ![progress](https://github.com/JustZak/DilatingDotsProgressBar/raw/demo/example/src/main/assets/dotdemo.gif?raw=true)\n\n    github:https://github.com/JustZak/DilatingDotsProgressBar\n\n24. CircleMusicProgressbar\n\n    类似上面的那个音乐播放进度，这个更漂亮些吧，效果：\n\n    ![progress](https://raw.githubusercontent.com/aliab/circular-music-progressbar/master/art/splash.jpg)\n\n    github:https://github.com/aliab/circular-music-progressbar\n\n25. SpotsProgressDialog\n\n    割草机效果的progress，效果：\n\n    ![progress](https://camo.githubusercontent.com/d8108413298d70047f52cff9ac05603a5fd51988/687474703a2f2f332e62702e626c6f6773706f742e636f6d2f2d6c3155765657694d5341672f564c61355a6657346444492f41414141414141414e54632f7273576f755f71623042632f733332302f593648615453772e676966)\n\n    github:https://github.com/d-max/spots-dialog\n\n26. DashedcircularProgress\n\n    类似安全卫士里面电量进度的progress，效果：\n\n    ![progress](https://github.com/glomadrian/dashed-circular-progress/raw/master/art/sample.gif)\n\n    github:https://github.com/glomadrian/dashed-circular-progress\n\n27. ColorArcProgressBar\n\n    仪表盘效果的进度progress，效果：\n\n    ![progress](https://raw.githubusercontent.com/Shinelw/ColorArcProgressBar/master/Demo.gif)\n\n    github:https://github.com/Shinelw/ColorArcProgressBar\n\n28. MagicProgressWidget\n\n    也是简单的进度progress，效果：\n\n    ![progress](https://github.com/lingochamp/MagicProgressWidget/raw/master/art/demo.gif)\n\n    github:https://github.com/lingochamp/MagicProgressWidget\n\n29. RingProgress\n\n    类似上面提到的一个，这也是圆环形的进度progress，效果：\n\n    ![progress](https://github.com/ldoublem/RingProgress/raw/master/shot/shot3.gif)\n\n    github:https://github.com/ldoublem/RingProgress\n\n30. ElasticDownload\n\n    实现晾衣绳效果的progress，效果：\n\n    ![progress](https://raw.githubusercontent.com/Tibolte/ElasticDownload/master/success.gif)\n\n    github:https://github.com/Tibolte/ElasticDownload\n\n31. Loading\n\n    翻页效果的progress，效果：\n\n    ![progress](https://github.com/yankai-victor/Loading/raw/master/images/BookLoading.gif)\n\n    github:https://github.com/yankai-victor/Loading\n\n32. AnimatedCircleLoadingView\n\n    漂亮的粘性水滴progress，效果：\n\n    ![progress](https://github.com/jlmd/AnimatedCircleLoadingView/raw/master/art/indeterminate_ok.gif)\n\n    github:https://github.com/jlmd/AnimatedCircleLoadingView\n\n33. AVLoading\n\n    花样繁多的progress，效果：\n\n    ![progress](https://github.com/81813780/AVLoadingIndicatorView/raw/master/screenshots/avi.gif)\n\n    github:https://github.com/81813780/AVLoadingIndicatorView\n\n34. CatLoadingView\n\n    一个狗狗加载progress，作者说是猫，呵呵，效果：\n\n    ![progress](https://camo.githubusercontent.com/762015246e027b7d46df51faa51fd669e44f974b/687474703a2f2f7777342e73696e61696d672e636e2f6d773639302f61363935616364656a7731663268626d66787a6b3567323038753061326173732e676966)\n\n    github:https://github.com/Rogero0o/CatLoadingView\n\n35. WaveLoadingView\n\n    水波波浪形progress，效果：\n\n    ![progress](https://github.com/wasabeef/awesome-android-ui/blob/master/art/WaveLoadingView.jpg?raw=true)\n\n    github:https://github.com/tangqi92/WaveLoadingView\n\n36. MetaballLoading\n\n    黏性泡泡的progress，效果：\n\n    ![progress](https://github.com/dodola/MetaballLoading/raw/master/metaball.gif)\n\n    github:https://github.com/dodola/MetaballLoading\n\n37. CircularFillableLoaders\n\n    似乎有过一个类似的progress，效果：\n\n    ![progress](https://github.com/lopspower/CircularFillableLoaders/raw/master/preview/preview.gif)\n\n    github:https://github.com/lopspower/CircularFillableLoaders\n\n38. LoadingAnimation\n\n    绚丽的加载progress，效果：\n\n    ![progress](https://github.com/guohuanwen/AndroidLoadingAnimation/raw/master/screenshots/taiji1.gif)\n\n    github:https://github.com/guohuanwen/AndroidLoadingAnimation\n\n39. SpinKit\n\n    多种加载progress，效果：\n\n    ![progress](https://raw.githubusercontent.com/ybq/AndroidSpinKit/master/art/screen.gif)\n\n    github:https://github.com/ybq/Android-SpinKit\n\n40. LoadingView\n\n    另一拨loading，效果：\n\n    ![progress](https://github.com/ldoublem/LoadingView/raw/master/screen/%E6%95%88%E6%9E%9C.gif)\n\n    github:https://github.com/ldoublem/LoadingView\n\n41. ShapeLoadingView\n\n    带有阴影效果的progress，效果：\n\n    ![progress](https://camo.githubusercontent.com/575b98a56c5546043ec045d044429590e4a623fe/687474703a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f3136363836362d376434313538646532636534306139612e676966)\n\n    github:https://github.com/zzz40500/android-shapeLoadingView\n\n42. RoadRunner\n\n    可以自定义path路径的progress，效果：\n\n    ![progress](https://github.com/glomadrian/RoadRunner/raw/master/art/roadRunner.gif)\n\n    github:https://github.com/glomadrian/RoadRunner\n\n43. BezierLoadingView\n\n    贝塞尔粘性泡泡progress，效果：\n\n    ![progress](https://camo.githubusercontent.com/13cbed7a494b18b10fdd13be2c636a823e7547f5/687474703a2f2f69342e6275696d672e636f6d2f636464356134613866303233333635302e676966)\n\n    github:https://github.com/JeasonWong/BezierLoadingView\n\n44. StackLoadingView\n\n    stack风格progress，效果：\n\n    ![progress](https://raw.githubusercontent.com/jeasonwong/SlackLoadingView/master/screenshots/slack.gif)\n\n    github:https://github.com/JeasonWong/SlackLoadingView\n\n45. FAB-Loading\n\n    变脸progress，效果：\n\n    ![progress](https://raw.githubusercontent.com/smasoumi/FAB-Loading/master/images/marvel_loader.gif)\n\n    github:https://github.com/SaeedMasoumi/FAB-Loading","source":"_posts/Android开源控件搜集--ProgressBar.md","raw":"---\ntitle: \"Android开源控件搜集----ProgressBar\"\ndate: 2017-03-27 16:57\nauthor: 冰路梦\ntag:\n    - Android\ncategories:\n    - Android\n---\n# Android开源控件搜集--ProgressBar\n\n**Note：**本篇博客长期维护更新，欢迎各位网友共同合作，共享知识与技术。\n\n本篇博客主要搜集个人任务比较优秀的Android开源控件，大多来自github，并附上链接，自己学习之余，亦希望于大家有所帮助。\n\nAndroid的控件还算比较多，官方和第三方自定义优秀控件数不胜数，搜集难免不全，逐步更新丰富吧。\n\n## ProgressBar\n\n1. SmoothProgressBar\n\n   炫酷的水平进度条，效果：\n\n   ![progress](https://github.com/castorflex/SmoothProgressBar/raw/master/screenshots/SPB_sample.gif)\n\n   github:https://github.com/castorflex/SmoothProgressBar\n\n2. NumberProgressBar\n\n   漂亮纤细的进度条，带数字，效果：\n\n   ![progress](https://camo.githubusercontent.com/0c92568af7ec4e04e2e1503acdd2ca99854ab0b5/687474703a2f2f7777332e73696e61696d672e636e2f6d773639302f36313064633033346a77316566797264386e376937673230637a30326d7135662e676966)\n\n   github:https://github.com/daimajia/NumberProgressBar\n\n3. LoadingImage\n\n   各种漂亮效果的加载动画，效果：\n\n   ![progress](https://raw.githubusercontent.com/dinuscxj/LoadingDrawable/master/Preview/ShapeChangeDrawable.gif)\n\n   ![progress](https://raw.githubusercontent.com/dinuscxj/LoadingDrawable/master/Preview/CircleJumpDrawable.gif)\n\n   github:https://github.com/dinuscxj/LoadingDrawable\n\n4. ProgressWheel\n\n   一个wheel形的进度条，效果：\n\n   ![progress](https://github.com/Todd-Davies/ProgressWheel/raw/master/sample_image.png)\n\n   github:https://github.com/Todd-Davies/ProgressWheel\n\n5. CircleProgress\n\n   几种不同的环形进度，效果：\n\n   ![progress](https://raw.githubusercontent.com/lzyzsd/CircleProgress/master/demos/circle_progress.gif)\n\n   github:https://github.com/lzyzsd/CircleProgress\n\n6. materialish-progress\n\n   一个可以在android2.3上实现material效果的progress，效果：\n\n   ![progress](https://github.com/pnikosis/materialish-progress/raw/master/spinningwheel.gif)\n\n   github:https://github.com/pnikosis/materialish-progress\n\n7. AndroidFillableLoaders\n\n   炫酷图像的加载progress，效果：\n\n   ![progress](https://github.com/JorgeCastilloPrz/AndroidFillableLoaders/raw/master/art/demoWaves.gif)\n\n   github:https://github.com/JorgeCastilloPrz/AndroidFillableLoaders\n\n8. RoundCornerProgressBar\n\n   带有圆角和图标的进度条，效果：\n\n   ![progress](https://raw.githubusercontent.com/akexorcist/Android-RoundCornerProgressBar/master/image/screenshot_01.png)\n\n   github:https://github.com/akexorcist/Android-RoundCornerProgressBar\n\n9. GoogleProgressBar\n\n   Google应用的进度条,效果：\n\n   ![progress](https://raw.githubusercontent.com/jpardogo/GoogleProgressBar/dev/art/GoogleDices.gif)\n\n   ![progress](https://raw.githubusercontent.com/jpardogo/GoogleProgressBar/master/art/GoogleProgressBar.gif)\n\n   github:https://github.com/jpardogo/GoogleProgressBar\n\n10. MaterialProgressBar\n\n  实现material design风格的progress，效果：\n\n  ![progress](https://github.com/DreaminginCodeZH/MaterialProgressBar/raw/master/screenshot/android_4_4_4.png)\n\n  github:https://github.com/DreaminginCodeZH/MaterialProgressBar\n\n11. WaveView\n\n    水波波浪效果的progress，效果：\n\n    ![progress](https://camo.githubusercontent.com/60722e9d4f2d2daa78a8650cb27a32adea82bdd4/68747470733a2f2f7261772e6769746875622e636f6d2f6a6f686e3939302f57617665566965772f6d61737465722f73637265656e73686f7425323661706b2f73637265656e73686f742e676966)\n\n    github:https://github.com/john990/WaveView\n\n12. MaterialLoadingProgressBar\n\n    一个比较时代感的Material progress，效果：\n\n    ![progress](https://github.com/lsjwzh/MaterialLoadingProgressBar/raw/master/screen.gif)\n\n    github:https://github.com/lsjwzh/MaterialLoadingProgressBar\n\n13. MusicPlayerView\n\n    一个用于音乐播放进度的progress，效果：\n\n    ![progress](https://raw.githubusercontent.com/iammert/MusicPlayerView/master/art/art2.gif)\n\n    github:https://github.com/iammert/MusicPlayerView\n\n14. SquareProgressBar\n\n    一个方形的进度progress，效果：\n\n    ![progress](https://camo.githubusercontent.com/3ddc0a0d9ed3c39f806f1459d49e46e87be81e29/68747470733a2f2f6d61766868772d626e313330362e66696c65732e316472762e636f6d2f793270386e736e3035354b30583172663935725743634375686f6b583451453542313953506f686c74513735386174513948635632694b334b5f773830325765673668794d70624c507770574745476f62385f7a5f62725651536e4c572d50664e43773274554e6132672d5930786b344279344c6a4a316e564f7445394a7a6a5737535f6251716c4833796668657a793847646a744d4b717a6e5832486a74463834363163456536394b532d6f512f636f7665725f6769746875622e706e67)\n\n    github:https://github.com/mrwonderman/android-square-progressbar\n\n15. Download Progress\n\n    下载显示进度progress，效果：\n\n    ![progress](https://github.com/panwrona/DownloadProgressBar/raw/master/success.gif)\n\n    github:https://github.com/panwrona/DownloadProgressBar\n\n16. HoloCircularProgressBar\n\n    Holo风格的进度progress，效果：\n\n    ![progress](https://camo.githubusercontent.com/1df9a18184ed40918d7135d5db345fe1070137a7/68747470733a2f2f7261772e6769746875622e636f6d2f7061737373792f616e64726f69642d486f6c6f43697263756c617250726f67726573734261722f6d61737465722f7261772f73637265656e73686f74312e706e67)\n\n    github:https://github.com/passsy/android-HoloCircularProgressBar\n\n17. ArcProgressStackView\n\n    多层圆环进度progress，效果：\n\n    ![progress](https://camo.githubusercontent.com/611d22202564ed670837756695c1d712f23c26ce/68747470733a2f2f64726976652e676f6f676c652e636f6d2f75633f6578706f72743d646f776e6c6f61642669643d304278504f5f55655337775363546a6c564e6b6c6855485a69625645)\n\n    github:https://github.com/DevLight-Mobile-Agency/ArcProgressStackView\n\n18. LoadingBalls\n\n    类似android 5.1的开机加载进度，效果：\n\n    ![progress](https://github.com/glomadrian/loading-balls/raw/master/art/1.gif)\n\n    github:https://github.com/glomadrian/loading-balls\n\n19. FABProgressCircle\n\n    一个fab按钮进度progress，效果：\n\n    ![progress](https://github.com/JorgeCastilloPrz/FABProgressCircle/raw/master/art/fabprogresscircle.gif)\n\n20. CircularProgressDrawable\n\n    环形的进度图画，效果：\n\n    ![progress](https://github.com/Sefford/CircularProgressDrawable/raw/master/overshoot.gif)\n\n    github:https://github.com/Sefford/CircularProgressDrawable\n\n21. CircleProgress\n\n    折叠滚动的圆形进度，效果：\n\n    ![progress](https://github.com/Fichardu/CircleProgress/raw/master/art/progress.gif)\n\n    github:https://github.com/Fichardu/CircleProgress\n\n22. CircleProgressView\n\n    圆环形的进度条，效果：\n\n    ![progress](https://raw.githubusercontent.com/jakob-grabner/Circle-Progress-View/master/media/demo.gif)\n\n    github:https://github.com/jakob-grabner/Circle-Progress-View\n\n23. DilatingDotsProgressBar\n\n    跑马的个式的进度progress，效果：\n\n    ![progress](https://github.com/JustZak/DilatingDotsProgressBar/raw/demo/example/src/main/assets/dotdemo.gif?raw=true)\n\n    github:https://github.com/JustZak/DilatingDotsProgressBar\n\n24. CircleMusicProgressbar\n\n    类似上面的那个音乐播放进度，这个更漂亮些吧，效果：\n\n    ![progress](https://raw.githubusercontent.com/aliab/circular-music-progressbar/master/art/splash.jpg)\n\n    github:https://github.com/aliab/circular-music-progressbar\n\n25. SpotsProgressDialog\n\n    割草机效果的progress，效果：\n\n    ![progress](https://camo.githubusercontent.com/d8108413298d70047f52cff9ac05603a5fd51988/687474703a2f2f332e62702e626c6f6773706f742e636f6d2f2d6c3155765657694d5341672f564c61355a6657346444492f41414141414141414e54632f7273576f755f71623042632f733332302f593648615453772e676966)\n\n    github:https://github.com/d-max/spots-dialog\n\n26. DashedcircularProgress\n\n    类似安全卫士里面电量进度的progress，效果：\n\n    ![progress](https://github.com/glomadrian/dashed-circular-progress/raw/master/art/sample.gif)\n\n    github:https://github.com/glomadrian/dashed-circular-progress\n\n27. ColorArcProgressBar\n\n    仪表盘效果的进度progress，效果：\n\n    ![progress](https://raw.githubusercontent.com/Shinelw/ColorArcProgressBar/master/Demo.gif)\n\n    github:https://github.com/Shinelw/ColorArcProgressBar\n\n28. MagicProgressWidget\n\n    也是简单的进度progress，效果：\n\n    ![progress](https://github.com/lingochamp/MagicProgressWidget/raw/master/art/demo.gif)\n\n    github:https://github.com/lingochamp/MagicProgressWidget\n\n29. RingProgress\n\n    类似上面提到的一个，这也是圆环形的进度progress，效果：\n\n    ![progress](https://github.com/ldoublem/RingProgress/raw/master/shot/shot3.gif)\n\n    github:https://github.com/ldoublem/RingProgress\n\n30. ElasticDownload\n\n    实现晾衣绳效果的progress，效果：\n\n    ![progress](https://raw.githubusercontent.com/Tibolte/ElasticDownload/master/success.gif)\n\n    github:https://github.com/Tibolte/ElasticDownload\n\n31. Loading\n\n    翻页效果的progress，效果：\n\n    ![progress](https://github.com/yankai-victor/Loading/raw/master/images/BookLoading.gif)\n\n    github:https://github.com/yankai-victor/Loading\n\n32. AnimatedCircleLoadingView\n\n    漂亮的粘性水滴progress，效果：\n\n    ![progress](https://github.com/jlmd/AnimatedCircleLoadingView/raw/master/art/indeterminate_ok.gif)\n\n    github:https://github.com/jlmd/AnimatedCircleLoadingView\n\n33. AVLoading\n\n    花样繁多的progress，效果：\n\n    ![progress](https://github.com/81813780/AVLoadingIndicatorView/raw/master/screenshots/avi.gif)\n\n    github:https://github.com/81813780/AVLoadingIndicatorView\n\n34. CatLoadingView\n\n    一个狗狗加载progress，作者说是猫，呵呵，效果：\n\n    ![progress](https://camo.githubusercontent.com/762015246e027b7d46df51faa51fd669e44f974b/687474703a2f2f7777342e73696e61696d672e636e2f6d773639302f61363935616364656a7731663268626d66787a6b3567323038753061326173732e676966)\n\n    github:https://github.com/Rogero0o/CatLoadingView\n\n35. WaveLoadingView\n\n    水波波浪形progress，效果：\n\n    ![progress](https://github.com/wasabeef/awesome-android-ui/blob/master/art/WaveLoadingView.jpg?raw=true)\n\n    github:https://github.com/tangqi92/WaveLoadingView\n\n36. MetaballLoading\n\n    黏性泡泡的progress，效果：\n\n    ![progress](https://github.com/dodola/MetaballLoading/raw/master/metaball.gif)\n\n    github:https://github.com/dodola/MetaballLoading\n\n37. CircularFillableLoaders\n\n    似乎有过一个类似的progress，效果：\n\n    ![progress](https://github.com/lopspower/CircularFillableLoaders/raw/master/preview/preview.gif)\n\n    github:https://github.com/lopspower/CircularFillableLoaders\n\n38. LoadingAnimation\n\n    绚丽的加载progress，效果：\n\n    ![progress](https://github.com/guohuanwen/AndroidLoadingAnimation/raw/master/screenshots/taiji1.gif)\n\n    github:https://github.com/guohuanwen/AndroidLoadingAnimation\n\n39. SpinKit\n\n    多种加载progress，效果：\n\n    ![progress](https://raw.githubusercontent.com/ybq/AndroidSpinKit/master/art/screen.gif)\n\n    github:https://github.com/ybq/Android-SpinKit\n\n40. LoadingView\n\n    另一拨loading，效果：\n\n    ![progress](https://github.com/ldoublem/LoadingView/raw/master/screen/%E6%95%88%E6%9E%9C.gif)\n\n    github:https://github.com/ldoublem/LoadingView\n\n41. ShapeLoadingView\n\n    带有阴影效果的progress，效果：\n\n    ![progress](https://camo.githubusercontent.com/575b98a56c5546043ec045d044429590e4a623fe/687474703a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f3136363836362d376434313538646532636534306139612e676966)\n\n    github:https://github.com/zzz40500/android-shapeLoadingView\n\n42. RoadRunner\n\n    可以自定义path路径的progress，效果：\n\n    ![progress](https://github.com/glomadrian/RoadRunner/raw/master/art/roadRunner.gif)\n\n    github:https://github.com/glomadrian/RoadRunner\n\n43. BezierLoadingView\n\n    贝塞尔粘性泡泡progress，效果：\n\n    ![progress](https://camo.githubusercontent.com/13cbed7a494b18b10fdd13be2c636a823e7547f5/687474703a2f2f69342e6275696d672e636f6d2f636464356134613866303233333635302e676966)\n\n    github:https://github.com/JeasonWong/BezierLoadingView\n\n44. StackLoadingView\n\n    stack风格progress，效果：\n\n    ![progress](https://raw.githubusercontent.com/jeasonwong/SlackLoadingView/master/screenshots/slack.gif)\n\n    github:https://github.com/JeasonWong/SlackLoadingView\n\n45. FAB-Loading\n\n    变脸progress，效果：\n\n    ![progress](https://raw.githubusercontent.com/smasoumi/FAB-Loading/master/images/marvel_loader.gif)\n\n    github:https://github.com/SaeedMasoumi/FAB-Loading","slug":"Android开源控件搜集--ProgressBar","published":1,"updated":"2017-03-28T09:40:26.666Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0xj1neq0007scowmx3o9o3y","content":"<h1 id=\"Android开源控件搜集–ProgressBar\"><a href=\"#Android开源控件搜集–ProgressBar\" class=\"headerlink\" title=\"Android开源控件搜集–ProgressBar\"></a>Android开源控件搜集–ProgressBar</h1><p><strong>Note：</strong>本篇博客长期维护更新，欢迎各位网友共同合作，共享知识与技术。</p>\n<p>本篇博客主要搜集个人任务比较优秀的Android开源控件，大多来自github，并附上链接，自己学习之余，亦希望于大家有所帮助。</p>\n<p>Android的控件还算比较多，官方和第三方自定义优秀控件数不胜数，搜集难免不全，逐步更新丰富吧。</p>\n<h2 id=\"ProgressBar\"><a href=\"#ProgressBar\" class=\"headerlink\" title=\"ProgressBar\"></a>ProgressBar</h2><ol>\n<li><p>SmoothProgressBar</p>\n<p>炫酷的水平进度条，效果：</p>\n<p><img src=\"https://github.com/castorflex/SmoothProgressBar/raw/master/screenshots/SPB_sample.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/castorflex/SmoothProgressBar\" target=\"_blank\" rel=\"external\">https://github.com/castorflex/SmoothProgressBar</a></p>\n</li>\n<li><p>NumberProgressBar</p>\n<p>漂亮纤细的进度条，带数字，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/0c92568af7ec4e04e2e1503acdd2ca99854ab0b5/687474703a2f2f7777332e73696e61696d672e636e2f6d773639302f36313064633033346a77316566797264386e376937673230637a30326d7135662e676966\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/daimajia/NumberProgressBar\" target=\"_blank\" rel=\"external\">https://github.com/daimajia/NumberProgressBar</a></p>\n</li>\n<li><p>LoadingImage</p>\n<p>各种漂亮效果的加载动画，效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/dinuscxj/LoadingDrawable/master/Preview/ShapeChangeDrawable.gif\" alt=\"progress\"></p>\n<p><img src=\"https://raw.githubusercontent.com/dinuscxj/LoadingDrawable/master/Preview/CircleJumpDrawable.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/dinuscxj/LoadingDrawable\" target=\"_blank\" rel=\"external\">https://github.com/dinuscxj/LoadingDrawable</a></p>\n</li>\n<li><p>ProgressWheel</p>\n<p>一个wheel形的进度条，效果：</p>\n<p><img src=\"https://github.com/Todd-Davies/ProgressWheel/raw/master/sample_image.png\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/Todd-Davies/ProgressWheel\" target=\"_blank\" rel=\"external\">https://github.com/Todd-Davies/ProgressWheel</a></p>\n</li>\n<li><p>CircleProgress</p>\n<p>几种不同的环形进度，效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/lzyzsd/CircleProgress/master/demos/circle_progress.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/lzyzsd/CircleProgress\" target=\"_blank\" rel=\"external\">https://github.com/lzyzsd/CircleProgress</a></p>\n</li>\n<li><p>materialish-progress</p>\n<p>一个可以在android2.3上实现material效果的progress，效果：</p>\n<p><img src=\"https://github.com/pnikosis/materialish-progress/raw/master/spinningwheel.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/pnikosis/materialish-progress\" target=\"_blank\" rel=\"external\">https://github.com/pnikosis/materialish-progress</a></p>\n</li>\n<li><p>AndroidFillableLoaders</p>\n<p>炫酷图像的加载progress，效果：</p>\n<p><img src=\"https://github.com/JorgeCastilloPrz/AndroidFillableLoaders/raw/master/art/demoWaves.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/JorgeCastilloPrz/AndroidFillableLoaders\" target=\"_blank\" rel=\"external\">https://github.com/JorgeCastilloPrz/AndroidFillableLoaders</a></p>\n</li>\n<li><p>RoundCornerProgressBar</p>\n<p>带有圆角和图标的进度条，效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/akexorcist/Android-RoundCornerProgressBar/master/image/screenshot_01.png\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/akexorcist/Android-RoundCornerProgressBar\" target=\"_blank\" rel=\"external\">https://github.com/akexorcist/Android-RoundCornerProgressBar</a></p>\n</li>\n<li><p>GoogleProgressBar</p>\n<p>Google应用的进度条,效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/jpardogo/GoogleProgressBar/dev/art/GoogleDices.gif\" alt=\"progress\"></p>\n<p><img src=\"https://raw.githubusercontent.com/jpardogo/GoogleProgressBar/master/art/GoogleProgressBar.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/jpardogo/GoogleProgressBar\" target=\"_blank\" rel=\"external\">https://github.com/jpardogo/GoogleProgressBar</a></p>\n</li>\n<li><p>MaterialProgressBar</p>\n<p>实现material design风格的progress，效果：</p>\n<p><img src=\"https://github.com/DreaminginCodeZH/MaterialProgressBar/raw/master/screenshot/android_4_4_4.png\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/DreaminginCodeZH/MaterialProgressBar\" target=\"_blank\" rel=\"external\">https://github.com/DreaminginCodeZH/MaterialProgressBar</a></p>\n</li>\n<li><p>WaveView</p>\n<p>水波波浪效果的progress，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/60722e9d4f2d2daa78a8650cb27a32adea82bdd4/68747470733a2f2f7261772e6769746875622e636f6d2f6a6f686e3939302f57617665566965772f6d61737465722f73637265656e73686f7425323661706b2f73637265656e73686f742e676966\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/john990/WaveView\" target=\"_blank\" rel=\"external\">https://github.com/john990/WaveView</a></p>\n</li>\n<li><p>MaterialLoadingProgressBar</p>\n<p>一个比较时代感的Material progress，效果：</p>\n<p><img src=\"https://github.com/lsjwzh/MaterialLoadingProgressBar/raw/master/screen.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/lsjwzh/MaterialLoadingProgressBar\" target=\"_blank\" rel=\"external\">https://github.com/lsjwzh/MaterialLoadingProgressBar</a></p>\n</li>\n<li><p>MusicPlayerView</p>\n<p>一个用于音乐播放进度的progress，效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/iammert/MusicPlayerView/master/art/art2.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/iammert/MusicPlayerView\" target=\"_blank\" rel=\"external\">https://github.com/iammert/MusicPlayerView</a></p>\n</li>\n<li><p>SquareProgressBar</p>\n<p>一个方形的进度progress，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/3ddc0a0d9ed3c39f806f1459d49e46e87be81e29/68747470733a2f2f6d61766868772d626e313330362e66696c65732e316472762e636f6d2f793270386e736e3035354b30583172663935725743634375686f6b583451453542313953506f686c74513735386174513948635632694b334b5f773830325765673668794d70624c507770574745476f62385f7a5f62725651536e4c572d50664e43773274554e6132672d5930786b344279344c6a4a316e564f7445394a7a6a5737535f6251716c4833796668657a793847646a744d4b717a6e5832486a74463834363163456536394b532d6f512f636f7665725f6769746875622e706e67\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/mrwonderman/android-square-progressbar\" target=\"_blank\" rel=\"external\">https://github.com/mrwonderman/android-square-progressbar</a></p>\n</li>\n<li><p>Download Progress</p>\n<p>下载显示进度progress，效果：</p>\n<p><img src=\"https://github.com/panwrona/DownloadProgressBar/raw/master/success.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/panwrona/DownloadProgressBar\" target=\"_blank\" rel=\"external\">https://github.com/panwrona/DownloadProgressBar</a></p>\n</li>\n<li><p>HoloCircularProgressBar</p>\n<p>Holo风格的进度progress，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/1df9a18184ed40918d7135d5db345fe1070137a7/68747470733a2f2f7261772e6769746875622e636f6d2f7061737373792f616e64726f69642d486f6c6f43697263756c617250726f67726573734261722f6d61737465722f7261772f73637265656e73686f74312e706e67\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/passsy/android-HoloCircularProgressBar\" target=\"_blank\" rel=\"external\">https://github.com/passsy/android-HoloCircularProgressBar</a></p>\n</li>\n<li><p>ArcProgressStackView</p>\n<p>多层圆环进度progress，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/611d22202564ed670837756695c1d712f23c26ce/68747470733a2f2f64726976652e676f6f676c652e636f6d2f75633f6578706f72743d646f776e6c6f61642669643d304278504f5f55655337775363546a6c564e6b6c6855485a69625645\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/DevLight-Mobile-Agency/ArcProgressStackView\" target=\"_blank\" rel=\"external\">https://github.com/DevLight-Mobile-Agency/ArcProgressStackView</a></p>\n</li>\n<li><p>LoadingBalls</p>\n<p>类似android 5.1的开机加载进度，效果：</p>\n<p><img src=\"https://github.com/glomadrian/loading-balls/raw/master/art/1.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/glomadrian/loading-balls\" target=\"_blank\" rel=\"external\">https://github.com/glomadrian/loading-balls</a></p>\n</li>\n<li><p>FABProgressCircle</p>\n<p>一个fab按钮进度progress，效果：</p>\n<p><img src=\"https://github.com/JorgeCastilloPrz/FABProgressCircle/raw/master/art/fabprogresscircle.gif\" alt=\"progress\"></p>\n</li>\n<li><p>CircularProgressDrawable</p>\n<p>环形的进度图画，效果：</p>\n<p><img src=\"https://github.com/Sefford/CircularProgressDrawable/raw/master/overshoot.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/Sefford/CircularProgressDrawable\" target=\"_blank\" rel=\"external\">https://github.com/Sefford/CircularProgressDrawable</a></p>\n</li>\n<li><p>CircleProgress</p>\n<p>折叠滚动的圆形进度，效果：</p>\n<p><img src=\"https://github.com/Fichardu/CircleProgress/raw/master/art/progress.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/Fichardu/CircleProgress\" target=\"_blank\" rel=\"external\">https://github.com/Fichardu/CircleProgress</a></p>\n</li>\n<li><p>CircleProgressView</p>\n<p>圆环形的进度条，效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/jakob-grabner/Circle-Progress-View/master/media/demo.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/jakob-grabner/Circle-Progress-View\" target=\"_blank\" rel=\"external\">https://github.com/jakob-grabner/Circle-Progress-View</a></p>\n</li>\n<li><p>DilatingDotsProgressBar</p>\n<p>跑马的个式的进度progress，效果：</p>\n<p><img src=\"https://github.com/JustZak/DilatingDotsProgressBar/raw/demo/example/src/main/assets/dotdemo.gif?raw=true\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/JustZak/DilatingDotsProgressBar\" target=\"_blank\" rel=\"external\">https://github.com/JustZak/DilatingDotsProgressBar</a></p>\n</li>\n<li><p>CircleMusicProgressbar</p>\n<p>类似上面的那个音乐播放进度，这个更漂亮些吧，效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/aliab/circular-music-progressbar/master/art/splash.jpg\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/aliab/circular-music-progressbar\" target=\"_blank\" rel=\"external\">https://github.com/aliab/circular-music-progressbar</a></p>\n</li>\n<li><p>SpotsProgressDialog</p>\n<p>割草机效果的progress，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/d8108413298d70047f52cff9ac05603a5fd51988/687474703a2f2f332e62702e626c6f6773706f742e636f6d2f2d6c3155765657694d5341672f564c61355a6657346444492f41414141414141414e54632f7273576f755f71623042632f733332302f593648615453772e676966\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/d-max/spots-dialog\" target=\"_blank\" rel=\"external\">https://github.com/d-max/spots-dialog</a></p>\n</li>\n<li><p>DashedcircularProgress</p>\n<p>类似安全卫士里面电量进度的progress，效果：</p>\n<p><img src=\"https://github.com/glomadrian/dashed-circular-progress/raw/master/art/sample.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/glomadrian/dashed-circular-progress\" target=\"_blank\" rel=\"external\">https://github.com/glomadrian/dashed-circular-progress</a></p>\n</li>\n<li><p>ColorArcProgressBar</p>\n<p>仪表盘效果的进度progress，效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/Shinelw/ColorArcProgressBar/master/Demo.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/Shinelw/ColorArcProgressBar\" target=\"_blank\" rel=\"external\">https://github.com/Shinelw/ColorArcProgressBar</a></p>\n</li>\n<li><p>MagicProgressWidget</p>\n<p>也是简单的进度progress，效果：</p>\n<p><img src=\"https://github.com/lingochamp/MagicProgressWidget/raw/master/art/demo.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/lingochamp/MagicProgressWidget\" target=\"_blank\" rel=\"external\">https://github.com/lingochamp/MagicProgressWidget</a></p>\n</li>\n<li><p>RingProgress</p>\n<p>类似上面提到的一个，这也是圆环形的进度progress，效果：</p>\n<p><img src=\"https://github.com/ldoublem/RingProgress/raw/master/shot/shot3.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/ldoublem/RingProgress\" target=\"_blank\" rel=\"external\">https://github.com/ldoublem/RingProgress</a></p>\n</li>\n<li><p>ElasticDownload</p>\n<p>实现晾衣绳效果的progress，效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/Tibolte/ElasticDownload/master/success.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/Tibolte/ElasticDownload\" target=\"_blank\" rel=\"external\">https://github.com/Tibolte/ElasticDownload</a></p>\n</li>\n<li><p>Loading</p>\n<p>翻页效果的progress，效果：</p>\n<p><img src=\"https://github.com/yankai-victor/Loading/raw/master/images/BookLoading.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/yankai-victor/Loading\" target=\"_blank\" rel=\"external\">https://github.com/yankai-victor/Loading</a></p>\n</li>\n<li><p>AnimatedCircleLoadingView</p>\n<p>漂亮的粘性水滴progress，效果：</p>\n<p><img src=\"https://github.com/jlmd/AnimatedCircleLoadingView/raw/master/art/indeterminate_ok.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/jlmd/AnimatedCircleLoadingView\" target=\"_blank\" rel=\"external\">https://github.com/jlmd/AnimatedCircleLoadingView</a></p>\n</li>\n<li><p>AVLoading</p>\n<p>花样繁多的progress，效果：</p>\n<p><img src=\"https://github.com/81813780/AVLoadingIndicatorView/raw/master/screenshots/avi.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/81813780/AVLoadingIndicatorView\" target=\"_blank\" rel=\"external\">https://github.com/81813780/AVLoadingIndicatorView</a></p>\n</li>\n<li><p>CatLoadingView</p>\n<p>一个狗狗加载progress，作者说是猫，呵呵，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/762015246e027b7d46df51faa51fd669e44f974b/687474703a2f2f7777342e73696e61696d672e636e2f6d773639302f61363935616364656a7731663268626d66787a6b3567323038753061326173732e676966\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/Rogero0o/CatLoadingView\" target=\"_blank\" rel=\"external\">https://github.com/Rogero0o/CatLoadingView</a></p>\n</li>\n<li><p>WaveLoadingView</p>\n<p>水波波浪形progress，效果：</p>\n<p><img src=\"https://github.com/wasabeef/awesome-android-ui/blob/master/art/WaveLoadingView.jpg?raw=true\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/tangqi92/WaveLoadingView\" target=\"_blank\" rel=\"external\">https://github.com/tangqi92/WaveLoadingView</a></p>\n</li>\n<li><p>MetaballLoading</p>\n<p>黏性泡泡的progress，效果：</p>\n<p><img src=\"https://github.com/dodola/MetaballLoading/raw/master/metaball.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/dodola/MetaballLoading\" target=\"_blank\" rel=\"external\">https://github.com/dodola/MetaballLoading</a></p>\n</li>\n<li><p>CircularFillableLoaders</p>\n<p>似乎有过一个类似的progress，效果：</p>\n<p><img src=\"https://github.com/lopspower/CircularFillableLoaders/raw/master/preview/preview.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/lopspower/CircularFillableLoaders\" target=\"_blank\" rel=\"external\">https://github.com/lopspower/CircularFillableLoaders</a></p>\n</li>\n<li><p>LoadingAnimation</p>\n<p>绚丽的加载progress，效果：</p>\n<p><img src=\"https://github.com/guohuanwen/AndroidLoadingAnimation/raw/master/screenshots/taiji1.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/guohuanwen/AndroidLoadingAnimation\" target=\"_blank\" rel=\"external\">https://github.com/guohuanwen/AndroidLoadingAnimation</a></p>\n</li>\n<li><p>SpinKit</p>\n<p>多种加载progress，效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/ybq/AndroidSpinKit/master/art/screen.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/ybq/Android-SpinKit\" target=\"_blank\" rel=\"external\">https://github.com/ybq/Android-SpinKit</a></p>\n</li>\n<li><p>LoadingView</p>\n<p>另一拨loading，效果：</p>\n<p><img src=\"https://github.com/ldoublem/LoadingView/raw/master/screen/%E6%95%88%E6%9E%9C.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/ldoublem/LoadingView\" target=\"_blank\" rel=\"external\">https://github.com/ldoublem/LoadingView</a></p>\n</li>\n<li><p>ShapeLoadingView</p>\n<p>带有阴影效果的progress，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/575b98a56c5546043ec045d044429590e4a623fe/687474703a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f3136363836362d376434313538646532636534306139612e676966\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/zzz40500/android-shapeLoadingView\" target=\"_blank\" rel=\"external\">https://github.com/zzz40500/android-shapeLoadingView</a></p>\n</li>\n<li><p>RoadRunner</p>\n<p>可以自定义path路径的progress，效果：</p>\n<p><img src=\"https://github.com/glomadrian/RoadRunner/raw/master/art/roadRunner.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/glomadrian/RoadRunner\" target=\"_blank\" rel=\"external\">https://github.com/glomadrian/RoadRunner</a></p>\n</li>\n<li><p>BezierLoadingView</p>\n<p>贝塞尔粘性泡泡progress，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/13cbed7a494b18b10fdd13be2c636a823e7547f5/687474703a2f2f69342e6275696d672e636f6d2f636464356134613866303233333635302e676966\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/JeasonWong/BezierLoadingView\" target=\"_blank\" rel=\"external\">https://github.com/JeasonWong/BezierLoadingView</a></p>\n</li>\n<li><p>StackLoadingView</p>\n<p>stack风格progress，效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/jeasonwong/SlackLoadingView/master/screenshots/slack.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/JeasonWong/SlackLoadingView\" target=\"_blank\" rel=\"external\">https://github.com/JeasonWong/SlackLoadingView</a></p>\n</li>\n<li><p>FAB-Loading</p>\n<p>变脸progress，效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/smasoumi/FAB-Loading/master/images/marvel_loader.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/SaeedMasoumi/FAB-Loading\" target=\"_blank\" rel=\"external\">https://github.com/SaeedMasoumi/FAB-Loading</a></p>\n</li>\n</ol>\n","excerpt":"","more":"<h1 id=\"Android开源控件搜集–ProgressBar\"><a href=\"#Android开源控件搜集–ProgressBar\" class=\"headerlink\" title=\"Android开源控件搜集–ProgressBar\"></a>Android开源控件搜集–ProgressBar</h1><p><strong>Note：</strong>本篇博客长期维护更新，欢迎各位网友共同合作，共享知识与技术。</p>\n<p>本篇博客主要搜集个人任务比较优秀的Android开源控件，大多来自github，并附上链接，自己学习之余，亦希望于大家有所帮助。</p>\n<p>Android的控件还算比较多，官方和第三方自定义优秀控件数不胜数，搜集难免不全，逐步更新丰富吧。</p>\n<h2 id=\"ProgressBar\"><a href=\"#ProgressBar\" class=\"headerlink\" title=\"ProgressBar\"></a>ProgressBar</h2><ol>\n<li><p>SmoothProgressBar</p>\n<p>炫酷的水平进度条，效果：</p>\n<p><img src=\"https://github.com/castorflex/SmoothProgressBar/raw/master/screenshots/SPB_sample.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/castorflex/SmoothProgressBar\">https://github.com/castorflex/SmoothProgressBar</a></p>\n</li>\n<li><p>NumberProgressBar</p>\n<p>漂亮纤细的进度条，带数字，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/0c92568af7ec4e04e2e1503acdd2ca99854ab0b5/687474703a2f2f7777332e73696e61696d672e636e2f6d773639302f36313064633033346a77316566797264386e376937673230637a30326d7135662e676966\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/daimajia/NumberProgressBar\">https://github.com/daimajia/NumberProgressBar</a></p>\n</li>\n<li><p>LoadingImage</p>\n<p>各种漂亮效果的加载动画，效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/dinuscxj/LoadingDrawable/master/Preview/ShapeChangeDrawable.gif\" alt=\"progress\"></p>\n<p><img src=\"https://raw.githubusercontent.com/dinuscxj/LoadingDrawable/master/Preview/CircleJumpDrawable.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/dinuscxj/LoadingDrawable\">https://github.com/dinuscxj/LoadingDrawable</a></p>\n</li>\n<li><p>ProgressWheel</p>\n<p>一个wheel形的进度条，效果：</p>\n<p><img src=\"https://github.com/Todd-Davies/ProgressWheel/raw/master/sample_image.png\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/Todd-Davies/ProgressWheel\">https://github.com/Todd-Davies/ProgressWheel</a></p>\n</li>\n<li><p>CircleProgress</p>\n<p>几种不同的环形进度，效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/lzyzsd/CircleProgress/master/demos/circle_progress.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/lzyzsd/CircleProgress\">https://github.com/lzyzsd/CircleProgress</a></p>\n</li>\n<li><p>materialish-progress</p>\n<p>一个可以在android2.3上实现material效果的progress，效果：</p>\n<p><img src=\"https://github.com/pnikosis/materialish-progress/raw/master/spinningwheel.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/pnikosis/materialish-progress\">https://github.com/pnikosis/materialish-progress</a></p>\n</li>\n<li><p>AndroidFillableLoaders</p>\n<p>炫酷图像的加载progress，效果：</p>\n<p><img src=\"https://github.com/JorgeCastilloPrz/AndroidFillableLoaders/raw/master/art/demoWaves.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/JorgeCastilloPrz/AndroidFillableLoaders\">https://github.com/JorgeCastilloPrz/AndroidFillableLoaders</a></p>\n</li>\n<li><p>RoundCornerProgressBar</p>\n<p>带有圆角和图标的进度条，效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/akexorcist/Android-RoundCornerProgressBar/master/image/screenshot_01.png\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/akexorcist/Android-RoundCornerProgressBar\">https://github.com/akexorcist/Android-RoundCornerProgressBar</a></p>\n</li>\n<li><p>GoogleProgressBar</p>\n<p>Google应用的进度条,效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/jpardogo/GoogleProgressBar/dev/art/GoogleDices.gif\" alt=\"progress\"></p>\n<p><img src=\"https://raw.githubusercontent.com/jpardogo/GoogleProgressBar/master/art/GoogleProgressBar.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/jpardogo/GoogleProgressBar\">https://github.com/jpardogo/GoogleProgressBar</a></p>\n</li>\n<li><p>MaterialProgressBar</p>\n<p>实现material design风格的progress，效果：</p>\n<p><img src=\"https://github.com/DreaminginCodeZH/MaterialProgressBar/raw/master/screenshot/android_4_4_4.png\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/DreaminginCodeZH/MaterialProgressBar\">https://github.com/DreaminginCodeZH/MaterialProgressBar</a></p>\n</li>\n<li><p>WaveView</p>\n<p>水波波浪效果的progress，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/60722e9d4f2d2daa78a8650cb27a32adea82bdd4/68747470733a2f2f7261772e6769746875622e636f6d2f6a6f686e3939302f57617665566965772f6d61737465722f73637265656e73686f7425323661706b2f73637265656e73686f742e676966\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/john990/WaveView\">https://github.com/john990/WaveView</a></p>\n</li>\n<li><p>MaterialLoadingProgressBar</p>\n<p>一个比较时代感的Material progress，效果：</p>\n<p><img src=\"https://github.com/lsjwzh/MaterialLoadingProgressBar/raw/master/screen.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/lsjwzh/MaterialLoadingProgressBar\">https://github.com/lsjwzh/MaterialLoadingProgressBar</a></p>\n</li>\n<li><p>MusicPlayerView</p>\n<p>一个用于音乐播放进度的progress，效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/iammert/MusicPlayerView/master/art/art2.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/iammert/MusicPlayerView\">https://github.com/iammert/MusicPlayerView</a></p>\n</li>\n<li><p>SquareProgressBar</p>\n<p>一个方形的进度progress，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/3ddc0a0d9ed3c39f806f1459d49e46e87be81e29/68747470733a2f2f6d61766868772d626e313330362e66696c65732e316472762e636f6d2f793270386e736e3035354b30583172663935725743634375686f6b583451453542313953506f686c74513735386174513948635632694b334b5f773830325765673668794d70624c507770574745476f62385f7a5f62725651536e4c572d50664e43773274554e6132672d5930786b344279344c6a4a316e564f7445394a7a6a5737535f6251716c4833796668657a793847646a744d4b717a6e5832486a74463834363163456536394b532d6f512f636f7665725f6769746875622e706e67\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/mrwonderman/android-square-progressbar\">https://github.com/mrwonderman/android-square-progressbar</a></p>\n</li>\n<li><p>Download Progress</p>\n<p>下载显示进度progress，效果：</p>\n<p><img src=\"https://github.com/panwrona/DownloadProgressBar/raw/master/success.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/panwrona/DownloadProgressBar\">https://github.com/panwrona/DownloadProgressBar</a></p>\n</li>\n<li><p>HoloCircularProgressBar</p>\n<p>Holo风格的进度progress，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/1df9a18184ed40918d7135d5db345fe1070137a7/68747470733a2f2f7261772e6769746875622e636f6d2f7061737373792f616e64726f69642d486f6c6f43697263756c617250726f67726573734261722f6d61737465722f7261772f73637265656e73686f74312e706e67\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/passsy/android-HoloCircularProgressBar\">https://github.com/passsy/android-HoloCircularProgressBar</a></p>\n</li>\n<li><p>ArcProgressStackView</p>\n<p>多层圆环进度progress，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/611d22202564ed670837756695c1d712f23c26ce/68747470733a2f2f64726976652e676f6f676c652e636f6d2f75633f6578706f72743d646f776e6c6f61642669643d304278504f5f55655337775363546a6c564e6b6c6855485a69625645\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/DevLight-Mobile-Agency/ArcProgressStackView\">https://github.com/DevLight-Mobile-Agency/ArcProgressStackView</a></p>\n</li>\n<li><p>LoadingBalls</p>\n<p>类似android 5.1的开机加载进度，效果：</p>\n<p><img src=\"https://github.com/glomadrian/loading-balls/raw/master/art/1.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/glomadrian/loading-balls\">https://github.com/glomadrian/loading-balls</a></p>\n</li>\n<li><p>FABProgressCircle</p>\n<p>一个fab按钮进度progress，效果：</p>\n<p><img src=\"https://github.com/JorgeCastilloPrz/FABProgressCircle/raw/master/art/fabprogresscircle.gif\" alt=\"progress\"></p>\n</li>\n<li><p>CircularProgressDrawable</p>\n<p>环形的进度图画，效果：</p>\n<p><img src=\"https://github.com/Sefford/CircularProgressDrawable/raw/master/overshoot.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/Sefford/CircularProgressDrawable\">https://github.com/Sefford/CircularProgressDrawable</a></p>\n</li>\n<li><p>CircleProgress</p>\n<p>折叠滚动的圆形进度，效果：</p>\n<p><img src=\"https://github.com/Fichardu/CircleProgress/raw/master/art/progress.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/Fichardu/CircleProgress\">https://github.com/Fichardu/CircleProgress</a></p>\n</li>\n<li><p>CircleProgressView</p>\n<p>圆环形的进度条，效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/jakob-grabner/Circle-Progress-View/master/media/demo.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/jakob-grabner/Circle-Progress-View\">https://github.com/jakob-grabner/Circle-Progress-View</a></p>\n</li>\n<li><p>DilatingDotsProgressBar</p>\n<p>跑马的个式的进度progress，效果：</p>\n<p><img src=\"https://github.com/JustZak/DilatingDotsProgressBar/raw/demo/example/src/main/assets/dotdemo.gif?raw=true\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/JustZak/DilatingDotsProgressBar\">https://github.com/JustZak/DilatingDotsProgressBar</a></p>\n</li>\n<li><p>CircleMusicProgressbar</p>\n<p>类似上面的那个音乐播放进度，这个更漂亮些吧，效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/aliab/circular-music-progressbar/master/art/splash.jpg\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/aliab/circular-music-progressbar\">https://github.com/aliab/circular-music-progressbar</a></p>\n</li>\n<li><p>SpotsProgressDialog</p>\n<p>割草机效果的progress，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/d8108413298d70047f52cff9ac05603a5fd51988/687474703a2f2f332e62702e626c6f6773706f742e636f6d2f2d6c3155765657694d5341672f564c61355a6657346444492f41414141414141414e54632f7273576f755f71623042632f733332302f593648615453772e676966\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/d-max/spots-dialog\">https://github.com/d-max/spots-dialog</a></p>\n</li>\n<li><p>DashedcircularProgress</p>\n<p>类似安全卫士里面电量进度的progress，效果：</p>\n<p><img src=\"https://github.com/glomadrian/dashed-circular-progress/raw/master/art/sample.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/glomadrian/dashed-circular-progress\">https://github.com/glomadrian/dashed-circular-progress</a></p>\n</li>\n<li><p>ColorArcProgressBar</p>\n<p>仪表盘效果的进度progress，效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/Shinelw/ColorArcProgressBar/master/Demo.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/Shinelw/ColorArcProgressBar\">https://github.com/Shinelw/ColorArcProgressBar</a></p>\n</li>\n<li><p>MagicProgressWidget</p>\n<p>也是简单的进度progress，效果：</p>\n<p><img src=\"https://github.com/lingochamp/MagicProgressWidget/raw/master/art/demo.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/lingochamp/MagicProgressWidget\">https://github.com/lingochamp/MagicProgressWidget</a></p>\n</li>\n<li><p>RingProgress</p>\n<p>类似上面提到的一个，这也是圆环形的进度progress，效果：</p>\n<p><img src=\"https://github.com/ldoublem/RingProgress/raw/master/shot/shot3.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/ldoublem/RingProgress\">https://github.com/ldoublem/RingProgress</a></p>\n</li>\n<li><p>ElasticDownload</p>\n<p>实现晾衣绳效果的progress，效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/Tibolte/ElasticDownload/master/success.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/Tibolte/ElasticDownload\">https://github.com/Tibolte/ElasticDownload</a></p>\n</li>\n<li><p>Loading</p>\n<p>翻页效果的progress，效果：</p>\n<p><img src=\"https://github.com/yankai-victor/Loading/raw/master/images/BookLoading.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/yankai-victor/Loading\">https://github.com/yankai-victor/Loading</a></p>\n</li>\n<li><p>AnimatedCircleLoadingView</p>\n<p>漂亮的粘性水滴progress，效果：</p>\n<p><img src=\"https://github.com/jlmd/AnimatedCircleLoadingView/raw/master/art/indeterminate_ok.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/jlmd/AnimatedCircleLoadingView\">https://github.com/jlmd/AnimatedCircleLoadingView</a></p>\n</li>\n<li><p>AVLoading</p>\n<p>花样繁多的progress，效果：</p>\n<p><img src=\"https://github.com/81813780/AVLoadingIndicatorView/raw/master/screenshots/avi.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/81813780/AVLoadingIndicatorView\">https://github.com/81813780/AVLoadingIndicatorView</a></p>\n</li>\n<li><p>CatLoadingView</p>\n<p>一个狗狗加载progress，作者说是猫，呵呵，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/762015246e027b7d46df51faa51fd669e44f974b/687474703a2f2f7777342e73696e61696d672e636e2f6d773639302f61363935616364656a7731663268626d66787a6b3567323038753061326173732e676966\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/Rogero0o/CatLoadingView\">https://github.com/Rogero0o/CatLoadingView</a></p>\n</li>\n<li><p>WaveLoadingView</p>\n<p>水波波浪形progress，效果：</p>\n<p><img src=\"https://github.com/wasabeef/awesome-android-ui/blob/master/art/WaveLoadingView.jpg?raw=true\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/tangqi92/WaveLoadingView\">https://github.com/tangqi92/WaveLoadingView</a></p>\n</li>\n<li><p>MetaballLoading</p>\n<p>黏性泡泡的progress，效果：</p>\n<p><img src=\"https://github.com/dodola/MetaballLoading/raw/master/metaball.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/dodola/MetaballLoading\">https://github.com/dodola/MetaballLoading</a></p>\n</li>\n<li><p>CircularFillableLoaders</p>\n<p>似乎有过一个类似的progress，效果：</p>\n<p><img src=\"https://github.com/lopspower/CircularFillableLoaders/raw/master/preview/preview.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/lopspower/CircularFillableLoaders\">https://github.com/lopspower/CircularFillableLoaders</a></p>\n</li>\n<li><p>LoadingAnimation</p>\n<p>绚丽的加载progress，效果：</p>\n<p><img src=\"https://github.com/guohuanwen/AndroidLoadingAnimation/raw/master/screenshots/taiji1.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/guohuanwen/AndroidLoadingAnimation\">https://github.com/guohuanwen/AndroidLoadingAnimation</a></p>\n</li>\n<li><p>SpinKit</p>\n<p>多种加载progress，效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/ybq/AndroidSpinKit/master/art/screen.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/ybq/Android-SpinKit\">https://github.com/ybq/Android-SpinKit</a></p>\n</li>\n<li><p>LoadingView</p>\n<p>另一拨loading，效果：</p>\n<p><img src=\"https://github.com/ldoublem/LoadingView/raw/master/screen/%E6%95%88%E6%9E%9C.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/ldoublem/LoadingView\">https://github.com/ldoublem/LoadingView</a></p>\n</li>\n<li><p>ShapeLoadingView</p>\n<p>带有阴影效果的progress，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/575b98a56c5546043ec045d044429590e4a623fe/687474703a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f3136363836362d376434313538646532636534306139612e676966\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/zzz40500/android-shapeLoadingView\">https://github.com/zzz40500/android-shapeLoadingView</a></p>\n</li>\n<li><p>RoadRunner</p>\n<p>可以自定义path路径的progress，效果：</p>\n<p><img src=\"https://github.com/glomadrian/RoadRunner/raw/master/art/roadRunner.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/glomadrian/RoadRunner\">https://github.com/glomadrian/RoadRunner</a></p>\n</li>\n<li><p>BezierLoadingView</p>\n<p>贝塞尔粘性泡泡progress，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/13cbed7a494b18b10fdd13be2c636a823e7547f5/687474703a2f2f69342e6275696d672e636f6d2f636464356134613866303233333635302e676966\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/JeasonWong/BezierLoadingView\">https://github.com/JeasonWong/BezierLoadingView</a></p>\n</li>\n<li><p>StackLoadingView</p>\n<p>stack风格progress，效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/jeasonwong/SlackLoadingView/master/screenshots/slack.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/JeasonWong/SlackLoadingView\">https://github.com/JeasonWong/SlackLoadingView</a></p>\n</li>\n<li><p>FAB-Loading</p>\n<p>变脸progress，效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/smasoumi/FAB-Loading/master/images/marvel_loader.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/SaeedMasoumi/FAB-Loading\">https://github.com/SaeedMasoumi/FAB-Loading</a></p>\n</li>\n</ol>\n"},{"title":"Android开源控件搜集----Text View","date":"2017-03-27T08:57:00.000Z","author":"冰路梦","_content":"# Android开源控件搜集----Text View\n\n**Note：**本篇博客长期维护更新，欢迎各位网友共同合作，共享知识与技术。\n\n本篇博客主要搜集个人任务比较优秀的Android开源控件，大多来自github，并附上链接，自己学习之余，亦希望于大家有所帮助。\n\nAndroid的控件还算比较多，官方和第三方自定义优秀控件数不胜数，搜集难免不全，逐步更新丰富吧。\n\n## Text View\n\n其实好多第三方view，都是自定义的，未必十分符合text View的概念，姑且把个人认为的text view归类到此吧。\n\n1. Ticker\n\n   简单的可实现跳动显示字符的Text View，效果：\n\n   ![ticker](https://github.com/robinhood/ticker/raw/master/assets/ticker_main.gif)\n\n   github地址：https://github.com/robinhood/ticker\n\n2. Expandable Text View\n\n   正如项目介绍一样，这是一个可以折叠/展开的Text View，效果:\n\n   ![expandable](https://github.com/Manabu-GT/ExpandableTextView/raw/master/art/readme_demo.gif?raw=true)\n\n   github地址：https://github.com/Manabu-GT/ExpandableTextView\n\n3. SlantedTextView\n\n   倾斜的Text View，多用于给图片加个小标签，效果：\n\n   ![slanted](https://github.com/HeZaiJin/SlantedTextView/raw/master/screen_shot/screenshot.png)\n\n   github地址：https://github.com/HeZaiJin/SlantedTextView\n\n4. ReadMoreTextView\n\n   类似上面expandable TextView 这也是一个可以折叠/站看的text View控件，效果：\n\n   ![ReadMore](https://github.com/borjabravo10/ReadMoreTextView/raw/master/screenshots/collapsed.png)\n\n   github地址：https://github.com/borjabravo10/ReadMoreTextView\n\n5. SuperTextView\n\n   国人开发者写的一个自定义综合控件，常作于设置列表的item项比较合适，似乎有点实用性，效果：\n\n   ![SuperTextView](https://github.com/lygttpod/SuperTextView/raw/master/screenshot.png)\n\n   github地址：https://github.com/lygttpod/SuperTextView\n\n6. AutoLinkTextView\n\n   附带可以设置链接功能的text View，效果：\n\n   ![autolink](https://github.com/armcha/AutoLinkTextView/raw/master/screens/gif1.gif)\n\n   github地址：https://github.com/armcha/AutoLinkTextView\n\n7. Floating Text\n\n   一个可以弹出飞出文字的textview，效果：\n\n   ![floating](https://github.com/UFreedom/FloatingText/raw/master/demo.gif)\n\n   github地址：https://github.com/UFreedom/FloatingText\n\n8. SecretTextView\n\n   具有淡入淡出效果的Text View，效果：\n\n   ![Secret](https://camo.githubusercontent.com/bbb38412d3ae652f565556711e7aa6db67ebb4c7/68747470733a2f2f692e696d67666c69702e636f6d2f39356d39312e676966)\n\n   github地址：https://github.com/matthewrkula/SecretTextView\n\n9. DraweeTextView\n\n   没理解作者的描述，似乎是一个可以构造复杂图形文字显示的Text View，似乎有用？效果：\n\n   ![drawee](https://github.com/Bilibili/drawee-text-view/raw/master/art/screenshot.png)\n\n   github地址：https://github.com/Bilibili/drawee-text-view\n\n10. HTextView\n\n 支持炫酷动画效果的Text View，效果：\n\n ![htextview](https://github.com/hanks-zyh/HTextView/raw/master/screenshot/demo.gif)\n\n github地址：https://github.com/hanks-zyh/HTextView\n\n11. Titanic\n\n   这名字看不出是text view啊，呵呵，实现自动沉水的text view，效果：\n\n   ![titanic](https://github.com/RomainPiel/Titanic/raw/master/titanic.gif)\n\n   github地址：https://github.com/RomainPiel/Titanic\n\n12. Shimmer\n\n   比较流行的一个闪动式text View，效果：\n\n   ![shimmer](https://github.com/RomainPiel/Shimmer-android/raw/master/shimmer.gif)\n\n   github地址：https://github.com/RomainPiel/Shimmer-android\n\n   还有一个同名的，可能更强的，效果：\n\n   ![shimmer](https://github.com/facebook/shimmer-android/raw/master/shimmer.gif?raw=true)\n\n   github地址：https://github.com/facebook/shimmer-android\n\n13. emojicon\n\n   一个可以显示emoji表情的textview ，效果：\n\n   ![emoji](https://github.com/rockerhieu/emojicon/raw/master/images/sample.jpg)\n\n   github地址：https://github.com/rockerhieu/emojicon\n\n14. AutoFitTextView\n\n   可以在限定的大小，自动调整文字大小来适应边界，效果：\n\n   ![autofit](https://github.com/grantland/android-autofittextview/raw/master/website/static/autofittextview.gif?raw=true)\n\n   github地址：https://github.com/grantland/android-autofittextview\n\n15. iconify\n\n   可以显示很卡哇伊的效果的text view，效果：\n\n   ![iconify](https://github.com/JoanZapata/android-iconify/raw/master/graphics/androids.png)\n\n   github地址：https://github.com/JoanZapata/android-iconify\n\n16. Calligraphy\n\n   便于快速在xml中使用字体的textview，效果：\n\n   ![calligraphy](https://github.com/chrisjenx/Calligraphy/raw/master/screenshot.png)\n\n   github地址：https://github.com/chrisjenx/Calligraphy\n\n17. RobotoText View\n\n   类似上边，这个可以快捷使用android的roboto字体的textview,效果：\n\n   ![roboto](https://raw.githubusercontent.com/johnkil/Android-RobotoTextView/master/art/RobotoTextView.jpg)\n\n   github地址：https://github.com/johnkil/Android-RobotoTextView\n\n18. JumpingBeans\n\n   可以简单上下跳动的textview，效果：\n\n   ![jumping](https://github.com/frakbot/JumpingBeans/raw/master/art/jumpingdots.gif)\n\n   ![jumping](https://github.com/frakbot/JumpingBeans/raw/master/art/jumpingword.gif)\n\n   github地址：https://github.com/frakbot/JumpingBeans\n\n19. CountDown View\n\n   不知算不算text view，属于一个倒计时显示的text view吧，效果：\n\n   ![countdown](https://raw.githubusercontent.com/iwgang/CountdownView/master/screenshot/s_main.png)\n\n   github地址：https://github.com/iwgang/CountdownView\n\n20. VerTextView\n\n   竖排显示的text view，效果：\n\n   ![verText](https://github.com/lfkdsk/JustWeTools/raw/master/picture/VerTextView.png)\n\n   github地址：https://github.com/lfkdsk/JustWeTools\n\n21. LabelView\n\n   类似上面提到的SlantedTextView，这也是一个倾斜的作为标签的textview，效果：\n\n   ![label](https://github.com/linger1216/labelview/raw/master/img/img1.png)\n\n   github地址：https://github.com/linger1216/labelview\n\n22. Live emoji\n\n   可以显示动态emoji的text view，姑且成为text view吧，呵呵，效果：\n\n   ![live](https://github.com/RomainPiel/live-emoji/raw/master/image.gif)\n\n   github地址：https://github.com/RomainPiel/live-emoji\n\n23. MatchView\n\n   随风飘散的效果的text view，效果：\n\n   ![match](https://camo.githubusercontent.com/a71e9d26a7f90ea70270b3681d99785a29f83be5/687474703a2f2f7777312e73696e61696d672e636e2f6d773639302f6136393561636465677731656d79746e6b347334356732306567306d6b3439302e676966)\n\n   github地址：https://github.com/Rogero0o/MatchView\n\n24. TextJustify\n\n   算是一个可以对其调整的text view么，效果：\n\n   ![justify](https://camo.githubusercontent.com/061a4a460340c26422b2a2f43d7fe39e73246297/687474703a2f2f692e696d6775722e636f6d2f6b3662415764302e6a7067)\n\n   github地址：https://github.com/bluejamesbond/TextJustify-Android\n\n25. RoundedLetterView\n\n   类似Android联系人目录，显示头像或名字字母的text View，效果：\n\n   ![rounded](https://github.com/pavlospt/RoundedLetterView/raw/master/Screenshots/device-2014-11-13-191000.png)\n\n   github地址：https://github.com/pavlospt/RoundedLetterView\n\n26. TextDrawable\n\n   类似上面RoundedLetterView，效果：\n\n   ![text](https://github.com/amulyakhare/TextDrawable/raw/master/screens/screen1-material.png)\n\n   github 地址：https://github.com/amulyakhare/TextDrawable\n\n27. BabushkaText\n\n   可以自定义样式的textview，效果：\n\n   ![babushka](https://github.com/quiqueqs/BabushkaText/raw/master/images/example.png)\n\n   github地址：https://github.com/quiqueqs/BabushkaText\n\n28. TextSurface\n\n   可以自带动画效果的textview，效果：\n\n   ![text](https://github.com/elevenetc/TextSurface/raw/master/docs/demo.gif)\n\n   github 地址：https://github.com/elevenetc/TextSurface\n\n29. Text Counter\n\n    可以上下计数的text view，效果：\n\n    ![counter](https://github.com/premnirmal/TextCounter/blob/master/img/counter.gif?raw=true)\n\n    github地址：https://github.com/premnirmal/TextCounter\n\n30. android-ago\n\n    可以自动更新显示其生成时间的一个text view，效果：\n\n    ![text](https://github.com/curioustechizen/android-ago/raw/master/screenshots/android-ago-sample-screenshot.png)\n\n    github地址：https://github.com/curioustechizen/android-ago\n\n31. TimelyTextView\n\n    数字间变化的的一个text view，效果似乎是：\n\n    ![text](http://www.jcodecraeer.com/uploads/150127/1-15012F14312E0.gif)\n\n    github:https://github.com/adnan-SM/TimelyTextView\n\n32. ​\n","source":"_posts/Android开源控件搜集--TextView.md","raw":"---\ntitle: \"Android开源控件搜集----Text View\"\ndate: 2017-03-27 16:57\nauthor: 冰路梦\ntag:\n    - Android\ncategories:\n    - Android\n---\n# Android开源控件搜集----Text View\n\n**Note：**本篇博客长期维护更新，欢迎各位网友共同合作，共享知识与技术。\n\n本篇博客主要搜集个人任务比较优秀的Android开源控件，大多来自github，并附上链接，自己学习之余，亦希望于大家有所帮助。\n\nAndroid的控件还算比较多，官方和第三方自定义优秀控件数不胜数，搜集难免不全，逐步更新丰富吧。\n\n## Text View\n\n其实好多第三方view，都是自定义的，未必十分符合text View的概念，姑且把个人认为的text view归类到此吧。\n\n1. Ticker\n\n   简单的可实现跳动显示字符的Text View，效果：\n\n   ![ticker](https://github.com/robinhood/ticker/raw/master/assets/ticker_main.gif)\n\n   github地址：https://github.com/robinhood/ticker\n\n2. Expandable Text View\n\n   正如项目介绍一样，这是一个可以折叠/展开的Text View，效果:\n\n   ![expandable](https://github.com/Manabu-GT/ExpandableTextView/raw/master/art/readme_demo.gif?raw=true)\n\n   github地址：https://github.com/Manabu-GT/ExpandableTextView\n\n3. SlantedTextView\n\n   倾斜的Text View，多用于给图片加个小标签，效果：\n\n   ![slanted](https://github.com/HeZaiJin/SlantedTextView/raw/master/screen_shot/screenshot.png)\n\n   github地址：https://github.com/HeZaiJin/SlantedTextView\n\n4. ReadMoreTextView\n\n   类似上面expandable TextView 这也是一个可以折叠/站看的text View控件，效果：\n\n   ![ReadMore](https://github.com/borjabravo10/ReadMoreTextView/raw/master/screenshots/collapsed.png)\n\n   github地址：https://github.com/borjabravo10/ReadMoreTextView\n\n5. SuperTextView\n\n   国人开发者写的一个自定义综合控件，常作于设置列表的item项比较合适，似乎有点实用性，效果：\n\n   ![SuperTextView](https://github.com/lygttpod/SuperTextView/raw/master/screenshot.png)\n\n   github地址：https://github.com/lygttpod/SuperTextView\n\n6. AutoLinkTextView\n\n   附带可以设置链接功能的text View，效果：\n\n   ![autolink](https://github.com/armcha/AutoLinkTextView/raw/master/screens/gif1.gif)\n\n   github地址：https://github.com/armcha/AutoLinkTextView\n\n7. Floating Text\n\n   一个可以弹出飞出文字的textview，效果：\n\n   ![floating](https://github.com/UFreedom/FloatingText/raw/master/demo.gif)\n\n   github地址：https://github.com/UFreedom/FloatingText\n\n8. SecretTextView\n\n   具有淡入淡出效果的Text View，效果：\n\n   ![Secret](https://camo.githubusercontent.com/bbb38412d3ae652f565556711e7aa6db67ebb4c7/68747470733a2f2f692e696d67666c69702e636f6d2f39356d39312e676966)\n\n   github地址：https://github.com/matthewrkula/SecretTextView\n\n9. DraweeTextView\n\n   没理解作者的描述，似乎是一个可以构造复杂图形文字显示的Text View，似乎有用？效果：\n\n   ![drawee](https://github.com/Bilibili/drawee-text-view/raw/master/art/screenshot.png)\n\n   github地址：https://github.com/Bilibili/drawee-text-view\n\n10. HTextView\n\n 支持炫酷动画效果的Text View，效果：\n\n ![htextview](https://github.com/hanks-zyh/HTextView/raw/master/screenshot/demo.gif)\n\n github地址：https://github.com/hanks-zyh/HTextView\n\n11. Titanic\n\n   这名字看不出是text view啊，呵呵，实现自动沉水的text view，效果：\n\n   ![titanic](https://github.com/RomainPiel/Titanic/raw/master/titanic.gif)\n\n   github地址：https://github.com/RomainPiel/Titanic\n\n12. Shimmer\n\n   比较流行的一个闪动式text View，效果：\n\n   ![shimmer](https://github.com/RomainPiel/Shimmer-android/raw/master/shimmer.gif)\n\n   github地址：https://github.com/RomainPiel/Shimmer-android\n\n   还有一个同名的，可能更强的，效果：\n\n   ![shimmer](https://github.com/facebook/shimmer-android/raw/master/shimmer.gif?raw=true)\n\n   github地址：https://github.com/facebook/shimmer-android\n\n13. emojicon\n\n   一个可以显示emoji表情的textview ，效果：\n\n   ![emoji](https://github.com/rockerhieu/emojicon/raw/master/images/sample.jpg)\n\n   github地址：https://github.com/rockerhieu/emojicon\n\n14. AutoFitTextView\n\n   可以在限定的大小，自动调整文字大小来适应边界，效果：\n\n   ![autofit](https://github.com/grantland/android-autofittextview/raw/master/website/static/autofittextview.gif?raw=true)\n\n   github地址：https://github.com/grantland/android-autofittextview\n\n15. iconify\n\n   可以显示很卡哇伊的效果的text view，效果：\n\n   ![iconify](https://github.com/JoanZapata/android-iconify/raw/master/graphics/androids.png)\n\n   github地址：https://github.com/JoanZapata/android-iconify\n\n16. Calligraphy\n\n   便于快速在xml中使用字体的textview，效果：\n\n   ![calligraphy](https://github.com/chrisjenx/Calligraphy/raw/master/screenshot.png)\n\n   github地址：https://github.com/chrisjenx/Calligraphy\n\n17. RobotoText View\n\n   类似上边，这个可以快捷使用android的roboto字体的textview,效果：\n\n   ![roboto](https://raw.githubusercontent.com/johnkil/Android-RobotoTextView/master/art/RobotoTextView.jpg)\n\n   github地址：https://github.com/johnkil/Android-RobotoTextView\n\n18. JumpingBeans\n\n   可以简单上下跳动的textview，效果：\n\n   ![jumping](https://github.com/frakbot/JumpingBeans/raw/master/art/jumpingdots.gif)\n\n   ![jumping](https://github.com/frakbot/JumpingBeans/raw/master/art/jumpingword.gif)\n\n   github地址：https://github.com/frakbot/JumpingBeans\n\n19. CountDown View\n\n   不知算不算text view，属于一个倒计时显示的text view吧，效果：\n\n   ![countdown](https://raw.githubusercontent.com/iwgang/CountdownView/master/screenshot/s_main.png)\n\n   github地址：https://github.com/iwgang/CountdownView\n\n20. VerTextView\n\n   竖排显示的text view，效果：\n\n   ![verText](https://github.com/lfkdsk/JustWeTools/raw/master/picture/VerTextView.png)\n\n   github地址：https://github.com/lfkdsk/JustWeTools\n\n21. LabelView\n\n   类似上面提到的SlantedTextView，这也是一个倾斜的作为标签的textview，效果：\n\n   ![label](https://github.com/linger1216/labelview/raw/master/img/img1.png)\n\n   github地址：https://github.com/linger1216/labelview\n\n22. Live emoji\n\n   可以显示动态emoji的text view，姑且成为text view吧，呵呵，效果：\n\n   ![live](https://github.com/RomainPiel/live-emoji/raw/master/image.gif)\n\n   github地址：https://github.com/RomainPiel/live-emoji\n\n23. MatchView\n\n   随风飘散的效果的text view，效果：\n\n   ![match](https://camo.githubusercontent.com/a71e9d26a7f90ea70270b3681d99785a29f83be5/687474703a2f2f7777312e73696e61696d672e636e2f6d773639302f6136393561636465677731656d79746e6b347334356732306567306d6b3439302e676966)\n\n   github地址：https://github.com/Rogero0o/MatchView\n\n24. TextJustify\n\n   算是一个可以对其调整的text view么，效果：\n\n   ![justify](https://camo.githubusercontent.com/061a4a460340c26422b2a2f43d7fe39e73246297/687474703a2f2f692e696d6775722e636f6d2f6b3662415764302e6a7067)\n\n   github地址：https://github.com/bluejamesbond/TextJustify-Android\n\n25. RoundedLetterView\n\n   类似Android联系人目录，显示头像或名字字母的text View，效果：\n\n   ![rounded](https://github.com/pavlospt/RoundedLetterView/raw/master/Screenshots/device-2014-11-13-191000.png)\n\n   github地址：https://github.com/pavlospt/RoundedLetterView\n\n26. TextDrawable\n\n   类似上面RoundedLetterView，效果：\n\n   ![text](https://github.com/amulyakhare/TextDrawable/raw/master/screens/screen1-material.png)\n\n   github 地址：https://github.com/amulyakhare/TextDrawable\n\n27. BabushkaText\n\n   可以自定义样式的textview，效果：\n\n   ![babushka](https://github.com/quiqueqs/BabushkaText/raw/master/images/example.png)\n\n   github地址：https://github.com/quiqueqs/BabushkaText\n\n28. TextSurface\n\n   可以自带动画效果的textview，效果：\n\n   ![text](https://github.com/elevenetc/TextSurface/raw/master/docs/demo.gif)\n\n   github 地址：https://github.com/elevenetc/TextSurface\n\n29. Text Counter\n\n    可以上下计数的text view，效果：\n\n    ![counter](https://github.com/premnirmal/TextCounter/blob/master/img/counter.gif?raw=true)\n\n    github地址：https://github.com/premnirmal/TextCounter\n\n30. android-ago\n\n    可以自动更新显示其生成时间的一个text view，效果：\n\n    ![text](https://github.com/curioustechizen/android-ago/raw/master/screenshots/android-ago-sample-screenshot.png)\n\n    github地址：https://github.com/curioustechizen/android-ago\n\n31. TimelyTextView\n\n    数字间变化的的一个text view，效果似乎是：\n\n    ![text](http://www.jcodecraeer.com/uploads/150127/1-15012F14312E0.gif)\n\n    github:https://github.com/adnan-SM/TimelyTextView\n\n32. ​\n","slug":"Android开源控件搜集--TextView","published":1,"updated":"2017-03-28T09:40:37.127Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0xj1net0009scow2m3u5qym","content":"<h1 id=\"Android开源控件搜集—-Text-View\"><a href=\"#Android开源控件搜集—-Text-View\" class=\"headerlink\" title=\"Android开源控件搜集—-Text View\"></a>Android开源控件搜集—-Text View</h1><p><strong>Note：</strong>本篇博客长期维护更新，欢迎各位网友共同合作，共享知识与技术。</p>\n<p>本篇博客主要搜集个人任务比较优秀的Android开源控件，大多来自github，并附上链接，自己学习之余，亦希望于大家有所帮助。</p>\n<p>Android的控件还算比较多，官方和第三方自定义优秀控件数不胜数，搜集难免不全，逐步更新丰富吧。</p>\n<h2 id=\"Text-View\"><a href=\"#Text-View\" class=\"headerlink\" title=\"Text View\"></a>Text View</h2><p>其实好多第三方view，都是自定义的，未必十分符合text View的概念，姑且把个人认为的text view归类到此吧。</p>\n<ol>\n<li><p>Ticker</p>\n<p>简单的可实现跳动显示字符的Text View，效果：</p>\n<p><img src=\"https://github.com/robinhood/ticker/raw/master/assets/ticker_main.gif\" alt=\"ticker\"></p>\n<p>github地址：<a href=\"https://github.com/robinhood/ticker\" target=\"_blank\" rel=\"external\">https://github.com/robinhood/ticker</a></p>\n</li>\n<li><p>Expandable Text View</p>\n<p>正如项目介绍一样，这是一个可以折叠/展开的Text View，效果:</p>\n<p><img src=\"https://github.com/Manabu-GT/ExpandableTextView/raw/master/art/readme_demo.gif?raw=true\" alt=\"expandable\"></p>\n<p>github地址：<a href=\"https://github.com/Manabu-GT/ExpandableTextView\" target=\"_blank\" rel=\"external\">https://github.com/Manabu-GT/ExpandableTextView</a></p>\n</li>\n<li><p>SlantedTextView</p>\n<p>倾斜的Text View，多用于给图片加个小标签，效果：</p>\n<p><img src=\"https://github.com/HeZaiJin/SlantedTextView/raw/master/screen_shot/screenshot.png\" alt=\"slanted\"></p>\n<p>github地址：<a href=\"https://github.com/HeZaiJin/SlantedTextView\" target=\"_blank\" rel=\"external\">https://github.com/HeZaiJin/SlantedTextView</a></p>\n</li>\n<li><p>ReadMoreTextView</p>\n<p>类似上面expandable TextView 这也是一个可以折叠/站看的text View控件，效果：</p>\n<p><img src=\"https://github.com/borjabravo10/ReadMoreTextView/raw/master/screenshots/collapsed.png\" alt=\"ReadMore\"></p>\n<p>github地址：<a href=\"https://github.com/borjabravo10/ReadMoreTextView\" target=\"_blank\" rel=\"external\">https://github.com/borjabravo10/ReadMoreTextView</a></p>\n</li>\n<li><p>SuperTextView</p>\n<p>国人开发者写的一个自定义综合控件，常作于设置列表的item项比较合适，似乎有点实用性，效果：</p>\n<p><img src=\"https://github.com/lygttpod/SuperTextView/raw/master/screenshot.png\" alt=\"SuperTextView\"></p>\n<p>github地址：<a href=\"https://github.com/lygttpod/SuperTextView\" target=\"_blank\" rel=\"external\">https://github.com/lygttpod/SuperTextView</a></p>\n</li>\n<li><p>AutoLinkTextView</p>\n<p>附带可以设置链接功能的text View，效果：</p>\n<p><img src=\"https://github.com/armcha/AutoLinkTextView/raw/master/screens/gif1.gif\" alt=\"autolink\"></p>\n<p>github地址：<a href=\"https://github.com/armcha/AutoLinkTextView\" target=\"_blank\" rel=\"external\">https://github.com/armcha/AutoLinkTextView</a></p>\n</li>\n<li><p>Floating Text</p>\n<p>一个可以弹出飞出文字的textview，效果：</p>\n<p><img src=\"https://github.com/UFreedom/FloatingText/raw/master/demo.gif\" alt=\"floating\"></p>\n<p>github地址：<a href=\"https://github.com/UFreedom/FloatingText\" target=\"_blank\" rel=\"external\">https://github.com/UFreedom/FloatingText</a></p>\n</li>\n<li><p>SecretTextView</p>\n<p>具有淡入淡出效果的Text View，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/bbb38412d3ae652f565556711e7aa6db67ebb4c7/68747470733a2f2f692e696d67666c69702e636f6d2f39356d39312e676966\" alt=\"Secret\"></p>\n<p>github地址：<a href=\"https://github.com/matthewrkula/SecretTextView\" target=\"_blank\" rel=\"external\">https://github.com/matthewrkula/SecretTextView</a></p>\n</li>\n<li><p>DraweeTextView</p>\n<p>没理解作者的描述，似乎是一个可以构造复杂图形文字显示的Text View，似乎有用？效果：</p>\n<p><img src=\"https://github.com/Bilibili/drawee-text-view/raw/master/art/screenshot.png\" alt=\"drawee\"></p>\n<p>github地址：<a href=\"https://github.com/Bilibili/drawee-text-view\" target=\"_blank\" rel=\"external\">https://github.com/Bilibili/drawee-text-view</a></p>\n</li>\n<li><p>HTextView</p>\n<p>支持炫酷动画效果的Text View，效果：</p>\n<p><img src=\"https://github.com/hanks-zyh/HTextView/raw/master/screenshot/demo.gif\" alt=\"htextview\"></p>\n<p>github地址：<a href=\"https://github.com/hanks-zyh/HTextView\" target=\"_blank\" rel=\"external\">https://github.com/hanks-zyh/HTextView</a></p>\n</li>\n<li><p>Titanic</p>\n<p>这名字看不出是text view啊，呵呵，实现自动沉水的text view，效果：</p>\n<p><img src=\"https://github.com/RomainPiel/Titanic/raw/master/titanic.gif\" alt=\"titanic\"></p>\n<p>github地址：<a href=\"https://github.com/RomainPiel/Titanic\" target=\"_blank\" rel=\"external\">https://github.com/RomainPiel/Titanic</a></p>\n</li>\n<li><p>Shimmer</p>\n<p>比较流行的一个闪动式text View，效果：</p>\n<p><img src=\"https://github.com/RomainPiel/Shimmer-android/raw/master/shimmer.gif\" alt=\"shimmer\"></p>\n<p>github地址：<a href=\"https://github.com/RomainPiel/Shimmer-android\" target=\"_blank\" rel=\"external\">https://github.com/RomainPiel/Shimmer-android</a></p>\n<p>还有一个同名的，可能更强的，效果：</p>\n<p><img src=\"https://github.com/facebook/shimmer-android/raw/master/shimmer.gif?raw=true\" alt=\"shimmer\"></p>\n<p>github地址：<a href=\"https://github.com/facebook/shimmer-android\" target=\"_blank\" rel=\"external\">https://github.com/facebook/shimmer-android</a></p>\n</li>\n<li><p>emojicon</p>\n<p>一个可以显示emoji表情的textview ，效果：</p>\n<p><img src=\"https://github.com/rockerhieu/emojicon/raw/master/images/sample.jpg\" alt=\"emoji\"></p>\n<p>github地址：<a href=\"https://github.com/rockerhieu/emojicon\" target=\"_blank\" rel=\"external\">https://github.com/rockerhieu/emojicon</a></p>\n</li>\n<li><p>AutoFitTextView</p>\n<p>可以在限定的大小，自动调整文字大小来适应边界，效果：</p>\n<p><img src=\"https://github.com/grantland/android-autofittextview/raw/master/website/static/autofittextview.gif?raw=true\" alt=\"autofit\"></p>\n<p>github地址：<a href=\"https://github.com/grantland/android-autofittextview\" target=\"_blank\" rel=\"external\">https://github.com/grantland/android-autofittextview</a></p>\n</li>\n<li><p>iconify</p>\n<p>可以显示很卡哇伊的效果的text view，效果：</p>\n<p><img src=\"https://github.com/JoanZapata/android-iconify/raw/master/graphics/androids.png\" alt=\"iconify\"></p>\n<p>github地址：<a href=\"https://github.com/JoanZapata/android-iconify\" target=\"_blank\" rel=\"external\">https://github.com/JoanZapata/android-iconify</a></p>\n</li>\n<li><p>Calligraphy</p>\n<p>便于快速在xml中使用字体的textview，效果：</p>\n<p><img src=\"https://github.com/chrisjenx/Calligraphy/raw/master/screenshot.png\" alt=\"calligraphy\"></p>\n<p>github地址：<a href=\"https://github.com/chrisjenx/Calligraphy\" target=\"_blank\" rel=\"external\">https://github.com/chrisjenx/Calligraphy</a></p>\n</li>\n<li><p>RobotoText View</p>\n<p>类似上边，这个可以快捷使用android的roboto字体的textview,效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/johnkil/Android-RobotoTextView/master/art/RobotoTextView.jpg\" alt=\"roboto\"></p>\n<p>github地址：<a href=\"https://github.com/johnkil/Android-RobotoTextView\" target=\"_blank\" rel=\"external\">https://github.com/johnkil/Android-RobotoTextView</a></p>\n</li>\n<li><p>JumpingBeans</p>\n<p>可以简单上下跳动的textview，效果：</p>\n<p><img src=\"https://github.com/frakbot/JumpingBeans/raw/master/art/jumpingdots.gif\" alt=\"jumping\"></p>\n<p><img src=\"https://github.com/frakbot/JumpingBeans/raw/master/art/jumpingword.gif\" alt=\"jumping\"></p>\n<p>github地址：<a href=\"https://github.com/frakbot/JumpingBeans\" target=\"_blank\" rel=\"external\">https://github.com/frakbot/JumpingBeans</a></p>\n</li>\n<li><p>CountDown View</p>\n<p>不知算不算text view，属于一个倒计时显示的text view吧，效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/iwgang/CountdownView/master/screenshot/s_main.png\" alt=\"countdown\"></p>\n<p>github地址：<a href=\"https://github.com/iwgang/CountdownView\" target=\"_blank\" rel=\"external\">https://github.com/iwgang/CountdownView</a></p>\n</li>\n<li><p>VerTextView</p>\n<p>竖排显示的text view，效果：</p>\n<p><img src=\"https://github.com/lfkdsk/JustWeTools/raw/master/picture/VerTextView.png\" alt=\"verText\"></p>\n<p>github地址：<a href=\"https://github.com/lfkdsk/JustWeTools\" target=\"_blank\" rel=\"external\">https://github.com/lfkdsk/JustWeTools</a></p>\n</li>\n<li><p>LabelView</p>\n<p>类似上面提到的SlantedTextView，这也是一个倾斜的作为标签的textview，效果：</p>\n<p><img src=\"https://github.com/linger1216/labelview/raw/master/img/img1.png\" alt=\"label\"></p>\n<p>github地址：<a href=\"https://github.com/linger1216/labelview\" target=\"_blank\" rel=\"external\">https://github.com/linger1216/labelview</a></p>\n</li>\n<li><p>Live emoji</p>\n<p>可以显示动态emoji的text view，姑且成为text view吧，呵呵，效果：</p>\n<p><img src=\"https://github.com/RomainPiel/live-emoji/raw/master/image.gif\" alt=\"live\"></p>\n<p>github地址：<a href=\"https://github.com/RomainPiel/live-emoji\" target=\"_blank\" rel=\"external\">https://github.com/RomainPiel/live-emoji</a></p>\n</li>\n<li><p>MatchView</p>\n<p>随风飘散的效果的text view，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/a71e9d26a7f90ea70270b3681d99785a29f83be5/687474703a2f2f7777312e73696e61696d672e636e2f6d773639302f6136393561636465677731656d79746e6b347334356732306567306d6b3439302e676966\" alt=\"match\"></p>\n<p>github地址：<a href=\"https://github.com/Rogero0o/MatchView\" target=\"_blank\" rel=\"external\">https://github.com/Rogero0o/MatchView</a></p>\n</li>\n<li><p>TextJustify</p>\n<p>算是一个可以对其调整的text view么，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/061a4a460340c26422b2a2f43d7fe39e73246297/687474703a2f2f692e696d6775722e636f6d2f6b3662415764302e6a7067\" alt=\"justify\"></p>\n<p>github地址：<a href=\"https://github.com/bluejamesbond/TextJustify-Android\" target=\"_blank\" rel=\"external\">https://github.com/bluejamesbond/TextJustify-Android</a></p>\n</li>\n<li><p>RoundedLetterView</p>\n<p>类似Android联系人目录，显示头像或名字字母的text View，效果：</p>\n<p><img src=\"https://github.com/pavlospt/RoundedLetterView/raw/master/Screenshots/device-2014-11-13-191000.png\" alt=\"rounded\"></p>\n<p>github地址：<a href=\"https://github.com/pavlospt/RoundedLetterView\" target=\"_blank\" rel=\"external\">https://github.com/pavlospt/RoundedLetterView</a></p>\n</li>\n<li><p>TextDrawable</p>\n<p>类似上面RoundedLetterView，效果：</p>\n<p><img src=\"https://github.com/amulyakhare/TextDrawable/raw/master/screens/screen1-material.png\" alt=\"text\"></p>\n<p>github 地址：<a href=\"https://github.com/amulyakhare/TextDrawable\" target=\"_blank\" rel=\"external\">https://github.com/amulyakhare/TextDrawable</a></p>\n</li>\n<li><p>BabushkaText</p>\n<p>可以自定义样式的textview，效果：</p>\n<p><img src=\"https://github.com/quiqueqs/BabushkaText/raw/master/images/example.png\" alt=\"babushka\"></p>\n<p>github地址：<a href=\"https://github.com/quiqueqs/BabushkaText\" target=\"_blank\" rel=\"external\">https://github.com/quiqueqs/BabushkaText</a></p>\n</li>\n<li><p>TextSurface</p>\n<p>可以自带动画效果的textview，效果：</p>\n<p><img src=\"https://github.com/elevenetc/TextSurface/raw/master/docs/demo.gif\" alt=\"text\"></p>\n<p>github 地址：<a href=\"https://github.com/elevenetc/TextSurface\" target=\"_blank\" rel=\"external\">https://github.com/elevenetc/TextSurface</a></p>\n</li>\n<li><p>Text Counter</p>\n<p>可以上下计数的text view，效果：</p>\n<p><img src=\"https://github.com/premnirmal/TextCounter/blob/master/img/counter.gif?raw=true\" alt=\"counter\"></p>\n<p>github地址：<a href=\"https://github.com/premnirmal/TextCounter\" target=\"_blank\" rel=\"external\">https://github.com/premnirmal/TextCounter</a></p>\n</li>\n<li><p>android-ago</p>\n<p>可以自动更新显示其生成时间的一个text view，效果：</p>\n<p><img src=\"https://github.com/curioustechizen/android-ago/raw/master/screenshots/android-ago-sample-screenshot.png\" alt=\"text\"></p>\n<p>github地址：<a href=\"https://github.com/curioustechizen/android-ago\" target=\"_blank\" rel=\"external\">https://github.com/curioustechizen/android-ago</a></p>\n</li>\n<li><p>TimelyTextView</p>\n<p>数字间变化的的一个text view，效果似乎是：</p>\n<p><img src=\"http://www.jcodecraeer.com/uploads/150127/1-15012F14312E0.gif\" alt=\"text\"></p>\n<p>github:<a href=\"https://github.com/adnan-SM/TimelyTextView\" target=\"_blank\" rel=\"external\">https://github.com/adnan-SM/TimelyTextView</a></p>\n</li>\n<li><p>​</p>\n</li>\n</ol>\n","excerpt":"","more":"<h1 id=\"Android开源控件搜集—-Text-View\"><a href=\"#Android开源控件搜集—-Text-View\" class=\"headerlink\" title=\"Android开源控件搜集—-Text View\"></a>Android开源控件搜集—-Text View</h1><p><strong>Note：</strong>本篇博客长期维护更新，欢迎各位网友共同合作，共享知识与技术。</p>\n<p>本篇博客主要搜集个人任务比较优秀的Android开源控件，大多来自github，并附上链接，自己学习之余，亦希望于大家有所帮助。</p>\n<p>Android的控件还算比较多，官方和第三方自定义优秀控件数不胜数，搜集难免不全，逐步更新丰富吧。</p>\n<h2 id=\"Text-View\"><a href=\"#Text-View\" class=\"headerlink\" title=\"Text View\"></a>Text View</h2><p>其实好多第三方view，都是自定义的，未必十分符合text View的概念，姑且把个人认为的text view归类到此吧。</p>\n<ol>\n<li><p>Ticker</p>\n<p>简单的可实现跳动显示字符的Text View，效果：</p>\n<p><img src=\"https://github.com/robinhood/ticker/raw/master/assets/ticker_main.gif\" alt=\"ticker\"></p>\n<p>github地址：<a href=\"https://github.com/robinhood/ticker\">https://github.com/robinhood/ticker</a></p>\n</li>\n<li><p>Expandable Text View</p>\n<p>正如项目介绍一样，这是一个可以折叠/展开的Text View，效果:</p>\n<p><img src=\"https://github.com/Manabu-GT/ExpandableTextView/raw/master/art/readme_demo.gif?raw=true\" alt=\"expandable\"></p>\n<p>github地址：<a href=\"https://github.com/Manabu-GT/ExpandableTextView\">https://github.com/Manabu-GT/ExpandableTextView</a></p>\n</li>\n<li><p>SlantedTextView</p>\n<p>倾斜的Text View，多用于给图片加个小标签，效果：</p>\n<p><img src=\"https://github.com/HeZaiJin/SlantedTextView/raw/master/screen_shot/screenshot.png\" alt=\"slanted\"></p>\n<p>github地址：<a href=\"https://github.com/HeZaiJin/SlantedTextView\">https://github.com/HeZaiJin/SlantedTextView</a></p>\n</li>\n<li><p>ReadMoreTextView</p>\n<p>类似上面expandable TextView 这也是一个可以折叠/站看的text View控件，效果：</p>\n<p><img src=\"https://github.com/borjabravo10/ReadMoreTextView/raw/master/screenshots/collapsed.png\" alt=\"ReadMore\"></p>\n<p>github地址：<a href=\"https://github.com/borjabravo10/ReadMoreTextView\">https://github.com/borjabravo10/ReadMoreTextView</a></p>\n</li>\n<li><p>SuperTextView</p>\n<p>国人开发者写的一个自定义综合控件，常作于设置列表的item项比较合适，似乎有点实用性，效果：</p>\n<p><img src=\"https://github.com/lygttpod/SuperTextView/raw/master/screenshot.png\" alt=\"SuperTextView\"></p>\n<p>github地址：<a href=\"https://github.com/lygttpod/SuperTextView\">https://github.com/lygttpod/SuperTextView</a></p>\n</li>\n<li><p>AutoLinkTextView</p>\n<p>附带可以设置链接功能的text View，效果：</p>\n<p><img src=\"https://github.com/armcha/AutoLinkTextView/raw/master/screens/gif1.gif\" alt=\"autolink\"></p>\n<p>github地址：<a href=\"https://github.com/armcha/AutoLinkTextView\">https://github.com/armcha/AutoLinkTextView</a></p>\n</li>\n<li><p>Floating Text</p>\n<p>一个可以弹出飞出文字的textview，效果：</p>\n<p><img src=\"https://github.com/UFreedom/FloatingText/raw/master/demo.gif\" alt=\"floating\"></p>\n<p>github地址：<a href=\"https://github.com/UFreedom/FloatingText\">https://github.com/UFreedom/FloatingText</a></p>\n</li>\n<li><p>SecretTextView</p>\n<p>具有淡入淡出效果的Text View，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/bbb38412d3ae652f565556711e7aa6db67ebb4c7/68747470733a2f2f692e696d67666c69702e636f6d2f39356d39312e676966\" alt=\"Secret\"></p>\n<p>github地址：<a href=\"https://github.com/matthewrkula/SecretTextView\">https://github.com/matthewrkula/SecretTextView</a></p>\n</li>\n<li><p>DraweeTextView</p>\n<p>没理解作者的描述，似乎是一个可以构造复杂图形文字显示的Text View，似乎有用？效果：</p>\n<p><img src=\"https://github.com/Bilibili/drawee-text-view/raw/master/art/screenshot.png\" alt=\"drawee\"></p>\n<p>github地址：<a href=\"https://github.com/Bilibili/drawee-text-view\">https://github.com/Bilibili/drawee-text-view</a></p>\n</li>\n<li><p>HTextView</p>\n<p>支持炫酷动画效果的Text View，效果：</p>\n<p><img src=\"https://github.com/hanks-zyh/HTextView/raw/master/screenshot/demo.gif\" alt=\"htextview\"></p>\n<p>github地址：<a href=\"https://github.com/hanks-zyh/HTextView\">https://github.com/hanks-zyh/HTextView</a></p>\n</li>\n<li><p>Titanic</p>\n<p>这名字看不出是text view啊，呵呵，实现自动沉水的text view，效果：</p>\n<p><img src=\"https://github.com/RomainPiel/Titanic/raw/master/titanic.gif\" alt=\"titanic\"></p>\n<p>github地址：<a href=\"https://github.com/RomainPiel/Titanic\">https://github.com/RomainPiel/Titanic</a></p>\n</li>\n<li><p>Shimmer</p>\n<p>比较流行的一个闪动式text View，效果：</p>\n<p><img src=\"https://github.com/RomainPiel/Shimmer-android/raw/master/shimmer.gif\" alt=\"shimmer\"></p>\n<p>github地址：<a href=\"https://github.com/RomainPiel/Shimmer-android\">https://github.com/RomainPiel/Shimmer-android</a></p>\n<p>还有一个同名的，可能更强的，效果：</p>\n<p><img src=\"https://github.com/facebook/shimmer-android/raw/master/shimmer.gif?raw=true\" alt=\"shimmer\"></p>\n<p>github地址：<a href=\"https://github.com/facebook/shimmer-android\">https://github.com/facebook/shimmer-android</a></p>\n</li>\n<li><p>emojicon</p>\n<p>一个可以显示emoji表情的textview ，效果：</p>\n<p><img src=\"https://github.com/rockerhieu/emojicon/raw/master/images/sample.jpg\" alt=\"emoji\"></p>\n<p>github地址：<a href=\"https://github.com/rockerhieu/emojicon\">https://github.com/rockerhieu/emojicon</a></p>\n</li>\n<li><p>AutoFitTextView</p>\n<p>可以在限定的大小，自动调整文字大小来适应边界，效果：</p>\n<p><img src=\"https://github.com/grantland/android-autofittextview/raw/master/website/static/autofittextview.gif?raw=true\" alt=\"autofit\"></p>\n<p>github地址：<a href=\"https://github.com/grantland/android-autofittextview\">https://github.com/grantland/android-autofittextview</a></p>\n</li>\n<li><p>iconify</p>\n<p>可以显示很卡哇伊的效果的text view，效果：</p>\n<p><img src=\"https://github.com/JoanZapata/android-iconify/raw/master/graphics/androids.png\" alt=\"iconify\"></p>\n<p>github地址：<a href=\"https://github.com/JoanZapata/android-iconify\">https://github.com/JoanZapata/android-iconify</a></p>\n</li>\n<li><p>Calligraphy</p>\n<p>便于快速在xml中使用字体的textview，效果：</p>\n<p><img src=\"https://github.com/chrisjenx/Calligraphy/raw/master/screenshot.png\" alt=\"calligraphy\"></p>\n<p>github地址：<a href=\"https://github.com/chrisjenx/Calligraphy\">https://github.com/chrisjenx/Calligraphy</a></p>\n</li>\n<li><p>RobotoText View</p>\n<p>类似上边，这个可以快捷使用android的roboto字体的textview,效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/johnkil/Android-RobotoTextView/master/art/RobotoTextView.jpg\" alt=\"roboto\"></p>\n<p>github地址：<a href=\"https://github.com/johnkil/Android-RobotoTextView\">https://github.com/johnkil/Android-RobotoTextView</a></p>\n</li>\n<li><p>JumpingBeans</p>\n<p>可以简单上下跳动的textview，效果：</p>\n<p><img src=\"https://github.com/frakbot/JumpingBeans/raw/master/art/jumpingdots.gif\" alt=\"jumping\"></p>\n<p><img src=\"https://github.com/frakbot/JumpingBeans/raw/master/art/jumpingword.gif\" alt=\"jumping\"></p>\n<p>github地址：<a href=\"https://github.com/frakbot/JumpingBeans\">https://github.com/frakbot/JumpingBeans</a></p>\n</li>\n<li><p>CountDown View</p>\n<p>不知算不算text view，属于一个倒计时显示的text view吧，效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/iwgang/CountdownView/master/screenshot/s_main.png\" alt=\"countdown\"></p>\n<p>github地址：<a href=\"https://github.com/iwgang/CountdownView\">https://github.com/iwgang/CountdownView</a></p>\n</li>\n<li><p>VerTextView</p>\n<p>竖排显示的text view，效果：</p>\n<p><img src=\"https://github.com/lfkdsk/JustWeTools/raw/master/picture/VerTextView.png\" alt=\"verText\"></p>\n<p>github地址：<a href=\"https://github.com/lfkdsk/JustWeTools\">https://github.com/lfkdsk/JustWeTools</a></p>\n</li>\n<li><p>LabelView</p>\n<p>类似上面提到的SlantedTextView，这也是一个倾斜的作为标签的textview，效果：</p>\n<p><img src=\"https://github.com/linger1216/labelview/raw/master/img/img1.png\" alt=\"label\"></p>\n<p>github地址：<a href=\"https://github.com/linger1216/labelview\">https://github.com/linger1216/labelview</a></p>\n</li>\n<li><p>Live emoji</p>\n<p>可以显示动态emoji的text view，姑且成为text view吧，呵呵，效果：</p>\n<p><img src=\"https://github.com/RomainPiel/live-emoji/raw/master/image.gif\" alt=\"live\"></p>\n<p>github地址：<a href=\"https://github.com/RomainPiel/live-emoji\">https://github.com/RomainPiel/live-emoji</a></p>\n</li>\n<li><p>MatchView</p>\n<p>随风飘散的效果的text view，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/a71e9d26a7f90ea70270b3681d99785a29f83be5/687474703a2f2f7777312e73696e61696d672e636e2f6d773639302f6136393561636465677731656d79746e6b347334356732306567306d6b3439302e676966\" alt=\"match\"></p>\n<p>github地址：<a href=\"https://github.com/Rogero0o/MatchView\">https://github.com/Rogero0o/MatchView</a></p>\n</li>\n<li><p>TextJustify</p>\n<p>算是一个可以对其调整的text view么，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/061a4a460340c26422b2a2f43d7fe39e73246297/687474703a2f2f692e696d6775722e636f6d2f6b3662415764302e6a7067\" alt=\"justify\"></p>\n<p>github地址：<a href=\"https://github.com/bluejamesbond/TextJustify-Android\">https://github.com/bluejamesbond/TextJustify-Android</a></p>\n</li>\n<li><p>RoundedLetterView</p>\n<p>类似Android联系人目录，显示头像或名字字母的text View，效果：</p>\n<p><img src=\"https://github.com/pavlospt/RoundedLetterView/raw/master/Screenshots/device-2014-11-13-191000.png\" alt=\"rounded\"></p>\n<p>github地址：<a href=\"https://github.com/pavlospt/RoundedLetterView\">https://github.com/pavlospt/RoundedLetterView</a></p>\n</li>\n<li><p>TextDrawable</p>\n<p>类似上面RoundedLetterView，效果：</p>\n<p><img src=\"https://github.com/amulyakhare/TextDrawable/raw/master/screens/screen1-material.png\" alt=\"text\"></p>\n<p>github 地址：<a href=\"https://github.com/amulyakhare/TextDrawable\">https://github.com/amulyakhare/TextDrawable</a></p>\n</li>\n<li><p>BabushkaText</p>\n<p>可以自定义样式的textview，效果：</p>\n<p><img src=\"https://github.com/quiqueqs/BabushkaText/raw/master/images/example.png\" alt=\"babushka\"></p>\n<p>github地址：<a href=\"https://github.com/quiqueqs/BabushkaText\">https://github.com/quiqueqs/BabushkaText</a></p>\n</li>\n<li><p>TextSurface</p>\n<p>可以自带动画效果的textview，效果：</p>\n<p><img src=\"https://github.com/elevenetc/TextSurface/raw/master/docs/demo.gif\" alt=\"text\"></p>\n<p>github 地址：<a href=\"https://github.com/elevenetc/TextSurface\">https://github.com/elevenetc/TextSurface</a></p>\n</li>\n<li><p>Text Counter</p>\n<p>可以上下计数的text view，效果：</p>\n<p><img src=\"https://github.com/premnirmal/TextCounter/blob/master/img/counter.gif?raw=true\" alt=\"counter\"></p>\n<p>github地址：<a href=\"https://github.com/premnirmal/TextCounter\">https://github.com/premnirmal/TextCounter</a></p>\n</li>\n<li><p>android-ago</p>\n<p>可以自动更新显示其生成时间的一个text view，效果：</p>\n<p><img src=\"https://github.com/curioustechizen/android-ago/raw/master/screenshots/android-ago-sample-screenshot.png\" alt=\"text\"></p>\n<p>github地址：<a href=\"https://github.com/curioustechizen/android-ago\">https://github.com/curioustechizen/android-ago</a></p>\n</li>\n<li><p>TimelyTextView</p>\n<p>数字间变化的的一个text view，效果似乎是：</p>\n<p><img src=\"http://www.jcodecraeer.com/uploads/150127/1-15012F14312E0.gif\" alt=\"text\"></p>\n<p>github:<a href=\"https://github.com/adnan-SM/TimelyTextView\">https://github.com/adnan-SM/TimelyTextView</a></p>\n</li>\n<li><p>​</p>\n</li>\n</ol>\n"},{"title":"Git学习笔记","date":"2016-11-18T12:24:00.000Z","author":"冰路梦","_content":"# Git学习笔记\n\n<!-- TOC -->\n\n- [Git学习笔记](#git学习笔记)\n    - [1、Git简介](#1git简介)\n        - [Git与SVN区别](#git与svn区别)\n    - [2、Git安装配置](#2git安装配置)\n        - [1)、Git配置](#1git配置)\n        - [2)、用户信息](#2用户信息)\n        - [3)、文本编辑器](#3文本编辑器)\n        - [4)、差异对比工具](#4差异对比工具)\n        - [5)、查看配置信息](#5查看配置信息)\n    - [2、Git 工作流程](#2git-工作流程)\n    - [3、Git工作区、暂存区和版本库](#3git工作区暂存区和版本库)\n        - [基本概念：](#基本概念)\n    - [5、Git创建仓库](#5git创建仓库)\n    - [6、Git基本操作](#6git基本操作)\n    - [7、Git分支管理](#7git分支管理)\n    - [8、Git查看提交历史](#8git查看提交历史)\n    - [9、Git标签](#9git标签)\n    - [10、Git远程仓库](#10git远程仓库)\n    - [11、Git服务器搭建](#11git服务器搭建)\n\n<!-- /TOC -->\n\n## 1、Git简介\n\nGit是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。\n\nGit 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。\n\nGit 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。\n\n### Git与SVN区别\n\nGIT不仅仅是个版本控制系统，它也是个内容管理系统(CMS),工作管理系统等。\n\n如果你是一个具有使用SVN背景的人，你需要做一定的思想转换，来适应GIT提供的一些概念和特征。\n\nGit 与 SVN 区别点：\n\n- 1、GIT是分布式的，SVN不是：这是GIT和其它非分布式的版本控制系统，例如SVN，CVS等，最核心的区别。\n- 2、GIT把内容按元数据方式存储，而SVN是按文件：所有的资源控制系统都是把文件的元信息隐藏在一个类似.svn,.cvs等的文件夹里。\n- 3、GIT分支和SVN的分支不同：分支在SVN中一点不特别，就是版本库中的另外的一个目录。\n- 4、GIT没有一个全局的版本号，而SVN有：目前为止这是跟SVN相比GIT缺少的最大的一个特征。\n- 5、GIT的内容完整性要优于SVN：GIT的内容存储使用的是SHA-1哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。\n\n## 2、Git安装配置\n\n### 1)、Git配置\n\nGit 提供了`git config`的工具，用于配置读取工作环境变量\n\n- /etc/gitconfig文件：系统级别的配置文件，使用`git config --system`操作此文件\n- ~/.gitconfig文件：当前用户的配置文件，使用`git config --global`操作此文件\n- .git/config文件：当前Git目录中的配置文件，仅对当前项目有效。\n\n### 2)、用户信息\n\n配置user.name和user.email\n\n```shell\ngit config --global user.name \"name\"\ngit config --global user.email \"name@name.com\"\n```\n\n可以不用`--global`参数，则只配置当前git项目。\n\n### 3)、文本编辑器\n\n可以设置git默认的文本编辑器\n\n```shell\ngit config --global core.editor vim # 使用vim作为指定编辑器\n```\n\n### 4)、差异对比工具\n\n可以指定对比工具\n\n```sh\ngit config --global merge.tool vimdiff\n```\n\n### 5)、查看配置信息\n\n```sh\ngit config --list\n```\n\n\n\n## 2、Git 工作流程\n\ngit一般工作流程：\n\n- 克隆 Git 资源作为工作目录。\n- 在克隆的资源上添加或修改文件。\n- 如果其他人修改了，你可以更新资源。\n- 在提交前查看修改。\n- 提交修改。\n- 在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。\n\n下图展示了 Git 的工作流程：\n\n![git](http://www.runoob.com/wp-content/uploads/2015/02/git-process.png)\n\n## 3、Git工作区、暂存区和版本库\n\n### 基本概念：\n\n- **工作区：**就是你在电脑里能看到的目录。\n- **暂存区：**英文叫stage, 或index。一般存放在\"git目录\"下的index文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。\n- **版本库：**工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。\n\n下面这个图展示了工作区、版本库中的暂存区和版本库之间的关系：\n\n![work](http://www.runoob.com/wp-content/uploads/2015/02/1352126739_7909.jpg)\n\n图中左侧为工作区，右侧为版本库。在版本库中标记为 \"index\" 的区域是暂存区（stage, index），标记为 \"master\" 的是 master 分支所代表的目录树。\n\n图中我们可以看出此时 \"HEAD\" 实际是指向 master 分支的一个\"游标\"。所以图示的命令中出现 HEAD 的地方可以用 master 来替换。\n\n图中的 objects 标识的区域为 Git 的对象库，实际位于 \".git/objects\" 目录下，里面包含了创建的各种对象及内容。\n\n当对工作区修改（或新增）的文件执行 \"git add\" 命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的ID被记录在暂存区的文件索引中。\n\n当执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。\n\n当执行 \"git reset HEAD\" 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。\n\n当执行 \"git rm --cached <file>\" 命令时，会直接从暂存区删除文件，工作区则不做出改变。\n\n当执行 \"git checkout .\" 或者 \"git checkout -- <file>\" 命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动。\n\n当执行 \"git checkout HEAD .\" 或者 \"git checkout HEAD <file>\" 命令时，会用 HEAD 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。\n\n## 5、Git创建仓库\n\n- git init\n\n`git init`初始化git仓库，如此才能执行其他git操作。会生成一个`.git`目录。\n\n```sh\ngit init <repo_name>\n```\n\n- git clone\n\n  从git仓库拷贝项目\n\n  ```sh\n  git clone <repo> <directory>\n  ```\n\n  其中`repo`为git仓库，`dir`为本地目录\n\n## 6、Git基本操作\n\n- git init\n- git clone\n- git add\n- git status\n- git diff\n- git commit\n- git reset HEAD\n- git rm\n- git mv\n\n## 7、Git分支管理\n\n- git branch\n- git checkout\n- git merge\n\n## 8、Git查看提交历史\n\n- git log\n\n## 9、Git标签\n\n- git tag\n\n## 10、Git远程仓库\n\n- git remote add [shortname]\\[url]\n- git remote\n- git fetch\n- git pull\n- git push [alias]\\[branch]\n- git remote rm [alias]\n\n## 11、Git服务器搭建\n\n以CentOS为例\n\n- 安装Git\n\n  ```sh\n  $ yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel perl-devel\n  $ yum install git\n  ```\n\n  创建一个git用户组和用户，用于运行git服务\n\n  ```sh\n  $ groupadd git\n  $ adduser git -g git\n  ```\n\n- 创建证书登录\n\n  ```sh\n  $ cd /home/git/\n  $ mkdir .ssh\n  $ chmod 700 .ssh\n  $ touch .ssh/authorized_keys\n  $ chmod 600 .ssh/authorized_keys\n  ```\n\n- 初始化Git仓库\n\n  ```sh\n  $ cd /home\n  $ mkdir gitrepo\n  $ chown git:git gitrepo/\n  $ cd gitrepo\n\n  $ git init --bare w3cschoolcc.git\n  Initialized empty Git repository in /home/gitrepo/w3cschoolcc.git/\n  ```\n\n- 克隆仓库\n\n  ```sh\n  $ git clone <url>\n  Cloning into 'w3cschoolcc'...\n  warning: You appear to have cloned an empty repository.\n  Checking connectivity... done.\n  ```\n\n设置`git`用户不能shell登录，则编辑`/etc/passwd`文件，\n\n```sh\ngit:x:503:503::/home/git:/bin/bash\n#将后面的/bin/bash改为/sbin/nologin\n```\n\n","source":"_posts/Git学习笔记.md","raw":"---\ntitle: \"Git学习笔记\"\ndate: 2016-11-18 20:24\nauthor: 冰路梦\ntag:\n    - Linux\n    - Git\ncategories:\n    - Linux\n---\n# Git学习笔记\n\n<!-- TOC -->\n\n- [Git学习笔记](#git学习笔记)\n    - [1、Git简介](#1git简介)\n        - [Git与SVN区别](#git与svn区别)\n    - [2、Git安装配置](#2git安装配置)\n        - [1)、Git配置](#1git配置)\n        - [2)、用户信息](#2用户信息)\n        - [3)、文本编辑器](#3文本编辑器)\n        - [4)、差异对比工具](#4差异对比工具)\n        - [5)、查看配置信息](#5查看配置信息)\n    - [2、Git 工作流程](#2git-工作流程)\n    - [3、Git工作区、暂存区和版本库](#3git工作区暂存区和版本库)\n        - [基本概念：](#基本概念)\n    - [5、Git创建仓库](#5git创建仓库)\n    - [6、Git基本操作](#6git基本操作)\n    - [7、Git分支管理](#7git分支管理)\n    - [8、Git查看提交历史](#8git查看提交历史)\n    - [9、Git标签](#9git标签)\n    - [10、Git远程仓库](#10git远程仓库)\n    - [11、Git服务器搭建](#11git服务器搭建)\n\n<!-- /TOC -->\n\n## 1、Git简介\n\nGit是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。\n\nGit 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。\n\nGit 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。\n\n### Git与SVN区别\n\nGIT不仅仅是个版本控制系统，它也是个内容管理系统(CMS),工作管理系统等。\n\n如果你是一个具有使用SVN背景的人，你需要做一定的思想转换，来适应GIT提供的一些概念和特征。\n\nGit 与 SVN 区别点：\n\n- 1、GIT是分布式的，SVN不是：这是GIT和其它非分布式的版本控制系统，例如SVN，CVS等，最核心的区别。\n- 2、GIT把内容按元数据方式存储，而SVN是按文件：所有的资源控制系统都是把文件的元信息隐藏在一个类似.svn,.cvs等的文件夹里。\n- 3、GIT分支和SVN的分支不同：分支在SVN中一点不特别，就是版本库中的另外的一个目录。\n- 4、GIT没有一个全局的版本号，而SVN有：目前为止这是跟SVN相比GIT缺少的最大的一个特征。\n- 5、GIT的内容完整性要优于SVN：GIT的内容存储使用的是SHA-1哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。\n\n## 2、Git安装配置\n\n### 1)、Git配置\n\nGit 提供了`git config`的工具，用于配置读取工作环境变量\n\n- /etc/gitconfig文件：系统级别的配置文件，使用`git config --system`操作此文件\n- ~/.gitconfig文件：当前用户的配置文件，使用`git config --global`操作此文件\n- .git/config文件：当前Git目录中的配置文件，仅对当前项目有效。\n\n### 2)、用户信息\n\n配置user.name和user.email\n\n```shell\ngit config --global user.name \"name\"\ngit config --global user.email \"name@name.com\"\n```\n\n可以不用`--global`参数，则只配置当前git项目。\n\n### 3)、文本编辑器\n\n可以设置git默认的文本编辑器\n\n```shell\ngit config --global core.editor vim # 使用vim作为指定编辑器\n```\n\n### 4)、差异对比工具\n\n可以指定对比工具\n\n```sh\ngit config --global merge.tool vimdiff\n```\n\n### 5)、查看配置信息\n\n```sh\ngit config --list\n```\n\n\n\n## 2、Git 工作流程\n\ngit一般工作流程：\n\n- 克隆 Git 资源作为工作目录。\n- 在克隆的资源上添加或修改文件。\n- 如果其他人修改了，你可以更新资源。\n- 在提交前查看修改。\n- 提交修改。\n- 在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。\n\n下图展示了 Git 的工作流程：\n\n![git](http://www.runoob.com/wp-content/uploads/2015/02/git-process.png)\n\n## 3、Git工作区、暂存区和版本库\n\n### 基本概念：\n\n- **工作区：**就是你在电脑里能看到的目录。\n- **暂存区：**英文叫stage, 或index。一般存放在\"git目录\"下的index文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。\n- **版本库：**工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。\n\n下面这个图展示了工作区、版本库中的暂存区和版本库之间的关系：\n\n![work](http://www.runoob.com/wp-content/uploads/2015/02/1352126739_7909.jpg)\n\n图中左侧为工作区，右侧为版本库。在版本库中标记为 \"index\" 的区域是暂存区（stage, index），标记为 \"master\" 的是 master 分支所代表的目录树。\n\n图中我们可以看出此时 \"HEAD\" 实际是指向 master 分支的一个\"游标\"。所以图示的命令中出现 HEAD 的地方可以用 master 来替换。\n\n图中的 objects 标识的区域为 Git 的对象库，实际位于 \".git/objects\" 目录下，里面包含了创建的各种对象及内容。\n\n当对工作区修改（或新增）的文件执行 \"git add\" 命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的ID被记录在暂存区的文件索引中。\n\n当执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。\n\n当执行 \"git reset HEAD\" 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。\n\n当执行 \"git rm --cached <file>\" 命令时，会直接从暂存区删除文件，工作区则不做出改变。\n\n当执行 \"git checkout .\" 或者 \"git checkout -- <file>\" 命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动。\n\n当执行 \"git checkout HEAD .\" 或者 \"git checkout HEAD <file>\" 命令时，会用 HEAD 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。\n\n## 5、Git创建仓库\n\n- git init\n\n`git init`初始化git仓库，如此才能执行其他git操作。会生成一个`.git`目录。\n\n```sh\ngit init <repo_name>\n```\n\n- git clone\n\n  从git仓库拷贝项目\n\n  ```sh\n  git clone <repo> <directory>\n  ```\n\n  其中`repo`为git仓库，`dir`为本地目录\n\n## 6、Git基本操作\n\n- git init\n- git clone\n- git add\n- git status\n- git diff\n- git commit\n- git reset HEAD\n- git rm\n- git mv\n\n## 7、Git分支管理\n\n- git branch\n- git checkout\n- git merge\n\n## 8、Git查看提交历史\n\n- git log\n\n## 9、Git标签\n\n- git tag\n\n## 10、Git远程仓库\n\n- git remote add [shortname]\\[url]\n- git remote\n- git fetch\n- git pull\n- git push [alias]\\[branch]\n- git remote rm [alias]\n\n## 11、Git服务器搭建\n\n以CentOS为例\n\n- 安装Git\n\n  ```sh\n  $ yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel perl-devel\n  $ yum install git\n  ```\n\n  创建一个git用户组和用户，用于运行git服务\n\n  ```sh\n  $ groupadd git\n  $ adduser git -g git\n  ```\n\n- 创建证书登录\n\n  ```sh\n  $ cd /home/git/\n  $ mkdir .ssh\n  $ chmod 700 .ssh\n  $ touch .ssh/authorized_keys\n  $ chmod 600 .ssh/authorized_keys\n  ```\n\n- 初始化Git仓库\n\n  ```sh\n  $ cd /home\n  $ mkdir gitrepo\n  $ chown git:git gitrepo/\n  $ cd gitrepo\n\n  $ git init --bare w3cschoolcc.git\n  Initialized empty Git repository in /home/gitrepo/w3cschoolcc.git/\n  ```\n\n- 克隆仓库\n\n  ```sh\n  $ git clone <url>\n  Cloning into 'w3cschoolcc'...\n  warning: You appear to have cloned an empty repository.\n  Checking connectivity... done.\n  ```\n\n设置`git`用户不能shell登录，则编辑`/etc/passwd`文件，\n\n```sh\ngit:x:503:503::/home/git:/bin/bash\n#将后面的/bin/bash改为/sbin/nologin\n```\n\n","slug":"Git学习笔记","published":1,"updated":"2017-03-31T02:55:53.287Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0xj1nev000ascowbw4wioa7","content":"<h1 id=\"Git学习笔记\"><a href=\"#Git学习笔记\" class=\"headerlink\" title=\"Git学习笔记\"></a>Git学习笔记</h1><!-- TOC -->\n<ul>\n<li><a href=\"#git学习笔记\">Git学习笔记</a><ul>\n<li><a href=\"#1git简介\">1、Git简介</a><ul>\n<li><a href=\"#git与svn区别\">Git与SVN区别</a></li>\n</ul>\n</li>\n<li><a href=\"#2git安装配置\">2、Git安装配置</a><ul>\n<li><a href=\"#1git配置\">1)、Git配置</a></li>\n<li><a href=\"#2用户信息\">2)、用户信息</a></li>\n<li><a href=\"#3文本编辑器\">3)、文本编辑器</a></li>\n<li><a href=\"#4差异对比工具\">4)、差异对比工具</a></li>\n<li><a href=\"#5查看配置信息\">5)、查看配置信息</a></li>\n</ul>\n</li>\n<li><a href=\"#2git-工作流程\">2、Git 工作流程</a></li>\n<li><a href=\"#3git工作区暂存区和版本库\">3、Git工作区、暂存区和版本库</a><ul>\n<li><a href=\"#基本概念\">基本概念：</a></li>\n</ul>\n</li>\n<li><a href=\"#5git创建仓库\">5、Git创建仓库</a></li>\n<li><a href=\"#6git基本操作\">6、Git基本操作</a></li>\n<li><a href=\"#7git分支管理\">7、Git分支管理</a></li>\n<li><a href=\"#8git查看提交历史\">8、Git查看提交历史</a></li>\n<li><a href=\"#9git标签\">9、Git标签</a></li>\n<li><a href=\"#10git远程仓库\">10、Git远程仓库</a></li>\n<li><a href=\"#11git服务器搭建\">11、Git服务器搭建</a></li>\n</ul>\n</li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"1、Git简介\"><a href=\"#1、Git简介\" class=\"headerlink\" title=\"1、Git简介\"></a>1、Git简介</h2><p>Git是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</p>\n<p>Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</p>\n<p>Git 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。</p>\n<h3 id=\"Git与SVN区别\"><a href=\"#Git与SVN区别\" class=\"headerlink\" title=\"Git与SVN区别\"></a>Git与SVN区别</h3><p>GIT不仅仅是个版本控制系统，它也是个内容管理系统(CMS),工作管理系统等。</p>\n<p>如果你是一个具有使用SVN背景的人，你需要做一定的思想转换，来适应GIT提供的一些概念和特征。</p>\n<p>Git 与 SVN 区别点：</p>\n<ul>\n<li>1、GIT是分布式的，SVN不是：这是GIT和其它非分布式的版本控制系统，例如SVN，CVS等，最核心的区别。</li>\n<li>2、GIT把内容按元数据方式存储，而SVN是按文件：所有的资源控制系统都是把文件的元信息隐藏在一个类似.svn,.cvs等的文件夹里。</li>\n<li>3、GIT分支和SVN的分支不同：分支在SVN中一点不特别，就是版本库中的另外的一个目录。</li>\n<li>4、GIT没有一个全局的版本号，而SVN有：目前为止这是跟SVN相比GIT缺少的最大的一个特征。</li>\n<li>5、GIT的内容完整性要优于SVN：GIT的内容存储使用的是SHA-1哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。</li>\n</ul>\n<h2 id=\"2、Git安装配置\"><a href=\"#2、Git安装配置\" class=\"headerlink\" title=\"2、Git安装配置\"></a>2、Git安装配置</h2><h3 id=\"1-、Git配置\"><a href=\"#1-、Git配置\" class=\"headerlink\" title=\"1)、Git配置\"></a>1)、Git配置</h3><p>Git 提供了<code>git config</code>的工具，用于配置读取工作环境变量</p>\n<ul>\n<li>/etc/gitconfig文件：系统级别的配置文件，使用<code>git config --system</code>操作此文件</li>\n<li>~/.gitconfig文件：当前用户的配置文件，使用<code>git config --global</code>操作此文件</li>\n<li>.git/config文件：当前Git目录中的配置文件，仅对当前项目有效。</li>\n</ul>\n<h3 id=\"2-、用户信息\"><a href=\"#2-、用户信息\" class=\"headerlink\" title=\"2)、用户信息\"></a>2)、用户信息</h3><p>配置user.name和user.email</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global user.name &quot;name&quot;</div><div class=\"line\">git config --global user.email &quot;name@name.com&quot;</div></pre></td></tr></table></figure>\n<p>可以不用<code>--global</code>参数，则只配置当前git项目。</p>\n<h3 id=\"3-、文本编辑器\"><a href=\"#3-、文本编辑器\" class=\"headerlink\" title=\"3)、文本编辑器\"></a>3)、文本编辑器</h3><p>可以设置git默认的文本编辑器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global core.editor vim # 使用vim作为指定编辑器</div></pre></td></tr></table></figure>\n<h3 id=\"4-、差异对比工具\"><a href=\"#4-、差异对比工具\" class=\"headerlink\" title=\"4)、差异对比工具\"></a>4)、差异对比工具</h3><p>可以指定对比工具</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global merge.tool vimdiff</div></pre></td></tr></table></figure>\n<h3 id=\"5-、查看配置信息\"><a href=\"#5-、查看配置信息\" class=\"headerlink\" title=\"5)、查看配置信息\"></a>5)、查看配置信息</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --list</div></pre></td></tr></table></figure>\n<h2 id=\"2、Git-工作流程\"><a href=\"#2、Git-工作流程\" class=\"headerlink\" title=\"2、Git 工作流程\"></a>2、Git 工作流程</h2><p>git一般工作流程：</p>\n<ul>\n<li>克隆 Git 资源作为工作目录。</li>\n<li>在克隆的资源上添加或修改文件。</li>\n<li>如果其他人修改了，你可以更新资源。</li>\n<li>在提交前查看修改。</li>\n<li>提交修改。</li>\n<li>在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。</li>\n</ul>\n<p>下图展示了 Git 的工作流程：</p>\n<p><img src=\"http://www.runoob.com/wp-content/uploads/2015/02/git-process.png\" alt=\"git\"></p>\n<h2 id=\"3、Git工作区、暂存区和版本库\"><a href=\"#3、Git工作区、暂存区和版本库\" class=\"headerlink\" title=\"3、Git工作区、暂存区和版本库\"></a>3、Git工作区、暂存区和版本库</h2><h3 id=\"基本概念：\"><a href=\"#基本概念：\" class=\"headerlink\" title=\"基本概念：\"></a>基本概念：</h3><ul>\n<li><strong>工作区：</strong>就是你在电脑里能看到的目录。</li>\n<li><strong>暂存区：</strong>英文叫stage, 或index。一般存放在”git目录”下的index文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。</li>\n<li><strong>版本库：</strong>工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。</li>\n</ul>\n<p>下面这个图展示了工作区、版本库中的暂存区和版本库之间的关系：</p>\n<p><img src=\"http://www.runoob.com/wp-content/uploads/2015/02/1352126739_7909.jpg\" alt=\"work\"></p>\n<p>图中左侧为工作区，右侧为版本库。在版本库中标记为 “index” 的区域是暂存区（stage, index），标记为 “master” 的是 master 分支所代表的目录树。</p>\n<p>图中我们可以看出此时 “HEAD” 实际是指向 master 分支的一个”游标”。所以图示的命令中出现 HEAD 的地方可以用 master 来替换。</p>\n<p>图中的 objects 标识的区域为 Git 的对象库，实际位于 “.git/objects” 目录下，里面包含了创建的各种对象及内容。</p>\n<p>当对工作区修改（或新增）的文件执行 “git add” 命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的ID被记录在暂存区的文件索引中。</p>\n<p>当执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。</p>\n<p>当执行 “git reset HEAD” 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。</p>\n<p>当执行 “git rm –cached <file>“ 命令时，会直接从暂存区删除文件，工作区则不做出改变。</file></p>\n<p>当执行 “git checkout .” 或者 “git checkout – <file>“ 命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动。</file></p>\n<p>当执行 “git checkout HEAD .” 或者 “git checkout HEAD <file>“ 命令时，会用 HEAD 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。</file></p>\n<h2 id=\"5、Git创建仓库\"><a href=\"#5、Git创建仓库\" class=\"headerlink\" title=\"5、Git创建仓库\"></a>5、Git创建仓库</h2><ul>\n<li>git init</li>\n</ul>\n<p><code>git init</code>初始化git仓库，如此才能执行其他git操作。会生成一个<code>.git</code>目录。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git init &lt;repo_name&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>git clone</p>\n<p>从git仓库拷贝项目</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> &lt;repo&gt; &lt;directory&gt;</div></pre></td></tr></table></figure>\n<p>其中<code>repo</code>为git仓库，<code>dir</code>为本地目录</p>\n</li>\n</ul>\n<h2 id=\"6、Git基本操作\"><a href=\"#6、Git基本操作\" class=\"headerlink\" title=\"6、Git基本操作\"></a>6、Git基本操作</h2><ul>\n<li>git init</li>\n<li>git clone</li>\n<li>git add</li>\n<li>git status</li>\n<li>git diff</li>\n<li>git commit</li>\n<li>git reset HEAD</li>\n<li>git rm</li>\n<li>git mv</li>\n</ul>\n<h2 id=\"7、Git分支管理\"><a href=\"#7、Git分支管理\" class=\"headerlink\" title=\"7、Git分支管理\"></a>7、Git分支管理</h2><ul>\n<li>git branch</li>\n<li>git checkout</li>\n<li>git merge</li>\n</ul>\n<h2 id=\"8、Git查看提交历史\"><a href=\"#8、Git查看提交历史\" class=\"headerlink\" title=\"8、Git查看提交历史\"></a>8、Git查看提交历史</h2><ul>\n<li>git log</li>\n</ul>\n<h2 id=\"9、Git标签\"><a href=\"#9、Git标签\" class=\"headerlink\" title=\"9、Git标签\"></a>9、Git标签</h2><ul>\n<li>git tag</li>\n</ul>\n<h2 id=\"10、Git远程仓库\"><a href=\"#10、Git远程仓库\" class=\"headerlink\" title=\"10、Git远程仓库\"></a>10、Git远程仓库</h2><ul>\n<li>git remote add [shortname][url]</li>\n<li>git remote</li>\n<li>git fetch</li>\n<li>git pull</li>\n<li>git push [alias][branch]</li>\n<li>git remote rm [alias]</li>\n</ul>\n<h2 id=\"11、Git服务器搭建\"><a href=\"#11、Git服务器搭建\" class=\"headerlink\" title=\"11、Git服务器搭建\"></a>11、Git服务器搭建</h2><p>以CentOS为例</p>\n<ul>\n<li><p>安装Git</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel perl-devel</div><div class=\"line\">$ yum install git</div></pre></td></tr></table></figure>\n<p>创建一个git用户组和用户，用于运行git服务</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ groupadd git</div><div class=\"line\">$ adduser git -g git</div></pre></td></tr></table></figure>\n</li>\n<li><p>创建证书登录</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> /home/git/</div><div class=\"line\">$ mkdir .ssh</div><div class=\"line\">$ chmod 700 .ssh</div><div class=\"line\">$ touch .ssh/authorized_keys</div><div class=\"line\">$ chmod 600 .ssh/authorized_keys</div></pre></td></tr></table></figure>\n</li>\n<li><p>初始化Git仓库</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> /home</div><div class=\"line\">$ mkdir gitrepo</div><div class=\"line\">$ chown git:git gitrepo/</div><div class=\"line\">$ <span class=\"built_in\">cd</span> gitrepo</div><div class=\"line\"></div><div class=\"line\">$ git init --bare w3cschoolcc.git</div><div class=\"line\">Initialized empty Git repository <span class=\"keyword\">in</span> /home/gitrepo/w3cschoolcc.git/</div></pre></td></tr></table></figure>\n</li>\n<li><p>克隆仓库</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> &lt;url&gt;</div><div class=\"line\">Cloning into <span class=\"string\">'w3cschoolcc'</span>...</div><div class=\"line\">warning: You appear to have cloned an empty repository.</div><div class=\"line\">Checking connectivity... done.</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>设置<code>git</code>用户不能shell登录，则编辑<code>/etc/passwd</code>文件，</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git:x:503:503::/home/git:/bin/bash</div><div class=\"line\"><span class=\"comment\">#将后面的/bin/bash改为/sbin/nologin</span></div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"Git学习笔记\"><a href=\"#Git学习笔记\" class=\"headerlink\" title=\"Git学习笔记\"></a>Git学习笔记</h1><!-- TOC -->\n<ul>\n<li><a href=\"#git学习笔记\">Git学习笔记</a><ul>\n<li><a href=\"#1git简介\">1、Git简介</a><ul>\n<li><a href=\"#git与svn区别\">Git与SVN区别</a></li>\n</ul>\n</li>\n<li><a href=\"#2git安装配置\">2、Git安装配置</a><ul>\n<li><a href=\"#1git配置\">1)、Git配置</a></li>\n<li><a href=\"#2用户信息\">2)、用户信息</a></li>\n<li><a href=\"#3文本编辑器\">3)、文本编辑器</a></li>\n<li><a href=\"#4差异对比工具\">4)、差异对比工具</a></li>\n<li><a href=\"#5查看配置信息\">5)、查看配置信息</a></li>\n</ul>\n</li>\n<li><a href=\"#2git-工作流程\">2、Git 工作流程</a></li>\n<li><a href=\"#3git工作区暂存区和版本库\">3、Git工作区、暂存区和版本库</a><ul>\n<li><a href=\"#基本概念\">基本概念：</a></li>\n</ul>\n</li>\n<li><a href=\"#5git创建仓库\">5、Git创建仓库</a></li>\n<li><a href=\"#6git基本操作\">6、Git基本操作</a></li>\n<li><a href=\"#7git分支管理\">7、Git分支管理</a></li>\n<li><a href=\"#8git查看提交历史\">8、Git查看提交历史</a></li>\n<li><a href=\"#9git标签\">9、Git标签</a></li>\n<li><a href=\"#10git远程仓库\">10、Git远程仓库</a></li>\n<li><a href=\"#11git服务器搭建\">11、Git服务器搭建</a></li>\n</ul>\n</li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"1、Git简介\"><a href=\"#1、Git简介\" class=\"headerlink\" title=\"1、Git简介\"></a>1、Git简介</h2><p>Git是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</p>\n<p>Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</p>\n<p>Git 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。</p>\n<h3 id=\"Git与SVN区别\"><a href=\"#Git与SVN区别\" class=\"headerlink\" title=\"Git与SVN区别\"></a>Git与SVN区别</h3><p>GIT不仅仅是个版本控制系统，它也是个内容管理系统(CMS),工作管理系统等。</p>\n<p>如果你是一个具有使用SVN背景的人，你需要做一定的思想转换，来适应GIT提供的一些概念和特征。</p>\n<p>Git 与 SVN 区别点：</p>\n<ul>\n<li>1、GIT是分布式的，SVN不是：这是GIT和其它非分布式的版本控制系统，例如SVN，CVS等，最核心的区别。</li>\n<li>2、GIT把内容按元数据方式存储，而SVN是按文件：所有的资源控制系统都是把文件的元信息隐藏在一个类似.svn,.cvs等的文件夹里。</li>\n<li>3、GIT分支和SVN的分支不同：分支在SVN中一点不特别，就是版本库中的另外的一个目录。</li>\n<li>4、GIT没有一个全局的版本号，而SVN有：目前为止这是跟SVN相比GIT缺少的最大的一个特征。</li>\n<li>5、GIT的内容完整性要优于SVN：GIT的内容存储使用的是SHA-1哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。</li>\n</ul>\n<h2 id=\"2、Git安装配置\"><a href=\"#2、Git安装配置\" class=\"headerlink\" title=\"2、Git安装配置\"></a>2、Git安装配置</h2><h3 id=\"1-、Git配置\"><a href=\"#1-、Git配置\" class=\"headerlink\" title=\"1)、Git配置\"></a>1)、Git配置</h3><p>Git 提供了<code>git config</code>的工具，用于配置读取工作环境变量</p>\n<ul>\n<li>/etc/gitconfig文件：系统级别的配置文件，使用<code>git config --system</code>操作此文件</li>\n<li>~/.gitconfig文件：当前用户的配置文件，使用<code>git config --global</code>操作此文件</li>\n<li>.git/config文件：当前Git目录中的配置文件，仅对当前项目有效。</li>\n</ul>\n<h3 id=\"2-、用户信息\"><a href=\"#2-、用户信息\" class=\"headerlink\" title=\"2)、用户信息\"></a>2)、用户信息</h3><p>配置user.name和user.email</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global user.name &quot;name&quot;</div><div class=\"line\">git config --global user.email &quot;name@name.com&quot;</div></pre></td></tr></table></figure>\n<p>可以不用<code>--global</code>参数，则只配置当前git项目。</p>\n<h3 id=\"3-、文本编辑器\"><a href=\"#3-、文本编辑器\" class=\"headerlink\" title=\"3)、文本编辑器\"></a>3)、文本编辑器</h3><p>可以设置git默认的文本编辑器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global core.editor vim # 使用vim作为指定编辑器</div></pre></td></tr></table></figure>\n<h3 id=\"4-、差异对比工具\"><a href=\"#4-、差异对比工具\" class=\"headerlink\" title=\"4)、差异对比工具\"></a>4)、差异对比工具</h3><p>可以指定对比工具</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global merge.tool vimdiff</div></pre></td></tr></table></figure>\n<h3 id=\"5-、查看配置信息\"><a href=\"#5-、查看配置信息\" class=\"headerlink\" title=\"5)、查看配置信息\"></a>5)、查看配置信息</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --list</div></pre></td></tr></table></figure>\n<h2 id=\"2、Git-工作流程\"><a href=\"#2、Git-工作流程\" class=\"headerlink\" title=\"2、Git 工作流程\"></a>2、Git 工作流程</h2><p>git一般工作流程：</p>\n<ul>\n<li>克隆 Git 资源作为工作目录。</li>\n<li>在克隆的资源上添加或修改文件。</li>\n<li>如果其他人修改了，你可以更新资源。</li>\n<li>在提交前查看修改。</li>\n<li>提交修改。</li>\n<li>在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。</li>\n</ul>\n<p>下图展示了 Git 的工作流程：</p>\n<p><img src=\"http://www.runoob.com/wp-content/uploads/2015/02/git-process.png\" alt=\"git\"></p>\n<h2 id=\"3、Git工作区、暂存区和版本库\"><a href=\"#3、Git工作区、暂存区和版本库\" class=\"headerlink\" title=\"3、Git工作区、暂存区和版本库\"></a>3、Git工作区、暂存区和版本库</h2><h3 id=\"基本概念：\"><a href=\"#基本概念：\" class=\"headerlink\" title=\"基本概念：\"></a>基本概念：</h3><ul>\n<li><strong>工作区：</strong>就是你在电脑里能看到的目录。</li>\n<li><strong>暂存区：</strong>英文叫stage, 或index。一般存放在”git目录”下的index文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。</li>\n<li><strong>版本库：</strong>工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。</li>\n</ul>\n<p>下面这个图展示了工作区、版本库中的暂存区和版本库之间的关系：</p>\n<p><img src=\"http://www.runoob.com/wp-content/uploads/2015/02/1352126739_7909.jpg\" alt=\"work\"></p>\n<p>图中左侧为工作区，右侧为版本库。在版本库中标记为 “index” 的区域是暂存区（stage, index），标记为 “master” 的是 master 分支所代表的目录树。</p>\n<p>图中我们可以看出此时 “HEAD” 实际是指向 master 分支的一个”游标”。所以图示的命令中出现 HEAD 的地方可以用 master 来替换。</p>\n<p>图中的 objects 标识的区域为 Git 的对象库，实际位于 “.git/objects” 目录下，里面包含了创建的各种对象及内容。</p>\n<p>当对工作区修改（或新增）的文件执行 “git add” 命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的ID被记录在暂存区的文件索引中。</p>\n<p>当执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。</p>\n<p>当执行 “git reset HEAD” 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。</p>\n<p>当执行 “git rm –cached <file>“ 命令时，会直接从暂存区删除文件，工作区则不做出改变。</file></p>\n<p>当执行 “git checkout .” 或者 “git checkout – <file>“ 命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动。</file></p>\n<p>当执行 “git checkout HEAD .” 或者 “git checkout HEAD <file>“ 命令时，会用 HEAD 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。</file></p>\n<h2 id=\"5、Git创建仓库\"><a href=\"#5、Git创建仓库\" class=\"headerlink\" title=\"5、Git创建仓库\"></a>5、Git创建仓库</h2><ul>\n<li>git init</li>\n</ul>\n<p><code>git init</code>初始化git仓库，如此才能执行其他git操作。会生成一个<code>.git</code>目录。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git init &lt;repo_name&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>git clone</p>\n<p>从git仓库拷贝项目</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> &lt;repo&gt; &lt;directory&gt;</div></pre></td></tr></table></figure>\n<p>其中<code>repo</code>为git仓库，<code>dir</code>为本地目录</p>\n</li>\n</ul>\n<h2 id=\"6、Git基本操作\"><a href=\"#6、Git基本操作\" class=\"headerlink\" title=\"6、Git基本操作\"></a>6、Git基本操作</h2><ul>\n<li>git init</li>\n<li>git clone</li>\n<li>git add</li>\n<li>git status</li>\n<li>git diff</li>\n<li>git commit</li>\n<li>git reset HEAD</li>\n<li>git rm</li>\n<li>git mv</li>\n</ul>\n<h2 id=\"7、Git分支管理\"><a href=\"#7、Git分支管理\" class=\"headerlink\" title=\"7、Git分支管理\"></a>7、Git分支管理</h2><ul>\n<li>git branch</li>\n<li>git checkout</li>\n<li>git merge</li>\n</ul>\n<h2 id=\"8、Git查看提交历史\"><a href=\"#8、Git查看提交历史\" class=\"headerlink\" title=\"8、Git查看提交历史\"></a>8、Git查看提交历史</h2><ul>\n<li>git log</li>\n</ul>\n<h2 id=\"9、Git标签\"><a href=\"#9、Git标签\" class=\"headerlink\" title=\"9、Git标签\"></a>9、Git标签</h2><ul>\n<li>git tag</li>\n</ul>\n<h2 id=\"10、Git远程仓库\"><a href=\"#10、Git远程仓库\" class=\"headerlink\" title=\"10、Git远程仓库\"></a>10、Git远程仓库</h2><ul>\n<li>git remote add [shortname][url]</li>\n<li>git remote</li>\n<li>git fetch</li>\n<li>git pull</li>\n<li>git push [alias][branch]</li>\n<li>git remote rm [alias]</li>\n</ul>\n<h2 id=\"11、Git服务器搭建\"><a href=\"#11、Git服务器搭建\" class=\"headerlink\" title=\"11、Git服务器搭建\"></a>11、Git服务器搭建</h2><p>以CentOS为例</p>\n<ul>\n<li><p>安装Git</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel perl-devel</div><div class=\"line\">$ yum install git</div></pre></td></tr></table></figure>\n<p>创建一个git用户组和用户，用于运行git服务</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ groupadd git</div><div class=\"line\">$ adduser git -g git</div></pre></td></tr></table></figure>\n</li>\n<li><p>创建证书登录</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> /home/git/</div><div class=\"line\">$ mkdir .ssh</div><div class=\"line\">$ chmod 700 .ssh</div><div class=\"line\">$ touch .ssh/authorized_keys</div><div class=\"line\">$ chmod 600 .ssh/authorized_keys</div></pre></td></tr></table></figure>\n</li>\n<li><p>初始化Git仓库</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> /home</div><div class=\"line\">$ mkdir gitrepo</div><div class=\"line\">$ chown git:git gitrepo/</div><div class=\"line\">$ <span class=\"built_in\">cd</span> gitrepo</div><div class=\"line\"></div><div class=\"line\">$ git init --bare w3cschoolcc.git</div><div class=\"line\">Initialized empty Git repository <span class=\"keyword\">in</span> /home/gitrepo/w3cschoolcc.git/</div></pre></td></tr></table></figure>\n</li>\n<li><p>克隆仓库</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> &lt;url&gt;</div><div class=\"line\">Cloning into <span class=\"string\">'w3cschoolcc'</span>...</div><div class=\"line\">warning: You appear to have cloned an empty repository.</div><div class=\"line\">Checking connectivity... done.</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>设置<code>git</code>用户不能shell登录，则编辑<code>/etc/passwd</code>文件，</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git:x:503:503::/home/git:/bin/bash</div><div class=\"line\"><span class=\"comment\">#将后面的/bin/bash改为/sbin/nologin</span></div></pre></td></tr></table></figure>\n"},{"title":"Markdown基本语法","date":"2016-09-26T02:57:00.000Z","author":"冰路梦","_content":"\n\nMarkdown 基本语法\n==\n**本文没有使用csdn的markdown书写，而是原语法格式显示，便于更好的理解markdown语法。**\n目前本人发现的比较不错的markdown编辑器：tepora、atom、Haroopad、以及在线版的cmdMarkdown、马克飞象、Stack Edit等。\n文章结尾附上本文的markdown形式。\n<image url = '/path/to/image'>\n\n\n## 一、标题\n`1. 类似Setext形式，利用 = 或 - 符号，写在标题文字下一行，分别表示一级、二级 标题`\n\n\n\n注 : =或-至少也只需要两个就好。\n\n\n`2.类似Atx形式，使用 # 符号，加与标题文字前，且至少一个空格才行使用个数1～6,分别表示六级标题`\n\n\n\n注 : 标签语言讲究对称性，标题Atx模式可以在标题后加上不定个数的#，仅为美观而已。\n\n\n\nmarkdown编辑文字需要有空行，才能显示为空行，而换行需要编辑时有一个空行\n\n\n\n显示才会换行。编程通则，符号输入法英文半角。\n\n\n## 二、区块引用\n> markdown使用类似email中的 > 引用符号，标记区块\n> 区块内的每一行都会自动添加 > 符号\n> 其实也可以仅在第一行使用了 > 符号即可，不过有些编辑器会自动补上。\n\n\n但是这样的话就需要有一个空行，才能表示区块结束。若是最后一行有 > 符号，\n想要结束区块就要回车后，空一行，再回来哦，表示中断和区块编辑的联系。\n>区块内也可以使用嵌套\n> >嵌套层级应该是没有限制的\n> >>多级嵌套\n> >>也是挺好看的\n\n\n> >但是想要结束一个小区块，就得借助空行了。\n> >不然还真的不好结束呢。外层区块与其他区块之间，\n> >看来需要有非区块语法隔离才行。\n\n---\n>使用了一个分割线才和上面的区块分开来，空格，空行，回车都没用的哦。\n>区块内可以使用其他markdown的语法。\n###### 来个标题\n`背景条幅`\n\n---\n三个---即可形成一个分割线，注意和上面文字空一行，否则就成标题了哦\n## 三、列表\n+ 列表分为无序列表和有序列表，可以多级列表。\n\n\n    - 无序列表中使用 加、减、星号\n       * 来作为开启列表的标识,均需要有一个空格才生效。或者tab也行\n\n\n9. 有序列表使用数字\n   6. 和英文的句号，数字不一定就要一二三的很有序。\n\n\n7.    显示时候都是123的。\n8. 多个段落的隔开，需要每个段前tab或4空格？有点乱，感觉首列后空一行\n           则每列都会空，非首列则空其后。\n9. 列表内使用引用符号>，需要缩进\n      10. 还是列表内容\n      >引用，我似乎没感觉到？\n\n\n   7. 如果列表放入代码，该区快就要缩进两tab或8空格\n```java\n   public static void main(String[] args){\n    System.out.pringtln(\"代码高亮\");\n   }\n```\n\n\n1.可能无意间会写出列表形式，比如首行“2016. 09. 25\"出现了数字，句点和空格\n就会形成列表，如此可以加个\\来避免，或者其他符号。\n注意和普通文本的编辑不同，列表的缩进，需要在列表标识符号前加空格，最多三个。\n其后面需至少一个空格或tab\n\n\n2.文字段落前一个tab或4个空格，就会生成背景框。\n`和用``符号似乎不太一样，这个有点加黑得样子？`\n\n## 四、代码区块\n1,代码区块得建立就是面所说，一个tab或者4个空格。\n而在带码区块中，markdown的一般语法符号，将只是普通文本。\n```java\npublic static void main(String[] args){\n    System.out.pringtln(\"代码高亮\");\n}//哎呦，后面的```引号，还不到能直接放在这一行呢，否则就不算结束代码块了。\n```\n\n## 五、分割线\n在一行中使用三个或以上的星号、减号、下划线，就可以显示一个分割线\n但是需要从行首就开始,可以混用,(不同的md编辑器，也许细节不同)且不必连续，但不能掺杂文字\n\n----\n___\n\n_*-\n\n而且要注意避免形成标题哦，\n*     *     *\n\n## 六、区段元素\n\n#### 1、链接\n\nMarkdown 支持两种链接：行内式和参考式。链接文字都用[方括号]标记。\n- 行内式，[]后跟(url \"网址标题\")即可。\n  [baidu](www.baidu.com \"百度\")，前面式显示网址，\"\"内部式网址标题\n  * 似乎也可以使用路径形式,[file](/server/file/ \"FTP服务器\")。\n\n\n- 参考式，两个[name][id]，前面为显示名称，id为标记变量名，在文章内任意文本首行位置\n  声明 [id]:www.baidu.com,即可。\n  *例如，[百度][url],网址在此显示，地址声明如下，\n  注意缩进什么的不要与其他语法冲突而失效。\n\n  [url]: www.baidu.com&quot;baidu&quot;\n\n  此种链接内容的格式，选择性的3个空格，一个冒号，一个tab或空格，然后是网址，\n  后面的标题title，可以用单引号，双引号，或者括号都行。\n  注，网址可以用<>包括，标题可以另起一行。链接不区分大小写，字母数字，空白和标点。\n  隐式链接标记功能，可以省略指定连接。此时视为文字为网址，[id]就空这，name等于id了。\n- 如[Google][]\n[Google]: www.google.com\n如此形式，name可以多单词，加空格。\n[thinkpad lenovo][],\n[thinkpad lenovo]: www.lenovo.com\n参考式链接可以像文献引用一样，放于文后，便于整洁。\n## 七、强调\nMarkdown用\\*或_来标识强调，位于其包围内的文本，被强调显示，两个\\*\\*或__,会更强吗？\n此处为了显示单个的*而不是和后面的一起作用，用了\\做转义。\n+ 如下\n  - _单个强调_,和*强调单个*，是加黑斜体\n  - **双星强调**，__更厉害__\n  + ****那么三星更厉害吗****,最多可用四个，但是没啥区别了。\n    ____你____混合失效，且符号两边不能有空格。前边的不能空？\n+ *强调单个*\n- 删除线，~~nihao~~\n\n\n## 八、代码及符号\n原来背景`是用来标记小行段代码的`，用反单引号\\``标记，代码写在其中。\n要是代码内也有\\``符号，那么外围可以多用几个\\``符号\n例如````这里面还有反单引号``出现呢````，成对出现的哦。\n___\n使用反引号时候，紧跟代码语言，即可实现代码高亮\n最外围的\\```  内部各加一个空格，里面的引用就可以直接一开始添加更多的\\```了\n```  ``使用反引号 ```\n\n$$注意使用标签标识符的时候，前后的位置个数要一致，尤其小心缩进与空格的影响$$\n$d$\n#d\n\n$$你好#$$\n\n$$nihao_$$\n\n$$nihao^$$\n\n$$nihao$$\n$$nihao%$$\n$$nihao@$$\n$$nihao~$$\n$$nihao{$$\n1、markdown语法会自动规避一盒html的标签，比如&，[]之类的\n\n## 九、图片\n\n1、Markdown 使用和链接类似得方式处理图片，行内式和参考式，用！作为标记，加[name]和(path)\n+ 行内式，![img1](/path/to/img1.jpg,\"title\"),小心写成链接哦![img2](/path/to/img2.jpg)\n+ 参考式，![img2][image2]\n  [image2]: /path/to/image2.jpg\n  暂时没法指定宽高，可以用html的< image > 标签,此处加空格，否则就不显示了。颜色字体什么的\n  就看html的形式了。\n## 十、其他\n1、自动链接，Markdown  转译简短得自动链接或邮箱\n<http://www.baidu.com/>,<markdown@mk.cn>\n2、反斜杠，转义符号，可用于一下符号转义为普通\n>\\\n>`\n>*\n>_\n>{}\n>[]\n>#\n>+\n>-\n>.\n>!\n>这几种符号得转义。\n\n<! html 的标签，似乎会被隐藏,不同编辑器略有不同哦，<> >\n空格空格加回车，才是换行符。\n\n<text 这个标签就被隐藏了哦 >\n\n\n### 表格\n\n\n\n**Markdown　Extra**　表格语法：独立行开始，写title，用|分割，然后次行用－符号，并配合|，如此构成表格。\n\n\n| 项目       | 价格    |\n| -------- | ----- |\n| Computer | $1600 |\n| Phone    | $12   |\n| Pipe     | $1    |\n\n\n可以使用冒号来定义对齐方式：\n：---表示左对齐，---：表示右对齐，：---：表示居中对齐。\n\n\n| 项目       |     价格 |  数量  |\n| :------- | -----: | :--: |\n| Computer | 1600 元 |  5   |\n| Phone    |   12 元 |  12  |\n| Pipe     |    1 元 | 234  |\n\n\n- 试试表格，至少要有表头和一个－标识列才行哦。\n\n\n表头|\n-|\n\n\n- 复选框，使用空格-/*/+空格[x]空格 项目，表示选中,类似列表选项。\n  * [x] 第一条\n  * [ ] 第二条\n\n---\n- 表情，使用冒号包围表情的英文代号\n  - 猴子:monkey:,星星:stars:,:v:\n  - 表情支持，见http://emoji.codes/\n\n\n## 其他拓展\n- CSDN\n  1. 脚注，类似链接，使用[^id]声明，其他地方[^id]:解释。\n  2. 目录，[toc]标签\n  3. UML图，类似代码块，不过反单引号后面申明的不是编程语言，而是图的类型\n        1. 如\n  ```sequence\n    张三->李四: 嘿，小四儿, 写博客了没?\n    Note right of 李四: 李四愣了一下，说：\n    李四-->张三: 忙得吐血，哪有时间写。\n  ```\n       2. 流程图\n  ```flow\n  st=>start: 开始\n  e=>end: 结束\n  op=>operation: 我的操作\n  cond=>condition: 确认？\n  st->op->cond\n  cond(yes)->e\n  cond(no)->op\n  ```\n\n  4. 列表的定义与基本语法不同，使用:  项目来缩进列表项。\n  5. 数学公式，如下\n     使用MathJax渲染*LaTex* 数学公式，详见[math.stackexchange.com].\n  - 行内公式，数学公式为：$\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$。\n  - 块级公式：\n      $$x = \\dfrac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$\n\n\n- Gitlab\n\n      1、网址直译，www.baidu.com\n\n      2、文件对比，不同,使用花括号和中括号的配合\n      ，不能同时使用同一个哦。{+ ADD +] and [-delete-}\n      3、gitlab引用，@user_name,#123,等等。\n\n---\n####CmdMarkdown [^cmd]\n- 高效绘制 [流程图](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#7-流程图)，标识为flow\n```flow\nst=>start: Start\nop=>operation: Your Operation\ncond=>condition: Yes or No?\ne=>end\n\nst->op->cond\ncond(yes)->e\ncond(no)->op\n```\n\n- 高效绘制 [序列图](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#8-序列图)，其标识为sequence\n\n```sequence\nAlice->Bob: Hello Bob, how are you?\nNote right of Bob: Bob thinks\nBob-->Alice: I am good thanks!\n```\n\n----\n- 高效绘制 [甘特图](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#9-甘特图)标识为gantt\n\n```gantt\n    title 项目开发流程\n    section 项目确定\n        需求分析       :a1, 2016-06-22, 3d\n        可行性报告     :after a1, 5d\n        概念验证       : 5d\n    section 项目实施\n        概要设计      :2016-07-05  , 5d\n        详细设计      :2016-07-08, 10d\n        编码          :2016-07-15, 10d\n        测试          :2016-07-22, 5d\n    section 发布验收\n        发布: 2d\n        验收: 3d\n```\n\n[^cmd]: jiaozhu\n注：markdown可以直接使用许多html的标签，用于更为丰富的界面显示哦。\n本人记录Markdown 语法用于个人学习，难免有疏漏，请读者见谅指点\n本文参考[*Markdown*语法](http://www.appinn.com/markdown/),在此感谢。\n","source":"_posts/Markdown基本语法.md","raw":"---\ntitle: \"Markdown基本语法\"\ndate: 2016-09-26 10:57\nauthor: 冰路梦\ntag:\n    - Markdown\ncategories:\n    - 编程相关\n---\n\n\nMarkdown 基本语法\n==\n**本文没有使用csdn的markdown书写，而是原语法格式显示，便于更好的理解markdown语法。**\n目前本人发现的比较不错的markdown编辑器：tepora、atom、Haroopad、以及在线版的cmdMarkdown、马克飞象、Stack Edit等。\n文章结尾附上本文的markdown形式。\n<image url = '/path/to/image'>\n\n\n## 一、标题\n`1. 类似Setext形式，利用 = 或 - 符号，写在标题文字下一行，分别表示一级、二级 标题`\n\n\n\n注 : =或-至少也只需要两个就好。\n\n\n`2.类似Atx形式，使用 # 符号，加与标题文字前，且至少一个空格才行使用个数1～6,分别表示六级标题`\n\n\n\n注 : 标签语言讲究对称性，标题Atx模式可以在标题后加上不定个数的#，仅为美观而已。\n\n\n\nmarkdown编辑文字需要有空行，才能显示为空行，而换行需要编辑时有一个空行\n\n\n\n显示才会换行。编程通则，符号输入法英文半角。\n\n\n## 二、区块引用\n> markdown使用类似email中的 > 引用符号，标记区块\n> 区块内的每一行都会自动添加 > 符号\n> 其实也可以仅在第一行使用了 > 符号即可，不过有些编辑器会自动补上。\n\n\n但是这样的话就需要有一个空行，才能表示区块结束。若是最后一行有 > 符号，\n想要结束区块就要回车后，空一行，再回来哦，表示中断和区块编辑的联系。\n>区块内也可以使用嵌套\n> >嵌套层级应该是没有限制的\n> >>多级嵌套\n> >>也是挺好看的\n\n\n> >但是想要结束一个小区块，就得借助空行了。\n> >不然还真的不好结束呢。外层区块与其他区块之间，\n> >看来需要有非区块语法隔离才行。\n\n---\n>使用了一个分割线才和上面的区块分开来，空格，空行，回车都没用的哦。\n>区块内可以使用其他markdown的语法。\n###### 来个标题\n`背景条幅`\n\n---\n三个---即可形成一个分割线，注意和上面文字空一行，否则就成标题了哦\n## 三、列表\n+ 列表分为无序列表和有序列表，可以多级列表。\n\n\n    - 无序列表中使用 加、减、星号\n       * 来作为开启列表的标识,均需要有一个空格才生效。或者tab也行\n\n\n9. 有序列表使用数字\n   6. 和英文的句号，数字不一定就要一二三的很有序。\n\n\n7.    显示时候都是123的。\n8. 多个段落的隔开，需要每个段前tab或4空格？有点乱，感觉首列后空一行\n           则每列都会空，非首列则空其后。\n9. 列表内使用引用符号>，需要缩进\n      10. 还是列表内容\n      >引用，我似乎没感觉到？\n\n\n   7. 如果列表放入代码，该区快就要缩进两tab或8空格\n```java\n   public static void main(String[] args){\n    System.out.pringtln(\"代码高亮\");\n   }\n```\n\n\n1.可能无意间会写出列表形式，比如首行“2016. 09. 25\"出现了数字，句点和空格\n就会形成列表，如此可以加个\\来避免，或者其他符号。\n注意和普通文本的编辑不同，列表的缩进，需要在列表标识符号前加空格，最多三个。\n其后面需至少一个空格或tab\n\n\n2.文字段落前一个tab或4个空格，就会生成背景框。\n`和用``符号似乎不太一样，这个有点加黑得样子？`\n\n## 四、代码区块\n1,代码区块得建立就是面所说，一个tab或者4个空格。\n而在带码区块中，markdown的一般语法符号，将只是普通文本。\n```java\npublic static void main(String[] args){\n    System.out.pringtln(\"代码高亮\");\n}//哎呦，后面的```引号，还不到能直接放在这一行呢，否则就不算结束代码块了。\n```\n\n## 五、分割线\n在一行中使用三个或以上的星号、减号、下划线，就可以显示一个分割线\n但是需要从行首就开始,可以混用,(不同的md编辑器，也许细节不同)且不必连续，但不能掺杂文字\n\n----\n___\n\n_*-\n\n而且要注意避免形成标题哦，\n*     *     *\n\n## 六、区段元素\n\n#### 1、链接\n\nMarkdown 支持两种链接：行内式和参考式。链接文字都用[方括号]标记。\n- 行内式，[]后跟(url \"网址标题\")即可。\n  [baidu](www.baidu.com \"百度\")，前面式显示网址，\"\"内部式网址标题\n  * 似乎也可以使用路径形式,[file](/server/file/ \"FTP服务器\")。\n\n\n- 参考式，两个[name][id]，前面为显示名称，id为标记变量名，在文章内任意文本首行位置\n  声明 [id]:www.baidu.com,即可。\n  *例如，[百度][url],网址在此显示，地址声明如下，\n  注意缩进什么的不要与其他语法冲突而失效。\n\n  [url]: www.baidu.com&quot;baidu&quot;\n\n  此种链接内容的格式，选择性的3个空格，一个冒号，一个tab或空格，然后是网址，\n  后面的标题title，可以用单引号，双引号，或者括号都行。\n  注，网址可以用<>包括，标题可以另起一行。链接不区分大小写，字母数字，空白和标点。\n  隐式链接标记功能，可以省略指定连接。此时视为文字为网址，[id]就空这，name等于id了。\n- 如[Google][]\n[Google]: www.google.com\n如此形式，name可以多单词，加空格。\n[thinkpad lenovo][],\n[thinkpad lenovo]: www.lenovo.com\n参考式链接可以像文献引用一样，放于文后，便于整洁。\n## 七、强调\nMarkdown用\\*或_来标识强调，位于其包围内的文本，被强调显示，两个\\*\\*或__,会更强吗？\n此处为了显示单个的*而不是和后面的一起作用，用了\\做转义。\n+ 如下\n  - _单个强调_,和*强调单个*，是加黑斜体\n  - **双星强调**，__更厉害__\n  + ****那么三星更厉害吗****,最多可用四个，但是没啥区别了。\n    ____你____混合失效，且符号两边不能有空格。前边的不能空？\n+ *强调单个*\n- 删除线，~~nihao~~\n\n\n## 八、代码及符号\n原来背景`是用来标记小行段代码的`，用反单引号\\``标记，代码写在其中。\n要是代码内也有\\``符号，那么外围可以多用几个\\``符号\n例如````这里面还有反单引号``出现呢````，成对出现的哦。\n___\n使用反引号时候，紧跟代码语言，即可实现代码高亮\n最外围的\\```  内部各加一个空格，里面的引用就可以直接一开始添加更多的\\```了\n```  ``使用反引号 ```\n\n$$注意使用标签标识符的时候，前后的位置个数要一致，尤其小心缩进与空格的影响$$\n$d$\n#d\n\n$$你好#$$\n\n$$nihao_$$\n\n$$nihao^$$\n\n$$nihao$$\n$$nihao%$$\n$$nihao@$$\n$$nihao~$$\n$$nihao{$$\n1、markdown语法会自动规避一盒html的标签，比如&，[]之类的\n\n## 九、图片\n\n1、Markdown 使用和链接类似得方式处理图片，行内式和参考式，用！作为标记，加[name]和(path)\n+ 行内式，![img1](/path/to/img1.jpg,\"title\"),小心写成链接哦![img2](/path/to/img2.jpg)\n+ 参考式，![img2][image2]\n  [image2]: /path/to/image2.jpg\n  暂时没法指定宽高，可以用html的< image > 标签,此处加空格，否则就不显示了。颜色字体什么的\n  就看html的形式了。\n## 十、其他\n1、自动链接，Markdown  转译简短得自动链接或邮箱\n<http://www.baidu.com/>,<markdown@mk.cn>\n2、反斜杠，转义符号，可用于一下符号转义为普通\n>\\\n>`\n>*\n>_\n>{}\n>[]\n>#\n>+\n>-\n>.\n>!\n>这几种符号得转义。\n\n<! html 的标签，似乎会被隐藏,不同编辑器略有不同哦，<> >\n空格空格加回车，才是换行符。\n\n<text 这个标签就被隐藏了哦 >\n\n\n### 表格\n\n\n\n**Markdown　Extra**　表格语法：独立行开始，写title，用|分割，然后次行用－符号，并配合|，如此构成表格。\n\n\n| 项目       | 价格    |\n| -------- | ----- |\n| Computer | $1600 |\n| Phone    | $12   |\n| Pipe     | $1    |\n\n\n可以使用冒号来定义对齐方式：\n：---表示左对齐，---：表示右对齐，：---：表示居中对齐。\n\n\n| 项目       |     价格 |  数量  |\n| :------- | -----: | :--: |\n| Computer | 1600 元 |  5   |\n| Phone    |   12 元 |  12  |\n| Pipe     |    1 元 | 234  |\n\n\n- 试试表格，至少要有表头和一个－标识列才行哦。\n\n\n表头|\n-|\n\n\n- 复选框，使用空格-/*/+空格[x]空格 项目，表示选中,类似列表选项。\n  * [x] 第一条\n  * [ ] 第二条\n\n---\n- 表情，使用冒号包围表情的英文代号\n  - 猴子:monkey:,星星:stars:,:v:\n  - 表情支持，见http://emoji.codes/\n\n\n## 其他拓展\n- CSDN\n  1. 脚注，类似链接，使用[^id]声明，其他地方[^id]:解释。\n  2. 目录，[toc]标签\n  3. UML图，类似代码块，不过反单引号后面申明的不是编程语言，而是图的类型\n        1. 如\n  ```sequence\n    张三->李四: 嘿，小四儿, 写博客了没?\n    Note right of 李四: 李四愣了一下，说：\n    李四-->张三: 忙得吐血，哪有时间写。\n  ```\n       2. 流程图\n  ```flow\n  st=>start: 开始\n  e=>end: 结束\n  op=>operation: 我的操作\n  cond=>condition: 确认？\n  st->op->cond\n  cond(yes)->e\n  cond(no)->op\n  ```\n\n  4. 列表的定义与基本语法不同，使用:  项目来缩进列表项。\n  5. 数学公式，如下\n     使用MathJax渲染*LaTex* 数学公式，详见[math.stackexchange.com].\n  - 行内公式，数学公式为：$\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$。\n  - 块级公式：\n      $$x = \\dfrac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$\n\n\n- Gitlab\n\n      1、网址直译，www.baidu.com\n\n      2、文件对比，不同,使用花括号和中括号的配合\n      ，不能同时使用同一个哦。{+ ADD +] and [-delete-}\n      3、gitlab引用，@user_name,#123,等等。\n\n---\n####CmdMarkdown [^cmd]\n- 高效绘制 [流程图](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#7-流程图)，标识为flow\n```flow\nst=>start: Start\nop=>operation: Your Operation\ncond=>condition: Yes or No?\ne=>end\n\nst->op->cond\ncond(yes)->e\ncond(no)->op\n```\n\n- 高效绘制 [序列图](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#8-序列图)，其标识为sequence\n\n```sequence\nAlice->Bob: Hello Bob, how are you?\nNote right of Bob: Bob thinks\nBob-->Alice: I am good thanks!\n```\n\n----\n- 高效绘制 [甘特图](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#9-甘特图)标识为gantt\n\n```gantt\n    title 项目开发流程\n    section 项目确定\n        需求分析       :a1, 2016-06-22, 3d\n        可行性报告     :after a1, 5d\n        概念验证       : 5d\n    section 项目实施\n        概要设计      :2016-07-05  , 5d\n        详细设计      :2016-07-08, 10d\n        编码          :2016-07-15, 10d\n        测试          :2016-07-22, 5d\n    section 发布验收\n        发布: 2d\n        验收: 3d\n```\n\n[^cmd]: jiaozhu\n注：markdown可以直接使用许多html的标签，用于更为丰富的界面显示哦。\n本人记录Markdown 语法用于个人学习，难免有疏漏，请读者见谅指点\n本文参考[*Markdown*语法](http://www.appinn.com/markdown/),在此感谢。\n","slug":"Markdown基本语法","published":1,"updated":"2017-03-31T06:53:38.241Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0xj1ney000escow98fpx9vd","content":"<h1 id=\"Markdown-基本语法\"><a href=\"#Markdown-基本语法\" class=\"headerlink\" title=\"Markdown 基本语法\"></a>Markdown 基本语法</h1><p><strong>本文没有使用csdn的markdown书写，而是原语法格式显示，便于更好的理解markdown语法。</strong><br>目前本人发现的比较不错的markdown编辑器：tepora、atom、Haroopad、以及在线版的cmdMarkdown、马克飞象、Stack Edit等。<br>文章结尾附上本文的markdown形式。</p>\n<image url=\"/path/to/image\">\n\n\n<h2 id=\"一、标题\"><a href=\"#一、标题\" class=\"headerlink\" title=\"一、标题\"></a>一、标题</h2><p><code>1. 类似Setext形式，利用 = 或 - 符号，写在标题文字下一行，分别表示一级、二级 标题</code></p>\n<p>注 : =或-至少也只需要两个就好。</p>\n<p><code>2.类似Atx形式，使用 # 符号，加与标题文字前，且至少一个空格才行使用个数1～6,分别表示六级标题</code></p>\n<p>注 : 标签语言讲究对称性，标题Atx模式可以在标题后加上不定个数的#，仅为美观而已。</p>\n<p>markdown编辑文字需要有空行，才能显示为空行，而换行需要编辑时有一个空行</p>\n<p>显示才会换行。编程通则，符号输入法英文半角。</p>\n<h2 id=\"二、区块引用\"><a href=\"#二、区块引用\" class=\"headerlink\" title=\"二、区块引用\"></a>二、区块引用</h2><blockquote>\n<p>markdown使用类似email中的 &gt; 引用符号，标记区块<br>区块内的每一行都会自动添加 &gt; 符号<br>其实也可以仅在第一行使用了 &gt; 符号即可，不过有些编辑器会自动补上。</p>\n</blockquote>\n<p>但是这样的话就需要有一个空行，才能表示区块结束。若是最后一行有 &gt; 符号，<br>想要结束区块就要回车后，空一行，再回来哦，表示中断和区块编辑的联系。</p>\n<blockquote>\n<p>区块内也可以使用嵌套</p>\n<blockquote>\n<p>嵌套层级应该是没有限制的</p>\n<blockquote>\n<p>多级嵌套<br>也是挺好看的</p>\n</blockquote>\n<p>但是想要结束一个小区块，就得借助空行了。<br>不然还真的不好结束呢。外层区块与其他区块之间，<br>看来需要有非区块语法隔离才行。</p>\n</blockquote>\n</blockquote>\n<hr>\n<blockquote>\n<p>使用了一个分割线才和上面的区块分开来，空格，空行，回车都没用的哦。<br>区块内可以使用其他markdown的语法。</p>\n<h6 id=\"来个标题\"><a href=\"#来个标题\" class=\"headerlink\" title=\"来个标题\"></a>来个标题</h6><p><code>背景条幅</code></p>\n</blockquote>\n<hr>\n<p>三个—即可形成一个分割线，注意和上面文字空一行，否则就成标题了哦</p>\n<h2 id=\"三、列表\"><a href=\"#三、列表\" class=\"headerlink\" title=\"三、列表\"></a>三、列表</h2><ul>\n<li>列表分为无序列表和有序列表，可以多级列表。</li>\n</ul>\n<pre><code>- 无序列表中使用 加、减、星号\n   * 来作为开启列表的标识,均需要有一个空格才生效。或者tab也行\n</code></pre><ol>\n<li>有序列表使用数字<ol>\n<li>和英文的句号，数字不一定就要一二三的很有序。</li>\n</ol>\n</li>\n</ol>\n<ol>\n<li>显示时候都是123的。</li>\n<li>多个段落的隔开，需要每个段前tab或4空格？有点乱，感觉首列后空一行<pre><code>则每列都会空，非首列则空其后。\n</code></pre></li>\n<li>列表内使用引用符号&gt;，需要缩进<ol>\n<li>还是列表内容<blockquote>\n<p>引用，我似乎没感觉到？</p>\n</blockquote>\n</li>\n</ol>\n</li>\n</ol>\n<ol>\n<li>如果列表放入代码，该区快就要缩进两tab或8空格<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\"> System.out.pringtln(<span class=\"string\">\"代码高亮\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>1.可能无意间会写出列表形式，比如首行“2016. 09. 25”出现了数字，句点和空格<br>就会形成列表，如此可以加个\\来避免，或者其他符号。<br>注意和普通文本的编辑不同，列表的缩进，需要在列表标识符号前加空格，最多三个。<br>其后面需至少一个空格或tab</p>\n<p>2.文字段落前一个tab或4个空格，就会生成背景框。<br><code>和用``符号似乎不太一样，这个有点加黑得样子？</code></p>\n<h2 id=\"四、代码区块\"><a href=\"#四、代码区块\" class=\"headerlink\" title=\"四、代码区块\"></a>四、代码区块</h2><p>1,代码区块得建立就是面所说，一个tab或者4个空格。<br>而在带码区块中，markdown的一般语法符号，将只是普通文本。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\">    System.out.pringtln(<span class=\"string\">\"代码高亮\"</span>);</div><div class=\"line\">&#125;<span class=\"comment\">//哎呦，后面的```引号，还不到能直接放在这一行呢，否则就不算结束代码块了。</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"五、分割线\"><a href=\"#五、分割线\" class=\"headerlink\" title=\"五、分割线\"></a>五、分割线</h2><p>在一行中使用三个或以上的星号、减号、下划线，就可以显示一个分割线<br>但是需要从行首就开始,可以混用,(不同的md编辑器，也许细节不同)且不必连续，但不能掺杂文字</p>\n<hr>\n<hr>\n<hr>\n<p>而且要注意避免形成标题哦，</p>\n<hr>\n<h2 id=\"六、区段元素\"><a href=\"#六、区段元素\" class=\"headerlink\" title=\"六、区段元素\"></a>六、区段元素</h2><h4 id=\"1、链接\"><a href=\"#1、链接\" class=\"headerlink\" title=\"1、链接\"></a>1、链接</h4><p>Markdown 支持两种链接：行内式和参考式。链接文字都用[方括号]标记。</p>\n<ul>\n<li>行内式，[]后跟(url “网址标题”)即可。<br><a href=\"www.baidu.com\" title=\"百度\">baidu</a>，前面式显示网址，””内部式网址标题<ul>\n<li>似乎也可以使用路径形式,<a href=\"/server/file/\" title=\"FTP服务器\">file</a>。</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>参考式，两个[name][id]，前面为显示名称，id为标记变量名，在文章内任意文本首行位置<br>声明 [id]:www.baidu.com,即可。<br>*例如，<a href=\"www.baidu.com&quot;baidu&quot;\">百度</a>,网址在此显示，地址声明如下，<br>注意缩进什么的不要与其他语法冲突而失效。</li>\n</ul>\n<p>  此种链接内容的格式，选择性的3个空格，一个冒号，一个tab或空格，然后是网址，<br>  后面的标题title，可以用单引号，双引号，或者括号都行。<br>  注，网址可以用&lt;&gt;包括，标题可以另起一行。链接不区分大小写，字母数字，空白和标点。<br>  隐式链接标记功能，可以省略指定连接。此时视为文字为网址，[id]就空这，name等于id了。</p>\n<ul>\n<li>如<a href=\"www.google.com\">Google</a></li>\n</ul>\n<p>如此形式，name可以多单词，加空格。<br><a href=\"www.lenovo.com\">thinkpad lenovo</a>,</p>\n<p>参考式链接可以像文献引用一样，放于文后，便于整洁。</p>\n<h2 id=\"七、强调\"><a href=\"#七、强调\" class=\"headerlink\" title=\"七、强调\"></a>七、强调</h2><p>Markdown用*或_来标识强调，位于其包围内的文本，被强调显示，两个**或__,会更强吗？<br>此处为了显示单个的*而不是和后面的一起作用，用了\\做转义。</p>\n<ul>\n<li>如下<ul>\n<li><em>单个强调</em>,和<em>强调单个</em>，是加黑斜体</li>\n<li><strong>双星强调</strong>，<strong>更厉害</strong></li>\n</ul>\n<ul>\n<li><strong><strong>那么三星更厉害吗</strong></strong>,最多可用四个，但是没啥区别了。<br><strong><strong>你</strong></strong>混合失效，且符号两边不能有空格。前边的不能空？</li>\n</ul>\n</li>\n<li><em>强调单个</em></li>\n</ul>\n<ul>\n<li>删除线，<del>nihao</del></li>\n</ul>\n<h2 id=\"八、代码及符号\"><a href=\"#八、代码及符号\" class=\"headerlink\" title=\"八、代码及符号\"></a>八、代码及符号</h2><p>原来背景<code>是用来标记小行段代码的</code>，用反单引号``标记，代码写在其中。<br>要是代码内也有``符号，那么外围可以多用几个``符号<br>例如<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">___</div><div class=\"line\">使用反引号时候，紧跟代码语言，即可实现代码高亮</div><div class=\"line\">最外围的\\```  内部各加一个空格，里面的引用就可以直接一开始添加更多的\\```了</div><div class=\"line\">```  ``使用反引号</div></pre></td></tr></table></figure></p>\n<p>$$注意使用标签标识符的时候，前后的位置个数要一致，尤其小心缩进与空格的影响$$<br>$d$</p>\n<p>#d</p>\n<p>$$你好#$$</p>\n<p>$$nihao_$$</p>\n<p>$$nihao^$$</p>\n<p>$$nihao$$<br>$$nihao%$$<br>$$nihao@$$<br>$$nihao~$$<br>$$nihao{$$<br>1、markdown语法会自动规避一盒html的标签，比如&amp;，[]之类的</p>\n<h2 id=\"九、图片\"><a href=\"#九、图片\" class=\"headerlink\" title=\"九、图片\"></a>九、图片</h2><p>1、Markdown 使用和链接类似得方式处理图片，行内式和参考式，用！作为标记，加[name]和(path)</p>\n<ul>\n<li>行内式，<img src=\"/2016/09/26/Markdown基本语法/to/img1.jpg,&quot;title&quot;\" alt=\"img1\">,小心写成链接哦<img src=\"/2016/09/26/Markdown基本语法/to/img2.jpg\" alt=\"img2\"></li>\n<li>参考式，<img src=\"/2016/09/26/Markdown基本语法/to/image2.jpg\" alt=\"img2\"></li>\n</ul>\n<p>  暂时没法指定宽高，可以用html的&lt; image &gt; 标签,此处加空格，否则就不显示了。颜色字体什么的<br>  就看html的形式了。</p>\n<h2 id=\"十、其他\"><a href=\"#十、其他\" class=\"headerlink\" title=\"十、其他\"></a>十、其他</h2><p>1、自动链接，Markdown  转译简短得自动链接或邮箱<br><a href=\"http://www.baidu.com/\" target=\"_blank\" rel=\"external\">http://www.baidu.com/</a>,<a href=\"&#109;&#x61;&#105;&#108;&#x74;&#111;&#x3a;&#x6d;&#97;&#x72;&#x6b;&#100;&#x6f;&#119;&#x6e;&#x40;&#x6d;&#x6b;&#x2e;&#x63;&#110;\">&#x6d;&#97;&#x72;&#x6b;&#100;&#x6f;&#119;&#x6e;&#x40;&#x6d;&#x6b;&#x2e;&#x63;&#110;</a><br>2、反斜杠，转义符号，可用于一下符号转义为普通</p>\n<blockquote>\n<p>\\<br>`<br>*<br>_<br>{}<br>[]<br>#<br>+<br>-<br>.<br>!<br>这几种符号得转义。</p>\n</blockquote>\n<p>&lt;! html 的标签，似乎会被隐藏,不同编辑器略有不同哦，&lt;&gt; &gt;<br>空格空格加回车，才是换行符。</p>\n<text 这个标签就被隐藏了哦=\"\">\n\n\n<h3 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h3><p><strong>Markdown　Extra</strong>　表格语法：独立行开始，写title，用|分割，然后次行用－符号，并配合|，如此构成表格。</p>\n<table>\n<thead>\n<tr>\n<th>项目</th>\n<th>价格</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Computer</td>\n<td>$1600</td>\n</tr>\n<tr>\n<td>Phone</td>\n<td>$12</td>\n</tr>\n<tr>\n<td>Pipe</td>\n<td>$1</td>\n</tr>\n</tbody>\n</table>\n<p>可以使用冒号来定义对齐方式：<br>：—表示左对齐，—：表示右对齐，：—：表示居中对齐。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">项目</th>\n<th style=\"text-align:right\">价格</th>\n<th style=\"text-align:center\">数量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Computer</td>\n<td style=\"text-align:right\">1600 元</td>\n<td style=\"text-align:center\">5</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Phone</td>\n<td style=\"text-align:right\">12 元</td>\n<td style=\"text-align:center\">12</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Pipe</td>\n<td style=\"text-align:right\">1 元</td>\n<td style=\"text-align:center\">234</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>试试表格，至少要有表头和一个－标识列才行哦。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>表头</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>复选框，使用空格-/*/+空格[x]空格 项目，表示选中,类似列表选项。<ul>\n<li>[x] 第一条</li>\n<li>[ ] 第二条</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>表情，使用冒号包围表情的英文代号<ul>\n<li>猴子:monkey:,星星:stars:,:v:</li>\n<li>表情支持，见<a href=\"http://emoji.codes/\" target=\"_blank\" rel=\"external\">http://emoji.codes/</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"其他拓展\"><a href=\"#其他拓展\" class=\"headerlink\" title=\"其他拓展\"></a>其他拓展</h2><ul>\n<li><p>CSDN</p>\n<ol>\n<li>脚注，类似链接，使用[^id]声明，其他地方[^id]:解释。</li>\n<li>目录，[toc]标签</li>\n<li><p>UML图，类似代码块，不过反单引号后面申明的不是编程语言，而是图的类型</p>\n<ol>\n<li><p>如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">张三-&gt;李四: 嘿，小四儿, 写博客了没?</div><div class=\"line\">Note right of 李四: 李四愣了一下，说：</div><div class=\"line\">李四--&gt;张三: 忙得吐血，哪有时间写。</div></pre></td></tr></table></figure>\n<ol>\n<li>流程图<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">st=&gt;start: 开始</div><div class=\"line\">e=&gt;end: 结束</div><div class=\"line\">op=&gt;operation: 我的操作</div><div class=\"line\">cond=&gt;condition: 确认？</div><div class=\"line\">st-&gt;op-&gt;cond</div><div class=\"line\">cond(yes)-&gt;e</div><div class=\"line\">cond(no)-&gt;op</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><p>列表的定义与基本语法不同，使用:  项目来缩进列表项。</p>\n</li>\n<li>数学公式，如下<br>使用MathJax渲染<em>LaTex</em> 数学公式，详见[math.stackexchange.com].</li>\n</ol>\n<ul>\n<li>行内公式，数学公式为：$\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$。</li>\n<li>块级公式：<br>  $$x = \\dfrac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>Gitlab</p>\n<pre><code>1、网址直译，www.baidu.com\n\n2、文件对比，不同,使用花括号和中括号的配合\n，不能同时使用同一个哦。{+ ADD +] and [-delete-}\n3、gitlab引用，@user_name,#123,等等。\n</code></pre></li>\n</ul>\n<hr>\n<p>####CmdMarkdown <a href=\"jiaozhu\">^cmd</a></p>\n<ul>\n<li><p>高效绘制 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#7-流程图\" target=\"_blank\" rel=\"external\">流程图</a>，标识为flow</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">st=&gt;start: Start</div><div class=\"line\">op=&gt;operation: Your Operation</div><div class=\"line\">cond=&gt;condition: Yes or No?</div><div class=\"line\">e=&gt;end</div><div class=\"line\"></div><div class=\"line\">st-&gt;op-&gt;cond</div><div class=\"line\">cond(yes)-&gt;e</div><div class=\"line\">cond(no)-&gt;op</div></pre></td></tr></table></figure>\n</li>\n<li><p>高效绘制 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#8-序列图\" target=\"_blank\" rel=\"external\">序列图</a>，其标识为sequence</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Alice-&gt;Bob: Hello Bob, how are you?</div><div class=\"line\">Note right of Bob: Bob thinks</div><div class=\"line\">Bob--&gt;Alice: I am good thanks!</div></pre></td></tr></table></figure>\n<hr>\n<ul>\n<li>高效绘制 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#9-甘特图\" target=\"_blank\" rel=\"external\">甘特图</a>标识为gantt</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">title 项目开发流程</div><div class=\"line\">section 项目确定</div><div class=\"line\">    需求分析       :a1, 2016-06-22, 3d</div><div class=\"line\">    可行性报告     :after a1, 5d</div><div class=\"line\">    概念验证       : 5d</div><div class=\"line\">section 项目实施</div><div class=\"line\">    概要设计      :2016-07-05  , 5d</div><div class=\"line\">    详细设计      :2016-07-08, 10d</div><div class=\"line\">    编码          :2016-07-15, 10d</div><div class=\"line\">    测试          :2016-07-22, 5d</div><div class=\"line\">section 发布验收</div><div class=\"line\">    发布: 2d</div><div class=\"line\">    验收: 3d</div></pre></td></tr></table></figure>\n<p>注：markdown可以直接使用许多html的标签，用于更为丰富的界面显示哦。<br>本人记录Markdown 语法用于个人学习，难免有疏漏，请读者见谅指点<br>本文参考<a href=\"http://www.appinn.com/markdown/\" target=\"_blank\" rel=\"external\"><em>Markdown</em>语法</a>,在此感谢。</p>\n</text></image>","excerpt":"","more":"<h1 id=\"Markdown-基本语法\"><a href=\"#Markdown-基本语法\" class=\"headerlink\" title=\"Markdown 基本语法\"></a>Markdown 基本语法</h1><p><strong>本文没有使用csdn的markdown书写，而是原语法格式显示，便于更好的理解markdown语法。</strong><br>目前本人发现的比较不错的markdown编辑器：tepora、atom、Haroopad、以及在线版的cmdMarkdown、马克飞象、Stack Edit等。<br>文章结尾附上本文的markdown形式。</p>\n<image url=\"/path/to/image\">\n\n\n<h2 id=\"一、标题\"><a href=\"#一、标题\" class=\"headerlink\" title=\"一、标题\"></a>一、标题</h2><p><code>1. 类似Setext形式，利用 = 或 - 符号，写在标题文字下一行，分别表示一级、二级 标题</code></p>\n<p>注 : =或-至少也只需要两个就好。</p>\n<p><code>2.类似Atx形式，使用 # 符号，加与标题文字前，且至少一个空格才行使用个数1～6,分别表示六级标题</code></p>\n<p>注 : 标签语言讲究对称性，标题Atx模式可以在标题后加上不定个数的#，仅为美观而已。</p>\n<p>markdown编辑文字需要有空行，才能显示为空行，而换行需要编辑时有一个空行</p>\n<p>显示才会换行。编程通则，符号输入法英文半角。</p>\n<h2 id=\"二、区块引用\"><a href=\"#二、区块引用\" class=\"headerlink\" title=\"二、区块引用\"></a>二、区块引用</h2><blockquote>\n<p>markdown使用类似email中的 &gt; 引用符号，标记区块<br>区块内的每一行都会自动添加 &gt; 符号<br>其实也可以仅在第一行使用了 &gt; 符号即可，不过有些编辑器会自动补上。</p>\n</blockquote>\n<p>但是这样的话就需要有一个空行，才能表示区块结束。若是最后一行有 &gt; 符号，<br>想要结束区块就要回车后，空一行，再回来哦，表示中断和区块编辑的联系。</p>\n<blockquote>\n<p>区块内也可以使用嵌套</p>\n<blockquote>\n<p>嵌套层级应该是没有限制的</p>\n<blockquote>\n<p>多级嵌套<br>也是挺好看的</p>\n</blockquote>\n<p>但是想要结束一个小区块，就得借助空行了。<br>不然还真的不好结束呢。外层区块与其他区块之间，<br>看来需要有非区块语法隔离才行。</p>\n</blockquote>\n</blockquote>\n<hr>\n<blockquote>\n<p>使用了一个分割线才和上面的区块分开来，空格，空行，回车都没用的哦。<br>区块内可以使用其他markdown的语法。</p>\n<h6 id=\"来个标题\"><a href=\"#来个标题\" class=\"headerlink\" title=\"来个标题\"></a>来个标题</h6><p><code>背景条幅</code></p>\n</blockquote>\n<hr>\n<p>三个—即可形成一个分割线，注意和上面文字空一行，否则就成标题了哦</p>\n<h2 id=\"三、列表\"><a href=\"#三、列表\" class=\"headerlink\" title=\"三、列表\"></a>三、列表</h2><ul>\n<li>列表分为无序列表和有序列表，可以多级列表。</li>\n</ul>\n<pre><code>- 无序列表中使用 加、减、星号\n   * 来作为开启列表的标识,均需要有一个空格才生效。或者tab也行\n</code></pre><ol>\n<li>有序列表使用数字<ol>\n<li>和英文的句号，数字不一定就要一二三的很有序。</li>\n</ol>\n</li>\n</ol>\n<ol>\n<li>显示时候都是123的。</li>\n<li>多个段落的隔开，需要每个段前tab或4空格？有点乱，感觉首列后空一行<pre><code>则每列都会空，非首列则空其后。\n</code></pre></li>\n<li>列表内使用引用符号&gt;，需要缩进<ol>\n<li>还是列表内容<blockquote>\n<p>引用，我似乎没感觉到？</p>\n</blockquote>\n</li>\n</ol>\n</li>\n</ol>\n<ol>\n<li>如果列表放入代码，该区快就要缩进两tab或8空格<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\"> System.out.pringtln(<span class=\"string\">\"代码高亮\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>1.可能无意间会写出列表形式，比如首行“2016. 09. 25”出现了数字，句点和空格<br>就会形成列表，如此可以加个\\来避免，或者其他符号。<br>注意和普通文本的编辑不同，列表的缩进，需要在列表标识符号前加空格，最多三个。<br>其后面需至少一个空格或tab</p>\n<p>2.文字段落前一个tab或4个空格，就会生成背景框。<br><code>和用``符号似乎不太一样，这个有点加黑得样子？</code></p>\n<h2 id=\"四、代码区块\"><a href=\"#四、代码区块\" class=\"headerlink\" title=\"四、代码区块\"></a>四、代码区块</h2><p>1,代码区块得建立就是面所说，一个tab或者4个空格。<br>而在带码区块中，markdown的一般语法符号，将只是普通文本。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\">    System.out.pringtln(<span class=\"string\">\"代码高亮\"</span>);</div><div class=\"line\">&#125;<span class=\"comment\">//哎呦，后面的```引号，还不到能直接放在这一行呢，否则就不算结束代码块了。</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"五、分割线\"><a href=\"#五、分割线\" class=\"headerlink\" title=\"五、分割线\"></a>五、分割线</h2><p>在一行中使用三个或以上的星号、减号、下划线，就可以显示一个分割线<br>但是需要从行首就开始,可以混用,(不同的md编辑器，也许细节不同)且不必连续，但不能掺杂文字</p>\n<hr>\n<hr>\n<hr>\n<p>而且要注意避免形成标题哦，</p>\n<hr>\n<h2 id=\"六、区段元素\"><a href=\"#六、区段元素\" class=\"headerlink\" title=\"六、区段元素\"></a>六、区段元素</h2><h4 id=\"1、链接\"><a href=\"#1、链接\" class=\"headerlink\" title=\"1、链接\"></a>1、链接</h4><p>Markdown 支持两种链接：行内式和参考式。链接文字都用[方括号]标记。</p>\n<ul>\n<li>行内式，[]后跟(url “网址标题”)即可。<br><a href=\"www.baidu.com\" title=\"百度\">baidu</a>，前面式显示网址，””内部式网址标题<ul>\n<li>似乎也可以使用路径形式,<a href=\"/server/file/\" title=\"FTP服务器\">file</a>。</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>参考式，两个[name][id]，前面为显示名称，id为标记变量名，在文章内任意文本首行位置<br>声明 [id]:www.baidu.com,即可。<br>*例如，<a href=\"www.baidu.com&quot;baidu&quot;\">百度</a>,网址在此显示，地址声明如下，<br>注意缩进什么的不要与其他语法冲突而失效。</li>\n</ul>\n<p>  此种链接内容的格式，选择性的3个空格，一个冒号，一个tab或空格，然后是网址，<br>  后面的标题title，可以用单引号，双引号，或者括号都行。<br>  注，网址可以用&lt;&gt;包括，标题可以另起一行。链接不区分大小写，字母数字，空白和标点。<br>  隐式链接标记功能，可以省略指定连接。此时视为文字为网址，[id]就空这，name等于id了。</p>\n<ul>\n<li>如<a href=\"www.google.com\">Google</a></li>\n</ul>\n<p>如此形式，name可以多单词，加空格。<br><a href=\"www.lenovo.com\">thinkpad lenovo</a>,</p>\n<p>参考式链接可以像文献引用一样，放于文后，便于整洁。</p>\n<h2 id=\"七、强调\"><a href=\"#七、强调\" class=\"headerlink\" title=\"七、强调\"></a>七、强调</h2><p>Markdown用*或_来标识强调，位于其包围内的文本，被强调显示，两个**或__,会更强吗？<br>此处为了显示单个的*而不是和后面的一起作用，用了\\做转义。</p>\n<ul>\n<li>如下<ul>\n<li><em>单个强调</em>,和<em>强调单个</em>，是加黑斜体</li>\n<li><strong>双星强调</strong>，<strong>更厉害</strong></li>\n</ul>\n<ul>\n<li><strong><strong>那么三星更厉害吗</strong></strong>,最多可用四个，但是没啥区别了。<br><strong><strong>你</strong></strong>混合失效，且符号两边不能有空格。前边的不能空？</li>\n</ul>\n</li>\n<li><em>强调单个</em></li>\n</ul>\n<ul>\n<li>删除线，<del>nihao</del></li>\n</ul>\n<h2 id=\"八、代码及符号\"><a href=\"#八、代码及符号\" class=\"headerlink\" title=\"八、代码及符号\"></a>八、代码及符号</h2><p>原来背景<code>是用来标记小行段代码的</code>，用反单引号``标记，代码写在其中。<br>要是代码内也有``符号，那么外围可以多用几个``符号<br>例如<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">___</div><div class=\"line\">使用反引号时候，紧跟代码语言，即可实现代码高亮</div><div class=\"line\">最外围的\\```  内部各加一个空格，里面的引用就可以直接一开始添加更多的\\```了</div><div class=\"line\">```  ``使用反引号</div></pre></td></tr></table></figure></p>\n<p>$$注意使用标签标识符的时候，前后的位置个数要一致，尤其小心缩进与空格的影响$$<br>$d$</p>\n<p>#d</p>\n<p>$$你好#$$</p>\n<p>$$nihao_$$</p>\n<p>$$nihao^$$</p>\n<p>$$nihao$$<br>$$nihao%$$<br>$$nihao@$$<br>$$nihao~$$<br>$$nihao{$$<br>1、markdown语法会自动规避一盒html的标签，比如&amp;，[]之类的</p>\n<h2 id=\"九、图片\"><a href=\"#九、图片\" class=\"headerlink\" title=\"九、图片\"></a>九、图片</h2><p>1、Markdown 使用和链接类似得方式处理图片，行内式和参考式，用！作为标记，加[name]和(path)</p>\n<ul>\n<li>行内式，<img src=\"/2016/09/26/Markdown基本语法/to/img1.jpg,&quot;title&quot;\" alt=\"img1\">,小心写成链接哦<img src=\"/2016/09/26/Markdown基本语法/to/img2.jpg\" alt=\"img2\"></li>\n<li>参考式，<img src=\"/2016/09/26/Markdown基本语法/to/image2.jpg\" alt=\"img2\"></li>\n</ul>\n<p>  暂时没法指定宽高，可以用html的&lt; image &gt; 标签,此处加空格，否则就不显示了。颜色字体什么的<br>  就看html的形式了。</p>\n<h2 id=\"十、其他\"><a href=\"#十、其他\" class=\"headerlink\" title=\"十、其他\"></a>十、其他</h2><p>1、自动链接，Markdown  转译简短得自动链接或邮箱<br><a href=\"http://www.baidu.com/\">http://www.baidu.com/</a>,<a href=\"&#109;&#x61;&#105;&#108;&#x74;&#111;&#x3a;&#x6d;&#97;&#x72;&#x6b;&#100;&#x6f;&#119;&#x6e;&#x40;&#x6d;&#x6b;&#x2e;&#x63;&#110;\">&#x6d;&#97;&#x72;&#x6b;&#100;&#x6f;&#119;&#x6e;&#x40;&#x6d;&#x6b;&#x2e;&#x63;&#110;</a><br>2、反斜杠，转义符号，可用于一下符号转义为普通</p>\n<blockquote>\n<p>\\<br>`<br>*<br>_<br>{}<br>[]<br>#<br>+<br>-<br>.<br>!<br>这几种符号得转义。</p>\n</blockquote>\n<p>&lt;! html 的标签，似乎会被隐藏,不同编辑器略有不同哦，&lt;&gt; &gt;<br>空格空格加回车，才是换行符。</p>\n<text 这个标签就被隐藏了哦=\"\">\n\n\n<h3 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h3><p><strong>Markdown　Extra</strong>　表格语法：独立行开始，写title，用|分割，然后次行用－符号，并配合|，如此构成表格。</p>\n<table>\n<thead>\n<tr>\n<th>项目</th>\n<th>价格</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Computer</td>\n<td>$1600</td>\n</tr>\n<tr>\n<td>Phone</td>\n<td>$12</td>\n</tr>\n<tr>\n<td>Pipe</td>\n<td>$1</td>\n</tr>\n</tbody>\n</table>\n<p>可以使用冒号来定义对齐方式：<br>：—表示左对齐，—：表示右对齐，：—：表示居中对齐。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">项目</th>\n<th style=\"text-align:right\">价格</th>\n<th style=\"text-align:center\">数量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Computer</td>\n<td style=\"text-align:right\">1600 元</td>\n<td style=\"text-align:center\">5</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Phone</td>\n<td style=\"text-align:right\">12 元</td>\n<td style=\"text-align:center\">12</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Pipe</td>\n<td style=\"text-align:right\">1 元</td>\n<td style=\"text-align:center\">234</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>试试表格，至少要有表头和一个－标识列才行哦。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>表头</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>复选框，使用空格-/*/+空格[x]空格 项目，表示选中,类似列表选项。<ul>\n<li>[x] 第一条</li>\n<li>[ ] 第二条</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>表情，使用冒号包围表情的英文代号<ul>\n<li>猴子:monkey:,星星:stars:,:v:</li>\n<li>表情支持，见<a href=\"http://emoji.codes/\">http://emoji.codes/</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"其他拓展\"><a href=\"#其他拓展\" class=\"headerlink\" title=\"其他拓展\"></a>其他拓展</h2><ul>\n<li><p>CSDN</p>\n<ol>\n<li>脚注，类似链接，使用[^id]声明，其他地方[^id]:解释。</li>\n<li>目录，[toc]标签</li>\n<li><p>UML图，类似代码块，不过反单引号后面申明的不是编程语言，而是图的类型</p>\n<ol>\n<li><p>如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">张三-&gt;李四: 嘿，小四儿, 写博客了没?</div><div class=\"line\">Note right of 李四: 李四愣了一下，说：</div><div class=\"line\">李四--&gt;张三: 忙得吐血，哪有时间写。</div></pre></td></tr></table></figure>\n<ol>\n<li>流程图<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">st=&gt;start: 开始</div><div class=\"line\">e=&gt;end: 结束</div><div class=\"line\">op=&gt;operation: 我的操作</div><div class=\"line\">cond=&gt;condition: 确认？</div><div class=\"line\">st-&gt;op-&gt;cond</div><div class=\"line\">cond(yes)-&gt;e</div><div class=\"line\">cond(no)-&gt;op</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><p>列表的定义与基本语法不同，使用:  项目来缩进列表项。</p>\n</li>\n<li>数学公式，如下<br>使用MathJax渲染<em>LaTex</em> 数学公式，详见[math.stackexchange.com].</li>\n</ol>\n<ul>\n<li>行内公式，数学公式为：$\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$。</li>\n<li>块级公式：<br>  $$x = \\dfrac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>Gitlab</p>\n<pre><code>1、网址直译，www.baidu.com\n\n2、文件对比，不同,使用花括号和中括号的配合\n，不能同时使用同一个哦。{+ ADD +] and [-delete-}\n3、gitlab引用，@user_name,#123,等等。\n</code></pre></li>\n</ul>\n<hr>\n<p>####CmdMarkdown <a href=\"jiaozhu\">^cmd</a></p>\n<ul>\n<li><p>高效绘制 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#7-流程图\">流程图</a>，标识为flow</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">st=&gt;start: Start</div><div class=\"line\">op=&gt;operation: Your Operation</div><div class=\"line\">cond=&gt;condition: Yes or No?</div><div class=\"line\">e=&gt;end</div><div class=\"line\"></div><div class=\"line\">st-&gt;op-&gt;cond</div><div class=\"line\">cond(yes)-&gt;e</div><div class=\"line\">cond(no)-&gt;op</div></pre></td></tr></table></figure>\n</li>\n<li><p>高效绘制 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#8-序列图\">序列图</a>，其标识为sequence</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Alice-&gt;Bob: Hello Bob, how are you?</div><div class=\"line\">Note right of Bob: Bob thinks</div><div class=\"line\">Bob--&gt;Alice: I am good thanks!</div></pre></td></tr></table></figure>\n<hr>\n<ul>\n<li>高效绘制 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#9-甘特图\">甘特图</a>标识为gantt</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">title 项目开发流程</div><div class=\"line\">section 项目确定</div><div class=\"line\">    需求分析       :a1, 2016-06-22, 3d</div><div class=\"line\">    可行性报告     :after a1, 5d</div><div class=\"line\">    概念验证       : 5d</div><div class=\"line\">section 项目实施</div><div class=\"line\">    概要设计      :2016-07-05  , 5d</div><div class=\"line\">    详细设计      :2016-07-08, 10d</div><div class=\"line\">    编码          :2016-07-15, 10d</div><div class=\"line\">    测试          :2016-07-22, 5d</div><div class=\"line\">section 发布验收</div><div class=\"line\">    发布: 2d</div><div class=\"line\">    验收: 3d</div></pre></td></tr></table></figure>\n<p>注：markdown可以直接使用许多html的标签，用于更为丰富的界面显示哦。<br>本人记录Markdown 语法用于个人学习，难免有疏漏，请读者见谅指点<br>本文参考<a href=\"http://www.appinn.com/markdown/\"><em>Markdown</em>语法</a>,在此感谢。</p>\n</text></image>"},{"title":"Markdown语法简要","date":"2016-10-27T12:57:00.000Z","author":"冰路梦","_content":"# Markdown语法简要\n\n<!-- TOC -->\n\n- [Markdown语法简要](#markdown语法简要)\n         - [1. 标题](#1-标题)\n         - [2. 区块引用](#2-区块引用)\n         - [3. 分割线](#3-分割线)\n         - [4. 背景框](#4-背景框)\n\n<!-- /TOC -->\n####1. 标题\n\n-    `#`标题，1--6级别，atx风格，效果：\n\n     ###### 标题6\n\n- `=`或`-`似乎只有一个级别，setext风格，效果\n\n         标题\n         ===<font color=\"#ff0000\">**csdn不支持**</font>\n\n\n#### 2. 区块引用\n\n   `>`行首位置,可嵌套，效果：\n   > 段落引用块\n   > > 内部嵌套\n\n####3. 分割线\n分割线用 `---`、`___`和`***`三个加、减、下划线，注意不要和标题的一种形式混淆。效果：\n\n   ---\n\n####4. 背景框\n```   ``  ```反引号构成背景框。效果，`背景框`\n\n####5. 列表\n有无和无序。\n\n- `-`、`+`、`*`符号位于行首，紧跟空格。有序列表只是用数字替代前述符号，数字不要求有序。效果：\n- 无序列\n   6. 有序\n   7. 有序\n\n####6. 代码块\n\n   `使用三对反引号```java  ```从行首起，中间写代码，可在三引号后声明代码语言，实现高亮`，效果：\n```java\n\tpublic void test(){\n\t//注释\n\t}\n```\n\n####7. 链接\n\n-  行内式，格式`[name](url,\"title\")`，效果：\n     [Markdown语法](http://blog.csdn.net/binglumeng/article/details/52668151)\n- 参考式，格式`[name][id]`，文章他处声明id，`[id]:url`，效果：\n         [Markdown语法][md]\n- 自动链接`< >`其中直接写网址，或者邮箱，需要有http://同类的，或@符号。效果：\n     <https://google.com>,<markdown@md.com>\n- 网址直译，www.google.com， <font color=\"#ff0000\">**csdn不支持**</font>\n\n####8. 强调\n\n-  使用一对`**`或`__`表示强调，被强调文本在其中。一对`**`或`__`是斜体\n\n   两对是粗体，三对是斜体加粗。效果：\n   _斜体_，**粗体**，***粗斜体***\n\n- 两对`~~~~`表示删除线，包裹文本。\n\n   效果：~~删除~~\n\n- 两对`====`之间高亮\n\n  效果：==高亮==\n\n- `<u></u>`之间下划线\n\n  效果：<u>下划线</u>\n\n#### 9.  符号\n\n参照第18条，其实用于数学公式更多。\n\n   一对`$$`符号，文本其中可以斜体，两对`$$$$`文本其中，居中斜体。还会有编号。(刚明白，是数学公式常用。)\n\n-  在`$$`或`$$$$`之中的文本，其首尾处有`~`产生空格；\n- 文本首尾有`#`、`{`、`}`、`&`会出现黑色边框，且包含前述符号。\n   - `^`、`_`在文本尾部效果如上，在起始出，则分别表示上下角标。\n   - `%`隐藏%号后面内容。\n\n   `\\`符号可以转义其他符号。自定义的标签`<info>`之类可能被隐藏。\n   效果：\n      一对美元符号：$one$\n      两对美元符号：$$two$$\n      带边框：$frame_$\n      上角标：$^up$，下角标$_low$\n      隐藏：`$注意百分号后面%没有了$`\n      $注意百分号后面%没有了$\n####10. 图片\n\n    类似链接，行内式和参考式\n\n- 行内式，`![name](path)`\n- 参考式，`![name][image]`，id定义其他地方[image]:image\\path\n    - 效果：![img](https://assets-cdn.github.com/images/modules/about/about-header.jpg)\n    - ![githubj][img1]\n[img1]:http://leanote.com/public/upload/536/56ac79afab64417926004444/images/logo/48c077cb768ce98ce2cacb41a3cc63b2.jpg\n\n####11. 表格\n\n    行首开始，写title，`|`符号表示分栏，减号`-`表示列宽。格式为首行写title，次行写对齐方式。至少形成表头才是表格。两列一行。\n\n```\n学号|姓名\n-|\n有的必须每行前后都要有|符号\n```\n\n- `:---`左对齐\n\n- `---:`右对齐\n\n- `:---:`居中\n\n- `---`默认对齐方式，左对齐。\n\n- 效果：第二列只有两个`|`也能分三栏\n\n  ​\n\n  | 学号   | 姓名   | 成绩   |\n  | ---- | ---- | ---- |\n  |      |      |      |\n\n  ​\n\n#### 12. 复选框\n\n    使用列表的符号，加减星，或数字，配合空格、x、和[ ]符号\n\n```java\n格式为`+或-或*`空格`[空格或x]`空格，列表内容。其中x、X都行。\n```\n效果：\n\n- [ ] 第一项\n- [x] 第二项\n\n#### 13. 表情符号\n\n    格式，一对`::`中加emoji英文代码，如:monkey:，[emoji](http://emoji.codes)\n:monkey:,:star:,:girl:\n####14. 脚注\n\n    格式`[^id]`符号，文章尾或其他处声明。`[^id]:注解`\n    效果：脚注[^footer]\n####15. 目录\n\n    格式，`[toc]`符号，效果见文章目录。\n#### 16. UML类图\n\n    格式，类似代码块，三反引号`    ```sequence  ```       `声明sequence后，单行写交互语句。\n\n​    \n    ​```A->B:hello//A对B\n    note left of B:what?//B思考,\n    B-->A:ok//B回复A，虚线。\n    ​```\n    \n    效果：\n\n```sequence\nA->B: hello\nNote right of B: what?\nB-->A:ok\n```\n\n#### 17.流程图：\n\n    类似UML图，语言标签为`flow`，用`=>`表路线，有对应代码标识。以后在慢慢整理，`先定义标签再使用操作？`\n\n    ​```java\n      ```flow\n      st=>start: 开始\n      e=>end: 结束\n      op=>operation: 我的操作\n      cond=>condition: 确认？\n      st->op->cond\n      cond(yes)->e\n      cond(no)->op\n    ​```\n    ​```\n\n效果：\n\n```flow\nst=>start: 开始\ne=>end: 结束\nop=>operation: 我的操作\ncond=>condition: 确认？\nst->op->cond\ncond(yes)->e\ncond(no)->op\n```\n\n#### 18. 甘特图：\n\n    类似代码块，语言标识`gantt`，有语法，以后慢慢总结。\n\n```gantt\n​```gantt\n    title 项目开发流程//标题\n    section 项目确定//项目阶段\n        需求分析       :a1, 2016-06-22, 3d//任务名称，日期线和时长\n        可行性报告     :after a1, 5d\n        概念验证       : 5d\n    section 项目实施\n        概要设计      :2016-07-05  , 5d\n        详细设计      :2016-07-08, 10d\n        编码          :2016-07-15, 10d\n        测试          :2016-07-22, 5d\n    section 发布验收\n        发布: 2d\n        验收: 3d\n​```\n```\n\n```gantt\n\ttitle 项目开发流程\n        section 项目确定\n            需求分析       :a1, 2016-06-22, 3d\n            可行性报告     :after a1, 5d\n            概念验证       : 5d\n        section 项目实施\n            概要设计      :2016-07-05  , 5d\n            详细设计      :2016-07-08, 10d\n            编码          :2016-07-15, 10d\n            测试          :2016-07-22, 5d\n        section 发布验收\n            发布: 2d\n            验收: 3d\n```\n\n#### 19. 数学公式：\n\n    markdown多使用LaTex数学公式，用`$`和`$$`符号标识\n\n- 行内公式，`$\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$`\n\n效果：$\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$\n\n- 块级公式，`$$x = \\dfrac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$`\n\n效果：$$x = \\dfrac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$\n\n\n*附注：本文所列举markdown语法，适合大部分markdown编辑器，仍有个别功能属增强功能，读者请留心。*\n**注意：各个语法效果之间，需要有空行，避免相互干扰。（有的编辑器会自动给你处理，有的却不会。）**\n\n*附上较详细的[markdown语法文本](http://blog.csdn.net/binglumeng/article/details/52668151)*\n[md]:http://blog.csdn.net/binglumeng/article/details/52668151\n[^footer]: 脚注\n\n","source":"_posts/Markdown语法简要.md","raw":"---\ntitle: \"Markdown语法简要\"\ndate: 2016-10-27 20:57\nauthor: 冰路梦\ntag:\n\t- Markdown\ncategories:\n\t- 编程相关\n---\n# Markdown语法简要\n\n<!-- TOC -->\n\n- [Markdown语法简要](#markdown语法简要)\n         - [1. 标题](#1-标题)\n         - [2. 区块引用](#2-区块引用)\n         - [3. 分割线](#3-分割线)\n         - [4. 背景框](#4-背景框)\n\n<!-- /TOC -->\n####1. 标题\n\n-    `#`标题，1--6级别，atx风格，效果：\n\n     ###### 标题6\n\n- `=`或`-`似乎只有一个级别，setext风格，效果\n\n         标题\n         ===<font color=\"#ff0000\">**csdn不支持**</font>\n\n\n#### 2. 区块引用\n\n   `>`行首位置,可嵌套，效果：\n   > 段落引用块\n   > > 内部嵌套\n\n####3. 分割线\n分割线用 `---`、`___`和`***`三个加、减、下划线，注意不要和标题的一种形式混淆。效果：\n\n   ---\n\n####4. 背景框\n```   ``  ```反引号构成背景框。效果，`背景框`\n\n####5. 列表\n有无和无序。\n\n- `-`、`+`、`*`符号位于行首，紧跟空格。有序列表只是用数字替代前述符号，数字不要求有序。效果：\n- 无序列\n   6. 有序\n   7. 有序\n\n####6. 代码块\n\n   `使用三对反引号```java  ```从行首起，中间写代码，可在三引号后声明代码语言，实现高亮`，效果：\n```java\n\tpublic void test(){\n\t//注释\n\t}\n```\n\n####7. 链接\n\n-  行内式，格式`[name](url,\"title\")`，效果：\n     [Markdown语法](http://blog.csdn.net/binglumeng/article/details/52668151)\n- 参考式，格式`[name][id]`，文章他处声明id，`[id]:url`，效果：\n         [Markdown语法][md]\n- 自动链接`< >`其中直接写网址，或者邮箱，需要有http://同类的，或@符号。效果：\n     <https://google.com>,<markdown@md.com>\n- 网址直译，www.google.com， <font color=\"#ff0000\">**csdn不支持**</font>\n\n####8. 强调\n\n-  使用一对`**`或`__`表示强调，被强调文本在其中。一对`**`或`__`是斜体\n\n   两对是粗体，三对是斜体加粗。效果：\n   _斜体_，**粗体**，***粗斜体***\n\n- 两对`~~~~`表示删除线，包裹文本。\n\n   效果：~~删除~~\n\n- 两对`====`之间高亮\n\n  效果：==高亮==\n\n- `<u></u>`之间下划线\n\n  效果：<u>下划线</u>\n\n#### 9.  符号\n\n参照第18条，其实用于数学公式更多。\n\n   一对`$$`符号，文本其中可以斜体，两对`$$$$`文本其中，居中斜体。还会有编号。(刚明白，是数学公式常用。)\n\n-  在`$$`或`$$$$`之中的文本，其首尾处有`~`产生空格；\n- 文本首尾有`#`、`{`、`}`、`&`会出现黑色边框，且包含前述符号。\n   - `^`、`_`在文本尾部效果如上，在起始出，则分别表示上下角标。\n   - `%`隐藏%号后面内容。\n\n   `\\`符号可以转义其他符号。自定义的标签`<info>`之类可能被隐藏。\n   效果：\n      一对美元符号：$one$\n      两对美元符号：$$two$$\n      带边框：$frame_$\n      上角标：$^up$，下角标$_low$\n      隐藏：`$注意百分号后面%没有了$`\n      $注意百分号后面%没有了$\n####10. 图片\n\n    类似链接，行内式和参考式\n\n- 行内式，`![name](path)`\n- 参考式，`![name][image]`，id定义其他地方[image]:image\\path\n    - 效果：![img](https://assets-cdn.github.com/images/modules/about/about-header.jpg)\n    - ![githubj][img1]\n[img1]:http://leanote.com/public/upload/536/56ac79afab64417926004444/images/logo/48c077cb768ce98ce2cacb41a3cc63b2.jpg\n\n####11. 表格\n\n    行首开始，写title，`|`符号表示分栏，减号`-`表示列宽。格式为首行写title，次行写对齐方式。至少形成表头才是表格。两列一行。\n\n```\n学号|姓名\n-|\n有的必须每行前后都要有|符号\n```\n\n- `:---`左对齐\n\n- `---:`右对齐\n\n- `:---:`居中\n\n- `---`默认对齐方式，左对齐。\n\n- 效果：第二列只有两个`|`也能分三栏\n\n  ​\n\n  | 学号   | 姓名   | 成绩   |\n  | ---- | ---- | ---- |\n  |      |      |      |\n\n  ​\n\n#### 12. 复选框\n\n    使用列表的符号，加减星，或数字，配合空格、x、和[ ]符号\n\n```java\n格式为`+或-或*`空格`[空格或x]`空格，列表内容。其中x、X都行。\n```\n效果：\n\n- [ ] 第一项\n- [x] 第二项\n\n#### 13. 表情符号\n\n    格式，一对`::`中加emoji英文代码，如:monkey:，[emoji](http://emoji.codes)\n:monkey:,:star:,:girl:\n####14. 脚注\n\n    格式`[^id]`符号，文章尾或其他处声明。`[^id]:注解`\n    效果：脚注[^footer]\n####15. 目录\n\n    格式，`[toc]`符号，效果见文章目录。\n#### 16. UML类图\n\n    格式，类似代码块，三反引号`    ```sequence  ```       `声明sequence后，单行写交互语句。\n\n​    \n    ​```A->B:hello//A对B\n    note left of B:what?//B思考,\n    B-->A:ok//B回复A，虚线。\n    ​```\n    \n    效果：\n\n```sequence\nA->B: hello\nNote right of B: what?\nB-->A:ok\n```\n\n#### 17.流程图：\n\n    类似UML图，语言标签为`flow`，用`=>`表路线，有对应代码标识。以后在慢慢整理，`先定义标签再使用操作？`\n\n    ​```java\n      ```flow\n      st=>start: 开始\n      e=>end: 结束\n      op=>operation: 我的操作\n      cond=>condition: 确认？\n      st->op->cond\n      cond(yes)->e\n      cond(no)->op\n    ​```\n    ​```\n\n效果：\n\n```flow\nst=>start: 开始\ne=>end: 结束\nop=>operation: 我的操作\ncond=>condition: 确认？\nst->op->cond\ncond(yes)->e\ncond(no)->op\n```\n\n#### 18. 甘特图：\n\n    类似代码块，语言标识`gantt`，有语法，以后慢慢总结。\n\n```gantt\n​```gantt\n    title 项目开发流程//标题\n    section 项目确定//项目阶段\n        需求分析       :a1, 2016-06-22, 3d//任务名称，日期线和时长\n        可行性报告     :after a1, 5d\n        概念验证       : 5d\n    section 项目实施\n        概要设计      :2016-07-05  , 5d\n        详细设计      :2016-07-08, 10d\n        编码          :2016-07-15, 10d\n        测试          :2016-07-22, 5d\n    section 发布验收\n        发布: 2d\n        验收: 3d\n​```\n```\n\n```gantt\n\ttitle 项目开发流程\n        section 项目确定\n            需求分析       :a1, 2016-06-22, 3d\n            可行性报告     :after a1, 5d\n            概念验证       : 5d\n        section 项目实施\n            概要设计      :2016-07-05  , 5d\n            详细设计      :2016-07-08, 10d\n            编码          :2016-07-15, 10d\n            测试          :2016-07-22, 5d\n        section 发布验收\n            发布: 2d\n            验收: 3d\n```\n\n#### 19. 数学公式：\n\n    markdown多使用LaTex数学公式，用`$`和`$$`符号标识\n\n- 行内公式，`$\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$`\n\n效果：$\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$\n\n- 块级公式，`$$x = \\dfrac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$`\n\n效果：$$x = \\dfrac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$\n\n\n*附注：本文所列举markdown语法，适合大部分markdown编辑器，仍有个别功能属增强功能，读者请留心。*\n**注意：各个语法效果之间，需要有空行，避免相互干扰。（有的编辑器会自动给你处理，有的却不会。）**\n\n*附上较详细的[markdown语法文本](http://blog.csdn.net/binglumeng/article/details/52668151)*\n[md]:http://blog.csdn.net/binglumeng/article/details/52668151\n[^footer]: 脚注\n\n","slug":"Markdown语法简要","published":1,"updated":"2017-03-31T02:57:24.996Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0xj1nf0000hscow7th7jdnm","content":"<h1 id=\"Markdown语法简要\"><a href=\"#Markdown语法简要\" class=\"headerlink\" title=\"Markdown语法简要\"></a>Markdown语法简要</h1><!-- TOC -->\n<ul>\n<li><a href=\"#markdown语法简要\">Markdown语法简要</a><pre><code>- [1. 标题](#1-标题)\n- [2. 区块引用](#2-区块引用)\n- [3. 分割线](#3-分割线)\n- [4. 背景框](#4-背景框)\n</code></pre></li>\n</ul>\n<!-- /TOC -->\n<p>####1. 标题</p>\n<ul>\n<li><p><code>#</code>标题，1–6级别，atx风格，效果：</p>\n<h6 id=\"标题6\"><a href=\"#标题6\" class=\"headerlink\" title=\"标题6\"></a>标题6</h6></li>\n<li><p><code>=</code>或<code>-</code>似乎只有一个级别，setext风格，效果</p>\n<pre><code>标题\n===&lt;font color=&quot;#ff0000&quot;&gt;**csdn不支持**&lt;/font&gt;\n</code></pre></li>\n</ul>\n<h4 id=\"2-区块引用\"><a href=\"#2-区块引用\" class=\"headerlink\" title=\"2. 区块引用\"></a>2. 区块引用</h4><p>   <code>&gt;</code>行首位置,可嵌套，效果：</p>\n<blockquote>\n<p>段落引用块</p>\n<blockquote>\n<p>内部嵌套</p>\n</blockquote>\n</blockquote>\n<p>####3. 分割线<br>分割线用 <code>---</code>、<code>___</code>和<code>***</code>三个加、减、下划线，注意不要和标题的一种形式混淆。效果：</p>\n<hr>\n<p>####4. 背景框<br><figure class=\"highlight plain\"><figcaption><span>```反引号构成背景框。效果，`背景框`</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">####5. 列表</div><div class=\"line\">有无和无序。</div><div class=\"line\"></div><div class=\"line\">- `-`、`+`、`*`符号位于行首，紧跟空格。有序列表只是用数字替代前述符号，数字不要求有序。效果：</div><div class=\"line\">- 无序列</div><div class=\"line\">   6. 有序</div><div class=\"line\">   7. 有序</div><div class=\"line\"></div><div class=\"line\">####6. 代码块</div><div class=\"line\"></div><div class=\"line\">   `使用三对反引号```java  ```从行首起，中间写代码，可在三引号后声明代码语言，实现高亮`，效果：</div><div class=\"line\">```java</div><div class=\"line\">\tpublic void test()&#123;</div><div class=\"line\">\t//注释</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure></p>\n<p>####7. 链接</p>\n<ul>\n<li>行内式，格式<code>[name](url,&quot;title&quot;)</code>，效果：<br>  <a href=\"http://blog.csdn.net/binglumeng/article/details/52668151\" target=\"_blank\" rel=\"external\">Markdown语法</a></li>\n<li>参考式，格式<code>[name][id]</code>，文章他处声明id，<code>[id]:url</code>，效果：<pre><code>[Markdown语法][md]\n</code></pre></li>\n<li>自动链接<code>&lt; &gt;</code>其中直接写网址，或者邮箱，需要有<a href=\"http://同类的，或@符号。效果：\" target=\"_blank\" rel=\"external\">http://同类的，或@符号。效果：</a><br>   <a href=\"https://google.com\" target=\"_blank\" rel=\"external\">https://google.com</a>,<a href=\"&#x6d;&#97;&#105;&#x6c;&#116;&#x6f;&#58;&#x6d;&#x61;&#x72;&#107;&#x64;&#111;&#119;&#x6e;&#x40;&#109;&#x64;&#46;&#99;&#x6f;&#x6d;\">&#x6d;&#x61;&#x72;&#107;&#x64;&#111;&#119;&#x6e;&#x40;&#109;&#x64;&#46;&#99;&#x6f;&#x6d;</a></li>\n<li>网址直译，www.google.com， <font color=\"#ff0000\"><strong>csdn不支持</strong></font></li>\n</ul>\n<p>####8. 强调</p>\n<ul>\n<li><p>使用一对<code>**</code>或<code>__</code>表示强调，被强调文本在其中。一对<code>**</code>或<code>__</code>是斜体</p>\n<p>两对是粗体，三对是斜体加粗。效果：<br><em>斜体</em>，<strong>粗体</strong>，<strong><em>粗斜体</em></strong></p>\n</li>\n<li><p>两对<code>~~~~</code>表示删除线，包裹文本。</p>\n<p> 效果：<del>删除</del></p>\n</li>\n<li><p>两对<code>====</code>之间高亮</p>\n<p>效果：==高亮==</p>\n</li>\n<li><p><code>&lt;u&gt;&lt;/u&gt;</code>之间下划线</p>\n<p>效果：<u>下划线</u></p>\n</li>\n</ul>\n<h4 id=\"9-符号\"><a href=\"#9-符号\" class=\"headerlink\" title=\"9.  符号\"></a>9.  符号</h4><p>参照第18条，其实用于数学公式更多。</p>\n<p>   一对<code>$$</code>符号，文本其中可以斜体，两对<code>$$$$</code>文本其中，居中斜体。还会有编号。(刚明白，是数学公式常用。)</p>\n<ul>\n<li>在<code>$$</code>或<code>$$$$</code>之中的文本，其首尾处有<code>~</code>产生空格；</li>\n<li><p>文本首尾有<code>#</code>、<code>{</code>、<code>}</code>、<code>&amp;</code>会出现黑色边框，且包含前述符号。</p>\n<ul>\n<li><code>^</code>、<code>_</code>在文本尾部效果如上，在起始出，则分别表示上下角标。</li>\n<li><p><code>%</code>隐藏%号后面内容。</p>\n<p><code>\\</code>符号可以转义其他符号。自定义的标签<code>&lt;info&gt;</code>之类可能被隐藏。<br>效果：<br> 一对美元符号：$one$<br> 两对美元符号：$$two$$<br> 带边框：$frame_$<br> 上角标：$^up$，下角标$_low$<br> 隐藏：<code>$注意百分号后面%没有了$</code><br> $注意百分号后面%没有了$<br>####10. 图片</p>\n<p>类似链接，行内式和参考式</p>\n</li>\n</ul>\n</li>\n<li><p>行内式，<code>![name](path)</code></p>\n</li>\n<li>参考式，<code>![name][image]</code>，id定义其他地方[image]:image\\path<ul>\n<li>效果：<img src=\"https://assets-cdn.github.com/images/modules/about/about-header.jpg\" alt=\"img\"></li>\n<li><img src=\"http://leanote.com/public/upload/536/56ac79afab64417926004444/images/logo/48c077cb768ce98ce2cacb41a3cc63b2.jpg\" alt=\"githubj\"></li>\n</ul>\n</li>\n</ul>\n<p>####11. 表格</p>\n<pre><code>行首开始，写title，`|`符号表示分栏，减号`-`表示列宽。格式为首行写title，次行写对齐方式。至少形成表头才是表格。两列一行。\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">学号|姓名</div><div class=\"line\">-|</div><div class=\"line\">有的必须每行前后都要有|符号</div></pre></td></tr></table></figure>\n<ul>\n<li><p><code>:---</code>左对齐</p>\n</li>\n<li><p><code>---:</code>右对齐</p>\n</li>\n<li><p><code>:---:</code>居中</p>\n</li>\n<li><p><code>---</code>默认对齐方式，左对齐。</p>\n</li>\n<li><p>效果：第二列只有两个<code>|</code>也能分三栏</p>\n<p>​</p>\n<p>| 学号   | 姓名   | 成绩   |<br>| —- | —- | —- |<br>|      |      |      |</p>\n<p>​</p>\n</li>\n</ul>\n<h4 id=\"12-复选框\"><a href=\"#12-复选框\" class=\"headerlink\" title=\"12. 复选框\"></a>12. 复选框</h4><pre><code>使用列表的符号，加减星，或数字，配合空格、x、和[ ]符号\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">格式为`+或-或*`空格`[空格或x]`空格，列表内容。其中x、X都行。</div></pre></td></tr></table></figure>\n<p>效果：</p>\n<ul>\n<li>[ ] 第一项</li>\n<li>[x] 第二项</li>\n</ul>\n<h4 id=\"13-表情符号\"><a href=\"#13-表情符号\" class=\"headerlink\" title=\"13. 表情符号\"></a>13. 表情符号</h4><pre><code>格式，一对`::`中加emoji英文代码，如:monkey:，[emoji](http://emoji.codes)\n</code></pre><p>:monkey:,:star:,:girl:</p>\n<p>####14. 脚注</p>\n<pre><code>格式`[^id]`符号，文章尾或其他处声明。`[^id]:注解`\n效果：脚注[^footer]\n</code></pre><p>####15. 目录</p>\n<pre><code>格式，`[toc]`符号，效果见文章目录。\n</code></pre><h4 id=\"16-UML类图\"><a href=\"#16-UML类图\" class=\"headerlink\" title=\"16. UML类图\"></a>16. UML类图</h4><pre><code>格式，类似代码块，三反引号`    <figure class=\"highlight plain\"><figcaption><span>```       `声明sequence后，单行写交互语句。</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">​    </div><div class=\"line\">    ​```A-&gt;B:hello//A对B</div><div class=\"line\">    note left of B:what?//B思考,</div><div class=\"line\">    B--&gt;A:ok//B回复A，虚线。</div><div class=\"line\">    ​</div></pre></td></tr></table></figure>\n\n\n效果：\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">A-&gt;B: hello</div><div class=\"line\">Note right of B: what?</div><div class=\"line\">B--&gt;A:ok</div></pre></td></tr></table></figure>\n<h4 id=\"17-流程图：\"><a href=\"#17-流程图：\" class=\"headerlink\" title=\"17.流程图：\"></a>17.流程图：</h4><pre><code>类似UML图，语言标签为`flow`，用`=&gt;`表路线，有对应代码标识。以后在慢慢整理，`先定义标签再使用操作？`\n\n​<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">  ```flow</div><div class=\"line\">  st=&gt;start: 开始</div><div class=\"line\">  e=&gt;end: 结束</div><div class=\"line\">  op=&gt;operation: 我的操作</div><div class=\"line\">  cond=&gt;condition: 确认？</div><div class=\"line\">  st-&gt;op-&gt;<span class=\"function\">cond</span></div><div class=\"line\">  <span class=\"title\">cond</span><span class=\"params\">(yes)</span>-&gt;e</div><div class=\"line\">  <span class=\"title\">cond</span><span class=\"params\">(no)</span>-&gt;op</div><div class=\"line\">​</div></pre></td></tr></table></figure>\n\n​<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">效果：</div><div class=\"line\"></div><div class=\"line\">```flow</div><div class=\"line\">st=&gt;start: 开始</div><div class=\"line\">e=&gt;end: 结束</div><div class=\"line\">op=&gt;operation: 我的操作</div><div class=\"line\">cond=&gt;condition: 确认？</div><div class=\"line\">st-&gt;op-&gt;cond</div><div class=\"line\">cond(yes)-&gt;e</div><div class=\"line\">cond(no)-&gt;op</div></pre></td></tr></table></figure>\n</code></pre><h4 id=\"18-甘特图：\"><a href=\"#18-甘特图：\" class=\"headerlink\" title=\"18. 甘特图：\"></a>18. 甘特图：</h4><pre><code>类似代码块，语言标识`gantt`，有语法，以后慢慢总结。\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">​```gantt</div><div class=\"line\">    title 项目开发流程//标题</div><div class=\"line\">    section 项目确定//项目阶段</div><div class=\"line\">        需求分析       :a1, 2016-06-22, 3d//任务名称，日期线和时长</div><div class=\"line\">        可行性报告     :after a1, 5d</div><div class=\"line\">        概念验证       : 5d</div><div class=\"line\">    section 项目实施</div><div class=\"line\">        概要设计      :2016-07-05  , 5d</div><div class=\"line\">        详细设计      :2016-07-08, 10d</div><div class=\"line\">        编码          :2016-07-15, 10d</div><div class=\"line\">        测试          :2016-07-22, 5d</div><div class=\"line\">    section 发布验收</div><div class=\"line\">        发布: 2d</div><div class=\"line\">        验收: 3d</div><div class=\"line\">​</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">```gantt</div><div class=\"line\">\ttitle 项目开发流程</div><div class=\"line\">        section 项目确定</div><div class=\"line\">            需求分析       :a1, 2016-06-22, 3d</div><div class=\"line\">            可行性报告     :after a1, 5d</div><div class=\"line\">            概念验证       : 5d</div><div class=\"line\">        section 项目实施</div><div class=\"line\">            概要设计      :2016-07-05  , 5d</div><div class=\"line\">            详细设计      :2016-07-08, 10d</div><div class=\"line\">            编码          :2016-07-15, 10d</div><div class=\"line\">            测试          :2016-07-22, 5d</div><div class=\"line\">        section 发布验收</div><div class=\"line\">            发布: 2d</div><div class=\"line\">            验收: 3d</div></pre></td></tr></table></figure>\n<h4 id=\"19-数学公式：\"><a href=\"#19-数学公式：\" class=\"headerlink\" title=\"19. 数学公式：\"></a>19. 数学公式：</h4><pre><code>markdown多使用LaTex数学公式，用`$`和`$$`符号标识\n</code></pre><ul>\n<li>行内公式，<code>$\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$</code></li>\n</ul>\n<p>效果：$\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$</p>\n<ul>\n<li>块级公式，<code>$$x = \\dfrac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$</code></li>\n</ul>\n<p>效果：$$x = \\dfrac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$</p>\n<p><em>附注：本文所列举markdown语法，适合大部分markdown编辑器，仍有个别功能属增强功能，读者请留心。</em><br><strong>注意：各个语法效果之间，需要有空行，避免相互干扰。（有的编辑器会自动给你处理，有的却不会。）</strong></p>\n<p><em>附上较详细的<a href=\"http://blog.csdn.net/binglumeng/article/details/52668151\" target=\"_blank\" rel=\"external\">markdown语法文本</a></em></p>\n","excerpt":"","more":"<h1 id=\"Markdown语法简要\"><a href=\"#Markdown语法简要\" class=\"headerlink\" title=\"Markdown语法简要\"></a>Markdown语法简要</h1><!-- TOC -->\n<ul>\n<li><a href=\"#markdown语法简要\">Markdown语法简要</a><pre><code>- [1. 标题](#1-标题)\n- [2. 区块引用](#2-区块引用)\n- [3. 分割线](#3-分割线)\n- [4. 背景框](#4-背景框)\n</code></pre></li>\n</ul>\n<!-- /TOC -->\n<p>####1. 标题</p>\n<ul>\n<li><p><code>#</code>标题，1–6级别，atx风格，效果：</p>\n<h6 id=\"标题6\"><a href=\"#标题6\" class=\"headerlink\" title=\"标题6\"></a>标题6</h6></li>\n<li><p><code>=</code>或<code>-</code>似乎只有一个级别，setext风格，效果</p>\n<pre><code>标题\n===&lt;font color=&quot;#ff0000&quot;&gt;**csdn不支持**&lt;/font&gt;\n</code></pre></li>\n</ul>\n<h4 id=\"2-区块引用\"><a href=\"#2-区块引用\" class=\"headerlink\" title=\"2. 区块引用\"></a>2. 区块引用</h4><p>   <code>&gt;</code>行首位置,可嵌套，效果：</p>\n<blockquote>\n<p>段落引用块</p>\n<blockquote>\n<p>内部嵌套</p>\n</blockquote>\n</blockquote>\n<p>####3. 分割线<br>分割线用 <code>---</code>、<code>___</code>和<code>***</code>三个加、减、下划线，注意不要和标题的一种形式混淆。效果：</p>\n<hr>\n<p>####4. 背景框<br><figure class=\"highlight plain\"><figcaption><span>```反引号构成背景框。效果，`背景框`</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">####5. 列表</div><div class=\"line\">有无和无序。</div><div class=\"line\"></div><div class=\"line\">- `-`、`+`、`*`符号位于行首，紧跟空格。有序列表只是用数字替代前述符号，数字不要求有序。效果：</div><div class=\"line\">- 无序列</div><div class=\"line\">   6. 有序</div><div class=\"line\">   7. 有序</div><div class=\"line\"></div><div class=\"line\">####6. 代码块</div><div class=\"line\"></div><div class=\"line\">   `使用三对反引号```java  ```从行首起，中间写代码，可在三引号后声明代码语言，实现高亮`，效果：</div><div class=\"line\">```java</div><div class=\"line\">\tpublic void test()&#123;</div><div class=\"line\">\t//注释</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure></p>\n<p>####7. 链接</p>\n<ul>\n<li>行内式，格式<code>[name](url,&quot;title&quot;)</code>，效果：<br>  <a href=\"http://blog.csdn.net/binglumeng/article/details/52668151\">Markdown语法</a></li>\n<li>参考式，格式<code>[name][id]</code>，文章他处声明id，<code>[id]:url</code>，效果：<pre><code>[Markdown语法][md]\n</code></pre></li>\n<li>自动链接<code>&lt; &gt;</code>其中直接写网址，或者邮箱，需要有<a href=\"http://同类的，或@符号。效果：\">http://同类的，或@符号。效果：</a><br>   <a href=\"https://google.com\">https://google.com</a>,<a href=\"&#x6d;&#97;&#105;&#x6c;&#116;&#x6f;&#58;&#x6d;&#x61;&#x72;&#107;&#x64;&#111;&#119;&#x6e;&#x40;&#109;&#x64;&#46;&#99;&#x6f;&#x6d;\">&#x6d;&#x61;&#x72;&#107;&#x64;&#111;&#119;&#x6e;&#x40;&#109;&#x64;&#46;&#99;&#x6f;&#x6d;</a></li>\n<li>网址直译，www.google.com， <font color=\"#ff0000\"><strong>csdn不支持</strong></font></li>\n</ul>\n<p>####8. 强调</p>\n<ul>\n<li><p>使用一对<code>**</code>或<code>__</code>表示强调，被强调文本在其中。一对<code>**</code>或<code>__</code>是斜体</p>\n<p>两对是粗体，三对是斜体加粗。效果：<br><em>斜体</em>，<strong>粗体</strong>，<strong><em>粗斜体</em></strong></p>\n</li>\n<li><p>两对<code>~~~~</code>表示删除线，包裹文本。</p>\n<p> 效果：<del>删除</del></p>\n</li>\n<li><p>两对<code>====</code>之间高亮</p>\n<p>效果：==高亮==</p>\n</li>\n<li><p><code>&lt;u&gt;&lt;/u&gt;</code>之间下划线</p>\n<p>效果：<u>下划线</u></p>\n</li>\n</ul>\n<h4 id=\"9-符号\"><a href=\"#9-符号\" class=\"headerlink\" title=\"9.  符号\"></a>9.  符号</h4><p>参照第18条，其实用于数学公式更多。</p>\n<p>   一对<code>$$</code>符号，文本其中可以斜体，两对<code>$$$$</code>文本其中，居中斜体。还会有编号。(刚明白，是数学公式常用。)</p>\n<ul>\n<li>在<code>$$</code>或<code>$$$$</code>之中的文本，其首尾处有<code>~</code>产生空格；</li>\n<li><p>文本首尾有<code>#</code>、<code>{</code>、<code>}</code>、<code>&amp;</code>会出现黑色边框，且包含前述符号。</p>\n<ul>\n<li><code>^</code>、<code>_</code>在文本尾部效果如上，在起始出，则分别表示上下角标。</li>\n<li><p><code>%</code>隐藏%号后面内容。</p>\n<p><code>\\</code>符号可以转义其他符号。自定义的标签<code>&lt;info&gt;</code>之类可能被隐藏。<br>效果：<br> 一对美元符号：$one$<br> 两对美元符号：$$two$$<br> 带边框：$frame_$<br> 上角标：$^up$，下角标$_low$<br> 隐藏：<code>$注意百分号后面%没有了$</code><br> $注意百分号后面%没有了$<br>####10. 图片</p>\n<p>类似链接，行内式和参考式</p>\n</li>\n</ul>\n</li>\n<li><p>行内式，<code>![name](path)</code></p>\n</li>\n<li>参考式，<code>![name][image]</code>，id定义其他地方[image]:image\\path<ul>\n<li>效果：<img src=\"https://assets-cdn.github.com/images/modules/about/about-header.jpg\" alt=\"img\"></li>\n<li><img src=\"http://leanote.com/public/upload/536/56ac79afab64417926004444/images/logo/48c077cb768ce98ce2cacb41a3cc63b2.jpg\" alt=\"githubj\"></li>\n</ul>\n</li>\n</ul>\n<p>####11. 表格</p>\n<pre><code>行首开始，写title，`|`符号表示分栏，减号`-`表示列宽。格式为首行写title，次行写对齐方式。至少形成表头才是表格。两列一行。\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">学号|姓名</div><div class=\"line\">-|</div><div class=\"line\">有的必须每行前后都要有|符号</div></pre></td></tr></table></figure>\n<ul>\n<li><p><code>:---</code>左对齐</p>\n</li>\n<li><p><code>---:</code>右对齐</p>\n</li>\n<li><p><code>:---:</code>居中</p>\n</li>\n<li><p><code>---</code>默认对齐方式，左对齐。</p>\n</li>\n<li><p>效果：第二列只有两个<code>|</code>也能分三栏</p>\n<p>​</p>\n<p>| 学号   | 姓名   | 成绩   |<br>| —- | —- | —- |<br>|      |      |      |</p>\n<p>​</p>\n</li>\n</ul>\n<h4 id=\"12-复选框\"><a href=\"#12-复选框\" class=\"headerlink\" title=\"12. 复选框\"></a>12. 复选框</h4><pre><code>使用列表的符号，加减星，或数字，配合空格、x、和[ ]符号\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">格式为`+或-或*`空格`[空格或x]`空格，列表内容。其中x、X都行。</div></pre></td></tr></table></figure>\n<p>效果：</p>\n<ul>\n<li>[ ] 第一项</li>\n<li>[x] 第二项</li>\n</ul>\n<h4 id=\"13-表情符号\"><a href=\"#13-表情符号\" class=\"headerlink\" title=\"13. 表情符号\"></a>13. 表情符号</h4><pre><code>格式，一对`::`中加emoji英文代码，如:monkey:，[emoji](http://emoji.codes)\n</code></pre><p>:monkey:,:star:,:girl:</p>\n<p>####14. 脚注</p>\n<pre><code>格式`[^id]`符号，文章尾或其他处声明。`[^id]:注解`\n效果：脚注[^footer]\n</code></pre><p>####15. 目录</p>\n<pre><code>格式，`[toc]`符号，效果见文章目录。\n</code></pre><h4 id=\"16-UML类图\"><a href=\"#16-UML类图\" class=\"headerlink\" title=\"16. UML类图\"></a>16. UML类图</h4><pre><code>格式，类似代码块，三反引号`    <figure class=\"highlight plain\"><figcaption><span>```       `声明sequence后，单行写交互语句。</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">​    </div><div class=\"line\">    ​```A-&gt;B:hello//A对B</div><div class=\"line\">    note left of B:what?//B思考,</div><div class=\"line\">    B--&gt;A:ok//B回复A，虚线。</div><div class=\"line\">    ​</div></pre></td></tr></table></figure>\n\n\n效果：\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">A-&gt;B: hello</div><div class=\"line\">Note right of B: what?</div><div class=\"line\">B--&gt;A:ok</div></pre></td></tr></table></figure>\n<h4 id=\"17-流程图：\"><a href=\"#17-流程图：\" class=\"headerlink\" title=\"17.流程图：\"></a>17.流程图：</h4><pre><code>类似UML图，语言标签为`flow`，用`=&gt;`表路线，有对应代码标识。以后在慢慢整理，`先定义标签再使用操作？`\n\n​<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">  ```flow</div><div class=\"line\">  st=&gt;start: 开始</div><div class=\"line\">  e=&gt;end: 结束</div><div class=\"line\">  op=&gt;operation: 我的操作</div><div class=\"line\">  cond=&gt;condition: 确认？</div><div class=\"line\">  st-&gt;op-&gt;<span class=\"function\">cond</span></div><div class=\"line\">  <span class=\"title\">cond</span><span class=\"params\">(yes)</span>-&gt;e</div><div class=\"line\">  <span class=\"title\">cond</span><span class=\"params\">(no)</span>-&gt;op</div><div class=\"line\">​</div></pre></td></tr></table></figure>\n\n​<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">效果：</div><div class=\"line\"></div><div class=\"line\">```flow</div><div class=\"line\">st=&gt;start: 开始</div><div class=\"line\">e=&gt;end: 结束</div><div class=\"line\">op=&gt;operation: 我的操作</div><div class=\"line\">cond=&gt;condition: 确认？</div><div class=\"line\">st-&gt;op-&gt;cond</div><div class=\"line\">cond(yes)-&gt;e</div><div class=\"line\">cond(no)-&gt;op</div></pre></td></tr></table></figure>\n</code></pre><h4 id=\"18-甘特图：\"><a href=\"#18-甘特图：\" class=\"headerlink\" title=\"18. 甘特图：\"></a>18. 甘特图：</h4><pre><code>类似代码块，语言标识`gantt`，有语法，以后慢慢总结。\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">​```gantt</div><div class=\"line\">    title 项目开发流程//标题</div><div class=\"line\">    section 项目确定//项目阶段</div><div class=\"line\">        需求分析       :a1, 2016-06-22, 3d//任务名称，日期线和时长</div><div class=\"line\">        可行性报告     :after a1, 5d</div><div class=\"line\">        概念验证       : 5d</div><div class=\"line\">    section 项目实施</div><div class=\"line\">        概要设计      :2016-07-05  , 5d</div><div class=\"line\">        详细设计      :2016-07-08, 10d</div><div class=\"line\">        编码          :2016-07-15, 10d</div><div class=\"line\">        测试          :2016-07-22, 5d</div><div class=\"line\">    section 发布验收</div><div class=\"line\">        发布: 2d</div><div class=\"line\">        验收: 3d</div><div class=\"line\">​</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">```gantt</div><div class=\"line\">\ttitle 项目开发流程</div><div class=\"line\">        section 项目确定</div><div class=\"line\">            需求分析       :a1, 2016-06-22, 3d</div><div class=\"line\">            可行性报告     :after a1, 5d</div><div class=\"line\">            概念验证       : 5d</div><div class=\"line\">        section 项目实施</div><div class=\"line\">            概要设计      :2016-07-05  , 5d</div><div class=\"line\">            详细设计      :2016-07-08, 10d</div><div class=\"line\">            编码          :2016-07-15, 10d</div><div class=\"line\">            测试          :2016-07-22, 5d</div><div class=\"line\">        section 发布验收</div><div class=\"line\">            发布: 2d</div><div class=\"line\">            验收: 3d</div></pre></td></tr></table></figure>\n<h4 id=\"19-数学公式：\"><a href=\"#19-数学公式：\" class=\"headerlink\" title=\"19. 数学公式：\"></a>19. 数学公式：</h4><pre><code>markdown多使用LaTex数学公式，用`$`和`$$`符号标识\n</code></pre><ul>\n<li>行内公式，<code>$\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$</code></li>\n</ul>\n<p>效果：$\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$</p>\n<ul>\n<li>块级公式，<code>$$x = \\dfrac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$</code></li>\n</ul>\n<p>效果：$$x = \\dfrac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$</p>\n<p><em>附注：本文所列举markdown语法，适合大部分markdown编辑器，仍有个别功能属增强功能，读者请留心。</em><br><strong>注意：各个语法效果之间，需要有空行，避免相互干扰。（有的编辑器会自动给你处理，有的却不会。）</strong></p>\n<p><em>附上较详细的<a href=\"http://blog.csdn.net/binglumeng/article/details/52668151\">markdown语法文本</a></em></p>\n"},{"title":"Shell学习笔记","date":"2016-11-18T11:37:00.000Z","author":"冰路梦","_content":"\n# Shell学习笔记\n\n<!-- TOC -->\n\n- [Shell学习笔记](#shell学习笔记)\n    - [简介：](#简介)\n    - [Shell教程入门](#shell教程入门)\n        - [1、shell脚本](#1shell脚本)\n        - [2、shell脚本实践](#2shell脚本实践)\n    - [Shell变量](#shell变量)\n        - [1、使用变量](#1使用变量)\n        - [2、只读变量](#2只读变量)\n        - [3、删除变量](#3删除变量)\n        - [4、变量类型](#4变量类型)\n        - [5、shell字符串](#5shell字符串)\n        - [6、Shell数组](#6shell数组)\n        - [7、Shell注释](#7shell注释)\n    - [Shell传递参数](#shell传递参数)\n        - [1、实例](#1实例)\n    - [Shell数组](#shell数组)\n    - [Shell运算符](#shell运算符)\n        - [1、算术运算符](#1算术运算符)\n        - [2、关系运算符](#2关系运算符)\n        - [3、布尔运算符](#3布尔运算符)\n        - [4、逻辑运算符](#4逻辑运算符)\n        - [5、字符串运算符](#5字符串运算符)\n        - [6、文件测试运算符](#6文件测试运算符)\n    - [Shell echo命令](#shell-echo命令)\n    - [Shell printf命令](#shell-printf命令)\n    - [Shell text命令](#shell-text命令)\n    - [Shell 流程控制](#shell-流程控制)\n        - [1、if else](#1if-else)\n        - [2、for循环](#2for循环)\n        - [3、while语句](#3while语句)\n        - [4、无限循环](#4无限循环)\n        - [5、until循环](#5until循环)\n        - [6、case](#6case)\n        - [7、跳出循环](#7跳出循环)\n        - [8、esac](#8esac)\n    - [Shell函数](#shell函数)\n    - [Shell 输入/输出重定向](#shell-输入输出重定向)\n        - [1、输出重定向](#1输出重定向)\n        - [2、输入重定向](#2输入重定向)\n        - [3、重定向深入讲解](#3重定向深入讲解)\n        - [4、Here Document](#4here-document)\n        - [5、/dev/null文件](#5devnull文件)\n    - [Shell文件包含](#shell文件包含)\n\n<!-- /TOC -->\n\n## 简介：\n\nShell 是一个用C语言编写的程序，它是用户使用Linux的桥梁。Shell既是一种命令语言，又是一种程序设计语言。\n\nShell 是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的服务。\n\nKen Thompson的sh是第一种Unix Shell，Windows Explorer是一个典型的图形界面Shell。\n\n## Shell教程入门\n\n### 1、shell脚本\n\n> shell脚本`shell script`，是一种为shell而编写的脚本程序。然而通常所说的shell却是指shell脚本，而非shell本身。\n\nLinux系统shell种类众多，常用的有`sh`和`bash`。\n\n### 2、shell脚本实践\n\nshell脚本用`#!/bin/bash`或`#!/bin/sh`之类的方式，制定运行脚本的shell,`#!`是识别符号。\n\n```sh\n#!/bin/sh\necho \"Hello World\"\n```\n\n**运行shell脚本的两种方法：**\n\n- 作为可执行程序\n\n  将shell文本保存为`.sh`格式文件，赋予执行权限\n\n  ```sh\n  chmod + x ./test.sh # 赋予可执行权限\n  ./test.sh #执行脚本，注意此处需要指明当前目录下的test.sh哦，不然会去path路径找的，呵呵。\n  ```\n\n- 作为解释其参数\n\n  直接解释运行,如此就不用写`#!/bin/sh`之类的引用注释了。\n\n  ```sh\n  /bin/sh test.sh\n  # 类似java、php、python脚本\n  /bin/php test.php\n  ```\n\n## Shell变量\n\n变量命名语法，不需要`$`符号，php需要。命名要求：\n\n- 首字母必须字母`a-z或A-Z`\n- 不能空格，可用`_`\n- 不能标点\n- 不能使用`bash`关键字\n\n```sh\n#注意，不同于其他编程语言，等号之间不要有空格。\nyour_variable=\"your,name\"\n```\n\n```shell\n# 使用语句给变量赋值，如下循环显示出/etc目录下的文件名\nfor file in 'ls /etc'\n```\n\n### 1、使用变量\n\n使用已定义变量，只需在变量前加`$`符号即可：\n\n```shell\nyour_variable='yourname'\necho $your_variable\necho $(your_variable)\n```\n\n变量名可以加`{}`来标识变量名的范围，如：\n\n```sh\nfor skill in Ada Coffe Action Java; do\n\techo \"I am good at ${skill}Script\"\ndone\n```\n\n*如果不加`{}`，`skill`就可能被认为`skillScript`而导致变量找不到*\n\n已定义的变量可重新定义：\n\n```sh\nyour_name=\"tom\"\necho $your_name\nyour_name=\"john\"\necho $your_name\n```\n\n### 2、只读变量\n\n使用`readonly`命令将变量只读，则不可再改变，否则报错。\n\n```sh\n#!/bin/bash\nmyUrl=\"http://www.w3cschool.cc\"\nreadonly myUrl\nmyUrl=\"new url\" #此处就会报错，因为变量只读了。\n```\n\n### 3、删除变量\n\n使用`unset`命令删除变量：\n\n```sh\nunset variable_name\n```\n\n==删除变量后不能再用，而`unset`不能删除只读变量==\n\n```sh\n#!/bin/sh\nmyUrl=\"http://www.google.com\"\nunset myUrl\necho $myUrl #此时输出就没接过了，因为变量被删除了。\n```\n\n### 4、变量类型\n\n运行shell时，会同时存在三种变量：\n\n- 局部变量：脚本中定义的变量，仅作用于本shell脚本内。\n- 环境变量：所有程序，包括shell启动程序都能访问的环境变量。\n- shell变量：shell程序的特殊变量。\n\n### 5、shell字符串\n\nshell常用`number`和`string`，其中`string`可以单引号、双引号或者不用引号。但是略有区别：\n\n- 单引号\n\n  ```sh\n  str='string test'\n  ```\n\n  单引号`''`之间的字符原样输出，里面的变量也会失效。其内部不能再有单引号，哪怕转义符号都失效。\n\n- 双引号\n\n  ```shell\n  your_name='your name'\n  str=\"Hello ,world ,\\\"$your_name\\\"! \\n\"\n  ```\n\n  双引号里面可以有变量，可以有转义符号。\n\n- 字符串拼接\n\n  ```sh\n  n1=\"abc\"\n  test=\"hello, \"$n1\" !\"\n  test1=\"hello, ${n1} !\"\n  echo $test $test1\n  ```\n\n- 获取字符串长度\n\n  使用`#`标识变量长度\n\n  ```sh\n  str=\"abcdef\"\n  #输出字符串长度\n  echo ${#str} \n  ```\n\n- 获取子字符串\n\n  ```sh\n  str=\"abcdef\"\n  #下标从左至右，0开始，\n  echo ${str:1:4}\n  ```\n\n- 查找子字符串\n\n  使用\\`符号\n\n  ```sh\n  str=\"hello world nihaome\"\n  #查找字符i或s的位置,反引号\n  echo `expr index \"$str\" is`\n  ```\n\n### 6、Shell数组\n\nbash仅支持一维数组，可利用下标或表达式操作元素。\n\n- 定义数组\n\n  shell中使用`()`表示数组，元素用空格来分割。\n\n  ```sh\n  array=(1 2 3 4 5 6 7)\n  #或者\n  array=(\n  a\n  b\n  c\n  )\n  #也可以单独定义,下标可以不连续，也无范围限制。\n  array[0]=1\n  array[1]=2\n  array[3]=7\n  ```\n\n- 读取数组\n\n  ```sh\n  variable=${array[index]}\n  # @符号代替index表示获取所有元素\n  echo ${variable[@]}\n  ```\n\n- 获取数组长度\n\n  类似字符串的获取\n\n  ```sh\n  #获取元素个数\n  length=${#array_name[@]}\n  #或者*通配符\n  length=${#array_name[*]}\n  #获取数组单个元素的长度\n  length_n=${#array_name[n]}\n  ```\n\n### 7、Shell注释\n\n使用`#`至于行首，表示该行注释，shell无多行注释，只能每行都`#`\n\n```sh\n#-----------------------\n#我是个多行注释\n#但是只能这么写\n#-----------------------\n```\n\n要是多行代码需要注释，可以将定义为函数，加`{}`包裹起来，该函数不被调用，则类似于注释掉。\n\n## Shell传递参数\n\n在执行shell脚本时，可以向脚本传递参数，脚本内获取参数的格式：`$n`，n代表数字编号，为脚本内需要获取的参数的编号。\n\n### 1、实例\n\n示例向脚本传递三个参数，并输出，`$0`为执行文件名：\n\n```shell\n#!/bin/bash\n#传参测试\n\necho \"Shell 传参测试\";\necho \"file name: $0\";\necho \"first variable: $1\";\necho \"second variable: $2\"\necho \"third variable: $3\";\n```\n\n通过赋予权限，或者指定执行，可实现输出：\n\n```shell\n$ chmod +x test.sh\n# $符号在次表示root用户执行，下面是传入1，2，3，三个数到脚本\n$ ./test.sh 1 2 3 \n\n#输出结果：\nShell 传参测试\nfile name: ./test.sh\nfirst variable: 1\nsecond variable 2\nthird variable 3\n```\n\n另有几个特殊字符处理参数：\n\n| 参数处理 | 说明                         |\n| ---- | -------------------------- |\n| $#   | 传递到脚本的参数的个数                |\n| $*   | 以一个单字符串显示所有向脚本传递的参数。       |\n| $$   | 脚本运行的当前进程ID号               |\n| $!   | 后台运行的最后一个进程的ID号            |\n| $@   | 类似$*，使用时许加引号，并在引号中返回每个参数。  |\n| $-   | 显示shell使用的当前选选项，类似`set`命令  |\n| $?   | 显示最后命令的退出状态。0 表示无错误。其他都是错。 |\n\n```sh\n#!/bin/sh\n\necho \"Shell 传递参数实例！\";\necho \"第一个参数为：$1\";\n\necho \"参数个数为：$#\";\necho \"传递的参数作为一个字符串显示：$*\";\n```\n\n执行效果：\n\n```shell\n$ chmod +x test.sh \n$ ./test.sh 1 2 3\nShell 传递参数实例！\n第一个参数为：1\n参数个数为：3\n传递的参数作为一个字符串显示：1 2 3\n```\n\n`$*`与`$@`的异同：\n\n- 都是应用所有参数\n\n- 不同：只有在双引号中体现。假设在脚本运行时写了三个参数 1、2、3，，则 \" * \" 等价于 \"1 2 3\"（传递了一个参数），而 \"@\" 等价于 \"1\" \"2\" \"3\"（传递了三个参数）。\n\n  ```sh\n  #!/bin/bash\n\n  echo \"-- \\$* demo ---\"\n  for i in \"$*\";do\n  \techo $i\n  done\n\n  echo \"-- \\$@ demo ---\"\n  for i in \"$@\"; do\n  \techo $i\n  done\n  ```\n\n  执行效果：\n\n  ```shell\n  $ chmod +x test.sh \n  $ ./test.sh 1 2 3\n  -- $* 演示 ---\n  1 2 3\n  -- $@ 演示 ---\n  1\n  2\n  3\n  ```\n\n## Shell数组\n\nBash shell仅支持一维数组，不限定大小，初始化时候不需要指定大小。下标0开始，`()`包裹，空格分割元素。\n\n```shell\narray=(a b c d)\n```\n\n- 读取数组\n\n  格式`${array[index]}`\n\n```shell\n#!/bin/bash\nmy_array=(a b \"c\" d)\n\necho \"first: ${my_array[0]}\"\n\n#然后执行文件，获得输出结果\n#可用@或*来代替index获取所有元素\n```\n\n- 数组长度\n\n  类似字符串的长度获取\n\n  ```shell\n  ${#array[index]}\n  ```\n\n## Shell运算符\n\nshell支持多种运算符：\n\n- 算数运算符\n- 关系运算符\n- 布尔运算符\n- 字符串运算符\n- 文件测试运算符\n\n原生Bash不支持简单的数学运算，可以用`awk`和`expr`实现。\n\n```sh\n#!/bin/sh\n\nval=`expr 2 + 2`\necho $val\n\n#注意，expr用反引号，表达式和运算符之间必须有空格，2+2就不行。\n```\n\n### 1、算术运算符\n\n若a = 10，b = 20\n\n| 运算符  | 说明               | 举例                             |\n| ---- | ---------------- | ------------------------------ |\n| +    | 加号               | \\`expr \\$a + \\$b\\`，result = 30 |\n| -    | 减号               | \\`expr \\$a - \\$b`，result = -10 |\n| *    | 乘号               | \\`expr \\$a * \\$b`，result = 200 |\n| /    | 除号               | \\`expr \\$b / \\$a`，result = 2   |\n| %    | 取余               | \\`expr \\$b % \\$a`，result=0     |\n| =    | 赋值               | a=$b，将b的值赋给a                   |\n| ==   | 相等，比较数字，同则true。  | [\\$a == \\$b]返回false            |\n| !=   | 不等，比较数字，不同的true。 | [\\$a != \\$b]返回true。            |\n\n```shell\n#!/bin/bash\n# author:菜鸟教程\n# url:www.runoob.com\n\na=10\nb=20\n\nval=`expr $a + $b`\necho \"a + b : $val\"\n\nval=`expr $a - $b`\necho \"a - b : $val\"\n\nval=`expr $a \\* $b`\necho \"a * b : $val\"\n\nval=`expr $b / $a`\necho \"b / a : $val\"\n\nval=`expr $b % $a`\necho \"b % a : $val\"\n\nif [ $a == $b ]\nthen\n   echo \"a 等于 b\"\nfi\nif [ $a != $b ]\nthen\n   echo \"a 不等于 b\"\nfi\n```\n\n执行结果：\n\n```shell\na + b : 30\na - b : -10\na * b : 200\nb / a : 2\nb % a : 0\na 不等于 b\n```\n\n\n\n**注意：**条件表达式必须在`[]`之间，且必须有空格，如**[\\$a==\\$b]**是错的！\n\n> `*`乘号需要在`expr`表达式内用`\\`转义\n>\n> Mac电脑的shell的`expr`表达式：**$((表达式))**所以它的乘号`*`不用转义\n\n### 2、关系运算符\n\n布尔类型，关系运算符仅支持数字，除非字符串的值也是数字。示例，若a = 10 ,b = 20:\n\n| 运算符  | 说明          |\n| ---- | ----------- |\n| -eq  | equal       |\n| -ne  | not equal   |\n| -gt  | great than  |\n| -lt  | less than   |\n| -ge  | great equal |\n| -le  | less equal  |\n\n### 3、布尔运算符\n\n| 运算符  | 说明                        |\n| ---- | ------------------------- |\n| !    | `非`运算，表达式为true，则返回false。  |\n| -o   | `或`运算，一个表达式为true，则返回true。 |\n| -a   | `与`运算，两个都true，才返回true。    |\n\n### 4、逻辑运算符\n\n| 运算符  | 说明    |\n| ---- | ----- |\n| &&   | 逻辑and |\n| \\|\\| | 逻辑 or |\n\n### 5、字符串运算符\n\n| 运算符  | 说明                     |\n| ---- | ---------------------- |\n| =    | 检测两字符串是否相等             |\n| !=   | 检测两字符串是否不等             |\n| -z   | zero检测字符串长度是否为0，0则true |\n| -n   | not zero检测字符串长度是否非0。   |\n| str  | 检测字符串是否为空，不空则true。     |\n\n### 6、文件测试运算符\n\n用于检测类unix 文件的各种属性\n\n| 操作符     | 说明                           |\n| ------- | ---------------------------- |\n| -b file | 是否是块设备文件，是则true              |\n| -c file | 是否是字符设备文件，是则true             |\n| -d file | 是否是目录，是则true                 |\n| -f file | 是否是普通文件(既非目录，亦非设备文件)，若是则true |\n| -g file | 是否设置了SGID位，是则true            |\n| -k file | 是否设置粘着位，是则true               |\n| -p file | 是否有名管道，是则true                |\n| -u file | 是否设置SUID，是则true              |\n| -r file | 是否可读，是则true                  |\n| -w file | 是否可写，是则true                  |\n| -x file | 是否可执行，是则true                 |\n| -s file | 是否为空或大小是否大于0，非空则true         |\n| -e file | 是否存在，是则true                  |\n\n==注意shell脚本的表达式都要在`[]`内哦==\n\n## Shell echo命令\n\n类似于php的echo，shell的echo用于输出字符串，格式`echo string`\n\n- 显示普通字符串\n\n```shell\necho \"Hello World\"\n#可以不带引号\necho Hello World\n```\n\n- 显示转义字符\n\n  ```sh\n  echo \"\\\"It is a test\\\"\"\n  #输出结果\n  \"It is a test\"\n  ```\n\n- 显示变量\n\n  `read`命令从标准输入中读取一行，并把输入行的每个字段指定给shell变量\n\n  ```shell\n  #!/bin/sh\n  read name\n  echo \"$name It is a test\"\n\n  #运行效果：\n  [root@www ~]# sh test.sh\n  OK                     #标准输入\n  OK It is a test        #输出\n  ```\n\n- 显示换行\n\n  ```shell\n  echo -e \"Ok ! \\n\" # -e 开启转义\n  echo \"It is a test\"\n  #输出结果：注意ok后面有换行\n  OK!\n\n  It it a tes\n  ```\n\n- 显示不换行\n\n  ```sh\n  #!/bin/sh\n  echo -e \"OK! \\c\" # -e 开启转义 \\c 不换行\n  echo \"It is a test\"\n  #结果：\n  OK! It is a test\n  ```\n\n- 显示结果定向至文件\n\n  ```shell\n  echo \"It is a test\" > test.txt\n  ```\n\n- 原样输出字符，不转义不取变量，需要结合单引号\n\n  ```sh\n  echo '$name\\\"'\n  #输出结果\n  $name\\\"\n  ```\n\n- 显示命令执行结果\n\n  ==命令用``  ` ``来包裹==\n\n  ```sh\n  echo `data`\n  #结果：\n  Thu Jul 24 10:08:46 CST 2014\n  ```\n\n## Shell printf命令\n\n类似C语言的printf()函数，shell使用printf会比echo更具有跨平台移植性。可以类似C的printf()函数使用一些复杂的表达式，printf不支持自动换行，需要借助`\\n`\n\n```shell\nprintf format-string [args...]\n```\n\n示例，模拟shell输出，\n\n```sh\n$ echo \"hello ,shell\"\nhello ,shell\n$ printf \"hello ,shell \\n\"\nhello ,shell\n$\n```\n\n脚本化的printf命令使用：\n\n```sh\n#!/bin/bash\n# author:菜鸟教程\n# url:www.runoob.com\n \nprintf \"%-10s %-8s %-4s\\n\" 姓名 性别 体重kg  \nprintf \"%-10s %-8s %-4.2f\\n\" 郭靖 男 66.1234 \nprintf \"%-10s %-8s %-4.2f\\n\" 杨过 男 48.6543 \nprintf \"%-10s %-8s %-4.2f\\n\" 郭芙 女 47.9876 \n```\n\n执行脚本，显示结果：\n\n```\n姓名     性别   体重kg\n郭靖     男      66.12\n杨过     男      48.65\n郭芙     女      47.99\n```\n\n`%s,%c,%d,%f`都是格式替换符，`%-10s`指一个宽度为10个字符（-表示左对齐，没有则右对齐），任何字符都会被显示在10个字符宽的字符内，如果不足则自动以空格填充，超过也会将内容全部显示出来。\n\n%-4.2f 指格式化为小数，其中.2指保留2位小数。\n\n```sh\n#!/bin/bash\n# author:菜鸟教程\n# url:www.runoob.com\n \n# format-string为双引号\nprintf \"%d %s\\n\" 1 \"abc\"\n\n# 单引号与双引号效果一样 \nprintf '%d %s\\n' 1 \"abc\" \n\n# 没有引号也可以输出\nprintf %s abcdef\n\n# 格式只指定了一个参数，但多出的参数仍然会按照该格式输出，format-string 被重用\nprintf %s abc def\n\nprintf \"%s\\n\" abc def\n\nprintf \"%s %s %s\\n\" a b c d e f g h i j\n\n# 如果没有 arguments，那么 %s 用NULL代替，%d 用 0 代替\nprintf \"%s and %d \\n\"\n```\n\n**Printf的转移序列**\n\n| 序列               | 说明                                       |\n| ---------------- | ---------------------------------------- |\n| \\a               | 警告字符，通常为ASCII的BEL字符                      |\n| \\b               | 后退                                       |\n| \\c               | 抑制不显示输出结果中任何姐wide换行字符（只在%b格式指示控制符下的参数字符串中有效），而且任何留在参数里的字符，任何接下来的采纳书以及任何留在格式字符串中的字符，都被忽略。 |\n| \\f               | 换页                                       |\n| \\n               | 换行                                       |\n| \\r               | 回车                                       |\n| \\t               | 水平tab                                    |\n| \\v               | 竖直tab                                    |\n| \\\\\\              | 转义后输出一个\\符号                               |\n| \\d     dd        | 表示1--3位的八进制字符，仅在格式字符串中有效。                |\n| \\0     dd      d | 表示1--3位的八进制字符                            |\n\n## Shell text命令\n\nshell中test命令用于测试条件是否成立，可进行数字、字符和文件的条件测试\n\n```sh\n#!/bin/bash\n\n#用之前的各种运算符，测试test\nnum1=100\nnum2=200\nif test $[num1] -eq $[num2]\nthen\n\techo 'true'\nelse\n\techo 'false'\nfi\n```\n\n## Shell 流程控制\n\n区别于其他编程语言，shell的流程控制不可为空，如\n\n```java\nif(a>b){\n  System.out.println(\"ok\");\n}else{\n  //此处不做任何事\n}\n```\n\n但是在shell中不能出现不做任何事的分支语句\n\n### 1、if else\n\n- if语句格式\n\n  ```sh\n  if condition\n  then\n  \tcommand1\n  \tcommand2\n  \t...\n  fi # 是if的倒写\n  ```\n\n  每个句子可以用`;`分号结束，可以写在一行好几个语句。\n\n- if else\n\n  ```sh\n  if condition\n  then\n  \tcommand1\n  \tcommand2\n  \t...\n  else\n  \tcommand\n  fi\n  ```\n\n- if else-if else\n\n  ```sh\n  if condition1\n  then\n  \tcommand1\n  elif condition2 #类似python中，else if是写作elif\n  then\n  \tcommand2\n  else\n  \tcommand\n  fi\n  ```\n\n### 2、for循环\n\nshell的for循环格式：\n\n```sh\nfor var in item1 item2 ... itemN\ndo\n\tcommand1\n\tcommand2\n\t...\n\t\ndone #for循环结束的标识\n#写成一行\nfor var in item1 item2 ... itemN;do command1; command2;...;done;\n```\n\n### 3、while语句\n\n格式：\n\n```sh\nwhile condition\ndo\n\tcommand\ndone\n#示例\n\n#!/bin/sh\nint=1\nwhile(( $int<=5 ))\ndo\n        echo $int\n        let \"int++\" # let是个关键命令\ndone\n```\n\n可以结合`read`命令接收输入信息\n\n### 4、无限循环\n\n```sh\nwhile :\ndo\n\tcommand\ndone\n\n#或者\nwhile true\ndo\n\tcommand\ndone\n\n#或者\nfor (( ; ; ))\n```\n\n### 5、until循环\n\nshell所有的`until`循环类似于一个特殊的for循环，知道满足条件时候才停止。一般还是`while`\n\n```sh\nuntil condition\ndo\n\tcommand\ndone\n```\n\n**条件可为任意测试条件，测试发生在循环末尾，因此循环至少执行一次—请注意这一点。**\n\n### 6、case\n\n类似其他语言的switch...case语句\n\n```sh\ncase value in\nmode1)\n\tcommand1\n\t...\n\t;; #case的结束标志\nmode2)\n\tcommand2\n\t...\n\t;;\nesac #case的反写\n```\n\nvalue只会匹配一个case，或者不匹配，则mode可用*号通配\n\n```sh\necho '输入 1 到 4 之间的数字:'\necho '你输入的数字为:'\nread aNum\ncase $aNum in\n    1)  echo '你选择了 1'\n    ;;\n    2)  echo '你选择了 2'\n    ;;\n    3)  echo '你选择了 3'\n    ;;\n    4)  echo '你选择了 4'\n    ;;\n    *)  echo '你没有输入 1 到 4 之间的数字'\n    ;;\nesac\n```\n\n### 7、跳出循环\n\nshell也使用`break`和`continue`来跳出循环。\n\n- break\n\n  跳出所有循环，终止后面的执行。\n\n  ```sh\n  #!/bin/bash\n  while :\n  do\n      echo -n \"输入 1 到 5 之间的数字:\"\n      read aNum\n      case $aNum in\n          1|2|3|4|5) echo \"你输入的数字为 $aNum!\"\n          ;;\n          *) echo \"你输入的数字不是 1 到 5 之间的! 游戏结束\"\n              break\n          ;;\n      esac\n  done\n  ```\n\n- continue\n\n  跳出本次循环，执行下一轮循环\n\n  ```sh\n  #!/bin/bash\n  while :\n  do\n      echo -n \"输入 1 到 5 之间的数字: \"\n      read aNum\n      case $aNum in\n          1|2|3|4|5) echo \"你输入的数字为 $aNum!\"\n          ;;\n          *) echo \"你输入的数字不是 1 到 5 之间的!\"\n              continue\n              echo \"游戏结束\"\n          ;;\n      esac\n  done\n  ```\n\n### 8、esac\n\ncase语句区别于C语言，用esac作为结束标志，`)`和`;;`标识每个case。\n\n\n\n## Shell函数\n\nshell可以自定义函数，然后自己调用。函数格式：\n\n```sh\n#function 关键字为可选项，参数也是可选\n[ function ] funname [()]\n\n{\n  \n  action;\n  \n  [return int;]\n  \n}\n```\n\n**说明：**\n\n1. 可以带function fun()定义，也可以fun()定义，不带参数。\n2. 参数返回，可以显示加: return 返回，若不加，则返回最后一条指令结果。\n\n```shell\n#!/bin/bash\n# author:菜鸟教程\n# url:www.runoob.com\n\ndemoFun(){\n    echo \"这是我的第一个 shell 函数!\"\n}\necho \"-----函数开始执行-----\"\ndemoFun\necho \"-----函数执行完毕-----\"\n```\n\n含有返回值的函数：\n\n```sh\n#!/bin/bash\n# author:菜鸟教程\n# url:www.runoob.com\n\nfunWithReturn(){\n    echo \"这个函数会对输入的两个数字进行相加运算...\"\n    echo \"输入第一个数字: \"\n    read aNum\n    echo \"输入第二个数字: \"\n    read anotherNum\n    echo \"两个数字分别为 $aNum 和 $anotherNum !\"\n    return $(($aNum+$anotherNum))\n}\nfunWithReturn\necho \"输入的两个数字之和为 $? !\"\n```\n\n==调用函数返回值，用`$?`符号==，函数必须在被调用前定义。\n\n- 函数参数\n\n  在Shell中，调用函数时可以向其传递参数。在函数体内部，通过 $n 的形式来获取参数的值，例如，$1表示第一个参数，$2表示第二个参数...\n\n  ```sh\n  #!/bin/bash\n  # author:菜鸟教程\n  # url:www.runoob.com\n\n  funWithParam(){\n      echo \"第一个参数为 $1 !\"\n      echo \"第二个参数为 $2 !\"\n      echo \"第十个参数为 $10 !\"\n      echo \"第十个参数为 ${10} !\"\n      echo \"第十一个参数为 ${11} !\"\n      echo \"参数总数有 $# 个!\"\n      echo \"作为一个字符串输出所有参数 $* !\"\n  }\n  funWithParam 1 2 3 4 5 6 7 8 9 34 73\n  #输出结果：\n  第一个参数为 1 !\n  第二个参数为 2 !\n  第十个参数为 10 !\n  第十个参数为 34 !\n  第十一个参数为 73 !\n  参数总数有 11 个!\n  作为一个字符串输出所有参数 1 2 3 4 5 6 7 8 9 34 73 !\n  ```\n\n  **注意：**\\$10不能获取第10个参数，因为当n>=10时候，要用\\$(n)来获取参数。\n\n## Shell 输入/输出重定向\n\n类Uinx系统中，默认标准输入输出设备就是shell终端。重定向命令列表：\n\n| 命令              | 说明                       |\n| --------------- | ------------------------ |\n| command > file  | 输出重定向到file               |\n| command < file  | 输出重定向到file               |\n| command >> file | 输出追加到file                |\n| n > file        | 文件描述符为n的文件重定向到file       |\n| n >> file       | 文件描述符为n的文件追加到file        |\n| n >& m          | 输出文件m和n合并                |\n| n <& m          | 输入文件m和n合并                |\n| << tag          | 开始标记tag和结束标记tag之间的内容作为输入 |\n\n> **注意：**需要注意的是文件描述符 0 通常是标准输入（STDIN），1 是标准输出（STDOUT），2 是标准错误输出（STDERR）。\n\n### 1、输出重定向\n\n```sh\ncommand1 > file1\n```\n\n若file1存在，则被替代。可以用`>>`追加符号，则不替代。\n\n### 2、输入重定向\n\n```sh\ncommand1 < file1\n```\n\n```\ncommand1 < infile > outfile\n```\n\n同时替换输入和输出，执行command1，从文件infile读取内容，然后将输出写入到outfile中。\n\n### 3、重定向深入讲解\n\n一般类unix系统命令运行会同时打开三个文件：\n\n- 标准输入文件(stdin)：stdin的文件描述符为0，Unix程序默认从stdin读取数据。\n- 标准输出文件(stdout)：stdout 的文件描述符为1，Unix程序默认向stdout输出数据。\n- 标准错误文件(stderr)：stderr的文件描述符为2，Unix程序会向stderr流中写入错误信息\n\n默认情况下，command > file 将 stdout 重定向到 file，command < file 将stdin 重定向到 file。\n\n如果希望 stderr 重定向到 file，可以这样写：\n\n```sh\n#模拟终端\n$ command 2 > file\n```\n\n若要追加`>>`符号，其中2代表标准错误文件的代号。\n\n如果希望将stdout和stderr合并后重定向到file\n\n```sh\ncommand > file 2>&1\n#或者\ncommand >> file 2>&1\n#如果输入、输出都重定向\ncommand <file1 >file2\n```\n\n### 4、Here Document\n\nHere Document是shell的一种特殊重定向方式，用于将输入重定向到一个交互式shell脚本或程序：\n\n```sh\ncommand << delimiter\n\tdocument\ndelimiter\n```\n\n作用将delimiter之间的document作为输入传递给command\n\n**注意：**结尾的`delimiter`前后不得有任何符号，包括tab和空格。\n\n```sh\nwc -l << EOF\n\tnihao\n\tzhendehenhao\n\tshime\n\tok\nEOF \n#输出结果，获得的EOF之间的内容的行数。\n4\n```\n\n### 5、/dev/null文件\n\n若希望执行命令不在屏幕输出，可重定向到/dev/null\n\n```sh\ncommand > /dev/null\n```\n\n`/dev/null`为特殊文件，写入的内容立即不见，不可读出。\n\n如果屏蔽stdout和stderr\n\n```sh\ncommand > /dev/null 2>&1\n```\n\n## Shell文件包含\n\nshell也可以使用外部脚本，便于封装：\n\n```sh\n. filename #注意点号(.)与文件名之间有空格\n或\nsource filename\n```\n\n示例：test1.sh\n\n```sh\n#!/bin/bash\n# author:菜鸟教程\n# url:www.runoob.com\n\nurl=\"http://www.runoob.com\"\n```\n\ntest2.sh\n\n```sh\n#!/bin/bash\n# author:菜鸟教程\n# url:www.runoob.com\n\n#使用 . 号来引用test1.sh 文件\n. ./test1.sh\n\n# 或者使用以下包含文件代码\n# source ./test1.sh\n\necho \"菜鸟教程官网地址：$url\"\n```\n\n执行时候test2.sh只需要test2.sh有执行权限即可，test1.sh不一定需要。","source":"_posts/Shell学习笔记.md","raw":"---\ntitle: \"Shell学习笔记\"\ndate: 2016-11-18 19:37\nauthor: 冰路梦\ntag:\n    - Linux\ncategories:\n    - Linux\n---\n\n# Shell学习笔记\n\n<!-- TOC -->\n\n- [Shell学习笔记](#shell学习笔记)\n    - [简介：](#简介)\n    - [Shell教程入门](#shell教程入门)\n        - [1、shell脚本](#1shell脚本)\n        - [2、shell脚本实践](#2shell脚本实践)\n    - [Shell变量](#shell变量)\n        - [1、使用变量](#1使用变量)\n        - [2、只读变量](#2只读变量)\n        - [3、删除变量](#3删除变量)\n        - [4、变量类型](#4变量类型)\n        - [5、shell字符串](#5shell字符串)\n        - [6、Shell数组](#6shell数组)\n        - [7、Shell注释](#7shell注释)\n    - [Shell传递参数](#shell传递参数)\n        - [1、实例](#1实例)\n    - [Shell数组](#shell数组)\n    - [Shell运算符](#shell运算符)\n        - [1、算术运算符](#1算术运算符)\n        - [2、关系运算符](#2关系运算符)\n        - [3、布尔运算符](#3布尔运算符)\n        - [4、逻辑运算符](#4逻辑运算符)\n        - [5、字符串运算符](#5字符串运算符)\n        - [6、文件测试运算符](#6文件测试运算符)\n    - [Shell echo命令](#shell-echo命令)\n    - [Shell printf命令](#shell-printf命令)\n    - [Shell text命令](#shell-text命令)\n    - [Shell 流程控制](#shell-流程控制)\n        - [1、if else](#1if-else)\n        - [2、for循环](#2for循环)\n        - [3、while语句](#3while语句)\n        - [4、无限循环](#4无限循环)\n        - [5、until循环](#5until循环)\n        - [6、case](#6case)\n        - [7、跳出循环](#7跳出循环)\n        - [8、esac](#8esac)\n    - [Shell函数](#shell函数)\n    - [Shell 输入/输出重定向](#shell-输入输出重定向)\n        - [1、输出重定向](#1输出重定向)\n        - [2、输入重定向](#2输入重定向)\n        - [3、重定向深入讲解](#3重定向深入讲解)\n        - [4、Here Document](#4here-document)\n        - [5、/dev/null文件](#5devnull文件)\n    - [Shell文件包含](#shell文件包含)\n\n<!-- /TOC -->\n\n## 简介：\n\nShell 是一个用C语言编写的程序，它是用户使用Linux的桥梁。Shell既是一种命令语言，又是一种程序设计语言。\n\nShell 是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的服务。\n\nKen Thompson的sh是第一种Unix Shell，Windows Explorer是一个典型的图形界面Shell。\n\n## Shell教程入门\n\n### 1、shell脚本\n\n> shell脚本`shell script`，是一种为shell而编写的脚本程序。然而通常所说的shell却是指shell脚本，而非shell本身。\n\nLinux系统shell种类众多，常用的有`sh`和`bash`。\n\n### 2、shell脚本实践\n\nshell脚本用`#!/bin/bash`或`#!/bin/sh`之类的方式，制定运行脚本的shell,`#!`是识别符号。\n\n```sh\n#!/bin/sh\necho \"Hello World\"\n```\n\n**运行shell脚本的两种方法：**\n\n- 作为可执行程序\n\n  将shell文本保存为`.sh`格式文件，赋予执行权限\n\n  ```sh\n  chmod + x ./test.sh # 赋予可执行权限\n  ./test.sh #执行脚本，注意此处需要指明当前目录下的test.sh哦，不然会去path路径找的，呵呵。\n  ```\n\n- 作为解释其参数\n\n  直接解释运行,如此就不用写`#!/bin/sh`之类的引用注释了。\n\n  ```sh\n  /bin/sh test.sh\n  # 类似java、php、python脚本\n  /bin/php test.php\n  ```\n\n## Shell变量\n\n变量命名语法，不需要`$`符号，php需要。命名要求：\n\n- 首字母必须字母`a-z或A-Z`\n- 不能空格，可用`_`\n- 不能标点\n- 不能使用`bash`关键字\n\n```sh\n#注意，不同于其他编程语言，等号之间不要有空格。\nyour_variable=\"your,name\"\n```\n\n```shell\n# 使用语句给变量赋值，如下循环显示出/etc目录下的文件名\nfor file in 'ls /etc'\n```\n\n### 1、使用变量\n\n使用已定义变量，只需在变量前加`$`符号即可：\n\n```shell\nyour_variable='yourname'\necho $your_variable\necho $(your_variable)\n```\n\n变量名可以加`{}`来标识变量名的范围，如：\n\n```sh\nfor skill in Ada Coffe Action Java; do\n\techo \"I am good at ${skill}Script\"\ndone\n```\n\n*如果不加`{}`，`skill`就可能被认为`skillScript`而导致变量找不到*\n\n已定义的变量可重新定义：\n\n```sh\nyour_name=\"tom\"\necho $your_name\nyour_name=\"john\"\necho $your_name\n```\n\n### 2、只读变量\n\n使用`readonly`命令将变量只读，则不可再改变，否则报错。\n\n```sh\n#!/bin/bash\nmyUrl=\"http://www.w3cschool.cc\"\nreadonly myUrl\nmyUrl=\"new url\" #此处就会报错，因为变量只读了。\n```\n\n### 3、删除变量\n\n使用`unset`命令删除变量：\n\n```sh\nunset variable_name\n```\n\n==删除变量后不能再用，而`unset`不能删除只读变量==\n\n```sh\n#!/bin/sh\nmyUrl=\"http://www.google.com\"\nunset myUrl\necho $myUrl #此时输出就没接过了，因为变量被删除了。\n```\n\n### 4、变量类型\n\n运行shell时，会同时存在三种变量：\n\n- 局部变量：脚本中定义的变量，仅作用于本shell脚本内。\n- 环境变量：所有程序，包括shell启动程序都能访问的环境变量。\n- shell变量：shell程序的特殊变量。\n\n### 5、shell字符串\n\nshell常用`number`和`string`，其中`string`可以单引号、双引号或者不用引号。但是略有区别：\n\n- 单引号\n\n  ```sh\n  str='string test'\n  ```\n\n  单引号`''`之间的字符原样输出，里面的变量也会失效。其内部不能再有单引号，哪怕转义符号都失效。\n\n- 双引号\n\n  ```shell\n  your_name='your name'\n  str=\"Hello ,world ,\\\"$your_name\\\"! \\n\"\n  ```\n\n  双引号里面可以有变量，可以有转义符号。\n\n- 字符串拼接\n\n  ```sh\n  n1=\"abc\"\n  test=\"hello, \"$n1\" !\"\n  test1=\"hello, ${n1} !\"\n  echo $test $test1\n  ```\n\n- 获取字符串长度\n\n  使用`#`标识变量长度\n\n  ```sh\n  str=\"abcdef\"\n  #输出字符串长度\n  echo ${#str} \n  ```\n\n- 获取子字符串\n\n  ```sh\n  str=\"abcdef\"\n  #下标从左至右，0开始，\n  echo ${str:1:4}\n  ```\n\n- 查找子字符串\n\n  使用\\`符号\n\n  ```sh\n  str=\"hello world nihaome\"\n  #查找字符i或s的位置,反引号\n  echo `expr index \"$str\" is`\n  ```\n\n### 6、Shell数组\n\nbash仅支持一维数组，可利用下标或表达式操作元素。\n\n- 定义数组\n\n  shell中使用`()`表示数组，元素用空格来分割。\n\n  ```sh\n  array=(1 2 3 4 5 6 7)\n  #或者\n  array=(\n  a\n  b\n  c\n  )\n  #也可以单独定义,下标可以不连续，也无范围限制。\n  array[0]=1\n  array[1]=2\n  array[3]=7\n  ```\n\n- 读取数组\n\n  ```sh\n  variable=${array[index]}\n  # @符号代替index表示获取所有元素\n  echo ${variable[@]}\n  ```\n\n- 获取数组长度\n\n  类似字符串的获取\n\n  ```sh\n  #获取元素个数\n  length=${#array_name[@]}\n  #或者*通配符\n  length=${#array_name[*]}\n  #获取数组单个元素的长度\n  length_n=${#array_name[n]}\n  ```\n\n### 7、Shell注释\n\n使用`#`至于行首，表示该行注释，shell无多行注释，只能每行都`#`\n\n```sh\n#-----------------------\n#我是个多行注释\n#但是只能这么写\n#-----------------------\n```\n\n要是多行代码需要注释，可以将定义为函数，加`{}`包裹起来，该函数不被调用，则类似于注释掉。\n\n## Shell传递参数\n\n在执行shell脚本时，可以向脚本传递参数，脚本内获取参数的格式：`$n`，n代表数字编号，为脚本内需要获取的参数的编号。\n\n### 1、实例\n\n示例向脚本传递三个参数，并输出，`$0`为执行文件名：\n\n```shell\n#!/bin/bash\n#传参测试\n\necho \"Shell 传参测试\";\necho \"file name: $0\";\necho \"first variable: $1\";\necho \"second variable: $2\"\necho \"third variable: $3\";\n```\n\n通过赋予权限，或者指定执行，可实现输出：\n\n```shell\n$ chmod +x test.sh\n# $符号在次表示root用户执行，下面是传入1，2，3，三个数到脚本\n$ ./test.sh 1 2 3 \n\n#输出结果：\nShell 传参测试\nfile name: ./test.sh\nfirst variable: 1\nsecond variable 2\nthird variable 3\n```\n\n另有几个特殊字符处理参数：\n\n| 参数处理 | 说明                         |\n| ---- | -------------------------- |\n| $#   | 传递到脚本的参数的个数                |\n| $*   | 以一个单字符串显示所有向脚本传递的参数。       |\n| $$   | 脚本运行的当前进程ID号               |\n| $!   | 后台运行的最后一个进程的ID号            |\n| $@   | 类似$*，使用时许加引号，并在引号中返回每个参数。  |\n| $-   | 显示shell使用的当前选选项，类似`set`命令  |\n| $?   | 显示最后命令的退出状态。0 表示无错误。其他都是错。 |\n\n```sh\n#!/bin/sh\n\necho \"Shell 传递参数实例！\";\necho \"第一个参数为：$1\";\n\necho \"参数个数为：$#\";\necho \"传递的参数作为一个字符串显示：$*\";\n```\n\n执行效果：\n\n```shell\n$ chmod +x test.sh \n$ ./test.sh 1 2 3\nShell 传递参数实例！\n第一个参数为：1\n参数个数为：3\n传递的参数作为一个字符串显示：1 2 3\n```\n\n`$*`与`$@`的异同：\n\n- 都是应用所有参数\n\n- 不同：只有在双引号中体现。假设在脚本运行时写了三个参数 1、2、3，，则 \" * \" 等价于 \"1 2 3\"（传递了一个参数），而 \"@\" 等价于 \"1\" \"2\" \"3\"（传递了三个参数）。\n\n  ```sh\n  #!/bin/bash\n\n  echo \"-- \\$* demo ---\"\n  for i in \"$*\";do\n  \techo $i\n  done\n\n  echo \"-- \\$@ demo ---\"\n  for i in \"$@\"; do\n  \techo $i\n  done\n  ```\n\n  执行效果：\n\n  ```shell\n  $ chmod +x test.sh \n  $ ./test.sh 1 2 3\n  -- $* 演示 ---\n  1 2 3\n  -- $@ 演示 ---\n  1\n  2\n  3\n  ```\n\n## Shell数组\n\nBash shell仅支持一维数组，不限定大小，初始化时候不需要指定大小。下标0开始，`()`包裹，空格分割元素。\n\n```shell\narray=(a b c d)\n```\n\n- 读取数组\n\n  格式`${array[index]}`\n\n```shell\n#!/bin/bash\nmy_array=(a b \"c\" d)\n\necho \"first: ${my_array[0]}\"\n\n#然后执行文件，获得输出结果\n#可用@或*来代替index获取所有元素\n```\n\n- 数组长度\n\n  类似字符串的长度获取\n\n  ```shell\n  ${#array[index]}\n  ```\n\n## Shell运算符\n\nshell支持多种运算符：\n\n- 算数运算符\n- 关系运算符\n- 布尔运算符\n- 字符串运算符\n- 文件测试运算符\n\n原生Bash不支持简单的数学运算，可以用`awk`和`expr`实现。\n\n```sh\n#!/bin/sh\n\nval=`expr 2 + 2`\necho $val\n\n#注意，expr用反引号，表达式和运算符之间必须有空格，2+2就不行。\n```\n\n### 1、算术运算符\n\n若a = 10，b = 20\n\n| 运算符  | 说明               | 举例                             |\n| ---- | ---------------- | ------------------------------ |\n| +    | 加号               | \\`expr \\$a + \\$b\\`，result = 30 |\n| -    | 减号               | \\`expr \\$a - \\$b`，result = -10 |\n| *    | 乘号               | \\`expr \\$a * \\$b`，result = 200 |\n| /    | 除号               | \\`expr \\$b / \\$a`，result = 2   |\n| %    | 取余               | \\`expr \\$b % \\$a`，result=0     |\n| =    | 赋值               | a=$b，将b的值赋给a                   |\n| ==   | 相等，比较数字，同则true。  | [\\$a == \\$b]返回false            |\n| !=   | 不等，比较数字，不同的true。 | [\\$a != \\$b]返回true。            |\n\n```shell\n#!/bin/bash\n# author:菜鸟教程\n# url:www.runoob.com\n\na=10\nb=20\n\nval=`expr $a + $b`\necho \"a + b : $val\"\n\nval=`expr $a - $b`\necho \"a - b : $val\"\n\nval=`expr $a \\* $b`\necho \"a * b : $val\"\n\nval=`expr $b / $a`\necho \"b / a : $val\"\n\nval=`expr $b % $a`\necho \"b % a : $val\"\n\nif [ $a == $b ]\nthen\n   echo \"a 等于 b\"\nfi\nif [ $a != $b ]\nthen\n   echo \"a 不等于 b\"\nfi\n```\n\n执行结果：\n\n```shell\na + b : 30\na - b : -10\na * b : 200\nb / a : 2\nb % a : 0\na 不等于 b\n```\n\n\n\n**注意：**条件表达式必须在`[]`之间，且必须有空格，如**[\\$a==\\$b]**是错的！\n\n> `*`乘号需要在`expr`表达式内用`\\`转义\n>\n> Mac电脑的shell的`expr`表达式：**$((表达式))**所以它的乘号`*`不用转义\n\n### 2、关系运算符\n\n布尔类型，关系运算符仅支持数字，除非字符串的值也是数字。示例，若a = 10 ,b = 20:\n\n| 运算符  | 说明          |\n| ---- | ----------- |\n| -eq  | equal       |\n| -ne  | not equal   |\n| -gt  | great than  |\n| -lt  | less than   |\n| -ge  | great equal |\n| -le  | less equal  |\n\n### 3、布尔运算符\n\n| 运算符  | 说明                        |\n| ---- | ------------------------- |\n| !    | `非`运算，表达式为true，则返回false。  |\n| -o   | `或`运算，一个表达式为true，则返回true。 |\n| -a   | `与`运算，两个都true，才返回true。    |\n\n### 4、逻辑运算符\n\n| 运算符  | 说明    |\n| ---- | ----- |\n| &&   | 逻辑and |\n| \\|\\| | 逻辑 or |\n\n### 5、字符串运算符\n\n| 运算符  | 说明                     |\n| ---- | ---------------------- |\n| =    | 检测两字符串是否相等             |\n| !=   | 检测两字符串是否不等             |\n| -z   | zero检测字符串长度是否为0，0则true |\n| -n   | not zero检测字符串长度是否非0。   |\n| str  | 检测字符串是否为空，不空则true。     |\n\n### 6、文件测试运算符\n\n用于检测类unix 文件的各种属性\n\n| 操作符     | 说明                           |\n| ------- | ---------------------------- |\n| -b file | 是否是块设备文件，是则true              |\n| -c file | 是否是字符设备文件，是则true             |\n| -d file | 是否是目录，是则true                 |\n| -f file | 是否是普通文件(既非目录，亦非设备文件)，若是则true |\n| -g file | 是否设置了SGID位，是则true            |\n| -k file | 是否设置粘着位，是则true               |\n| -p file | 是否有名管道，是则true                |\n| -u file | 是否设置SUID，是则true              |\n| -r file | 是否可读，是则true                  |\n| -w file | 是否可写，是则true                  |\n| -x file | 是否可执行，是则true                 |\n| -s file | 是否为空或大小是否大于0，非空则true         |\n| -e file | 是否存在，是则true                  |\n\n==注意shell脚本的表达式都要在`[]`内哦==\n\n## Shell echo命令\n\n类似于php的echo，shell的echo用于输出字符串，格式`echo string`\n\n- 显示普通字符串\n\n```shell\necho \"Hello World\"\n#可以不带引号\necho Hello World\n```\n\n- 显示转义字符\n\n  ```sh\n  echo \"\\\"It is a test\\\"\"\n  #输出结果\n  \"It is a test\"\n  ```\n\n- 显示变量\n\n  `read`命令从标准输入中读取一行，并把输入行的每个字段指定给shell变量\n\n  ```shell\n  #!/bin/sh\n  read name\n  echo \"$name It is a test\"\n\n  #运行效果：\n  [root@www ~]# sh test.sh\n  OK                     #标准输入\n  OK It is a test        #输出\n  ```\n\n- 显示换行\n\n  ```shell\n  echo -e \"Ok ! \\n\" # -e 开启转义\n  echo \"It is a test\"\n  #输出结果：注意ok后面有换行\n  OK!\n\n  It it a tes\n  ```\n\n- 显示不换行\n\n  ```sh\n  #!/bin/sh\n  echo -e \"OK! \\c\" # -e 开启转义 \\c 不换行\n  echo \"It is a test\"\n  #结果：\n  OK! It is a test\n  ```\n\n- 显示结果定向至文件\n\n  ```shell\n  echo \"It is a test\" > test.txt\n  ```\n\n- 原样输出字符，不转义不取变量，需要结合单引号\n\n  ```sh\n  echo '$name\\\"'\n  #输出结果\n  $name\\\"\n  ```\n\n- 显示命令执行结果\n\n  ==命令用``  ` ``来包裹==\n\n  ```sh\n  echo `data`\n  #结果：\n  Thu Jul 24 10:08:46 CST 2014\n  ```\n\n## Shell printf命令\n\n类似C语言的printf()函数，shell使用printf会比echo更具有跨平台移植性。可以类似C的printf()函数使用一些复杂的表达式，printf不支持自动换行，需要借助`\\n`\n\n```shell\nprintf format-string [args...]\n```\n\n示例，模拟shell输出，\n\n```sh\n$ echo \"hello ,shell\"\nhello ,shell\n$ printf \"hello ,shell \\n\"\nhello ,shell\n$\n```\n\n脚本化的printf命令使用：\n\n```sh\n#!/bin/bash\n# author:菜鸟教程\n# url:www.runoob.com\n \nprintf \"%-10s %-8s %-4s\\n\" 姓名 性别 体重kg  \nprintf \"%-10s %-8s %-4.2f\\n\" 郭靖 男 66.1234 \nprintf \"%-10s %-8s %-4.2f\\n\" 杨过 男 48.6543 \nprintf \"%-10s %-8s %-4.2f\\n\" 郭芙 女 47.9876 \n```\n\n执行脚本，显示结果：\n\n```\n姓名     性别   体重kg\n郭靖     男      66.12\n杨过     男      48.65\n郭芙     女      47.99\n```\n\n`%s,%c,%d,%f`都是格式替换符，`%-10s`指一个宽度为10个字符（-表示左对齐，没有则右对齐），任何字符都会被显示在10个字符宽的字符内，如果不足则自动以空格填充，超过也会将内容全部显示出来。\n\n%-4.2f 指格式化为小数，其中.2指保留2位小数。\n\n```sh\n#!/bin/bash\n# author:菜鸟教程\n# url:www.runoob.com\n \n# format-string为双引号\nprintf \"%d %s\\n\" 1 \"abc\"\n\n# 单引号与双引号效果一样 \nprintf '%d %s\\n' 1 \"abc\" \n\n# 没有引号也可以输出\nprintf %s abcdef\n\n# 格式只指定了一个参数，但多出的参数仍然会按照该格式输出，format-string 被重用\nprintf %s abc def\n\nprintf \"%s\\n\" abc def\n\nprintf \"%s %s %s\\n\" a b c d e f g h i j\n\n# 如果没有 arguments，那么 %s 用NULL代替，%d 用 0 代替\nprintf \"%s and %d \\n\"\n```\n\n**Printf的转移序列**\n\n| 序列               | 说明                                       |\n| ---------------- | ---------------------------------------- |\n| \\a               | 警告字符，通常为ASCII的BEL字符                      |\n| \\b               | 后退                                       |\n| \\c               | 抑制不显示输出结果中任何姐wide换行字符（只在%b格式指示控制符下的参数字符串中有效），而且任何留在参数里的字符，任何接下来的采纳书以及任何留在格式字符串中的字符，都被忽略。 |\n| \\f               | 换页                                       |\n| \\n               | 换行                                       |\n| \\r               | 回车                                       |\n| \\t               | 水平tab                                    |\n| \\v               | 竖直tab                                    |\n| \\\\\\              | 转义后输出一个\\符号                               |\n| \\d     dd        | 表示1--3位的八进制字符，仅在格式字符串中有效。                |\n| \\0     dd      d | 表示1--3位的八进制字符                            |\n\n## Shell text命令\n\nshell中test命令用于测试条件是否成立，可进行数字、字符和文件的条件测试\n\n```sh\n#!/bin/bash\n\n#用之前的各种运算符，测试test\nnum1=100\nnum2=200\nif test $[num1] -eq $[num2]\nthen\n\techo 'true'\nelse\n\techo 'false'\nfi\n```\n\n## Shell 流程控制\n\n区别于其他编程语言，shell的流程控制不可为空，如\n\n```java\nif(a>b){\n  System.out.println(\"ok\");\n}else{\n  //此处不做任何事\n}\n```\n\n但是在shell中不能出现不做任何事的分支语句\n\n### 1、if else\n\n- if语句格式\n\n  ```sh\n  if condition\n  then\n  \tcommand1\n  \tcommand2\n  \t...\n  fi # 是if的倒写\n  ```\n\n  每个句子可以用`;`分号结束，可以写在一行好几个语句。\n\n- if else\n\n  ```sh\n  if condition\n  then\n  \tcommand1\n  \tcommand2\n  \t...\n  else\n  \tcommand\n  fi\n  ```\n\n- if else-if else\n\n  ```sh\n  if condition1\n  then\n  \tcommand1\n  elif condition2 #类似python中，else if是写作elif\n  then\n  \tcommand2\n  else\n  \tcommand\n  fi\n  ```\n\n### 2、for循环\n\nshell的for循环格式：\n\n```sh\nfor var in item1 item2 ... itemN\ndo\n\tcommand1\n\tcommand2\n\t...\n\t\ndone #for循环结束的标识\n#写成一行\nfor var in item1 item2 ... itemN;do command1; command2;...;done;\n```\n\n### 3、while语句\n\n格式：\n\n```sh\nwhile condition\ndo\n\tcommand\ndone\n#示例\n\n#!/bin/sh\nint=1\nwhile(( $int<=5 ))\ndo\n        echo $int\n        let \"int++\" # let是个关键命令\ndone\n```\n\n可以结合`read`命令接收输入信息\n\n### 4、无限循环\n\n```sh\nwhile :\ndo\n\tcommand\ndone\n\n#或者\nwhile true\ndo\n\tcommand\ndone\n\n#或者\nfor (( ; ; ))\n```\n\n### 5、until循环\n\nshell所有的`until`循环类似于一个特殊的for循环，知道满足条件时候才停止。一般还是`while`\n\n```sh\nuntil condition\ndo\n\tcommand\ndone\n```\n\n**条件可为任意测试条件，测试发生在循环末尾，因此循环至少执行一次—请注意这一点。**\n\n### 6、case\n\n类似其他语言的switch...case语句\n\n```sh\ncase value in\nmode1)\n\tcommand1\n\t...\n\t;; #case的结束标志\nmode2)\n\tcommand2\n\t...\n\t;;\nesac #case的反写\n```\n\nvalue只会匹配一个case，或者不匹配，则mode可用*号通配\n\n```sh\necho '输入 1 到 4 之间的数字:'\necho '你输入的数字为:'\nread aNum\ncase $aNum in\n    1)  echo '你选择了 1'\n    ;;\n    2)  echo '你选择了 2'\n    ;;\n    3)  echo '你选择了 3'\n    ;;\n    4)  echo '你选择了 4'\n    ;;\n    *)  echo '你没有输入 1 到 4 之间的数字'\n    ;;\nesac\n```\n\n### 7、跳出循环\n\nshell也使用`break`和`continue`来跳出循环。\n\n- break\n\n  跳出所有循环，终止后面的执行。\n\n  ```sh\n  #!/bin/bash\n  while :\n  do\n      echo -n \"输入 1 到 5 之间的数字:\"\n      read aNum\n      case $aNum in\n          1|2|3|4|5) echo \"你输入的数字为 $aNum!\"\n          ;;\n          *) echo \"你输入的数字不是 1 到 5 之间的! 游戏结束\"\n              break\n          ;;\n      esac\n  done\n  ```\n\n- continue\n\n  跳出本次循环，执行下一轮循环\n\n  ```sh\n  #!/bin/bash\n  while :\n  do\n      echo -n \"输入 1 到 5 之间的数字: \"\n      read aNum\n      case $aNum in\n          1|2|3|4|5) echo \"你输入的数字为 $aNum!\"\n          ;;\n          *) echo \"你输入的数字不是 1 到 5 之间的!\"\n              continue\n              echo \"游戏结束\"\n          ;;\n      esac\n  done\n  ```\n\n### 8、esac\n\ncase语句区别于C语言，用esac作为结束标志，`)`和`;;`标识每个case。\n\n\n\n## Shell函数\n\nshell可以自定义函数，然后自己调用。函数格式：\n\n```sh\n#function 关键字为可选项，参数也是可选\n[ function ] funname [()]\n\n{\n  \n  action;\n  \n  [return int;]\n  \n}\n```\n\n**说明：**\n\n1. 可以带function fun()定义，也可以fun()定义，不带参数。\n2. 参数返回，可以显示加: return 返回，若不加，则返回最后一条指令结果。\n\n```shell\n#!/bin/bash\n# author:菜鸟教程\n# url:www.runoob.com\n\ndemoFun(){\n    echo \"这是我的第一个 shell 函数!\"\n}\necho \"-----函数开始执行-----\"\ndemoFun\necho \"-----函数执行完毕-----\"\n```\n\n含有返回值的函数：\n\n```sh\n#!/bin/bash\n# author:菜鸟教程\n# url:www.runoob.com\n\nfunWithReturn(){\n    echo \"这个函数会对输入的两个数字进行相加运算...\"\n    echo \"输入第一个数字: \"\n    read aNum\n    echo \"输入第二个数字: \"\n    read anotherNum\n    echo \"两个数字分别为 $aNum 和 $anotherNum !\"\n    return $(($aNum+$anotherNum))\n}\nfunWithReturn\necho \"输入的两个数字之和为 $? !\"\n```\n\n==调用函数返回值，用`$?`符号==，函数必须在被调用前定义。\n\n- 函数参数\n\n  在Shell中，调用函数时可以向其传递参数。在函数体内部，通过 $n 的形式来获取参数的值，例如，$1表示第一个参数，$2表示第二个参数...\n\n  ```sh\n  #!/bin/bash\n  # author:菜鸟教程\n  # url:www.runoob.com\n\n  funWithParam(){\n      echo \"第一个参数为 $1 !\"\n      echo \"第二个参数为 $2 !\"\n      echo \"第十个参数为 $10 !\"\n      echo \"第十个参数为 ${10} !\"\n      echo \"第十一个参数为 ${11} !\"\n      echo \"参数总数有 $# 个!\"\n      echo \"作为一个字符串输出所有参数 $* !\"\n  }\n  funWithParam 1 2 3 4 5 6 7 8 9 34 73\n  #输出结果：\n  第一个参数为 1 !\n  第二个参数为 2 !\n  第十个参数为 10 !\n  第十个参数为 34 !\n  第十一个参数为 73 !\n  参数总数有 11 个!\n  作为一个字符串输出所有参数 1 2 3 4 5 6 7 8 9 34 73 !\n  ```\n\n  **注意：**\\$10不能获取第10个参数，因为当n>=10时候，要用\\$(n)来获取参数。\n\n## Shell 输入/输出重定向\n\n类Uinx系统中，默认标准输入输出设备就是shell终端。重定向命令列表：\n\n| 命令              | 说明                       |\n| --------------- | ------------------------ |\n| command > file  | 输出重定向到file               |\n| command < file  | 输出重定向到file               |\n| command >> file | 输出追加到file                |\n| n > file        | 文件描述符为n的文件重定向到file       |\n| n >> file       | 文件描述符为n的文件追加到file        |\n| n >& m          | 输出文件m和n合并                |\n| n <& m          | 输入文件m和n合并                |\n| << tag          | 开始标记tag和结束标记tag之间的内容作为输入 |\n\n> **注意：**需要注意的是文件描述符 0 通常是标准输入（STDIN），1 是标准输出（STDOUT），2 是标准错误输出（STDERR）。\n\n### 1、输出重定向\n\n```sh\ncommand1 > file1\n```\n\n若file1存在，则被替代。可以用`>>`追加符号，则不替代。\n\n### 2、输入重定向\n\n```sh\ncommand1 < file1\n```\n\n```\ncommand1 < infile > outfile\n```\n\n同时替换输入和输出，执行command1，从文件infile读取内容，然后将输出写入到outfile中。\n\n### 3、重定向深入讲解\n\n一般类unix系统命令运行会同时打开三个文件：\n\n- 标准输入文件(stdin)：stdin的文件描述符为0，Unix程序默认从stdin读取数据。\n- 标准输出文件(stdout)：stdout 的文件描述符为1，Unix程序默认向stdout输出数据。\n- 标准错误文件(stderr)：stderr的文件描述符为2，Unix程序会向stderr流中写入错误信息\n\n默认情况下，command > file 将 stdout 重定向到 file，command < file 将stdin 重定向到 file。\n\n如果希望 stderr 重定向到 file，可以这样写：\n\n```sh\n#模拟终端\n$ command 2 > file\n```\n\n若要追加`>>`符号，其中2代表标准错误文件的代号。\n\n如果希望将stdout和stderr合并后重定向到file\n\n```sh\ncommand > file 2>&1\n#或者\ncommand >> file 2>&1\n#如果输入、输出都重定向\ncommand <file1 >file2\n```\n\n### 4、Here Document\n\nHere Document是shell的一种特殊重定向方式，用于将输入重定向到一个交互式shell脚本或程序：\n\n```sh\ncommand << delimiter\n\tdocument\ndelimiter\n```\n\n作用将delimiter之间的document作为输入传递给command\n\n**注意：**结尾的`delimiter`前后不得有任何符号，包括tab和空格。\n\n```sh\nwc -l << EOF\n\tnihao\n\tzhendehenhao\n\tshime\n\tok\nEOF \n#输出结果，获得的EOF之间的内容的行数。\n4\n```\n\n### 5、/dev/null文件\n\n若希望执行命令不在屏幕输出，可重定向到/dev/null\n\n```sh\ncommand > /dev/null\n```\n\n`/dev/null`为特殊文件，写入的内容立即不见，不可读出。\n\n如果屏蔽stdout和stderr\n\n```sh\ncommand > /dev/null 2>&1\n```\n\n## Shell文件包含\n\nshell也可以使用外部脚本，便于封装：\n\n```sh\n. filename #注意点号(.)与文件名之间有空格\n或\nsource filename\n```\n\n示例：test1.sh\n\n```sh\n#!/bin/bash\n# author:菜鸟教程\n# url:www.runoob.com\n\nurl=\"http://www.runoob.com\"\n```\n\ntest2.sh\n\n```sh\n#!/bin/bash\n# author:菜鸟教程\n# url:www.runoob.com\n\n#使用 . 号来引用test1.sh 文件\n. ./test1.sh\n\n# 或者使用以下包含文件代码\n# source ./test1.sh\n\necho \"菜鸟教程官网地址：$url\"\n```\n\n执行时候test2.sh只需要test2.sh有执行权限即可，test1.sh不一定需要。","slug":"Shell学习笔记","published":1,"updated":"2017-03-31T03:11:06.079Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0xj1nf7000mscowxgxt5mu8","content":"<h1 id=\"Shell学习笔记\"><a href=\"#Shell学习笔记\" class=\"headerlink\" title=\"Shell学习笔记\"></a>Shell学习笔记</h1><!-- TOC -->\n<ul>\n<li><a href=\"#shell学习笔记\">Shell学习笔记</a><ul>\n<li><a href=\"#简介\">简介：</a></li>\n<li><a href=\"#shell教程入门\">Shell教程入门</a><ul>\n<li><a href=\"#1shell脚本\">1、shell脚本</a></li>\n<li><a href=\"#2shell脚本实践\">2、shell脚本实践</a></li>\n</ul>\n</li>\n<li><a href=\"#shell变量\">Shell变量</a><ul>\n<li><a href=\"#1使用变量\">1、使用变量</a></li>\n<li><a href=\"#2只读变量\">2、只读变量</a></li>\n<li><a href=\"#3删除变量\">3、删除变量</a></li>\n<li><a href=\"#4变量类型\">4、变量类型</a></li>\n<li><a href=\"#5shell字符串\">5、shell字符串</a></li>\n<li><a href=\"#6shell数组\">6、Shell数组</a></li>\n<li><a href=\"#7shell注释\">7、Shell注释</a></li>\n</ul>\n</li>\n<li><a href=\"#shell传递参数\">Shell传递参数</a><ul>\n<li><a href=\"#1实例\">1、实例</a></li>\n</ul>\n</li>\n<li><a href=\"#shell数组\">Shell数组</a></li>\n<li><a href=\"#shell运算符\">Shell运算符</a><ul>\n<li><a href=\"#1算术运算符\">1、算术运算符</a></li>\n<li><a href=\"#2关系运算符\">2、关系运算符</a></li>\n<li><a href=\"#3布尔运算符\">3、布尔运算符</a></li>\n<li><a href=\"#4逻辑运算符\">4、逻辑运算符</a></li>\n<li><a href=\"#5字符串运算符\">5、字符串运算符</a></li>\n<li><a href=\"#6文件测试运算符\">6、文件测试运算符</a></li>\n</ul>\n</li>\n<li><a href=\"#shell-echo命令\">Shell echo命令</a></li>\n<li><a href=\"#shell-printf命令\">Shell printf命令</a></li>\n<li><a href=\"#shell-text命令\">Shell text命令</a></li>\n<li><a href=\"#shell-流程控制\">Shell 流程控制</a><ul>\n<li><a href=\"#1if-else\">1、if else</a></li>\n<li><a href=\"#2for循环\">2、for循环</a></li>\n<li><a href=\"#3while语句\">3、while语句</a></li>\n<li><a href=\"#4无限循环\">4、无限循环</a></li>\n<li><a href=\"#5until循环\">5、until循环</a></li>\n<li><a href=\"#6case\">6、case</a></li>\n<li><a href=\"#7跳出循环\">7、跳出循环</a></li>\n<li><a href=\"#8esac\">8、esac</a></li>\n</ul>\n</li>\n<li><a href=\"#shell函数\">Shell函数</a></li>\n<li><a href=\"#shell-输入输出重定向\">Shell 输入/输出重定向</a><ul>\n<li><a href=\"#1输出重定向\">1、输出重定向</a></li>\n<li><a href=\"#2输入重定向\">2、输入重定向</a></li>\n<li><a href=\"#3重定向深入讲解\">3、重定向深入讲解</a></li>\n<li><a href=\"#4here-document\">4、Here Document</a></li>\n<li><a href=\"#5devnull文件\">5、/dev/null文件</a></li>\n</ul>\n</li>\n<li><a href=\"#shell文件包含\">Shell文件包含</a></li>\n</ul>\n</li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"简介：\"><a href=\"#简介：\" class=\"headerlink\" title=\"简介：\"></a>简介：</h2><p>Shell 是一个用C语言编写的程序，它是用户使用Linux的桥梁。Shell既是一种命令语言，又是一种程序设计语言。</p>\n<p>Shell 是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的服务。</p>\n<p>Ken Thompson的sh是第一种Unix Shell，Windows Explorer是一个典型的图形界面Shell。</p>\n<h2 id=\"Shell教程入门\"><a href=\"#Shell教程入门\" class=\"headerlink\" title=\"Shell教程入门\"></a>Shell教程入门</h2><h3 id=\"1、shell脚本\"><a href=\"#1、shell脚本\" class=\"headerlink\" title=\"1、shell脚本\"></a>1、shell脚本</h3><blockquote>\n<p>shell脚本<code>shell script</code>，是一种为shell而编写的脚本程序。然而通常所说的shell却是指shell脚本，而非shell本身。</p>\n</blockquote>\n<p>Linux系统shell种类众多，常用的有<code>sh</code>和<code>bash</code>。</p>\n<h3 id=\"2、shell脚本实践\"><a href=\"#2、shell脚本实践\" class=\"headerlink\" title=\"2、shell脚本实践\"></a>2、shell脚本实践</h3><p>shell脚本用<code>#!/bin/bash</code>或<code>#!/bin/sh</code>之类的方式，制定运行脚本的shell,<code>#!</code>是识别符号。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/sh</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Hello World\"</span></div></pre></td></tr></table></figure>\n<p><strong>运行shell脚本的两种方法：</strong></p>\n<ul>\n<li><p>作为可执行程序</p>\n<p>将shell文本保存为<code>.sh</code>格式文件，赋予执行权限</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">chmod + x ./test.sh <span class=\"comment\"># 赋予可执行权限</span></div><div class=\"line\">./test.sh <span class=\"comment\">#执行脚本，注意此处需要指明当前目录下的test.sh哦，不然会去path路径找的，呵呵。</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>作为解释其参数</p>\n<p>直接解释运行,如此就不用写<code>#!/bin/sh</code>之类的引用注释了。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">/bin/sh test.sh</div><div class=\"line\"><span class=\"comment\"># 类似java、php、python脚本</span></div><div class=\"line\">/bin/php test.php</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Shell变量\"><a href=\"#Shell变量\" class=\"headerlink\" title=\"Shell变量\"></a>Shell变量</h2><p>变量命名语法，不需要<code>$</code>符号，php需要。命名要求：</p>\n<ul>\n<li>首字母必须字母<code>a-z或A-Z</code></li>\n<li>不能空格，可用<code>_</code></li>\n<li>不能标点</li>\n<li>不能使用<code>bash</code>关键字</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#注意，不同于其他编程语言，等号之间不要有空格。</span></div><div class=\"line\">your_variable=<span class=\"string\">\"your,name\"</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 使用语句给变量赋值，如下循环显示出/etc目录下的文件名</div><div class=\"line\">for file in &apos;ls /etc&apos;</div></pre></td></tr></table></figure>\n<h3 id=\"1、使用变量\"><a href=\"#1、使用变量\" class=\"headerlink\" title=\"1、使用变量\"></a>1、使用变量</h3><p>使用已定义变量，只需在变量前加<code>$</code>符号即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">your_variable=&apos;yourname&apos;</div><div class=\"line\">echo $your_variable</div><div class=\"line\">echo $(your_variable)</div></pre></td></tr></table></figure>\n<p>变量名可以加<code>{}</code>来标识变量名的范围，如：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> skill <span class=\"keyword\">in</span> Ada Coffe Action Java; <span class=\"keyword\">do</span></div><div class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">\"I am good at <span class=\"variable\">$&#123;skill&#125;</span>Script\"</span></div><div class=\"line\"><span class=\"keyword\">done</span></div></pre></td></tr></table></figure>\n<p><em>如果不加<code>{}</code>，<code>skill</code>就可能被认为<code>skillScript</code>而导致变量找不到</em></p>\n<p>已定义的变量可重新定义：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">your_name=<span class=\"string\">\"tom\"</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$your_name</span></div><div class=\"line\">your_name=<span class=\"string\">\"john\"</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$your_name</span></div></pre></td></tr></table></figure>\n<h3 id=\"2、只读变量\"><a href=\"#2、只读变量\" class=\"headerlink\" title=\"2、只读变量\"></a>2、只读变量</h3><p>使用<code>readonly</code>命令将变量只读，则不可再改变，否则报错。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\">myUrl=<span class=\"string\">\"http://www.w3cschool.cc\"</span></div><div class=\"line\"><span class=\"built_in\">readonly</span> myUrl</div><div class=\"line\">myUrl=<span class=\"string\">\"new url\"</span> <span class=\"comment\">#此处就会报错，因为变量只读了。</span></div></pre></td></tr></table></figure>\n<h3 id=\"3、删除变量\"><a href=\"#3、删除变量\" class=\"headerlink\" title=\"3、删除变量\"></a>3、删除变量</h3><p>使用<code>unset</code>命令删除变量：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">unset</span> variable_name</div></pre></td></tr></table></figure>\n<p>==删除变量后不能再用，而<code>unset</code>不能删除只读变量==</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/sh</span></div><div class=\"line\">myUrl=<span class=\"string\">\"http://www.google.com\"</span></div><div class=\"line\"><span class=\"built_in\">unset</span> myUrl</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$myUrl</span> <span class=\"comment\">#此时输出就没接过了，因为变量被删除了。</span></div></pre></td></tr></table></figure>\n<h3 id=\"4、变量类型\"><a href=\"#4、变量类型\" class=\"headerlink\" title=\"4、变量类型\"></a>4、变量类型</h3><p>运行shell时，会同时存在三种变量：</p>\n<ul>\n<li>局部变量：脚本中定义的变量，仅作用于本shell脚本内。</li>\n<li>环境变量：所有程序，包括shell启动程序都能访问的环境变量。</li>\n<li>shell变量：shell程序的特殊变量。</li>\n</ul>\n<h3 id=\"5、shell字符串\"><a href=\"#5、shell字符串\" class=\"headerlink\" title=\"5、shell字符串\"></a>5、shell字符串</h3><p>shell常用<code>number</code>和<code>string</code>，其中<code>string</code>可以单引号、双引号或者不用引号。但是略有区别：</p>\n<ul>\n<li><p>单引号</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">str=<span class=\"string\">'string test'</span></div></pre></td></tr></table></figure>\n<p>单引号<code>&#39;&#39;</code>之间的字符原样输出，里面的变量也会失效。其内部不能再有单引号，哪怕转义符号都失效。</p>\n</li>\n<li><p>双引号</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">your_name=&apos;your name&apos;</div><div class=\"line\">str=&quot;Hello ,world ,\\&quot;$your_name\\&quot;! \\n&quot;</div></pre></td></tr></table></figure>\n<p>双引号里面可以有变量，可以有转义符号。</p>\n</li>\n<li><p>字符串拼接</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">n1=<span class=\"string\">\"abc\"</span></div><div class=\"line\"><span class=\"built_in\">test</span>=<span class=\"string\">\"hello, \"</span><span class=\"variable\">$n1</span><span class=\"string\">\" !\"</span></div><div class=\"line\"><span class=\"built_in\">test</span>1=<span class=\"string\">\"hello, <span class=\"variable\">$&#123;n1&#125;</span> !\"</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$test</span> <span class=\"variable\">$test1</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>获取字符串长度</p>\n<p>使用<code>#</code>标识变量长度</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">str=<span class=\"string\">\"abcdef\"</span></div><div class=\"line\"><span class=\"comment\">#输出字符串长度</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;#str&#125;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>获取子字符串</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">str=<span class=\"string\">\"abcdef\"</span></div><div class=\"line\"><span class=\"comment\">#下标从左至右，0开始，</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;str:1:4&#125;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>查找子字符串</p>\n<p>使用`符号</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">str=<span class=\"string\">\"hello world nihaome\"</span></div><div class=\"line\"><span class=\"comment\">#查找字符i或s的位置,反引号</span></div><div class=\"line\"><span class=\"built_in\">echo</span> `expr index <span class=\"string\">\"<span class=\"variable\">$str</span>\"</span> is`</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"6、Shell数组\"><a href=\"#6、Shell数组\" class=\"headerlink\" title=\"6、Shell数组\"></a>6、Shell数组</h3><p>bash仅支持一维数组，可利用下标或表达式操作元素。</p>\n<ul>\n<li><p>定义数组</p>\n<p>shell中使用<code>()</code>表示数组，元素用空格来分割。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">array=(1 2 3 4 5 6 7)</div><div class=\"line\"><span class=\"comment\">#或者</span></div><div class=\"line\">array=(</div><div class=\"line\">a</div><div class=\"line\">b</div><div class=\"line\">c</div><div class=\"line\">)</div><div class=\"line\"><span class=\"comment\">#也可以单独定义,下标可以不连续，也无范围限制。</span></div><div class=\"line\">array[0]=1</div><div class=\"line\">array[1]=2</div><div class=\"line\">array[3]=7</div></pre></td></tr></table></figure>\n</li>\n<li><p>读取数组</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">variable=<span class=\"variable\">$&#123;array[index]&#125;</span></div><div class=\"line\"><span class=\"comment\"># @符号代替index表示获取所有元素</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;variable[@]&#125;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>获取数组长度</p>\n<p>类似字符串的获取</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#获取元素个数</span></div><div class=\"line\">length=<span class=\"variable\">$&#123;#array_name[@]&#125;</span></div><div class=\"line\"><span class=\"comment\">#或者*通配符</span></div><div class=\"line\">length=<span class=\"variable\">$&#123;#array_name[*]&#125;</span></div><div class=\"line\"><span class=\"comment\">#获取数组单个元素的长度</span></div><div class=\"line\">length_n=<span class=\"variable\">$&#123;#array_name[n]&#125;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"7、Shell注释\"><a href=\"#7、Shell注释\" class=\"headerlink\" title=\"7、Shell注释\"></a>7、Shell注释</h3><p>使用<code>#</code>至于行首，表示该行注释，shell无多行注释，只能每行都<code>#</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#-----------------------</span></div><div class=\"line\"><span class=\"comment\">#我是个多行注释</span></div><div class=\"line\"><span class=\"comment\">#但是只能这么写</span></div><div class=\"line\"><span class=\"comment\">#-----------------------</span></div></pre></td></tr></table></figure>\n<p>要是多行代码需要注释，可以将定义为函数，加<code>{}</code>包裹起来，该函数不被调用，则类似于注释掉。</p>\n<h2 id=\"Shell传递参数\"><a href=\"#Shell传递参数\" class=\"headerlink\" title=\"Shell传递参数\"></a>Shell传递参数</h2><p>在执行shell脚本时，可以向脚本传递参数，脚本内获取参数的格式：<code>$n</code>，n代表数字编号，为脚本内需要获取的参数的编号。</p>\n<h3 id=\"1、实例\"><a href=\"#1、实例\" class=\"headerlink\" title=\"1、实例\"></a>1、实例</h3><p>示例向脚本传递三个参数，并输出，<code>$0</code>为执行文件名：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/bash</div><div class=\"line\">#传参测试</div><div class=\"line\"></div><div class=\"line\">echo &quot;Shell 传参测试&quot;;</div><div class=\"line\">echo &quot;file name: $0&quot;;</div><div class=\"line\">echo &quot;first variable: $1&quot;;</div><div class=\"line\">echo &quot;second variable: $2&quot;</div><div class=\"line\">echo &quot;third variable: $3&quot;;</div></pre></td></tr></table></figure>\n<p>通过赋予权限，或者指定执行，可实现输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ chmod +x test.sh</div><div class=\"line\"># $符号在次表示root用户执行，下面是传入1，2，3，三个数到脚本</div><div class=\"line\">$ ./test.sh 1 2 3 </div><div class=\"line\"></div><div class=\"line\">#输出结果：</div><div class=\"line\">Shell 传参测试</div><div class=\"line\">file name: ./test.sh</div><div class=\"line\">first variable: 1</div><div class=\"line\">second variable 2</div><div class=\"line\">third variable 3</div></pre></td></tr></table></figure>\n<p>另有几个特殊字符处理参数：</p>\n<table>\n<thead>\n<tr>\n<th>参数处理</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$#</td>\n<td>传递到脚本的参数的个数</td>\n</tr>\n<tr>\n<td>$*</td>\n<td>以一个单字符串显示所有向脚本传递的参数。</td>\n</tr>\n<tr>\n<td>$$</td>\n<td>脚本运行的当前进程ID号</td>\n</tr>\n<tr>\n<td>$!</td>\n<td>后台运行的最后一个进程的ID号</td>\n</tr>\n<tr>\n<td>$@</td>\n<td>类似$*，使用时许加引号，并在引号中返回每个参数。</td>\n</tr>\n<tr>\n<td>$-</td>\n<td>显示shell使用的当前选选项，类似<code>set</code>命令</td>\n</tr>\n<tr>\n<td>$?</td>\n<td>显示最后命令的退出状态。0 表示无错误。其他都是错。</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/sh</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Shell 传递参数实例！\"</span>;</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"第一个参数为：<span class=\"variable\">$1</span>\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"参数个数为：<span class=\"variable\">$#</span>\"</span>;</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"传递的参数作为一个字符串显示：$*\"</span>;</div></pre></td></tr></table></figure>\n<p>执行效果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ chmod +x test.sh </div><div class=\"line\">$ ./test.sh 1 2 3</div><div class=\"line\">Shell 传递参数实例！</div><div class=\"line\">第一个参数为：1</div><div class=\"line\">参数个数为：3</div><div class=\"line\">传递的参数作为一个字符串显示：1 2 3</div></pre></td></tr></table></figure>\n<p><code>$*</code>与<code>$@</code>的异同：</p>\n<ul>\n<li><p>都是应用所有参数</p>\n</li>\n<li><p>不同：只有在双引号中体现。假设在脚本运行时写了三个参数 1、2、3，，则 “ * “ 等价于 “1 2 3”（传递了一个参数），而 “@” 等价于 “1” “2” “3”（传递了三个参数）。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"-- \\$* demo ---\"</span></div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"string\">\"$*\"</span>;<span class=\"keyword\">do</span></div><div class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"variable\">$i</span></div><div class=\"line\"><span class=\"keyword\">done</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"-- \\$@ demo ---\"</span></div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span>; <span class=\"keyword\">do</span></div><div class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"variable\">$i</span></div><div class=\"line\"><span class=\"keyword\">done</span></div></pre></td></tr></table></figure>\n<p>执行效果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ chmod +x test.sh </div><div class=\"line\">$ ./test.sh 1 2 3</div><div class=\"line\">-- $* 演示 ---</div><div class=\"line\">1 2 3</div><div class=\"line\">-- $@ 演示 ---</div><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Shell数组\"><a href=\"#Shell数组\" class=\"headerlink\" title=\"Shell数组\"></a>Shell数组</h2><p>Bash shell仅支持一维数组，不限定大小，初始化时候不需要指定大小。下标0开始，<code>()</code>包裹，空格分割元素。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">array=(a b c d)</div></pre></td></tr></table></figure>\n<ul>\n<li><p>读取数组</p>\n<p>格式<code>${array[index]}</code></p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/bash</div><div class=\"line\">my_array=(a b &quot;c&quot; d)</div><div class=\"line\"></div><div class=\"line\">echo &quot;first: $&#123;my_array[0]&#125;&quot;</div><div class=\"line\"></div><div class=\"line\">#然后执行文件，获得输出结果</div><div class=\"line\">#可用@或*来代替index获取所有元素</div></pre></td></tr></table></figure>\n<ul>\n<li><p>数组长度</p>\n<p>类似字符串的长度获取</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$&#123;#array[index]&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Shell运算符\"><a href=\"#Shell运算符\" class=\"headerlink\" title=\"Shell运算符\"></a>Shell运算符</h2><p>shell支持多种运算符：</p>\n<ul>\n<li>算数运算符</li>\n<li>关系运算符</li>\n<li>布尔运算符</li>\n<li>字符串运算符</li>\n<li>文件测试运算符</li>\n</ul>\n<p>原生Bash不支持简单的数学运算，可以用<code>awk</code>和<code>expr</code>实现。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/sh</span></div><div class=\"line\"></div><div class=\"line\">val=`expr 2 + 2`</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$val</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#注意，expr用反引号，表达式和运算符之间必须有空格，2+2就不行。</span></div></pre></td></tr></table></figure>\n<h3 id=\"1、算术运算符\"><a href=\"#1、算术运算符\" class=\"headerlink\" title=\"1、算术运算符\"></a>1、算术运算符</h3><p>若a = 10，b = 20</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>+</td>\n<td>加号</td>\n<td>`expr \\$a + \\$b`，result = 30</td>\n</tr>\n<tr>\n<td>-</td>\n<td>减号</td>\n<td>`expr \\$a - \\$b`，result = -10</td>\n</tr>\n<tr>\n<td>*</td>\n<td>乘号</td>\n<td>`expr \\$a * \\$b`，result = 200</td>\n</tr>\n<tr>\n<td>/</td>\n<td>除号</td>\n<td>`expr \\$b / \\$a`，result = 2</td>\n</tr>\n<tr>\n<td>%</td>\n<td>取余</td>\n<td>`expr \\$b % \\$a`，result=0</td>\n</tr>\n<tr>\n<td>=</td>\n<td>赋值</td>\n<td>a=$b，将b的值赋给a</td>\n</tr>\n<tr>\n<td>==</td>\n<td>相等，比较数字，同则true。</td>\n<td>[\\$a == \\$b]返回false</td>\n</tr>\n<tr>\n<td>!=</td>\n<td>不等，比较数字，不同的true。</td>\n<td>[\\$a != \\$b]返回true。</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/bash</div><div class=\"line\"># author:菜鸟教程</div><div class=\"line\"># url:www.runoob.com</div><div class=\"line\"></div><div class=\"line\">a=10</div><div class=\"line\">b=20</div><div class=\"line\"></div><div class=\"line\">val=`expr $a + $b`</div><div class=\"line\">echo &quot;a + b : $val&quot;</div><div class=\"line\"></div><div class=\"line\">val=`expr $a - $b`</div><div class=\"line\">echo &quot;a - b : $val&quot;</div><div class=\"line\"></div><div class=\"line\">val=`expr $a \\* $b`</div><div class=\"line\">echo &quot;a * b : $val&quot;</div><div class=\"line\"></div><div class=\"line\">val=`expr $b / $a`</div><div class=\"line\">echo &quot;b / a : $val&quot;</div><div class=\"line\"></div><div class=\"line\">val=`expr $b % $a`</div><div class=\"line\">echo &quot;b % a : $val&quot;</div><div class=\"line\"></div><div class=\"line\">if [ $a == $b ]</div><div class=\"line\">then</div><div class=\"line\">   echo &quot;a 等于 b&quot;</div><div class=\"line\">fi</div><div class=\"line\">if [ $a != $b ]</div><div class=\"line\">then</div><div class=\"line\">   echo &quot;a 不等于 b&quot;</div><div class=\"line\">fi</div></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">a + b : 30</div><div class=\"line\">a - b : -10</div><div class=\"line\">a * b : 200</div><div class=\"line\">b / a : 2</div><div class=\"line\">b % a : 0</div><div class=\"line\">a 不等于 b</div></pre></td></tr></table></figure>\n<p><strong>注意：</strong>条件表达式必须在<code>[]</code>之间，且必须有空格，如<strong>[\\$a==\\$b]</strong>是错的！</p>\n<blockquote>\n<p><code>*</code>乘号需要在<code>expr</code>表达式内用<code>\\</code>转义</p>\n<p>Mac电脑的shell的<code>expr</code>表达式：<strong>$((表达式))</strong>所以它的乘号<code>*</code>不用转义</p>\n</blockquote>\n<h3 id=\"2、关系运算符\"><a href=\"#2、关系运算符\" class=\"headerlink\" title=\"2、关系运算符\"></a>2、关系运算符</h3><p>布尔类型，关系运算符仅支持数字，除非字符串的值也是数字。示例，若a = 10 ,b = 20:</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-eq</td>\n<td>equal</td>\n</tr>\n<tr>\n<td>-ne</td>\n<td>not equal</td>\n</tr>\n<tr>\n<td>-gt</td>\n<td>great than</td>\n</tr>\n<tr>\n<td>-lt</td>\n<td>less than</td>\n</tr>\n<tr>\n<td>-ge</td>\n<td>great equal</td>\n</tr>\n<tr>\n<td>-le</td>\n<td>less equal</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"3、布尔运算符\"><a href=\"#3、布尔运算符\" class=\"headerlink\" title=\"3、布尔运算符\"></a>3、布尔运算符</h3><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>!</td>\n<td><code>非</code>运算，表达式为true，则返回false。</td>\n</tr>\n<tr>\n<td>-o</td>\n<td><code>或</code>运算，一个表达式为true，则返回true。</td>\n</tr>\n<tr>\n<td>-a</td>\n<td><code>与</code>运算，两个都true，才返回true。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"4、逻辑运算符\"><a href=\"#4、逻辑运算符\" class=\"headerlink\" title=\"4、逻辑运算符\"></a>4、逻辑运算符</h3><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&amp;&amp;</td>\n<td>逻辑and</td>\n</tr>\n<tr>\n<td>\\</td>\n<td>\\</td>\n<td></td>\n<td>逻辑 or</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"5、字符串运算符\"><a href=\"#5、字符串运算符\" class=\"headerlink\" title=\"5、字符串运算符\"></a>5、字符串运算符</h3><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>=</td>\n<td>检测两字符串是否相等</td>\n</tr>\n<tr>\n<td>!=</td>\n<td>检测两字符串是否不等</td>\n</tr>\n<tr>\n<td>-z</td>\n<td>zero检测字符串长度是否为0，0则true</td>\n</tr>\n<tr>\n<td>-n</td>\n<td>not zero检测字符串长度是否非0。</td>\n</tr>\n<tr>\n<td>str</td>\n<td>检测字符串是否为空，不空则true。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"6、文件测试运算符\"><a href=\"#6、文件测试运算符\" class=\"headerlink\" title=\"6、文件测试运算符\"></a>6、文件测试运算符</h3><p>用于检测类unix 文件的各种属性</p>\n<table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-b file</td>\n<td>是否是块设备文件，是则true</td>\n</tr>\n<tr>\n<td>-c file</td>\n<td>是否是字符设备文件，是则true</td>\n</tr>\n<tr>\n<td>-d file</td>\n<td>是否是目录，是则true</td>\n</tr>\n<tr>\n<td>-f file</td>\n<td>是否是普通文件(既非目录，亦非设备文件)，若是则true</td>\n</tr>\n<tr>\n<td>-g file</td>\n<td>是否设置了SGID位，是则true</td>\n</tr>\n<tr>\n<td>-k file</td>\n<td>是否设置粘着位，是则true</td>\n</tr>\n<tr>\n<td>-p file</td>\n<td>是否有名管道，是则true</td>\n</tr>\n<tr>\n<td>-u file</td>\n<td>是否设置SUID，是则true</td>\n</tr>\n<tr>\n<td>-r file</td>\n<td>是否可读，是则true</td>\n</tr>\n<tr>\n<td>-w file</td>\n<td>是否可写，是则true</td>\n</tr>\n<tr>\n<td>-x file</td>\n<td>是否可执行，是则true</td>\n</tr>\n<tr>\n<td>-s file</td>\n<td>是否为空或大小是否大于0，非空则true</td>\n</tr>\n<tr>\n<td>-e file</td>\n<td>是否存在，是则true</td>\n</tr>\n</tbody>\n</table>\n<p>==注意shell脚本的表达式都要在<code>[]</code>内哦==</p>\n<h2 id=\"Shell-echo命令\"><a href=\"#Shell-echo命令\" class=\"headerlink\" title=\"Shell echo命令\"></a>Shell echo命令</h2><p>类似于php的echo，shell的echo用于输出字符串，格式<code>echo string</code></p>\n<ul>\n<li>显示普通字符串</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo &quot;Hello World&quot;</div><div class=\"line\">#可以不带引号</div><div class=\"line\">echo Hello World</div></pre></td></tr></table></figure>\n<ul>\n<li><p>显示转义字符</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"\\\"It is a test\\\"\"</span></div><div class=\"line\"><span class=\"comment\">#输出结果</span></div><div class=\"line\"><span class=\"string\">\"It is a test\"</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>显示变量</p>\n<p><code>read</code>命令从标准输入中读取一行，并把输入行的每个字段指定给shell变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/sh</div><div class=\"line\">read name</div><div class=\"line\">echo &quot;$name It is a test&quot;</div><div class=\"line\"></div><div class=\"line\">#运行效果：</div><div class=\"line\">[root@www ~]# sh test.sh</div><div class=\"line\">OK                     #标准输入</div><div class=\"line\">OK It is a test        #输出</div></pre></td></tr></table></figure>\n</li>\n<li><p>显示换行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo -e &quot;Ok ! \\n&quot; # -e 开启转义</div><div class=\"line\">echo &quot;It is a test&quot;</div><div class=\"line\">#输出结果：注意ok后面有换行</div><div class=\"line\">OK!</div><div class=\"line\"></div><div class=\"line\">It it a tes</div></pre></td></tr></table></figure>\n</li>\n<li><p>显示不换行</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/sh</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"_\">-e</span> <span class=\"string\">\"OK! \\c\"</span> <span class=\"comment\"># -e 开启转义 \\c 不换行</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"It is a test\"</span></div><div class=\"line\"><span class=\"comment\">#结果：</span></div><div class=\"line\">OK! It is a <span class=\"built_in\">test</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>显示结果定向至文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo &quot;It is a test&quot; &gt; test.txt</div></pre></td></tr></table></figure>\n</li>\n<li><p>原样输出字符，不转义不取变量，需要结合单引号</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'$name\\\"'</span></div><div class=\"line\"><span class=\"comment\">#输出结果</span></div><div class=\"line\"><span class=\"variable\">$name</span>\\<span class=\"string\">\"</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>显示命令执行结果</p>\n<p>==命令用<code>` </code>来包裹==</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">echo</span> `data`</div><div class=\"line\"><span class=\"comment\">#结果：</span></div><div class=\"line\">Thu Jul 24 10:08:46 CST 2014</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Shell-printf命令\"><a href=\"#Shell-printf命令\" class=\"headerlink\" title=\"Shell printf命令\"></a>Shell printf命令</h2><p>类似C语言的printf()函数，shell使用printf会比echo更具有跨平台移植性。可以类似C的printf()函数使用一些复杂的表达式，printf不支持自动换行，需要借助<code>\\n</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">printf format-string [args...]</div></pre></td></tr></table></figure>\n<p>示例，模拟shell输出，</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">\"hello ,shell\"</span></div><div class=\"line\">hello ,shell</div><div class=\"line\">$ <span class=\"built_in\">printf</span> <span class=\"string\">\"hello ,shell \\n\"</span></div><div class=\"line\">hello ,shell</div><div class=\"line\">$</div></pre></td></tr></table></figure>\n<p>脚本化的printf命令使用：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"><span class=\"comment\"># author:菜鸟教程</span></div><div class=\"line\"><span class=\"comment\"># url:www.runoob.com</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">\"%-10s %-8s %-4s\\n\"</span> 姓名 性别 体重kg  </div><div class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">\"%-10s %-8s %-4.2f\\n\"</span> 郭靖 男 66.1234 </div><div class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">\"%-10s %-8s %-4.2f\\n\"</span> 杨过 男 48.6543 </div><div class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">\"%-10s %-8s %-4.2f\\n\"</span> 郭芙 女 47.9876</div></pre></td></tr></table></figure>\n<p>执行脚本，显示结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">姓名     性别   体重kg</div><div class=\"line\">郭靖     男      66.12</div><div class=\"line\">杨过     男      48.65</div><div class=\"line\">郭芙     女      47.99</div></pre></td></tr></table></figure>\n<p><code>%s,%c,%d,%f</code>都是格式替换符，<code>%-10s</code>指一个宽度为10个字符（-表示左对齐，没有则右对齐），任何字符都会被显示在10个字符宽的字符内，如果不足则自动以空格填充，超过也会将内容全部显示出来。</p>\n<p>%-4.2f 指格式化为小数，其中.2指保留2位小数。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"><span class=\"comment\"># author:菜鸟教程</span></div><div class=\"line\"><span class=\"comment\"># url:www.runoob.com</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># format-string为双引号</span></div><div class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">\"%d %s\\n\"</span> 1 <span class=\"string\">\"abc\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 单引号与双引号效果一样 </span></div><div class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">'%d %s\\n'</span> 1 <span class=\"string\">\"abc\"</span> </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 没有引号也可以输出</span></div><div class=\"line\"><span class=\"built_in\">printf</span> %s abcdef</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 格式只指定了一个参数，但多出的参数仍然会按照该格式输出，format-string 被重用</span></div><div class=\"line\"><span class=\"built_in\">printf</span> %s abc def</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">\"%s\\n\"</span> abc def</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">\"%s %s %s\\n\"</span> a b c d e f g h i j</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 如果没有 arguments，那么 %s 用NULL代替，%d 用 0 代替</span></div><div class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">\"%s and %d \\n\"</span></div></pre></td></tr></table></figure>\n<p><strong>Printf的转移序列</strong></p>\n<table>\n<thead>\n<tr>\n<th>序列</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\a</td>\n<td>警告字符，通常为ASCII的BEL字符</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>后退</td>\n</tr>\n<tr>\n<td>\\c</td>\n<td>抑制不显示输出结果中任何姐wide换行字符（只在%b格式指示控制符下的参数字符串中有效），而且任何留在参数里的字符，任何接下来的采纳书以及任何留在格式字符串中的字符，都被忽略。</td>\n</tr>\n<tr>\n<td>\\f</td>\n<td>换页</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td>换行</td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>回车</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td>水平tab</td>\n</tr>\n<tr>\n<td>\\v</td>\n<td>竖直tab</td>\n</tr>\n<tr>\n<td>\\\\</td>\n<td>转义后输出一个\\符号</td>\n</tr>\n<tr>\n<td>\\d     dd</td>\n<td>表示1–3位的八进制字符，仅在格式字符串中有效。</td>\n</tr>\n<tr>\n<td>\\0     dd      d</td>\n<td>表示1–3位的八进制字符</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Shell-text命令\"><a href=\"#Shell-text命令\" class=\"headerlink\" title=\"Shell text命令\"></a>Shell text命令</h2><p>shell中test命令用于测试条件是否成立，可进行数字、字符和文件的条件测试</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#用之前的各种运算符，测试test</span></div><div class=\"line\">num1=100</div><div class=\"line\">num2=200</div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">test</span> $[num1] <span class=\"_\">-eq</span> $[num2]</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">'true'</span></div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">'false'</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div></pre></td></tr></table></figure>\n<h2 id=\"Shell-流程控制\"><a href=\"#Shell-流程控制\" class=\"headerlink\" title=\"Shell 流程控制\"></a>Shell 流程控制</h2><p>区别于其他编程语言，shell的流程控制不可为空，如</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>(a&gt;b)&#123;</div><div class=\"line\">  System.out.println(<span class=\"string\">\"ok\"</span>);</div><div class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">  <span class=\"comment\">//此处不做任何事</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>但是在shell中不能出现不做任何事的分支语句</p>\n<h3 id=\"1、if-else\"><a href=\"#1、if-else\" class=\"headerlink\" title=\"1、if else\"></a>1、if else</h3><ul>\n<li><p>if语句格式</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> condition</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">\t<span class=\"built_in\">command</span>1</div><div class=\"line\">\t<span class=\"built_in\">command</span>2</div><div class=\"line\">\t...</div><div class=\"line\"><span class=\"keyword\">fi</span> <span class=\"comment\"># 是if的倒写</span></div></pre></td></tr></table></figure>\n<p>每个句子可以用<code>;</code>分号结束，可以写在一行好几个语句。</p>\n</li>\n<li><p>if else</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> condition</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">\t<span class=\"built_in\">command</span>1</div><div class=\"line\">\t<span class=\"built_in\">command</span>2</div><div class=\"line\">\t...</div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">\t<span class=\"built_in\">command</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>if else-if else</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> condition1</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">\t<span class=\"built_in\">command</span>1</div><div class=\"line\"><span class=\"keyword\">elif</span> condition2 <span class=\"comment\">#类似python中，else if是写作elif</span></div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">\t<span class=\"built_in\">command</span>2</div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">\t<span class=\"built_in\">command</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"2、for循环\"><a href=\"#2、for循环\" class=\"headerlink\" title=\"2、for循环\"></a>2、for循环</h3><p>shell的for循环格式：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> item1 item2 ... itemN</div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">\t<span class=\"built_in\">command</span>1</div><div class=\"line\">\t<span class=\"built_in\">command</span>2</div><div class=\"line\">\t...</div><div class=\"line\">\t</div><div class=\"line\"><span class=\"keyword\">done</span> <span class=\"comment\">#for循环结束的标识</span></div><div class=\"line\"><span class=\"comment\">#写成一行</span></div><div class=\"line\"><span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> item1 item2 ... itemN;<span class=\"keyword\">do</span> <span class=\"built_in\">command</span>1; <span class=\"built_in\">command</span>2;...;<span class=\"keyword\">done</span>;</div></pre></td></tr></table></figure>\n<h3 id=\"3、while语句\"><a href=\"#3、while语句\" class=\"headerlink\" title=\"3、while语句\"></a>3、while语句</h3><p>格式：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">while</span> condition</div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">\t<span class=\"built_in\">command</span></div><div class=\"line\"><span class=\"keyword\">done</span></div><div class=\"line\"><span class=\"comment\">#示例</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#!/bin/sh</span></div><div class=\"line\">int=1</div><div class=\"line\"><span class=\"keyword\">while</span>(( <span class=\"variable\">$int</span>&lt;=5 ))</div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"variable\">$int</span></div><div class=\"line\">        <span class=\"built_in\">let</span> <span class=\"string\">\"int++\"</span> <span class=\"comment\"># let是个关键命令</span></div><div class=\"line\"><span class=\"keyword\">done</span></div></pre></td></tr></table></figure>\n<p>可以结合<code>read</code>命令接收输入信息</p>\n<h3 id=\"4、无限循环\"><a href=\"#4、无限循环\" class=\"headerlink\" title=\"4、无限循环\"></a>4、无限循环</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">while</span> :</div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">\t<span class=\"built_in\">command</span></div><div class=\"line\"><span class=\"keyword\">done</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#或者</span></div><div class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">\t<span class=\"built_in\">command</span></div><div class=\"line\"><span class=\"keyword\">done</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#或者</span></div><div class=\"line\"><span class=\"keyword\">for</span> (( ; ; ))</div></pre></td></tr></table></figure>\n<h3 id=\"5、until循环\"><a href=\"#5、until循环\" class=\"headerlink\" title=\"5、until循环\"></a>5、until循环</h3><p>shell所有的<code>until</code>循环类似于一个特殊的for循环，知道满足条件时候才停止。一般还是<code>while</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">until condition</div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">\t<span class=\"built_in\">command</span></div><div class=\"line\"><span class=\"keyword\">done</span></div></pre></td></tr></table></figure>\n<p><strong>条件可为任意测试条件，测试发生在循环末尾，因此循环至少执行一次—请注意这一点。</strong></p>\n<h3 id=\"6、case\"><a href=\"#6、case\" class=\"headerlink\" title=\"6、case\"></a>6、case</h3><p>类似其他语言的switch…case语句</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">case</span> value <span class=\"keyword\">in</span></div><div class=\"line\">mode1)</div><div class=\"line\">\t<span class=\"built_in\">command</span>1</div><div class=\"line\">\t...</div><div class=\"line\">\t;; <span class=\"comment\">#case的结束标志</span></div><div class=\"line\">mode2)</div><div class=\"line\">\t<span class=\"built_in\">command</span>2</div><div class=\"line\">\t...</div><div class=\"line\">\t;;</div><div class=\"line\"><span class=\"keyword\">esac</span> <span class=\"comment\">#case的反写</span></div></pre></td></tr></table></figure>\n<p>value只会匹配一个case，或者不匹配，则mode可用*号通配</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'输入 1 到 4 之间的数字:'</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'你输入的数字为:'</span></div><div class=\"line\"><span class=\"built_in\">read</span> aNum</div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"variable\">$aNum</span> <span class=\"keyword\">in</span></div><div class=\"line\">    1)  <span class=\"built_in\">echo</span> <span class=\"string\">'你选择了 1'</span></div><div class=\"line\">    ;;</div><div class=\"line\">    2)  <span class=\"built_in\">echo</span> <span class=\"string\">'你选择了 2'</span></div><div class=\"line\">    ;;</div><div class=\"line\">    3)  <span class=\"built_in\">echo</span> <span class=\"string\">'你选择了 3'</span></div><div class=\"line\">    ;;</div><div class=\"line\">    4)  <span class=\"built_in\">echo</span> <span class=\"string\">'你选择了 4'</span></div><div class=\"line\">    ;;</div><div class=\"line\">    *)  <span class=\"built_in\">echo</span> <span class=\"string\">'你没有输入 1 到 4 之间的数字'</span></div><div class=\"line\">    ;;</div><div class=\"line\"><span class=\"keyword\">esac</span></div></pre></td></tr></table></figure>\n<h3 id=\"7、跳出循环\"><a href=\"#7、跳出循环\" class=\"headerlink\" title=\"7、跳出循环\"></a>7、跳出循环</h3><p>shell也使用<code>break</code>和<code>continue</code>来跳出循环。</p>\n<ul>\n<li><p>break</p>\n<p>跳出所有循环，终止后面的执行。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"><span class=\"keyword\">while</span> :</div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> -n <span class=\"string\">\"输入 1 到 5 之间的数字:\"</span></div><div class=\"line\">    <span class=\"built_in\">read</span> aNum</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"variable\">$aNum</span> <span class=\"keyword\">in</span></div><div class=\"line\">        1|2|3|4|5) <span class=\"built_in\">echo</span> <span class=\"string\">\"你输入的数字为 <span class=\"variable\">$aNum</span>!\"</span></div><div class=\"line\">        ;;</div><div class=\"line\">        *) <span class=\"built_in\">echo</span> <span class=\"string\">\"你输入的数字不是 1 到 5 之间的! 游戏结束\"</span></div><div class=\"line\">            <span class=\"built_in\">break</span></div><div class=\"line\">        ;;</div><div class=\"line\">    <span class=\"keyword\">esac</span></div><div class=\"line\"><span class=\"keyword\">done</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>continue</p>\n<p>跳出本次循环，执行下一轮循环</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"><span class=\"keyword\">while</span> :</div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> -n <span class=\"string\">\"输入 1 到 5 之间的数字: \"</span></div><div class=\"line\">    <span class=\"built_in\">read</span> aNum</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"variable\">$aNum</span> <span class=\"keyword\">in</span></div><div class=\"line\">        1|2|3|4|5) <span class=\"built_in\">echo</span> <span class=\"string\">\"你输入的数字为 <span class=\"variable\">$aNum</span>!\"</span></div><div class=\"line\">        ;;</div><div class=\"line\">        *) <span class=\"built_in\">echo</span> <span class=\"string\">\"你输入的数字不是 1 到 5 之间的!\"</span></div><div class=\"line\">            <span class=\"built_in\">continue</span></div><div class=\"line\">            <span class=\"built_in\">echo</span> <span class=\"string\">\"游戏结束\"</span></div><div class=\"line\">        ;;</div><div class=\"line\">    <span class=\"keyword\">esac</span></div><div class=\"line\"><span class=\"keyword\">done</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"8、esac\"><a href=\"#8、esac\" class=\"headerlink\" title=\"8、esac\"></a>8、esac</h3><p>case语句区别于C语言，用esac作为结束标志，<code>)</code>和<code>;;</code>标识每个case。</p>\n<h2 id=\"Shell函数\"><a href=\"#Shell函数\" class=\"headerlink\" title=\"Shell函数\"></a>Shell函数</h2><p>shell可以自定义函数，然后自己调用。函数格式：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#function 关键字为可选项，参数也是可选</span></div><div class=\"line\">[ <span class=\"keyword\">function</span> ] funname [()]</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">  </div><div class=\"line\">  action;</div><div class=\"line\">  </div><div class=\"line\">  [<span class=\"built_in\">return</span> int;]</div><div class=\"line\">  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>说明：</strong></p>\n<ol>\n<li>可以带function fun()定义，也可以fun()定义，不带参数。</li>\n<li>参数返回，可以显示加: return 返回，若不加，则返回最后一条指令结果。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/bash</div><div class=\"line\"># author:菜鸟教程</div><div class=\"line\"># url:www.runoob.com</div><div class=\"line\"></div><div class=\"line\">demoFun()&#123;</div><div class=\"line\">    echo &quot;这是我的第一个 shell 函数!&quot;</div><div class=\"line\">&#125;</div><div class=\"line\">echo &quot;-----函数开始执行-----&quot;</div><div class=\"line\">demoFun</div><div class=\"line\">echo &quot;-----函数执行完毕-----&quot;</div></pre></td></tr></table></figure>\n<p>含有返回值的函数：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"><span class=\"comment\"># author:菜鸟教程</span></div><div class=\"line\"><span class=\"comment\"># url:www.runoob.com</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"title\">funWithReturn</span></span>()&#123;</div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"这个函数会对输入的两个数字进行相加运算...\"</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"输入第一个数字: \"</span></div><div class=\"line\">    <span class=\"built_in\">read</span> aNum</div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"输入第二个数字: \"</span></div><div class=\"line\">    <span class=\"built_in\">read</span> anotherNum</div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"两个数字分别为 <span class=\"variable\">$aNum</span> 和 <span class=\"variable\">$anotherNum</span> !\"</span></div><div class=\"line\">    <span class=\"built_in\">return</span> $((<span class=\"variable\">$aNum</span>+<span class=\"variable\">$anotherNum</span>))</div><div class=\"line\">&#125;</div><div class=\"line\">funWithReturn</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"输入的两个数字之和为 $? !\"</span></div></pre></td></tr></table></figure>\n<p>==调用函数返回值，用<code>$?</code>符号==，函数必须在被调用前定义。</p>\n<ul>\n<li><p>函数参数</p>\n<p>在Shell中，调用函数时可以向其传递参数。在函数体内部，通过 $n 的形式来获取参数的值，例如，$1表示第一个参数，$2表示第二个参数…</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"><span class=\"comment\"># author:菜鸟教程</span></div><div class=\"line\"><span class=\"comment\"># url:www.runoob.com</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"title\">funWithParam</span></span>()&#123;</div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"第一个参数为 <span class=\"variable\">$1</span> !\"</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"第二个参数为 <span class=\"variable\">$2</span> !\"</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"第十个参数为 <span class=\"variable\">$10</span> !\"</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"第十个参数为 <span class=\"variable\">$&#123;10&#125;</span> !\"</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"第十一个参数为 <span class=\"variable\">$&#123;11&#125;</span> !\"</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"参数总数有 <span class=\"variable\">$#</span> 个!\"</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"作为一个字符串输出所有参数 $* !\"</span></div><div class=\"line\">&#125;</div><div class=\"line\">funWithParam 1 2 3 4 5 6 7 8 9 34 73</div><div class=\"line\"><span class=\"comment\">#输出结果：</span></div><div class=\"line\">第一个参数为 1 !</div><div class=\"line\">第二个参数为 2 !</div><div class=\"line\">第十个参数为 10 !</div><div class=\"line\">第十个参数为 34 !</div><div class=\"line\">第十一个参数为 73 !</div><div class=\"line\">参数总数有 11 个!</div><div class=\"line\">作为一个字符串输出所有参数 1 2 3 4 5 6 7 8 9 34 73 !</div></pre></td></tr></table></figure>\n<p><strong>注意：</strong>\\$10不能获取第10个参数，因为当n&gt;=10时候，要用\\$(n)来获取参数。</p>\n</li>\n</ul>\n<h2 id=\"Shell-输入-输出重定向\"><a href=\"#Shell-输入-输出重定向\" class=\"headerlink\" title=\"Shell 输入/输出重定向\"></a>Shell 输入/输出重定向</h2><p>类Uinx系统中，默认标准输入输出设备就是shell终端。重定向命令列表：</p>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>command &gt; file</td>\n<td>输出重定向到file</td>\n</tr>\n<tr>\n<td>command &lt; file</td>\n<td>输出重定向到file</td>\n</tr>\n<tr>\n<td>command &gt;&gt; file</td>\n<td>输出追加到file</td>\n</tr>\n<tr>\n<td>n &gt; file</td>\n<td>文件描述符为n的文件重定向到file</td>\n</tr>\n<tr>\n<td>n &gt;&gt; file</td>\n<td>文件描述符为n的文件追加到file</td>\n</tr>\n<tr>\n<td>n &gt;&amp; m</td>\n<td>输出文件m和n合并</td>\n</tr>\n<tr>\n<td>n &lt;&amp; m</td>\n<td>输入文件m和n合并</td>\n</tr>\n<tr>\n<td>&lt;&lt; tag</td>\n<td>开始标记tag和结束标记tag之间的内容作为输入</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p><strong>注意：</strong>需要注意的是文件描述符 0 通常是标准输入（STDIN），1 是标准输出（STDOUT），2 是标准错误输出（STDERR）。</p>\n</blockquote>\n<h3 id=\"1、输出重定向\"><a href=\"#1、输出重定向\" class=\"headerlink\" title=\"1、输出重定向\"></a>1、输出重定向</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">command</span>1 &gt; file1</div></pre></td></tr></table></figure>\n<p>若file1存在，则被替代。可以用<code>&gt;&gt;</code>追加符号，则不替代。</p>\n<h3 id=\"2、输入重定向\"><a href=\"#2、输入重定向\" class=\"headerlink\" title=\"2、输入重定向\"></a>2、输入重定向</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">command</span>1 &lt; file1</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">command1 &lt; infile &gt; outfile</div></pre></td></tr></table></figure>\n<p>同时替换输入和输出，执行command1，从文件infile读取内容，然后将输出写入到outfile中。</p>\n<h3 id=\"3、重定向深入讲解\"><a href=\"#3、重定向深入讲解\" class=\"headerlink\" title=\"3、重定向深入讲解\"></a>3、重定向深入讲解</h3><p>一般类unix系统命令运行会同时打开三个文件：</p>\n<ul>\n<li>标准输入文件(stdin)：stdin的文件描述符为0，Unix程序默认从stdin读取数据。</li>\n<li>标准输出文件(stdout)：stdout 的文件描述符为1，Unix程序默认向stdout输出数据。</li>\n<li>标准错误文件(stderr)：stderr的文件描述符为2，Unix程序会向stderr流中写入错误信息</li>\n</ul>\n<p>默认情况下，command &gt; file 将 stdout 重定向到 file，command &lt; file 将stdin 重定向到 file。</p>\n<p>如果希望 stderr 重定向到 file，可以这样写：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#模拟终端</span></div><div class=\"line\">$ <span class=\"built_in\">command</span> 2 &gt; file</div></pre></td></tr></table></figure>\n<p>若要追加<code>&gt;&gt;</code>符号，其中2代表标准错误文件的代号。</p>\n<p>如果希望将stdout和stderr合并后重定向到file</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">command</span> &gt; file 2&gt;&amp;1</div><div class=\"line\"><span class=\"comment\">#或者</span></div><div class=\"line\"><span class=\"built_in\">command</span> &gt;&gt; file 2&gt;&amp;1</div><div class=\"line\"><span class=\"comment\">#如果输入、输出都重定向</span></div><div class=\"line\"><span class=\"built_in\">command</span> &lt;file1 &gt;file2</div></pre></td></tr></table></figure>\n<h3 id=\"4、Here-Document\"><a href=\"#4、Here-Document\" class=\"headerlink\" title=\"4、Here Document\"></a>4、Here Document</h3><p>Here Document是shell的一种特殊重定向方式，用于将输入重定向到一个交互式shell脚本或程序：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">command</span> &lt;&lt; delimiter</div><div class=\"line\">\tdocument</div><div class=\"line\">delimiter</div></pre></td></tr></table></figure>\n<p>作用将delimiter之间的document作为输入传递给command</p>\n<p><strong>注意：</strong>结尾的<code>delimiter</code>前后不得有任何符号，包括tab和空格。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">wc <span class=\"_\">-l</span> &lt;&lt; EOF</div><div class=\"line\">\tnihao</div><div class=\"line\">\tzhendehenhao</div><div class=\"line\">\tshime</div><div class=\"line\">\tok</div><div class=\"line\">EOF </div><div class=\"line\"><span class=\"comment\">#输出结果，获得的EOF之间的内容的行数。</span></div><div class=\"line\">4</div></pre></td></tr></table></figure>\n<h3 id=\"5、-dev-null文件\"><a href=\"#5、-dev-null文件\" class=\"headerlink\" title=\"5、/dev/null文件\"></a>5、/dev/null文件</h3><p>若希望执行命令不在屏幕输出，可重定向到/dev/null</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">command</span> &gt; /dev/null</div></pre></td></tr></table></figure>\n<p><code>/dev/null</code>为特殊文件，写入的内容立即不见，不可读出。</p>\n<p>如果屏蔽stdout和stderr</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">command</span> &gt; /dev/null 2&gt;&amp;1</div></pre></td></tr></table></figure>\n<h2 id=\"Shell文件包含\"><a href=\"#Shell文件包含\" class=\"headerlink\" title=\"Shell文件包含\"></a>Shell文件包含</h2><p>shell也可以使用外部脚本，便于封装：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">. filename <span class=\"comment\">#注意点号(.)与文件名之间有空格</span></div><div class=\"line\">或</div><div class=\"line\"><span class=\"built_in\">source</span> filename</div></pre></td></tr></table></figure>\n<p>示例：test1.sh</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"><span class=\"comment\"># author:菜鸟教程</span></div><div class=\"line\"><span class=\"comment\"># url:www.runoob.com</span></div><div class=\"line\"></div><div class=\"line\">url=<span class=\"string\">\"http://www.runoob.com\"</span></div></pre></td></tr></table></figure>\n<p>test2.sh</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"><span class=\"comment\"># author:菜鸟教程</span></div><div class=\"line\"><span class=\"comment\"># url:www.runoob.com</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#使用 . 号来引用test1.sh 文件</span></div><div class=\"line\">. ./<span class=\"built_in\">test</span>1.sh</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 或者使用以下包含文件代码</span></div><div class=\"line\"><span class=\"comment\"># source ./test1.sh</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"菜鸟教程官网地址：<span class=\"variable\">$url</span>\"</span></div></pre></td></tr></table></figure>\n<p>执行时候test2.sh只需要test2.sh有执行权限即可，test1.sh不一定需要。</p>\n","excerpt":"","more":"<h1 id=\"Shell学习笔记\"><a href=\"#Shell学习笔记\" class=\"headerlink\" title=\"Shell学习笔记\"></a>Shell学习笔记</h1><!-- TOC -->\n<ul>\n<li><a href=\"#shell学习笔记\">Shell学习笔记</a><ul>\n<li><a href=\"#简介\">简介：</a></li>\n<li><a href=\"#shell教程入门\">Shell教程入门</a><ul>\n<li><a href=\"#1shell脚本\">1、shell脚本</a></li>\n<li><a href=\"#2shell脚本实践\">2、shell脚本实践</a></li>\n</ul>\n</li>\n<li><a href=\"#shell变量\">Shell变量</a><ul>\n<li><a href=\"#1使用变量\">1、使用变量</a></li>\n<li><a href=\"#2只读变量\">2、只读变量</a></li>\n<li><a href=\"#3删除变量\">3、删除变量</a></li>\n<li><a href=\"#4变量类型\">4、变量类型</a></li>\n<li><a href=\"#5shell字符串\">5、shell字符串</a></li>\n<li><a href=\"#6shell数组\">6、Shell数组</a></li>\n<li><a href=\"#7shell注释\">7、Shell注释</a></li>\n</ul>\n</li>\n<li><a href=\"#shell传递参数\">Shell传递参数</a><ul>\n<li><a href=\"#1实例\">1、实例</a></li>\n</ul>\n</li>\n<li><a href=\"#shell数组\">Shell数组</a></li>\n<li><a href=\"#shell运算符\">Shell运算符</a><ul>\n<li><a href=\"#1算术运算符\">1、算术运算符</a></li>\n<li><a href=\"#2关系运算符\">2、关系运算符</a></li>\n<li><a href=\"#3布尔运算符\">3、布尔运算符</a></li>\n<li><a href=\"#4逻辑运算符\">4、逻辑运算符</a></li>\n<li><a href=\"#5字符串运算符\">5、字符串运算符</a></li>\n<li><a href=\"#6文件测试运算符\">6、文件测试运算符</a></li>\n</ul>\n</li>\n<li><a href=\"#shell-echo命令\">Shell echo命令</a></li>\n<li><a href=\"#shell-printf命令\">Shell printf命令</a></li>\n<li><a href=\"#shell-text命令\">Shell text命令</a></li>\n<li><a href=\"#shell-流程控制\">Shell 流程控制</a><ul>\n<li><a href=\"#1if-else\">1、if else</a></li>\n<li><a href=\"#2for循环\">2、for循环</a></li>\n<li><a href=\"#3while语句\">3、while语句</a></li>\n<li><a href=\"#4无限循环\">4、无限循环</a></li>\n<li><a href=\"#5until循环\">5、until循环</a></li>\n<li><a href=\"#6case\">6、case</a></li>\n<li><a href=\"#7跳出循环\">7、跳出循环</a></li>\n<li><a href=\"#8esac\">8、esac</a></li>\n</ul>\n</li>\n<li><a href=\"#shell函数\">Shell函数</a></li>\n<li><a href=\"#shell-输入输出重定向\">Shell 输入/输出重定向</a><ul>\n<li><a href=\"#1输出重定向\">1、输出重定向</a></li>\n<li><a href=\"#2输入重定向\">2、输入重定向</a></li>\n<li><a href=\"#3重定向深入讲解\">3、重定向深入讲解</a></li>\n<li><a href=\"#4here-document\">4、Here Document</a></li>\n<li><a href=\"#5devnull文件\">5、/dev/null文件</a></li>\n</ul>\n</li>\n<li><a href=\"#shell文件包含\">Shell文件包含</a></li>\n</ul>\n</li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"简介：\"><a href=\"#简介：\" class=\"headerlink\" title=\"简介：\"></a>简介：</h2><p>Shell 是一个用C语言编写的程序，它是用户使用Linux的桥梁。Shell既是一种命令语言，又是一种程序设计语言。</p>\n<p>Shell 是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的服务。</p>\n<p>Ken Thompson的sh是第一种Unix Shell，Windows Explorer是一个典型的图形界面Shell。</p>\n<h2 id=\"Shell教程入门\"><a href=\"#Shell教程入门\" class=\"headerlink\" title=\"Shell教程入门\"></a>Shell教程入门</h2><h3 id=\"1、shell脚本\"><a href=\"#1、shell脚本\" class=\"headerlink\" title=\"1、shell脚本\"></a>1、shell脚本</h3><blockquote>\n<p>shell脚本<code>shell script</code>，是一种为shell而编写的脚本程序。然而通常所说的shell却是指shell脚本，而非shell本身。</p>\n</blockquote>\n<p>Linux系统shell种类众多，常用的有<code>sh</code>和<code>bash</code>。</p>\n<h3 id=\"2、shell脚本实践\"><a href=\"#2、shell脚本实践\" class=\"headerlink\" title=\"2、shell脚本实践\"></a>2、shell脚本实践</h3><p>shell脚本用<code>#!/bin/bash</code>或<code>#!/bin/sh</code>之类的方式，制定运行脚本的shell,<code>#!</code>是识别符号。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/sh</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Hello World\"</span></div></pre></td></tr></table></figure>\n<p><strong>运行shell脚本的两种方法：</strong></p>\n<ul>\n<li><p>作为可执行程序</p>\n<p>将shell文本保存为<code>.sh</code>格式文件，赋予执行权限</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">chmod + x ./test.sh <span class=\"comment\"># 赋予可执行权限</span></div><div class=\"line\">./test.sh <span class=\"comment\">#执行脚本，注意此处需要指明当前目录下的test.sh哦，不然会去path路径找的，呵呵。</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>作为解释其参数</p>\n<p>直接解释运行,如此就不用写<code>#!/bin/sh</code>之类的引用注释了。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">/bin/sh test.sh</div><div class=\"line\"><span class=\"comment\"># 类似java、php、python脚本</span></div><div class=\"line\">/bin/php test.php</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Shell变量\"><a href=\"#Shell变量\" class=\"headerlink\" title=\"Shell变量\"></a>Shell变量</h2><p>变量命名语法，不需要<code>$</code>符号，php需要。命名要求：</p>\n<ul>\n<li>首字母必须字母<code>a-z或A-Z</code></li>\n<li>不能空格，可用<code>_</code></li>\n<li>不能标点</li>\n<li>不能使用<code>bash</code>关键字</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#注意，不同于其他编程语言，等号之间不要有空格。</span></div><div class=\"line\">your_variable=<span class=\"string\">\"your,name\"</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 使用语句给变量赋值，如下循环显示出/etc目录下的文件名</div><div class=\"line\">for file in &apos;ls /etc&apos;</div></pre></td></tr></table></figure>\n<h3 id=\"1、使用变量\"><a href=\"#1、使用变量\" class=\"headerlink\" title=\"1、使用变量\"></a>1、使用变量</h3><p>使用已定义变量，只需在变量前加<code>$</code>符号即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">your_variable=&apos;yourname&apos;</div><div class=\"line\">echo $your_variable</div><div class=\"line\">echo $(your_variable)</div></pre></td></tr></table></figure>\n<p>变量名可以加<code>{}</code>来标识变量名的范围，如：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> skill <span class=\"keyword\">in</span> Ada Coffe Action Java; <span class=\"keyword\">do</span></div><div class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">\"I am good at <span class=\"variable\">$&#123;skill&#125;</span>Script\"</span></div><div class=\"line\"><span class=\"keyword\">done</span></div></pre></td></tr></table></figure>\n<p><em>如果不加<code>{}</code>，<code>skill</code>就可能被认为<code>skillScript</code>而导致变量找不到</em></p>\n<p>已定义的变量可重新定义：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">your_name=<span class=\"string\">\"tom\"</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$your_name</span></div><div class=\"line\">your_name=<span class=\"string\">\"john\"</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$your_name</span></div></pre></td></tr></table></figure>\n<h3 id=\"2、只读变量\"><a href=\"#2、只读变量\" class=\"headerlink\" title=\"2、只读变量\"></a>2、只读变量</h3><p>使用<code>readonly</code>命令将变量只读，则不可再改变，否则报错。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\">myUrl=<span class=\"string\">\"http://www.w3cschool.cc\"</span></div><div class=\"line\"><span class=\"built_in\">readonly</span> myUrl</div><div class=\"line\">myUrl=<span class=\"string\">\"new url\"</span> <span class=\"comment\">#此处就会报错，因为变量只读了。</span></div></pre></td></tr></table></figure>\n<h3 id=\"3、删除变量\"><a href=\"#3、删除变量\" class=\"headerlink\" title=\"3、删除变量\"></a>3、删除变量</h3><p>使用<code>unset</code>命令删除变量：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">unset</span> variable_name</div></pre></td></tr></table></figure>\n<p>==删除变量后不能再用，而<code>unset</code>不能删除只读变量==</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/sh</span></div><div class=\"line\">myUrl=<span class=\"string\">\"http://www.google.com\"</span></div><div class=\"line\"><span class=\"built_in\">unset</span> myUrl</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$myUrl</span> <span class=\"comment\">#此时输出就没接过了，因为变量被删除了。</span></div></pre></td></tr></table></figure>\n<h3 id=\"4、变量类型\"><a href=\"#4、变量类型\" class=\"headerlink\" title=\"4、变量类型\"></a>4、变量类型</h3><p>运行shell时，会同时存在三种变量：</p>\n<ul>\n<li>局部变量：脚本中定义的变量，仅作用于本shell脚本内。</li>\n<li>环境变量：所有程序，包括shell启动程序都能访问的环境变量。</li>\n<li>shell变量：shell程序的特殊变量。</li>\n</ul>\n<h3 id=\"5、shell字符串\"><a href=\"#5、shell字符串\" class=\"headerlink\" title=\"5、shell字符串\"></a>5、shell字符串</h3><p>shell常用<code>number</code>和<code>string</code>，其中<code>string</code>可以单引号、双引号或者不用引号。但是略有区别：</p>\n<ul>\n<li><p>单引号</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">str=<span class=\"string\">'string test'</span></div></pre></td></tr></table></figure>\n<p>单引号<code>&#39;&#39;</code>之间的字符原样输出，里面的变量也会失效。其内部不能再有单引号，哪怕转义符号都失效。</p>\n</li>\n<li><p>双引号</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">your_name=&apos;your name&apos;</div><div class=\"line\">str=&quot;Hello ,world ,\\&quot;$your_name\\&quot;! \\n&quot;</div></pre></td></tr></table></figure>\n<p>双引号里面可以有变量，可以有转义符号。</p>\n</li>\n<li><p>字符串拼接</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">n1=<span class=\"string\">\"abc\"</span></div><div class=\"line\"><span class=\"built_in\">test</span>=<span class=\"string\">\"hello, \"</span><span class=\"variable\">$n1</span><span class=\"string\">\" !\"</span></div><div class=\"line\"><span class=\"built_in\">test</span>1=<span class=\"string\">\"hello, <span class=\"variable\">$&#123;n1&#125;</span> !\"</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$test</span> <span class=\"variable\">$test1</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>获取字符串长度</p>\n<p>使用<code>#</code>标识变量长度</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">str=<span class=\"string\">\"abcdef\"</span></div><div class=\"line\"><span class=\"comment\">#输出字符串长度</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;#str&#125;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>获取子字符串</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">str=<span class=\"string\">\"abcdef\"</span></div><div class=\"line\"><span class=\"comment\">#下标从左至右，0开始，</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;str:1:4&#125;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>查找子字符串</p>\n<p>使用`符号</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">str=<span class=\"string\">\"hello world nihaome\"</span></div><div class=\"line\"><span class=\"comment\">#查找字符i或s的位置,反引号</span></div><div class=\"line\"><span class=\"built_in\">echo</span> `expr index <span class=\"string\">\"<span class=\"variable\">$str</span>\"</span> is`</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"6、Shell数组\"><a href=\"#6、Shell数组\" class=\"headerlink\" title=\"6、Shell数组\"></a>6、Shell数组</h3><p>bash仅支持一维数组，可利用下标或表达式操作元素。</p>\n<ul>\n<li><p>定义数组</p>\n<p>shell中使用<code>()</code>表示数组，元素用空格来分割。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">array=(1 2 3 4 5 6 7)</div><div class=\"line\"><span class=\"comment\">#或者</span></div><div class=\"line\">array=(</div><div class=\"line\">a</div><div class=\"line\">b</div><div class=\"line\">c</div><div class=\"line\">)</div><div class=\"line\"><span class=\"comment\">#也可以单独定义,下标可以不连续，也无范围限制。</span></div><div class=\"line\">array[0]=1</div><div class=\"line\">array[1]=2</div><div class=\"line\">array[3]=7</div></pre></td></tr></table></figure>\n</li>\n<li><p>读取数组</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">variable=<span class=\"variable\">$&#123;array[index]&#125;</span></div><div class=\"line\"><span class=\"comment\"># @符号代替index表示获取所有元素</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;variable[@]&#125;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>获取数组长度</p>\n<p>类似字符串的获取</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#获取元素个数</span></div><div class=\"line\">length=<span class=\"variable\">$&#123;#array_name[@]&#125;</span></div><div class=\"line\"><span class=\"comment\">#或者*通配符</span></div><div class=\"line\">length=<span class=\"variable\">$&#123;#array_name[*]&#125;</span></div><div class=\"line\"><span class=\"comment\">#获取数组单个元素的长度</span></div><div class=\"line\">length_n=<span class=\"variable\">$&#123;#array_name[n]&#125;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"7、Shell注释\"><a href=\"#7、Shell注释\" class=\"headerlink\" title=\"7、Shell注释\"></a>7、Shell注释</h3><p>使用<code>#</code>至于行首，表示该行注释，shell无多行注释，只能每行都<code>#</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#-----------------------</span></div><div class=\"line\"><span class=\"comment\">#我是个多行注释</span></div><div class=\"line\"><span class=\"comment\">#但是只能这么写</span></div><div class=\"line\"><span class=\"comment\">#-----------------------</span></div></pre></td></tr></table></figure>\n<p>要是多行代码需要注释，可以将定义为函数，加<code>{}</code>包裹起来，该函数不被调用，则类似于注释掉。</p>\n<h2 id=\"Shell传递参数\"><a href=\"#Shell传递参数\" class=\"headerlink\" title=\"Shell传递参数\"></a>Shell传递参数</h2><p>在执行shell脚本时，可以向脚本传递参数，脚本内获取参数的格式：<code>$n</code>，n代表数字编号，为脚本内需要获取的参数的编号。</p>\n<h3 id=\"1、实例\"><a href=\"#1、实例\" class=\"headerlink\" title=\"1、实例\"></a>1、实例</h3><p>示例向脚本传递三个参数，并输出，<code>$0</code>为执行文件名：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/bash</div><div class=\"line\">#传参测试</div><div class=\"line\"></div><div class=\"line\">echo &quot;Shell 传参测试&quot;;</div><div class=\"line\">echo &quot;file name: $0&quot;;</div><div class=\"line\">echo &quot;first variable: $1&quot;;</div><div class=\"line\">echo &quot;second variable: $2&quot;</div><div class=\"line\">echo &quot;third variable: $3&quot;;</div></pre></td></tr></table></figure>\n<p>通过赋予权限，或者指定执行，可实现输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ chmod +x test.sh</div><div class=\"line\"># $符号在次表示root用户执行，下面是传入1，2，3，三个数到脚本</div><div class=\"line\">$ ./test.sh 1 2 3 </div><div class=\"line\"></div><div class=\"line\">#输出结果：</div><div class=\"line\">Shell 传参测试</div><div class=\"line\">file name: ./test.sh</div><div class=\"line\">first variable: 1</div><div class=\"line\">second variable 2</div><div class=\"line\">third variable 3</div></pre></td></tr></table></figure>\n<p>另有几个特殊字符处理参数：</p>\n<table>\n<thead>\n<tr>\n<th>参数处理</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$#</td>\n<td>传递到脚本的参数的个数</td>\n</tr>\n<tr>\n<td>$*</td>\n<td>以一个单字符串显示所有向脚本传递的参数。</td>\n</tr>\n<tr>\n<td>$$</td>\n<td>脚本运行的当前进程ID号</td>\n</tr>\n<tr>\n<td>$!</td>\n<td>后台运行的最后一个进程的ID号</td>\n</tr>\n<tr>\n<td>$@</td>\n<td>类似$*，使用时许加引号，并在引号中返回每个参数。</td>\n</tr>\n<tr>\n<td>$-</td>\n<td>显示shell使用的当前选选项，类似<code>set</code>命令</td>\n</tr>\n<tr>\n<td>$?</td>\n<td>显示最后命令的退出状态。0 表示无错误。其他都是错。</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/sh</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Shell 传递参数实例！\"</span>;</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"第一个参数为：<span class=\"variable\">$1</span>\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"参数个数为：<span class=\"variable\">$#</span>\"</span>;</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"传递的参数作为一个字符串显示：$*\"</span>;</div></pre></td></tr></table></figure>\n<p>执行效果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ chmod +x test.sh </div><div class=\"line\">$ ./test.sh 1 2 3</div><div class=\"line\">Shell 传递参数实例！</div><div class=\"line\">第一个参数为：1</div><div class=\"line\">参数个数为：3</div><div class=\"line\">传递的参数作为一个字符串显示：1 2 3</div></pre></td></tr></table></figure>\n<p><code>$*</code>与<code>$@</code>的异同：</p>\n<ul>\n<li><p>都是应用所有参数</p>\n</li>\n<li><p>不同：只有在双引号中体现。假设在脚本运行时写了三个参数 1、2、3，，则 “ * “ 等价于 “1 2 3”（传递了一个参数），而 “@” 等价于 “1” “2” “3”（传递了三个参数）。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"-- \\$* demo ---\"</span></div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"string\">\"$*\"</span>;<span class=\"keyword\">do</span></div><div class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"variable\">$i</span></div><div class=\"line\"><span class=\"keyword\">done</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"-- \\$@ demo ---\"</span></div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span>; <span class=\"keyword\">do</span></div><div class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"variable\">$i</span></div><div class=\"line\"><span class=\"keyword\">done</span></div></pre></td></tr></table></figure>\n<p>执行效果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ chmod +x test.sh </div><div class=\"line\">$ ./test.sh 1 2 3</div><div class=\"line\">-- $* 演示 ---</div><div class=\"line\">1 2 3</div><div class=\"line\">-- $@ 演示 ---</div><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Shell数组\"><a href=\"#Shell数组\" class=\"headerlink\" title=\"Shell数组\"></a>Shell数组</h2><p>Bash shell仅支持一维数组，不限定大小，初始化时候不需要指定大小。下标0开始，<code>()</code>包裹，空格分割元素。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">array=(a b c d)</div></pre></td></tr></table></figure>\n<ul>\n<li><p>读取数组</p>\n<p>格式<code>${array[index]}</code></p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/bash</div><div class=\"line\">my_array=(a b &quot;c&quot; d)</div><div class=\"line\"></div><div class=\"line\">echo &quot;first: $&#123;my_array[0]&#125;&quot;</div><div class=\"line\"></div><div class=\"line\">#然后执行文件，获得输出结果</div><div class=\"line\">#可用@或*来代替index获取所有元素</div></pre></td></tr></table></figure>\n<ul>\n<li><p>数组长度</p>\n<p>类似字符串的长度获取</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$&#123;#array[index]&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Shell运算符\"><a href=\"#Shell运算符\" class=\"headerlink\" title=\"Shell运算符\"></a>Shell运算符</h2><p>shell支持多种运算符：</p>\n<ul>\n<li>算数运算符</li>\n<li>关系运算符</li>\n<li>布尔运算符</li>\n<li>字符串运算符</li>\n<li>文件测试运算符</li>\n</ul>\n<p>原生Bash不支持简单的数学运算，可以用<code>awk</code>和<code>expr</code>实现。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/sh</span></div><div class=\"line\"></div><div class=\"line\">val=`expr 2 + 2`</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$val</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#注意，expr用反引号，表达式和运算符之间必须有空格，2+2就不行。</span></div></pre></td></tr></table></figure>\n<h3 id=\"1、算术运算符\"><a href=\"#1、算术运算符\" class=\"headerlink\" title=\"1、算术运算符\"></a>1、算术运算符</h3><p>若a = 10，b = 20</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>+</td>\n<td>加号</td>\n<td>`expr \\$a + \\$b`，result = 30</td>\n</tr>\n<tr>\n<td>-</td>\n<td>减号</td>\n<td>`expr \\$a - \\$b`，result = -10</td>\n</tr>\n<tr>\n<td>*</td>\n<td>乘号</td>\n<td>`expr \\$a * \\$b`，result = 200</td>\n</tr>\n<tr>\n<td>/</td>\n<td>除号</td>\n<td>`expr \\$b / \\$a`，result = 2</td>\n</tr>\n<tr>\n<td>%</td>\n<td>取余</td>\n<td>`expr \\$b % \\$a`，result=0</td>\n</tr>\n<tr>\n<td>=</td>\n<td>赋值</td>\n<td>a=$b，将b的值赋给a</td>\n</tr>\n<tr>\n<td>==</td>\n<td>相等，比较数字，同则true。</td>\n<td>[\\$a == \\$b]返回false</td>\n</tr>\n<tr>\n<td>!=</td>\n<td>不等，比较数字，不同的true。</td>\n<td>[\\$a != \\$b]返回true。</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/bash</div><div class=\"line\"># author:菜鸟教程</div><div class=\"line\"># url:www.runoob.com</div><div class=\"line\"></div><div class=\"line\">a=10</div><div class=\"line\">b=20</div><div class=\"line\"></div><div class=\"line\">val=`expr $a + $b`</div><div class=\"line\">echo &quot;a + b : $val&quot;</div><div class=\"line\"></div><div class=\"line\">val=`expr $a - $b`</div><div class=\"line\">echo &quot;a - b : $val&quot;</div><div class=\"line\"></div><div class=\"line\">val=`expr $a \\* $b`</div><div class=\"line\">echo &quot;a * b : $val&quot;</div><div class=\"line\"></div><div class=\"line\">val=`expr $b / $a`</div><div class=\"line\">echo &quot;b / a : $val&quot;</div><div class=\"line\"></div><div class=\"line\">val=`expr $b % $a`</div><div class=\"line\">echo &quot;b % a : $val&quot;</div><div class=\"line\"></div><div class=\"line\">if [ $a == $b ]</div><div class=\"line\">then</div><div class=\"line\">   echo &quot;a 等于 b&quot;</div><div class=\"line\">fi</div><div class=\"line\">if [ $a != $b ]</div><div class=\"line\">then</div><div class=\"line\">   echo &quot;a 不等于 b&quot;</div><div class=\"line\">fi</div></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">a + b : 30</div><div class=\"line\">a - b : -10</div><div class=\"line\">a * b : 200</div><div class=\"line\">b / a : 2</div><div class=\"line\">b % a : 0</div><div class=\"line\">a 不等于 b</div></pre></td></tr></table></figure>\n<p><strong>注意：</strong>条件表达式必须在<code>[]</code>之间，且必须有空格，如<strong>[\\$a==\\$b]</strong>是错的！</p>\n<blockquote>\n<p><code>*</code>乘号需要在<code>expr</code>表达式内用<code>\\</code>转义</p>\n<p>Mac电脑的shell的<code>expr</code>表达式：<strong>$((表达式))</strong>所以它的乘号<code>*</code>不用转义</p>\n</blockquote>\n<h3 id=\"2、关系运算符\"><a href=\"#2、关系运算符\" class=\"headerlink\" title=\"2、关系运算符\"></a>2、关系运算符</h3><p>布尔类型，关系运算符仅支持数字，除非字符串的值也是数字。示例，若a = 10 ,b = 20:</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-eq</td>\n<td>equal</td>\n</tr>\n<tr>\n<td>-ne</td>\n<td>not equal</td>\n</tr>\n<tr>\n<td>-gt</td>\n<td>great than</td>\n</tr>\n<tr>\n<td>-lt</td>\n<td>less than</td>\n</tr>\n<tr>\n<td>-ge</td>\n<td>great equal</td>\n</tr>\n<tr>\n<td>-le</td>\n<td>less equal</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"3、布尔运算符\"><a href=\"#3、布尔运算符\" class=\"headerlink\" title=\"3、布尔运算符\"></a>3、布尔运算符</h3><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>!</td>\n<td><code>非</code>运算，表达式为true，则返回false。</td>\n</tr>\n<tr>\n<td>-o</td>\n<td><code>或</code>运算，一个表达式为true，则返回true。</td>\n</tr>\n<tr>\n<td>-a</td>\n<td><code>与</code>运算，两个都true，才返回true。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"4、逻辑运算符\"><a href=\"#4、逻辑运算符\" class=\"headerlink\" title=\"4、逻辑运算符\"></a>4、逻辑运算符</h3><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&amp;&amp;</td>\n<td>逻辑and</td>\n</tr>\n<tr>\n<td>\\</td>\n<td>\\</td>\n<td></td>\n<td>逻辑 or</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"5、字符串运算符\"><a href=\"#5、字符串运算符\" class=\"headerlink\" title=\"5、字符串运算符\"></a>5、字符串运算符</h3><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>=</td>\n<td>检测两字符串是否相等</td>\n</tr>\n<tr>\n<td>!=</td>\n<td>检测两字符串是否不等</td>\n</tr>\n<tr>\n<td>-z</td>\n<td>zero检测字符串长度是否为0，0则true</td>\n</tr>\n<tr>\n<td>-n</td>\n<td>not zero检测字符串长度是否非0。</td>\n</tr>\n<tr>\n<td>str</td>\n<td>检测字符串是否为空，不空则true。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"6、文件测试运算符\"><a href=\"#6、文件测试运算符\" class=\"headerlink\" title=\"6、文件测试运算符\"></a>6、文件测试运算符</h3><p>用于检测类unix 文件的各种属性</p>\n<table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-b file</td>\n<td>是否是块设备文件，是则true</td>\n</tr>\n<tr>\n<td>-c file</td>\n<td>是否是字符设备文件，是则true</td>\n</tr>\n<tr>\n<td>-d file</td>\n<td>是否是目录，是则true</td>\n</tr>\n<tr>\n<td>-f file</td>\n<td>是否是普通文件(既非目录，亦非设备文件)，若是则true</td>\n</tr>\n<tr>\n<td>-g file</td>\n<td>是否设置了SGID位，是则true</td>\n</tr>\n<tr>\n<td>-k file</td>\n<td>是否设置粘着位，是则true</td>\n</tr>\n<tr>\n<td>-p file</td>\n<td>是否有名管道，是则true</td>\n</tr>\n<tr>\n<td>-u file</td>\n<td>是否设置SUID，是则true</td>\n</tr>\n<tr>\n<td>-r file</td>\n<td>是否可读，是则true</td>\n</tr>\n<tr>\n<td>-w file</td>\n<td>是否可写，是则true</td>\n</tr>\n<tr>\n<td>-x file</td>\n<td>是否可执行，是则true</td>\n</tr>\n<tr>\n<td>-s file</td>\n<td>是否为空或大小是否大于0，非空则true</td>\n</tr>\n<tr>\n<td>-e file</td>\n<td>是否存在，是则true</td>\n</tr>\n</tbody>\n</table>\n<p>==注意shell脚本的表达式都要在<code>[]</code>内哦==</p>\n<h2 id=\"Shell-echo命令\"><a href=\"#Shell-echo命令\" class=\"headerlink\" title=\"Shell echo命令\"></a>Shell echo命令</h2><p>类似于php的echo，shell的echo用于输出字符串，格式<code>echo string</code></p>\n<ul>\n<li>显示普通字符串</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo &quot;Hello World&quot;</div><div class=\"line\">#可以不带引号</div><div class=\"line\">echo Hello World</div></pre></td></tr></table></figure>\n<ul>\n<li><p>显示转义字符</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"\\\"It is a test\\\"\"</span></div><div class=\"line\"><span class=\"comment\">#输出结果</span></div><div class=\"line\"><span class=\"string\">\"It is a test\"</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>显示变量</p>\n<p><code>read</code>命令从标准输入中读取一行，并把输入行的每个字段指定给shell变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/sh</div><div class=\"line\">read name</div><div class=\"line\">echo &quot;$name It is a test&quot;</div><div class=\"line\"></div><div class=\"line\">#运行效果：</div><div class=\"line\">[root@www ~]# sh test.sh</div><div class=\"line\">OK                     #标准输入</div><div class=\"line\">OK It is a test        #输出</div></pre></td></tr></table></figure>\n</li>\n<li><p>显示换行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo -e &quot;Ok ! \\n&quot; # -e 开启转义</div><div class=\"line\">echo &quot;It is a test&quot;</div><div class=\"line\">#输出结果：注意ok后面有换行</div><div class=\"line\">OK!</div><div class=\"line\"></div><div class=\"line\">It it a tes</div></pre></td></tr></table></figure>\n</li>\n<li><p>显示不换行</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/sh</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"_\">-e</span> <span class=\"string\">\"OK! \\c\"</span> <span class=\"comment\"># -e 开启转义 \\c 不换行</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"It is a test\"</span></div><div class=\"line\"><span class=\"comment\">#结果：</span></div><div class=\"line\">OK! It is a <span class=\"built_in\">test</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>显示结果定向至文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo &quot;It is a test&quot; &gt; test.txt</div></pre></td></tr></table></figure>\n</li>\n<li><p>原样输出字符，不转义不取变量，需要结合单引号</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'$name\\\"'</span></div><div class=\"line\"><span class=\"comment\">#输出结果</span></div><div class=\"line\"><span class=\"variable\">$name</span>\\<span class=\"string\">\"</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>显示命令执行结果</p>\n<p>==命令用<code>` </code>来包裹==</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">echo</span> `data`</div><div class=\"line\"><span class=\"comment\">#结果：</span></div><div class=\"line\">Thu Jul 24 10:08:46 CST 2014</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Shell-printf命令\"><a href=\"#Shell-printf命令\" class=\"headerlink\" title=\"Shell printf命令\"></a>Shell printf命令</h2><p>类似C语言的printf()函数，shell使用printf会比echo更具有跨平台移植性。可以类似C的printf()函数使用一些复杂的表达式，printf不支持自动换行，需要借助<code>\\n</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">printf format-string [args...]</div></pre></td></tr></table></figure>\n<p>示例，模拟shell输出，</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">\"hello ,shell\"</span></div><div class=\"line\">hello ,shell</div><div class=\"line\">$ <span class=\"built_in\">printf</span> <span class=\"string\">\"hello ,shell \\n\"</span></div><div class=\"line\">hello ,shell</div><div class=\"line\">$</div></pre></td></tr></table></figure>\n<p>脚本化的printf命令使用：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"><span class=\"comment\"># author:菜鸟教程</span></div><div class=\"line\"><span class=\"comment\"># url:www.runoob.com</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">\"%-10s %-8s %-4s\\n\"</span> 姓名 性别 体重kg  </div><div class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">\"%-10s %-8s %-4.2f\\n\"</span> 郭靖 男 66.1234 </div><div class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">\"%-10s %-8s %-4.2f\\n\"</span> 杨过 男 48.6543 </div><div class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">\"%-10s %-8s %-4.2f\\n\"</span> 郭芙 女 47.9876</div></pre></td></tr></table></figure>\n<p>执行脚本，显示结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">姓名     性别   体重kg</div><div class=\"line\">郭靖     男      66.12</div><div class=\"line\">杨过     男      48.65</div><div class=\"line\">郭芙     女      47.99</div></pre></td></tr></table></figure>\n<p><code>%s,%c,%d,%f</code>都是格式替换符，<code>%-10s</code>指一个宽度为10个字符（-表示左对齐，没有则右对齐），任何字符都会被显示在10个字符宽的字符内，如果不足则自动以空格填充，超过也会将内容全部显示出来。</p>\n<p>%-4.2f 指格式化为小数，其中.2指保留2位小数。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"><span class=\"comment\"># author:菜鸟教程</span></div><div class=\"line\"><span class=\"comment\"># url:www.runoob.com</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># format-string为双引号</span></div><div class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">\"%d %s\\n\"</span> 1 <span class=\"string\">\"abc\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 单引号与双引号效果一样 </span></div><div class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">'%d %s\\n'</span> 1 <span class=\"string\">\"abc\"</span> </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 没有引号也可以输出</span></div><div class=\"line\"><span class=\"built_in\">printf</span> %s abcdef</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 格式只指定了一个参数，但多出的参数仍然会按照该格式输出，format-string 被重用</span></div><div class=\"line\"><span class=\"built_in\">printf</span> %s abc def</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">\"%s\\n\"</span> abc def</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">\"%s %s %s\\n\"</span> a b c d e f g h i j</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 如果没有 arguments，那么 %s 用NULL代替，%d 用 0 代替</span></div><div class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">\"%s and %d \\n\"</span></div></pre></td></tr></table></figure>\n<p><strong>Printf的转移序列</strong></p>\n<table>\n<thead>\n<tr>\n<th>序列</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\a</td>\n<td>警告字符，通常为ASCII的BEL字符</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>后退</td>\n</tr>\n<tr>\n<td>\\c</td>\n<td>抑制不显示输出结果中任何姐wide换行字符（只在%b格式指示控制符下的参数字符串中有效），而且任何留在参数里的字符，任何接下来的采纳书以及任何留在格式字符串中的字符，都被忽略。</td>\n</tr>\n<tr>\n<td>\\f</td>\n<td>换页</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td>换行</td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>回车</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td>水平tab</td>\n</tr>\n<tr>\n<td>\\v</td>\n<td>竖直tab</td>\n</tr>\n<tr>\n<td>\\\\</td>\n<td>转义后输出一个\\符号</td>\n</tr>\n<tr>\n<td>\\d     dd</td>\n<td>表示1–3位的八进制字符，仅在格式字符串中有效。</td>\n</tr>\n<tr>\n<td>\\0     dd      d</td>\n<td>表示1–3位的八进制字符</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Shell-text命令\"><a href=\"#Shell-text命令\" class=\"headerlink\" title=\"Shell text命令\"></a>Shell text命令</h2><p>shell中test命令用于测试条件是否成立，可进行数字、字符和文件的条件测试</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#用之前的各种运算符，测试test</span></div><div class=\"line\">num1=100</div><div class=\"line\">num2=200</div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">test</span> $[num1] <span class=\"_\">-eq</span> $[num2]</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">'true'</span></div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">'false'</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div></pre></td></tr></table></figure>\n<h2 id=\"Shell-流程控制\"><a href=\"#Shell-流程控制\" class=\"headerlink\" title=\"Shell 流程控制\"></a>Shell 流程控制</h2><p>区别于其他编程语言，shell的流程控制不可为空，如</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>(a&gt;b)&#123;</div><div class=\"line\">  System.out.println(<span class=\"string\">\"ok\"</span>);</div><div class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">  <span class=\"comment\">//此处不做任何事</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>但是在shell中不能出现不做任何事的分支语句</p>\n<h3 id=\"1、if-else\"><a href=\"#1、if-else\" class=\"headerlink\" title=\"1、if else\"></a>1、if else</h3><ul>\n<li><p>if语句格式</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> condition</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">\t<span class=\"built_in\">command</span>1</div><div class=\"line\">\t<span class=\"built_in\">command</span>2</div><div class=\"line\">\t...</div><div class=\"line\"><span class=\"keyword\">fi</span> <span class=\"comment\"># 是if的倒写</span></div></pre></td></tr></table></figure>\n<p>每个句子可以用<code>;</code>分号结束，可以写在一行好几个语句。</p>\n</li>\n<li><p>if else</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> condition</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">\t<span class=\"built_in\">command</span>1</div><div class=\"line\">\t<span class=\"built_in\">command</span>2</div><div class=\"line\">\t...</div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">\t<span class=\"built_in\">command</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>if else-if else</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> condition1</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">\t<span class=\"built_in\">command</span>1</div><div class=\"line\"><span class=\"keyword\">elif</span> condition2 <span class=\"comment\">#类似python中，else if是写作elif</span></div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">\t<span class=\"built_in\">command</span>2</div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">\t<span class=\"built_in\">command</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"2、for循环\"><a href=\"#2、for循环\" class=\"headerlink\" title=\"2、for循环\"></a>2、for循环</h3><p>shell的for循环格式：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> item1 item2 ... itemN</div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">\t<span class=\"built_in\">command</span>1</div><div class=\"line\">\t<span class=\"built_in\">command</span>2</div><div class=\"line\">\t...</div><div class=\"line\">\t</div><div class=\"line\"><span class=\"keyword\">done</span> <span class=\"comment\">#for循环结束的标识</span></div><div class=\"line\"><span class=\"comment\">#写成一行</span></div><div class=\"line\"><span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> item1 item2 ... itemN;<span class=\"keyword\">do</span> <span class=\"built_in\">command</span>1; <span class=\"built_in\">command</span>2;...;<span class=\"keyword\">done</span>;</div></pre></td></tr></table></figure>\n<h3 id=\"3、while语句\"><a href=\"#3、while语句\" class=\"headerlink\" title=\"3、while语句\"></a>3、while语句</h3><p>格式：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">while</span> condition</div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">\t<span class=\"built_in\">command</span></div><div class=\"line\"><span class=\"keyword\">done</span></div><div class=\"line\"><span class=\"comment\">#示例</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#!/bin/sh</span></div><div class=\"line\">int=1</div><div class=\"line\"><span class=\"keyword\">while</span>(( <span class=\"variable\">$int</span>&lt;=5 ))</div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"variable\">$int</span></div><div class=\"line\">        <span class=\"built_in\">let</span> <span class=\"string\">\"int++\"</span> <span class=\"comment\"># let是个关键命令</span></div><div class=\"line\"><span class=\"keyword\">done</span></div></pre></td></tr></table></figure>\n<p>可以结合<code>read</code>命令接收输入信息</p>\n<h3 id=\"4、无限循环\"><a href=\"#4、无限循环\" class=\"headerlink\" title=\"4、无限循环\"></a>4、无限循环</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">while</span> :</div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">\t<span class=\"built_in\">command</span></div><div class=\"line\"><span class=\"keyword\">done</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#或者</span></div><div class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">\t<span class=\"built_in\">command</span></div><div class=\"line\"><span class=\"keyword\">done</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#或者</span></div><div class=\"line\"><span class=\"keyword\">for</span> (( ; ; ))</div></pre></td></tr></table></figure>\n<h3 id=\"5、until循环\"><a href=\"#5、until循环\" class=\"headerlink\" title=\"5、until循环\"></a>5、until循环</h3><p>shell所有的<code>until</code>循环类似于一个特殊的for循环，知道满足条件时候才停止。一般还是<code>while</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">until condition</div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">\t<span class=\"built_in\">command</span></div><div class=\"line\"><span class=\"keyword\">done</span></div></pre></td></tr></table></figure>\n<p><strong>条件可为任意测试条件，测试发生在循环末尾，因此循环至少执行一次—请注意这一点。</strong></p>\n<h3 id=\"6、case\"><a href=\"#6、case\" class=\"headerlink\" title=\"6、case\"></a>6、case</h3><p>类似其他语言的switch…case语句</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">case</span> value <span class=\"keyword\">in</span></div><div class=\"line\">mode1)</div><div class=\"line\">\t<span class=\"built_in\">command</span>1</div><div class=\"line\">\t...</div><div class=\"line\">\t;; <span class=\"comment\">#case的结束标志</span></div><div class=\"line\">mode2)</div><div class=\"line\">\t<span class=\"built_in\">command</span>2</div><div class=\"line\">\t...</div><div class=\"line\">\t;;</div><div class=\"line\"><span class=\"keyword\">esac</span> <span class=\"comment\">#case的反写</span></div></pre></td></tr></table></figure>\n<p>value只会匹配一个case，或者不匹配，则mode可用*号通配</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'输入 1 到 4 之间的数字:'</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'你输入的数字为:'</span></div><div class=\"line\"><span class=\"built_in\">read</span> aNum</div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"variable\">$aNum</span> <span class=\"keyword\">in</span></div><div class=\"line\">    1)  <span class=\"built_in\">echo</span> <span class=\"string\">'你选择了 1'</span></div><div class=\"line\">    ;;</div><div class=\"line\">    2)  <span class=\"built_in\">echo</span> <span class=\"string\">'你选择了 2'</span></div><div class=\"line\">    ;;</div><div class=\"line\">    3)  <span class=\"built_in\">echo</span> <span class=\"string\">'你选择了 3'</span></div><div class=\"line\">    ;;</div><div class=\"line\">    4)  <span class=\"built_in\">echo</span> <span class=\"string\">'你选择了 4'</span></div><div class=\"line\">    ;;</div><div class=\"line\">    *)  <span class=\"built_in\">echo</span> <span class=\"string\">'你没有输入 1 到 4 之间的数字'</span></div><div class=\"line\">    ;;</div><div class=\"line\"><span class=\"keyword\">esac</span></div></pre></td></tr></table></figure>\n<h3 id=\"7、跳出循环\"><a href=\"#7、跳出循环\" class=\"headerlink\" title=\"7、跳出循环\"></a>7、跳出循环</h3><p>shell也使用<code>break</code>和<code>continue</code>来跳出循环。</p>\n<ul>\n<li><p>break</p>\n<p>跳出所有循环，终止后面的执行。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"><span class=\"keyword\">while</span> :</div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> -n <span class=\"string\">\"输入 1 到 5 之间的数字:\"</span></div><div class=\"line\">    <span class=\"built_in\">read</span> aNum</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"variable\">$aNum</span> <span class=\"keyword\">in</span></div><div class=\"line\">        1|2|3|4|5) <span class=\"built_in\">echo</span> <span class=\"string\">\"你输入的数字为 <span class=\"variable\">$aNum</span>!\"</span></div><div class=\"line\">        ;;</div><div class=\"line\">        *) <span class=\"built_in\">echo</span> <span class=\"string\">\"你输入的数字不是 1 到 5 之间的! 游戏结束\"</span></div><div class=\"line\">            <span class=\"built_in\">break</span></div><div class=\"line\">        ;;</div><div class=\"line\">    <span class=\"keyword\">esac</span></div><div class=\"line\"><span class=\"keyword\">done</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>continue</p>\n<p>跳出本次循环，执行下一轮循环</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"><span class=\"keyword\">while</span> :</div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> -n <span class=\"string\">\"输入 1 到 5 之间的数字: \"</span></div><div class=\"line\">    <span class=\"built_in\">read</span> aNum</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"variable\">$aNum</span> <span class=\"keyword\">in</span></div><div class=\"line\">        1|2|3|4|5) <span class=\"built_in\">echo</span> <span class=\"string\">\"你输入的数字为 <span class=\"variable\">$aNum</span>!\"</span></div><div class=\"line\">        ;;</div><div class=\"line\">        *) <span class=\"built_in\">echo</span> <span class=\"string\">\"你输入的数字不是 1 到 5 之间的!\"</span></div><div class=\"line\">            <span class=\"built_in\">continue</span></div><div class=\"line\">            <span class=\"built_in\">echo</span> <span class=\"string\">\"游戏结束\"</span></div><div class=\"line\">        ;;</div><div class=\"line\">    <span class=\"keyword\">esac</span></div><div class=\"line\"><span class=\"keyword\">done</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"8、esac\"><a href=\"#8、esac\" class=\"headerlink\" title=\"8、esac\"></a>8、esac</h3><p>case语句区别于C语言，用esac作为结束标志，<code>)</code>和<code>;;</code>标识每个case。</p>\n<h2 id=\"Shell函数\"><a href=\"#Shell函数\" class=\"headerlink\" title=\"Shell函数\"></a>Shell函数</h2><p>shell可以自定义函数，然后自己调用。函数格式：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#function 关键字为可选项，参数也是可选</span></div><div class=\"line\">[ <span class=\"keyword\">function</span> ] funname [()]</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">  </div><div class=\"line\">  action;</div><div class=\"line\">  </div><div class=\"line\">  [<span class=\"built_in\">return</span> int;]</div><div class=\"line\">  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>说明：</strong></p>\n<ol>\n<li>可以带function fun()定义，也可以fun()定义，不带参数。</li>\n<li>参数返回，可以显示加: return 返回，若不加，则返回最后一条指令结果。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/bash</div><div class=\"line\"># author:菜鸟教程</div><div class=\"line\"># url:www.runoob.com</div><div class=\"line\"></div><div class=\"line\">demoFun()&#123;</div><div class=\"line\">    echo &quot;这是我的第一个 shell 函数!&quot;</div><div class=\"line\">&#125;</div><div class=\"line\">echo &quot;-----函数开始执行-----&quot;</div><div class=\"line\">demoFun</div><div class=\"line\">echo &quot;-----函数执行完毕-----&quot;</div></pre></td></tr></table></figure>\n<p>含有返回值的函数：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"><span class=\"comment\"># author:菜鸟教程</span></div><div class=\"line\"><span class=\"comment\"># url:www.runoob.com</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"title\">funWithReturn</span></span>()&#123;</div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"这个函数会对输入的两个数字进行相加运算...\"</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"输入第一个数字: \"</span></div><div class=\"line\">    <span class=\"built_in\">read</span> aNum</div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"输入第二个数字: \"</span></div><div class=\"line\">    <span class=\"built_in\">read</span> anotherNum</div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"两个数字分别为 <span class=\"variable\">$aNum</span> 和 <span class=\"variable\">$anotherNum</span> !\"</span></div><div class=\"line\">    <span class=\"built_in\">return</span> $((<span class=\"variable\">$aNum</span>+<span class=\"variable\">$anotherNum</span>))</div><div class=\"line\">&#125;</div><div class=\"line\">funWithReturn</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"输入的两个数字之和为 $? !\"</span></div></pre></td></tr></table></figure>\n<p>==调用函数返回值，用<code>$?</code>符号==，函数必须在被调用前定义。</p>\n<ul>\n<li><p>函数参数</p>\n<p>在Shell中，调用函数时可以向其传递参数。在函数体内部，通过 $n 的形式来获取参数的值，例如，$1表示第一个参数，$2表示第二个参数…</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"><span class=\"comment\"># author:菜鸟教程</span></div><div class=\"line\"><span class=\"comment\"># url:www.runoob.com</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"title\">funWithParam</span></span>()&#123;</div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"第一个参数为 <span class=\"variable\">$1</span> !\"</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"第二个参数为 <span class=\"variable\">$2</span> !\"</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"第十个参数为 <span class=\"variable\">$10</span> !\"</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"第十个参数为 <span class=\"variable\">$&#123;10&#125;</span> !\"</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"第十一个参数为 <span class=\"variable\">$&#123;11&#125;</span> !\"</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"参数总数有 <span class=\"variable\">$#</span> 个!\"</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"作为一个字符串输出所有参数 $* !\"</span></div><div class=\"line\">&#125;</div><div class=\"line\">funWithParam 1 2 3 4 5 6 7 8 9 34 73</div><div class=\"line\"><span class=\"comment\">#输出结果：</span></div><div class=\"line\">第一个参数为 1 !</div><div class=\"line\">第二个参数为 2 !</div><div class=\"line\">第十个参数为 10 !</div><div class=\"line\">第十个参数为 34 !</div><div class=\"line\">第十一个参数为 73 !</div><div class=\"line\">参数总数有 11 个!</div><div class=\"line\">作为一个字符串输出所有参数 1 2 3 4 5 6 7 8 9 34 73 !</div></pre></td></tr></table></figure>\n<p><strong>注意：</strong>\\$10不能获取第10个参数，因为当n&gt;=10时候，要用\\$(n)来获取参数。</p>\n</li>\n</ul>\n<h2 id=\"Shell-输入-输出重定向\"><a href=\"#Shell-输入-输出重定向\" class=\"headerlink\" title=\"Shell 输入/输出重定向\"></a>Shell 输入/输出重定向</h2><p>类Uinx系统中，默认标准输入输出设备就是shell终端。重定向命令列表：</p>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>command &gt; file</td>\n<td>输出重定向到file</td>\n</tr>\n<tr>\n<td>command &lt; file</td>\n<td>输出重定向到file</td>\n</tr>\n<tr>\n<td>command &gt;&gt; file</td>\n<td>输出追加到file</td>\n</tr>\n<tr>\n<td>n &gt; file</td>\n<td>文件描述符为n的文件重定向到file</td>\n</tr>\n<tr>\n<td>n &gt;&gt; file</td>\n<td>文件描述符为n的文件追加到file</td>\n</tr>\n<tr>\n<td>n &gt;&amp; m</td>\n<td>输出文件m和n合并</td>\n</tr>\n<tr>\n<td>n &lt;&amp; m</td>\n<td>输入文件m和n合并</td>\n</tr>\n<tr>\n<td>&lt;&lt; tag</td>\n<td>开始标记tag和结束标记tag之间的内容作为输入</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p><strong>注意：</strong>需要注意的是文件描述符 0 通常是标准输入（STDIN），1 是标准输出（STDOUT），2 是标准错误输出（STDERR）。</p>\n</blockquote>\n<h3 id=\"1、输出重定向\"><a href=\"#1、输出重定向\" class=\"headerlink\" title=\"1、输出重定向\"></a>1、输出重定向</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">command</span>1 &gt; file1</div></pre></td></tr></table></figure>\n<p>若file1存在，则被替代。可以用<code>&gt;&gt;</code>追加符号，则不替代。</p>\n<h3 id=\"2、输入重定向\"><a href=\"#2、输入重定向\" class=\"headerlink\" title=\"2、输入重定向\"></a>2、输入重定向</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">command</span>1 &lt; file1</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">command1 &lt; infile &gt; outfile</div></pre></td></tr></table></figure>\n<p>同时替换输入和输出，执行command1，从文件infile读取内容，然后将输出写入到outfile中。</p>\n<h3 id=\"3、重定向深入讲解\"><a href=\"#3、重定向深入讲解\" class=\"headerlink\" title=\"3、重定向深入讲解\"></a>3、重定向深入讲解</h3><p>一般类unix系统命令运行会同时打开三个文件：</p>\n<ul>\n<li>标准输入文件(stdin)：stdin的文件描述符为0，Unix程序默认从stdin读取数据。</li>\n<li>标准输出文件(stdout)：stdout 的文件描述符为1，Unix程序默认向stdout输出数据。</li>\n<li>标准错误文件(stderr)：stderr的文件描述符为2，Unix程序会向stderr流中写入错误信息</li>\n</ul>\n<p>默认情况下，command &gt; file 将 stdout 重定向到 file，command &lt; file 将stdin 重定向到 file。</p>\n<p>如果希望 stderr 重定向到 file，可以这样写：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#模拟终端</span></div><div class=\"line\">$ <span class=\"built_in\">command</span> 2 &gt; file</div></pre></td></tr></table></figure>\n<p>若要追加<code>&gt;&gt;</code>符号，其中2代表标准错误文件的代号。</p>\n<p>如果希望将stdout和stderr合并后重定向到file</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">command</span> &gt; file 2&gt;&amp;1</div><div class=\"line\"><span class=\"comment\">#或者</span></div><div class=\"line\"><span class=\"built_in\">command</span> &gt;&gt; file 2&gt;&amp;1</div><div class=\"line\"><span class=\"comment\">#如果输入、输出都重定向</span></div><div class=\"line\"><span class=\"built_in\">command</span> &lt;file1 &gt;file2</div></pre></td></tr></table></figure>\n<h3 id=\"4、Here-Document\"><a href=\"#4、Here-Document\" class=\"headerlink\" title=\"4、Here Document\"></a>4、Here Document</h3><p>Here Document是shell的一种特殊重定向方式，用于将输入重定向到一个交互式shell脚本或程序：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">command</span> &lt;&lt; delimiter</div><div class=\"line\">\tdocument</div><div class=\"line\">delimiter</div></pre></td></tr></table></figure>\n<p>作用将delimiter之间的document作为输入传递给command</p>\n<p><strong>注意：</strong>结尾的<code>delimiter</code>前后不得有任何符号，包括tab和空格。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">wc <span class=\"_\">-l</span> &lt;&lt; EOF</div><div class=\"line\">\tnihao</div><div class=\"line\">\tzhendehenhao</div><div class=\"line\">\tshime</div><div class=\"line\">\tok</div><div class=\"line\">EOF </div><div class=\"line\"><span class=\"comment\">#输出结果，获得的EOF之间的内容的行数。</span></div><div class=\"line\">4</div></pre></td></tr></table></figure>\n<h3 id=\"5、-dev-null文件\"><a href=\"#5、-dev-null文件\" class=\"headerlink\" title=\"5、/dev/null文件\"></a>5、/dev/null文件</h3><p>若希望执行命令不在屏幕输出，可重定向到/dev/null</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">command</span> &gt; /dev/null</div></pre></td></tr></table></figure>\n<p><code>/dev/null</code>为特殊文件，写入的内容立即不见，不可读出。</p>\n<p>如果屏蔽stdout和stderr</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">command</span> &gt; /dev/null 2&gt;&amp;1</div></pre></td></tr></table></figure>\n<h2 id=\"Shell文件包含\"><a href=\"#Shell文件包含\" class=\"headerlink\" title=\"Shell文件包含\"></a>Shell文件包含</h2><p>shell也可以使用外部脚本，便于封装：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">. filename <span class=\"comment\">#注意点号(.)与文件名之间有空格</span></div><div class=\"line\">或</div><div class=\"line\"><span class=\"built_in\">source</span> filename</div></pre></td></tr></table></figure>\n<p>示例：test1.sh</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"><span class=\"comment\"># author:菜鸟教程</span></div><div class=\"line\"><span class=\"comment\"># url:www.runoob.com</span></div><div class=\"line\"></div><div class=\"line\">url=<span class=\"string\">\"http://www.runoob.com\"</span></div></pre></td></tr></table></figure>\n<p>test2.sh</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"><span class=\"comment\"># author:菜鸟教程</span></div><div class=\"line\"><span class=\"comment\"># url:www.runoob.com</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#使用 . 号来引用test1.sh 文件</span></div><div class=\"line\">. ./<span class=\"built_in\">test</span>1.sh</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 或者使用以下包含文件代码</span></div><div class=\"line\"><span class=\"comment\"># source ./test1.sh</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"菜鸟教程官网地址：<span class=\"variable\">$url</span>\"</span></div></pre></td></tr></table></figure>\n<p>执行时候test2.sh只需要test2.sh有执行权限即可，test1.sh不一定需要。</p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2017-03-28T11:06:30.913Z","updated":"2017-03-28T11:06:30.913Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0xj1nfb000oscowva0dj224","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"windowsPE系统制作","date":"2015-12-06T08:28:00.000Z","_content":"\nPE系统的制作\n一般作为IT工作者或者技术折腾爱好者，都会配备一个PE系统，以备不时之需。PE系统可用于系统维护和紧急救援等，网上PE系统太多，常见的有电脑店、老毛桃、大白菜、微PE等，而其中不少都出于商业目的会在你用其PE安装系统后附带安装一些软件，或者更改主页设置等，个人比较喜欢纯洁的PE系统，本文使用微PE用于演示\n一、下载PE系统制作工具\n![微PE安装](windowsPE系统制作/pe.png)\n微PE可以安装到U盘，移动硬盘或者生成iso镜像。可以安装到电脑的系统下，启动时就会多出一个启动选项，以备系统崩溃时候进入PE系统即可进行维护。\n二、使用空白U盘制作PE系统\n![制作PE系统](windowsPE系统制作/upan.png)\n三、PE系统的使用\n用做好的PE系统U盘，连接电脑，开机启动时进入启动选择菜单，选择USB启动，即可进入相应的PE系统。\n另：附上电脑店PE系统的相关制作图片\n![电脑店PE](windowsPE系统制作/zhizuo.png)\n![制作PE](windowsPE系统制作/zhizuo2.png)\n如上制作的PE会包含捆绑软件和主页设置，在其个性化设置中，取消选项勾选，也许可能消除捆绑的软件安装。（国内软件流氓的太多，没法）\n![自定界面](windowsPE系统制作/view.png)\n去掉箭头所指的两个勾选，需要输入密码，dnd2012，或者是2012dnd。\n文中所需软件可自行在其官网下载，附上个人使用版本：\n微PE：\n电脑店PE：","source":"_posts/windowsPE系统制作.md","raw":"---\ntitle: windowsPE系统制作\ndate: 2015-12-06 16:28\ntags:\n    - Windows\ncategories: \n    - Windows\n---\n\nPE系统的制作\n一般作为IT工作者或者技术折腾爱好者，都会配备一个PE系统，以备不时之需。PE系统可用于系统维护和紧急救援等，网上PE系统太多，常见的有电脑店、老毛桃、大白菜、微PE等，而其中不少都出于商业目的会在你用其PE安装系统后附带安装一些软件，或者更改主页设置等，个人比较喜欢纯洁的PE系统，本文使用微PE用于演示\n一、下载PE系统制作工具\n![微PE安装](windowsPE系统制作/pe.png)\n微PE可以安装到U盘，移动硬盘或者生成iso镜像。可以安装到电脑的系统下，启动时就会多出一个启动选项，以备系统崩溃时候进入PE系统即可进行维护。\n二、使用空白U盘制作PE系统\n![制作PE系统](windowsPE系统制作/upan.png)\n三、PE系统的使用\n用做好的PE系统U盘，连接电脑，开机启动时进入启动选择菜单，选择USB启动，即可进入相应的PE系统。\n另：附上电脑店PE系统的相关制作图片\n![电脑店PE](windowsPE系统制作/zhizuo.png)\n![制作PE](windowsPE系统制作/zhizuo2.png)\n如上制作的PE会包含捆绑软件和主页设置，在其个性化设置中，取消选项勾选，也许可能消除捆绑的软件安装。（国内软件流氓的太多，没法）\n![自定界面](windowsPE系统制作/view.png)\n去掉箭头所指的两个勾选，需要输入密码，dnd2012，或者是2012dnd。\n文中所需软件可自行在其官网下载，附上个人使用版本：\n微PE：\n电脑店PE：","slug":"windowsPE系统制作","published":1,"updated":"2017-03-31T06:02:47.637Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0xj1nfe000sscowpb7iyqey","content":"<p>PE系统的制作<br>一般作为IT工作者或者技术折腾爱好者，都会配备一个PE系统，以备不时之需。PE系统可用于系统维护和紧急救援等，网上PE系统太多，常见的有电脑店、老毛桃、大白菜、微PE等，而其中不少都出于商业目的会在你用其PE安装系统后附带安装一些软件，或者更改主页设置等，个人比较喜欢纯洁的PE系统，本文使用微PE用于演示<br>一、下载PE系统制作工具<br><img src=\"/2015/12/06/windowsPE系统制作/pe.png\" alt=\"微PE安装\"><br>微PE可以安装到U盘，移动硬盘或者生成iso镜像。可以安装到电脑的系统下，启动时就会多出一个启动选项，以备系统崩溃时候进入PE系统即可进行维护。<br>二、使用空白U盘制作PE系统<br><img src=\"/2015/12/06/windowsPE系统制作/upan.png\" alt=\"制作PE系统\"><br>三、PE系统的使用<br>用做好的PE系统U盘，连接电脑，开机启动时进入启动选择菜单，选择USB启动，即可进入相应的PE系统。<br>另：附上电脑店PE系统的相关制作图片<br><img src=\"/2015/12/06/windowsPE系统制作/zhizuo.png\" alt=\"电脑店PE\"><br><img src=\"/2015/12/06/windowsPE系统制作/zhizuo2.png\" alt=\"制作PE\"><br>如上制作的PE会包含捆绑软件和主页设置，在其个性化设置中，取消选项勾选，也许可能消除捆绑的软件安装。（国内软件流氓的太多，没法）<br><img src=\"/2015/12/06/windowsPE系统制作/view.png\" alt=\"自定界面\"><br>去掉箭头所指的两个勾选，需要输入密码，dnd2012，或者是2012dnd。<br>文中所需软件可自行在其官网下载，附上个人使用版本：<br>微PE：<br>电脑店PE：</p>\n","excerpt":"","more":"<p>PE系统的制作<br>一般作为IT工作者或者技术折腾爱好者，都会配备一个PE系统，以备不时之需。PE系统可用于系统维护和紧急救援等，网上PE系统太多，常见的有电脑店、老毛桃、大白菜、微PE等，而其中不少都出于商业目的会在你用其PE安装系统后附带安装一些软件，或者更改主页设置等，个人比较喜欢纯洁的PE系统，本文使用微PE用于演示<br>一、下载PE系统制作工具<br><img src=\"/2015/12/06/windowsPE系统制作/pe.png\" alt=\"微PE安装\"><br>微PE可以安装到U盘，移动硬盘或者生成iso镜像。可以安装到电脑的系统下，启动时就会多出一个启动选项，以备系统崩溃时候进入PE系统即可进行维护。<br>二、使用空白U盘制作PE系统<br><img src=\"/2015/12/06/windowsPE系统制作/upan.png\" alt=\"制作PE系统\"><br>三、PE系统的使用<br>用做好的PE系统U盘，连接电脑，开机启动时进入启动选择菜单，选择USB启动，即可进入相应的PE系统。<br>另：附上电脑店PE系统的相关制作图片<br><img src=\"/2015/12/06/windowsPE系统制作/zhizuo.png\" alt=\"电脑店PE\"><br><img src=\"/2015/12/06/windowsPE系统制作/zhizuo2.png\" alt=\"制作PE\"><br>如上制作的PE会包含捆绑软件和主页设置，在其个性化设置中，取消选项勾选，也许可能消除捆绑的软件安装。（国内软件流氓的太多，没法）<br><img src=\"/2015/12/06/windowsPE系统制作/view.png\" alt=\"自定界面\"><br>去掉箭头所指的两个勾选，需要输入密码，dnd2012，或者是2012dnd。<br>文中所需软件可自行在其官网下载，附上个人使用版本：<br>微PE：<br>电脑店PE：</p>\n"},{"title":"Windows系统安装","date":"2015-12-06T08:28:00.000Z","author":"冰路梦","_content":"# Windows系统安装\n\n声明：本文仅用于技术交流，按照文章操作理论上不会出现故障和问题，但可能由于不同机器、不同人员的不同的偶然的操作失误，会引起不同的未知问题，则不属于本文技术指导的责任，按照本文操作，则视为操作者责任自负。\n\n \n\n一、安装准备\n\n1、系统源的选择（三种方式）\n\n①、微软官方系统镜像，纯净正版，从源头避免系统附带木马病毒等流氓软件。\n\n[http://msdn.itellyou.cn/](http://msdn.itellyou.cn/)\n\n[http://www.msdn.hk/](http://www.msdn.hk/)\n\n以上为两个常用的原版系统下载网址，在操作系统栏选择所需系统，下载对应的发行版，注意x86和x64的选择。（如今新机器基本都是x64，2010年前的多是x86）\n\n ![img](windows系统安装/msdn.png)\n\n②、第三方Ghost系统，安装简便，免激活，不敢保证无病毒和捆绑软件等。\n\n百度一下Ghost系统，太多下载网址，系统之家相对还算不错。\n\n③、官方OEM系统，相对纯净，免激活，只是不太好找资源。\n\n可根据个人笔记本品牌搜索对应oem系统，如百度“联想win7 oem系统”。\n\n2、安装盘制作（三种方式）\n\n①、光盘刻录，需要空白光盘，使用光驱刻录。刻录工具很多，此处使用软碟通UltralIOS工具刻录：\n\na）、选择下载好的iso格式的系统镜像，打开。\n\n ![img](windows系统安装/ultralISO.png)\n\nb）、放置空光盘入光驱后，点击如下图位置，刻录光盘。\n\n![img](windows系统安装/刻录.png)\n\nc）、刻录镜像到光盘，等待完成，可选择刻录校验，以保证刻录的完整正确。此处注意光盘的大小空间要大于镜像的大小。一般xp原镜像用cd光碟700M大小即可。Win7或者之后系统需要DVD光碟4.7G大小。\n\n![img](windows系统安装/校验.png)\n\nd）、刻录完成后，即可进入安装步骤。\n\n②、U盘刻录，较光盘安装效率更高，U盘大小需要大于iso镜像。依然用UltralISO刻录。\n\na)、打开下载后的iso系统镜像。\n\nb)、选择启动--写入硬盘镜像。\n\n![img](windows系统安装/写入.png)\n\nc)、放入空白U盘（会被格式化，U盘上资料提前备份到他处），写入usb-hdd+引导。写入方式也选择usb-hdd+\n\n ![img](windows系统安装/引导.png) \n\nd)、格式化，写入完成后进入安装步骤。\n\n③、硬盘安装，安装速度快，对新手操作略繁琐（主要指PE系统的使用）\n\na)、xp-->win7，或者类似的低版本系统升级高版本系统，且两个系统都是x86或者x64的，可以将下载后的iso系统镜像文件，用winRAR之类的解压缩工具解压到非C盘的磁盘目录下，然后双击运行Setup.exe即可进入安装步骤。\n\nb)、上一步也可以用虚拟光驱工具，加载iso系统镜像，然后再“我的电脑”下找到加载后的系统安装盘，双击运行其中的setup.exe进入安装步骤。\n\n ![img](windows系统安装/镜像.png)\n\n ![img](windows系统安装/镜像2.png)\n\nc)、如上两条均需要当前系统可用的前提下，满足一定条件才可实现。倘若系统崩溃无法进入系统，则需要使用其他电脑制作安装光盘/U盘，放于本电脑来安装。亦或者，有PE系统，进入PE系统环境安装。（PE系统的制作，稍后再讲）\n\n三、系统安装\n\n1、将制作好的安装光盘/U盘连接电脑\n\n2、开机选择进入启动选择菜单，不同品牌电脑的进入方式不同，一般在开机显示品牌LOGO时，下面会有提示。Lenovo是按F12进入快速选择启动项，其他品牌自行百度，如“联想进入开机选项方式”。一般为Delete，Esc，F2等。\n\n3、进入启动项菜单后，若是光盘为安装盘，一般不用上一步就会进入安装界面，但有的也需要在此步骤选择光驱启动，回车即可。U盘为安装盘，则选择对应的USB启动项。\n\n4、如上无误则进入安装界面，一路下一步即可\n\n ![img](windows系统安装/安装语言.png) \n\n5、在下图步骤时，非全新硬盘则选择C盘，可以点击高级选项中，可以格式化，分区等，C盘数据会丢失，所以安装系统前备份好个人C盘的重要资料，如我的文档，桌面等等上面的资料。（崩溃后的系统可以在PE环境下备份数据）\n\n![img](windows系统安装/选择分区.png)\n\n6、几乎一路下一步就可完成安装，系统可能会让提供安装密钥，可百度相应系统的序列号即可。（在第一步中选择的不同系统源，决定安装步骤的差异，一般大致相同）\n\n ![img](http://img.blog.csdn.net/20151206161206568?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n ![img](windows系统安装/安装完成.png)\n\n四、系统设置及优化\n\n至此即可完成系统的安装，windows系列的安装大同小异，安装好系统仅仅是一个好的桌面系统环境的第一步，之后需要打补丁，装软件，优化设置，其重要性不亚于系统的安装，有一个良好的使用习惯，会让你的电脑保持较为长久的流畅和高效状态。\n\n纯净初装系统并无集成驱动，甚至无法联网，用户需要从他处下载带网卡驱动的驱动精灵或驱动人生等，安装后一键安装所有必须的驱动，同时安装必要的软件，安装补丁等。\n\n需要注意的是下载软件尽可能都在官网下载，安装时候注意选择自定安装，留心去掉需要没用的默认勾选，否则可能会被附带安装太多不要的东西。安装软件建议安装到D盘下自建一个公用目录，最好英文无空格，以免极个别奇葩软件无法运行。\n\n任何软件的安装后，都需要进行设置，更改其设置中暗含的默认选项，免除流氓广告和其他无关行为。\n\n系统装好驱动和补丁后，及时清理系统垃圾，优化设置，具体优化无法一篇概论，提供一些个人用的优化工具，请自行使用，优化工具需要善用，错误操作责任自负。\n\n另：建议系统设置优化完成后，安装一个Ghost备份工具，备份系统，或者是本地PE系统，以备不时之需。\n\n ![img](windows系统安装/onekey.png)![img](windows系统安装/pe.png)\n\n附件：本文所需工具均可自行在网上下载官方版本。---UltralISO：OneKey：微PE：魔方优化：--- ","source":"_posts/windows系统安装.md","raw":"---\ntitle: \"Windows系统安装\"\ndate: 2015-12-06 16:28\nauthor: 冰路梦\ntag:\n    - Windows\ncategories:\n    - Windows\n---\n# Windows系统安装\n\n声明：本文仅用于技术交流，按照文章操作理论上不会出现故障和问题，但可能由于不同机器、不同人员的不同的偶然的操作失误，会引起不同的未知问题，则不属于本文技术指导的责任，按照本文操作，则视为操作者责任自负。\n\n \n\n一、安装准备\n\n1、系统源的选择（三种方式）\n\n①、微软官方系统镜像，纯净正版，从源头避免系统附带木马病毒等流氓软件。\n\n[http://msdn.itellyou.cn/](http://msdn.itellyou.cn/)\n\n[http://www.msdn.hk/](http://www.msdn.hk/)\n\n以上为两个常用的原版系统下载网址，在操作系统栏选择所需系统，下载对应的发行版，注意x86和x64的选择。（如今新机器基本都是x64，2010年前的多是x86）\n\n ![img](windows系统安装/msdn.png)\n\n②、第三方Ghost系统，安装简便，免激活，不敢保证无病毒和捆绑软件等。\n\n百度一下Ghost系统，太多下载网址，系统之家相对还算不错。\n\n③、官方OEM系统，相对纯净，免激活，只是不太好找资源。\n\n可根据个人笔记本品牌搜索对应oem系统，如百度“联想win7 oem系统”。\n\n2、安装盘制作（三种方式）\n\n①、光盘刻录，需要空白光盘，使用光驱刻录。刻录工具很多，此处使用软碟通UltralIOS工具刻录：\n\na）、选择下载好的iso格式的系统镜像，打开。\n\n ![img](windows系统安装/ultralISO.png)\n\nb）、放置空光盘入光驱后，点击如下图位置，刻录光盘。\n\n![img](windows系统安装/刻录.png)\n\nc）、刻录镜像到光盘，等待完成，可选择刻录校验，以保证刻录的完整正确。此处注意光盘的大小空间要大于镜像的大小。一般xp原镜像用cd光碟700M大小即可。Win7或者之后系统需要DVD光碟4.7G大小。\n\n![img](windows系统安装/校验.png)\n\nd）、刻录完成后，即可进入安装步骤。\n\n②、U盘刻录，较光盘安装效率更高，U盘大小需要大于iso镜像。依然用UltralISO刻录。\n\na)、打开下载后的iso系统镜像。\n\nb)、选择启动--写入硬盘镜像。\n\n![img](windows系统安装/写入.png)\n\nc)、放入空白U盘（会被格式化，U盘上资料提前备份到他处），写入usb-hdd+引导。写入方式也选择usb-hdd+\n\n ![img](windows系统安装/引导.png) \n\nd)、格式化，写入完成后进入安装步骤。\n\n③、硬盘安装，安装速度快，对新手操作略繁琐（主要指PE系统的使用）\n\na)、xp-->win7，或者类似的低版本系统升级高版本系统，且两个系统都是x86或者x64的，可以将下载后的iso系统镜像文件，用winRAR之类的解压缩工具解压到非C盘的磁盘目录下，然后双击运行Setup.exe即可进入安装步骤。\n\nb)、上一步也可以用虚拟光驱工具，加载iso系统镜像，然后再“我的电脑”下找到加载后的系统安装盘，双击运行其中的setup.exe进入安装步骤。\n\n ![img](windows系统安装/镜像.png)\n\n ![img](windows系统安装/镜像2.png)\n\nc)、如上两条均需要当前系统可用的前提下，满足一定条件才可实现。倘若系统崩溃无法进入系统，则需要使用其他电脑制作安装光盘/U盘，放于本电脑来安装。亦或者，有PE系统，进入PE系统环境安装。（PE系统的制作，稍后再讲）\n\n三、系统安装\n\n1、将制作好的安装光盘/U盘连接电脑\n\n2、开机选择进入启动选择菜单，不同品牌电脑的进入方式不同，一般在开机显示品牌LOGO时，下面会有提示。Lenovo是按F12进入快速选择启动项，其他品牌自行百度，如“联想进入开机选项方式”。一般为Delete，Esc，F2等。\n\n3、进入启动项菜单后，若是光盘为安装盘，一般不用上一步就会进入安装界面，但有的也需要在此步骤选择光驱启动，回车即可。U盘为安装盘，则选择对应的USB启动项。\n\n4、如上无误则进入安装界面，一路下一步即可\n\n ![img](windows系统安装/安装语言.png) \n\n5、在下图步骤时，非全新硬盘则选择C盘，可以点击高级选项中，可以格式化，分区等，C盘数据会丢失，所以安装系统前备份好个人C盘的重要资料，如我的文档，桌面等等上面的资料。（崩溃后的系统可以在PE环境下备份数据）\n\n![img](windows系统安装/选择分区.png)\n\n6、几乎一路下一步就可完成安装，系统可能会让提供安装密钥，可百度相应系统的序列号即可。（在第一步中选择的不同系统源，决定安装步骤的差异，一般大致相同）\n\n ![img](http://img.blog.csdn.net/20151206161206568?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n ![img](windows系统安装/安装完成.png)\n\n四、系统设置及优化\n\n至此即可完成系统的安装，windows系列的安装大同小异，安装好系统仅仅是一个好的桌面系统环境的第一步，之后需要打补丁，装软件，优化设置，其重要性不亚于系统的安装，有一个良好的使用习惯，会让你的电脑保持较为长久的流畅和高效状态。\n\n纯净初装系统并无集成驱动，甚至无法联网，用户需要从他处下载带网卡驱动的驱动精灵或驱动人生等，安装后一键安装所有必须的驱动，同时安装必要的软件，安装补丁等。\n\n需要注意的是下载软件尽可能都在官网下载，安装时候注意选择自定安装，留心去掉需要没用的默认勾选，否则可能会被附带安装太多不要的东西。安装软件建议安装到D盘下自建一个公用目录，最好英文无空格，以免极个别奇葩软件无法运行。\n\n任何软件的安装后，都需要进行设置，更改其设置中暗含的默认选项，免除流氓广告和其他无关行为。\n\n系统装好驱动和补丁后，及时清理系统垃圾，优化设置，具体优化无法一篇概论，提供一些个人用的优化工具，请自行使用，优化工具需要善用，错误操作责任自负。\n\n另：建议系统设置优化完成后，安装一个Ghost备份工具，备份系统，或者是本地PE系统，以备不时之需。\n\n ![img](windows系统安装/onekey.png)![img](windows系统安装/pe.png)\n\n附件：本文所需工具均可自行在网上下载官方版本。---UltralISO：OneKey：微PE：魔方优化：--- ","slug":"windows系统安装","published":1,"updated":"2017-03-31T06:03:23.285Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0xj1nfj000uscowl4z8splt","content":"<h1 id=\"Windows系统安装\"><a href=\"#Windows系统安装\" class=\"headerlink\" title=\"Windows系统安装\"></a>Windows系统安装</h1><p>声明：本文仅用于技术交流，按照文章操作理论上不会出现故障和问题，但可能由于不同机器、不同人员的不同的偶然的操作失误，会引起不同的未知问题，则不属于本文技术指导的责任，按照本文操作，则视为操作者责任自负。</p>\n<p>一、安装准备</p>\n<p>1、系统源的选择（三种方式）</p>\n<p>①、微软官方系统镜像，纯净正版，从源头避免系统附带木马病毒等流氓软件。</p>\n<p><a href=\"http://msdn.itellyou.cn/\" target=\"_blank\" rel=\"external\">http://msdn.itellyou.cn/</a></p>\n<p><a href=\"http://www.msdn.hk/\" target=\"_blank\" rel=\"external\">http://www.msdn.hk/</a></p>\n<p>以上为两个常用的原版系统下载网址，在操作系统栏选择所需系统，下载对应的发行版，注意x86和x64的选择。（如今新机器基本都是x64，2010年前的多是x86）</p>\n<p> <img src=\"/2015/12/06/windows系统安装/msdn.png\" alt=\"img\"></p>\n<p>②、第三方Ghost系统，安装简便，免激活，不敢保证无病毒和捆绑软件等。</p>\n<p>百度一下Ghost系统，太多下载网址，系统之家相对还算不错。</p>\n<p>③、官方OEM系统，相对纯净，免激活，只是不太好找资源。</p>\n<p>可根据个人笔记本品牌搜索对应oem系统，如百度“联想win7 oem系统”。</p>\n<p>2、安装盘制作（三种方式）</p>\n<p>①、光盘刻录，需要空白光盘，使用光驱刻录。刻录工具很多，此处使用软碟通UltralIOS工具刻录：</p>\n<p>a）、选择下载好的iso格式的系统镜像，打开。</p>\n<p> <img src=\"/2015/12/06/windows系统安装/ultralISO.png\" alt=\"img\"></p>\n<p>b）、放置空光盘入光驱后，点击如下图位置，刻录光盘。</p>\n<p><img src=\"/2015/12/06/windows系统安装/刻录.png\" alt=\"img\"></p>\n<p>c）、刻录镜像到光盘，等待完成，可选择刻录校验，以保证刻录的完整正确。此处注意光盘的大小空间要大于镜像的大小。一般xp原镜像用cd光碟700M大小即可。Win7或者之后系统需要DVD光碟4.7G大小。</p>\n<p><img src=\"/2015/12/06/windows系统安装/校验.png\" alt=\"img\"></p>\n<p>d）、刻录完成后，即可进入安装步骤。</p>\n<p>②、U盘刻录，较光盘安装效率更高，U盘大小需要大于iso镜像。依然用UltralISO刻录。</p>\n<p>a)、打开下载后的iso系统镜像。</p>\n<p>b)、选择启动–写入硬盘镜像。</p>\n<p><img src=\"/2015/12/06/windows系统安装/写入.png\" alt=\"img\"></p>\n<p>c)、放入空白U盘（会被格式化，U盘上资料提前备份到他处），写入usb-hdd+引导。写入方式也选择usb-hdd+</p>\n<p> <img src=\"/2015/12/06/windows系统安装/引导.png\" alt=\"img\"> </p>\n<p>d)、格式化，写入完成后进入安装步骤。</p>\n<p>③、硬盘安装，安装速度快，对新手操作略繁琐（主要指PE系统的使用）</p>\n<p>a)、xp–&gt;win7，或者类似的低版本系统升级高版本系统，且两个系统都是x86或者x64的，可以将下载后的iso系统镜像文件，用winRAR之类的解压缩工具解压到非C盘的磁盘目录下，然后双击运行Setup.exe即可进入安装步骤。</p>\n<p>b)、上一步也可以用虚拟光驱工具，加载iso系统镜像，然后再“我的电脑”下找到加载后的系统安装盘，双击运行其中的setup.exe进入安装步骤。</p>\n<p> <img src=\"/2015/12/06/windows系统安装/镜像.png\" alt=\"img\"></p>\n<p> <img src=\"/2015/12/06/windows系统安装/镜像2.png\" alt=\"img\"></p>\n<p>c)、如上两条均需要当前系统可用的前提下，满足一定条件才可实现。倘若系统崩溃无法进入系统，则需要使用其他电脑制作安装光盘/U盘，放于本电脑来安装。亦或者，有PE系统，进入PE系统环境安装。（PE系统的制作，稍后再讲）</p>\n<p>三、系统安装</p>\n<p>1、将制作好的安装光盘/U盘连接电脑</p>\n<p>2、开机选择进入启动选择菜单，不同品牌电脑的进入方式不同，一般在开机显示品牌LOGO时，下面会有提示。Lenovo是按F12进入快速选择启动项，其他品牌自行百度，如“联想进入开机选项方式”。一般为Delete，Esc，F2等。</p>\n<p>3、进入启动项菜单后，若是光盘为安装盘，一般不用上一步就会进入安装界面，但有的也需要在此步骤选择光驱启动，回车即可。U盘为安装盘，则选择对应的USB启动项。</p>\n<p>4、如上无误则进入安装界面，一路下一步即可</p>\n<p> <img src=\"/2015/12/06/windows系统安装/安装语言.png\" alt=\"img\"> </p>\n<p>5、在下图步骤时，非全新硬盘则选择C盘，可以点击高级选项中，可以格式化，分区等，C盘数据会丢失，所以安装系统前备份好个人C盘的重要资料，如我的文档，桌面等等上面的资料。（崩溃后的系统可以在PE环境下备份数据）</p>\n<p><img src=\"/2015/12/06/windows系统安装/选择分区.png\" alt=\"img\"></p>\n<p>6、几乎一路下一步就可完成安装，系统可能会让提供安装密钥，可百度相应系统的序列号即可。（在第一步中选择的不同系统源，决定安装步骤的差异，一般大致相同）</p>\n<p> <img src=\"http://img.blog.csdn.net/20151206161206568?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"img\"></p>\n<p> <img src=\"/2015/12/06/windows系统安装/安装完成.png\" alt=\"img\"></p>\n<p>四、系统设置及优化</p>\n<p>至此即可完成系统的安装，windows系列的安装大同小异，安装好系统仅仅是一个好的桌面系统环境的第一步，之后需要打补丁，装软件，优化设置，其重要性不亚于系统的安装，有一个良好的使用习惯，会让你的电脑保持较为长久的流畅和高效状态。</p>\n<p>纯净初装系统并无集成驱动，甚至无法联网，用户需要从他处下载带网卡驱动的驱动精灵或驱动人生等，安装后一键安装所有必须的驱动，同时安装必要的软件，安装补丁等。</p>\n<p>需要注意的是下载软件尽可能都在官网下载，安装时候注意选择自定安装，留心去掉需要没用的默认勾选，否则可能会被附带安装太多不要的东西。安装软件建议安装到D盘下自建一个公用目录，最好英文无空格，以免极个别奇葩软件无法运行。</p>\n<p>任何软件的安装后，都需要进行设置，更改其设置中暗含的默认选项，免除流氓广告和其他无关行为。</p>\n<p>系统装好驱动和补丁后，及时清理系统垃圾，优化设置，具体优化无法一篇概论，提供一些个人用的优化工具，请自行使用，优化工具需要善用，错误操作责任自负。</p>\n<p>另：建议系统设置优化完成后，安装一个Ghost备份工具，备份系统，或者是本地PE系统，以备不时之需。</p>\n<p> <img src=\"/2015/12/06/windows系统安装/onekey.png\" alt=\"img\"><img src=\"/2015/12/06/windows系统安装/pe.png\" alt=\"img\"></p>\n<p>附件：本文所需工具均可自行在网上下载官方版本。—UltralISO：OneKey：微PE：魔方优化：— </p>\n","excerpt":"","more":"<h1 id=\"Windows系统安装\"><a href=\"#Windows系统安装\" class=\"headerlink\" title=\"Windows系统安装\"></a>Windows系统安装</h1><p>声明：本文仅用于技术交流，按照文章操作理论上不会出现故障和问题，但可能由于不同机器、不同人员的不同的偶然的操作失误，会引起不同的未知问题，则不属于本文技术指导的责任，按照本文操作，则视为操作者责任自负。</p>\n<p>一、安装准备</p>\n<p>1、系统源的选择（三种方式）</p>\n<p>①、微软官方系统镜像，纯净正版，从源头避免系统附带木马病毒等流氓软件。</p>\n<p><a href=\"http://msdn.itellyou.cn/\">http://msdn.itellyou.cn/</a></p>\n<p><a href=\"http://www.msdn.hk/\">http://www.msdn.hk/</a></p>\n<p>以上为两个常用的原版系统下载网址，在操作系统栏选择所需系统，下载对应的发行版，注意x86和x64的选择。（如今新机器基本都是x64，2010年前的多是x86）</p>\n<p> <img src=\"/2015/12/06/windows系统安装/msdn.png\" alt=\"img\"></p>\n<p>②、第三方Ghost系统，安装简便，免激活，不敢保证无病毒和捆绑软件等。</p>\n<p>百度一下Ghost系统，太多下载网址，系统之家相对还算不错。</p>\n<p>③、官方OEM系统，相对纯净，免激活，只是不太好找资源。</p>\n<p>可根据个人笔记本品牌搜索对应oem系统，如百度“联想win7 oem系统”。</p>\n<p>2、安装盘制作（三种方式）</p>\n<p>①、光盘刻录，需要空白光盘，使用光驱刻录。刻录工具很多，此处使用软碟通UltralIOS工具刻录：</p>\n<p>a）、选择下载好的iso格式的系统镜像，打开。</p>\n<p> <img src=\"/2015/12/06/windows系统安装/ultralISO.png\" alt=\"img\"></p>\n<p>b）、放置空光盘入光驱后，点击如下图位置，刻录光盘。</p>\n<p><img src=\"/2015/12/06/windows系统安装/刻录.png\" alt=\"img\"></p>\n<p>c）、刻录镜像到光盘，等待完成，可选择刻录校验，以保证刻录的完整正确。此处注意光盘的大小空间要大于镜像的大小。一般xp原镜像用cd光碟700M大小即可。Win7或者之后系统需要DVD光碟4.7G大小。</p>\n<p><img src=\"/2015/12/06/windows系统安装/校验.png\" alt=\"img\"></p>\n<p>d）、刻录完成后，即可进入安装步骤。</p>\n<p>②、U盘刻录，较光盘安装效率更高，U盘大小需要大于iso镜像。依然用UltralISO刻录。</p>\n<p>a)、打开下载后的iso系统镜像。</p>\n<p>b)、选择启动–写入硬盘镜像。</p>\n<p><img src=\"/2015/12/06/windows系统安装/写入.png\" alt=\"img\"></p>\n<p>c)、放入空白U盘（会被格式化，U盘上资料提前备份到他处），写入usb-hdd+引导。写入方式也选择usb-hdd+</p>\n<p> <img src=\"/2015/12/06/windows系统安装/引导.png\" alt=\"img\"> </p>\n<p>d)、格式化，写入完成后进入安装步骤。</p>\n<p>③、硬盘安装，安装速度快，对新手操作略繁琐（主要指PE系统的使用）</p>\n<p>a)、xp–&gt;win7，或者类似的低版本系统升级高版本系统，且两个系统都是x86或者x64的，可以将下载后的iso系统镜像文件，用winRAR之类的解压缩工具解压到非C盘的磁盘目录下，然后双击运行Setup.exe即可进入安装步骤。</p>\n<p>b)、上一步也可以用虚拟光驱工具，加载iso系统镜像，然后再“我的电脑”下找到加载后的系统安装盘，双击运行其中的setup.exe进入安装步骤。</p>\n<p> <img src=\"/2015/12/06/windows系统安装/镜像.png\" alt=\"img\"></p>\n<p> <img src=\"/2015/12/06/windows系统安装/镜像2.png\" alt=\"img\"></p>\n<p>c)、如上两条均需要当前系统可用的前提下，满足一定条件才可实现。倘若系统崩溃无法进入系统，则需要使用其他电脑制作安装光盘/U盘，放于本电脑来安装。亦或者，有PE系统，进入PE系统环境安装。（PE系统的制作，稍后再讲）</p>\n<p>三、系统安装</p>\n<p>1、将制作好的安装光盘/U盘连接电脑</p>\n<p>2、开机选择进入启动选择菜单，不同品牌电脑的进入方式不同，一般在开机显示品牌LOGO时，下面会有提示。Lenovo是按F12进入快速选择启动项，其他品牌自行百度，如“联想进入开机选项方式”。一般为Delete，Esc，F2等。</p>\n<p>3、进入启动项菜单后，若是光盘为安装盘，一般不用上一步就会进入安装界面，但有的也需要在此步骤选择光驱启动，回车即可。U盘为安装盘，则选择对应的USB启动项。</p>\n<p>4、如上无误则进入安装界面，一路下一步即可</p>\n<p> <img src=\"/2015/12/06/windows系统安装/安装语言.png\" alt=\"img\"> </p>\n<p>5、在下图步骤时，非全新硬盘则选择C盘，可以点击高级选项中，可以格式化，分区等，C盘数据会丢失，所以安装系统前备份好个人C盘的重要资料，如我的文档，桌面等等上面的资料。（崩溃后的系统可以在PE环境下备份数据）</p>\n<p><img src=\"/2015/12/06/windows系统安装/选择分区.png\" alt=\"img\"></p>\n<p>6、几乎一路下一步就可完成安装，系统可能会让提供安装密钥，可百度相应系统的序列号即可。（在第一步中选择的不同系统源，决定安装步骤的差异，一般大致相同）</p>\n<p> <img src=\"http://img.blog.csdn.net/20151206161206568?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"img\"></p>\n<p> <img src=\"/2015/12/06/windows系统安装/安装完成.png\" alt=\"img\"></p>\n<p>四、系统设置及优化</p>\n<p>至此即可完成系统的安装，windows系列的安装大同小异，安装好系统仅仅是一个好的桌面系统环境的第一步，之后需要打补丁，装软件，优化设置，其重要性不亚于系统的安装，有一个良好的使用习惯，会让你的电脑保持较为长久的流畅和高效状态。</p>\n<p>纯净初装系统并无集成驱动，甚至无法联网，用户需要从他处下载带网卡驱动的驱动精灵或驱动人生等，安装后一键安装所有必须的驱动，同时安装必要的软件，安装补丁等。</p>\n<p>需要注意的是下载软件尽可能都在官网下载，安装时候注意选择自定安装，留心去掉需要没用的默认勾选，否则可能会被附带安装太多不要的东西。安装软件建议安装到D盘下自建一个公用目录，最好英文无空格，以免极个别奇葩软件无法运行。</p>\n<p>任何软件的安装后，都需要进行设置，更改其设置中暗含的默认选项，免除流氓广告和其他无关行为。</p>\n<p>系统装好驱动和补丁后，及时清理系统垃圾，优化设置，具体优化无法一篇概论，提供一些个人用的优化工具，请自行使用，优化工具需要善用，错误操作责任自负。</p>\n<p>另：建议系统设置优化完成后，安装一个Ghost备份工具，备份系统，或者是本地PE系统，以备不时之需。</p>\n<p> <img src=\"/2015/12/06/windows系统安装/onekey.png\" alt=\"img\"><img src=\"/2015/12/06/windows系统安装/pe.png\" alt=\"img\"></p>\n<p>附件：本文所需工具均可自行在网上下载官方版本。—UltralISO：OneKey：微PE：魔方优化：— </p>\n"},{"title":"个人开发工具集","date":"2017-03-31T07:42:42.000Z","_content":"\n##windows平台：\n​\t1、文本编辑：notepad++、sublime text,miu,typora，ultraEdit\n​\t2、开发工具：JDK、ndk、Android sdk、C free、tomcat\n​\t3、编程IDE：Ecipse、myEclipse、AndroidStudio、visual studio\n​\t4、代码编辑：atom、github for windows、source insight、visual studio code\n​\t5、版本控制：git、SVN\n​\t6、数据库：sqliteman、sqlite developer,native premium\n​\t7、浏览器：chrome、firefox、opera、Torbrowser\n​\t8、虚拟机：vmplayer、virtualbox\n​\t9、通讯工具：飞秋、QQ\n​\t10、办公软件：office、WPS、Adobe Acrobat、AcmeCADsee、SetupOfficeTabEnterprise\n​\t11、设计工具：Photoshop、PXcook、Axure、mockup\n​\t12、反编译工具：apkdb\n​\t13、终端工具：xmanager{xshell、xftp}\n​\t14、流程图：PowerDesigner、visio、亿图图示\n​\t15、文件对比：beyond compare\n​\t16、思维导图：xmind、mind manager、mind map\n​\t17、项目管理：project\n​\t18、快速搜索：everything,光速搜索、findstr\n​\t19、笔记工具：印象笔记、为知笔记\n​\t20、系统增强：Q-dir、Totalcmd、\n​\t辅助工具：柠檬桌面、橙子护眼、有道词典、folder marker、刻度尺、ARGBHex、color-beta、gifcam、game protector、screen to gif、ipscanner、Synergy/mouse without borders、AnyDesk、xsearch、faststone、image2ascii、colorpicker、HiJson、netAssist、Pointofix\n​\t\n##Linux平台：\n\n​\t1、文本编辑：gedit、sublime text、typora,geany,vim,emacs(一直在膜拜，从未使用过)，ultraEdit、wxhexEditor\n​\t2、开发工具：JDK/open JDK、Android SDK、tomcat\n​\t3、编程IDE：Eclilpse、myEclipse、AndroidStudio、intellij\n​\t4、代码编辑：atom、visual studio code\n​\t5、数据库:sqlite man,native premium\n​\t6、版本控制：git\n​\t7、办公软件：libreoffice、WPS\n​\t8、浏览器：chrome、firefox、opera、Torbrowser\n​\t9、虚拟机：vmplayer、virtualbox\n​\t10、通讯工具：iptux\n​\t11、设计工具：gimp、inscape\n​\t12、流程图：Dia、libreDraw、umbrello\n​\t13、文件对比：beyond compare\n​\t14、思维导图：xmind\n​\t15、项目管理：Planner\n​\t16、笔记工具：为知笔记、印象笔记\n​\t辅助工具：shutter、RecordMyDesktop、chm see、Synergy、AnyDesk、zsh、clementine、fingerprint、indicator-lockkeys、redshift、flux","source":"_posts/个人开发工具集.md","raw":"---\ntitle: 个人开发工具集\ndate: 2017-03-31 15:42:42\ntags:\n    - Windows\n    - Linux\ncategories:\n    - Tools\n---\n\n##windows平台：\n​\t1、文本编辑：notepad++、sublime text,miu,typora，ultraEdit\n​\t2、开发工具：JDK、ndk、Android sdk、C free、tomcat\n​\t3、编程IDE：Ecipse、myEclipse、AndroidStudio、visual studio\n​\t4、代码编辑：atom、github for windows、source insight、visual studio code\n​\t5、版本控制：git、SVN\n​\t6、数据库：sqliteman、sqlite developer,native premium\n​\t7、浏览器：chrome、firefox、opera、Torbrowser\n​\t8、虚拟机：vmplayer、virtualbox\n​\t9、通讯工具：飞秋、QQ\n​\t10、办公软件：office、WPS、Adobe Acrobat、AcmeCADsee、SetupOfficeTabEnterprise\n​\t11、设计工具：Photoshop、PXcook、Axure、mockup\n​\t12、反编译工具：apkdb\n​\t13、终端工具：xmanager{xshell、xftp}\n​\t14、流程图：PowerDesigner、visio、亿图图示\n​\t15、文件对比：beyond compare\n​\t16、思维导图：xmind、mind manager、mind map\n​\t17、项目管理：project\n​\t18、快速搜索：everything,光速搜索、findstr\n​\t19、笔记工具：印象笔记、为知笔记\n​\t20、系统增强：Q-dir、Totalcmd、\n​\t辅助工具：柠檬桌面、橙子护眼、有道词典、folder marker、刻度尺、ARGBHex、color-beta、gifcam、game protector、screen to gif、ipscanner、Synergy/mouse without borders、AnyDesk、xsearch、faststone、image2ascii、colorpicker、HiJson、netAssist、Pointofix\n​\t\n##Linux平台：\n\n​\t1、文本编辑：gedit、sublime text、typora,geany,vim,emacs(一直在膜拜，从未使用过)，ultraEdit、wxhexEditor\n​\t2、开发工具：JDK/open JDK、Android SDK、tomcat\n​\t3、编程IDE：Eclilpse、myEclipse、AndroidStudio、intellij\n​\t4、代码编辑：atom、visual studio code\n​\t5、数据库:sqlite man,native premium\n​\t6、版本控制：git\n​\t7、办公软件：libreoffice、WPS\n​\t8、浏览器：chrome、firefox、opera、Torbrowser\n​\t9、虚拟机：vmplayer、virtualbox\n​\t10、通讯工具：iptux\n​\t11、设计工具：gimp、inscape\n​\t12、流程图：Dia、libreDraw、umbrello\n​\t13、文件对比：beyond compare\n​\t14、思维导图：xmind\n​\t15、项目管理：Planner\n​\t16、笔记工具：为知笔记、印象笔记\n​\t辅助工具：shutter、RecordMyDesktop、chm see、Synergy、AnyDesk、zsh、clementine、fingerprint、indicator-lockkeys、redshift、flux","slug":"个人开发工具集","published":1,"updated":"2017-03-31T07:44:15.051Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0xj1nfn000xscowr8gx1ayi","content":"<p>##windows平台：<br>​    1、文本编辑：notepad++、sublime text,miu,typora，ultraEdit<br>​    2、开发工具：JDK、ndk、Android sdk、C free、tomcat<br>​    3、编程IDE：Ecipse、myEclipse、AndroidStudio、visual studio<br>​    4、代码编辑：atom、github for windows、source insight、visual studio code<br>​    5、版本控制：git、SVN<br>​    6、数据库：sqliteman、sqlite developer,native premium<br>​    7、浏览器：chrome、firefox、opera、Torbrowser<br>​    8、虚拟机：vmplayer、virtualbox<br>​    9、通讯工具：飞秋、QQ<br>​    10、办公软件：office、WPS、Adobe Acrobat、AcmeCADsee、SetupOfficeTabEnterprise<br>​    11、设计工具：Photoshop、PXcook、Axure、mockup<br>​    12、反编译工具：apkdb<br>​    13、终端工具：xmanager{xshell、xftp}<br>​    14、流程图：PowerDesigner、visio、亿图图示<br>​    15、文件对比：beyond compare<br>​    16、思维导图：xmind、mind manager、mind map<br>​    17、项目管理：project<br>​    18、快速搜索：everything,光速搜索、findstr<br>​    19、笔记工具：印象笔记、为知笔记<br>​    20、系统增强：Q-dir、Totalcmd、<br>​    辅助工具：柠檬桌面、橙子护眼、有道词典、folder marker、刻度尺、ARGBHex、color-beta、gifcam、game protector、screen to gif、ipscanner、Synergy/mouse without borders、AnyDesk、xsearch、faststone、image2ascii、colorpicker、HiJson、netAssist、Pointofix<br>​    </p>\n<p>##Linux平台：</p>\n<p>​    1、文本编辑：gedit、sublime text、typora,geany,vim,emacs(一直在膜拜，从未使用过)，ultraEdit、wxhexEditor<br>​    2、开发工具：JDK/open JDK、Android SDK、tomcat<br>​    3、编程IDE：Eclilpse、myEclipse、AndroidStudio、intellij<br>​    4、代码编辑：atom、visual studio code<br>​    5、数据库:sqlite man,native premium<br>​    6、版本控制：git<br>​    7、办公软件：libreoffice、WPS<br>​    8、浏览器：chrome、firefox、opera、Torbrowser<br>​    9、虚拟机：vmplayer、virtualbox<br>​    10、通讯工具：iptux<br>​    11、设计工具：gimp、inscape<br>​    12、流程图：Dia、libreDraw、umbrello<br>​    13、文件对比：beyond compare<br>​    14、思维导图：xmind<br>​    15、项目管理：Planner<br>​    16、笔记工具：为知笔记、印象笔记<br>​    辅助工具：shutter、RecordMyDesktop、chm see、Synergy、AnyDesk、zsh、clementine、fingerprint、indicator-lockkeys、redshift、flux</p>\n","excerpt":"","more":"<p>##windows平台：<br>​    1、文本编辑：notepad++、sublime text,miu,typora，ultraEdit<br>​    2、开发工具：JDK、ndk、Android sdk、C free、tomcat<br>​    3、编程IDE：Ecipse、myEclipse、AndroidStudio、visual studio<br>​    4、代码编辑：atom、github for windows、source insight、visual studio code<br>​    5、版本控制：git、SVN<br>​    6、数据库：sqliteman、sqlite developer,native premium<br>​    7、浏览器：chrome、firefox、opera、Torbrowser<br>​    8、虚拟机：vmplayer、virtualbox<br>​    9、通讯工具：飞秋、QQ<br>​    10、办公软件：office、WPS、Adobe Acrobat、AcmeCADsee、SetupOfficeTabEnterprise<br>​    11、设计工具：Photoshop、PXcook、Axure、mockup<br>​    12、反编译工具：apkdb<br>​    13、终端工具：xmanager{xshell、xftp}<br>​    14、流程图：PowerDesigner、visio、亿图图示<br>​    15、文件对比：beyond compare<br>​    16、思维导图：xmind、mind manager、mind map<br>​    17、项目管理：project<br>​    18、快速搜索：everything,光速搜索、findstr<br>​    19、笔记工具：印象笔记、为知笔记<br>​    20、系统增强：Q-dir、Totalcmd、<br>​    辅助工具：柠檬桌面、橙子护眼、有道词典、folder marker、刻度尺、ARGBHex、color-beta、gifcam、game protector、screen to gif、ipscanner、Synergy/mouse without borders、AnyDesk、xsearch、faststone、image2ascii、colorpicker、HiJson、netAssist、Pointofix<br>​    </p>\n<p>##Linux平台：</p>\n<p>​    1、文本编辑：gedit、sublime text、typora,geany,vim,emacs(一直在膜拜，从未使用过)，ultraEdit、wxhexEditor<br>​    2、开发工具：JDK/open JDK、Android SDK、tomcat<br>​    3、编程IDE：Eclilpse、myEclipse、AndroidStudio、intellij<br>​    4、代码编辑：atom、visual studio code<br>​    5、数据库:sqlite man,native premium<br>​    6、版本控制：git<br>​    7、办公软件：libreoffice、WPS<br>​    8、浏览器：chrome、firefox、opera、Torbrowser<br>​    9、虚拟机：vmplayer、virtualbox<br>​    10、通讯工具：iptux<br>​    11、设计工具：gimp、inscape<br>​    12、流程图：Dia、libreDraw、umbrello<br>​    13、文件对比：beyond compare<br>​    14、思维导图：xmind<br>​    15、项目管理：Planner<br>​    16、笔记工具：为知笔记、印象笔记<br>​    辅助工具：shutter、RecordMyDesktop、chm see、Synergy、AnyDesk、zsh、clementine、fingerprint、indicator-lockkeys、redshift、flux</p>\n"},{"title":"Android入门基础","date":"2017-03-27T08:57:00.000Z","author":"冰路梦","_content":"## 第一章、Android入门基础\n\n### 1.$建立App$\n\nIntent 启动activity。传递参数。有显示和隐式的区分。explicit intent和implicit intent。\n\n### 2.$ActionBar$\n\n- 声明父类Activity，在AndroidManifest.xml文件中,Activity节点下，有activity:parentActivityName的属性，并在ActionBar中调用getSupportActionBar().setDisplayHomeAsUpEnabled(true);方法，如此点击ActionBar的返回键，会跳转到其声明的super Activity而不会返回到启动它的那个activity了。\n- 在application节点或者activity节点下，配置theme属性，可以更改actionbar的主题，可以自定义主题style.xml文件，一般要继承parent一个theme，然后item各个属性，配置自定义的颜色或者图片样式。可以自定义selector美化样式。\n- actionbar可以调用hide和show方法，达到隐藏显示的效果，通过android:windowActionBarOverlay设置为true的属性方法，来启动叠加。避免隐藏和显示actionbar而造成界面大小的调整重绘。`兼容低版本，有support库，好多属性和高版本属性一样名称，但是前面没有android:如android:paddingTop=\"?attr/actionBarSize\"问号后就没有android:表明这是support库的属性。`\n\n### 3.$Compatibile Devices$\n\n- 语言：res下的value目录，建立不同的value，适配不同的语言。如value-en,value-zh\n- 屏幕尺寸：res下layout配置不同，有四种尺寸和分辨率小(small)，普通(normal)，大(large)，超大(xlarge)；低精度(ldpi), 中精度(mdpi), 高精度(hdpi), 超高精度(xhdpi)；如layout-large,layout-land,layout-large-land等等。其中分辨率和屏幕密度有关，ldpi=0.75,mdpi=1,hdpi=1.5,xhdpi=2;\n\n### 4.$ActivityLifeCircle$\n\n- Activity生命周期金字塔![base_life_circle](第一篇、Android入门基础/basic-lifecycle.png \"Activity生命周期图\")\n\n  > 如果在onCreated方法中调用了finish方法，则会直接调用onDestoryed方法，而不会走其他流程。\n  >\n  > 在onPaused方法中做一些资源释放比较好，数据保存之类的可以放在onStoped方法中。对应的在onResumed方法中恢复一些资源。**Activity的非正常销毁，并不一定会被调用onDestoryed方法**  \n  >\n  > Activity会自动保存一些view控件类的状态到bundle中，用于异常时候恢复。然而其他数据则需要手动保存。onSaveInstanceState()重写来保存数据(Activity需要重建才会调用它)，在activity重建时候，会将数据传递到bundle给oncreate或者onRestoreInstanceState()。  \n  >\n  > 跳转到其他activity或者按home键，都会调用onSaveInstanceState方法，然而从被跳转Activity返回上一个activity，其不会调用onSaveInstanceState。`在onCreated中需要判断bundle是否为空，而在onRestoreInstanceState中，不需要。`\n\n### 5.Fragment\n\n- Fragment 必须复写onCreateView方法，inflate布局文件或view。但是xml布局写fragment的方式不能动态删减fragment。所以可以在代码中添加fragment，但是需要在布局拥有一个layout容器。\n\n   用fragment manager来管理，需要启用事务，transaction例如\n\n```java\nFragmentTransaction transaction= getSupportFragmentManager().beginTransaction();\ntransaction.replace(R.id.fragment_container, newFragment);//可以add,hide\ntransaction.addToBackStack(null);//设置用于用户回退操作。参数为事务名。\n// Commit the transaction\ntransaction.commit();\n```\n- Fragments之间交互，要通过Activity，在Fragment中定义接口和方法，activity实现。然后fragment调用方法后，会传递到activity中。\n\n### 6.保存数据\n\n- context.getSharedPreferences()，需要设置名称，而activity.getPreferences()获得默认的。似乎还有个getDefaultPreferences();的方法。写用sp的editor，commit。读取用sp的get。\n- 保存到文件，有内部外部之分，内部和外部的getExternalFilesDir()会与app共存亡，而getPublicFile。内部有getFile和cache。可以通过createCacheFile方法创建缓存文件。外部public文件夹，需要指明类别DIRECTORY_PICTURES等。使用前需要判断sd卡状态，和空间getFreeSpace(),getTotalSpace().删除文件可以context.deletefile().\n- getWriteable和getReadable，都是可读写的对象，不过getReadable先尝试获取可写，不行，再只读。而writeable就报错了。\n\n### 7.与其他应用交互\n\n- #### Intent的发送\n\n  > 1. intent发送出去，一般情况下Android会保证有应用接收intent，但是若真的没有应用接收intent，那么app会崩溃。此时可以检测是否有接收intent的应用，若没有，可提供下载链接或者终止操作。\n  >\n  >    ```java\n  >    PackageManager packageManager = getPackageManager();\n  >    List<ResolveInfo> activities = packageManager.queryIntentActivities(intent, 0);\n  >    boolean isIntentSafe = activities.size() > 0;\n  >    ```\n  >\n  > 2. 一般start Activity有多个响应的话，用户可以选择默认程序，下次就不会弹出选择。然而分享功能，就需要必须显示所有响应的app，可用如下代码：createChooser来创建intent，还能设置标题，并在无应用响应时候提示。\n  >\n  > ```java\n  > Intent intent = new Intent(Intent.ACTION_SEND);\n  > ...\n  > // Always use string resources for UI text. This says something like \"Share this photo with\"\n  > String title = getResources().getText(R.string.chooser_title);\n  > // Create and start the chooser\n  > Intent chooser = Intent.createChooser(intent, title);\n  > startActivity(chooser);\n  > ```\n\n- #### 接收Activity返回的结果\n\n  > requestCode，ResultCode,请求码和返回码，要知道返回数据类型结构，才能正确使用。\n\n- #### Intent过滤\n\n  > 1. Intent设置Action调用相应的app，对应的app需要在android manifest清单文件中，activity节点注册相应的action，intent-filter。Data属性可以更为具体细致的过滤action的数据请求。而category一般少用，都是默认。但是也必须声明.\n  >\n  >    ```xml\n  >    <activity android:name=\"ShareActivity\">\n  >        <intent-filter>\n  >            <action android:name=\"android.intent.action.SEND\"/>\n  >            <category android:name=\"android.intent.category.DEFAULT\"/>\n  >            <data android:mimeType=\"text/plain\"/>\n  >            <data android:mimeType=\"image/*\"/>\n  >        </intent-filter>\n  >    </activity>\n  >    ```\n  >\n  >    *若是不同的action拥有不同的data，则需要分开写两个intent-filter*\n  >\n  > 2. 一般onCreate或onStart中getIntent接收intent，做数据处理。其他地方可set Result来返回结果给调用该Activity的Activity。一般要指定result Code，若是没处理setResult，比如按了back则会有默认的ResultCancel返回。\n  >\n  > 3. setResult也不一定非得是返回码标志，若是请求结果就要int数值，则可以直接返回一个>0的int数值回去。本Activity不必在意是被start Activity还是forResult，系统会判断。\n  >\n  > ```java\n  > setResult(RESULT_COLOR_RED);\n  > finish();\n  > ```\n","source":"_posts/第一篇、Android入门基础.md","raw":"---\ntitle: \"Android入门基础\"\ndate: 2017-03-27 16:57\nauthor: 冰路梦\ntag:\n    - Android\ncategories:\n    - Android\n---\n## 第一章、Android入门基础\n\n### 1.$建立App$\n\nIntent 启动activity。传递参数。有显示和隐式的区分。explicit intent和implicit intent。\n\n### 2.$ActionBar$\n\n- 声明父类Activity，在AndroidManifest.xml文件中,Activity节点下，有activity:parentActivityName的属性，并在ActionBar中调用getSupportActionBar().setDisplayHomeAsUpEnabled(true);方法，如此点击ActionBar的返回键，会跳转到其声明的super Activity而不会返回到启动它的那个activity了。\n- 在application节点或者activity节点下，配置theme属性，可以更改actionbar的主题，可以自定义主题style.xml文件，一般要继承parent一个theme，然后item各个属性，配置自定义的颜色或者图片样式。可以自定义selector美化样式。\n- actionbar可以调用hide和show方法，达到隐藏显示的效果，通过android:windowActionBarOverlay设置为true的属性方法，来启动叠加。避免隐藏和显示actionbar而造成界面大小的调整重绘。`兼容低版本，有support库，好多属性和高版本属性一样名称，但是前面没有android:如android:paddingTop=\"?attr/actionBarSize\"问号后就没有android:表明这是support库的属性。`\n\n### 3.$Compatibile Devices$\n\n- 语言：res下的value目录，建立不同的value，适配不同的语言。如value-en,value-zh\n- 屏幕尺寸：res下layout配置不同，有四种尺寸和分辨率小(small)，普通(normal)，大(large)，超大(xlarge)；低精度(ldpi), 中精度(mdpi), 高精度(hdpi), 超高精度(xhdpi)；如layout-large,layout-land,layout-large-land等等。其中分辨率和屏幕密度有关，ldpi=0.75,mdpi=1,hdpi=1.5,xhdpi=2;\n\n### 4.$ActivityLifeCircle$\n\n- Activity生命周期金字塔![base_life_circle](第一篇、Android入门基础/basic-lifecycle.png \"Activity生命周期图\")\n\n  > 如果在onCreated方法中调用了finish方法，则会直接调用onDestoryed方法，而不会走其他流程。\n  >\n  > 在onPaused方法中做一些资源释放比较好，数据保存之类的可以放在onStoped方法中。对应的在onResumed方法中恢复一些资源。**Activity的非正常销毁，并不一定会被调用onDestoryed方法**  \n  >\n  > Activity会自动保存一些view控件类的状态到bundle中，用于异常时候恢复。然而其他数据则需要手动保存。onSaveInstanceState()重写来保存数据(Activity需要重建才会调用它)，在activity重建时候，会将数据传递到bundle给oncreate或者onRestoreInstanceState()。  \n  >\n  > 跳转到其他activity或者按home键，都会调用onSaveInstanceState方法，然而从被跳转Activity返回上一个activity，其不会调用onSaveInstanceState。`在onCreated中需要判断bundle是否为空，而在onRestoreInstanceState中，不需要。`\n\n### 5.Fragment\n\n- Fragment 必须复写onCreateView方法，inflate布局文件或view。但是xml布局写fragment的方式不能动态删减fragment。所以可以在代码中添加fragment，但是需要在布局拥有一个layout容器。\n\n   用fragment manager来管理，需要启用事务，transaction例如\n\n```java\nFragmentTransaction transaction= getSupportFragmentManager().beginTransaction();\ntransaction.replace(R.id.fragment_container, newFragment);//可以add,hide\ntransaction.addToBackStack(null);//设置用于用户回退操作。参数为事务名。\n// Commit the transaction\ntransaction.commit();\n```\n- Fragments之间交互，要通过Activity，在Fragment中定义接口和方法，activity实现。然后fragment调用方法后，会传递到activity中。\n\n### 6.保存数据\n\n- context.getSharedPreferences()，需要设置名称，而activity.getPreferences()获得默认的。似乎还有个getDefaultPreferences();的方法。写用sp的editor，commit。读取用sp的get。\n- 保存到文件，有内部外部之分，内部和外部的getExternalFilesDir()会与app共存亡，而getPublicFile。内部有getFile和cache。可以通过createCacheFile方法创建缓存文件。外部public文件夹，需要指明类别DIRECTORY_PICTURES等。使用前需要判断sd卡状态，和空间getFreeSpace(),getTotalSpace().删除文件可以context.deletefile().\n- getWriteable和getReadable，都是可读写的对象，不过getReadable先尝试获取可写，不行，再只读。而writeable就报错了。\n\n### 7.与其他应用交互\n\n- #### Intent的发送\n\n  > 1. intent发送出去，一般情况下Android会保证有应用接收intent，但是若真的没有应用接收intent，那么app会崩溃。此时可以检测是否有接收intent的应用，若没有，可提供下载链接或者终止操作。\n  >\n  >    ```java\n  >    PackageManager packageManager = getPackageManager();\n  >    List<ResolveInfo> activities = packageManager.queryIntentActivities(intent, 0);\n  >    boolean isIntentSafe = activities.size() > 0;\n  >    ```\n  >\n  > 2. 一般start Activity有多个响应的话，用户可以选择默认程序，下次就不会弹出选择。然而分享功能，就需要必须显示所有响应的app，可用如下代码：createChooser来创建intent，还能设置标题，并在无应用响应时候提示。\n  >\n  > ```java\n  > Intent intent = new Intent(Intent.ACTION_SEND);\n  > ...\n  > // Always use string resources for UI text. This says something like \"Share this photo with\"\n  > String title = getResources().getText(R.string.chooser_title);\n  > // Create and start the chooser\n  > Intent chooser = Intent.createChooser(intent, title);\n  > startActivity(chooser);\n  > ```\n\n- #### 接收Activity返回的结果\n\n  > requestCode，ResultCode,请求码和返回码，要知道返回数据类型结构，才能正确使用。\n\n- #### Intent过滤\n\n  > 1. Intent设置Action调用相应的app，对应的app需要在android manifest清单文件中，activity节点注册相应的action，intent-filter。Data属性可以更为具体细致的过滤action的数据请求。而category一般少用，都是默认。但是也必须声明.\n  >\n  >    ```xml\n  >    <activity android:name=\"ShareActivity\">\n  >        <intent-filter>\n  >            <action android:name=\"android.intent.action.SEND\"/>\n  >            <category android:name=\"android.intent.category.DEFAULT\"/>\n  >            <data android:mimeType=\"text/plain\"/>\n  >            <data android:mimeType=\"image/*\"/>\n  >        </intent-filter>\n  >    </activity>\n  >    ```\n  >\n  >    *若是不同的action拥有不同的data，则需要分开写两个intent-filter*\n  >\n  > 2. 一般onCreate或onStart中getIntent接收intent，做数据处理。其他地方可set Result来返回结果给调用该Activity的Activity。一般要指定result Code，若是没处理setResult，比如按了back则会有默认的ResultCancel返回。\n  >\n  > 3. setResult也不一定非得是返回码标志，若是请求结果就要int数值，则可以直接返回一个>0的int数值回去。本Activity不必在意是被start Activity还是forResult，系统会判断。\n  >\n  > ```java\n  > setResult(RESULT_COLOR_RED);\n  > finish();\n  > ```\n","slug":"第一篇、Android入门基础","published":1,"updated":"2017-03-28T10:14:48.552Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0xj1nfo000yscowo10iqe73","content":"<h2 id=\"第一章、Android入门基础\"><a href=\"#第一章、Android入门基础\" class=\"headerlink\" title=\"第一章、Android入门基础\"></a>第一章、Android入门基础</h2><h3 id=\"1-建立App\"><a href=\"#1-建立App\" class=\"headerlink\" title=\"1.$建立App$\"></a>1.$建立App$</h3><p>Intent 启动activity。传递参数。有显示和隐式的区分。explicit intent和implicit intent。</p>\n<h3 id=\"2-ActionBar\"><a href=\"#2-ActionBar\" class=\"headerlink\" title=\"2.$ActionBar$\"></a>2.$ActionBar$</h3><ul>\n<li>声明父类Activity，在AndroidManifest.xml文件中,Activity节点下，有activity:parentActivityName的属性，并在ActionBar中调用getSupportActionBar().setDisplayHomeAsUpEnabled(true);方法，如此点击ActionBar的返回键，会跳转到其声明的super Activity而不会返回到启动它的那个activity了。</li>\n<li>在application节点或者activity节点下，配置theme属性，可以更改actionbar的主题，可以自定义主题style.xml文件，一般要继承parent一个theme，然后item各个属性，配置自定义的颜色或者图片样式。可以自定义selector美化样式。</li>\n<li>actionbar可以调用hide和show方法，达到隐藏显示的效果，通过android:windowActionBarOverlay设置为true的属性方法，来启动叠加。避免隐藏和显示actionbar而造成界面大小的调整重绘。<code>兼容低版本，有support库，好多属性和高版本属性一样名称，但是前面没有android:如android:paddingTop=&quot;?attr/actionBarSize&quot;问号后就没有android:表明这是support库的属性。</code></li>\n</ul>\n<h3 id=\"3-Compatibile-Devices\"><a href=\"#3-Compatibile-Devices\" class=\"headerlink\" title=\"3.$Compatibile Devices$\"></a>3.$Compatibile Devices$</h3><ul>\n<li>语言：res下的value目录，建立不同的value，适配不同的语言。如value-en,value-zh</li>\n<li>屏幕尺寸：res下layout配置不同，有四种尺寸和分辨率小(small)，普通(normal)，大(large)，超大(xlarge)；低精度(ldpi), 中精度(mdpi), 高精度(hdpi), 超高精度(xhdpi)；如layout-large,layout-land,layout-large-land等等。其中分辨率和屏幕密度有关，ldpi=0.75,mdpi=1,hdpi=1.5,xhdpi=2;</li>\n</ul>\n<h3 id=\"4-ActivityLifeCircle\"><a href=\"#4-ActivityLifeCircle\" class=\"headerlink\" title=\"4.$ActivityLifeCircle$\"></a>4.$ActivityLifeCircle$</h3><ul>\n<li><p>Activity生命周期金字塔<img src=\"/2017/03/27/第一篇、Android入门基础/basic-lifecycle.png\" alt=\"base_life_circle\" title=\"Activity生命周期图\"></p>\n<blockquote>\n<p>如果在onCreated方法中调用了finish方法，则会直接调用onDestoryed方法，而不会走其他流程。</p>\n<p>在onPaused方法中做一些资源释放比较好，数据保存之类的可以放在onStoped方法中。对应的在onResumed方法中恢复一些资源。<strong>Activity的非正常销毁，并不一定会被调用onDestoryed方法</strong>  </p>\n<p>Activity会自动保存一些view控件类的状态到bundle中，用于异常时候恢复。然而其他数据则需要手动保存。onSaveInstanceState()重写来保存数据(Activity需要重建才会调用它)，在activity重建时候，会将数据传递到bundle给oncreate或者onRestoreInstanceState()。  </p>\n<p>跳转到其他activity或者按home键，都会调用onSaveInstanceState方法，然而从被跳转Activity返回上一个activity，其不会调用onSaveInstanceState。<code>在onCreated中需要判断bundle是否为空，而在onRestoreInstanceState中，不需要。</code></p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"5-Fragment\"><a href=\"#5-Fragment\" class=\"headerlink\" title=\"5.Fragment\"></a>5.Fragment</h3><ul>\n<li><p>Fragment 必须复写onCreateView方法，inflate布局文件或view。但是xml布局写fragment的方式不能动态删减fragment。所以可以在代码中添加fragment，但是需要在布局拥有一个layout容器。</p>\n<p> 用fragment manager来管理，需要启用事务，transaction例如</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">FragmentTransaction transaction= getSupportFragmentManager().beginTransaction();</div><div class=\"line\">transaction.replace(R.id.fragment_container, newFragment);<span class=\"comment\">//可以add,hide</span></div><div class=\"line\">transaction.addToBackStack(<span class=\"keyword\">null</span>);<span class=\"comment\">//设置用于用户回退操作。参数为事务名。</span></div><div class=\"line\"><span class=\"comment\">// Commit the transaction</span></div><div class=\"line\">transaction.commit();</div></pre></td></tr></table></figure>\n<ul>\n<li>Fragments之间交互，要通过Activity，在Fragment中定义接口和方法，activity实现。然后fragment调用方法后，会传递到activity中。</li>\n</ul>\n<h3 id=\"6-保存数据\"><a href=\"#6-保存数据\" class=\"headerlink\" title=\"6.保存数据\"></a>6.保存数据</h3><ul>\n<li>context.getSharedPreferences()，需要设置名称，而activity.getPreferences()获得默认的。似乎还有个getDefaultPreferences();的方法。写用sp的editor，commit。读取用sp的get。</li>\n<li>保存到文件，有内部外部之分，内部和外部的getExternalFilesDir()会与app共存亡，而getPublicFile。内部有getFile和cache。可以通过createCacheFile方法创建缓存文件。外部public文件夹，需要指明类别DIRECTORY_PICTURES等。使用前需要判断sd卡状态，和空间getFreeSpace(),getTotalSpace().删除文件可以context.deletefile().</li>\n<li>getWriteable和getReadable，都是可读写的对象，不过getReadable先尝试获取可写，不行，再只读。而writeable就报错了。</li>\n</ul>\n<h3 id=\"7-与其他应用交互\"><a href=\"#7-与其他应用交互\" class=\"headerlink\" title=\"7.与其他应用交互\"></a>7.与其他应用交互</h3><ul>\n<li><h4 id=\"Intent的发送\"><a href=\"#Intent的发送\" class=\"headerlink\" title=\"Intent的发送\"></a>Intent的发送</h4><blockquote>\n<ol>\n<li><p>intent发送出去，一般情况下Android会保证有应用接收intent，但是若真的没有应用接收intent，那么app会崩溃。此时可以检测是否有接收intent的应用，若没有，可提供下载链接或者终止操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    PackageManager packageManager = getPackageManager();</div><div class=\"line\">&gt;    List&lt;ResolveInfo&gt; activities = packageManager.queryIntentActivities(intent, <span class=\"number\">0</span>);</div><div class=\"line\">&gt;    <span class=\"keyword\">boolean</span> isIntentSafe = activities.size() &gt; <span class=\"number\">0</span>;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li>一般start Activity有多个响应的话，用户可以选择默认程序，下次就不会弹出选择。然而分享功能，就需要必须显示所有响应的app，可用如下代码：createChooser来创建intent，还能设置标题，并在无应用响应时候提示。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; Intent intent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_SEND);</div><div class=\"line\">&gt; ...</div><div class=\"line\">&gt; <span class=\"comment\">// Always use string resources for UI text. This says something like \"Share this photo with\"</span></div><div class=\"line\">&gt; String title = getResources().getText(R.string.chooser_title);</div><div class=\"line\">&gt; <span class=\"comment\">// Create and start the chooser</span></div><div class=\"line\">&gt; Intent chooser = Intent.createChooser(intent, title);</div><div class=\"line\">&gt; startActivity(chooser);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><h4 id=\"接收Activity返回的结果\"><a href=\"#接收Activity返回的结果\" class=\"headerlink\" title=\"接收Activity返回的结果\"></a>接收Activity返回的结果</h4><blockquote>\n<p>requestCode，ResultCode,请求码和返回码，要知道返回数据类型结构，才能正确使用。</p>\n</blockquote>\n</li>\n<li><h4 id=\"Intent过滤\"><a href=\"#Intent过滤\" class=\"headerlink\" title=\"Intent过滤\"></a>Intent过滤</h4><blockquote>\n<ol>\n<li><p>Intent设置Action调用相应的app，对应的app需要在android manifest清单文件中，activity节点注册相应的action，intent-filter。Data属性可以更为具体细致的过滤action的数据请求。而category一般少用，都是默认。但是也必须声明.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    <span class=\"tag\">&lt;<span class=\"name\">activity</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"ShareActivity\"</span>&gt;</span></div><div class=\"line\">&gt;        <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">&gt;            <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.SEND\"</span>/&gt;</span></div><div class=\"line\">&gt;            <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.DEFAULT\"</span>/&gt;</span></div><div class=\"line\">&gt;            <span class=\"tag\">&lt;<span class=\"name\">data</span> <span class=\"attr\">android:mimeType</span>=<span class=\"string\">\"text/plain\"</span>/&gt;</span></div><div class=\"line\">&gt;            <span class=\"tag\">&lt;<span class=\"name\">data</span> <span class=\"attr\">android:mimeType</span>=<span class=\"string\">\"image/*\"</span>/&gt;</span></div><div class=\"line\">&gt;        <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">&gt;    <span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>   <em>若是不同的action拥有不同的data，则需要分开写两个intent-filter</em></p>\n<ol>\n<li><p>一般onCreate或onStart中getIntent接收intent，做数据处理。其他地方可set Result来返回结果给调用该Activity的Activity。一般要指定result Code，若是没处理setResult，比如按了back则会有默认的ResultCancel返回。</p>\n</li>\n<li><p>setResult也不一定非得是返回码标志，若是请求结果就要int数值，则可以直接返回一个&gt;0的int数值回去。本Activity不必在意是被start Activity还是forResult，系统会判断。</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; setResult(RESULT_COLOR_RED);</div><div class=\"line\">&gt; finish();</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"第一章、Android入门基础\"><a href=\"#第一章、Android入门基础\" class=\"headerlink\" title=\"第一章、Android入门基础\"></a>第一章、Android入门基础</h2><h3 id=\"1-建立App\"><a href=\"#1-建立App\" class=\"headerlink\" title=\"1.$建立App$\"></a>1.$建立App$</h3><p>Intent 启动activity。传递参数。有显示和隐式的区分。explicit intent和implicit intent。</p>\n<h3 id=\"2-ActionBar\"><a href=\"#2-ActionBar\" class=\"headerlink\" title=\"2.$ActionBar$\"></a>2.$ActionBar$</h3><ul>\n<li>声明父类Activity，在AndroidManifest.xml文件中,Activity节点下，有activity:parentActivityName的属性，并在ActionBar中调用getSupportActionBar().setDisplayHomeAsUpEnabled(true);方法，如此点击ActionBar的返回键，会跳转到其声明的super Activity而不会返回到启动它的那个activity了。</li>\n<li>在application节点或者activity节点下，配置theme属性，可以更改actionbar的主题，可以自定义主题style.xml文件，一般要继承parent一个theme，然后item各个属性，配置自定义的颜色或者图片样式。可以自定义selector美化样式。</li>\n<li>actionbar可以调用hide和show方法，达到隐藏显示的效果，通过android:windowActionBarOverlay设置为true的属性方法，来启动叠加。避免隐藏和显示actionbar而造成界面大小的调整重绘。<code>兼容低版本，有support库，好多属性和高版本属性一样名称，但是前面没有android:如android:paddingTop=&quot;?attr/actionBarSize&quot;问号后就没有android:表明这是support库的属性。</code></li>\n</ul>\n<h3 id=\"3-Compatibile-Devices\"><a href=\"#3-Compatibile-Devices\" class=\"headerlink\" title=\"3.$Compatibile Devices$\"></a>3.$Compatibile Devices$</h3><ul>\n<li>语言：res下的value目录，建立不同的value，适配不同的语言。如value-en,value-zh</li>\n<li>屏幕尺寸：res下layout配置不同，有四种尺寸和分辨率小(small)，普通(normal)，大(large)，超大(xlarge)；低精度(ldpi), 中精度(mdpi), 高精度(hdpi), 超高精度(xhdpi)；如layout-large,layout-land,layout-large-land等等。其中分辨率和屏幕密度有关，ldpi=0.75,mdpi=1,hdpi=1.5,xhdpi=2;</li>\n</ul>\n<h3 id=\"4-ActivityLifeCircle\"><a href=\"#4-ActivityLifeCircle\" class=\"headerlink\" title=\"4.$ActivityLifeCircle$\"></a>4.$ActivityLifeCircle$</h3><ul>\n<li><p>Activity生命周期金字塔<img src=\"/2017/03/27/第一篇、Android入门基础/basic-lifecycle.png\" alt=\"base_life_circle\" title=\"Activity生命周期图\"></p>\n<blockquote>\n<p>如果在onCreated方法中调用了finish方法，则会直接调用onDestoryed方法，而不会走其他流程。</p>\n<p>在onPaused方法中做一些资源释放比较好，数据保存之类的可以放在onStoped方法中。对应的在onResumed方法中恢复一些资源。<strong>Activity的非正常销毁，并不一定会被调用onDestoryed方法</strong>  </p>\n<p>Activity会自动保存一些view控件类的状态到bundle中，用于异常时候恢复。然而其他数据则需要手动保存。onSaveInstanceState()重写来保存数据(Activity需要重建才会调用它)，在activity重建时候，会将数据传递到bundle给oncreate或者onRestoreInstanceState()。  </p>\n<p>跳转到其他activity或者按home键，都会调用onSaveInstanceState方法，然而从被跳转Activity返回上一个activity，其不会调用onSaveInstanceState。<code>在onCreated中需要判断bundle是否为空，而在onRestoreInstanceState中，不需要。</code></p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"5-Fragment\"><a href=\"#5-Fragment\" class=\"headerlink\" title=\"5.Fragment\"></a>5.Fragment</h3><ul>\n<li><p>Fragment 必须复写onCreateView方法，inflate布局文件或view。但是xml布局写fragment的方式不能动态删减fragment。所以可以在代码中添加fragment，但是需要在布局拥有一个layout容器。</p>\n<p> 用fragment manager来管理，需要启用事务，transaction例如</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">FragmentTransaction transaction= getSupportFragmentManager().beginTransaction();</div><div class=\"line\">transaction.replace(R.id.fragment_container, newFragment);<span class=\"comment\">//可以add,hide</span></div><div class=\"line\">transaction.addToBackStack(<span class=\"keyword\">null</span>);<span class=\"comment\">//设置用于用户回退操作。参数为事务名。</span></div><div class=\"line\"><span class=\"comment\">// Commit the transaction</span></div><div class=\"line\">transaction.commit();</div></pre></td></tr></table></figure>\n<ul>\n<li>Fragments之间交互，要通过Activity，在Fragment中定义接口和方法，activity实现。然后fragment调用方法后，会传递到activity中。</li>\n</ul>\n<h3 id=\"6-保存数据\"><a href=\"#6-保存数据\" class=\"headerlink\" title=\"6.保存数据\"></a>6.保存数据</h3><ul>\n<li>context.getSharedPreferences()，需要设置名称，而activity.getPreferences()获得默认的。似乎还有个getDefaultPreferences();的方法。写用sp的editor，commit。读取用sp的get。</li>\n<li>保存到文件，有内部外部之分，内部和外部的getExternalFilesDir()会与app共存亡，而getPublicFile。内部有getFile和cache。可以通过createCacheFile方法创建缓存文件。外部public文件夹，需要指明类别DIRECTORY_PICTURES等。使用前需要判断sd卡状态，和空间getFreeSpace(),getTotalSpace().删除文件可以context.deletefile().</li>\n<li>getWriteable和getReadable，都是可读写的对象，不过getReadable先尝试获取可写，不行，再只读。而writeable就报错了。</li>\n</ul>\n<h3 id=\"7-与其他应用交互\"><a href=\"#7-与其他应用交互\" class=\"headerlink\" title=\"7.与其他应用交互\"></a>7.与其他应用交互</h3><ul>\n<li><h4 id=\"Intent的发送\"><a href=\"#Intent的发送\" class=\"headerlink\" title=\"Intent的发送\"></a>Intent的发送</h4><blockquote>\n<ol>\n<li><p>intent发送出去，一般情况下Android会保证有应用接收intent，但是若真的没有应用接收intent，那么app会崩溃。此时可以检测是否有接收intent的应用，若没有，可提供下载链接或者终止操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    PackageManager packageManager = getPackageManager();</div><div class=\"line\">&gt;    List&lt;ResolveInfo&gt; activities = packageManager.queryIntentActivities(intent, <span class=\"number\">0</span>);</div><div class=\"line\">&gt;    <span class=\"keyword\">boolean</span> isIntentSafe = activities.size() &gt; <span class=\"number\">0</span>;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li>一般start Activity有多个响应的话，用户可以选择默认程序，下次就不会弹出选择。然而分享功能，就需要必须显示所有响应的app，可用如下代码：createChooser来创建intent，还能设置标题，并在无应用响应时候提示。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; Intent intent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_SEND);</div><div class=\"line\">&gt; ...</div><div class=\"line\">&gt; <span class=\"comment\">// Always use string resources for UI text. This says something like \"Share this photo with\"</span></div><div class=\"line\">&gt; String title = getResources().getText(R.string.chooser_title);</div><div class=\"line\">&gt; <span class=\"comment\">// Create and start the chooser</span></div><div class=\"line\">&gt; Intent chooser = Intent.createChooser(intent, title);</div><div class=\"line\">&gt; startActivity(chooser);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><h4 id=\"接收Activity返回的结果\"><a href=\"#接收Activity返回的结果\" class=\"headerlink\" title=\"接收Activity返回的结果\"></a>接收Activity返回的结果</h4><blockquote>\n<p>requestCode，ResultCode,请求码和返回码，要知道返回数据类型结构，才能正确使用。</p>\n</blockquote>\n</li>\n<li><h4 id=\"Intent过滤\"><a href=\"#Intent过滤\" class=\"headerlink\" title=\"Intent过滤\"></a>Intent过滤</h4><blockquote>\n<ol>\n<li><p>Intent设置Action调用相应的app，对应的app需要在android manifest清单文件中，activity节点注册相应的action，intent-filter。Data属性可以更为具体细致的过滤action的数据请求。而category一般少用，都是默认。但是也必须声明.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    <span class=\"tag\">&lt;<span class=\"name\">activity</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"ShareActivity\"</span>&gt;</span></div><div class=\"line\">&gt;        <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">&gt;            <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.SEND\"</span>/&gt;</span></div><div class=\"line\">&gt;            <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.DEFAULT\"</span>/&gt;</span></div><div class=\"line\">&gt;            <span class=\"tag\">&lt;<span class=\"name\">data</span> <span class=\"attr\">android:mimeType</span>=<span class=\"string\">\"text/plain\"</span>/&gt;</span></div><div class=\"line\">&gt;            <span class=\"tag\">&lt;<span class=\"name\">data</span> <span class=\"attr\">android:mimeType</span>=<span class=\"string\">\"image/*\"</span>/&gt;</span></div><div class=\"line\">&gt;        <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">&gt;    <span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>   <em>若是不同的action拥有不同的data，则需要分开写两个intent-filter</em></p>\n<ol>\n<li><p>一般onCreate或onStart中getIntent接收intent，做数据处理。其他地方可set Result来返回结果给调用该Activity的Activity。一般要指定result Code，若是没处理setResult，比如按了back则会有默认的ResultCancel返回。</p>\n</li>\n<li><p>setResult也不一定非得是返回码标志，若是请求结果就要int数值，则可以直接返回一个&gt;0的int数值回去。本Activity不必在意是被start Activity还是forResult，系统会判断。</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; setResult(RESULT_COLOR_RED);</div><div class=\"line\">&gt; finish();</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n"},{"title":"Android多媒体","date":"2017-03-27T08:57:00.000Z","author":"冰路梦","_content":"## 第三章、Android多媒体\n\n### 1. 管理音频播放\n\n- #### 控制音量与音频播放\n\n  应用若使用音频功能，应保证App获取音频焦点，不造成多个应用声音混杂，且可响应音频按钮事件。\n\n  > - Android有播放音乐、闹铃、通知、来电等等不同的音频流，需要独立鉴别。\n  >\n  >   音量按钮会调节当前音频流，若无，则调节响铃。Android 中`setVolumeControlStream()`方法控制音频流。一般在Activity或Fragment的`onCreate()`中调用它。如：\n  >\n  > ```java\n  > setVolumeControlStream(AudioManager.STREAM_MUSIC);\n  > ```\n  >\n  > - **响应按键事件**，硬件的音控按钮会激活系统广播`ACTION_MEDIA_BUTTON`的Intent，App需要有receiver在manifest中：\n  >\n  > ```xml\n  > <receiver android:name=\".RemoteControlReceiver\">\n  > \t<intent-filter>\n  >   \t\t<action android:name=\"android.intent.action.MEDIA_BUTTON\"/>\n  >   \t</intent-filter>\n  > </receiver>\n  > ```\n  >\n  > - *Receiver接收广播，过滤Action，可以通过`EXTRA_KEY_EVENT`区分按钮*，如：\n  >\n  > ```java\n  > public class RemoteControlReceiver extends BroadcastReceiver{\n  >   @override\n  >   public void onReceive(Context context,Intent intent){\n  >     KeyEvent event = (KeyEvent)intent.getParcelableExtra(Intent,EXTRA_KEY_EVENT);\n  >     if(KeyEvent.KEYCODE_MEDIA_PLAY==event.getKeyCode()){\n  >       //处理按钮Play的点击事件\n  >       ...\n  >     }\n  >   }\n  > }\n  > ```\n  >\n  > `注意，可能有多个程序监听按钮`，可以通过AudioManager管理App注册监听与取消。\n  >\n  > ```java\n  > AudioManager am = mContext.getSystemService(Context.AUDIO_SERVICE);\n  > ...\n  >   //开启监听\n  > am.registerMediaButtonEventReceiver(RemoteControlReceiver);\n  > ...\n  >   //取消监听\n  > am.unregisterMediaButtonEventReceiver(RemoteControlReceiver);\n  > ```\n  >\n  > **音频的控制，并不一定是Activity可见不可见来决定**，正确的方法是判断App获取/失去音频流焦点的状态。\n\n- #####  管理音频焦点\n\n  Android中只有获取音频流焦点的App方能控制音频。\n\n  - 注意点：1、请求焦点；2、获取焦点；3、监控焦点状态，并作相应处理。\n\n  > ```java\n  > requestAudioFocus();//请求焦点，成功则返回AUDIOFOCUS_REQUEST_GRANTED\n  > //需要制定当前音频流，并明确焦点获取是临时`Transient`，还是永久`Permanent`。\n  > AudioManager am = mContext.getSystemService(Context.AUDIO_SERVICE);\n  > ...\n  > // 请求音频焦点，指定当前音频流为music，传入请求参数。\n  > int result = am.requestAudioFocus(afChangeListener,AudioManager.STREAM_MUSIC,AudioManager.AUDIOFOCUS_GAIN);\n  > if (result == AudioManager.AUDIOFOCUS_REQUEST_GRANTED) {  am.registerMediaButtonEventReceiver(RemoteControlReceiver);\n  >     // 开始播放\n  > }\n  > ...\n  > //释放焦点的方法\n  >   am.abandonAudioFocus(afChangeListener);\n  > ```\n  >\n  > 一旦结束播放，确保调用`abandonAudioFocus()`来释放焦点和监听AudioManager.OnAudioFocusChangeListener。\n  >\n  > - **在使用临时焦点时候，可选择设置`Ducking`开启，则其他音频流不会停止，而只是变为背景音**\n  >\n  > ```java\n  > int result = am.requestAudioFocus(afChangeListener,AudioManager.STERAM_MUSIC,AudioManager.AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK);//开启Ducking\n  > if(result == AudioManager.AUDIOFOCUS_REQUEST_GRANTED){\n  >   //paly music And other app maybe playing too。\n  > }//若其他app也是Ducking，则本App可以监听它的焦点状态。\n  > ```\n  >\n  > _音频焦点状态变化的监听_ `onAudioFocusChange()`，三种状态，永久，临时，Ducking式。\n  >\n  > ```java\n  > OnAudioFocusChangeListener afChangeListener = new OnAudioFocusChangeListener(){\n  >   public void onAudioFocusChange(int focusChange){\n  >     if(focusChange == AUDIOFOCUS_LOSS_TRANSIENT){\n  >       //暂停播放\n  >       \n  >     }else if(focusChange == AudioManger.AUDIOFOCUS_GAIN){\n  >       //重新播放\n  >     }else if(focusChange == AudioManager.AUDIOFOCUS_LOSS){\n  >      am.unregisterMediaButtonEventReceiver(RemoteControlReceiver);\n  >       am.abandonAudioFocus(afChangeListener);\n  >       //停止播放\n  >     }\n  >   }\n  > }\n  > ```\n  >\n  > - **Duck！**\n  >\n  > 对音频流使用Ducking状态，会是之变为背景式音频。\n  >\n  > ```java\n  > OnAudioFocusChangeListener afChangeListener = new OnAudioFocusChangeListener() {\n  >     public void onAudioFocusChange(int focusChange) {\n  >         if (focusChange == AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK) {\n  >             //Ducking 状态，降低音量，背景音播放\n  >         } else if (focusChange == AudioManager.AUDIOFOCUS_GAIN) {\n  >             // 恢复正常音量播放\n  >         }\n  >     }\n  > };\n  > ```\n\n- ###### 兼容音频输出设备\n\n  检测正使用的硬件设备:`Audio Manager`\n\n  > ```java\n  > if (isBluetoothA2dpOn()) {\n  >     // Adjust output for Bluetooth.\n  > } else if (isSpeakerphoneOn()) {\n  >     // Adjust output for Speakerphone.\n  > } else if (isWiredHeadsetOn()) {\n  >     // Adjust output for headsets\n  > } else { \n  >     // If audio plays and noone can hear it, is it still playing?\n  > }\n  > ```\n  >\n  > 当音频设备变化时候，要监听改变`ACTION_AUDIO_BECOMING_NOISY`系统广播的intent。App需要有receiver\n  >\n  > ```java\n  > private class NoisyAudioStreamReceiver extends BroadcastReceiver{\n  >   @override\n  >   public void onReceive(Context context,Intent intent){\n  >     if(AudioManager.ACTION_AUDIO_BECOMING_NOISY.equals(intent.getAction())){\n  >      //接收到音频输出设备变化，暂停播放 \n  >     }\n  >   }\n  > }\n  > private IntentFilter intentFilter = new IntentFilter(AudioManager.ACITON_AUDIO_BECOMING_NOISY);\n  > private void startPlayback() {\n  >     registerReceiver(myNoisyAudioStreamReceiver(), intentFilter);\n  > }\n  >\n  > private void stopPlayback() {\n  >     unregisterReceiver(myNoisyAudioStreamReceiver);\n  > }\n  > ```\n\n### 2.拍照\n\n- #### 简单的拍照\n\n  >1、请求相机权限\n  >\n  >```xml\n  ><manifest ...>\n  >  <!-- 在清单文件中加入该属性，向用户声明本App需要相机权限。 -->\n  >\t<uses-feature android:name=\"android.hardware.camera\"\n  >                  android:required=\"true\"/>\n  >  <!-- 自动聚焦 -->\n  >   <uses-feature android:name=\"android.hardware.camera.autofocus\" />\n  >  <!-- 调用相机需要的权限 -->\n  >  \n  >  <uses-permission android:name=\"android.permission.CAMERA\" />\n  ></manifest>\n  >```\n  >\n  >本App若非必须有相机，`required`可以设置false。代码中可以用`hasSystemFeature(PackageManager.FEATURE_CAMERA)`来检查是否有camera硬件。\n  >\n  >2、调用系统相机拍照。\n  >\n  >```java\n  >static final int REQUEST_IMAGE_CAPTURE=1;//请求码\n  >private void dispatchTakePictureIntent(){\n  >  //调用相机的intent\n  >  Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\n  >  //检查有没有能处理该intent的Activity，以免下面startActivity会空指针，而崩溃\n  >  if(takePictureIntent.resolveActivity(getPackageManager()) !=null){\n  >    startActivityForResult(takePictureIntent,REQUEST_IMAGE_CAPTURE);\n  >  }\n  >}\n  >```\n  >\n  >3、获取缩略图\n  >\n  >Android相机将拍摄好的照片缩小为Bitmap，返回给调用的activity，`key-value`键值对形式将数据绑定到intent返回。`data` key值\n  >\n  >```java\n  >@Override\n  >protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n  >    if (requestCode == REQUEST_IMAGE_CAPTURE && resultCode == RESULT_OK) {\n  >        Bundle extras = data.getExtras();//获取bundle对象\n  >        Bitmap imageBitmap = (Bitmap) extras.get(\"data\");//key值，获取缩略图\n  >        mImageView.setImageBitmap(imageBitmap);\n  >    }\n  >}\n  >```\n  >\n  >4、获取全尺寸照片\n  >\n  >Android一般会保存原始照片数据到指定文件夹下。通常为`DIRECTORY_PICTURES`对应的文件目录，需要读写SD卡的权限。\n  >\n  >```xml\n  ><manifest ...>\n  >\t<uses_permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"/>\n  >  \t<!-- 一般有写入权限，就默认会有读取权限了 -->\n  ></manifest>\n  >```\n  >\n  >`getExternalFilesDir()`私有目录，`getExternalStoragePublicDirectory()`共有目录，接收参数`DIRECTORY_PICTURES`标明是图片文件夹。\n  >\n  >**注意文件的保存，需要防止命名冲突，一般会加入时间戳来避免该问题。**\n  >\n  >```java\n  >String mCurrentPhotoPath;\n  >\n  >private File createImageFile() throws IOException {\n  >    // 创建图片文件\n  >    String timeStamp = new SimpleDateFormat(\"yyyyMMdd_HHmmss\").format(new Date());\n  >    String imageFileName = \"JPEG_\" + timeStamp + \"_\";\n  >    File storageDir = Environment.getExternalStoragePublicDirectory(\n  >            Environment.DIRECTORY_PICTURES);\n  >    File image = File.createTempFile(\n  >        imageFileName,  /* prefix */\n  >        \".jpg\",         /* suffix */\n  >        storageDir      /* directory */\n  >    );\n  >\n  >    // Save a file: path for use with ACTION_VIEW intents\n  >    mCurrentPhotoPath = \"file:\" + image.getAbsolutePath();\n  >    return image;\n  >}\n  >```\n  >\n  >使用如上方法，来创建新的照片文件：\n  >\n  >```java\n  >static final int REQUEST_TAKE_PHOTO = 1;\n  >\n  >private void dispatchTakePictureIntent() {\n  >    Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\n  >    // 判断是否有可以处理拍照的Activity\n  >    if (takePictureIntent.resolveActivity(getPackageManager()) != null) {\n  >        // 创建照片文件\n  >        File photoFile = null;\n  >        try {\n  >            photoFile = createImageFile();\n  >        } catch (IOException ex) {\n  >            // 创建文件异常\n  >            ...\n  >        }\n  >        // 照片创建成功的话，完成照片存储。\n  >        if (photoFile != null) {\n  >            takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT,\n  >                    Uri.fromFile(photoFile));\n  >            startActivityForResult(takePictureIntent, REQUEST_TAKE_PHOTO);\n  >        }\n  >    }\n  >}\n  >```\n  >\n  >5、如果照片目录不是私有，那么需要通知系统，将照片显示到公开目录中,让mediaScanner可以扫描到。\n  >\n  >```java\n  >private void galleryAddPic() {\n  >  //intent\n  >    Intent mediaScanIntent = new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE);\n  >    File f = new File(mCurrentPhotoPath);\n  >    Uri contentUri = Uri.fromFile(f);\n  >  //发送广播，\n  >    mediaScanIntent.setData(contentUri);\n  >    this.sendBroadcast(mediaScanIntent);\n  >}\n  >```\n  >\n  >6、图片缩放\n  >\n  >多数情况下不需要全尺寸的清晰图片显示，也为了避免内存消耗，使用图片缩放：\n  >\n  >```java\n  >private void setPic() {\n  >    // 1、获取需要显示图片的view控件的大小。\n  >    int targetW = mImageView.getWidth();\n  >    int targetH = mImageView.getHeight();\n  >\n  >    // 2、获取需要显示的图片的尺寸\n  >    BitmapFactory.Options bmOptions = new BitmapFactory.Options();\n  >    bmOptions.inJustDecodeBounds = true;\n  >    BitmapFactory.decodeFile(mCurrentPhotoPath, bmOptions);\n  >    int photoW = bmOptions.outWidth;\n  >    int photoH = bmOptions.outHeight;\n  >\n  >    // 3、计算缩放比，根据宽高\n  >    int scaleFactor = Math.min(photoW/targetW, photoH/targetH);\n  >\n  >    // 4、缩放图片\n  >    bmOptions.inJustDecodeBounds = false;//\n  >    bmOptions.inSampleSize = scaleFactor;//缩放比\n  >    bmOptions.inPurgeable = true;//\n  >\t//完成图片缩放\n  >    Bitmap bitmap = BitmapFactory.decodeFile(mCurrentPhotoPath, bmOptions);\n  >    mImageView.setImageBitmap(bitmap);\n  >}\n  >```\n\n- #### 简单的录像\n\n  > 1、请求相机权限\n  >\n  > ```xml\n  > <manifest ... >\n  >     <uses-feature android:name=\"android.hardware.camera\"\n  >                   android:required=\"true\" />\n  >    <uses-feature android:name=\"android.hardware.camera.autofocus\" />\n  >     ...\n  > </manifest>\n  > ```\n  >\n  > 2、通过Intent来录制视频,Action是`MediaStore.ACTION_VIDEO_CAPTURE`\n  >\n  > ```java\n  > static final int REQUEST_VIDEO_CAPTURE = 1;\n  >\n  > private void dispatchTakeVideoIntent() {\n  >     Intent takeVideoIntent = new Intent(MediaStore.ACTION_VIDEO_CAPTURE);\n  >   //判断是否有可用录像程序\n  >     if (takeVideoIntent.resolveActivity(getPackageManager()) != null) {\n  >         startActivityForResult(takeVideoIntent, REQUEST_VIDEO_CAPTURE);\n  >     }\n  > }\n  > ```\n  >\n  > 3、接收返回的视频数据\n  >\n  > ```java\n  > @Override\n  > protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n  >     if (requestCode == REQUEST_VIDEO_CAPTURE && resultCode == RESULT_OK) {\n  >       //获取视频文件保存的uri\n  >         Uri videoUri = intent.getData();\n  >         mVideoView.setVideoURI(videoUri);\n  >     }\n  > }\n  > ```\n\n- #### 控制相机硬件\n\n  > 1、此处提供给有特殊需要的app来调用Camera硬件，实现自定义的拍照与录像功能。\n  >\n  > - `onCreate()`中开启线程打开相机。\n  >\n  > - 或者在`onResume()`中开启相机\n  >\n  > - 要检测Camera是否可用，被占用\n  >\n  >   ```java\n  >   private boolean safeCameraOpen(int id) {\n  >       boolean qOpened = false;\n  >       try {\n  >         //先释放，再打开，在此捕获异常\n  >           releaseCameraAndPreview();\n  >           mCamera = Camera.open(id);//相机id，默认后置摄像头。\n  >           qOpened = (mCamera != null);\n  >       } catch (Exception e) {\n  >           Log.e(getString(R.string.app_name), \"failed to open Camera\");\n  >           e.printStackTrace();\n  >       }\n  >\n  >       return qOpened;    \n  >   }\n  >   //释放相机资源\n  >   private void releaseCameraAndPreview() {\n  >       mPreview.setCamera(null);\n  >       if (mCamera != null) {\n  >           mCamera.release();\n  >           mCamera = null;\n  >       }\n  >   }\n  >   ```\n  >\n  > 2、创建相机预览界面，使用`SurfaceView`实现\n  >\n  > ```java\n  > class Preview extends ViewGroup implements SurfaceHolder.Callback {\n  >\n  >     SurfaceView mSurfaceView;//surface view\n  >     SurfaceHolder mHolder;// surface holder\n  > \t//构造函数，初始化数据\n  >     Preview(Context context) {\n  >         super(context);\n  >\n  >         mSurfaceView = new SurfaceView(context);\n  >         addView(mSurfaceView);\n  >\n  >         // 注册surfaceholder的callback，监控surfaceView的创建与销毁。\n  >         mHolder = mSurfaceView.getHolder();\n  >         mHolder.addCallback(this);\n  >         mHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);\n  >     }\n  > ...\n  > }\n  > ```\n  >\n  > ==Preview类的对象，必须在开始预览之前就传递给Camera对象。==\n  >\n  > $Camera 和Preview必须依照特定顺序来创建$。首先创建Camera对象，示例：\n  >\n  > ```java\n  > public void setCamera(Camera camera) {\n  >     if (mCamera == camera) { return; }\n  > \t//停止预览，释放camera对象\n  >     stopPreviewAndFreeCamera();\n  > \t//重新引用camera\n  >     mCamera = camera;\n  > \t//对象非空时候，开启预览\n  >     if (mCamera != null) {\n  >         List<Size> localSizes = mCamera.getParameters().getSupportedPreviewSizes();\n  >         mSupportedPreviewSizes = localSizes;\n  >         requestLayout();\n  >         try {\n  >             mCamera.setPreviewDisplay(mHolder);\n  >         } catch (IOException e) {\n  >             e.printStackTrace();\n  >         }\n  >         // 重要：开启预览，才能拍照。\n  >         mCamera.startPreview();\n  >     }\n  > }\n  > ```\n  >\n  > 3、修改相机设置\n  >\n  > 由于是控制camera硬件，可以设置拍照方式、曝光补偿等。\n  >\n  > ```java\n  > public void surfaceChanged(SurfaceHolder holder, int format, int w, int h) {\n  >     // 设置预览大小\n  >     Camera.Parameters parameters = mCamera.getParameters();\n  >     parameters.setPreviewSize(mPreviewSize.width, mPreviewSize.height);\n  >     requestLayout();\n  >     mCamera.setParameters(parameters);\n  > \t\n  >     //先开启预览，才能调用拍照。\n  >     mCamera.startPreview();\n  > }\n  > //set CameraDisplayOrientation()设置预览方向，横竖屏。\n  > ```\n  >\n  > 4、拍照\n  >\n  > 预览后，才能调用拍照。`Camera.takePicture()`方法。创建`Camera.PictureCallback`和`Camera.ShutterCallback`对象，传递给`Camera.takePicture()`。\n  >\n  > 若要连续拍摄，创建`Camera.PreviewCallback`实现`onPreviewFrame()`方法。如此可以拍摄选定的预览帧，或调用`takePicture()`建立延迟。\n  >\n  > 5、重启Preview\n  >\n  > ==拍照后，需要重启预览==\n  >\n  > ```java\n  > @Override\n  > public void onClick(View v) {\n  >     switch(mPreviewState) {\n  >     case K_STATE_FROZEN://预览\n  >         mCamera.startPreview();\n  >         mPreviewState = K_STATE_PREVIEW;\n  >         break;\n  >     default://拍照\n  >         mCamera.takePicture( null, rawCallback, null);\n  >         mPreviewState = K_STATE_BUSY;\n  >     } // switch\n  >     shutterBtnConfig();\n  > }\n  > ```\n  >\n  > 6、停止预览并释放相机\n  >\n  > 使用Camera后，必须释放资源，以备下次调用或者其他应用使用。一般在Surface被毁后，释放预览和相机。\n  >\n  > ```java\n  > public void surfaceDestroyed(SurfaceHolder holder) {\n  >     // Surface将会销毁，需在此停止预览\n  >     if (mCamera != null) {\n  >         // 停止预览\n  >         mCamera.stopPreview();\n  >     }\n  > }\n  > /**\n  >  * 释放Camera资源\n  >  */\n  > private void stopPreviewAndFreeCamera() {\n  >     if (mCamera != null) {\n  >         //停止预览\n  >         mCamera.stopPreview();\n  >         //重要，停止使用Camera后，必须释放对象资源，在onPause()释放，onResume()重启。\n  >         mCamera.release();\n  >         mCamera = null;\n  >     }\n  > }\n  > ```\n\n### 3、打印\n\nAndroid支持创建pdf文件，打印图片，html和文字。\n\n- #### 打印照片\n\n  > *PrintHelper*类打印图片，AndroidSupportLibrary提供的类库。\n  >\n  > 1、打印一幅图片\n  >\n  > `setScaleMode()`方法，接收两个选项之一：\n  >\n  > - SCALE_MODE_FIT,图片适应打印纸\n  > - SCALE_MODE_FILL,充满整个纸张，可能会与部分图片无法显示出来。\n  >\n  > ```java\n  > private void doPhotoPrint(){\n  >   PrintHelper photoPrinter = new PrintHelper(getActivity());\n  >   photoPrinter.setScaleMode(PrintHelper.SCALE_MODE_FIT);\n  >   Bitmap bitmap = BitmapFactory.decodeResource(getResource(),R.drawable.iclauncher);\n  >   photoPrinter.printBitmap(\"icLaunchetr.jpg 测试打印\",bitmap);\n  > }\n  > ```\n\n- #### 打印html文档\n\n  > android提供了html文档方式，来实现更为丰富的文本打印输出。\n  >\n  > 1、加载Html文档\n  >\n  > 使用`webView`加载html资源，`webview`被作为activity布局的一部分，若是app没有用到该view，则需要创建该对象，来实现html文档：\n  >\n  > - 加载html文档后，创建一个`WebViewClient`对象，来启动打印任务。\n  > - 加载html到`WebView`对象中。\n  >\n  > ```java\n  > private WebView mWebView;\n  > private void doWebViewPrint(){\n  >   //创建webview对象，用于打印\n  >   WebView webView = new WebView(getActivity());\n  >   webView.setWebViewClient(new WebViewClient(){\n  >     public boolean shouldOverrideUrlLoading(WebView view,String url){\n  >       return false;\n  >     }\n  >     @override\n  >     public void onPageFinished(WebView view ,String url){\n  >       Log.i(TAG,\"html页面加载完毕\"+url);\n  >       //调用打印，加载完毕后才调用，否则会不完整，或者失败。\n  >       createWebPrintJob(view);\n  >       mWebView = null;\n  >     }\n  >   });\n  >   //创建一个html文档\n  >     String htmlDocument = \"<html><body><h1>Test Content</h1><p>Testing, \" +\n  >             \"testing, testing...</p></body></html>\";\n  >     webView.loadDataWithBaseURL(null, htmlDocument, \"text/HTML\", \"UTF-8\", null);\n  >\n  >     // 保持web View的对象引用，知道适配器打印完毕。\n  >     mWebView = webView;\n  > }\n  > //要是html需要包含图像，放在“assets/”目录下,指定URL，\n  > webView.loadDataWithBaseURL(\"file:///android_asset/images/\",htmlBody,\"text/HTML\",\"utf-8\",null);\n  > //或者加载一个网页，需要网络权限。\n  > webView.loadUrl(\"http://developer.android.com/about/index.html\");\n  > ```\n  >\n  > ==Web View打印文档会有限制：==\n  >\n  > - 不能添加页眉、页脚、页码\n  > - 不能指定打印页码范围\n  > - 一个Web View对象，只能同时处理一个任务。\n  > - 不支持html的css属性。\n  > - html的javaScript无法调用打印。\n  >\n  > 2、创建打印任务\n  >\n  > ```java\n  > private void createWebPrintJob(WebView webView) {\n  >     // 获取Print Manager实例\n  >     PrintManager printManager = (PrintManager) getActivity()\n  >             .getSystemService(Context.PRINT_SERVICE);\n  >     // 获取PrintAdapter实例\n  >     PrintDocumentAdapter printAdapter = webView.createPrintDocumentAdapter();\n  >     // 创建打印任务，传递给Printadapter，\n  >     String jobName = getString(R.string.app_name) + \" Document\";\n  >     PrintJob printJob = printManager.print(jobName, printAdapter,\n  >             new PrintAttributes.Builder().build());\n  >     // 完成任务配置，加入打印列表。\n  >     mPrintJobs.add(printJob);\n  > }\n  > ```\n\n- #### 打印自定义文档\n\n  > 1、连接打印管理器，来创建打印任务\n  >\n  > ```java\n  > private void doPrint() {\n  >     // Get a PrintManager instance\n  >     PrintManager printManager = (PrintManager) getActivity()\n  >             .getSystemService(Context.PRINT_SERVICE);\n  >     // Set job name, which will be displayed in the print queue\n  >     String jobName = getActivity().getString(R.string.app_name) + \" Document\";\n  >     // Start a print job, passing in a PrintDocumentAdapter implementation\n  >     // to handle the generation of a print document\n  >     printManager.print(jobName, new MyPrintDocumentAdapter(getActivity()),\n  >             null); //最后的参数是PrintAttributes，打印机属性设置。\n  > }\n  > ```\n  >\n  > 2、创建打印机适配器\n  >\n  > `PrintDocumentAdapter`负责打印生命周期，\n  >\n  > - onStart():开始打印，非必需实现的方法，因为总会被调用。\n  > - onLayout(): 用户设置页面布局，尺寸之类的，会调用该函数。\n  > - onWrite(): 将打印文件渲染成待打印状态，可以在onLayout()中多次调用该方法。\n  > - onFinish(): 完成打印，非必需实现。\n  >\n  > 调用onLayout()和onWrite()，尽量写入一个异步进程中，因为可能耗时。\n  >\n  > 3、计算打印文档信息\n  >\n  > 在Print Document Adapter的实现时，需要指定文档类型，计算页数，尺寸之类的信息。\n  >\n  > 在onLayout()中计算这些数据，可从PrintDocumentInfo中获取。\n  >\n  > ```java\n  > @Override\n  > public void onLayout(PrintAttributes oldAttributes,\n  >                      PrintAttributes newAttributes,\n  >                      CancellationSignal cancellationSignal,\n  >                      LayoutResultCallback callback,\n  >                      Bundle metadata) {\n  >     // Create a new PdfDocument with the requested page attributes\n  >     mPdfDocument = new PrintedPdfDocument(getActivity(), newAttributes);\n  >\n  >     // Respond to cancellation request\n  >     if (cancellationSignal.isCancelled() ) {\n  >         callback.onLayoutCancelled();\n  >         return;\n  >     }\n  >\n  >     // Compute the expected number of printed pages\n  >     int pages = computePageCount(newAttributes);\n  >\n  >     if (pages > 0) {\n  >         // Return print information to print framework\n  >         PrintDocumentInfo info = new PrintDocumentInfo\n  >                 .Builder(\"print_output.pdf\")\n  >                 .setContentType(PrintDocumentInfo.CONTENT_TYPE_DOCUMENT)\n  >                 .setPageCount(pages);\n  >                 .build();\n  >         // Content layout reflow is complete\n  >         callback.onLayoutFinished(info, true);\n  >     } else {\n  >         // Otherwise report an error to the print framework\n  >         callback.onLayoutFailed(\"Page count calculation failed.\");\n  >     }\n  > }\n  > ```\n  >\n  > `onLayout()`方法返回结果：完成、取消、失败。必须通过调用PrintDocumentAdapter.LayoutResultCallback对象中的方法指定结果。在`onLayoutFinished()`方法中==boolean的参数==，指明是否与上次布局不同，来决定时候再次调用`onWrite()`方法。\n  >\n  > `onLayout()`计算文档相关数据\n  >\n  > ```java\n  > private int computePageCount(PrintAttributes printAttributes) {\n  >     int itemsPerPage = 4; // default item count for portrait mode\n  >\n  >     MediaSize pageSize = printAttributes.getMediaSize();\n  >     if (!pageSize.isPortrait()) {\n  >         // Six items per page in landscape orientation\n  >         itemsPerPage = 6;\n  >     }\n  >\n  >     // Determine number of print items\n  >     int printItemCount = getPrintItemCount();\n  >\n  >     return (int) Math.ceil(printItemCount / itemsPerPage);\n  > }\n  > ```\n  >\n  > 4、将打印文档写入文件\n  >\n  > 如下代码展示使用`PrintedPdfDocument`类创建pdf文档的基本原理\n  >\n  > ```java\n  > @Override\n  > public void onWrite(final PageRange[] pageRanges,\n  >                     final ParcelFileDescriptor destination,\n  >                     final CancellationSignal cancellationSignal,\n  >                     final WriteResultCallback callback) {\n  >     // Iterate over each page of the document,\n  >     // check if it's in the output range.\n  >     for (int i = 0; i < totalPages; i++) {\n  >         // Check to see if this page is in the output range.\n  >         if (containsPage(pageRanges, i)) {\n  >             // If so, add it to writtenPagesArray. writtenPagesArray.size()\n  >             // is used to compute the next output page index.\n  >             writtenPagesArray.append(writtenPagesArray.size(), i);\n  >             PdfDocument.Page page = mPdfDocument.startPage(i);\n  >\n  >             // check for cancellation\n  >             if (cancellationSignal.isCancelled()) {\n  >                 callback.onWriteCancelled();\n  >                 mPdfDocument.close();\n  >                 mPdfDocument = null;\n  >                 return;\n  >             }\n  >\n  >             // Draw page content for printing\n  >             drawPage(page);\n  >\n  >             // Rendering is complete, so page can be finalized.\n  >             mPdfDocument.finishPage(page);\n  >         }\n  >     }\n  >\n  >     // Write PDF document to file\n  >     try {\n  >         mPdfDocument.writeTo(new FileOutputStream(\n  >                 destination.getFileDescriptor()));\n  >     } catch (IOException e) {\n  >         callback.onWriteFailed(e.toString());\n  >         return;\n  >     } finally {\n  >         mPdfDocument.close();\n  >         mPdfDocument = null;\n  >     }\n  >     PageRange[] writtenPages = computeWrittenPages();\n  >     // Signal the print framework the document is complete\n  >     callback.onWriteFinished(writtenPages);\n  >\n  >     ...\n  > }\n  > ```\n  >\n  > Pdf文档生成\n  >\n  > ```java\n  > private void drawPage(PdfDocument.Page page) {\n  >     Canvas canvas = page.getCanvas();\n  >\n  >     // units are in points (1/72 of an inch)\n  >     int titleBaseLine = 72;\n  >     int leftMargin = 54;\n  >\n  >     Paint paint = new Paint();\n  >     paint.setColor(Color.BLACK);\n  >     paint.setTextSize(36);\n  >     canvas.drawText(\"Test Title\", leftMargin, titleBaseLine, paint);\n  >\n  >     paint.setTextSize(11);\n  >     canvas.drawText(\"Test paragraph\", leftMargin, titleBaseLine + 25, paint);\n  >\n  >     paint.setColor(Color.BLUE);\n  >     canvas.drawRect(100, 100, 172, 172, paint);\n  > }\n  > ```\n  >\n  > **注意，canvas绘图使用point为单位**\n\n","source":"_posts/第三篇、Android多媒体.md","raw":"---\ntitle: \"Android多媒体\"\ndate: 2017-03-27 16:57\nauthor: 冰路梦\ntag:\n    - Android\ncategories:\n    - Android\n---\n## 第三章、Android多媒体\n\n### 1. 管理音频播放\n\n- #### 控制音量与音频播放\n\n  应用若使用音频功能，应保证App获取音频焦点，不造成多个应用声音混杂，且可响应音频按钮事件。\n\n  > - Android有播放音乐、闹铃、通知、来电等等不同的音频流，需要独立鉴别。\n  >\n  >   音量按钮会调节当前音频流，若无，则调节响铃。Android 中`setVolumeControlStream()`方法控制音频流。一般在Activity或Fragment的`onCreate()`中调用它。如：\n  >\n  > ```java\n  > setVolumeControlStream(AudioManager.STREAM_MUSIC);\n  > ```\n  >\n  > - **响应按键事件**，硬件的音控按钮会激活系统广播`ACTION_MEDIA_BUTTON`的Intent，App需要有receiver在manifest中：\n  >\n  > ```xml\n  > <receiver android:name=\".RemoteControlReceiver\">\n  > \t<intent-filter>\n  >   \t\t<action android:name=\"android.intent.action.MEDIA_BUTTON\"/>\n  >   \t</intent-filter>\n  > </receiver>\n  > ```\n  >\n  > - *Receiver接收广播，过滤Action，可以通过`EXTRA_KEY_EVENT`区分按钮*，如：\n  >\n  > ```java\n  > public class RemoteControlReceiver extends BroadcastReceiver{\n  >   @override\n  >   public void onReceive(Context context,Intent intent){\n  >     KeyEvent event = (KeyEvent)intent.getParcelableExtra(Intent,EXTRA_KEY_EVENT);\n  >     if(KeyEvent.KEYCODE_MEDIA_PLAY==event.getKeyCode()){\n  >       //处理按钮Play的点击事件\n  >       ...\n  >     }\n  >   }\n  > }\n  > ```\n  >\n  > `注意，可能有多个程序监听按钮`，可以通过AudioManager管理App注册监听与取消。\n  >\n  > ```java\n  > AudioManager am = mContext.getSystemService(Context.AUDIO_SERVICE);\n  > ...\n  >   //开启监听\n  > am.registerMediaButtonEventReceiver(RemoteControlReceiver);\n  > ...\n  >   //取消监听\n  > am.unregisterMediaButtonEventReceiver(RemoteControlReceiver);\n  > ```\n  >\n  > **音频的控制，并不一定是Activity可见不可见来决定**，正确的方法是判断App获取/失去音频流焦点的状态。\n\n- #####  管理音频焦点\n\n  Android中只有获取音频流焦点的App方能控制音频。\n\n  - 注意点：1、请求焦点；2、获取焦点；3、监控焦点状态，并作相应处理。\n\n  > ```java\n  > requestAudioFocus();//请求焦点，成功则返回AUDIOFOCUS_REQUEST_GRANTED\n  > //需要制定当前音频流，并明确焦点获取是临时`Transient`，还是永久`Permanent`。\n  > AudioManager am = mContext.getSystemService(Context.AUDIO_SERVICE);\n  > ...\n  > // 请求音频焦点，指定当前音频流为music，传入请求参数。\n  > int result = am.requestAudioFocus(afChangeListener,AudioManager.STREAM_MUSIC,AudioManager.AUDIOFOCUS_GAIN);\n  > if (result == AudioManager.AUDIOFOCUS_REQUEST_GRANTED) {  am.registerMediaButtonEventReceiver(RemoteControlReceiver);\n  >     // 开始播放\n  > }\n  > ...\n  > //释放焦点的方法\n  >   am.abandonAudioFocus(afChangeListener);\n  > ```\n  >\n  > 一旦结束播放，确保调用`abandonAudioFocus()`来释放焦点和监听AudioManager.OnAudioFocusChangeListener。\n  >\n  > - **在使用临时焦点时候，可选择设置`Ducking`开启，则其他音频流不会停止，而只是变为背景音**\n  >\n  > ```java\n  > int result = am.requestAudioFocus(afChangeListener,AudioManager.STERAM_MUSIC,AudioManager.AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK);//开启Ducking\n  > if(result == AudioManager.AUDIOFOCUS_REQUEST_GRANTED){\n  >   //paly music And other app maybe playing too。\n  > }//若其他app也是Ducking，则本App可以监听它的焦点状态。\n  > ```\n  >\n  > _音频焦点状态变化的监听_ `onAudioFocusChange()`，三种状态，永久，临时，Ducking式。\n  >\n  > ```java\n  > OnAudioFocusChangeListener afChangeListener = new OnAudioFocusChangeListener(){\n  >   public void onAudioFocusChange(int focusChange){\n  >     if(focusChange == AUDIOFOCUS_LOSS_TRANSIENT){\n  >       //暂停播放\n  >       \n  >     }else if(focusChange == AudioManger.AUDIOFOCUS_GAIN){\n  >       //重新播放\n  >     }else if(focusChange == AudioManager.AUDIOFOCUS_LOSS){\n  >      am.unregisterMediaButtonEventReceiver(RemoteControlReceiver);\n  >       am.abandonAudioFocus(afChangeListener);\n  >       //停止播放\n  >     }\n  >   }\n  > }\n  > ```\n  >\n  > - **Duck！**\n  >\n  > 对音频流使用Ducking状态，会是之变为背景式音频。\n  >\n  > ```java\n  > OnAudioFocusChangeListener afChangeListener = new OnAudioFocusChangeListener() {\n  >     public void onAudioFocusChange(int focusChange) {\n  >         if (focusChange == AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK) {\n  >             //Ducking 状态，降低音量，背景音播放\n  >         } else if (focusChange == AudioManager.AUDIOFOCUS_GAIN) {\n  >             // 恢复正常音量播放\n  >         }\n  >     }\n  > };\n  > ```\n\n- ###### 兼容音频输出设备\n\n  检测正使用的硬件设备:`Audio Manager`\n\n  > ```java\n  > if (isBluetoothA2dpOn()) {\n  >     // Adjust output for Bluetooth.\n  > } else if (isSpeakerphoneOn()) {\n  >     // Adjust output for Speakerphone.\n  > } else if (isWiredHeadsetOn()) {\n  >     // Adjust output for headsets\n  > } else { \n  >     // If audio plays and noone can hear it, is it still playing?\n  > }\n  > ```\n  >\n  > 当音频设备变化时候，要监听改变`ACTION_AUDIO_BECOMING_NOISY`系统广播的intent。App需要有receiver\n  >\n  > ```java\n  > private class NoisyAudioStreamReceiver extends BroadcastReceiver{\n  >   @override\n  >   public void onReceive(Context context,Intent intent){\n  >     if(AudioManager.ACTION_AUDIO_BECOMING_NOISY.equals(intent.getAction())){\n  >      //接收到音频输出设备变化，暂停播放 \n  >     }\n  >   }\n  > }\n  > private IntentFilter intentFilter = new IntentFilter(AudioManager.ACITON_AUDIO_BECOMING_NOISY);\n  > private void startPlayback() {\n  >     registerReceiver(myNoisyAudioStreamReceiver(), intentFilter);\n  > }\n  >\n  > private void stopPlayback() {\n  >     unregisterReceiver(myNoisyAudioStreamReceiver);\n  > }\n  > ```\n\n### 2.拍照\n\n- #### 简单的拍照\n\n  >1、请求相机权限\n  >\n  >```xml\n  ><manifest ...>\n  >  <!-- 在清单文件中加入该属性，向用户声明本App需要相机权限。 -->\n  >\t<uses-feature android:name=\"android.hardware.camera\"\n  >                  android:required=\"true\"/>\n  >  <!-- 自动聚焦 -->\n  >   <uses-feature android:name=\"android.hardware.camera.autofocus\" />\n  >  <!-- 调用相机需要的权限 -->\n  >  \n  >  <uses-permission android:name=\"android.permission.CAMERA\" />\n  ></manifest>\n  >```\n  >\n  >本App若非必须有相机，`required`可以设置false。代码中可以用`hasSystemFeature(PackageManager.FEATURE_CAMERA)`来检查是否有camera硬件。\n  >\n  >2、调用系统相机拍照。\n  >\n  >```java\n  >static final int REQUEST_IMAGE_CAPTURE=1;//请求码\n  >private void dispatchTakePictureIntent(){\n  >  //调用相机的intent\n  >  Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\n  >  //检查有没有能处理该intent的Activity，以免下面startActivity会空指针，而崩溃\n  >  if(takePictureIntent.resolveActivity(getPackageManager()) !=null){\n  >    startActivityForResult(takePictureIntent,REQUEST_IMAGE_CAPTURE);\n  >  }\n  >}\n  >```\n  >\n  >3、获取缩略图\n  >\n  >Android相机将拍摄好的照片缩小为Bitmap，返回给调用的activity，`key-value`键值对形式将数据绑定到intent返回。`data` key值\n  >\n  >```java\n  >@Override\n  >protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n  >    if (requestCode == REQUEST_IMAGE_CAPTURE && resultCode == RESULT_OK) {\n  >        Bundle extras = data.getExtras();//获取bundle对象\n  >        Bitmap imageBitmap = (Bitmap) extras.get(\"data\");//key值，获取缩略图\n  >        mImageView.setImageBitmap(imageBitmap);\n  >    }\n  >}\n  >```\n  >\n  >4、获取全尺寸照片\n  >\n  >Android一般会保存原始照片数据到指定文件夹下。通常为`DIRECTORY_PICTURES`对应的文件目录，需要读写SD卡的权限。\n  >\n  >```xml\n  ><manifest ...>\n  >\t<uses_permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"/>\n  >  \t<!-- 一般有写入权限，就默认会有读取权限了 -->\n  ></manifest>\n  >```\n  >\n  >`getExternalFilesDir()`私有目录，`getExternalStoragePublicDirectory()`共有目录，接收参数`DIRECTORY_PICTURES`标明是图片文件夹。\n  >\n  >**注意文件的保存，需要防止命名冲突，一般会加入时间戳来避免该问题。**\n  >\n  >```java\n  >String mCurrentPhotoPath;\n  >\n  >private File createImageFile() throws IOException {\n  >    // 创建图片文件\n  >    String timeStamp = new SimpleDateFormat(\"yyyyMMdd_HHmmss\").format(new Date());\n  >    String imageFileName = \"JPEG_\" + timeStamp + \"_\";\n  >    File storageDir = Environment.getExternalStoragePublicDirectory(\n  >            Environment.DIRECTORY_PICTURES);\n  >    File image = File.createTempFile(\n  >        imageFileName,  /* prefix */\n  >        \".jpg\",         /* suffix */\n  >        storageDir      /* directory */\n  >    );\n  >\n  >    // Save a file: path for use with ACTION_VIEW intents\n  >    mCurrentPhotoPath = \"file:\" + image.getAbsolutePath();\n  >    return image;\n  >}\n  >```\n  >\n  >使用如上方法，来创建新的照片文件：\n  >\n  >```java\n  >static final int REQUEST_TAKE_PHOTO = 1;\n  >\n  >private void dispatchTakePictureIntent() {\n  >    Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\n  >    // 判断是否有可以处理拍照的Activity\n  >    if (takePictureIntent.resolveActivity(getPackageManager()) != null) {\n  >        // 创建照片文件\n  >        File photoFile = null;\n  >        try {\n  >            photoFile = createImageFile();\n  >        } catch (IOException ex) {\n  >            // 创建文件异常\n  >            ...\n  >        }\n  >        // 照片创建成功的话，完成照片存储。\n  >        if (photoFile != null) {\n  >            takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT,\n  >                    Uri.fromFile(photoFile));\n  >            startActivityForResult(takePictureIntent, REQUEST_TAKE_PHOTO);\n  >        }\n  >    }\n  >}\n  >```\n  >\n  >5、如果照片目录不是私有，那么需要通知系统，将照片显示到公开目录中,让mediaScanner可以扫描到。\n  >\n  >```java\n  >private void galleryAddPic() {\n  >  //intent\n  >    Intent mediaScanIntent = new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE);\n  >    File f = new File(mCurrentPhotoPath);\n  >    Uri contentUri = Uri.fromFile(f);\n  >  //发送广播，\n  >    mediaScanIntent.setData(contentUri);\n  >    this.sendBroadcast(mediaScanIntent);\n  >}\n  >```\n  >\n  >6、图片缩放\n  >\n  >多数情况下不需要全尺寸的清晰图片显示，也为了避免内存消耗，使用图片缩放：\n  >\n  >```java\n  >private void setPic() {\n  >    // 1、获取需要显示图片的view控件的大小。\n  >    int targetW = mImageView.getWidth();\n  >    int targetH = mImageView.getHeight();\n  >\n  >    // 2、获取需要显示的图片的尺寸\n  >    BitmapFactory.Options bmOptions = new BitmapFactory.Options();\n  >    bmOptions.inJustDecodeBounds = true;\n  >    BitmapFactory.decodeFile(mCurrentPhotoPath, bmOptions);\n  >    int photoW = bmOptions.outWidth;\n  >    int photoH = bmOptions.outHeight;\n  >\n  >    // 3、计算缩放比，根据宽高\n  >    int scaleFactor = Math.min(photoW/targetW, photoH/targetH);\n  >\n  >    // 4、缩放图片\n  >    bmOptions.inJustDecodeBounds = false;//\n  >    bmOptions.inSampleSize = scaleFactor;//缩放比\n  >    bmOptions.inPurgeable = true;//\n  >\t//完成图片缩放\n  >    Bitmap bitmap = BitmapFactory.decodeFile(mCurrentPhotoPath, bmOptions);\n  >    mImageView.setImageBitmap(bitmap);\n  >}\n  >```\n\n- #### 简单的录像\n\n  > 1、请求相机权限\n  >\n  > ```xml\n  > <manifest ... >\n  >     <uses-feature android:name=\"android.hardware.camera\"\n  >                   android:required=\"true\" />\n  >    <uses-feature android:name=\"android.hardware.camera.autofocus\" />\n  >     ...\n  > </manifest>\n  > ```\n  >\n  > 2、通过Intent来录制视频,Action是`MediaStore.ACTION_VIDEO_CAPTURE`\n  >\n  > ```java\n  > static final int REQUEST_VIDEO_CAPTURE = 1;\n  >\n  > private void dispatchTakeVideoIntent() {\n  >     Intent takeVideoIntent = new Intent(MediaStore.ACTION_VIDEO_CAPTURE);\n  >   //判断是否有可用录像程序\n  >     if (takeVideoIntent.resolveActivity(getPackageManager()) != null) {\n  >         startActivityForResult(takeVideoIntent, REQUEST_VIDEO_CAPTURE);\n  >     }\n  > }\n  > ```\n  >\n  > 3、接收返回的视频数据\n  >\n  > ```java\n  > @Override\n  > protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n  >     if (requestCode == REQUEST_VIDEO_CAPTURE && resultCode == RESULT_OK) {\n  >       //获取视频文件保存的uri\n  >         Uri videoUri = intent.getData();\n  >         mVideoView.setVideoURI(videoUri);\n  >     }\n  > }\n  > ```\n\n- #### 控制相机硬件\n\n  > 1、此处提供给有特殊需要的app来调用Camera硬件，实现自定义的拍照与录像功能。\n  >\n  > - `onCreate()`中开启线程打开相机。\n  >\n  > - 或者在`onResume()`中开启相机\n  >\n  > - 要检测Camera是否可用，被占用\n  >\n  >   ```java\n  >   private boolean safeCameraOpen(int id) {\n  >       boolean qOpened = false;\n  >       try {\n  >         //先释放，再打开，在此捕获异常\n  >           releaseCameraAndPreview();\n  >           mCamera = Camera.open(id);//相机id，默认后置摄像头。\n  >           qOpened = (mCamera != null);\n  >       } catch (Exception e) {\n  >           Log.e(getString(R.string.app_name), \"failed to open Camera\");\n  >           e.printStackTrace();\n  >       }\n  >\n  >       return qOpened;    \n  >   }\n  >   //释放相机资源\n  >   private void releaseCameraAndPreview() {\n  >       mPreview.setCamera(null);\n  >       if (mCamera != null) {\n  >           mCamera.release();\n  >           mCamera = null;\n  >       }\n  >   }\n  >   ```\n  >\n  > 2、创建相机预览界面，使用`SurfaceView`实现\n  >\n  > ```java\n  > class Preview extends ViewGroup implements SurfaceHolder.Callback {\n  >\n  >     SurfaceView mSurfaceView;//surface view\n  >     SurfaceHolder mHolder;// surface holder\n  > \t//构造函数，初始化数据\n  >     Preview(Context context) {\n  >         super(context);\n  >\n  >         mSurfaceView = new SurfaceView(context);\n  >         addView(mSurfaceView);\n  >\n  >         // 注册surfaceholder的callback，监控surfaceView的创建与销毁。\n  >         mHolder = mSurfaceView.getHolder();\n  >         mHolder.addCallback(this);\n  >         mHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);\n  >     }\n  > ...\n  > }\n  > ```\n  >\n  > ==Preview类的对象，必须在开始预览之前就传递给Camera对象。==\n  >\n  > $Camera 和Preview必须依照特定顺序来创建$。首先创建Camera对象，示例：\n  >\n  > ```java\n  > public void setCamera(Camera camera) {\n  >     if (mCamera == camera) { return; }\n  > \t//停止预览，释放camera对象\n  >     stopPreviewAndFreeCamera();\n  > \t//重新引用camera\n  >     mCamera = camera;\n  > \t//对象非空时候，开启预览\n  >     if (mCamera != null) {\n  >         List<Size> localSizes = mCamera.getParameters().getSupportedPreviewSizes();\n  >         mSupportedPreviewSizes = localSizes;\n  >         requestLayout();\n  >         try {\n  >             mCamera.setPreviewDisplay(mHolder);\n  >         } catch (IOException e) {\n  >             e.printStackTrace();\n  >         }\n  >         // 重要：开启预览，才能拍照。\n  >         mCamera.startPreview();\n  >     }\n  > }\n  > ```\n  >\n  > 3、修改相机设置\n  >\n  > 由于是控制camera硬件，可以设置拍照方式、曝光补偿等。\n  >\n  > ```java\n  > public void surfaceChanged(SurfaceHolder holder, int format, int w, int h) {\n  >     // 设置预览大小\n  >     Camera.Parameters parameters = mCamera.getParameters();\n  >     parameters.setPreviewSize(mPreviewSize.width, mPreviewSize.height);\n  >     requestLayout();\n  >     mCamera.setParameters(parameters);\n  > \t\n  >     //先开启预览，才能调用拍照。\n  >     mCamera.startPreview();\n  > }\n  > //set CameraDisplayOrientation()设置预览方向，横竖屏。\n  > ```\n  >\n  > 4、拍照\n  >\n  > 预览后，才能调用拍照。`Camera.takePicture()`方法。创建`Camera.PictureCallback`和`Camera.ShutterCallback`对象，传递给`Camera.takePicture()`。\n  >\n  > 若要连续拍摄，创建`Camera.PreviewCallback`实现`onPreviewFrame()`方法。如此可以拍摄选定的预览帧，或调用`takePicture()`建立延迟。\n  >\n  > 5、重启Preview\n  >\n  > ==拍照后，需要重启预览==\n  >\n  > ```java\n  > @Override\n  > public void onClick(View v) {\n  >     switch(mPreviewState) {\n  >     case K_STATE_FROZEN://预览\n  >         mCamera.startPreview();\n  >         mPreviewState = K_STATE_PREVIEW;\n  >         break;\n  >     default://拍照\n  >         mCamera.takePicture( null, rawCallback, null);\n  >         mPreviewState = K_STATE_BUSY;\n  >     } // switch\n  >     shutterBtnConfig();\n  > }\n  > ```\n  >\n  > 6、停止预览并释放相机\n  >\n  > 使用Camera后，必须释放资源，以备下次调用或者其他应用使用。一般在Surface被毁后，释放预览和相机。\n  >\n  > ```java\n  > public void surfaceDestroyed(SurfaceHolder holder) {\n  >     // Surface将会销毁，需在此停止预览\n  >     if (mCamera != null) {\n  >         // 停止预览\n  >         mCamera.stopPreview();\n  >     }\n  > }\n  > /**\n  >  * 释放Camera资源\n  >  */\n  > private void stopPreviewAndFreeCamera() {\n  >     if (mCamera != null) {\n  >         //停止预览\n  >         mCamera.stopPreview();\n  >         //重要，停止使用Camera后，必须释放对象资源，在onPause()释放，onResume()重启。\n  >         mCamera.release();\n  >         mCamera = null;\n  >     }\n  > }\n  > ```\n\n### 3、打印\n\nAndroid支持创建pdf文件，打印图片，html和文字。\n\n- #### 打印照片\n\n  > *PrintHelper*类打印图片，AndroidSupportLibrary提供的类库。\n  >\n  > 1、打印一幅图片\n  >\n  > `setScaleMode()`方法，接收两个选项之一：\n  >\n  > - SCALE_MODE_FIT,图片适应打印纸\n  > - SCALE_MODE_FILL,充满整个纸张，可能会与部分图片无法显示出来。\n  >\n  > ```java\n  > private void doPhotoPrint(){\n  >   PrintHelper photoPrinter = new PrintHelper(getActivity());\n  >   photoPrinter.setScaleMode(PrintHelper.SCALE_MODE_FIT);\n  >   Bitmap bitmap = BitmapFactory.decodeResource(getResource(),R.drawable.iclauncher);\n  >   photoPrinter.printBitmap(\"icLaunchetr.jpg 测试打印\",bitmap);\n  > }\n  > ```\n\n- #### 打印html文档\n\n  > android提供了html文档方式，来实现更为丰富的文本打印输出。\n  >\n  > 1、加载Html文档\n  >\n  > 使用`webView`加载html资源，`webview`被作为activity布局的一部分，若是app没有用到该view，则需要创建该对象，来实现html文档：\n  >\n  > - 加载html文档后，创建一个`WebViewClient`对象，来启动打印任务。\n  > - 加载html到`WebView`对象中。\n  >\n  > ```java\n  > private WebView mWebView;\n  > private void doWebViewPrint(){\n  >   //创建webview对象，用于打印\n  >   WebView webView = new WebView(getActivity());\n  >   webView.setWebViewClient(new WebViewClient(){\n  >     public boolean shouldOverrideUrlLoading(WebView view,String url){\n  >       return false;\n  >     }\n  >     @override\n  >     public void onPageFinished(WebView view ,String url){\n  >       Log.i(TAG,\"html页面加载完毕\"+url);\n  >       //调用打印，加载完毕后才调用，否则会不完整，或者失败。\n  >       createWebPrintJob(view);\n  >       mWebView = null;\n  >     }\n  >   });\n  >   //创建一个html文档\n  >     String htmlDocument = \"<html><body><h1>Test Content</h1><p>Testing, \" +\n  >             \"testing, testing...</p></body></html>\";\n  >     webView.loadDataWithBaseURL(null, htmlDocument, \"text/HTML\", \"UTF-8\", null);\n  >\n  >     // 保持web View的对象引用，知道适配器打印完毕。\n  >     mWebView = webView;\n  > }\n  > //要是html需要包含图像，放在“assets/”目录下,指定URL，\n  > webView.loadDataWithBaseURL(\"file:///android_asset/images/\",htmlBody,\"text/HTML\",\"utf-8\",null);\n  > //或者加载一个网页，需要网络权限。\n  > webView.loadUrl(\"http://developer.android.com/about/index.html\");\n  > ```\n  >\n  > ==Web View打印文档会有限制：==\n  >\n  > - 不能添加页眉、页脚、页码\n  > - 不能指定打印页码范围\n  > - 一个Web View对象，只能同时处理一个任务。\n  > - 不支持html的css属性。\n  > - html的javaScript无法调用打印。\n  >\n  > 2、创建打印任务\n  >\n  > ```java\n  > private void createWebPrintJob(WebView webView) {\n  >     // 获取Print Manager实例\n  >     PrintManager printManager = (PrintManager) getActivity()\n  >             .getSystemService(Context.PRINT_SERVICE);\n  >     // 获取PrintAdapter实例\n  >     PrintDocumentAdapter printAdapter = webView.createPrintDocumentAdapter();\n  >     // 创建打印任务，传递给Printadapter，\n  >     String jobName = getString(R.string.app_name) + \" Document\";\n  >     PrintJob printJob = printManager.print(jobName, printAdapter,\n  >             new PrintAttributes.Builder().build());\n  >     // 完成任务配置，加入打印列表。\n  >     mPrintJobs.add(printJob);\n  > }\n  > ```\n\n- #### 打印自定义文档\n\n  > 1、连接打印管理器，来创建打印任务\n  >\n  > ```java\n  > private void doPrint() {\n  >     // Get a PrintManager instance\n  >     PrintManager printManager = (PrintManager) getActivity()\n  >             .getSystemService(Context.PRINT_SERVICE);\n  >     // Set job name, which will be displayed in the print queue\n  >     String jobName = getActivity().getString(R.string.app_name) + \" Document\";\n  >     // Start a print job, passing in a PrintDocumentAdapter implementation\n  >     // to handle the generation of a print document\n  >     printManager.print(jobName, new MyPrintDocumentAdapter(getActivity()),\n  >             null); //最后的参数是PrintAttributes，打印机属性设置。\n  > }\n  > ```\n  >\n  > 2、创建打印机适配器\n  >\n  > `PrintDocumentAdapter`负责打印生命周期，\n  >\n  > - onStart():开始打印，非必需实现的方法，因为总会被调用。\n  > - onLayout(): 用户设置页面布局，尺寸之类的，会调用该函数。\n  > - onWrite(): 将打印文件渲染成待打印状态，可以在onLayout()中多次调用该方法。\n  > - onFinish(): 完成打印，非必需实现。\n  >\n  > 调用onLayout()和onWrite()，尽量写入一个异步进程中，因为可能耗时。\n  >\n  > 3、计算打印文档信息\n  >\n  > 在Print Document Adapter的实现时，需要指定文档类型，计算页数，尺寸之类的信息。\n  >\n  > 在onLayout()中计算这些数据，可从PrintDocumentInfo中获取。\n  >\n  > ```java\n  > @Override\n  > public void onLayout(PrintAttributes oldAttributes,\n  >                      PrintAttributes newAttributes,\n  >                      CancellationSignal cancellationSignal,\n  >                      LayoutResultCallback callback,\n  >                      Bundle metadata) {\n  >     // Create a new PdfDocument with the requested page attributes\n  >     mPdfDocument = new PrintedPdfDocument(getActivity(), newAttributes);\n  >\n  >     // Respond to cancellation request\n  >     if (cancellationSignal.isCancelled() ) {\n  >         callback.onLayoutCancelled();\n  >         return;\n  >     }\n  >\n  >     // Compute the expected number of printed pages\n  >     int pages = computePageCount(newAttributes);\n  >\n  >     if (pages > 0) {\n  >         // Return print information to print framework\n  >         PrintDocumentInfo info = new PrintDocumentInfo\n  >                 .Builder(\"print_output.pdf\")\n  >                 .setContentType(PrintDocumentInfo.CONTENT_TYPE_DOCUMENT)\n  >                 .setPageCount(pages);\n  >                 .build();\n  >         // Content layout reflow is complete\n  >         callback.onLayoutFinished(info, true);\n  >     } else {\n  >         // Otherwise report an error to the print framework\n  >         callback.onLayoutFailed(\"Page count calculation failed.\");\n  >     }\n  > }\n  > ```\n  >\n  > `onLayout()`方法返回结果：完成、取消、失败。必须通过调用PrintDocumentAdapter.LayoutResultCallback对象中的方法指定结果。在`onLayoutFinished()`方法中==boolean的参数==，指明是否与上次布局不同，来决定时候再次调用`onWrite()`方法。\n  >\n  > `onLayout()`计算文档相关数据\n  >\n  > ```java\n  > private int computePageCount(PrintAttributes printAttributes) {\n  >     int itemsPerPage = 4; // default item count for portrait mode\n  >\n  >     MediaSize pageSize = printAttributes.getMediaSize();\n  >     if (!pageSize.isPortrait()) {\n  >         // Six items per page in landscape orientation\n  >         itemsPerPage = 6;\n  >     }\n  >\n  >     // Determine number of print items\n  >     int printItemCount = getPrintItemCount();\n  >\n  >     return (int) Math.ceil(printItemCount / itemsPerPage);\n  > }\n  > ```\n  >\n  > 4、将打印文档写入文件\n  >\n  > 如下代码展示使用`PrintedPdfDocument`类创建pdf文档的基本原理\n  >\n  > ```java\n  > @Override\n  > public void onWrite(final PageRange[] pageRanges,\n  >                     final ParcelFileDescriptor destination,\n  >                     final CancellationSignal cancellationSignal,\n  >                     final WriteResultCallback callback) {\n  >     // Iterate over each page of the document,\n  >     // check if it's in the output range.\n  >     for (int i = 0; i < totalPages; i++) {\n  >         // Check to see if this page is in the output range.\n  >         if (containsPage(pageRanges, i)) {\n  >             // If so, add it to writtenPagesArray. writtenPagesArray.size()\n  >             // is used to compute the next output page index.\n  >             writtenPagesArray.append(writtenPagesArray.size(), i);\n  >             PdfDocument.Page page = mPdfDocument.startPage(i);\n  >\n  >             // check for cancellation\n  >             if (cancellationSignal.isCancelled()) {\n  >                 callback.onWriteCancelled();\n  >                 mPdfDocument.close();\n  >                 mPdfDocument = null;\n  >                 return;\n  >             }\n  >\n  >             // Draw page content for printing\n  >             drawPage(page);\n  >\n  >             // Rendering is complete, so page can be finalized.\n  >             mPdfDocument.finishPage(page);\n  >         }\n  >     }\n  >\n  >     // Write PDF document to file\n  >     try {\n  >         mPdfDocument.writeTo(new FileOutputStream(\n  >                 destination.getFileDescriptor()));\n  >     } catch (IOException e) {\n  >         callback.onWriteFailed(e.toString());\n  >         return;\n  >     } finally {\n  >         mPdfDocument.close();\n  >         mPdfDocument = null;\n  >     }\n  >     PageRange[] writtenPages = computeWrittenPages();\n  >     // Signal the print framework the document is complete\n  >     callback.onWriteFinished(writtenPages);\n  >\n  >     ...\n  > }\n  > ```\n  >\n  > Pdf文档生成\n  >\n  > ```java\n  > private void drawPage(PdfDocument.Page page) {\n  >     Canvas canvas = page.getCanvas();\n  >\n  >     // units are in points (1/72 of an inch)\n  >     int titleBaseLine = 72;\n  >     int leftMargin = 54;\n  >\n  >     Paint paint = new Paint();\n  >     paint.setColor(Color.BLACK);\n  >     paint.setTextSize(36);\n  >     canvas.drawText(\"Test Title\", leftMargin, titleBaseLine, paint);\n  >\n  >     paint.setTextSize(11);\n  >     canvas.drawText(\"Test paragraph\", leftMargin, titleBaseLine + 25, paint);\n  >\n  >     paint.setColor(Color.BLUE);\n  >     canvas.drawRect(100, 100, 172, 172, paint);\n  > }\n  > ```\n  >\n  > **注意，canvas绘图使用point为单位**\n\n","slug":"第三篇、Android多媒体","published":1,"updated":"2017-03-28T09:42:27.486Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0xj1nfp0012scowahfavuol","content":"<h2 id=\"第三章、Android多媒体\"><a href=\"#第三章、Android多媒体\" class=\"headerlink\" title=\"第三章、Android多媒体\"></a>第三章、Android多媒体</h2><h3 id=\"1-管理音频播放\"><a href=\"#1-管理音频播放\" class=\"headerlink\" title=\"1. 管理音频播放\"></a>1. 管理音频播放</h3><ul>\n<li><h4 id=\"控制音量与音频播放\"><a href=\"#控制音量与音频播放\" class=\"headerlink\" title=\"控制音量与音频播放\"></a>控制音量与音频播放</h4><p>应用若使用音频功能，应保证App获取音频焦点，不造成多个应用声音混杂，且可响应音频按钮事件。</p>\n<blockquote>\n<ul>\n<li><p>Android有播放音乐、闹铃、通知、来电等等不同的音频流，需要独立鉴别。</p>\n<p>音量按钮会调节当前音频流，若无，则调节响铃。Android 中<code>setVolumeControlStream()</code>方法控制音频流。一般在Activity或Fragment的<code>onCreate()</code>中调用它。如：</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; setVolumeControlStream(AudioManager.STREAM_MUSIC);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><strong>响应按键事件</strong>，硬件的音控按钮会激活系统广播<code>ACTION_MEDIA_BUTTON</code>的Intent，App需要有receiver在manifest中：</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"tag\">&lt;<span class=\"name\">receiver</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\".RemoteControlReceiver\"</span>&gt;</span></div><div class=\"line\">&gt; \t<span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">&gt;   \t\t<span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.MEDIA_BUTTON\"</span>/&gt;</span></div><div class=\"line\">&gt;   \t<span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">&gt; <span class=\"tag\">&lt;/<span class=\"name\">receiver</span>&gt;</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><em>Receiver接收广播，过滤Action，可以通过<code>EXTRA_KEY_EVENT</code>区分按钮</em>，如：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RemoteControlReceiver</span> <span class=\"keyword\">extends</span> <span class=\"title\">BroadcastReceiver</span></span>&#123;</div><div class=\"line\">&gt;   <span class=\"meta\">@override</span></div><div class=\"line\">&gt;   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceive</span><span class=\"params\">(Context context,Intent intent)</span></span>&#123;</div><div class=\"line\">&gt;     KeyEvent event = (KeyEvent)intent.getParcelableExtra(Intent,EXTRA_KEY_EVENT);</div><div class=\"line\">&gt;     <span class=\"keyword\">if</span>(KeyEvent.KEYCODE_MEDIA_PLAY==event.getKeyCode())&#123;</div><div class=\"line\">&gt;       <span class=\"comment\">//处理按钮Play的点击事件</span></div><div class=\"line\">&gt;       ...</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt;   &#125;</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><code>注意，可能有多个程序监听按钮</code>，可以通过AudioManager管理App注册监听与取消。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; AudioManager am = mContext.getSystemService(Context.AUDIO_SERVICE);</div><div class=\"line\">&gt; ...</div><div class=\"line\">&gt;   <span class=\"comment\">//开启监听</span></div><div class=\"line\">&gt; am.registerMediaButtonEventReceiver(RemoteControlReceiver);</div><div class=\"line\">&gt; ...</div><div class=\"line\">&gt;   <span class=\"comment\">//取消监听</span></div><div class=\"line\">&gt; am.unregisterMediaButtonEventReceiver(RemoteControlReceiver);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><strong>音频的控制，并不一定是Activity可见不可见来决定</strong>，正确的方法是判断App获取/失去音频流焦点的状态。</p>\n</blockquote>\n</li>\n<li><h5 id=\"管理音频焦点\"><a href=\"#管理音频焦点\" class=\"headerlink\" title=\"管理音频焦点\"></a>管理音频焦点</h5><p>Android中只有获取音频流焦点的App方能控制音频。</p>\n<ul>\n<li>注意点：1、请求焦点；2、获取焦点；3、监控焦点状态，并作相应处理。</li>\n</ul>\n<blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; requestAudioFocus();<span class=\"comment\">//请求焦点，成功则返回AUDIOFOCUS_REQUEST_GRANTED</span></div><div class=\"line\">&gt; <span class=\"comment\">//需要制定当前音频流，并明确焦点获取是临时`Transient`，还是永久`Permanent`。</span></div><div class=\"line\">&gt; AudioManager am = mContext.getSystemService(Context.AUDIO_SERVICE);</div><div class=\"line\">&gt; ...</div><div class=\"line\">&gt; <span class=\"comment\">// 请求音频焦点，指定当前音频流为music，传入请求参数。</span></div><div class=\"line\">&gt; <span class=\"keyword\">int</span> result = am.requestAudioFocus(afChangeListener,AudioManager.STREAM_MUSIC,AudioManager.AUDIOFOCUS_GAIN);</div><div class=\"line\">&gt; <span class=\"keyword\">if</span> (result == AudioManager.AUDIOFOCUS_REQUEST_GRANTED) &#123;  am.registerMediaButtonEventReceiver(RemoteControlReceiver);</div><div class=\"line\">&gt;     <span class=\"comment\">// 开始播放</span></div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt; ...</div><div class=\"line\">&gt; <span class=\"comment\">//释放焦点的方法</span></div><div class=\"line\">&gt;   am.abandonAudioFocus(afChangeListener);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>一旦结束播放，确保调用<code>abandonAudioFocus()</code>来释放焦点和监听AudioManager.OnAudioFocusChangeListener。</p>\n<ul>\n<li><strong>在使用临时焦点时候，可选择设置<code>Ducking</code>开启，则其他音频流不会停止，而只是变为背景音</strong></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">int</span> result = am.requestAudioFocus(afChangeListener,AudioManager.STERAM_MUSIC,AudioManager.AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK);<span class=\"comment\">//开启Ducking</span></div><div class=\"line\">&gt; <span class=\"keyword\">if</span>(result == AudioManager.AUDIOFOCUS_REQUEST_GRANTED)&#123;</div><div class=\"line\">&gt;   <span class=\"comment\">//paly music And other app maybe playing too。</span></div><div class=\"line\">&gt; &#125;<span class=\"comment\">//若其他app也是Ducking，则本App可以监听它的焦点状态。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><em>音频焦点状态变化的监听</em> <code>onAudioFocusChange()</code>，三种状态，永久，临时，Ducking式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; OnAudioFocusChangeListener afChangeListener = <span class=\"keyword\">new</span> OnAudioFocusChangeListener()&#123;</div><div class=\"line\">&gt;   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAudioFocusChange</span><span class=\"params\">(<span class=\"keyword\">int</span> focusChange)</span></span>&#123;</div><div class=\"line\">&gt;     <span class=\"keyword\">if</span>(focusChange == AUDIOFOCUS_LOSS_TRANSIENT)&#123;</div><div class=\"line\">&gt;       <span class=\"comment\">//暂停播放</span></div><div class=\"line\">&gt;       </div><div class=\"line\">&gt;     &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(focusChange == AudioManger.AUDIOFOCUS_GAIN)&#123;</div><div class=\"line\">&gt;       <span class=\"comment\">//重新播放</span></div><div class=\"line\">&gt;     &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(focusChange == AudioManager.AUDIOFOCUS_LOSS)&#123;</div><div class=\"line\">&gt;      am.unregisterMediaButtonEventReceiver(RemoteControlReceiver);</div><div class=\"line\">&gt;       am.abandonAudioFocus(afChangeListener);</div><div class=\"line\">&gt;       <span class=\"comment\">//停止播放</span></div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt;   &#125;</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><strong>Duck！</strong></li>\n</ul>\n<p>对音频流使用Ducking状态，会是之变为背景式音频。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; OnAudioFocusChangeListener afChangeListener = <span class=\"keyword\">new</span> OnAudioFocusChangeListener() &#123;</div><div class=\"line\">&gt;     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAudioFocusChange</span><span class=\"params\">(<span class=\"keyword\">int</span> focusChange)</span> </span>&#123;</div><div class=\"line\">&gt;         <span class=\"keyword\">if</span> (focusChange == AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK) &#123;</div><div class=\"line\">&gt;             <span class=\"comment\">//Ducking 状态，降低音量，背景音播放</span></div><div class=\"line\">&gt;         &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (focusChange == AudioManager.AUDIOFOCUS_GAIN) &#123;</div><div class=\"line\">&gt;             <span class=\"comment\">// 恢复正常音量播放</span></div><div class=\"line\">&gt;         &#125;</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt; &#125;;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><h6 id=\"兼容音频输出设备\"><a href=\"#兼容音频输出设备\" class=\"headerlink\" title=\"兼容音频输出设备\"></a>兼容音频输出设备</h6><p>检测正使用的硬件设备:<code>Audio Manager</code></p>\n<blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">if</span> (isBluetoothA2dpOn()) &#123;</div><div class=\"line\">&gt;     <span class=\"comment\">// Adjust output for Bluetooth.</span></div><div class=\"line\">&gt; &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isSpeakerphoneOn()) &#123;</div><div class=\"line\">&gt;     <span class=\"comment\">// Adjust output for Speakerphone.</span></div><div class=\"line\">&gt; &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isWiredHeadsetOn()) &#123;</div><div class=\"line\">&gt;     <span class=\"comment\">// Adjust output for headsets</span></div><div class=\"line\">&gt; &#125; <span class=\"keyword\">else</span> &#123; </div><div class=\"line\">&gt;     <span class=\"comment\">// If audio plays and noone can hear it, is it still playing?</span></div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>当音频设备变化时候，要监听改变<code>ACTION_AUDIO_BECOMING_NOISY</code>系统广播的intent。App需要有receiver</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NoisyAudioStreamReceiver</span> <span class=\"keyword\">extends</span> <span class=\"title\">BroadcastReceiver</span></span>&#123;</div><div class=\"line\">&gt;   <span class=\"meta\">@override</span></div><div class=\"line\">&gt;   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceive</span><span class=\"params\">(Context context,Intent intent)</span></span>&#123;</div><div class=\"line\">&gt;     <span class=\"keyword\">if</span>(AudioManager.ACTION_AUDIO_BECOMING_NOISY.equals(intent.getAction()))&#123;</div><div class=\"line\">&gt;      <span class=\"comment\">//接收到音频输出设备变化，暂停播放 </span></div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt;   &#125;</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt; <span class=\"keyword\">private</span> IntentFilter intentFilter = <span class=\"keyword\">new</span> IntentFilter(AudioManager.ACITON_AUDIO_BECOMING_NOISY);</div><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">startPlayback</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">&gt;     registerReceiver(myNoisyAudioStreamReceiver(), intentFilter);</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">stopPlayback</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">&gt;     unregisterReceiver(myNoisyAudioStreamReceiver);</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"2-拍照\"><a href=\"#2-拍照\" class=\"headerlink\" title=\"2.拍照\"></a>2.拍照</h3><ul>\n<li><h4 id=\"简单的拍照\"><a href=\"#简单的拍照\" class=\"headerlink\" title=\"简单的拍照\"></a>简单的拍照</h4><blockquote>\n<p>1、请求相机权限</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;<span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">...</span>&gt;</span></div><div class=\"line\">&gt;  <span class=\"comment\">&lt;!-- 在清单文件中加入该属性，向用户声明本App需要相机权限。 --&gt;</span></div><div class=\"line\">&gt;\t<span class=\"tag\">&lt;<span class=\"name\">uses-feature</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.hardware.camera\"</span></span></div><div class=\"line\">&gt;                  android:required=\"true\"/&gt;</div><div class=\"line\">&gt;  <span class=\"comment\">&lt;!-- 自动聚焦 --&gt;</span></div><div class=\"line\">&gt;   <span class=\"tag\">&lt;<span class=\"name\">uses-feature</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.hardware.camera.autofocus\"</span> /&gt;</span></div><div class=\"line\">&gt;  <span class=\"comment\">&lt;!-- 调用相机需要的权限 --&gt;</span></div><div class=\"line\">&gt;  </div><div class=\"line\">&gt;  <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.CAMERA\"</span> /&gt;</span></div><div class=\"line\">&gt;<span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>本App若非必须有相机，<code>required</code>可以设置false。代码中可以用<code>hasSystemFeature(PackageManager.FEATURE_CAMERA)</code>来检查是否有camera硬件。</p>\n<p>2、调用系统相机拍照。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;<span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> REQUEST_IMAGE_CAPTURE=<span class=\"number\">1</span>;<span class=\"comment\">//请求码</span></div><div class=\"line\">&gt;<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchTakePictureIntent</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">&gt;  <span class=\"comment\">//调用相机的intent</span></div><div class=\"line\">&gt;  Intent takePictureIntent = <span class=\"keyword\">new</span> Intent(MediaStore.ACTION_IMAGE_CAPTURE);</div><div class=\"line\">&gt;  <span class=\"comment\">//检查有没有能处理该intent的Activity，以免下面startActivity会空指针，而崩溃</span></div><div class=\"line\">&gt;  <span class=\"keyword\">if</span>(takePictureIntent.resolveActivity(getPackageManager()) !=<span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">&gt;    startActivityForResult(takePictureIntent,REQUEST_IMAGE_CAPTURE);</div><div class=\"line\">&gt;  &#125;</div><div class=\"line\">&gt;&#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>3、获取缩略图</p>\n<p>Android相机将拍摄好的照片缩小为Bitmap，返回给调用的activity，<code>key-value</code>键值对形式将数据绑定到intent返回。<code>data</code> key值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;<span class=\"meta\">@Override</span></div><div class=\"line\">&gt;<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityResult</span><span class=\"params\">(<span class=\"keyword\">int</span> requestCode, <span class=\"keyword\">int</span> resultCode, Intent data)</span> </span>&#123;</div><div class=\"line\">&gt;    <span class=\"keyword\">if</span> (requestCode == REQUEST_IMAGE_CAPTURE &amp;&amp; resultCode == RESULT_OK) &#123;</div><div class=\"line\">&gt;        Bundle extras = data.getExtras();<span class=\"comment\">//获取bundle对象</span></div><div class=\"line\">&gt;        Bitmap imageBitmap = (Bitmap) extras.get(<span class=\"string\">\"data\"</span>);<span class=\"comment\">//key值，获取缩略图</span></div><div class=\"line\">&gt;        mImageView.setImageBitmap(imageBitmap);</div><div class=\"line\">&gt;    &#125;</div><div class=\"line\">&gt;&#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>4、获取全尺寸照片</p>\n<p>Android一般会保存原始照片数据到指定文件夹下。通常为<code>DIRECTORY_PICTURES</code>对应的文件目录，需要读写SD卡的权限。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;<span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">...</span>&gt;</span></div><div class=\"line\">&gt;\t<span class=\"tag\">&lt;<span class=\"name\">uses_permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.WRITE_EXTERNAL_STORAGE\"</span>/&gt;</span></div><div class=\"line\">&gt;  \t<span class=\"comment\">&lt;!-- 一般有写入权限，就默认会有读取权限了 --&gt;</span></div><div class=\"line\">&gt;<span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><code>getExternalFilesDir()</code>私有目录，<code>getExternalStoragePublicDirectory()</code>共有目录，接收参数<code>DIRECTORY_PICTURES</code>标明是图片文件夹。</p>\n<p><strong>注意文件的保存，需要防止命名冲突，一般会加入时间戳来避免该问题。</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;String mCurrentPhotoPath;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;<span class=\"function\"><span class=\"keyword\">private</span> File <span class=\"title\">createImageFile</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">&gt;    <span class=\"comment\">// 创建图片文件</span></div><div class=\"line\">&gt;    String timeStamp = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyyMMdd_HHmmss\"</span>).format(<span class=\"keyword\">new</span> Date());</div><div class=\"line\">&gt;    String imageFileName = <span class=\"string\">\"JPEG_\"</span> + timeStamp + <span class=\"string\">\"_\"</span>;</div><div class=\"line\">&gt;    File storageDir = Environment.getExternalStoragePublicDirectory(</div><div class=\"line\">&gt;            Environment.DIRECTORY_PICTURES);</div><div class=\"line\">&gt;    File image = File.createTempFile(</div><div class=\"line\">&gt;        imageFileName,  <span class=\"comment\">/* prefix */</span></div><div class=\"line\">&gt;        <span class=\"string\">\".jpg\"</span>,         <span class=\"comment\">/* suffix */</span></div><div class=\"line\">&gt;        storageDir      <span class=\"comment\">/* directory */</span></div><div class=\"line\">&gt;    );</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\">// Save a file: path for use with ACTION_VIEW intents</span></div><div class=\"line\">&gt;    mCurrentPhotoPath = <span class=\"string\">\"file:\"</span> + image.getAbsolutePath();</div><div class=\"line\">&gt;    <span class=\"keyword\">return</span> image;</div><div class=\"line\">&gt;&#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>使用如上方法，来创建新的照片文件：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;<span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> REQUEST_TAKE_PHOTO = <span class=\"number\">1</span>;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchTakePictureIntent</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">&gt;    Intent takePictureIntent = <span class=\"keyword\">new</span> Intent(MediaStore.ACTION_IMAGE_CAPTURE);</div><div class=\"line\">&gt;    <span class=\"comment\">// 判断是否有可以处理拍照的Activity</span></div><div class=\"line\">&gt;    <span class=\"keyword\">if</span> (takePictureIntent.resolveActivity(getPackageManager()) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">&gt;        <span class=\"comment\">// 创建照片文件</span></div><div class=\"line\">&gt;        File photoFile = <span class=\"keyword\">null</span>;</div><div class=\"line\">&gt;        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">&gt;            photoFile = createImageFile();</div><div class=\"line\">&gt;        &#125; <span class=\"keyword\">catch</span> (IOException ex) &#123;</div><div class=\"line\">&gt;            <span class=\"comment\">// 创建文件异常</span></div><div class=\"line\">&gt;            ...</div><div class=\"line\">&gt;        &#125;</div><div class=\"line\">&gt;        <span class=\"comment\">// 照片创建成功的话，完成照片存储。</span></div><div class=\"line\">&gt;        <span class=\"keyword\">if</span> (photoFile != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">&gt;            takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT,</div><div class=\"line\">&gt;                    Uri.fromFile(photoFile));</div><div class=\"line\">&gt;            startActivityForResult(takePictureIntent, REQUEST_TAKE_PHOTO);</div><div class=\"line\">&gt;        &#125;</div><div class=\"line\">&gt;    &#125;</div><div class=\"line\">&gt;&#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>5、如果照片目录不是私有，那么需要通知系统，将照片显示到公开目录中,让mediaScanner可以扫描到。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">galleryAddPic</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">&gt;  <span class=\"comment\">//intent</span></div><div class=\"line\">&gt;    Intent mediaScanIntent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE);</div><div class=\"line\">&gt;    File f = <span class=\"keyword\">new</span> File(mCurrentPhotoPath);</div><div class=\"line\">&gt;    Uri contentUri = Uri.fromFile(f);</div><div class=\"line\">&gt;  <span class=\"comment\">//发送广播，</span></div><div class=\"line\">&gt;    mediaScanIntent.setData(contentUri);</div><div class=\"line\">&gt;    <span class=\"keyword\">this</span>.sendBroadcast(mediaScanIntent);</div><div class=\"line\">&gt;&#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>6、图片缩放</p>\n<p>多数情况下不需要全尺寸的清晰图片显示，也为了避免内存消耗，使用图片缩放：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setPic</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">&gt;    <span class=\"comment\">// 1、获取需要显示图片的view控件的大小。</span></div><div class=\"line\">&gt;    <span class=\"keyword\">int</span> targetW = mImageView.getWidth();</div><div class=\"line\">&gt;    <span class=\"keyword\">int</span> targetH = mImageView.getHeight();</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\">// 2、获取需要显示的图片的尺寸</span></div><div class=\"line\">&gt;    BitmapFactory.Options bmOptions = <span class=\"keyword\">new</span> BitmapFactory.Options();</div><div class=\"line\">&gt;    bmOptions.inJustDecodeBounds = <span class=\"keyword\">true</span>;</div><div class=\"line\">&gt;    BitmapFactory.decodeFile(mCurrentPhotoPath, bmOptions);</div><div class=\"line\">&gt;    <span class=\"keyword\">int</span> photoW = bmOptions.outWidth;</div><div class=\"line\">&gt;    <span class=\"keyword\">int</span> photoH = bmOptions.outHeight;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\">// 3、计算缩放比，根据宽高</span></div><div class=\"line\">&gt;    <span class=\"keyword\">int</span> scaleFactor = Math.min(photoW/targetW, photoH/targetH);</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\">// 4、缩放图片</span></div><div class=\"line\">&gt;    bmOptions.inJustDecodeBounds = <span class=\"keyword\">false</span>;<span class=\"comment\">//</span></div><div class=\"line\">&gt;    bmOptions.inSampleSize = scaleFactor;<span class=\"comment\">//缩放比</span></div><div class=\"line\">&gt;    bmOptions.inPurgeable = <span class=\"keyword\">true</span>;<span class=\"comment\">//</span></div><div class=\"line\">&gt;\t<span class=\"comment\">//完成图片缩放</span></div><div class=\"line\">&gt;    Bitmap bitmap = BitmapFactory.decodeFile(mCurrentPhotoPath, bmOptions);</div><div class=\"line\">&gt;    mImageView.setImageBitmap(bitmap);</div><div class=\"line\">&gt;&#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><h4 id=\"简单的录像\"><a href=\"#简单的录像\" class=\"headerlink\" title=\"简单的录像\"></a>简单的录像</h4><blockquote>\n<p>1、请求相机权限</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">...</span> &gt;</span></div><div class=\"line\">&gt;     <span class=\"tag\">&lt;<span class=\"name\">uses-feature</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.hardware.camera\"</span></span></div><div class=\"line\">&gt;                   android:required=\"true\" /&gt;</div><div class=\"line\">&gt;    <span class=\"tag\">&lt;<span class=\"name\">uses-feature</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.hardware.camera.autofocus\"</span> /&gt;</span></div><div class=\"line\">&gt;     ...</div><div class=\"line\">&gt; <span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>2、通过Intent来录制视频,Action是<code>MediaStore.ACTION_VIDEO_CAPTURE</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> REQUEST_VIDEO_CAPTURE = <span class=\"number\">1</span>;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchTakeVideoIntent</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">&gt;     Intent takeVideoIntent = <span class=\"keyword\">new</span> Intent(MediaStore.ACTION_VIDEO_CAPTURE);</div><div class=\"line\">&gt;   <span class=\"comment\">//判断是否有可用录像程序</span></div><div class=\"line\">&gt;     <span class=\"keyword\">if</span> (takeVideoIntent.resolveActivity(getPackageManager()) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">&gt;         startActivityForResult(takeVideoIntent, REQUEST_VIDEO_CAPTURE);</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>3、接收返回的视频数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"meta\">@Override</span></div><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityResult</span><span class=\"params\">(<span class=\"keyword\">int</span> requestCode, <span class=\"keyword\">int</span> resultCode, Intent data)</span> </span>&#123;</div><div class=\"line\">&gt;     <span class=\"keyword\">if</span> (requestCode == REQUEST_VIDEO_CAPTURE &amp;&amp; resultCode == RESULT_OK) &#123;</div><div class=\"line\">&gt;       <span class=\"comment\">//获取视频文件保存的uri</span></div><div class=\"line\">&gt;         Uri videoUri = intent.getData();</div><div class=\"line\">&gt;         mVideoView.setVideoURI(videoUri);</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><h4 id=\"控制相机硬件\"><a href=\"#控制相机硬件\" class=\"headerlink\" title=\"控制相机硬件\"></a>控制相机硬件</h4><blockquote>\n<p>1、此处提供给有特殊需要的app来调用Camera硬件，实现自定义的拍照与录像功能。</p>\n<ul>\n<li><p><code>onCreate()</code>中开启线程打开相机。</p>\n</li>\n<li><p>或者在<code>onResume()</code>中开启相机</p>\n</li>\n<li><p>要检测Camera是否可用，被占用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">safeCameraOpen</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</div><div class=\"line\">&gt;       <span class=\"keyword\">boolean</span> qOpened = <span class=\"keyword\">false</span>;</div><div class=\"line\">&gt;       <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">&gt;         <span class=\"comment\">//先释放，再打开，在此捕获异常</span></div><div class=\"line\">&gt;           releaseCameraAndPreview();</div><div class=\"line\">&gt;           mCamera = Camera.open(id);<span class=\"comment\">//相机id，默认后置摄像头。</span></div><div class=\"line\">&gt;           qOpened = (mCamera != <span class=\"keyword\">null</span>);</div><div class=\"line\">&gt;       &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">&gt;           Log.e(getString(R.string.app_name), <span class=\"string\">\"failed to open Camera\"</span>);</div><div class=\"line\">&gt;           e.printStackTrace();</div><div class=\"line\">&gt;       &#125;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;       <span class=\"keyword\">return</span> qOpened;    </div><div class=\"line\">&gt;   &#125;</div><div class=\"line\">&gt;   <span class=\"comment\">//释放相机资源</span></div><div class=\"line\">&gt;   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">releaseCameraAndPreview</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">&gt;       mPreview.setCamera(<span class=\"keyword\">null</span>);</div><div class=\"line\">&gt;       <span class=\"keyword\">if</span> (mCamera != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">&gt;           mCamera.release();</div><div class=\"line\">&gt;           mCamera = <span class=\"keyword\">null</span>;</div><div class=\"line\">&gt;       &#125;</div><div class=\"line\">&gt;   &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>2、创建相机预览界面，使用<code>SurfaceView</code>实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Preview</span> <span class=\"keyword\">extends</span> <span class=\"title\">ViewGroup</span> <span class=\"keyword\">implements</span> <span class=\"title\">SurfaceHolder</span>.<span class=\"title\">Callback</span> </span>&#123;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     SurfaceView mSurfaceView;<span class=\"comment\">//surface view</span></div><div class=\"line\">&gt;     SurfaceHolder mHolder;<span class=\"comment\">// surface holder</span></div><div class=\"line\">&gt; \t<span class=\"comment\">//构造函数，初始化数据</span></div><div class=\"line\">&gt;     Preview(Context context) &#123;</div><div class=\"line\">&gt;         <span class=\"keyword\">super</span>(context);</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;         mSurfaceView = <span class=\"keyword\">new</span> SurfaceView(context);</div><div class=\"line\">&gt;         addView(mSurfaceView);</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;         <span class=\"comment\">// 注册surfaceholder的callback，监控surfaceView的创建与销毁。</span></div><div class=\"line\">&gt;         mHolder = mSurfaceView.getHolder();</div><div class=\"line\">&gt;         mHolder.addCallback(<span class=\"keyword\">this</span>);</div><div class=\"line\">&gt;         mHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt; ...</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>==Preview类的对象，必须在开始预览之前就传递给Camera对象。==</p>\n<p>$Camera 和Preview必须依照特定顺序来创建$。首先创建Camera对象，示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setCamera</span><span class=\"params\">(Camera camera)</span> </span>&#123;</div><div class=\"line\">&gt;     <span class=\"keyword\">if</span> (mCamera == camera) &#123; <span class=\"keyword\">return</span>; &#125;</div><div class=\"line\">&gt; \t<span class=\"comment\">//停止预览，释放camera对象</span></div><div class=\"line\">&gt;     stopPreviewAndFreeCamera();</div><div class=\"line\">&gt; \t<span class=\"comment\">//重新引用camera</span></div><div class=\"line\">&gt;     mCamera = camera;</div><div class=\"line\">&gt; \t<span class=\"comment\">//对象非空时候，开启预览</span></div><div class=\"line\">&gt;     <span class=\"keyword\">if</span> (mCamera != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">&gt;         List&lt;Size&gt; localSizes = mCamera.getParameters().getSupportedPreviewSizes();</div><div class=\"line\">&gt;         mSupportedPreviewSizes = localSizes;</div><div class=\"line\">&gt;         requestLayout();</div><div class=\"line\">&gt;         <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">&gt;             mCamera.setPreviewDisplay(mHolder);</div><div class=\"line\">&gt;         &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">&gt;             e.printStackTrace();</div><div class=\"line\">&gt;         &#125;</div><div class=\"line\">&gt;         <span class=\"comment\">// 重要：开启预览，才能拍照。</span></div><div class=\"line\">&gt;         mCamera.startPreview();</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>3、修改相机设置</p>\n<p>由于是控制camera硬件，可以设置拍照方式、曝光补偿等。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">surfaceChanged</span><span class=\"params\">(SurfaceHolder holder, <span class=\"keyword\">int</span> format, <span class=\"keyword\">int</span> w, <span class=\"keyword\">int</span> h)</span> </span>&#123;</div><div class=\"line\">&gt;     <span class=\"comment\">// 设置预览大小</span></div><div class=\"line\">&gt;     Camera.Parameters parameters = mCamera.getParameters();</div><div class=\"line\">&gt;     parameters.setPreviewSize(mPreviewSize.width, mPreviewSize.height);</div><div class=\"line\">&gt;     requestLayout();</div><div class=\"line\">&gt;     mCamera.setParameters(parameters);</div><div class=\"line\">&gt; \t</div><div class=\"line\">&gt;     <span class=\"comment\">//先开启预览，才能调用拍照。</span></div><div class=\"line\">&gt;     mCamera.startPreview();</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt; <span class=\"comment\">//set CameraDisplayOrientation()设置预览方向，横竖屏。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>4、拍照</p>\n<p>预览后，才能调用拍照。<code>Camera.takePicture()</code>方法。创建<code>Camera.PictureCallback</code>和<code>Camera.ShutterCallback</code>对象，传递给<code>Camera.takePicture()</code>。</p>\n<p>若要连续拍摄，创建<code>Camera.PreviewCallback</code>实现<code>onPreviewFrame()</code>方法。如此可以拍摄选定的预览帧，或调用<code>takePicture()</code>建立延迟。</p>\n<p>5、重启Preview</p>\n<p>==拍照后，需要重启预览==</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"meta\">@Override</span></div><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">&gt;     <span class=\"keyword\">switch</span>(mPreviewState) &#123;</div><div class=\"line\">&gt;     <span class=\"keyword\">case</span> K_STATE_FROZEN:<span class=\"comment\">//预览</span></div><div class=\"line\">&gt;         mCamera.startPreview();</div><div class=\"line\">&gt;         mPreviewState = K_STATE_PREVIEW;</div><div class=\"line\">&gt;         <span class=\"keyword\">break</span>;</div><div class=\"line\">&gt;     <span class=\"keyword\">default</span>:<span class=\"comment\">//拍照</span></div><div class=\"line\">&gt;         mCamera.takePicture( <span class=\"keyword\">null</span>, rawCallback, <span class=\"keyword\">null</span>);</div><div class=\"line\">&gt;         mPreviewState = K_STATE_BUSY;</div><div class=\"line\">&gt;     &#125; <span class=\"comment\">// switch</span></div><div class=\"line\">&gt;     shutterBtnConfig();</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>6、停止预览并释放相机</p>\n<p>使用Camera后，必须释放资源，以备下次调用或者其他应用使用。一般在Surface被毁后，释放预览和相机。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">surfaceDestroyed</span><span class=\"params\">(SurfaceHolder holder)</span> </span>&#123;</div><div class=\"line\">&gt;     <span class=\"comment\">// Surface将会销毁，需在此停止预览</span></div><div class=\"line\">&gt;     <span class=\"keyword\">if</span> (mCamera != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">&gt;         <span class=\"comment\">// 停止预览</span></div><div class=\"line\">&gt;         mCamera.stopPreview();</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt; <span class=\"comment\">/**</span></div><div class=\"line\">&gt;  * 释放Camera资源</div><div class=\"line\">&gt;  */</div><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">stopPreviewAndFreeCamera</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">&gt;     <span class=\"keyword\">if</span> (mCamera != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">&gt;         <span class=\"comment\">//停止预览</span></div><div class=\"line\">&gt;         mCamera.stopPreview();</div><div class=\"line\">&gt;         <span class=\"comment\">//重要，停止使用Camera后，必须释放对象资源，在onPause()释放，onResume()重启。</span></div><div class=\"line\">&gt;         mCamera.release();</div><div class=\"line\">&gt;         mCamera = <span class=\"keyword\">null</span>;</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"3、打印\"><a href=\"#3、打印\" class=\"headerlink\" title=\"3、打印\"></a>3、打印</h3><p>Android支持创建pdf文件，打印图片，html和文字。</p>\n<ul>\n<li><h4 id=\"打印照片\"><a href=\"#打印照片\" class=\"headerlink\" title=\"打印照片\"></a>打印照片</h4><blockquote>\n<p><em>PrintHelper</em>类打印图片，AndroidSupportLibrary提供的类库。</p>\n<p>1、打印一幅图片</p>\n<p><code>setScaleMode()</code>方法，接收两个选项之一：</p>\n<ul>\n<li>SCALE_MODE_FIT,图片适应打印纸</li>\n<li>SCALE_MODE_FILL,充满整个纸张，可能会与部分图片无法显示出来。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">doPhotoPrint</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">&gt;   PrintHelper photoPrinter = <span class=\"keyword\">new</span> PrintHelper(getActivity());</div><div class=\"line\">&gt;   photoPrinter.setScaleMode(PrintHelper.SCALE_MODE_FIT);</div><div class=\"line\">&gt;   Bitmap bitmap = BitmapFactory.decodeResource(getResource(),R.drawable.iclauncher);</div><div class=\"line\">&gt;   photoPrinter.printBitmap(<span class=\"string\">\"icLaunchetr.jpg 测试打印\"</span>,bitmap);</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><h4 id=\"打印html文档\"><a href=\"#打印html文档\" class=\"headerlink\" title=\"打印html文档\"></a>打印html文档</h4><blockquote>\n<p>android提供了html文档方式，来实现更为丰富的文本打印输出。</p>\n<p>1、加载Html文档</p>\n<p>使用<code>webView</code>加载html资源，<code>webview</code>被作为activity布局的一部分，若是app没有用到该view，则需要创建该对象，来实现html文档：</p>\n<ul>\n<li>加载html文档后，创建一个<code>WebViewClient</code>对象，来启动打印任务。</li>\n<li>加载html到<code>WebView</code>对象中。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">private</span> WebView mWebView;</div><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">doWebViewPrint</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">&gt;   <span class=\"comment\">//创建webview对象，用于打印</span></div><div class=\"line\">&gt;   WebView webView = <span class=\"keyword\">new</span> WebView(getActivity());</div><div class=\"line\">&gt;   webView.setWebViewClient(<span class=\"keyword\">new</span> WebViewClient()&#123;</div><div class=\"line\">&gt;     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldOverrideUrlLoading</span><span class=\"params\">(WebView view,String url)</span></span>&#123;</div><div class=\"line\">&gt;       <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt;     <span class=\"meta\">@override</span></div><div class=\"line\">&gt;     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPageFinished</span><span class=\"params\">(WebView view ,String url)</span></span>&#123;</div><div class=\"line\">&gt;       Log.i(TAG,<span class=\"string\">\"html页面加载完毕\"</span>+url);</div><div class=\"line\">&gt;       <span class=\"comment\">//调用打印，加载完毕后才调用，否则会不完整，或者失败。</span></div><div class=\"line\">&gt;       createWebPrintJob(view);</div><div class=\"line\">&gt;       mWebView = <span class=\"keyword\">null</span>;</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt;   &#125;);</div><div class=\"line\">&gt;   <span class=\"comment\">//创建一个html文档</span></div><div class=\"line\">&gt;     String htmlDocument = <span class=\"string\">\"&lt;html&gt;&lt;body&gt;&lt;h1&gt;Test Content&lt;/h1&gt;&lt;p&gt;Testing, \"</span> +</div><div class=\"line\">&gt;             <span class=\"string\">\"testing, testing...&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;\"</span>;</div><div class=\"line\">&gt;     webView.loadDataWithBaseURL(<span class=\"keyword\">null</span>, htmlDocument, <span class=\"string\">\"text/HTML\"</span>, <span class=\"string\">\"UTF-8\"</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     <span class=\"comment\">// 保持web View的对象引用，知道适配器打印完毕。</span></div><div class=\"line\">&gt;     mWebView = webView;</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt; <span class=\"comment\">//要是html需要包含图像，放在“assets/”目录下,指定URL，</span></div><div class=\"line\">&gt; webView.loadDataWithBaseURL(<span class=\"string\">\"file:///android_asset/images/\"</span>,htmlBody,<span class=\"string\">\"text/HTML\"</span>,<span class=\"string\">\"utf-8\"</span>,<span class=\"keyword\">null</span>);</div><div class=\"line\">&gt; <span class=\"comment\">//或者加载一个网页，需要网络权限。</span></div><div class=\"line\">&gt; webView.loadUrl(<span class=\"string\">\"http://developer.android.com/about/index.html\"</span>);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>==Web View打印文档会有限制：==</p>\n<ul>\n<li>不能添加页眉、页脚、页码</li>\n<li>不能指定打印页码范围</li>\n<li>一个Web View对象，只能同时处理一个任务。</li>\n<li>不支持html的css属性。</li>\n<li>html的javaScript无法调用打印。</li>\n</ul>\n<p>2、创建打印任务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">createWebPrintJob</span><span class=\"params\">(WebView webView)</span> </span>&#123;</div><div class=\"line\">&gt;     <span class=\"comment\">// 获取Print Manager实例</span></div><div class=\"line\">&gt;     PrintManager printManager = (PrintManager) getActivity()</div><div class=\"line\">&gt;             .getSystemService(Context.PRINT_SERVICE);</div><div class=\"line\">&gt;     <span class=\"comment\">// 获取PrintAdapter实例</span></div><div class=\"line\">&gt;     PrintDocumentAdapter printAdapter = webView.createPrintDocumentAdapter();</div><div class=\"line\">&gt;     <span class=\"comment\">// 创建打印任务，传递给Printadapter，</span></div><div class=\"line\">&gt;     String jobName = getString(R.string.app_name) + <span class=\"string\">\" Document\"</span>;</div><div class=\"line\">&gt;     PrintJob printJob = printManager.print(jobName, printAdapter,</div><div class=\"line\">&gt;             <span class=\"keyword\">new</span> PrintAttributes.Builder().build());</div><div class=\"line\">&gt;     <span class=\"comment\">// 完成任务配置，加入打印列表。</span></div><div class=\"line\">&gt;     mPrintJobs.add(printJob);</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><h4 id=\"打印自定义文档\"><a href=\"#打印自定义文档\" class=\"headerlink\" title=\"打印自定义文档\"></a>打印自定义文档</h4><blockquote>\n<p>1、连接打印管理器，来创建打印任务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">doPrint</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">&gt;     <span class=\"comment\">// Get a PrintManager instance</span></div><div class=\"line\">&gt;     PrintManager printManager = (PrintManager) getActivity()</div><div class=\"line\">&gt;             .getSystemService(Context.PRINT_SERVICE);</div><div class=\"line\">&gt;     <span class=\"comment\">// Set job name, which will be displayed in the print queue</span></div><div class=\"line\">&gt;     String jobName = getActivity().getString(R.string.app_name) + <span class=\"string\">\" Document\"</span>;</div><div class=\"line\">&gt;     <span class=\"comment\">// Start a print job, passing in a PrintDocumentAdapter implementation</span></div><div class=\"line\">&gt;     <span class=\"comment\">// to handle the generation of a print document</span></div><div class=\"line\">&gt;     printManager.print(jobName, <span class=\"keyword\">new</span> MyPrintDocumentAdapter(getActivity()),</div><div class=\"line\">&gt;             <span class=\"keyword\">null</span>); <span class=\"comment\">//最后的参数是PrintAttributes，打印机属性设置。</span></div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>2、创建打印机适配器</p>\n<p><code>PrintDocumentAdapter</code>负责打印生命周期，</p>\n<ul>\n<li>onStart():开始打印，非必需实现的方法，因为总会被调用。</li>\n<li>onLayout(): 用户设置页面布局，尺寸之类的，会调用该函数。</li>\n<li>onWrite(): 将打印文件渲染成待打印状态，可以在onLayout()中多次调用该方法。</li>\n<li>onFinish(): 完成打印，非必需实现。</li>\n</ul>\n<p>调用onLayout()和onWrite()，尽量写入一个异步进程中，因为可能耗时。</p>\n<p>3、计算打印文档信息</p>\n<p>在Print Document Adapter的实现时，需要指定文档类型，计算页数，尺寸之类的信息。</p>\n<p>在onLayout()中计算这些数据，可从PrintDocumentInfo中获取。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"meta\">@Override</span></div><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayout</span><span class=\"params\">(PrintAttributes oldAttributes,</span></span></div><div class=\"line\">&gt;                      PrintAttributes newAttributes,</div><div class=\"line\">&gt;                      CancellationSignal cancellationSignal,</div><div class=\"line\">&gt;                      LayoutResultCallback callback,</div><div class=\"line\">&gt;                      Bundle metadata) &#123;</div><div class=\"line\">&gt;     <span class=\"comment\">// Create a new PdfDocument with the requested page attributes</span></div><div class=\"line\">&gt;     mPdfDocument = <span class=\"keyword\">new</span> PrintedPdfDocument(getActivity(), newAttributes);</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     <span class=\"comment\">// Respond to cancellation request</span></div><div class=\"line\">&gt;     <span class=\"keyword\">if</span> (cancellationSignal.isCancelled() ) &#123;</div><div class=\"line\">&gt;         callback.onLayoutCancelled();</div><div class=\"line\">&gt;         <span class=\"keyword\">return</span>;</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     <span class=\"comment\">// Compute the expected number of printed pages</span></div><div class=\"line\">&gt;     <span class=\"keyword\">int</span> pages = computePageCount(newAttributes);</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     <span class=\"keyword\">if</span> (pages &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">&gt;         <span class=\"comment\">// Return print information to print framework</span></div><div class=\"line\">&gt;         PrintDocumentInfo info = <span class=\"keyword\">new</span> PrintDocumentInfo</div><div class=\"line\">&gt;                 .Builder(<span class=\"string\">\"print_output.pdf\"</span>)</div><div class=\"line\">&gt;                 .setContentType(PrintDocumentInfo.CONTENT_TYPE_DOCUMENT)</div><div class=\"line\">&gt;                 .setPageCount(pages);</div><div class=\"line\">&gt;                 .build();</div><div class=\"line\">&gt;         <span class=\"comment\">// Content layout reflow is complete</span></div><div class=\"line\">&gt;         callback.onLayoutFinished(info, <span class=\"keyword\">true</span>);</div><div class=\"line\">&gt;     &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">&gt;         <span class=\"comment\">// Otherwise report an error to the print framework</span></div><div class=\"line\">&gt;         callback.onLayoutFailed(<span class=\"string\">\"Page count calculation failed.\"</span>);</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><code>onLayout()</code>方法返回结果：完成、取消、失败。必须通过调用PrintDocumentAdapter.LayoutResultCallback对象中的方法指定结果。在<code>onLayoutFinished()</code>方法中==boolean的参数==，指明是否与上次布局不同，来决定时候再次调用<code>onWrite()</code>方法。</p>\n<p><code>onLayout()</code>计算文档相关数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">computePageCount</span><span class=\"params\">(PrintAttributes printAttributes)</span> </span>&#123;</div><div class=\"line\">&gt;     <span class=\"keyword\">int</span> itemsPerPage = <span class=\"number\">4</span>; <span class=\"comment\">// default item count for portrait mode</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     MediaSize pageSize = printAttributes.getMediaSize();</div><div class=\"line\">&gt;     <span class=\"keyword\">if</span> (!pageSize.isPortrait()) &#123;</div><div class=\"line\">&gt;         <span class=\"comment\">// Six items per page in landscape orientation</span></div><div class=\"line\">&gt;         itemsPerPage = <span class=\"number\">6</span>;</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     <span class=\"comment\">// Determine number of print items</span></div><div class=\"line\">&gt;     <span class=\"keyword\">int</span> printItemCount = getPrintItemCount();</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>) Math.ceil(printItemCount / itemsPerPage);</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>4、将打印文档写入文件</p>\n<p>如下代码展示使用<code>PrintedPdfDocument</code>类创建pdf文档的基本原理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"meta\">@Override</span></div><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onWrite</span><span class=\"params\">(<span class=\"keyword\">final</span> PageRange[] pageRanges,</span></span></div><div class=\"line\">&gt;                     <span class=\"keyword\">final</span> ParcelFileDescriptor destination,</div><div class=\"line\">&gt;                     <span class=\"keyword\">final</span> CancellationSignal cancellationSignal,</div><div class=\"line\">&gt;                     <span class=\"keyword\">final</span> WriteResultCallback callback) &#123;</div><div class=\"line\">&gt;     <span class=\"comment\">// Iterate over each page of the document,</span></div><div class=\"line\">&gt;     <span class=\"comment\">// check if it's in the output range.</span></div><div class=\"line\">&gt;     <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; totalPages; i++) &#123;</div><div class=\"line\">&gt;         <span class=\"comment\">// Check to see if this page is in the output range.</span></div><div class=\"line\">&gt;         <span class=\"keyword\">if</span> (containsPage(pageRanges, i)) &#123;</div><div class=\"line\">&gt;             <span class=\"comment\">// If so, add it to writtenPagesArray. writtenPagesArray.size()</span></div><div class=\"line\">&gt;             <span class=\"comment\">// is used to compute the next output page index.</span></div><div class=\"line\">&gt;             writtenPagesArray.append(writtenPagesArray.size(), i);</div><div class=\"line\">&gt;             PdfDocument.Page page = mPdfDocument.startPage(i);</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;             <span class=\"comment\">// check for cancellation</span></div><div class=\"line\">&gt;             <span class=\"keyword\">if</span> (cancellationSignal.isCancelled()) &#123;</div><div class=\"line\">&gt;                 callback.onWriteCancelled();</div><div class=\"line\">&gt;                 mPdfDocument.close();</div><div class=\"line\">&gt;                 mPdfDocument = <span class=\"keyword\">null</span>;</div><div class=\"line\">&gt;                 <span class=\"keyword\">return</span>;</div><div class=\"line\">&gt;             &#125;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;             <span class=\"comment\">// Draw page content for printing</span></div><div class=\"line\">&gt;             drawPage(page);</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;             <span class=\"comment\">// Rendering is complete, so page can be finalized.</span></div><div class=\"line\">&gt;             mPdfDocument.finishPage(page);</div><div class=\"line\">&gt;         &#125;</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     <span class=\"comment\">// Write PDF document to file</span></div><div class=\"line\">&gt;     <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">&gt;         mPdfDocument.writeTo(<span class=\"keyword\">new</span> FileOutputStream(</div><div class=\"line\">&gt;                 destination.getFileDescriptor()));</div><div class=\"line\">&gt;     &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">&gt;         callback.onWriteFailed(e.toString());</div><div class=\"line\">&gt;         <span class=\"keyword\">return</span>;</div><div class=\"line\">&gt;     &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">&gt;         mPdfDocument.close();</div><div class=\"line\">&gt;         mPdfDocument = <span class=\"keyword\">null</span>;</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt;     PageRange[] writtenPages = computeWrittenPages();</div><div class=\"line\">&gt;     <span class=\"comment\">// Signal the print framework the document is complete</span></div><div class=\"line\">&gt;     callback.onWriteFinished(writtenPages);</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     ...</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>Pdf文档生成</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">drawPage</span><span class=\"params\">(PdfDocument.Page page)</span> </span>&#123;</div><div class=\"line\">&gt;     Canvas canvas = page.getCanvas();</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     <span class=\"comment\">// units are in points (1/72 of an inch)</span></div><div class=\"line\">&gt;     <span class=\"keyword\">int</span> titleBaseLine = <span class=\"number\">72</span>;</div><div class=\"line\">&gt;     <span class=\"keyword\">int</span> leftMargin = <span class=\"number\">54</span>;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     Paint paint = <span class=\"keyword\">new</span> Paint();</div><div class=\"line\">&gt;     paint.setColor(Color.BLACK);</div><div class=\"line\">&gt;     paint.setTextSize(<span class=\"number\">36</span>);</div><div class=\"line\">&gt;     canvas.drawText(<span class=\"string\">\"Test Title\"</span>, leftMargin, titleBaseLine, paint);</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     paint.setTextSize(<span class=\"number\">11</span>);</div><div class=\"line\">&gt;     canvas.drawText(<span class=\"string\">\"Test paragraph\"</span>, leftMargin, titleBaseLine + <span class=\"number\">25</span>, paint);</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     paint.setColor(Color.BLUE);</div><div class=\"line\">&gt;     canvas.drawRect(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">172</span>, <span class=\"number\">172</span>, paint);</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><strong>注意，canvas绘图使用point为单位</strong></p>\n</blockquote>\n</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"第三章、Android多媒体\"><a href=\"#第三章、Android多媒体\" class=\"headerlink\" title=\"第三章、Android多媒体\"></a>第三章、Android多媒体</h2><h3 id=\"1-管理音频播放\"><a href=\"#1-管理音频播放\" class=\"headerlink\" title=\"1. 管理音频播放\"></a>1. 管理音频播放</h3><ul>\n<li><h4 id=\"控制音量与音频播放\"><a href=\"#控制音量与音频播放\" class=\"headerlink\" title=\"控制音量与音频播放\"></a>控制音量与音频播放</h4><p>应用若使用音频功能，应保证App获取音频焦点，不造成多个应用声音混杂，且可响应音频按钮事件。</p>\n<blockquote>\n<ul>\n<li><p>Android有播放音乐、闹铃、通知、来电等等不同的音频流，需要独立鉴别。</p>\n<p>音量按钮会调节当前音频流，若无，则调节响铃。Android 中<code>setVolumeControlStream()</code>方法控制音频流。一般在Activity或Fragment的<code>onCreate()</code>中调用它。如：</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; setVolumeControlStream(AudioManager.STREAM_MUSIC);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><strong>响应按键事件</strong>，硬件的音控按钮会激活系统广播<code>ACTION_MEDIA_BUTTON</code>的Intent，App需要有receiver在manifest中：</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"tag\">&lt;<span class=\"name\">receiver</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\".RemoteControlReceiver\"</span>&gt;</span></div><div class=\"line\">&gt; \t<span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">&gt;   \t\t<span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.MEDIA_BUTTON\"</span>/&gt;</span></div><div class=\"line\">&gt;   \t<span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">&gt; <span class=\"tag\">&lt;/<span class=\"name\">receiver</span>&gt;</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><em>Receiver接收广播，过滤Action，可以通过<code>EXTRA_KEY_EVENT</code>区分按钮</em>，如：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RemoteControlReceiver</span> <span class=\"keyword\">extends</span> <span class=\"title\">BroadcastReceiver</span></span>&#123;</div><div class=\"line\">&gt;   <span class=\"meta\">@override</span></div><div class=\"line\">&gt;   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceive</span><span class=\"params\">(Context context,Intent intent)</span></span>&#123;</div><div class=\"line\">&gt;     KeyEvent event = (KeyEvent)intent.getParcelableExtra(Intent,EXTRA_KEY_EVENT);</div><div class=\"line\">&gt;     <span class=\"keyword\">if</span>(KeyEvent.KEYCODE_MEDIA_PLAY==event.getKeyCode())&#123;</div><div class=\"line\">&gt;       <span class=\"comment\">//处理按钮Play的点击事件</span></div><div class=\"line\">&gt;       ...</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt;   &#125;</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><code>注意，可能有多个程序监听按钮</code>，可以通过AudioManager管理App注册监听与取消。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; AudioManager am = mContext.getSystemService(Context.AUDIO_SERVICE);</div><div class=\"line\">&gt; ...</div><div class=\"line\">&gt;   <span class=\"comment\">//开启监听</span></div><div class=\"line\">&gt; am.registerMediaButtonEventReceiver(RemoteControlReceiver);</div><div class=\"line\">&gt; ...</div><div class=\"line\">&gt;   <span class=\"comment\">//取消监听</span></div><div class=\"line\">&gt; am.unregisterMediaButtonEventReceiver(RemoteControlReceiver);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><strong>音频的控制，并不一定是Activity可见不可见来决定</strong>，正确的方法是判断App获取/失去音频流焦点的状态。</p>\n</blockquote>\n</li>\n<li><h5 id=\"管理音频焦点\"><a href=\"#管理音频焦点\" class=\"headerlink\" title=\"管理音频焦点\"></a>管理音频焦点</h5><p>Android中只有获取音频流焦点的App方能控制音频。</p>\n<ul>\n<li>注意点：1、请求焦点；2、获取焦点；3、监控焦点状态，并作相应处理。</li>\n</ul>\n<blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; requestAudioFocus();<span class=\"comment\">//请求焦点，成功则返回AUDIOFOCUS_REQUEST_GRANTED</span></div><div class=\"line\">&gt; <span class=\"comment\">//需要制定当前音频流，并明确焦点获取是临时`Transient`，还是永久`Permanent`。</span></div><div class=\"line\">&gt; AudioManager am = mContext.getSystemService(Context.AUDIO_SERVICE);</div><div class=\"line\">&gt; ...</div><div class=\"line\">&gt; <span class=\"comment\">// 请求音频焦点，指定当前音频流为music，传入请求参数。</span></div><div class=\"line\">&gt; <span class=\"keyword\">int</span> result = am.requestAudioFocus(afChangeListener,AudioManager.STREAM_MUSIC,AudioManager.AUDIOFOCUS_GAIN);</div><div class=\"line\">&gt; <span class=\"keyword\">if</span> (result == AudioManager.AUDIOFOCUS_REQUEST_GRANTED) &#123;  am.registerMediaButtonEventReceiver(RemoteControlReceiver);</div><div class=\"line\">&gt;     <span class=\"comment\">// 开始播放</span></div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt; ...</div><div class=\"line\">&gt; <span class=\"comment\">//释放焦点的方法</span></div><div class=\"line\">&gt;   am.abandonAudioFocus(afChangeListener);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>一旦结束播放，确保调用<code>abandonAudioFocus()</code>来释放焦点和监听AudioManager.OnAudioFocusChangeListener。</p>\n<ul>\n<li><strong>在使用临时焦点时候，可选择设置<code>Ducking</code>开启，则其他音频流不会停止，而只是变为背景音</strong></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">int</span> result = am.requestAudioFocus(afChangeListener,AudioManager.STERAM_MUSIC,AudioManager.AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK);<span class=\"comment\">//开启Ducking</span></div><div class=\"line\">&gt; <span class=\"keyword\">if</span>(result == AudioManager.AUDIOFOCUS_REQUEST_GRANTED)&#123;</div><div class=\"line\">&gt;   <span class=\"comment\">//paly music And other app maybe playing too。</span></div><div class=\"line\">&gt; &#125;<span class=\"comment\">//若其他app也是Ducking，则本App可以监听它的焦点状态。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><em>音频焦点状态变化的监听</em> <code>onAudioFocusChange()</code>，三种状态，永久，临时，Ducking式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; OnAudioFocusChangeListener afChangeListener = <span class=\"keyword\">new</span> OnAudioFocusChangeListener()&#123;</div><div class=\"line\">&gt;   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAudioFocusChange</span><span class=\"params\">(<span class=\"keyword\">int</span> focusChange)</span></span>&#123;</div><div class=\"line\">&gt;     <span class=\"keyword\">if</span>(focusChange == AUDIOFOCUS_LOSS_TRANSIENT)&#123;</div><div class=\"line\">&gt;       <span class=\"comment\">//暂停播放</span></div><div class=\"line\">&gt;       </div><div class=\"line\">&gt;     &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(focusChange == AudioManger.AUDIOFOCUS_GAIN)&#123;</div><div class=\"line\">&gt;       <span class=\"comment\">//重新播放</span></div><div class=\"line\">&gt;     &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(focusChange == AudioManager.AUDIOFOCUS_LOSS)&#123;</div><div class=\"line\">&gt;      am.unregisterMediaButtonEventReceiver(RemoteControlReceiver);</div><div class=\"line\">&gt;       am.abandonAudioFocus(afChangeListener);</div><div class=\"line\">&gt;       <span class=\"comment\">//停止播放</span></div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt;   &#125;</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><strong>Duck！</strong></li>\n</ul>\n<p>对音频流使用Ducking状态，会是之变为背景式音频。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; OnAudioFocusChangeListener afChangeListener = <span class=\"keyword\">new</span> OnAudioFocusChangeListener() &#123;</div><div class=\"line\">&gt;     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAudioFocusChange</span><span class=\"params\">(<span class=\"keyword\">int</span> focusChange)</span> </span>&#123;</div><div class=\"line\">&gt;         <span class=\"keyword\">if</span> (focusChange == AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK) &#123;</div><div class=\"line\">&gt;             <span class=\"comment\">//Ducking 状态，降低音量，背景音播放</span></div><div class=\"line\">&gt;         &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (focusChange == AudioManager.AUDIOFOCUS_GAIN) &#123;</div><div class=\"line\">&gt;             <span class=\"comment\">// 恢复正常音量播放</span></div><div class=\"line\">&gt;         &#125;</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt; &#125;;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><h6 id=\"兼容音频输出设备\"><a href=\"#兼容音频输出设备\" class=\"headerlink\" title=\"兼容音频输出设备\"></a>兼容音频输出设备</h6><p>检测正使用的硬件设备:<code>Audio Manager</code></p>\n<blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">if</span> (isBluetoothA2dpOn()) &#123;</div><div class=\"line\">&gt;     <span class=\"comment\">// Adjust output for Bluetooth.</span></div><div class=\"line\">&gt; &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isSpeakerphoneOn()) &#123;</div><div class=\"line\">&gt;     <span class=\"comment\">// Adjust output for Speakerphone.</span></div><div class=\"line\">&gt; &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isWiredHeadsetOn()) &#123;</div><div class=\"line\">&gt;     <span class=\"comment\">// Adjust output for headsets</span></div><div class=\"line\">&gt; &#125; <span class=\"keyword\">else</span> &#123; </div><div class=\"line\">&gt;     <span class=\"comment\">// If audio plays and noone can hear it, is it still playing?</span></div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>当音频设备变化时候，要监听改变<code>ACTION_AUDIO_BECOMING_NOISY</code>系统广播的intent。App需要有receiver</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NoisyAudioStreamReceiver</span> <span class=\"keyword\">extends</span> <span class=\"title\">BroadcastReceiver</span></span>&#123;</div><div class=\"line\">&gt;   <span class=\"meta\">@override</span></div><div class=\"line\">&gt;   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceive</span><span class=\"params\">(Context context,Intent intent)</span></span>&#123;</div><div class=\"line\">&gt;     <span class=\"keyword\">if</span>(AudioManager.ACTION_AUDIO_BECOMING_NOISY.equals(intent.getAction()))&#123;</div><div class=\"line\">&gt;      <span class=\"comment\">//接收到音频输出设备变化，暂停播放 </span></div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt;   &#125;</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt; <span class=\"keyword\">private</span> IntentFilter intentFilter = <span class=\"keyword\">new</span> IntentFilter(AudioManager.ACITON_AUDIO_BECOMING_NOISY);</div><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">startPlayback</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">&gt;     registerReceiver(myNoisyAudioStreamReceiver(), intentFilter);</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">stopPlayback</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">&gt;     unregisterReceiver(myNoisyAudioStreamReceiver);</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"2-拍照\"><a href=\"#2-拍照\" class=\"headerlink\" title=\"2.拍照\"></a>2.拍照</h3><ul>\n<li><h4 id=\"简单的拍照\"><a href=\"#简单的拍照\" class=\"headerlink\" title=\"简单的拍照\"></a>简单的拍照</h4><blockquote>\n<p>1、请求相机权限</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;<span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">...</span>&gt;</span></div><div class=\"line\">&gt;  <span class=\"comment\">&lt;!-- 在清单文件中加入该属性，向用户声明本App需要相机权限。 --&gt;</span></div><div class=\"line\">&gt;\t<span class=\"tag\">&lt;<span class=\"name\">uses-feature</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.hardware.camera\"</span></span></div><div class=\"line\">&gt;                  android:required=\"true\"/&gt;</div><div class=\"line\">&gt;  <span class=\"comment\">&lt;!-- 自动聚焦 --&gt;</span></div><div class=\"line\">&gt;   <span class=\"tag\">&lt;<span class=\"name\">uses-feature</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.hardware.camera.autofocus\"</span> /&gt;</span></div><div class=\"line\">&gt;  <span class=\"comment\">&lt;!-- 调用相机需要的权限 --&gt;</span></div><div class=\"line\">&gt;  </div><div class=\"line\">&gt;  <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.CAMERA\"</span> /&gt;</span></div><div class=\"line\">&gt;<span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>本App若非必须有相机，<code>required</code>可以设置false。代码中可以用<code>hasSystemFeature(PackageManager.FEATURE_CAMERA)</code>来检查是否有camera硬件。</p>\n<p>2、调用系统相机拍照。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;<span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> REQUEST_IMAGE_CAPTURE=<span class=\"number\">1</span>;<span class=\"comment\">//请求码</span></div><div class=\"line\">&gt;<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchTakePictureIntent</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">&gt;  <span class=\"comment\">//调用相机的intent</span></div><div class=\"line\">&gt;  Intent takePictureIntent = <span class=\"keyword\">new</span> Intent(MediaStore.ACTION_IMAGE_CAPTURE);</div><div class=\"line\">&gt;  <span class=\"comment\">//检查有没有能处理该intent的Activity，以免下面startActivity会空指针，而崩溃</span></div><div class=\"line\">&gt;  <span class=\"keyword\">if</span>(takePictureIntent.resolveActivity(getPackageManager()) !=<span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">&gt;    startActivityForResult(takePictureIntent,REQUEST_IMAGE_CAPTURE);</div><div class=\"line\">&gt;  &#125;</div><div class=\"line\">&gt;&#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>3、获取缩略图</p>\n<p>Android相机将拍摄好的照片缩小为Bitmap，返回给调用的activity，<code>key-value</code>键值对形式将数据绑定到intent返回。<code>data</code> key值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;<span class=\"meta\">@Override</span></div><div class=\"line\">&gt;<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityResult</span><span class=\"params\">(<span class=\"keyword\">int</span> requestCode, <span class=\"keyword\">int</span> resultCode, Intent data)</span> </span>&#123;</div><div class=\"line\">&gt;    <span class=\"keyword\">if</span> (requestCode == REQUEST_IMAGE_CAPTURE &amp;&amp; resultCode == RESULT_OK) &#123;</div><div class=\"line\">&gt;        Bundle extras = data.getExtras();<span class=\"comment\">//获取bundle对象</span></div><div class=\"line\">&gt;        Bitmap imageBitmap = (Bitmap) extras.get(<span class=\"string\">\"data\"</span>);<span class=\"comment\">//key值，获取缩略图</span></div><div class=\"line\">&gt;        mImageView.setImageBitmap(imageBitmap);</div><div class=\"line\">&gt;    &#125;</div><div class=\"line\">&gt;&#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>4、获取全尺寸照片</p>\n<p>Android一般会保存原始照片数据到指定文件夹下。通常为<code>DIRECTORY_PICTURES</code>对应的文件目录，需要读写SD卡的权限。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;<span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">...</span>&gt;</span></div><div class=\"line\">&gt;\t<span class=\"tag\">&lt;<span class=\"name\">uses_permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.WRITE_EXTERNAL_STORAGE\"</span>/&gt;</span></div><div class=\"line\">&gt;  \t<span class=\"comment\">&lt;!-- 一般有写入权限，就默认会有读取权限了 --&gt;</span></div><div class=\"line\">&gt;<span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><code>getExternalFilesDir()</code>私有目录，<code>getExternalStoragePublicDirectory()</code>共有目录，接收参数<code>DIRECTORY_PICTURES</code>标明是图片文件夹。</p>\n<p><strong>注意文件的保存，需要防止命名冲突，一般会加入时间戳来避免该问题。</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;String mCurrentPhotoPath;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;<span class=\"function\"><span class=\"keyword\">private</span> File <span class=\"title\">createImageFile</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">&gt;    <span class=\"comment\">// 创建图片文件</span></div><div class=\"line\">&gt;    String timeStamp = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyyMMdd_HHmmss\"</span>).format(<span class=\"keyword\">new</span> Date());</div><div class=\"line\">&gt;    String imageFileName = <span class=\"string\">\"JPEG_\"</span> + timeStamp + <span class=\"string\">\"_\"</span>;</div><div class=\"line\">&gt;    File storageDir = Environment.getExternalStoragePublicDirectory(</div><div class=\"line\">&gt;            Environment.DIRECTORY_PICTURES);</div><div class=\"line\">&gt;    File image = File.createTempFile(</div><div class=\"line\">&gt;        imageFileName,  <span class=\"comment\">/* prefix */</span></div><div class=\"line\">&gt;        <span class=\"string\">\".jpg\"</span>,         <span class=\"comment\">/* suffix */</span></div><div class=\"line\">&gt;        storageDir      <span class=\"comment\">/* directory */</span></div><div class=\"line\">&gt;    );</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\">// Save a file: path for use with ACTION_VIEW intents</span></div><div class=\"line\">&gt;    mCurrentPhotoPath = <span class=\"string\">\"file:\"</span> + image.getAbsolutePath();</div><div class=\"line\">&gt;    <span class=\"keyword\">return</span> image;</div><div class=\"line\">&gt;&#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>使用如上方法，来创建新的照片文件：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;<span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> REQUEST_TAKE_PHOTO = <span class=\"number\">1</span>;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchTakePictureIntent</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">&gt;    Intent takePictureIntent = <span class=\"keyword\">new</span> Intent(MediaStore.ACTION_IMAGE_CAPTURE);</div><div class=\"line\">&gt;    <span class=\"comment\">// 判断是否有可以处理拍照的Activity</span></div><div class=\"line\">&gt;    <span class=\"keyword\">if</span> (takePictureIntent.resolveActivity(getPackageManager()) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">&gt;        <span class=\"comment\">// 创建照片文件</span></div><div class=\"line\">&gt;        File photoFile = <span class=\"keyword\">null</span>;</div><div class=\"line\">&gt;        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">&gt;            photoFile = createImageFile();</div><div class=\"line\">&gt;        &#125; <span class=\"keyword\">catch</span> (IOException ex) &#123;</div><div class=\"line\">&gt;            <span class=\"comment\">// 创建文件异常</span></div><div class=\"line\">&gt;            ...</div><div class=\"line\">&gt;        &#125;</div><div class=\"line\">&gt;        <span class=\"comment\">// 照片创建成功的话，完成照片存储。</span></div><div class=\"line\">&gt;        <span class=\"keyword\">if</span> (photoFile != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">&gt;            takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT,</div><div class=\"line\">&gt;                    Uri.fromFile(photoFile));</div><div class=\"line\">&gt;            startActivityForResult(takePictureIntent, REQUEST_TAKE_PHOTO);</div><div class=\"line\">&gt;        &#125;</div><div class=\"line\">&gt;    &#125;</div><div class=\"line\">&gt;&#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>5、如果照片目录不是私有，那么需要通知系统，将照片显示到公开目录中,让mediaScanner可以扫描到。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">galleryAddPic</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">&gt;  <span class=\"comment\">//intent</span></div><div class=\"line\">&gt;    Intent mediaScanIntent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE);</div><div class=\"line\">&gt;    File f = <span class=\"keyword\">new</span> File(mCurrentPhotoPath);</div><div class=\"line\">&gt;    Uri contentUri = Uri.fromFile(f);</div><div class=\"line\">&gt;  <span class=\"comment\">//发送广播，</span></div><div class=\"line\">&gt;    mediaScanIntent.setData(contentUri);</div><div class=\"line\">&gt;    <span class=\"keyword\">this</span>.sendBroadcast(mediaScanIntent);</div><div class=\"line\">&gt;&#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>6、图片缩放</p>\n<p>多数情况下不需要全尺寸的清晰图片显示，也为了避免内存消耗，使用图片缩放：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setPic</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">&gt;    <span class=\"comment\">// 1、获取需要显示图片的view控件的大小。</span></div><div class=\"line\">&gt;    <span class=\"keyword\">int</span> targetW = mImageView.getWidth();</div><div class=\"line\">&gt;    <span class=\"keyword\">int</span> targetH = mImageView.getHeight();</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\">// 2、获取需要显示的图片的尺寸</span></div><div class=\"line\">&gt;    BitmapFactory.Options bmOptions = <span class=\"keyword\">new</span> BitmapFactory.Options();</div><div class=\"line\">&gt;    bmOptions.inJustDecodeBounds = <span class=\"keyword\">true</span>;</div><div class=\"line\">&gt;    BitmapFactory.decodeFile(mCurrentPhotoPath, bmOptions);</div><div class=\"line\">&gt;    <span class=\"keyword\">int</span> photoW = bmOptions.outWidth;</div><div class=\"line\">&gt;    <span class=\"keyword\">int</span> photoH = bmOptions.outHeight;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\">// 3、计算缩放比，根据宽高</span></div><div class=\"line\">&gt;    <span class=\"keyword\">int</span> scaleFactor = Math.min(photoW/targetW, photoH/targetH);</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\">// 4、缩放图片</span></div><div class=\"line\">&gt;    bmOptions.inJustDecodeBounds = <span class=\"keyword\">false</span>;<span class=\"comment\">//</span></div><div class=\"line\">&gt;    bmOptions.inSampleSize = scaleFactor;<span class=\"comment\">//缩放比</span></div><div class=\"line\">&gt;    bmOptions.inPurgeable = <span class=\"keyword\">true</span>;<span class=\"comment\">//</span></div><div class=\"line\">&gt;\t<span class=\"comment\">//完成图片缩放</span></div><div class=\"line\">&gt;    Bitmap bitmap = BitmapFactory.decodeFile(mCurrentPhotoPath, bmOptions);</div><div class=\"line\">&gt;    mImageView.setImageBitmap(bitmap);</div><div class=\"line\">&gt;&#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><h4 id=\"简单的录像\"><a href=\"#简单的录像\" class=\"headerlink\" title=\"简单的录像\"></a>简单的录像</h4><blockquote>\n<p>1、请求相机权限</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">...</span> &gt;</span></div><div class=\"line\">&gt;     <span class=\"tag\">&lt;<span class=\"name\">uses-feature</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.hardware.camera\"</span></span></div><div class=\"line\">&gt;                   android:required=\"true\" /&gt;</div><div class=\"line\">&gt;    <span class=\"tag\">&lt;<span class=\"name\">uses-feature</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.hardware.camera.autofocus\"</span> /&gt;</span></div><div class=\"line\">&gt;     ...</div><div class=\"line\">&gt; <span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>2、通过Intent来录制视频,Action是<code>MediaStore.ACTION_VIDEO_CAPTURE</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> REQUEST_VIDEO_CAPTURE = <span class=\"number\">1</span>;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchTakeVideoIntent</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">&gt;     Intent takeVideoIntent = <span class=\"keyword\">new</span> Intent(MediaStore.ACTION_VIDEO_CAPTURE);</div><div class=\"line\">&gt;   <span class=\"comment\">//判断是否有可用录像程序</span></div><div class=\"line\">&gt;     <span class=\"keyword\">if</span> (takeVideoIntent.resolveActivity(getPackageManager()) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">&gt;         startActivityForResult(takeVideoIntent, REQUEST_VIDEO_CAPTURE);</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>3、接收返回的视频数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"meta\">@Override</span></div><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityResult</span><span class=\"params\">(<span class=\"keyword\">int</span> requestCode, <span class=\"keyword\">int</span> resultCode, Intent data)</span> </span>&#123;</div><div class=\"line\">&gt;     <span class=\"keyword\">if</span> (requestCode == REQUEST_VIDEO_CAPTURE &amp;&amp; resultCode == RESULT_OK) &#123;</div><div class=\"line\">&gt;       <span class=\"comment\">//获取视频文件保存的uri</span></div><div class=\"line\">&gt;         Uri videoUri = intent.getData();</div><div class=\"line\">&gt;         mVideoView.setVideoURI(videoUri);</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><h4 id=\"控制相机硬件\"><a href=\"#控制相机硬件\" class=\"headerlink\" title=\"控制相机硬件\"></a>控制相机硬件</h4><blockquote>\n<p>1、此处提供给有特殊需要的app来调用Camera硬件，实现自定义的拍照与录像功能。</p>\n<ul>\n<li><p><code>onCreate()</code>中开启线程打开相机。</p>\n</li>\n<li><p>或者在<code>onResume()</code>中开启相机</p>\n</li>\n<li><p>要检测Camera是否可用，被占用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">safeCameraOpen</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</div><div class=\"line\">&gt;       <span class=\"keyword\">boolean</span> qOpened = <span class=\"keyword\">false</span>;</div><div class=\"line\">&gt;       <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">&gt;         <span class=\"comment\">//先释放，再打开，在此捕获异常</span></div><div class=\"line\">&gt;           releaseCameraAndPreview();</div><div class=\"line\">&gt;           mCamera = Camera.open(id);<span class=\"comment\">//相机id，默认后置摄像头。</span></div><div class=\"line\">&gt;           qOpened = (mCamera != <span class=\"keyword\">null</span>);</div><div class=\"line\">&gt;       &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">&gt;           Log.e(getString(R.string.app_name), <span class=\"string\">\"failed to open Camera\"</span>);</div><div class=\"line\">&gt;           e.printStackTrace();</div><div class=\"line\">&gt;       &#125;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;       <span class=\"keyword\">return</span> qOpened;    </div><div class=\"line\">&gt;   &#125;</div><div class=\"line\">&gt;   <span class=\"comment\">//释放相机资源</span></div><div class=\"line\">&gt;   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">releaseCameraAndPreview</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">&gt;       mPreview.setCamera(<span class=\"keyword\">null</span>);</div><div class=\"line\">&gt;       <span class=\"keyword\">if</span> (mCamera != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">&gt;           mCamera.release();</div><div class=\"line\">&gt;           mCamera = <span class=\"keyword\">null</span>;</div><div class=\"line\">&gt;       &#125;</div><div class=\"line\">&gt;   &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>2、创建相机预览界面，使用<code>SurfaceView</code>实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Preview</span> <span class=\"keyword\">extends</span> <span class=\"title\">ViewGroup</span> <span class=\"keyword\">implements</span> <span class=\"title\">SurfaceHolder</span>.<span class=\"title\">Callback</span> </span>&#123;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     SurfaceView mSurfaceView;<span class=\"comment\">//surface view</span></div><div class=\"line\">&gt;     SurfaceHolder mHolder;<span class=\"comment\">// surface holder</span></div><div class=\"line\">&gt; \t<span class=\"comment\">//构造函数，初始化数据</span></div><div class=\"line\">&gt;     Preview(Context context) &#123;</div><div class=\"line\">&gt;         <span class=\"keyword\">super</span>(context);</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;         mSurfaceView = <span class=\"keyword\">new</span> SurfaceView(context);</div><div class=\"line\">&gt;         addView(mSurfaceView);</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;         <span class=\"comment\">// 注册surfaceholder的callback，监控surfaceView的创建与销毁。</span></div><div class=\"line\">&gt;         mHolder = mSurfaceView.getHolder();</div><div class=\"line\">&gt;         mHolder.addCallback(<span class=\"keyword\">this</span>);</div><div class=\"line\">&gt;         mHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt; ...</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>==Preview类的对象，必须在开始预览之前就传递给Camera对象。==</p>\n<p>$Camera 和Preview必须依照特定顺序来创建$。首先创建Camera对象，示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setCamera</span><span class=\"params\">(Camera camera)</span> </span>&#123;</div><div class=\"line\">&gt;     <span class=\"keyword\">if</span> (mCamera == camera) &#123; <span class=\"keyword\">return</span>; &#125;</div><div class=\"line\">&gt; \t<span class=\"comment\">//停止预览，释放camera对象</span></div><div class=\"line\">&gt;     stopPreviewAndFreeCamera();</div><div class=\"line\">&gt; \t<span class=\"comment\">//重新引用camera</span></div><div class=\"line\">&gt;     mCamera = camera;</div><div class=\"line\">&gt; \t<span class=\"comment\">//对象非空时候，开启预览</span></div><div class=\"line\">&gt;     <span class=\"keyword\">if</span> (mCamera != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">&gt;         List&lt;Size&gt; localSizes = mCamera.getParameters().getSupportedPreviewSizes();</div><div class=\"line\">&gt;         mSupportedPreviewSizes = localSizes;</div><div class=\"line\">&gt;         requestLayout();</div><div class=\"line\">&gt;         <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">&gt;             mCamera.setPreviewDisplay(mHolder);</div><div class=\"line\">&gt;         &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">&gt;             e.printStackTrace();</div><div class=\"line\">&gt;         &#125;</div><div class=\"line\">&gt;         <span class=\"comment\">// 重要：开启预览，才能拍照。</span></div><div class=\"line\">&gt;         mCamera.startPreview();</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>3、修改相机设置</p>\n<p>由于是控制camera硬件，可以设置拍照方式、曝光补偿等。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">surfaceChanged</span><span class=\"params\">(SurfaceHolder holder, <span class=\"keyword\">int</span> format, <span class=\"keyword\">int</span> w, <span class=\"keyword\">int</span> h)</span> </span>&#123;</div><div class=\"line\">&gt;     <span class=\"comment\">// 设置预览大小</span></div><div class=\"line\">&gt;     Camera.Parameters parameters = mCamera.getParameters();</div><div class=\"line\">&gt;     parameters.setPreviewSize(mPreviewSize.width, mPreviewSize.height);</div><div class=\"line\">&gt;     requestLayout();</div><div class=\"line\">&gt;     mCamera.setParameters(parameters);</div><div class=\"line\">&gt; \t</div><div class=\"line\">&gt;     <span class=\"comment\">//先开启预览，才能调用拍照。</span></div><div class=\"line\">&gt;     mCamera.startPreview();</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt; <span class=\"comment\">//set CameraDisplayOrientation()设置预览方向，横竖屏。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>4、拍照</p>\n<p>预览后，才能调用拍照。<code>Camera.takePicture()</code>方法。创建<code>Camera.PictureCallback</code>和<code>Camera.ShutterCallback</code>对象，传递给<code>Camera.takePicture()</code>。</p>\n<p>若要连续拍摄，创建<code>Camera.PreviewCallback</code>实现<code>onPreviewFrame()</code>方法。如此可以拍摄选定的预览帧，或调用<code>takePicture()</code>建立延迟。</p>\n<p>5、重启Preview</p>\n<p>==拍照后，需要重启预览==</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"meta\">@Override</span></div><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">&gt;     <span class=\"keyword\">switch</span>(mPreviewState) &#123;</div><div class=\"line\">&gt;     <span class=\"keyword\">case</span> K_STATE_FROZEN:<span class=\"comment\">//预览</span></div><div class=\"line\">&gt;         mCamera.startPreview();</div><div class=\"line\">&gt;         mPreviewState = K_STATE_PREVIEW;</div><div class=\"line\">&gt;         <span class=\"keyword\">break</span>;</div><div class=\"line\">&gt;     <span class=\"keyword\">default</span>:<span class=\"comment\">//拍照</span></div><div class=\"line\">&gt;         mCamera.takePicture( <span class=\"keyword\">null</span>, rawCallback, <span class=\"keyword\">null</span>);</div><div class=\"line\">&gt;         mPreviewState = K_STATE_BUSY;</div><div class=\"line\">&gt;     &#125; <span class=\"comment\">// switch</span></div><div class=\"line\">&gt;     shutterBtnConfig();</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>6、停止预览并释放相机</p>\n<p>使用Camera后，必须释放资源，以备下次调用或者其他应用使用。一般在Surface被毁后，释放预览和相机。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">surfaceDestroyed</span><span class=\"params\">(SurfaceHolder holder)</span> </span>&#123;</div><div class=\"line\">&gt;     <span class=\"comment\">// Surface将会销毁，需在此停止预览</span></div><div class=\"line\">&gt;     <span class=\"keyword\">if</span> (mCamera != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">&gt;         <span class=\"comment\">// 停止预览</span></div><div class=\"line\">&gt;         mCamera.stopPreview();</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt; <span class=\"comment\">/**</span></div><div class=\"line\">&gt;  * 释放Camera资源</div><div class=\"line\">&gt;  */</div><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">stopPreviewAndFreeCamera</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">&gt;     <span class=\"keyword\">if</span> (mCamera != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">&gt;         <span class=\"comment\">//停止预览</span></div><div class=\"line\">&gt;         mCamera.stopPreview();</div><div class=\"line\">&gt;         <span class=\"comment\">//重要，停止使用Camera后，必须释放对象资源，在onPause()释放，onResume()重启。</span></div><div class=\"line\">&gt;         mCamera.release();</div><div class=\"line\">&gt;         mCamera = <span class=\"keyword\">null</span>;</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"3、打印\"><a href=\"#3、打印\" class=\"headerlink\" title=\"3、打印\"></a>3、打印</h3><p>Android支持创建pdf文件，打印图片，html和文字。</p>\n<ul>\n<li><h4 id=\"打印照片\"><a href=\"#打印照片\" class=\"headerlink\" title=\"打印照片\"></a>打印照片</h4><blockquote>\n<p><em>PrintHelper</em>类打印图片，AndroidSupportLibrary提供的类库。</p>\n<p>1、打印一幅图片</p>\n<p><code>setScaleMode()</code>方法，接收两个选项之一：</p>\n<ul>\n<li>SCALE_MODE_FIT,图片适应打印纸</li>\n<li>SCALE_MODE_FILL,充满整个纸张，可能会与部分图片无法显示出来。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">doPhotoPrint</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">&gt;   PrintHelper photoPrinter = <span class=\"keyword\">new</span> PrintHelper(getActivity());</div><div class=\"line\">&gt;   photoPrinter.setScaleMode(PrintHelper.SCALE_MODE_FIT);</div><div class=\"line\">&gt;   Bitmap bitmap = BitmapFactory.decodeResource(getResource(),R.drawable.iclauncher);</div><div class=\"line\">&gt;   photoPrinter.printBitmap(<span class=\"string\">\"icLaunchetr.jpg 测试打印\"</span>,bitmap);</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><h4 id=\"打印html文档\"><a href=\"#打印html文档\" class=\"headerlink\" title=\"打印html文档\"></a>打印html文档</h4><blockquote>\n<p>android提供了html文档方式，来实现更为丰富的文本打印输出。</p>\n<p>1、加载Html文档</p>\n<p>使用<code>webView</code>加载html资源，<code>webview</code>被作为activity布局的一部分，若是app没有用到该view，则需要创建该对象，来实现html文档：</p>\n<ul>\n<li>加载html文档后，创建一个<code>WebViewClient</code>对象，来启动打印任务。</li>\n<li>加载html到<code>WebView</code>对象中。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">private</span> WebView mWebView;</div><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">doWebViewPrint</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">&gt;   <span class=\"comment\">//创建webview对象，用于打印</span></div><div class=\"line\">&gt;   WebView webView = <span class=\"keyword\">new</span> WebView(getActivity());</div><div class=\"line\">&gt;   webView.setWebViewClient(<span class=\"keyword\">new</span> WebViewClient()&#123;</div><div class=\"line\">&gt;     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldOverrideUrlLoading</span><span class=\"params\">(WebView view,String url)</span></span>&#123;</div><div class=\"line\">&gt;       <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt;     <span class=\"meta\">@override</span></div><div class=\"line\">&gt;     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPageFinished</span><span class=\"params\">(WebView view ,String url)</span></span>&#123;</div><div class=\"line\">&gt;       Log.i(TAG,<span class=\"string\">\"html页面加载完毕\"</span>+url);</div><div class=\"line\">&gt;       <span class=\"comment\">//调用打印，加载完毕后才调用，否则会不完整，或者失败。</span></div><div class=\"line\">&gt;       createWebPrintJob(view);</div><div class=\"line\">&gt;       mWebView = <span class=\"keyword\">null</span>;</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt;   &#125;);</div><div class=\"line\">&gt;   <span class=\"comment\">//创建一个html文档</span></div><div class=\"line\">&gt;     String htmlDocument = <span class=\"string\">\"&lt;html&gt;&lt;body&gt;&lt;h1&gt;Test Content&lt;/h1&gt;&lt;p&gt;Testing, \"</span> +</div><div class=\"line\">&gt;             <span class=\"string\">\"testing, testing...&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;\"</span>;</div><div class=\"line\">&gt;     webView.loadDataWithBaseURL(<span class=\"keyword\">null</span>, htmlDocument, <span class=\"string\">\"text/HTML\"</span>, <span class=\"string\">\"UTF-8\"</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     <span class=\"comment\">// 保持web View的对象引用，知道适配器打印完毕。</span></div><div class=\"line\">&gt;     mWebView = webView;</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt; <span class=\"comment\">//要是html需要包含图像，放在“assets/”目录下,指定URL，</span></div><div class=\"line\">&gt; webView.loadDataWithBaseURL(<span class=\"string\">\"file:///android_asset/images/\"</span>,htmlBody,<span class=\"string\">\"text/HTML\"</span>,<span class=\"string\">\"utf-8\"</span>,<span class=\"keyword\">null</span>);</div><div class=\"line\">&gt; <span class=\"comment\">//或者加载一个网页，需要网络权限。</span></div><div class=\"line\">&gt; webView.loadUrl(<span class=\"string\">\"http://developer.android.com/about/index.html\"</span>);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>==Web View打印文档会有限制：==</p>\n<ul>\n<li>不能添加页眉、页脚、页码</li>\n<li>不能指定打印页码范围</li>\n<li>一个Web View对象，只能同时处理一个任务。</li>\n<li>不支持html的css属性。</li>\n<li>html的javaScript无法调用打印。</li>\n</ul>\n<p>2、创建打印任务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">createWebPrintJob</span><span class=\"params\">(WebView webView)</span> </span>&#123;</div><div class=\"line\">&gt;     <span class=\"comment\">// 获取Print Manager实例</span></div><div class=\"line\">&gt;     PrintManager printManager = (PrintManager) getActivity()</div><div class=\"line\">&gt;             .getSystemService(Context.PRINT_SERVICE);</div><div class=\"line\">&gt;     <span class=\"comment\">// 获取PrintAdapter实例</span></div><div class=\"line\">&gt;     PrintDocumentAdapter printAdapter = webView.createPrintDocumentAdapter();</div><div class=\"line\">&gt;     <span class=\"comment\">// 创建打印任务，传递给Printadapter，</span></div><div class=\"line\">&gt;     String jobName = getString(R.string.app_name) + <span class=\"string\">\" Document\"</span>;</div><div class=\"line\">&gt;     PrintJob printJob = printManager.print(jobName, printAdapter,</div><div class=\"line\">&gt;             <span class=\"keyword\">new</span> PrintAttributes.Builder().build());</div><div class=\"line\">&gt;     <span class=\"comment\">// 完成任务配置，加入打印列表。</span></div><div class=\"line\">&gt;     mPrintJobs.add(printJob);</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><h4 id=\"打印自定义文档\"><a href=\"#打印自定义文档\" class=\"headerlink\" title=\"打印自定义文档\"></a>打印自定义文档</h4><blockquote>\n<p>1、连接打印管理器，来创建打印任务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">doPrint</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">&gt;     <span class=\"comment\">// Get a PrintManager instance</span></div><div class=\"line\">&gt;     PrintManager printManager = (PrintManager) getActivity()</div><div class=\"line\">&gt;             .getSystemService(Context.PRINT_SERVICE);</div><div class=\"line\">&gt;     <span class=\"comment\">// Set job name, which will be displayed in the print queue</span></div><div class=\"line\">&gt;     String jobName = getActivity().getString(R.string.app_name) + <span class=\"string\">\" Document\"</span>;</div><div class=\"line\">&gt;     <span class=\"comment\">// Start a print job, passing in a PrintDocumentAdapter implementation</span></div><div class=\"line\">&gt;     <span class=\"comment\">// to handle the generation of a print document</span></div><div class=\"line\">&gt;     printManager.print(jobName, <span class=\"keyword\">new</span> MyPrintDocumentAdapter(getActivity()),</div><div class=\"line\">&gt;             <span class=\"keyword\">null</span>); <span class=\"comment\">//最后的参数是PrintAttributes，打印机属性设置。</span></div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>2、创建打印机适配器</p>\n<p><code>PrintDocumentAdapter</code>负责打印生命周期，</p>\n<ul>\n<li>onStart():开始打印，非必需实现的方法，因为总会被调用。</li>\n<li>onLayout(): 用户设置页面布局，尺寸之类的，会调用该函数。</li>\n<li>onWrite(): 将打印文件渲染成待打印状态，可以在onLayout()中多次调用该方法。</li>\n<li>onFinish(): 完成打印，非必需实现。</li>\n</ul>\n<p>调用onLayout()和onWrite()，尽量写入一个异步进程中，因为可能耗时。</p>\n<p>3、计算打印文档信息</p>\n<p>在Print Document Adapter的实现时，需要指定文档类型，计算页数，尺寸之类的信息。</p>\n<p>在onLayout()中计算这些数据，可从PrintDocumentInfo中获取。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"meta\">@Override</span></div><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayout</span><span class=\"params\">(PrintAttributes oldAttributes,</span></span></div><div class=\"line\">&gt;                      PrintAttributes newAttributes,</div><div class=\"line\">&gt;                      CancellationSignal cancellationSignal,</div><div class=\"line\">&gt;                      LayoutResultCallback callback,</div><div class=\"line\">&gt;                      Bundle metadata) &#123;</div><div class=\"line\">&gt;     <span class=\"comment\">// Create a new PdfDocument with the requested page attributes</span></div><div class=\"line\">&gt;     mPdfDocument = <span class=\"keyword\">new</span> PrintedPdfDocument(getActivity(), newAttributes);</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     <span class=\"comment\">// Respond to cancellation request</span></div><div class=\"line\">&gt;     <span class=\"keyword\">if</span> (cancellationSignal.isCancelled() ) &#123;</div><div class=\"line\">&gt;         callback.onLayoutCancelled();</div><div class=\"line\">&gt;         <span class=\"keyword\">return</span>;</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     <span class=\"comment\">// Compute the expected number of printed pages</span></div><div class=\"line\">&gt;     <span class=\"keyword\">int</span> pages = computePageCount(newAttributes);</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     <span class=\"keyword\">if</span> (pages &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">&gt;         <span class=\"comment\">// Return print information to print framework</span></div><div class=\"line\">&gt;         PrintDocumentInfo info = <span class=\"keyword\">new</span> PrintDocumentInfo</div><div class=\"line\">&gt;                 .Builder(<span class=\"string\">\"print_output.pdf\"</span>)</div><div class=\"line\">&gt;                 .setContentType(PrintDocumentInfo.CONTENT_TYPE_DOCUMENT)</div><div class=\"line\">&gt;                 .setPageCount(pages);</div><div class=\"line\">&gt;                 .build();</div><div class=\"line\">&gt;         <span class=\"comment\">// Content layout reflow is complete</span></div><div class=\"line\">&gt;         callback.onLayoutFinished(info, <span class=\"keyword\">true</span>);</div><div class=\"line\">&gt;     &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">&gt;         <span class=\"comment\">// Otherwise report an error to the print framework</span></div><div class=\"line\">&gt;         callback.onLayoutFailed(<span class=\"string\">\"Page count calculation failed.\"</span>);</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><code>onLayout()</code>方法返回结果：完成、取消、失败。必须通过调用PrintDocumentAdapter.LayoutResultCallback对象中的方法指定结果。在<code>onLayoutFinished()</code>方法中==boolean的参数==，指明是否与上次布局不同，来决定时候再次调用<code>onWrite()</code>方法。</p>\n<p><code>onLayout()</code>计算文档相关数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">computePageCount</span><span class=\"params\">(PrintAttributes printAttributes)</span> </span>&#123;</div><div class=\"line\">&gt;     <span class=\"keyword\">int</span> itemsPerPage = <span class=\"number\">4</span>; <span class=\"comment\">// default item count for portrait mode</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     MediaSize pageSize = printAttributes.getMediaSize();</div><div class=\"line\">&gt;     <span class=\"keyword\">if</span> (!pageSize.isPortrait()) &#123;</div><div class=\"line\">&gt;         <span class=\"comment\">// Six items per page in landscape orientation</span></div><div class=\"line\">&gt;         itemsPerPage = <span class=\"number\">6</span>;</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     <span class=\"comment\">// Determine number of print items</span></div><div class=\"line\">&gt;     <span class=\"keyword\">int</span> printItemCount = getPrintItemCount();</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>) Math.ceil(printItemCount / itemsPerPage);</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>4、将打印文档写入文件</p>\n<p>如下代码展示使用<code>PrintedPdfDocument</code>类创建pdf文档的基本原理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"meta\">@Override</span></div><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onWrite</span><span class=\"params\">(<span class=\"keyword\">final</span> PageRange[] pageRanges,</span></span></div><div class=\"line\">&gt;                     <span class=\"keyword\">final</span> ParcelFileDescriptor destination,</div><div class=\"line\">&gt;                     <span class=\"keyword\">final</span> CancellationSignal cancellationSignal,</div><div class=\"line\">&gt;                     <span class=\"keyword\">final</span> WriteResultCallback callback) &#123;</div><div class=\"line\">&gt;     <span class=\"comment\">// Iterate over each page of the document,</span></div><div class=\"line\">&gt;     <span class=\"comment\">// check if it's in the output range.</span></div><div class=\"line\">&gt;     <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; totalPages; i++) &#123;</div><div class=\"line\">&gt;         <span class=\"comment\">// Check to see if this page is in the output range.</span></div><div class=\"line\">&gt;         <span class=\"keyword\">if</span> (containsPage(pageRanges, i)) &#123;</div><div class=\"line\">&gt;             <span class=\"comment\">// If so, add it to writtenPagesArray. writtenPagesArray.size()</span></div><div class=\"line\">&gt;             <span class=\"comment\">// is used to compute the next output page index.</span></div><div class=\"line\">&gt;             writtenPagesArray.append(writtenPagesArray.size(), i);</div><div class=\"line\">&gt;             PdfDocument.Page page = mPdfDocument.startPage(i);</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;             <span class=\"comment\">// check for cancellation</span></div><div class=\"line\">&gt;             <span class=\"keyword\">if</span> (cancellationSignal.isCancelled()) &#123;</div><div class=\"line\">&gt;                 callback.onWriteCancelled();</div><div class=\"line\">&gt;                 mPdfDocument.close();</div><div class=\"line\">&gt;                 mPdfDocument = <span class=\"keyword\">null</span>;</div><div class=\"line\">&gt;                 <span class=\"keyword\">return</span>;</div><div class=\"line\">&gt;             &#125;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;             <span class=\"comment\">// Draw page content for printing</span></div><div class=\"line\">&gt;             drawPage(page);</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;             <span class=\"comment\">// Rendering is complete, so page can be finalized.</span></div><div class=\"line\">&gt;             mPdfDocument.finishPage(page);</div><div class=\"line\">&gt;         &#125;</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     <span class=\"comment\">// Write PDF document to file</span></div><div class=\"line\">&gt;     <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">&gt;         mPdfDocument.writeTo(<span class=\"keyword\">new</span> FileOutputStream(</div><div class=\"line\">&gt;                 destination.getFileDescriptor()));</div><div class=\"line\">&gt;     &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">&gt;         callback.onWriteFailed(e.toString());</div><div class=\"line\">&gt;         <span class=\"keyword\">return</span>;</div><div class=\"line\">&gt;     &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">&gt;         mPdfDocument.close();</div><div class=\"line\">&gt;         mPdfDocument = <span class=\"keyword\">null</span>;</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt;     PageRange[] writtenPages = computeWrittenPages();</div><div class=\"line\">&gt;     <span class=\"comment\">// Signal the print framework the document is complete</span></div><div class=\"line\">&gt;     callback.onWriteFinished(writtenPages);</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     ...</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>Pdf文档生成</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">drawPage</span><span class=\"params\">(PdfDocument.Page page)</span> </span>&#123;</div><div class=\"line\">&gt;     Canvas canvas = page.getCanvas();</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     <span class=\"comment\">// units are in points (1/72 of an inch)</span></div><div class=\"line\">&gt;     <span class=\"keyword\">int</span> titleBaseLine = <span class=\"number\">72</span>;</div><div class=\"line\">&gt;     <span class=\"keyword\">int</span> leftMargin = <span class=\"number\">54</span>;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     Paint paint = <span class=\"keyword\">new</span> Paint();</div><div class=\"line\">&gt;     paint.setColor(Color.BLACK);</div><div class=\"line\">&gt;     paint.setTextSize(<span class=\"number\">36</span>);</div><div class=\"line\">&gt;     canvas.drawText(<span class=\"string\">\"Test Title\"</span>, leftMargin, titleBaseLine, paint);</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     paint.setTextSize(<span class=\"number\">11</span>);</div><div class=\"line\">&gt;     canvas.drawText(<span class=\"string\">\"Test paragraph\"</span>, leftMargin, titleBaseLine + <span class=\"number\">25</span>, paint);</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     paint.setColor(Color.BLUE);</div><div class=\"line\">&gt;     canvas.drawRect(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">172</span>, <span class=\"number\">172</span>, paint);</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><strong>注意，canvas绘图使用point为单位</strong></p>\n</blockquote>\n</li>\n</ul>\n"},{"title":"Android分享操作","date":"2017-03-27T08:57:00.000Z","author":"冰路梦","_content":"## 第二章、Android分享操作\n\n### 1. 分享简单数据\n\n- #### 向其他app发送检单数据\n\n  >1. Intent发送数据必须有actions，其他对应action的activity响应事件。通过Intent实现分享功能，而ActionBar可使用`ShareActionProvider`来快速实现分享功能。如下是使用Intent.createChooser实现分享功能的demo：\n  >\n  >```java\n  >Intent sendIntent = new Intent();\n  >sendIntent.setAction(Intent.ACTION_SEND);\n  >sendIntent.putExtra(Intent.EXTRA_TEXT,\"This is My Text to send.\");\n  >sendIntent.setType(\"text/plain\");\n  >startActivity(Intent.createChooser(sendIntent,\"Share to My friends\");\n  >```\n  >\n  >*如上，可以显示出多个选择框，列出可响应的分享社交App*\n  >\n  >2. 分享二进制文件，需要指定特定的MIME类型，在EXTRA_STREAM里面放置数据的URI，如下分享一个图片的代码示例:\n  >\n  >   ```java\n  >   Intent shareIntent = new Intent();\n  >   shareIntent.setAction(Intent.ACTION_SEND);\n  >   shareIntent.putExtra(Intent.EXTRA_STREAM, uriToImage);//重要，指定URI\n  >   shareIntent.setType(\"image/jpeg\");//指定MIME类型\n  >   startActivity(Intent.createChooser(shareIntent,\"Share a picture\");\n  >   ```\n  >\n  >   ##### 注意：\n  >\n  >   - 可以使用`*/*`指定MIME类型，但是仅有能够处理一般数据类型的Activity才能匹配到。因为普通的Activity不能详尽所有MIME类型。\n  >   - 响应的Activity需要有访问URI的权限。两种方案，一是ContentProvider（per-URI permissions）；二是MediaStore（亦可存储非媒体文件，Android3.0以后。）\n  >\n  >3. 多块内容，Multiple。同时分享不同的内容，可使用`ACTION_SEND_MULTIPLE`及数据URIs。而MIME需根据内容类型调整，可使用\\*符号。如`image/jpeg`、`image/*`、`*/*`。如下：\n  >\n  >   ```java\n  >   ArrayList<Uri> imageUris = new ArrayList<Uri>();\n  >   imageUris.add(imageUri1); // Add your image URIs here\n  >   imageUris.add(imageUri2);\n  >   //接收Activity需要有权限哦\n  >   Intent shareIntent = new Intent();\n  >   shareIntent.setAction(Intent.ACTION_SEND_MULTIPLE);//复合类型的MIME，Action\n  >   shareIntent.putParcelableArrayListExtra(Intent.EXTRA_STREAM, imageUris);//传递数组\n  >   shareIntent.setType(\"image/*\");//复合MIME\n  >   startActivity(Intent.createChooser(shareIntent, \"Share images to..\"));\n  >   ```\n\n- #### 接收外App传的数据\n\n  > - Activity 在manifest文件 配置，通过Intent Filters来过滤需要处理的数据Action，如下Activity接收单张图片、文本、多张图片时，不同的intent-filer配置：\n  >\n  >   ```xml\n  >   <activity android:name=\".ui.MyActivity\" >\n  >     <!-- 注释，单类型图片的Action过滤，其Action名称不同-->\n  >       <intent-filter>\n  >           <action android:name=\"android.intent.action.SEND\" />\n  >           <category android:name=\"android.intent.category.DEFAULT\" />\n  >           <data android:mimeType=\"image/*\" />\n  >       </intent-filter>\n  >     <!-- 注释，文本类型的Action过滤-->\n  >       <intent-filter>\n  >           <action android:name=\"android.intent.action.SEND\" />\n  >           <category android:name=\"android.intent.category.DEFAULT\" />\n  >           <data android:mimeType=\"text/plain\" />\n  >       </intent-filter>\n  >     <!-- 注释，多种类型图片的Action过滤-->\n  >       <intent-filter>\n  >           <action android:name=\"android.intent.action.SEND_MULTIPLE\" />\n  >           <category android:name=\"android.intent.category.DEFAULT\" />\n  >           <data android:mimeType=\"image/*\" />\n  >       </intent-filter>\n  >   </activity>\n  >   ```\n  >\n  > - 处理接收数据，通过getIntent()来获取extra数据，需要知道传递来的具体类型，结构，做相应处理。有时需要访问权限。若是数据量太大，应考虑避免UI线程的阻塞。\n\n- #### ActionBar 分享功能\n\n  > Android4.0引入ActionProvider，其子类ShareActionProvider用于分享数据。ActionBar步骤：\n  >\n  > 1. 在Menu的xml中定义`android:actionProviderClass`属性。\n  >\n  >    ```xml\n  >    <menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n  >        <item android:id=\"@+id/menu_item_share\"\n  >            android:showAsAction=\"ifRoom\"\n  >            android:title=\"Share\"\n  >            android:actionProviderClass=\"android.widget.ShareActionProvider\" />\n  >      <!--如上则声明该item需要share action provider来匹配内容 -->\n  >        ...\n  >    </menu>\n  >    ```\n  >\n  > 2. 需要提供intent给ShareActionProvider，示例如下：\n  >\n  >    ```java\n  >    private ShareActionProvider mShareActionProvider;\n  >    ...\n  >    @Override\n  >    public boolean onCreateOptionsMenu(Menu menu) {\n  >        //菜单布局文件\n  >        getMenuInflater().inflate(R.menu.share_menu, menu);\n  >        //加载配有ShareActionProvider属性的item\n  >        MenuItem item = menu.findItem(R.id.menu_item_share);\n  >        // 实例化ShareActionProvider\n  >        mShareActionProvider = (ShareActionProvider) item.getActionProvider();\n  >        // 返回true表示显示菜单项\n  >        return true;\n  >    }\n  >    //回调更新intent，用于分享\n  >    private void setShareIntent(Intent shareIntent) {\n  >        if (mShareActionProvider != null) {\n  >            mShareActionProvider.setShareIntent(shareIntent);\n  >        }\n  >    }\n  >    ```\n\n### 2. 分享文件\n\n​\t分享文件最为安全的方式是使用content URI，Android中FileProvider有getUriForFile()创建文件content URI。少量数据可以用intent传递。\n\n- #### 建立文件分享\n\n  > 要安全地提供文件分享，需要配置Content URI。\n  >\n  > 1. 指定FileProvider，在manifest中定义一个provider的entry，声明Authority等。如下示例：\n  >\n  > ```xml\n  > <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n  >     package=\"com.example.myapp\">\n  >     <application\n  >         ...>\n  >       <!-- authorities、meta-data的配置 -->\n  >         <provider\n  >             android:name=\"android.support.v4.content.FileProvider\"\n  >             android:authorities=\"com.example.myapp.fileprovider\"\n  >             android:grantUriPermissions=\"true\"\n  >             android:exported=\"false\">\n  >             <meta-data\n  >                 android:name=\"android.support.FILE_PROVIDER_PATHS\"\n  >                 android:resource=\"@xml/filepaths\" />\n  >           <!-- meta-data指定文件共享目录，在res/xml下 -->\n  >         </provider>\n  >         ...\n  >     </application>\n  > </manifest>\n  > ```\n  >\n  > 2. 共享文件的目录，res/xml中配置，filepaths.xml，如下示例：\n  >\n  >    ```xml\n  >    <paths>\n  >      <!-- 每一个共享目录都是一个item，这里表示共享了files/ 目录下的子目录，files-path这个标签适用于共享应用内部储存，files/下的目录。name=“myimages” 做为content uri中的路径标记-->\n  >    \t<files-path path=\"images/\" name=\"myimages\"/>\n  >    </paths>\n  >    ```\n  >\n  >    `<paths>`有多个子标签，各自代表不同共享目录，`<files-path>`表示内部files/下目录，`<external-path>`外部存储目录，`<cache-path>`缓存目录。参考[FileProvider]()。注意*xml里写的目录，无法在代码中追加和修改*\n  >\n  >    - Content URI包含`<provider>`指定Authority（“com.example.myapp.fileprovider”）;\n  >    - 路径“myimages/”；\n  >    - 文件名称。\n  >\n  >    例如获取上述files/images/下的aa.jpg文件，File Provider提供的URI：\n  >\n  >    `content://com.example.myapp.fileprovider/myimages/aa.jpg`\n\n- #### 分享文件\n\n  > - 上面创建了共享提供者，此处需要共享请求者。\n  >\n  > ```java\n  >  File requestFile = new File(mImageFilename[position]);\n  >                 try {\n  >                     fileUri = FileProvider.getUriForFile(\n  >                             MainActivity.this,\n  >                             \"com.example.myapp.fileprovider\",\n  >                             requestFile);\n  >                 } catch (IllegalArgumentException e) {\n  >                     Log.e(\"File Selector\",\n  >                           \"The selected file can't be shared: \" +\n  >                           clickedFilename);\n  >                 }\n  > ```\n  >\n  > *需要注意的是，能获取content uri的文件，都是在manifest文件中，provider下meta-data配置了`<paths>`标签内的文件，否则会抛IllegalArgumentException*\n  >\n  > - 设置文件授权：\n  >\n  >   ```java\n  >   if(fileUri != null){\n  >     //Grant temporary read permission to the content URI，授权具有临时性，一次性。\n  >     mResultIntent.addFlags(Intent.FLAG_GRANT_URI_PERMISSION);\n  >   }\n  >   ```\n  >\n  >   **Caution:**调用setFlags()授权文件是唯一的安全方法，应避免Context.grantUriPermission(),它需要Context.revokeUriPermission()才能撤销授权。\n\n- #### 请求分享文件\n\n  > 一般文件共享分为共享者与请求者，或者服务器与客户端。服务器需要配置共享清单，客户端需要请求共享，并指定请求类型。\n  >\n  > -    发送文件请求，客户端startActivityForResult()，通过intent的Action，附带data，MIME去请求服务器的共享数据。服务器来显示对应的共享清单。\n  >\n  >      ```java\n  >      mRequestFileIntent = new Intent(Intent.ACTION_PICK);//Action\n  >      mRequestFileIntent.setType(\"image/jpg\");//MIME类型\n  >      ...\n  >      ```\n  >\n  > - 在onActivityResult()中处理服务器返回的URI，注：*刚开始只是处理URI，而无任何实际的文件操作和访问，不会影响服务器文件安全*。\n  >\n  >      ```java\n  >                   @Override\n  >            public void onActivityResult(int requestCode, int resultCode,\n  >                           Intent returnIntent) {\n  >                       // If the selection didn't work\n  >                       if (resultCode != RESULT_OK) {\n  >                           // Exit without doing anything else\n  >                           return;\n  >                       } else {\n  >                           // Get the file's content URI from the incoming Intent\n  >                           Uri returnUri = returnIntent.getData();\n  >                           /*\n  >      * Try to open the file for \"read\" access using the\n  >      * returned URI. If the file isn't found, write to the\n  >      * error log and return.\n  >      */\n  >      try {\n  >               /*\n  >                * Get the content resolver instance for this context, and use it\n  >                * to get a ParcelFileDescriptor for the file.\n  >                */\n  >               mInputPFD = getContentResolver().openFileDescriptor(returnUri, \"r\");\n  >           } catch (FileNotFoundException e) {\n  >               e.printStackTrace();\n  >               Log.e(\"MainActivity\", \"File not found.\");\n  >               return;\n  >           }\n  >           // Get a regular file descriptor for the file,客户端利用FileDescriptor对象类操作文件。\n  >           FileDescriptor fd = mInputPFD.getFileDescriptor();\n  >           ...\n  >      }\n  >      ```\n\n- #### 获取文件信息\n\n  > 上一步获取了服务器提供的content uri和file descriptor对象，但并不能操作文件，还需要指导文件信息，如大小、类型。\n  >\n  > -    获取文件MIME，通过ContentResolver.getType()获取uri对应的文件类型。\n  >\n  >      ```java\n  >      Uri returnUri = returnIntent.getData();\n  >      String mimeType = getContentResolver().getType(returnUri);\n  >      ```\n  >\n  > - 获取文件大小，[FileProvider]()的query()方法返回Cuisor对象，包含对应uri的文件名称大小信息。[DISPLAY_NAME]()，[SIZE]()。\n  >\n  >      ```java\n  >             Uri returnUri = returnIntent.getData();\n  >                Cursor returnCursor =\n  >                        getContentResolver().query(returnUri, null, null, null, null);\n  >                /*\n  >      * Get the column indexes of the data in the Cursor,\n  >      * move to the first row in the Cursor, get the data,\n  >      * and display it.\n  >      */\n  >        int nameIndex = returnCursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);\n  >        int sizeIndex = returnCursor.getColumnIndex(OpenableColumns.SIZE);\n  >        returnCursor.moveToFirst();\n  >      ```\n\n### 3. NFC分享文件\n\nAndroid Beam文件传输可在设备间传输大文件，API调用方便。\n\n- #### 发送文件\n\n  > 使用NFC发送文件，需要设备支持NFC且app生命NFC和外部存储权限。使用URI给Android Beam来传出文件。需要满足以下要求：\n  >\n  > 1. `Android版本api>=16。`\n  >\n  > 2. `传送的文件必须在外部存储上。`\n  >\n  > 3. 文件必须全局可读，可以用File.setReadable(true,false)来设置。\n  >\n  > 4. 必须提供文件的File URI。Android Beam无法处理FileProvider.getUriForFile生成的URI。\n  >\n  >    ```xml\n  >    <uses-permission android:name=\"android.permission.NFC\" />\n  >    <uses-permission android:name=\"android.permission.READ_EXTERNAL_STORANGE\" />\n  >    ```\n  >\n  >    *其中外部存储权限在4.2.2之前不是必须声明的。*\n  >\n  >    ```xml\n  >    <uses-feature android:name=\"android.hardware.nfc\"\n  >                  android:required=\"true\" />\n  >    <!-- 如此设置，声明该应用必须要硬件nfc支持才可以运行。若是required为false，则需要检测设备是否支持Android Beam-->\n  >    ```\n  >\n  > - 测试Android Beam，PackageManager.hasSystemFeature()和参数FEATURE_NFC来测是nfc。Build.VERSION.SDK_INT系统版本号。\n  >\n  >   ```java\n  >   boolean hasNFC= PackageManager.hasSystemFeature(PackageManager.FEATURE_NFC);//判断NFC可用与否。\n  >   Build.VERSION.SDK_INT<Build.VERSION_CODE.JELLY_BEAN_MR1//版本低。\n  >     //可用的话，实例化NfcAdapter\n  >     NfcAdapter adapter = NfcAdatper.getDefaultAdapter(this);\n  >   ```\n  >\n  > - 通过回调函数获取数据\n  >\n  >   ```java\n  >   private Uri[] mFileUris = new Uri[10];//提供给AndroidBeam的URIs\n  >   private class FileUriCallback implements NfcAdapter.CreateBeamUrisCallback{\n  >     public FileUriCallback(){\n  >     }\n  >     @override\n  >     public Uri[] createBeamUris(NfcEvent event){\n  >       return mFileUris;\n  >     }\n  >   }\n  >   ```\n  >\n  >   通过setBeamPushUrisCallback()将回调提供给Android Beam文件传输。\n  >\n  >   ```java\n  >   mFileUriCallback = new FileUriCallback();\n  >   mNfcAdapter.setBeamPushUrisCallback(mFileUriCallback,this);\n  >   ```\n  >\n  > - 指定要发送的文件，给文件File URI，然后加入URIs数组。记住需要有文件的读取权限。\n\n- #### 接收文件\n\n  > Android Beam文件传输时，是将文件copy到某特殊目录，然后由Media Scanner扫描文件，在MediaStore Provider中为媒体文件添加条目记录。\n  >\n  > - 响应传输来的请求，并显示数据。\n  >\n  >   > Android Beam传输数据到接收设备后，会发送Intent通知，包含ACTION_VIEW,MIME,URI。用户确认通知后，intent被发至系统，寻求其他响应。\n  >   >\n  >   > Activity在manifest配置`<intent-filter>`加入`<action android:name=\"android.intent.action.VIEW\"/>`、`<category android:name=\"android.intent.category.CATEGORY_DEFAULT\"`、`<data android:nimeType=\"mime-type\"`分别标识不同的Action，category和数据type。\n  >\n  >   **Action_view的action也不一定就是Android beam发送的。***\n  >\n  >   ```xml\n  >   <activity \n  >     android:name=\"com.example.android.nfctransfer.ViewActivity\"\n  >       android:label=\"Android Beam Viewer\">\n  >         <intent-filter>\n  >           <action android:name=\"android.intent.action.VIEW\"/>\n  >           <category android:name=\"android.intent.category.DEFAULT\"/>\n  >           ...\n  >           </intent-filter>\n  >     </activity>\n  >   ```\n  >\n  > - 读取文件需要权限\n  >\n  >   `<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"/>`\n  >\n  >   上面所说，ACTION_VIEW不一定就是AndroidBeam发送的intent，所以需要检查Scheme和Authority。调用Uri.getScheme。\n  >\n  >   ```java\n  >   mIntent = getIntent();\n  >   //判断Action，机器Scheme和Authority\n  >   Uri beamUri = mIntent.getData();\n  >   beamUri.getScheme();//判断是否是“file”，或者“content”\n  >   ```\n  >\n  > - File URI中获取目录\n  >\n  >   ```java\n  >   public String handleFileUri(Uri beamUri) {\n  >           // Get the path part of the URI\n  >           String fileName = beamUri.getPath();\n  >           // Create a File object for this filename\n  >           File copiedFile = new File(fileName);\n  >           // Get a string containing the file's parent directory\n  >           return copiedFile.getParent();\n  >       }\n  >   ```\n  >\n  > - Content URI中获取目录，MediaS tore会含有文件的uri信息。Uri.getAuthority()获取authority，返回值MediaStore.AUTHORITY或者其他。\n  >\n  >   为其他类型时候，不一定可以获取目录；\n\n\n","source":"_posts/第二篇、Android分享操作.md","raw":"---\ntitle: \"Android分享操作\"\ndate: 2017-03-27 16:57\nauthor: 冰路梦\ntag:\n    - Android\ncategories:\n    - Android\n---\n## 第二章、Android分享操作\n\n### 1. 分享简单数据\n\n- #### 向其他app发送检单数据\n\n  >1. Intent发送数据必须有actions，其他对应action的activity响应事件。通过Intent实现分享功能，而ActionBar可使用`ShareActionProvider`来快速实现分享功能。如下是使用Intent.createChooser实现分享功能的demo：\n  >\n  >```java\n  >Intent sendIntent = new Intent();\n  >sendIntent.setAction(Intent.ACTION_SEND);\n  >sendIntent.putExtra(Intent.EXTRA_TEXT,\"This is My Text to send.\");\n  >sendIntent.setType(\"text/plain\");\n  >startActivity(Intent.createChooser(sendIntent,\"Share to My friends\");\n  >```\n  >\n  >*如上，可以显示出多个选择框，列出可响应的分享社交App*\n  >\n  >2. 分享二进制文件，需要指定特定的MIME类型，在EXTRA_STREAM里面放置数据的URI，如下分享一个图片的代码示例:\n  >\n  >   ```java\n  >   Intent shareIntent = new Intent();\n  >   shareIntent.setAction(Intent.ACTION_SEND);\n  >   shareIntent.putExtra(Intent.EXTRA_STREAM, uriToImage);//重要，指定URI\n  >   shareIntent.setType(\"image/jpeg\");//指定MIME类型\n  >   startActivity(Intent.createChooser(shareIntent,\"Share a picture\");\n  >   ```\n  >\n  >   ##### 注意：\n  >\n  >   - 可以使用`*/*`指定MIME类型，但是仅有能够处理一般数据类型的Activity才能匹配到。因为普通的Activity不能详尽所有MIME类型。\n  >   - 响应的Activity需要有访问URI的权限。两种方案，一是ContentProvider（per-URI permissions）；二是MediaStore（亦可存储非媒体文件，Android3.0以后。）\n  >\n  >3. 多块内容，Multiple。同时分享不同的内容，可使用`ACTION_SEND_MULTIPLE`及数据URIs。而MIME需根据内容类型调整，可使用\\*符号。如`image/jpeg`、`image/*`、`*/*`。如下：\n  >\n  >   ```java\n  >   ArrayList<Uri> imageUris = new ArrayList<Uri>();\n  >   imageUris.add(imageUri1); // Add your image URIs here\n  >   imageUris.add(imageUri2);\n  >   //接收Activity需要有权限哦\n  >   Intent shareIntent = new Intent();\n  >   shareIntent.setAction(Intent.ACTION_SEND_MULTIPLE);//复合类型的MIME，Action\n  >   shareIntent.putParcelableArrayListExtra(Intent.EXTRA_STREAM, imageUris);//传递数组\n  >   shareIntent.setType(\"image/*\");//复合MIME\n  >   startActivity(Intent.createChooser(shareIntent, \"Share images to..\"));\n  >   ```\n\n- #### 接收外App传的数据\n\n  > - Activity 在manifest文件 配置，通过Intent Filters来过滤需要处理的数据Action，如下Activity接收单张图片、文本、多张图片时，不同的intent-filer配置：\n  >\n  >   ```xml\n  >   <activity android:name=\".ui.MyActivity\" >\n  >     <!-- 注释，单类型图片的Action过滤，其Action名称不同-->\n  >       <intent-filter>\n  >           <action android:name=\"android.intent.action.SEND\" />\n  >           <category android:name=\"android.intent.category.DEFAULT\" />\n  >           <data android:mimeType=\"image/*\" />\n  >       </intent-filter>\n  >     <!-- 注释，文本类型的Action过滤-->\n  >       <intent-filter>\n  >           <action android:name=\"android.intent.action.SEND\" />\n  >           <category android:name=\"android.intent.category.DEFAULT\" />\n  >           <data android:mimeType=\"text/plain\" />\n  >       </intent-filter>\n  >     <!-- 注释，多种类型图片的Action过滤-->\n  >       <intent-filter>\n  >           <action android:name=\"android.intent.action.SEND_MULTIPLE\" />\n  >           <category android:name=\"android.intent.category.DEFAULT\" />\n  >           <data android:mimeType=\"image/*\" />\n  >       </intent-filter>\n  >   </activity>\n  >   ```\n  >\n  > - 处理接收数据，通过getIntent()来获取extra数据，需要知道传递来的具体类型，结构，做相应处理。有时需要访问权限。若是数据量太大，应考虑避免UI线程的阻塞。\n\n- #### ActionBar 分享功能\n\n  > Android4.0引入ActionProvider，其子类ShareActionProvider用于分享数据。ActionBar步骤：\n  >\n  > 1. 在Menu的xml中定义`android:actionProviderClass`属性。\n  >\n  >    ```xml\n  >    <menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n  >        <item android:id=\"@+id/menu_item_share\"\n  >            android:showAsAction=\"ifRoom\"\n  >            android:title=\"Share\"\n  >            android:actionProviderClass=\"android.widget.ShareActionProvider\" />\n  >      <!--如上则声明该item需要share action provider来匹配内容 -->\n  >        ...\n  >    </menu>\n  >    ```\n  >\n  > 2. 需要提供intent给ShareActionProvider，示例如下：\n  >\n  >    ```java\n  >    private ShareActionProvider mShareActionProvider;\n  >    ...\n  >    @Override\n  >    public boolean onCreateOptionsMenu(Menu menu) {\n  >        //菜单布局文件\n  >        getMenuInflater().inflate(R.menu.share_menu, menu);\n  >        //加载配有ShareActionProvider属性的item\n  >        MenuItem item = menu.findItem(R.id.menu_item_share);\n  >        // 实例化ShareActionProvider\n  >        mShareActionProvider = (ShareActionProvider) item.getActionProvider();\n  >        // 返回true表示显示菜单项\n  >        return true;\n  >    }\n  >    //回调更新intent，用于分享\n  >    private void setShareIntent(Intent shareIntent) {\n  >        if (mShareActionProvider != null) {\n  >            mShareActionProvider.setShareIntent(shareIntent);\n  >        }\n  >    }\n  >    ```\n\n### 2. 分享文件\n\n​\t分享文件最为安全的方式是使用content URI，Android中FileProvider有getUriForFile()创建文件content URI。少量数据可以用intent传递。\n\n- #### 建立文件分享\n\n  > 要安全地提供文件分享，需要配置Content URI。\n  >\n  > 1. 指定FileProvider，在manifest中定义一个provider的entry，声明Authority等。如下示例：\n  >\n  > ```xml\n  > <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n  >     package=\"com.example.myapp\">\n  >     <application\n  >         ...>\n  >       <!-- authorities、meta-data的配置 -->\n  >         <provider\n  >             android:name=\"android.support.v4.content.FileProvider\"\n  >             android:authorities=\"com.example.myapp.fileprovider\"\n  >             android:grantUriPermissions=\"true\"\n  >             android:exported=\"false\">\n  >             <meta-data\n  >                 android:name=\"android.support.FILE_PROVIDER_PATHS\"\n  >                 android:resource=\"@xml/filepaths\" />\n  >           <!-- meta-data指定文件共享目录，在res/xml下 -->\n  >         </provider>\n  >         ...\n  >     </application>\n  > </manifest>\n  > ```\n  >\n  > 2. 共享文件的目录，res/xml中配置，filepaths.xml，如下示例：\n  >\n  >    ```xml\n  >    <paths>\n  >      <!-- 每一个共享目录都是一个item，这里表示共享了files/ 目录下的子目录，files-path这个标签适用于共享应用内部储存，files/下的目录。name=“myimages” 做为content uri中的路径标记-->\n  >    \t<files-path path=\"images/\" name=\"myimages\"/>\n  >    </paths>\n  >    ```\n  >\n  >    `<paths>`有多个子标签，各自代表不同共享目录，`<files-path>`表示内部files/下目录，`<external-path>`外部存储目录，`<cache-path>`缓存目录。参考[FileProvider]()。注意*xml里写的目录，无法在代码中追加和修改*\n  >\n  >    - Content URI包含`<provider>`指定Authority（“com.example.myapp.fileprovider”）;\n  >    - 路径“myimages/”；\n  >    - 文件名称。\n  >\n  >    例如获取上述files/images/下的aa.jpg文件，File Provider提供的URI：\n  >\n  >    `content://com.example.myapp.fileprovider/myimages/aa.jpg`\n\n- #### 分享文件\n\n  > - 上面创建了共享提供者，此处需要共享请求者。\n  >\n  > ```java\n  >  File requestFile = new File(mImageFilename[position]);\n  >                 try {\n  >                     fileUri = FileProvider.getUriForFile(\n  >                             MainActivity.this,\n  >                             \"com.example.myapp.fileprovider\",\n  >                             requestFile);\n  >                 } catch (IllegalArgumentException e) {\n  >                     Log.e(\"File Selector\",\n  >                           \"The selected file can't be shared: \" +\n  >                           clickedFilename);\n  >                 }\n  > ```\n  >\n  > *需要注意的是，能获取content uri的文件，都是在manifest文件中，provider下meta-data配置了`<paths>`标签内的文件，否则会抛IllegalArgumentException*\n  >\n  > - 设置文件授权：\n  >\n  >   ```java\n  >   if(fileUri != null){\n  >     //Grant temporary read permission to the content URI，授权具有临时性，一次性。\n  >     mResultIntent.addFlags(Intent.FLAG_GRANT_URI_PERMISSION);\n  >   }\n  >   ```\n  >\n  >   **Caution:**调用setFlags()授权文件是唯一的安全方法，应避免Context.grantUriPermission(),它需要Context.revokeUriPermission()才能撤销授权。\n\n- #### 请求分享文件\n\n  > 一般文件共享分为共享者与请求者，或者服务器与客户端。服务器需要配置共享清单，客户端需要请求共享，并指定请求类型。\n  >\n  > -    发送文件请求，客户端startActivityForResult()，通过intent的Action，附带data，MIME去请求服务器的共享数据。服务器来显示对应的共享清单。\n  >\n  >      ```java\n  >      mRequestFileIntent = new Intent(Intent.ACTION_PICK);//Action\n  >      mRequestFileIntent.setType(\"image/jpg\");//MIME类型\n  >      ...\n  >      ```\n  >\n  > - 在onActivityResult()中处理服务器返回的URI，注：*刚开始只是处理URI，而无任何实际的文件操作和访问，不会影响服务器文件安全*。\n  >\n  >      ```java\n  >                   @Override\n  >            public void onActivityResult(int requestCode, int resultCode,\n  >                           Intent returnIntent) {\n  >                       // If the selection didn't work\n  >                       if (resultCode != RESULT_OK) {\n  >                           // Exit without doing anything else\n  >                           return;\n  >                       } else {\n  >                           // Get the file's content URI from the incoming Intent\n  >                           Uri returnUri = returnIntent.getData();\n  >                           /*\n  >      * Try to open the file for \"read\" access using the\n  >      * returned URI. If the file isn't found, write to the\n  >      * error log and return.\n  >      */\n  >      try {\n  >               /*\n  >                * Get the content resolver instance for this context, and use it\n  >                * to get a ParcelFileDescriptor for the file.\n  >                */\n  >               mInputPFD = getContentResolver().openFileDescriptor(returnUri, \"r\");\n  >           } catch (FileNotFoundException e) {\n  >               e.printStackTrace();\n  >               Log.e(\"MainActivity\", \"File not found.\");\n  >               return;\n  >           }\n  >           // Get a regular file descriptor for the file,客户端利用FileDescriptor对象类操作文件。\n  >           FileDescriptor fd = mInputPFD.getFileDescriptor();\n  >           ...\n  >      }\n  >      ```\n\n- #### 获取文件信息\n\n  > 上一步获取了服务器提供的content uri和file descriptor对象，但并不能操作文件，还需要指导文件信息，如大小、类型。\n  >\n  > -    获取文件MIME，通过ContentResolver.getType()获取uri对应的文件类型。\n  >\n  >      ```java\n  >      Uri returnUri = returnIntent.getData();\n  >      String mimeType = getContentResolver().getType(returnUri);\n  >      ```\n  >\n  > - 获取文件大小，[FileProvider]()的query()方法返回Cuisor对象，包含对应uri的文件名称大小信息。[DISPLAY_NAME]()，[SIZE]()。\n  >\n  >      ```java\n  >             Uri returnUri = returnIntent.getData();\n  >                Cursor returnCursor =\n  >                        getContentResolver().query(returnUri, null, null, null, null);\n  >                /*\n  >      * Get the column indexes of the data in the Cursor,\n  >      * move to the first row in the Cursor, get the data,\n  >      * and display it.\n  >      */\n  >        int nameIndex = returnCursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);\n  >        int sizeIndex = returnCursor.getColumnIndex(OpenableColumns.SIZE);\n  >        returnCursor.moveToFirst();\n  >      ```\n\n### 3. NFC分享文件\n\nAndroid Beam文件传输可在设备间传输大文件，API调用方便。\n\n- #### 发送文件\n\n  > 使用NFC发送文件，需要设备支持NFC且app生命NFC和外部存储权限。使用URI给Android Beam来传出文件。需要满足以下要求：\n  >\n  > 1. `Android版本api>=16。`\n  >\n  > 2. `传送的文件必须在外部存储上。`\n  >\n  > 3. 文件必须全局可读，可以用File.setReadable(true,false)来设置。\n  >\n  > 4. 必须提供文件的File URI。Android Beam无法处理FileProvider.getUriForFile生成的URI。\n  >\n  >    ```xml\n  >    <uses-permission android:name=\"android.permission.NFC\" />\n  >    <uses-permission android:name=\"android.permission.READ_EXTERNAL_STORANGE\" />\n  >    ```\n  >\n  >    *其中外部存储权限在4.2.2之前不是必须声明的。*\n  >\n  >    ```xml\n  >    <uses-feature android:name=\"android.hardware.nfc\"\n  >                  android:required=\"true\" />\n  >    <!-- 如此设置，声明该应用必须要硬件nfc支持才可以运行。若是required为false，则需要检测设备是否支持Android Beam-->\n  >    ```\n  >\n  > - 测试Android Beam，PackageManager.hasSystemFeature()和参数FEATURE_NFC来测是nfc。Build.VERSION.SDK_INT系统版本号。\n  >\n  >   ```java\n  >   boolean hasNFC= PackageManager.hasSystemFeature(PackageManager.FEATURE_NFC);//判断NFC可用与否。\n  >   Build.VERSION.SDK_INT<Build.VERSION_CODE.JELLY_BEAN_MR1//版本低。\n  >     //可用的话，实例化NfcAdapter\n  >     NfcAdapter adapter = NfcAdatper.getDefaultAdapter(this);\n  >   ```\n  >\n  > - 通过回调函数获取数据\n  >\n  >   ```java\n  >   private Uri[] mFileUris = new Uri[10];//提供给AndroidBeam的URIs\n  >   private class FileUriCallback implements NfcAdapter.CreateBeamUrisCallback{\n  >     public FileUriCallback(){\n  >     }\n  >     @override\n  >     public Uri[] createBeamUris(NfcEvent event){\n  >       return mFileUris;\n  >     }\n  >   }\n  >   ```\n  >\n  >   通过setBeamPushUrisCallback()将回调提供给Android Beam文件传输。\n  >\n  >   ```java\n  >   mFileUriCallback = new FileUriCallback();\n  >   mNfcAdapter.setBeamPushUrisCallback(mFileUriCallback,this);\n  >   ```\n  >\n  > - 指定要发送的文件，给文件File URI，然后加入URIs数组。记住需要有文件的读取权限。\n\n- #### 接收文件\n\n  > Android Beam文件传输时，是将文件copy到某特殊目录，然后由Media Scanner扫描文件，在MediaStore Provider中为媒体文件添加条目记录。\n  >\n  > - 响应传输来的请求，并显示数据。\n  >\n  >   > Android Beam传输数据到接收设备后，会发送Intent通知，包含ACTION_VIEW,MIME,URI。用户确认通知后，intent被发至系统，寻求其他响应。\n  >   >\n  >   > Activity在manifest配置`<intent-filter>`加入`<action android:name=\"android.intent.action.VIEW\"/>`、`<category android:name=\"android.intent.category.CATEGORY_DEFAULT\"`、`<data android:nimeType=\"mime-type\"`分别标识不同的Action，category和数据type。\n  >\n  >   **Action_view的action也不一定就是Android beam发送的。***\n  >\n  >   ```xml\n  >   <activity \n  >     android:name=\"com.example.android.nfctransfer.ViewActivity\"\n  >       android:label=\"Android Beam Viewer\">\n  >         <intent-filter>\n  >           <action android:name=\"android.intent.action.VIEW\"/>\n  >           <category android:name=\"android.intent.category.DEFAULT\"/>\n  >           ...\n  >           </intent-filter>\n  >     </activity>\n  >   ```\n  >\n  > - 读取文件需要权限\n  >\n  >   `<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"/>`\n  >\n  >   上面所说，ACTION_VIEW不一定就是AndroidBeam发送的intent，所以需要检查Scheme和Authority。调用Uri.getScheme。\n  >\n  >   ```java\n  >   mIntent = getIntent();\n  >   //判断Action，机器Scheme和Authority\n  >   Uri beamUri = mIntent.getData();\n  >   beamUri.getScheme();//判断是否是“file”，或者“content”\n  >   ```\n  >\n  > - File URI中获取目录\n  >\n  >   ```java\n  >   public String handleFileUri(Uri beamUri) {\n  >           // Get the path part of the URI\n  >           String fileName = beamUri.getPath();\n  >           // Create a File object for this filename\n  >           File copiedFile = new File(fileName);\n  >           // Get a string containing the file's parent directory\n  >           return copiedFile.getParent();\n  >       }\n  >   ```\n  >\n  > - Content URI中获取目录，MediaS tore会含有文件的uri信息。Uri.getAuthority()获取authority，返回值MediaStore.AUTHORITY或者其他。\n  >\n  >   为其他类型时候，不一定可以获取目录；\n\n\n","slug":"第二篇、Android分享操作","published":1,"updated":"2017-03-28T09:42:15.071Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0xj1nfr0014scow34io01au","content":"<h2 id=\"第二章、Android分享操作\"><a href=\"#第二章、Android分享操作\" class=\"headerlink\" title=\"第二章、Android分享操作\"></a>第二章、Android分享操作</h2><h3 id=\"1-分享简单数据\"><a href=\"#1-分享简单数据\" class=\"headerlink\" title=\"1. 分享简单数据\"></a>1. 分享简单数据</h3><ul>\n<li><h4 id=\"向其他app发送检单数据\"><a href=\"#向其他app发送检单数据\" class=\"headerlink\" title=\"向其他app发送检单数据\"></a>向其他app发送检单数据</h4><blockquote>\n<ol>\n<li>Intent发送数据必须有actions，其他对应action的activity响应事件。通过Intent实现分享功能，而ActionBar可使用<code>ShareActionProvider</code>来快速实现分享功能。如下是使用Intent.createChooser实现分享功能的demo：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;Intent sendIntent = <span class=\"keyword\">new</span> Intent();</div><div class=\"line\">&gt;sendIntent.setAction(Intent.ACTION_SEND);</div><div class=\"line\">&gt;sendIntent.putExtra(Intent.EXTRA_TEXT,<span class=\"string\">\"This is My Text to send.\"</span>);</div><div class=\"line\">&gt;sendIntent.setType(<span class=\"string\">\"text/plain\"</span>);</div><div class=\"line\">&gt;startActivity(Intent.createChooser(sendIntent,<span class=\"string\">\"Share to My friends\"</span>);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><em>如上，可以显示出多个选择框，列出可响应的分享社交App</em></p>\n<ol>\n<li><p>分享二进制文件，需要指定特定的MIME类型，在EXTRA_STREAM里面放置数据的URI，如下分享一个图片的代码示例:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   Intent shareIntent = <span class=\"keyword\">new</span> Intent();</div><div class=\"line\">&gt;   shareIntent.setAction(Intent.ACTION_SEND);</div><div class=\"line\">&gt;   shareIntent.putExtra(Intent.EXTRA_STREAM, uriToImage);<span class=\"comment\">//重要，指定URI</span></div><div class=\"line\">&gt;   shareIntent.setType(<span class=\"string\">\"image/jpeg\"</span>);<span class=\"comment\">//指定MIME类型</span></div><div class=\"line\">&gt;   startActivity(Intent.createChooser(shareIntent,<span class=\"string\">\"Share a picture\"</span>);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<h5 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a>注意：</h5><ul>\n<li>可以使用<code>*/*</code>指定MIME类型，但是仅有能够处理一般数据类型的Activity才能匹配到。因为普通的Activity不能详尽所有MIME类型。</li>\n<li>响应的Activity需要有访问URI的权限。两种方案，一是ContentProvider（per-URI permissions）；二是MediaStore（亦可存储非媒体文件，Android3.0以后。）</li>\n</ul>\n<ol>\n<li><p>多块内容，Multiple。同时分享不同的内容，可使用<code>ACTION_SEND_MULTIPLE</code>及数据URIs。而MIME需根据内容类型调整，可使用*符号。如<code>image/jpeg</code>、<code>image/*</code>、<code>*/*</code>。如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   ArrayList&lt;Uri&gt; imageUris = <span class=\"keyword\">new</span> ArrayList&lt;Uri&gt;();</div><div class=\"line\">&gt;   imageUris.add(imageUri1); <span class=\"comment\">// Add your image URIs here</span></div><div class=\"line\">&gt;   imageUris.add(imageUri2);</div><div class=\"line\">&gt;   <span class=\"comment\">//接收Activity需要有权限哦</span></div><div class=\"line\">&gt;   Intent shareIntent = <span class=\"keyword\">new</span> Intent();</div><div class=\"line\">&gt;   shareIntent.setAction(Intent.ACTION_SEND_MULTIPLE);<span class=\"comment\">//复合类型的MIME，Action</span></div><div class=\"line\">&gt;   shareIntent.putParcelableArrayListExtra(Intent.EXTRA_STREAM, imageUris);<span class=\"comment\">//传递数组</span></div><div class=\"line\">&gt;   shareIntent.setType(<span class=\"string\">\"image/*\"</span>);<span class=\"comment\">//复合MIME</span></div><div class=\"line\">&gt;   startActivity(Intent.createChooser(shareIntent, <span class=\"string\">\"Share images to..\"</span>));</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n</li>\n<li><h4 id=\"接收外App传的数据\"><a href=\"#接收外App传的数据\" class=\"headerlink\" title=\"接收外App传的数据\"></a>接收外App传的数据</h4><blockquote>\n<ul>\n<li><p>Activity 在manifest文件 配置，通过Intent Filters来过滤需要处理的数据Action，如下Activity接收单张图片、文本、多张图片时，不同的intent-filer配置：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"tag\">&lt;<span class=\"name\">activity</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\".ui.MyActivity\"</span> &gt;</span></div><div class=\"line\">&gt;     <span class=\"comment\">&lt;!-- 注释，单类型图片的Action过滤，其Action名称不同--&gt;</span></div><div class=\"line\">&gt;       <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">&gt;           <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.SEND\"</span> /&gt;</span></div><div class=\"line\">&gt;           <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.DEFAULT\"</span> /&gt;</span></div><div class=\"line\">&gt;           <span class=\"tag\">&lt;<span class=\"name\">data</span> <span class=\"attr\">android:mimeType</span>=<span class=\"string\">\"image/*\"</span> /&gt;</span></div><div class=\"line\">&gt;       <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">&gt;     <span class=\"comment\">&lt;!-- 注释，文本类型的Action过滤--&gt;</span></div><div class=\"line\">&gt;       <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">&gt;           <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.SEND\"</span> /&gt;</span></div><div class=\"line\">&gt;           <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.DEFAULT\"</span> /&gt;</span></div><div class=\"line\">&gt;           <span class=\"tag\">&lt;<span class=\"name\">data</span> <span class=\"attr\">android:mimeType</span>=<span class=\"string\">\"text/plain\"</span> /&gt;</span></div><div class=\"line\">&gt;       <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">&gt;     <span class=\"comment\">&lt;!-- 注释，多种类型图片的Action过滤--&gt;</span></div><div class=\"line\">&gt;       <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">&gt;           <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.SEND_MULTIPLE\"</span> /&gt;</span></div><div class=\"line\">&gt;           <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.DEFAULT\"</span> /&gt;</span></div><div class=\"line\">&gt;           <span class=\"tag\">&lt;<span class=\"name\">data</span> <span class=\"attr\">android:mimeType</span>=<span class=\"string\">\"image/*\"</span> /&gt;</span></div><div class=\"line\">&gt;       <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">&gt;   <span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li>处理接收数据，通过getIntent()来获取extra数据，需要知道传递来的具体类型，结构，做相应处理。有时需要访问权限。若是数据量太大，应考虑避免UI线程的阻塞。</li>\n</ul>\n</blockquote>\n</li>\n<li><h4 id=\"ActionBar-分享功能\"><a href=\"#ActionBar-分享功能\" class=\"headerlink\" title=\"ActionBar 分享功能\"></a>ActionBar 分享功能</h4><blockquote>\n<p>Android4.0引入ActionProvider，其子类ShareActionProvider用于分享数据。ActionBar步骤：</p>\n<ol>\n<li><p>在Menu的xml中定义<code>android:actionProviderClass</code>属性。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    <span class=\"tag\">&lt;<span class=\"name\">menu</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></div><div class=\"line\">&gt;        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/menu_item_share\"</span></span></div><div class=\"line\">&gt;            android:showAsAction=\"ifRoom\"</div><div class=\"line\">&gt;            android:title=\"Share\"</div><div class=\"line\">&gt;            android:actionProviderClass=\"android.widget.ShareActionProvider\" /&gt;</div><div class=\"line\">&gt;      <span class=\"comment\">&lt;!--如上则声明该item需要share action provider来匹配内容 --&gt;</span></div><div class=\"line\">&gt;        ...</div><div class=\"line\">&gt;    <span class=\"tag\">&lt;/<span class=\"name\">menu</span>&gt;</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p>需要提供intent给ShareActionProvider，示例如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    <span class=\"keyword\">private</span> ShareActionProvider mShareActionProvider;</div><div class=\"line\">&gt;    ...</div><div class=\"line\">&gt;    <span class=\"meta\">@Override</span></div><div class=\"line\">&gt;    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onCreateOptionsMenu</span><span class=\"params\">(Menu menu)</span> </span>&#123;</div><div class=\"line\">&gt;        <span class=\"comment\">//菜单布局文件</span></div><div class=\"line\">&gt;        getMenuInflater().inflate(R.menu.share_menu, menu);</div><div class=\"line\">&gt;        <span class=\"comment\">//加载配有ShareActionProvider属性的item</span></div><div class=\"line\">&gt;        MenuItem item = menu.findItem(R.id.menu_item_share);</div><div class=\"line\">&gt;        <span class=\"comment\">// 实例化ShareActionProvider</span></div><div class=\"line\">&gt;        mShareActionProvider = (ShareActionProvider) item.getActionProvider();</div><div class=\"line\">&gt;        <span class=\"comment\">// 返回true表示显示菜单项</span></div><div class=\"line\">&gt;        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">&gt;    &#125;</div><div class=\"line\">&gt;    <span class=\"comment\">//回调更新intent，用于分享</span></div><div class=\"line\">&gt;    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setShareIntent</span><span class=\"params\">(Intent shareIntent)</span> </span>&#123;</div><div class=\"line\">&gt;        <span class=\"keyword\">if</span> (mShareActionProvider != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">&gt;            mShareActionProvider.setShareIntent(shareIntent);</div><div class=\"line\">&gt;        &#125;</div><div class=\"line\">&gt;    &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"2-分享文件\"><a href=\"#2-分享文件\" class=\"headerlink\" title=\"2. 分享文件\"></a>2. 分享文件</h3><p>​    分享文件最为安全的方式是使用content URI，Android中FileProvider有getUriForFile()创建文件content URI。少量数据可以用intent传递。</p>\n<ul>\n<li><h4 id=\"建立文件分享\"><a href=\"#建立文件分享\" class=\"headerlink\" title=\"建立文件分享\"></a>建立文件分享</h4><blockquote>\n<p>要安全地提供文件分享，需要配置Content URI。</p>\n<ol>\n<li>指定FileProvider，在manifest中定义一个provider的entry，声明Authority等。如下示例：</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">&gt;     package=\"com.example.myapp\"&gt;</div><div class=\"line\">&gt;     <span class=\"tag\">&lt;<span class=\"name\">application</span></span></div><div class=\"line\">&gt;         ...&gt;</div><div class=\"line\">&gt;       <span class=\"comment\">&lt;!-- authorities、meta-data的配置 --&gt;</span></div><div class=\"line\">&gt;         <span class=\"tag\">&lt;<span class=\"name\">provider</span></span></div><div class=\"line\">&gt;             android:name=\"android.support.v4.content.FileProvider\"</div><div class=\"line\">&gt;             android:authorities=\"com.example.myapp.fileprovider\"</div><div class=\"line\">&gt;             android:grantUriPermissions=\"true\"</div><div class=\"line\">&gt;             android:exported=\"false\"&gt;</div><div class=\"line\">&gt;             <span class=\"tag\">&lt;<span class=\"name\">meta-data</span></span></div><div class=\"line\">&gt;                 android:name=\"android.support.FILE_PROVIDER_PATHS\"</div><div class=\"line\">&gt;                 android:resource=\"@xml/filepaths\" /&gt;</div><div class=\"line\">&gt;           <span class=\"comment\">&lt;!-- meta-data指定文件共享目录，在res/xml下 --&gt;</span></div><div class=\"line\">&gt;         <span class=\"tag\">&lt;/<span class=\"name\">provider</span>&gt;</span></div><div class=\"line\">&gt;         ...</div><div class=\"line\">&gt;     <span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></div><div class=\"line\">&gt; <span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p>共享文件的目录，res/xml中配置，filepaths.xml，如下示例：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    <span class=\"tag\">&lt;<span class=\"name\">paths</span>&gt;</span></div><div class=\"line\">&gt;      <span class=\"comment\">&lt;!-- 每一个共享目录都是一个item，这里表示共享了files/ 目录下的子目录，files-path这个标签适用于共享应用内部储存，files/下的目录。name=“myimages” 做为content uri中的路径标记--&gt;</span></div><div class=\"line\">&gt;    \t<span class=\"tag\">&lt;<span class=\"name\">files-path</span> <span class=\"attr\">path</span>=<span class=\"string\">\"images/\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myimages\"</span>/&gt;</span></div><div class=\"line\">&gt;    <span class=\"tag\">&lt;/<span class=\"name\">paths</span>&gt;</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>   <code>&lt;paths&gt;</code>有多个子标签，各自代表不同共享目录，<code>&lt;files-path&gt;</code>表示内部files/下目录，<code>&lt;external-path&gt;</code>外部存储目录，<code>&lt;cache-path&gt;</code>缓存目录。参考<a href=\"\">FileProvider</a>。注意<em>xml里写的目录，无法在代码中追加和修改</em></p>\n<ul>\n<li>Content URI包含<code>&lt;provider&gt;</code>指定Authority（“com.example.myapp.fileprovider”）;</li>\n<li>路径“myimages/”；</li>\n<li><p>文件名称。</p>\n<p>例如获取上述files/images/下的aa.jpg文件，File Provider提供的URI：</p>\n<p><code>content://com.example.myapp.fileprovider/myimages/aa.jpg</code></p>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><h4 id=\"分享文件\"><a href=\"#分享文件\" class=\"headerlink\" title=\"分享文件\"></a>分享文件</h4><blockquote>\n<ul>\n<li>上面创建了共享提供者，此处需要共享请求者。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;  File requestFile = <span class=\"keyword\">new</span> File(mImageFilename[position]);</div><div class=\"line\">&gt;                 <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">&gt;                     fileUri = FileProvider.getUriForFile(</div><div class=\"line\">&gt;                             MainActivity.<span class=\"keyword\">this</span>,</div><div class=\"line\">&gt;                             <span class=\"string\">\"com.example.myapp.fileprovider\"</span>,</div><div class=\"line\">&gt;                             requestFile);</div><div class=\"line\">&gt;                 &#125; <span class=\"keyword\">catch</span> (IllegalArgumentException e) &#123;</div><div class=\"line\">&gt;                     Log.e(<span class=\"string\">\"File Selector\"</span>,</div><div class=\"line\">&gt;                           <span class=\"string\">\"The selected file can't be shared: \"</span> +</div><div class=\"line\">&gt;                           clickedFilename);</div><div class=\"line\">&gt;                 &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><em>需要注意的是，能获取content uri的文件，都是在manifest文件中，provider下meta-data配置了<code>&lt;paths&gt;</code>标签内的文件，否则会抛IllegalArgumentException</em></p>\n<ul>\n<li><p>设置文件授权：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"keyword\">if</span>(fileUri != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">&gt;     <span class=\"comment\">//Grant temporary read permission to the content URI，授权具有临时性，一次性。</span></div><div class=\"line\">&gt;     mResultIntent.addFlags(Intent.FLAG_GRANT_URI_PERMISSION);</div><div class=\"line\">&gt;   &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>  <strong>Caution:</strong>调用setFlags()授权文件是唯一的安全方法，应避免Context.grantUriPermission(),它需要Context.revokeUriPermission()才能撤销授权。</p>\n</blockquote>\n</li>\n<li><h4 id=\"请求分享文件\"><a href=\"#请求分享文件\" class=\"headerlink\" title=\"请求分享文件\"></a>请求分享文件</h4><blockquote>\n<p>一般文件共享分为共享者与请求者，或者服务器与客户端。服务器需要配置共享清单，客户端需要请求共享，并指定请求类型。</p>\n<ul>\n<li><p>发送文件请求，客户端startActivityForResult()，通过intent的Action，附带data，MIME去请求服务器的共享数据。服务器来显示对应的共享清单。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;      mRequestFileIntent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_PICK);<span class=\"comment\">//Action</span></div><div class=\"line\">&gt;      mRequestFileIntent.setType(<span class=\"string\">\"image/jpg\"</span>);<span class=\"comment\">//MIME类型</span></div><div class=\"line\">&gt;      ...</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>在onActivityResult()中处理服务器返回的URI，注：<em>刚开始只是处理URI，而无任何实际的文件操作和访问，不会影响服务器文件安全</em>。</p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;                   <span class=\"meta\">@Override</span></div><div class=\"line\">&gt;            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityResult</span><span class=\"params\">(<span class=\"keyword\">int</span> requestCode, <span class=\"keyword\">int</span> resultCode,</span></span></div><div class=\"line\">&gt;                           Intent returnIntent) &#123;</div><div class=\"line\">&gt;                       <span class=\"comment\">// If the selection didn't work</span></div><div class=\"line\">&gt;                       <span class=\"keyword\">if</span> (resultCode != RESULT_OK) &#123;</div><div class=\"line\">&gt;                           <span class=\"comment\">// Exit without doing anything else</span></div><div class=\"line\">&gt;                           <span class=\"keyword\">return</span>;</div><div class=\"line\">&gt;                       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">&gt;                           <span class=\"comment\">// Get the file's content URI from the incoming Intent</span></div><div class=\"line\">&gt;                           Uri returnUri = returnIntent.getData();</div><div class=\"line\">&gt;                           <span class=\"comment\">/*</span></div><div class=\"line\">&gt;      * Try to open the file for \"read\" access using the</div><div class=\"line\">&gt;      * returned URI. If the file isn't found, write to the</div><div class=\"line\">&gt;      * error log and return.</div><div class=\"line\">&gt;      */</div><div class=\"line\">&gt;      <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">&gt;               <span class=\"comment\">/*</span></div><div class=\"line\">&gt;                * Get the content resolver instance for this context, and use it</div><div class=\"line\">&gt;                * to get a ParcelFileDescriptor for the file.</div><div class=\"line\">&gt;                */</div><div class=\"line\">&gt;               mInputPFD = getContentResolver().openFileDescriptor(returnUri, <span class=\"string\">\"r\"</span>);</div><div class=\"line\">&gt;           &#125; <span class=\"keyword\">catch</span> (FileNotFoundException e) &#123;</div><div class=\"line\">&gt;               e.printStackTrace();</div><div class=\"line\">&gt;               Log.e(<span class=\"string\">\"MainActivity\"</span>, <span class=\"string\">\"File not found.\"</span>);</div><div class=\"line\">&gt;               <span class=\"keyword\">return</span>;</div><div class=\"line\">&gt;           &#125;</div><div class=\"line\">&gt;           <span class=\"comment\">// Get a regular file descriptor for the file,客户端利用FileDescriptor对象类操作文件。</span></div><div class=\"line\">&gt;           FileDescriptor fd = mInputPFD.getFileDescriptor();</div><div class=\"line\">&gt;           ...</div><div class=\"line\">&gt;      &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><h4 id=\"获取文件信息\"><a href=\"#获取文件信息\" class=\"headerlink\" title=\"获取文件信息\"></a>获取文件信息</h4><blockquote>\n<p>上一步获取了服务器提供的content uri和file descriptor对象，但并不能操作文件，还需要指导文件信息，如大小、类型。</p>\n<ul>\n<li><p>获取文件MIME，通过ContentResolver.getType()获取uri对应的文件类型。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;      Uri returnUri = returnIntent.getData();</div><div class=\"line\">&gt;      String mimeType = getContentResolver().getType(returnUri);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>获取文件大小，<a href=\"\">FileProvider</a>的query()方法返回Cuisor对象，包含对应uri的文件名称大小信息。<a href=\"\">DISPLAY_NAME</a>，<a href=\"\">SIZE</a>。</p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;             Uri returnUri = returnIntent.getData();</div><div class=\"line\">&gt;                Cursor returnCursor =</div><div class=\"line\">&gt;                        getContentResolver().query(returnUri, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">&gt;                <span class=\"comment\">/*</span></div><div class=\"line\">&gt;      * Get the column indexes of the data in the Cursor,</div><div class=\"line\">&gt;      * move to the first row in the Cursor, get the data,</div><div class=\"line\">&gt;      * and display it.</div><div class=\"line\">&gt;      */</div><div class=\"line\">&gt;        <span class=\"keyword\">int</span> nameIndex = returnCursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);</div><div class=\"line\">&gt;        <span class=\"keyword\">int</span> sizeIndex = returnCursor.getColumnIndex(OpenableColumns.SIZE);</div><div class=\"line\">&gt;        returnCursor.moveToFirst();</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"3-NFC分享文件\"><a href=\"#3-NFC分享文件\" class=\"headerlink\" title=\"3. NFC分享文件\"></a>3. NFC分享文件</h3><p>Android Beam文件传输可在设备间传输大文件，API调用方便。</p>\n<ul>\n<li><h4 id=\"发送文件\"><a href=\"#发送文件\" class=\"headerlink\" title=\"发送文件\"></a>发送文件</h4><blockquote>\n<p>使用NFC发送文件，需要设备支持NFC且app生命NFC和外部存储权限。使用URI给Android Beam来传出文件。需要满足以下要求：</p>\n<ol>\n<li><p><code>Android版本api&gt;=16。</code></p>\n</li>\n<li><p><code>传送的文件必须在外部存储上。</code></p>\n</li>\n<li><p>文件必须全局可读，可以用File.setReadable(true,false)来设置。</p>\n</li>\n<li><p>必须提供文件的File URI。Android Beam无法处理FileProvider.getUriForFile生成的URI。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.NFC\"</span> /&gt;</span></div><div class=\"line\">&gt;    <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.READ_EXTERNAL_STORANGE\"</span> /&gt;</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>   <em>其中外部存储权限在4.2.2之前不是必须声明的。</em></p>\n   <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    <span class=\"tag\">&lt;<span class=\"name\">uses-feature</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.hardware.nfc\"</span></span></div><div class=\"line\">&gt;                  android:required=\"true\" /&gt;</div><div class=\"line\">&gt;    <span class=\"comment\">&lt;!-- 如此设置，声明该应用必须要硬件nfc支持才可以运行。若是required为false，则需要检测设备是否支持Android Beam--&gt;</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>测试Android Beam，PackageManager.hasSystemFeature()和参数FEATURE_NFC来测是nfc。Build.VERSION.SDK_INT系统版本号。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"keyword\">boolean</span> hasNFC= PackageManager.hasSystemFeature(PackageManager.FEATURE_NFC);<span class=\"comment\">//判断NFC可用与否。</span></div><div class=\"line\">&gt;   Build.VERSION.SDK_INT&lt;Build.VERSION_CODE.JELLY_BEAN_MR1<span class=\"comment\">//版本低。</span></div><div class=\"line\">&gt;     <span class=\"comment\">//可用的话，实例化NfcAdapter</span></div><div class=\"line\">&gt;     NfcAdapter adapter = NfcAdatper.getDefaultAdapter(<span class=\"keyword\">this</span>);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>通过回调函数获取数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"keyword\">private</span> Uri[] mFileUris = <span class=\"keyword\">new</span> Uri[<span class=\"number\">10</span>];<span class=\"comment\">//提供给AndroidBeam的URIs</span></div><div class=\"line\">&gt;   <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileUriCallback</span> <span class=\"keyword\">implements</span> <span class=\"title\">NfcAdapter</span>.<span class=\"title\">CreateBeamUrisCallback</span></span>&#123;</div><div class=\"line\">&gt;     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FileUriCallback</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt;     <span class=\"meta\">@override</span></div><div class=\"line\">&gt;     <span class=\"keyword\">public</span> Uri[] createBeamUris(NfcEvent event)&#123;</div><div class=\"line\">&gt;       <span class=\"keyword\">return</span> mFileUris;</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt;   &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>  通过setBeamPushUrisCallback()将回调提供给Android Beam文件传输。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   mFileUriCallback = <span class=\"keyword\">new</span> FileUriCallback();</div><div class=\"line\">&gt;   mNfcAdapter.setBeamPushUrisCallback(mFileUriCallback,<span class=\"keyword\">this</span>);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li>指定要发送的文件，给文件File URI，然后加入URIs数组。记住需要有文件的读取权限。</li>\n</ul>\n</blockquote>\n</li>\n<li><h4 id=\"接收文件\"><a href=\"#接收文件\" class=\"headerlink\" title=\"接收文件\"></a>接收文件</h4><blockquote>\n<p>Android Beam文件传输时，是将文件copy到某特殊目录，然后由Media Scanner扫描文件，在MediaStore Provider中为媒体文件添加条目记录。</p>\n<ul>\n<li><p>响应传输来的请求，并显示数据。</p>\n<blockquote>\n<p>Android Beam传输数据到接收设备后，会发送Intent通知，包含ACTION_VIEW,MIME,URI。用户确认通知后，intent被发至系统，寻求其他响应。</p>\n<p>Activity在manifest配置<code>&lt;intent-filter&gt;</code>加入<code>&lt;action android:name=&quot;android.intent.action.VIEW&quot;/&gt;</code>、<code>&lt;category android:name=&quot;android.intent.category.CATEGORY_DEFAULT&quot;</code>、<code>&lt;data android:nimeType=&quot;mime-type&quot;</code>分别标识不同的Action，category和数据type。</p>\n</blockquote>\n<p><strong>Action_view的action也不一定就是Android beam发送的。*</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"tag\">&lt;<span class=\"name\">activity</span> </span></div><div class=\"line\">&gt;     android:name=\"com.example.android.nfctransfer.ViewActivity\"</div><div class=\"line\">&gt;       android:label=\"Android Beam Viewer\"&gt;</div><div class=\"line\">&gt;         <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">&gt;           <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.VIEW\"</span>/&gt;</span></div><div class=\"line\">&gt;           <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.DEFAULT\"</span>/&gt;</span></div><div class=\"line\">&gt;           ...</div><div class=\"line\">&gt;           <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">&gt;     <span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>读取文件需要权限</p>\n<p><code>&lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot;/&gt;</code></p>\n<p>上面所说，ACTION_VIEW不一定就是AndroidBeam发送的intent，所以需要检查Scheme和Authority。调用Uri.getScheme。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   mIntent = getIntent();</div><div class=\"line\">&gt;   <span class=\"comment\">//判断Action，机器Scheme和Authority</span></div><div class=\"line\">&gt;   Uri beamUri = mIntent.getData();</div><div class=\"line\">&gt;   beamUri.getScheme();<span class=\"comment\">//判断是否是“file”，或者“content”</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>File URI中获取目录</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">handleFileUri</span><span class=\"params\">(Uri beamUri)</span> </span>&#123;</div><div class=\"line\">&gt;           <span class=\"comment\">// Get the path part of the URI</span></div><div class=\"line\">&gt;           String fileName = beamUri.getPath();</div><div class=\"line\">&gt;           <span class=\"comment\">// Create a File object for this filename</span></div><div class=\"line\">&gt;           File copiedFile = <span class=\"keyword\">new</span> File(fileName);</div><div class=\"line\">&gt;           <span class=\"comment\">// Get a string containing the file's parent directory</span></div><div class=\"line\">&gt;           <span class=\"keyword\">return</span> copiedFile.getParent();</div><div class=\"line\">&gt;       &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>Content URI中获取目录，MediaS tore会含有文件的uri信息。Uri.getAuthority()获取authority，返回值MediaStore.AUTHORITY或者其他。</p>\n<p>为其他类型时候，不一定可以获取目录；</p>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"第二章、Android分享操作\"><a href=\"#第二章、Android分享操作\" class=\"headerlink\" title=\"第二章、Android分享操作\"></a>第二章、Android分享操作</h2><h3 id=\"1-分享简单数据\"><a href=\"#1-分享简单数据\" class=\"headerlink\" title=\"1. 分享简单数据\"></a>1. 分享简单数据</h3><ul>\n<li><h4 id=\"向其他app发送检单数据\"><a href=\"#向其他app发送检单数据\" class=\"headerlink\" title=\"向其他app发送检单数据\"></a>向其他app发送检单数据</h4><blockquote>\n<ol>\n<li>Intent发送数据必须有actions，其他对应action的activity响应事件。通过Intent实现分享功能，而ActionBar可使用<code>ShareActionProvider</code>来快速实现分享功能。如下是使用Intent.createChooser实现分享功能的demo：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;Intent sendIntent = <span class=\"keyword\">new</span> Intent();</div><div class=\"line\">&gt;sendIntent.setAction(Intent.ACTION_SEND);</div><div class=\"line\">&gt;sendIntent.putExtra(Intent.EXTRA_TEXT,<span class=\"string\">\"This is My Text to send.\"</span>);</div><div class=\"line\">&gt;sendIntent.setType(<span class=\"string\">\"text/plain\"</span>);</div><div class=\"line\">&gt;startActivity(Intent.createChooser(sendIntent,<span class=\"string\">\"Share to My friends\"</span>);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><em>如上，可以显示出多个选择框，列出可响应的分享社交App</em></p>\n<ol>\n<li><p>分享二进制文件，需要指定特定的MIME类型，在EXTRA_STREAM里面放置数据的URI，如下分享一个图片的代码示例:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   Intent shareIntent = <span class=\"keyword\">new</span> Intent();</div><div class=\"line\">&gt;   shareIntent.setAction(Intent.ACTION_SEND);</div><div class=\"line\">&gt;   shareIntent.putExtra(Intent.EXTRA_STREAM, uriToImage);<span class=\"comment\">//重要，指定URI</span></div><div class=\"line\">&gt;   shareIntent.setType(<span class=\"string\">\"image/jpeg\"</span>);<span class=\"comment\">//指定MIME类型</span></div><div class=\"line\">&gt;   startActivity(Intent.createChooser(shareIntent,<span class=\"string\">\"Share a picture\"</span>);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<h5 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a>注意：</h5><ul>\n<li>可以使用<code>*/*</code>指定MIME类型，但是仅有能够处理一般数据类型的Activity才能匹配到。因为普通的Activity不能详尽所有MIME类型。</li>\n<li>响应的Activity需要有访问URI的权限。两种方案，一是ContentProvider（per-URI permissions）；二是MediaStore（亦可存储非媒体文件，Android3.0以后。）</li>\n</ul>\n<ol>\n<li><p>多块内容，Multiple。同时分享不同的内容，可使用<code>ACTION_SEND_MULTIPLE</code>及数据URIs。而MIME需根据内容类型调整，可使用*符号。如<code>image/jpeg</code>、<code>image/*</code>、<code>*/*</code>。如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   ArrayList&lt;Uri&gt; imageUris = <span class=\"keyword\">new</span> ArrayList&lt;Uri&gt;();</div><div class=\"line\">&gt;   imageUris.add(imageUri1); <span class=\"comment\">// Add your image URIs here</span></div><div class=\"line\">&gt;   imageUris.add(imageUri2);</div><div class=\"line\">&gt;   <span class=\"comment\">//接收Activity需要有权限哦</span></div><div class=\"line\">&gt;   Intent shareIntent = <span class=\"keyword\">new</span> Intent();</div><div class=\"line\">&gt;   shareIntent.setAction(Intent.ACTION_SEND_MULTIPLE);<span class=\"comment\">//复合类型的MIME，Action</span></div><div class=\"line\">&gt;   shareIntent.putParcelableArrayListExtra(Intent.EXTRA_STREAM, imageUris);<span class=\"comment\">//传递数组</span></div><div class=\"line\">&gt;   shareIntent.setType(<span class=\"string\">\"image/*\"</span>);<span class=\"comment\">//复合MIME</span></div><div class=\"line\">&gt;   startActivity(Intent.createChooser(shareIntent, <span class=\"string\">\"Share images to..\"</span>));</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n</li>\n<li><h4 id=\"接收外App传的数据\"><a href=\"#接收外App传的数据\" class=\"headerlink\" title=\"接收外App传的数据\"></a>接收外App传的数据</h4><blockquote>\n<ul>\n<li><p>Activity 在manifest文件 配置，通过Intent Filters来过滤需要处理的数据Action，如下Activity接收单张图片、文本、多张图片时，不同的intent-filer配置：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"tag\">&lt;<span class=\"name\">activity</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\".ui.MyActivity\"</span> &gt;</span></div><div class=\"line\">&gt;     <span class=\"comment\">&lt;!-- 注释，单类型图片的Action过滤，其Action名称不同--&gt;</span></div><div class=\"line\">&gt;       <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">&gt;           <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.SEND\"</span> /&gt;</span></div><div class=\"line\">&gt;           <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.DEFAULT\"</span> /&gt;</span></div><div class=\"line\">&gt;           <span class=\"tag\">&lt;<span class=\"name\">data</span> <span class=\"attr\">android:mimeType</span>=<span class=\"string\">\"image/*\"</span> /&gt;</span></div><div class=\"line\">&gt;       <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">&gt;     <span class=\"comment\">&lt;!-- 注释，文本类型的Action过滤--&gt;</span></div><div class=\"line\">&gt;       <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">&gt;           <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.SEND\"</span> /&gt;</span></div><div class=\"line\">&gt;           <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.DEFAULT\"</span> /&gt;</span></div><div class=\"line\">&gt;           <span class=\"tag\">&lt;<span class=\"name\">data</span> <span class=\"attr\">android:mimeType</span>=<span class=\"string\">\"text/plain\"</span> /&gt;</span></div><div class=\"line\">&gt;       <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">&gt;     <span class=\"comment\">&lt;!-- 注释，多种类型图片的Action过滤--&gt;</span></div><div class=\"line\">&gt;       <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">&gt;           <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.SEND_MULTIPLE\"</span> /&gt;</span></div><div class=\"line\">&gt;           <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.DEFAULT\"</span> /&gt;</span></div><div class=\"line\">&gt;           <span class=\"tag\">&lt;<span class=\"name\">data</span> <span class=\"attr\">android:mimeType</span>=<span class=\"string\">\"image/*\"</span> /&gt;</span></div><div class=\"line\">&gt;       <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">&gt;   <span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li>处理接收数据，通过getIntent()来获取extra数据，需要知道传递来的具体类型，结构，做相应处理。有时需要访问权限。若是数据量太大，应考虑避免UI线程的阻塞。</li>\n</ul>\n</blockquote>\n</li>\n<li><h4 id=\"ActionBar-分享功能\"><a href=\"#ActionBar-分享功能\" class=\"headerlink\" title=\"ActionBar 分享功能\"></a>ActionBar 分享功能</h4><blockquote>\n<p>Android4.0引入ActionProvider，其子类ShareActionProvider用于分享数据。ActionBar步骤：</p>\n<ol>\n<li><p>在Menu的xml中定义<code>android:actionProviderClass</code>属性。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    <span class=\"tag\">&lt;<span class=\"name\">menu</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></div><div class=\"line\">&gt;        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/menu_item_share\"</span></span></div><div class=\"line\">&gt;            android:showAsAction=\"ifRoom\"</div><div class=\"line\">&gt;            android:title=\"Share\"</div><div class=\"line\">&gt;            android:actionProviderClass=\"android.widget.ShareActionProvider\" /&gt;</div><div class=\"line\">&gt;      <span class=\"comment\">&lt;!--如上则声明该item需要share action provider来匹配内容 --&gt;</span></div><div class=\"line\">&gt;        ...</div><div class=\"line\">&gt;    <span class=\"tag\">&lt;/<span class=\"name\">menu</span>&gt;</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p>需要提供intent给ShareActionProvider，示例如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    <span class=\"keyword\">private</span> ShareActionProvider mShareActionProvider;</div><div class=\"line\">&gt;    ...</div><div class=\"line\">&gt;    <span class=\"meta\">@Override</span></div><div class=\"line\">&gt;    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onCreateOptionsMenu</span><span class=\"params\">(Menu menu)</span> </span>&#123;</div><div class=\"line\">&gt;        <span class=\"comment\">//菜单布局文件</span></div><div class=\"line\">&gt;        getMenuInflater().inflate(R.menu.share_menu, menu);</div><div class=\"line\">&gt;        <span class=\"comment\">//加载配有ShareActionProvider属性的item</span></div><div class=\"line\">&gt;        MenuItem item = menu.findItem(R.id.menu_item_share);</div><div class=\"line\">&gt;        <span class=\"comment\">// 实例化ShareActionProvider</span></div><div class=\"line\">&gt;        mShareActionProvider = (ShareActionProvider) item.getActionProvider();</div><div class=\"line\">&gt;        <span class=\"comment\">// 返回true表示显示菜单项</span></div><div class=\"line\">&gt;        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">&gt;    &#125;</div><div class=\"line\">&gt;    <span class=\"comment\">//回调更新intent，用于分享</span></div><div class=\"line\">&gt;    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setShareIntent</span><span class=\"params\">(Intent shareIntent)</span> </span>&#123;</div><div class=\"line\">&gt;        <span class=\"keyword\">if</span> (mShareActionProvider != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">&gt;            mShareActionProvider.setShareIntent(shareIntent);</div><div class=\"line\">&gt;        &#125;</div><div class=\"line\">&gt;    &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"2-分享文件\"><a href=\"#2-分享文件\" class=\"headerlink\" title=\"2. 分享文件\"></a>2. 分享文件</h3><p>​    分享文件最为安全的方式是使用content URI，Android中FileProvider有getUriForFile()创建文件content URI。少量数据可以用intent传递。</p>\n<ul>\n<li><h4 id=\"建立文件分享\"><a href=\"#建立文件分享\" class=\"headerlink\" title=\"建立文件分享\"></a>建立文件分享</h4><blockquote>\n<p>要安全地提供文件分享，需要配置Content URI。</p>\n<ol>\n<li>指定FileProvider，在manifest中定义一个provider的entry，声明Authority等。如下示例：</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">&gt;     package=\"com.example.myapp\"&gt;</div><div class=\"line\">&gt;     <span class=\"tag\">&lt;<span class=\"name\">application</span></span></div><div class=\"line\">&gt;         ...&gt;</div><div class=\"line\">&gt;       <span class=\"comment\">&lt;!-- authorities、meta-data的配置 --&gt;</span></div><div class=\"line\">&gt;         <span class=\"tag\">&lt;<span class=\"name\">provider</span></span></div><div class=\"line\">&gt;             android:name=\"android.support.v4.content.FileProvider\"</div><div class=\"line\">&gt;             android:authorities=\"com.example.myapp.fileprovider\"</div><div class=\"line\">&gt;             android:grantUriPermissions=\"true\"</div><div class=\"line\">&gt;             android:exported=\"false\"&gt;</div><div class=\"line\">&gt;             <span class=\"tag\">&lt;<span class=\"name\">meta-data</span></span></div><div class=\"line\">&gt;                 android:name=\"android.support.FILE_PROVIDER_PATHS\"</div><div class=\"line\">&gt;                 android:resource=\"@xml/filepaths\" /&gt;</div><div class=\"line\">&gt;           <span class=\"comment\">&lt;!-- meta-data指定文件共享目录，在res/xml下 --&gt;</span></div><div class=\"line\">&gt;         <span class=\"tag\">&lt;/<span class=\"name\">provider</span>&gt;</span></div><div class=\"line\">&gt;         ...</div><div class=\"line\">&gt;     <span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></div><div class=\"line\">&gt; <span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p>共享文件的目录，res/xml中配置，filepaths.xml，如下示例：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    <span class=\"tag\">&lt;<span class=\"name\">paths</span>&gt;</span></div><div class=\"line\">&gt;      <span class=\"comment\">&lt;!-- 每一个共享目录都是一个item，这里表示共享了files/ 目录下的子目录，files-path这个标签适用于共享应用内部储存，files/下的目录。name=“myimages” 做为content uri中的路径标记--&gt;</span></div><div class=\"line\">&gt;    \t<span class=\"tag\">&lt;<span class=\"name\">files-path</span> <span class=\"attr\">path</span>=<span class=\"string\">\"images/\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myimages\"</span>/&gt;</span></div><div class=\"line\">&gt;    <span class=\"tag\">&lt;/<span class=\"name\">paths</span>&gt;</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>   <code>&lt;paths&gt;</code>有多个子标签，各自代表不同共享目录，<code>&lt;files-path&gt;</code>表示内部files/下目录，<code>&lt;external-path&gt;</code>外部存储目录，<code>&lt;cache-path&gt;</code>缓存目录。参考<a href=\"\">FileProvider</a>。注意<em>xml里写的目录，无法在代码中追加和修改</em></p>\n<ul>\n<li>Content URI包含<code>&lt;provider&gt;</code>指定Authority（“com.example.myapp.fileprovider”）;</li>\n<li>路径“myimages/”；</li>\n<li><p>文件名称。</p>\n<p>例如获取上述files/images/下的aa.jpg文件，File Provider提供的URI：</p>\n<p><code>content://com.example.myapp.fileprovider/myimages/aa.jpg</code></p>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><h4 id=\"分享文件\"><a href=\"#分享文件\" class=\"headerlink\" title=\"分享文件\"></a>分享文件</h4><blockquote>\n<ul>\n<li>上面创建了共享提供者，此处需要共享请求者。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;  File requestFile = <span class=\"keyword\">new</span> File(mImageFilename[position]);</div><div class=\"line\">&gt;                 <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">&gt;                     fileUri = FileProvider.getUriForFile(</div><div class=\"line\">&gt;                             MainActivity.<span class=\"keyword\">this</span>,</div><div class=\"line\">&gt;                             <span class=\"string\">\"com.example.myapp.fileprovider\"</span>,</div><div class=\"line\">&gt;                             requestFile);</div><div class=\"line\">&gt;                 &#125; <span class=\"keyword\">catch</span> (IllegalArgumentException e) &#123;</div><div class=\"line\">&gt;                     Log.e(<span class=\"string\">\"File Selector\"</span>,</div><div class=\"line\">&gt;                           <span class=\"string\">\"The selected file can't be shared: \"</span> +</div><div class=\"line\">&gt;                           clickedFilename);</div><div class=\"line\">&gt;                 &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><em>需要注意的是，能获取content uri的文件，都是在manifest文件中，provider下meta-data配置了<code>&lt;paths&gt;</code>标签内的文件，否则会抛IllegalArgumentException</em></p>\n<ul>\n<li><p>设置文件授权：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"keyword\">if</span>(fileUri != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">&gt;     <span class=\"comment\">//Grant temporary read permission to the content URI，授权具有临时性，一次性。</span></div><div class=\"line\">&gt;     mResultIntent.addFlags(Intent.FLAG_GRANT_URI_PERMISSION);</div><div class=\"line\">&gt;   &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>  <strong>Caution:</strong>调用setFlags()授权文件是唯一的安全方法，应避免Context.grantUriPermission(),它需要Context.revokeUriPermission()才能撤销授权。</p>\n</blockquote>\n</li>\n<li><h4 id=\"请求分享文件\"><a href=\"#请求分享文件\" class=\"headerlink\" title=\"请求分享文件\"></a>请求分享文件</h4><blockquote>\n<p>一般文件共享分为共享者与请求者，或者服务器与客户端。服务器需要配置共享清单，客户端需要请求共享，并指定请求类型。</p>\n<ul>\n<li><p>发送文件请求，客户端startActivityForResult()，通过intent的Action，附带data，MIME去请求服务器的共享数据。服务器来显示对应的共享清单。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;      mRequestFileIntent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_PICK);<span class=\"comment\">//Action</span></div><div class=\"line\">&gt;      mRequestFileIntent.setType(<span class=\"string\">\"image/jpg\"</span>);<span class=\"comment\">//MIME类型</span></div><div class=\"line\">&gt;      ...</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>在onActivityResult()中处理服务器返回的URI，注：<em>刚开始只是处理URI，而无任何实际的文件操作和访问，不会影响服务器文件安全</em>。</p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;                   <span class=\"meta\">@Override</span></div><div class=\"line\">&gt;            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityResult</span><span class=\"params\">(<span class=\"keyword\">int</span> requestCode, <span class=\"keyword\">int</span> resultCode,</span></span></div><div class=\"line\">&gt;                           Intent returnIntent) &#123;</div><div class=\"line\">&gt;                       <span class=\"comment\">// If the selection didn't work</span></div><div class=\"line\">&gt;                       <span class=\"keyword\">if</span> (resultCode != RESULT_OK) &#123;</div><div class=\"line\">&gt;                           <span class=\"comment\">// Exit without doing anything else</span></div><div class=\"line\">&gt;                           <span class=\"keyword\">return</span>;</div><div class=\"line\">&gt;                       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">&gt;                           <span class=\"comment\">// Get the file's content URI from the incoming Intent</span></div><div class=\"line\">&gt;                           Uri returnUri = returnIntent.getData();</div><div class=\"line\">&gt;                           <span class=\"comment\">/*</span></div><div class=\"line\">&gt;      * Try to open the file for \"read\" access using the</div><div class=\"line\">&gt;      * returned URI. If the file isn't found, write to the</div><div class=\"line\">&gt;      * error log and return.</div><div class=\"line\">&gt;      */</div><div class=\"line\">&gt;      <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">&gt;               <span class=\"comment\">/*</span></div><div class=\"line\">&gt;                * Get the content resolver instance for this context, and use it</div><div class=\"line\">&gt;                * to get a ParcelFileDescriptor for the file.</div><div class=\"line\">&gt;                */</div><div class=\"line\">&gt;               mInputPFD = getContentResolver().openFileDescriptor(returnUri, <span class=\"string\">\"r\"</span>);</div><div class=\"line\">&gt;           &#125; <span class=\"keyword\">catch</span> (FileNotFoundException e) &#123;</div><div class=\"line\">&gt;               e.printStackTrace();</div><div class=\"line\">&gt;               Log.e(<span class=\"string\">\"MainActivity\"</span>, <span class=\"string\">\"File not found.\"</span>);</div><div class=\"line\">&gt;               <span class=\"keyword\">return</span>;</div><div class=\"line\">&gt;           &#125;</div><div class=\"line\">&gt;           <span class=\"comment\">// Get a regular file descriptor for the file,客户端利用FileDescriptor对象类操作文件。</span></div><div class=\"line\">&gt;           FileDescriptor fd = mInputPFD.getFileDescriptor();</div><div class=\"line\">&gt;           ...</div><div class=\"line\">&gt;      &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><h4 id=\"获取文件信息\"><a href=\"#获取文件信息\" class=\"headerlink\" title=\"获取文件信息\"></a>获取文件信息</h4><blockquote>\n<p>上一步获取了服务器提供的content uri和file descriptor对象，但并不能操作文件，还需要指导文件信息，如大小、类型。</p>\n<ul>\n<li><p>获取文件MIME，通过ContentResolver.getType()获取uri对应的文件类型。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;      Uri returnUri = returnIntent.getData();</div><div class=\"line\">&gt;      String mimeType = getContentResolver().getType(returnUri);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>获取文件大小，<a href=\"\">FileProvider</a>的query()方法返回Cuisor对象，包含对应uri的文件名称大小信息。<a href=\"\">DISPLAY_NAME</a>，<a href=\"\">SIZE</a>。</p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;             Uri returnUri = returnIntent.getData();</div><div class=\"line\">&gt;                Cursor returnCursor =</div><div class=\"line\">&gt;                        getContentResolver().query(returnUri, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">&gt;                <span class=\"comment\">/*</span></div><div class=\"line\">&gt;      * Get the column indexes of the data in the Cursor,</div><div class=\"line\">&gt;      * move to the first row in the Cursor, get the data,</div><div class=\"line\">&gt;      * and display it.</div><div class=\"line\">&gt;      */</div><div class=\"line\">&gt;        <span class=\"keyword\">int</span> nameIndex = returnCursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);</div><div class=\"line\">&gt;        <span class=\"keyword\">int</span> sizeIndex = returnCursor.getColumnIndex(OpenableColumns.SIZE);</div><div class=\"line\">&gt;        returnCursor.moveToFirst();</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"3-NFC分享文件\"><a href=\"#3-NFC分享文件\" class=\"headerlink\" title=\"3. NFC分享文件\"></a>3. NFC分享文件</h3><p>Android Beam文件传输可在设备间传输大文件，API调用方便。</p>\n<ul>\n<li><h4 id=\"发送文件\"><a href=\"#发送文件\" class=\"headerlink\" title=\"发送文件\"></a>发送文件</h4><blockquote>\n<p>使用NFC发送文件，需要设备支持NFC且app生命NFC和外部存储权限。使用URI给Android Beam来传出文件。需要满足以下要求：</p>\n<ol>\n<li><p><code>Android版本api&gt;=16。</code></p>\n</li>\n<li><p><code>传送的文件必须在外部存储上。</code></p>\n</li>\n<li><p>文件必须全局可读，可以用File.setReadable(true,false)来设置。</p>\n</li>\n<li><p>必须提供文件的File URI。Android Beam无法处理FileProvider.getUriForFile生成的URI。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.NFC\"</span> /&gt;</span></div><div class=\"line\">&gt;    <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.READ_EXTERNAL_STORANGE\"</span> /&gt;</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>   <em>其中外部存储权限在4.2.2之前不是必须声明的。</em></p>\n   <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    <span class=\"tag\">&lt;<span class=\"name\">uses-feature</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.hardware.nfc\"</span></span></div><div class=\"line\">&gt;                  android:required=\"true\" /&gt;</div><div class=\"line\">&gt;    <span class=\"comment\">&lt;!-- 如此设置，声明该应用必须要硬件nfc支持才可以运行。若是required为false，则需要检测设备是否支持Android Beam--&gt;</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>测试Android Beam，PackageManager.hasSystemFeature()和参数FEATURE_NFC来测是nfc。Build.VERSION.SDK_INT系统版本号。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"keyword\">boolean</span> hasNFC= PackageManager.hasSystemFeature(PackageManager.FEATURE_NFC);<span class=\"comment\">//判断NFC可用与否。</span></div><div class=\"line\">&gt;   Build.VERSION.SDK_INT&lt;Build.VERSION_CODE.JELLY_BEAN_MR1<span class=\"comment\">//版本低。</span></div><div class=\"line\">&gt;     <span class=\"comment\">//可用的话，实例化NfcAdapter</span></div><div class=\"line\">&gt;     NfcAdapter adapter = NfcAdatper.getDefaultAdapter(<span class=\"keyword\">this</span>);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>通过回调函数获取数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"keyword\">private</span> Uri[] mFileUris = <span class=\"keyword\">new</span> Uri[<span class=\"number\">10</span>];<span class=\"comment\">//提供给AndroidBeam的URIs</span></div><div class=\"line\">&gt;   <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileUriCallback</span> <span class=\"keyword\">implements</span> <span class=\"title\">NfcAdapter</span>.<span class=\"title\">CreateBeamUrisCallback</span></span>&#123;</div><div class=\"line\">&gt;     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FileUriCallback</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt;     <span class=\"meta\">@override</span></div><div class=\"line\">&gt;     <span class=\"keyword\">public</span> Uri[] createBeamUris(NfcEvent event)&#123;</div><div class=\"line\">&gt;       <span class=\"keyword\">return</span> mFileUris;</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt;   &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>  通过setBeamPushUrisCallback()将回调提供给Android Beam文件传输。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   mFileUriCallback = <span class=\"keyword\">new</span> FileUriCallback();</div><div class=\"line\">&gt;   mNfcAdapter.setBeamPushUrisCallback(mFileUriCallback,<span class=\"keyword\">this</span>);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li>指定要发送的文件，给文件File URI，然后加入URIs数组。记住需要有文件的读取权限。</li>\n</ul>\n</blockquote>\n</li>\n<li><h4 id=\"接收文件\"><a href=\"#接收文件\" class=\"headerlink\" title=\"接收文件\"></a>接收文件</h4><blockquote>\n<p>Android Beam文件传输时，是将文件copy到某特殊目录，然后由Media Scanner扫描文件，在MediaStore Provider中为媒体文件添加条目记录。</p>\n<ul>\n<li><p>响应传输来的请求，并显示数据。</p>\n<blockquote>\n<p>Android Beam传输数据到接收设备后，会发送Intent通知，包含ACTION_VIEW,MIME,URI。用户确认通知后，intent被发至系统，寻求其他响应。</p>\n<p>Activity在manifest配置<code>&lt;intent-filter&gt;</code>加入<code>&lt;action android:name=&quot;android.intent.action.VIEW&quot;/&gt;</code>、<code>&lt;category android:name=&quot;android.intent.category.CATEGORY_DEFAULT&quot;</code>、<code>&lt;data android:nimeType=&quot;mime-type&quot;</code>分别标识不同的Action，category和数据type。</p>\n</blockquote>\n<p><strong>Action_view的action也不一定就是Android beam发送的。*</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"tag\">&lt;<span class=\"name\">activity</span> </span></div><div class=\"line\">&gt;     android:name=\"com.example.android.nfctransfer.ViewActivity\"</div><div class=\"line\">&gt;       android:label=\"Android Beam Viewer\"&gt;</div><div class=\"line\">&gt;         <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">&gt;           <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.VIEW\"</span>/&gt;</span></div><div class=\"line\">&gt;           <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.DEFAULT\"</span>/&gt;</span></div><div class=\"line\">&gt;           ...</div><div class=\"line\">&gt;           <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">&gt;     <span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>读取文件需要权限</p>\n<p><code>&lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot;/&gt;</code></p>\n<p>上面所说，ACTION_VIEW不一定就是AndroidBeam发送的intent，所以需要检查Scheme和Authority。调用Uri.getScheme。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   mIntent = getIntent();</div><div class=\"line\">&gt;   <span class=\"comment\">//判断Action，机器Scheme和Authority</span></div><div class=\"line\">&gt;   Uri beamUri = mIntent.getData();</div><div class=\"line\">&gt;   beamUri.getScheme();<span class=\"comment\">//判断是否是“file”，或者“content”</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>File URI中获取目录</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">handleFileUri</span><span class=\"params\">(Uri beamUri)</span> </span>&#123;</div><div class=\"line\">&gt;           <span class=\"comment\">// Get the path part of the URI</span></div><div class=\"line\">&gt;           String fileName = beamUri.getPath();</div><div class=\"line\">&gt;           <span class=\"comment\">// Create a File object for this filename</span></div><div class=\"line\">&gt;           File copiedFile = <span class=\"keyword\">new</span> File(fileName);</div><div class=\"line\">&gt;           <span class=\"comment\">// Get a string containing the file's parent directory</span></div><div class=\"line\">&gt;           <span class=\"keyword\">return</span> copiedFile.getParent();</div><div class=\"line\">&gt;       &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>Content URI中获取目录，MediaS tore会含有文件的uri信息。Uri.getAuthority()获取authority，返回值MediaStore.AUTHORITY或者其他。</p>\n<p>为其他类型时候，不一定可以获取目录；</p>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n"},{"title":"Python学习笔记","date":"2016-11-03T08:57:00.000Z","author":"冰路梦","_content":"\n# Python学习笔记\n\n<!-- TOC -->\n\n- [Python学习笔记](#python学习笔记)\n    - [一、基本语法](#一基本语法)\n    - [二、 数据与逻辑](#二-数据与逻辑)\n    - [三、结构与api](#三结构与api)\n    - [四、Python高级教程](#四python高级教程)\n\n<!-- /TOC -->\n## 一、基本语法\n\n`python2.x与python3.x区别很大，新版特性很强，更优化，此笔记学习新版本特性，暂不关注旧版本。`\n\n- 标识符\n\n  > 1. 标识符：数字、字母、下划线，且数字不开头。\n  > 2. 区分大小写；\n  > 3. 单下划线开头`_foo`表示不能直接访问，需要用接口访问，不可\"from xxx import\"导入。`__foo`双下划线表示私有。前后双下划线`___foo__`特殊函数。\n\n- 保留字符\n\n  > and、exec、not、assert、finally、or、break、for、pass、class、from、print、continue、global、raise、def、if、return、del、import、try、elif、in、while、else、is、with、except、lambda、yield。\n  >\n  > Python3中`end`可以将结果输入到同一行，或者输出尾部追加不同的字符\n  >\n  > ```python\n  > #Fibonacci Series: 斐波那契数列\n  > a,b = 0,1\n  > while b<1000:\n  >     print(b,end=',')\n  >     a,b = b,a+b\n  > ```\n  >\n  > ​\n\n- 行与缩进\n\n  > **Python区别于其他语言最大处，python不用{}来控制类、函数和逻辑块。而是用缩进，空格数无妨，但是逻辑块前后必须相同个数空格，使用空格或者tab都行，但是最好别混用**\n  >\n  > ```python\n  > if True:\n  >     print \"True\"\n  > else:\n  >     print \"False\"\n  > ```\n  >\n  > python一般新的一行意味着上个语句块结束。但是多行语句可以用`\\`符号：\n  >\n  > ```python\n  > string = abc + \\\n  > \t\tbcd + \\\n  >     \tefg\n  > # 要是有{}、[]、()的语句，断为多行也无妨。\n  > girls = ['allen','angle'\n  >         'candy','lily'\n  >         'merry']\n  > ```\n\n- 引号与注释\n\n  > python的字符串可以用单引号`'`、双引号`\"`、三引号`'''`包括，其中三引号可以多行分段，有时候可以用作注释。\n  >\n  > `#`符号表示注释，可写在当行，或者代码尾部。多行注释使用三个单引号` ''' `，或三个双引号`\"\"\"`包括。\n  >\n  > ```python\n  > #单行注释\n  > if True\n  > \tprint 'hello' #单个注释，新版中需要加()，视为函数\n  > '''\n  > 多行注释\n  > 是这么写的\n  > 真的可以么\n  > 在markdown语法中\n  > '''\n  > \"\"\"\n  > 似乎可以\n  > 好像是的哦\n  > \"\"\"    \n  > ```\n  >\n  > *函数之间，类与函数间用`空行`分开，便于阅读和维护*\n\n- 零碎语法\n\n  >- 多条语句同一行，可以`;`分割。\n  >\n  >- 同一代码组，首行关键字后`:`结尾，同一代码组前后空白数相同。\n  >\n  >- 旧版中文编码需要头文件注释\n  >\n  >- Python中True和False，似乎不能小写哦！\n  >\n  >  ```python\n  >  #!/usr/bin/python\n  >  #_*_coding:utf-8 _*_\n  >  #或者\n  >  #coding=utf-8\n  >  #新版python已经默认支持了。\n  >  ```\n  >\n\n\n##  二、 数据与逻辑\n\n- 变量类型\n\n  > **python变量赋值不需要类型声明**\n  >\n  > ```python\n  > counter = 100 #整型\n  > miles = 1000.0 # 浮点型\n  > name = \"John\" #字符串\n  > a = b = c = 1 #多个变量同时赋值\n  > a, b, c = 1,2,\"John\" #多变量多类型赋值,个数必须对应。\n  > ```\n  >\n  > python五种标准数据类型：\n  >\n  > - Numbers数字\n  >\n  >   该类型变量赋值后不可改变，重新赋值实质上是分配新的对象。\n  >\n  >   ```python\n  >   a = 1,b=2,c=9\n  >   #del是删除语句\n  >   del a\n  >   del a,b\n  >   # Number有四种不同类型，int、long、float、complex（复数）\n  >   #注意：python新版中，没有long，多了一个bytes。\n  >   8899887897l#后面的l容易与1混淆，一般写作L\n  >   ```\n  >\n  > - String字符串\n  >\n  >   由字母、数字、下划线组成，两种顺序，0开始至后，-1开始向前。\n  >\n  >   string的截取\n  >\n  >   ```python\n  >   s = 'I`m a good boy'\n  >   s[3:9]#其结果是截取对应标号的字符串为新的字符，可以0--size，也可以-1--向前。记住区间[)右边取不到哦\n  >   print s #输出s字符串\n  >   print s[1]#输入下标为1的字母\n  >   print s[1:5]#输出下标1-5，但不含5那个字符\n  >   print s + \"add\" # 字符串连接\n  >   print s * 2 # 重复输出两次\n  >   ```\n  >\n  > - List列表\n  >\n  >   python列表可以混合不同类型数据，嵌套列表，可以使用类似string的方法取子列表。`[]`表示\n  >\n  >   ```python\n  >   list = ['python',666,2.14,'study']\n  >   tinylist = [123,'John']\n  >   print list #完整输出\n  >   print list[0]#输出指定下标元素\n  >   print list[1:3]#输出1-3的元素\n  >   print list[2:]#输出2之后所有元素\n  >   print tinylist * 2 # 重复两次输出\n  >   print list + tinylist#组合列表\n  >   ```\n  >\n  > - Tuple元组\n  >\n  >   元组类似list，`()`标识，`,`分割，不能二次赋值。\n  >\n  >   ```python\n  >   list = [1,2,'abc']\n  >   tuple = (1,2,'abc')\n  >   list[0] = 'ABC'#可以更新\n  >   tuple[0]= 4 #错误，元组数据不能更新\n  >   ```\n  >\n  > - Dictionary字典\n  >\n  >   Dictionary被视为python最为灵活的内置数据结构，列表为有序对象集合，字典则为无序元素结合。区别在于，Dictionary类似与map集合，键值对key-value。`{}`标识\n  >\n  >   ```python\n  >   dict = {}\n  >   dict['one'] = \"This is one\"\n  >   dict[2] = \"This is 2\"\n  >   tinydict = {'name':'john','code':1234,'dept':'good',22:879.0L}\n  >   print dict['one'] #根据键值输出元素\n  >   print dict # 输出所有元素\n  >   print dict.keys()#输出所有key\n  >   print tinydict.vales()#输出所有值value\n  >   ```\n  >\n  > - Set(集合)\n  >\n  >   无序不重复的序列，主要用于成员关系测试和重复文件删除。\n  >\n  >   可以使用大括号`({})`或者`set()`函数创建集合，注意：创建一个空集合必须用 set() 而不是 `{ }`，因为 `{ }` 是用来创建一个空字典。\n  >\n  > **类型转换**，对应数据类型作为函数名即可,返回结果。\n  >\n  > |          函数           |               描述                |\n  > | :-------------------: | :-----------------------------: |\n  > |    int(x [,base])     |            将x转换为一个整数            |\n  > |   long(x [,base] )    |           将x转换为一个长整数            |\n  > |       float(x)        |           将x转换到一个浮点数            |\n  > | complex(real [,imag]) |             创建一个复数              |\n  > |        str(x)         |          将对象 x 转换为字符串           |\n  > |        repr(x)        |         将对象 x 转换为表达式字符串         |\n  > |       eval(str)       |  用来计算在字符串中的有效Python表达式,并返回一个对象  |\n  > |       tuple(s)        |          将序列 s 转换为一个元组          |\n  > |        list(s)        |          将序列 s 转换为一个列表          |\n  > |        set(s)         |             转换为可变集合             |\n  > |        dict(d)        | 创建一个字典。d 必须是一个序列 (key,value)元组。 |\n  > |     frozenset(s)      |            转换为不可变集合             |\n  > |        chr(x)         |          将一个整数转换为一个字符           |\n  > |       unichr(x)       |        将一个整数转换为Unicode字符        |\n  > |        ord(x)         |          将一个字符转换为它的整数值          |\n  > |        hex(x)         |        将一个整数转换为一个十六进制字符串        |\n  > |        oct(x)         |        将一个整数转换为一个八进制字符串         |\n  >\n\n- 运算符号\n\n  >Python运算符支持一下类型：\n  >\n  >- 算术运算符\n  >- 比较（关系）运算符\n  >- 赋值运算符\n  >- 逻辑运算符\n  >- 位运算符\n  >- 成员运算符\n  >- 身份运算符\n  >\n  >**运算符有优先级**\n  >\n  >1. 算术运算符\n  >\n  >   | 运算符  | 描述    | 实例     |\n  >   | ---- | ----- | ------ |\n  >   | +    | 加号    | 1+2得3  |\n  >   | -    | 减号    | 3-1得2  |\n  >   | *    | 乘号    | 2*2得4  |\n  >   | /    | 除号    | 9/3得3  |\n  >   | %    | 取模，求余 | 5%2得1  |\n  >   | **   | 幂     | 2**3得8 |\n  >   | //   | 取整除   | 9//2得4 |\n  >\n  >   示例：\n  >\n  >   ```python\n  >   #算术运算符，得到运算结果\n  >   a,b,c = 12,2,3#多变量同时赋值\n  >   print (a+b)\n  >   print (a-b)\n  >   print (a*b)\n  >   print (a/b)\n  >   print (a%c)\n  >   print (b**c)\n  >   print (c//b)\n  >   ```\n  >\n  >2. 比较运算符\n  >\n  >   | 运算符  | 描述          |\n  >   | ---- | ----------- |\n  >   | ==   | 等于，比较对象是否相等 |\n  >   | !=   | 不等于         |\n  >   | <>   | 不等于         |\n  >   | >    | 大于          |\n  >   | <    | 小于          |\n  >   | \\>=  | 大于等于        |\n  >   | <=   | 小于等于        |\n  >\n  >   示例：\n  >\n  >   ```python\n  >   #关系运算符，返回结果为 True或False\n  >   a,b,c = 12,2,3\n  >   print(a==b)\n  >   print(a!=b)\n  >   print(a<>b)#，新版python中，已经废弃。\n  >   print(a>b)\n  >   print(a<b)\n  >   print(a>=b)\n  >   print(a<=b)\n  >   ```\n  >\n  >3. 赋值运算符\n  >\n  >   | 运算符  | 描述   | 实例                 |\n  >   | ---- | ---- | ------------------ |\n  >   | =    | 简单赋值 | c=a+b,将a+b的结果赋值给c  |\n  >   | +=   | 加法赋值 | c+=a等效于c=c+a       |\n  >   | -=   | 减法赋值 | c-=a等效于c=c-a       |\n  >   | *=   | 乘法赋值 | c*=a等效于c=c\\*a      |\n  >   | /=   | 除法赋值 | c/=a等效于c=c/a       |\n  >   | %=   | 取模赋值 | c%=a等效于c=c%a       |\n  >   | **=  | 幂赋值  | c\\*\\*=a等效于c=c\\*\\*a |\n  >   | //=  | 取整赋值 | c//=a等效于c=c//a     |\n  >\n  >   示例：\n  >\n  >   ```python\n  >   #简单演示\n  >   a,b,c=12,2,3\n  >   #print(c=a)#不能直接在print内写赋值\n  >   c=a\n  >   print(c)\n  >   c=c**b\n  >   print(c**=b)\n  >   ```\n  >\n  >4. 位运算符\n  >\n  >   位运算既是将数字看作二进制，进行运算。\n  >\n  >   | 运算符  | 描述                                       |\n  >   | ---- | ---------------------------------------- |\n  >   | &    | **`按位与`**：两数二进制对齐，对应位置都是1，则为1，否则为0。      |\n  >   | \\|   | **`按位或`**：两数二进制，对应位置有一个为1，则为1。           |\n  >   | ^    | **`按位异或`**：两数二进制，对应位置相异，则为1。             |\n  >   | ~    | **`按位取反`**：对数据的二进制，各个位置取相反，变1为0，变0为1。    |\n  >   | <<   | **`左移动`**：运算数二进制全部左移动若干位，\"<<\"右边的数决定左移位数。**高位丢弃，低位补0** |\n  >   | \\>>  | **`右移动`**：运算数二进制全部右移动软敢为，\">>\"右边的数决定右移位数。 |\n  >\n  >   示例：\n  >\n  >   ```python\n  >   a = 60 # 60 = 0011 1100\n  >   b = 13 # 13 = 0000 1101\n  >   c = 0\n  >   c = a & b\n  >   print(\"a & b :\",c)# 12 = 0000 1100\n  >   c = a | b\n  >   print(\"a | b :\",c)# 61 = 0011 1101\n  >   c = a ^ b\n  >   print(\"a ^ b :\",c)# 49 = 0011 0001\n  >   c = ~a\n  >   print(\"~a :\",c)# -61 = 1100 0011\n  >   c = a<<2\n  >   print(\"a<<2 :\",c) # 240 = 1111 0000\n  >   c = a>>2\n  >   print(\"a>>2 :\",c) # 15 = 0000 1111\n  >   ```\n  >\n  >5. 逻辑运算符\n  >\n  >   | 运算符  | 表达式     | 描述                                       |\n  >   | ---- | ------- | ---------------------------------------- |\n  >   | and  | x and y | **`布尔与`** ：如果x为False，x and y返回False，否则返回y的计算值。 |\n  >   | or   | x or y  | **`布尔或`**：如果x非零，返回x值，否则返回y的计算值。          |\n  >   | not  | not x   | **`布尔非`**：若x为True，返回False，若x为False，返回True。 |\n  >\n  >   示例:\n  >\n  >   ```python\n  >   #True是1，False是0\n  >   \"\"\"所以可以在逻辑运算中判断，是否为0 或者1，来决定true和false\"\"\"\n  >   a, b, c = 12,2,3\n  >   print(a and b)#似乎非0，即认为True\n  >   print(a or b)\n  >   print(not a)\n  >   ```\n  >\n  >6. 成员运算符\n  >\n  >   | 运算符    | 描述                                     |\n  >   | ------ | -------------------------------------- |\n  >   | in     | x in y，若有True，无False。**`y为列表、字符串、元组`** |\n  >   | not in | x not in y 若y中无x则True，有则False。         |\n  >\n  >   示例：\n  >\n  >   ```python\n  >   a = 10;b = 20;list = [1,2,10,15]\n  >   print(a in list)\n  >   print(a not in list)\n  >   print(b in list)\n  >   ```\n  >\n  >7. 身份运算符\n  >\n  >   | 运算符    | 描述                                       |\n  >   | ------ | ---------------------------------------- |\n  >   | is     | `is`判断两标识符是否引用同一对象，id同则返回True，否则False。   |\n  >   | is not | `is not`判断两标识符是不是引用不同对象，id不同则返回True，否则False。 |\n  >\n  >   示例：\n  >\n  >   ```python\n  >   a = 10;b = 20;\n  >   print(a is b);print(a is not b);\n  >   ```\n  >\n  >8. 运算符优先级\n  >\n  >   | 运算符                      | 优先级描述                |\n  >   | ------------------------ | -------------------- |\n  >   | **                       | 指数，最高优先级             |\n  >   | ~，+，-                    | 按位取反、一元加(+@)、一元减(-@) |\n  >   | *，/，%，//                 | 乘、除、取模、取整            |\n  >   | +，-                      | 加法、减法                |\n  >   | \\>>，<<                   | 右移动、左移动              |\n  >   | &                        | 位'AND'               |\n  >   | ^，\\|                     | 位运算                  |\n  >   | <=，<，>，>=                | 比较运算符                |\n  >   | <>，==，!=                 | 等于运算符                |\n  >   | =，%=，/=，//=，-=，+=，*=，**= | 赋值运算符                |\n  >   | is，is not                | 身份运算符                |\n  >   | in ，not in               | 成员运算符                |\n  >   | not，or，and               | 逻辑运算符                |\n  >\n  >   **注意：若是不确定优先级，可以用()来控制**\n\n- 条件语句\n\n  > Python中指定非0，和非null，的值为Ture，0和null为False。\n  >\n  > ```python\n  > # python 中多个条件语句，if..elif...elif...else\n  > if condition1:\n  >     statement1\n  > elif condition2:\n  >     statement2\n  > else:\n  >     statement\n  > if (1!=2) : print \"OK\";#单行语句，可以放在一起。\n  > ```\n  >\n  > **python 没有switch语句，只能多个elif语句结合逻辑符号`and,or,not`来控制多分支语句。**\n\n- 循环语句\n\n  > 编程语言基本都有for、while和嵌套循环。python没有do...while循环。\n  >\n  > 循环控制语句有break、continue和pass。\n  >\n  > - while循环\n  >\n  >   ```python\n  >   # while 循环格式\n  >   while condition:#条件只有True和False的本质区别，但是请记住，Python中的True的定义比较广，非0，非null即为True。\n  >       statement\n  >   ```\n  >\n  >   控制语句break、continue\n  >\n  >   - break，退出循环。\n  >   - continue，跳出本次循环，进入下一次。不执行continue之后的语句。\n  >\n  >   *无限循环：判断条件为永远为True*\n  >\n  > - $for...else$\n  >\n  >   Python中有for...else和while...else循环。\n  >\n  >   `表示for或while语句正常执行后，else语句执行。`注意：循环体正常执行，而不是break出来，才会运行else语句。\n  >\n  >   每一轮的循环，for或while内没有break的话，都会执行else语句。\n  >\n  > - for循环\n  >\n  >   用于遍历任何序列项目，如列表字符串。格式：\n  >\n  >   - 普通方式\n  >\n  >   ```python\n  >   for iterating_var in sequence:\n  >       statements\n  >       \n  >   #如下示例\n  >\n  >   for letter in 'python text':\n  >       print ('当前字母：',letter)\n  >       \n  >   fruits = ['banana','apple','orange']\n  >   for fruit in fruits:\n  >       print(\"水果：\",fruit)\n  >   ```\n  >\n  >   - 使用索引\n  >\n  >     ```python\n  >     fruits = ['banana','orange','apple']\n  >     for index in range(len(fruits)):\n  >         print(\"fruit:\",fruits[index])\n  >     ```\n\n- 循环嵌套\n\n  > 类似其他编程语言，python也允许循环嵌套。\n  >\n  > ```python\n  > for iterating_var in sequence:\n  >     for interating_var in sequence:\n  >         statements\n  >     statements\n  > #python中注意缩进来区分代码块，while嵌套类似，也可以互相嵌套。\n  > ```\n  >\n  > - break、continue语句类似其他编程语言，上面已做介绍。\n  >\n  > - pass语句，不做任何事情，一般用做占位语句\n  >\n  >   ```python\n  >   for letter in 'python':\n  >       if letter == 'h':\n  >           pass\n  >       \tprint(\"just for blank\")\n  >       print(\"letter:\",letter)\n  >   ```\n\n\n## 三、结构与api\n\n- Number数据类型\n\n  > Python的Number数据类型，不允许改变，每次赋值都会是一个新的对象。\n  >\n  > ```python\n  > a = 10\n  > b = 12\n  > a = 20 #内存地址已经变了，不像java那样。\n  > #del语句删除\n  > del a\n  > del a,b\n  > ```\n  >\n  > **Number数据支持四种子类型**\n  >\n  > - int整型，正数、负数，无小数点。\n  > - long长整型，无限大小的整数，后加`L`或`l`。\n  > - float浮点型，整数、小数和科学计数。\n  > - complex复数，实数和虚数构成，a+bj或complex(a,b)，a实数，b虚数。\n\n- Python数学函数\n\n  > | 函数            | 返回值                                   |\n  > | ------------- | ------------------------------------- |\n  > | abs(x)        | 绝对值：返回x的绝对值                           |\n  > | ceil(x)       | 取大整：返回x的上入整数，不是四舍五入。如math.ceil(4.1)得5 |\n  > | cmp(x,y)      | 对比：x\\<y，返回-1，x=y返回0，x\\>y 返回1          |\n  > | exp(x)        | e次幂：e的x次幂                             |\n  > | fabs(x)       | 绝对值：返回x的绝对值，含小数点。                     |\n  > | floor(x)      | 取小整：返回x的向下整数。                         |\n  > | log(x)        | log函数                                 |\n  > | max（x1，x2...) | Max函数。                                |\n  > | min(x1,x2...) | Min函数。                                |\n  > | modf(x)       | 分离：返回x的整数和小数部分，符号与x相同，整数部分为float型。    |\n  > | pow(x,y)      | 幂函数：x**y的值                            |\n  > | rount(x[,n])  | 舍入值：x的四舍五入，舍入到小数后n位。                  |\n  > | sqrt(x)       | 开方：x的平方根，x可为负数，返回实数。                  |\n  >\n  > **Math函数**\n  >\n  > - 随机函数random\n  >\n  >   | 函数                             | 描述                                     |\n  >   | ------------------------------ | -------------------------------------- |\n  >   | choice(seq)                    | random.choice(range(10))，从0--9随机挑一个整数。 |\n  >   | randrange([start],stop,[step]) | 指定范围制定基数获取随机数。                         |\n  >   | random()                       | [0,1)内随机数                              |\n  >   | seed([x])                      | 随机数生成器的种子？？                            |\n  >   | shuffle(lst)                   | 序列元素的随机排序                              |\n  >   | uniform(x,y)                   | [x,y]范围内随机生成下一个实数                      |\n  >\n  >   ==注意函数参数[step]之类的，表示为可选参数==\n  >\n  > - 三角函数\n  >\n  >   | 函数         | 描述                              |\n  >   | ---------- | ------------------------------- |\n  >   | acos(x)    | 反余弦（弧度值）                        |\n  >   | asin(x)    | 反正弦                             |\n  >   | atan(x)    | 反正切                             |\n  >   | atan2(y,x) | 指定x，y坐标的反正切值                    |\n  >   | cos(x)     | 余弦                              |\n  >   | hypot(x,y) | 返回欧几里得范数sqrt(x\\*x+y\\*y)         |\n  >   | sin(x)     | 正弦                              |\n  >   | tan(x)     | 正切                              |\n  >   | degress(x) | 弧度转角度。如degress(math.pi/2),得90.0 |\n  >   | radins(x)  | 角度转弧度                           |\n  >\n  > - 数学常量\n  >\n  >   | 常量   | 描述    |\n  >   | ---- | ----- |\n  >   | pi   | 圆周率   |\n  >   | e    | 自然常数e |\n\n- 字符串\n\n  > python中字符串string可用`'`或`\"`符号，无char类型。\n  >\n  > ```python\n  > #字符串可以用[]类似java数组方式截取\n  > a = 'abc'\n  > b = \"hello python\"\n  >\n  > print('a[0]',a[0])\n  > print(\"b[2:7],b[2:7])#关于字符串的截取可参照上一章数据类型里的描述。\n  > ```\n  >\n  > python可以对string字符串更新操作：\n  >\n  > ```python\n  > a = 'hello python'\n  > print('updated:',a[:6]+'beautiful girl'\n  > ```\n  >\n  > - 类似其他语言，python中也使用`\\`转义其他特殊字符。\n  >\n  >   | 转义字符     | 描述                    |\n  >   | -------- | --------------------- |\n  >   | \\ (在行尾时) | 续行符号                  |\n  >   | \\\\\\      | 反斜杠                   |\n  >   | \\'       | 单引号                   |\n  >   | \\\"       | 双引号                   |\n  >   | \\a       | 响铃                    |\n  >   | \\b       | 退格                    |\n  >   | \\e       | 转义                    |\n  >   | \\000     | 空                     |\n  >   | \\n       | 换行                    |\n  >   | \\v       | 纵向制表符                 |\n  >   | \\t       | 横向制表符                 |\n  >   | \\r       | 回车                    |\n  >   | \\f       | 换页                    |\n  >   | \\oyy     | 八进制，yy表字符，如：\\o12代表换行  |\n  >   | \\xyy     | 十六进制，yy表字符，如：\\x0a代表换行 |\n  >   | \\other   | 其他字符将以普通格式输出          |\n  >\n  > - 字符串运算\n  >\n  >   | 操作符    | 描述                              |\n  >   | ------ | ------------------------------- |\n  >   | +      | 串联                              |\n  >   | *      | 重复                              |\n  >   | []     | 截取[index],index位置的字符            |\n  >   | [ : ]  | 截取`:`前后数字范围内，如，[1:4)取不到右边数字的字符。 |\n  >   | in     | 成员运算符，含有返回True                  |\n  >   | not in | 成员运算符，不含有返回True                 |\n  >   | r/R    | 原始字符串，不转义，原始输出。                 |\n  >\n  > - 字符串格式化\n  >\n  >   类似C 语言的printf函数，将需要格式化的数字字符，格式化后传入%s之类的占据的位置。==格式化==\n  >\n  >   | 符号   | 描述            |\n  >   | ---- | ------------- |\n  >   | %c   | 字符及其ASCII码    |\n  >   | %s   | 字符串           |\n  >   | %d   | 整数            |\n  >   | %u   | 无符号整型         |\n  >   | %o   | 无符号八进制数       |\n  >   | %x   | 无符号十六进制数      |\n  >   | %X   | 无符号十六进制数，大写   |\n  >   | %f   | 浮点数子，可指定小数点精度 |\n  >   | %e   | 科学计数法格式化浮点数   |\n  >   | %E   | 同%e           |\n  >   | %g   | %f和%e的简写      |\n  >   | %G   | %f和%e的简写      |\n  >   | %p   | 十六进制格式化变量的地址  |\n  >\n  >   - 格式化操作符辅助指令\n  >\n  >     | 符号     | 功能                   |\n  >     | ------ | -------------------- |\n  >     | *      | 定义宽度或小数精度            |\n  >     | -      | 左对齐                  |\n  >     | +      | 正数前显示+号              |\n  >     | `<sp>` | 正数前显示空格              |\n  >     | #      | 八进制前显示0，十六进制前显示0x或0X |\n  >     | 0      | 显示的数字前填充0，而不是空格      |\n  >     | %      | '%%'输出显示一个'%'        |\n  >     | (var)  | 映射变量（字典参数）           |\n  >     | m.n.   | m显示最小总宽度，n小数后的位数。    |\n  >\n  > - python的三引号\n  >\n  >   **三引号` ``` `通常把复杂的字符串，整段的复制输出，而不管其中是否换行、转义之类的。\n  >\n  >   ==`u`==符号表示Unicode编码，如：\n  >\n  >   ```python\n  >   #如下，则为Unicode格式\n  >   u'hello world'\n  >   u'hello\\u0020world'#效果如上，内部使用了\\0020代表空格\n  >   ```\n  >\n  > ==往后的api会越来越多，本笔记将不再赘述各个类型和函数的api。==\n\n- List列表\n\n  > Python有6个序列类型，常见的为==列表==和==元组==。序列常用操作：`索引`、`切片`、`加`、`乘`、`检查成员`，以及最大最小值的获取。\n  >\n  > - 列表，格式`[ ]`内用`,分隔。\n  >   ```python\n  >   \tlist = [1,'abc',False,list,\"hello pythono\"];#列表元素类型可以不同，可以嵌套列表。类似数组，可以索引，左0，右-1\n  >   ```\n  >   更新，直接赋值新的元素。删除，del对应元素。\n  >\n  > - python列表脚本操作符\n  >\n  >   | 表达式                      | 结果                        | 描述         |\n  >   | ------------------------ | ------------------------- | ---------- |\n  >   | len([1,2,3])             | 3                         | 长度         |\n  >   | [1,2,3]+[4,5,6]          | [1,2,3,4,5,6]             | zu'he      |\n  >   | ['Hi!']*4                | ['Hi!','Hi!','Hi!','Hi!'] | 重复         |\n  >   | 3 in [1,2,3]             | True                      | 判断元素是否属于列表 |\n  >   | for x in [1,2,3]:print x | 1 2 3                     | 遍历 迭代      |\n  >\n  >   **列表的截取，类似字符串的操作。通过索引，取值范围来截取。**\n  >\n  > - Python列表相关的函数&方法\n  >\n  >   ```python\n  >   cmp(list1,list2);#比较两个列表\n  >   len(list);#list长度、元素个数\n  >   max(list);#list最大元素值\n  >   min(list);#list最小元素值\n  >   list(seq);#将元组转化为列表\n  >\n  >   list.append(obj);#列表尾新增对象\n  >   list.count(obj);#统计某元素出现次数\n  >   list.extend(seq);#用新列表扩展\n  >   list.index(obg);#元素第一次出现位置\n  >   list.insert(index,obj);#指定位置插入\n  >   list.pop(obj=list[-1]);#移除列表中最后一个元素，或指定位置的。\n  >   list.remove(obj);#移除第一个找到的该元素\n  >   list.reverse();#反向列表\n  >   list.sort([func]);#排序\n  >   ```\n\n- 元组\n\n  >元组类似列表，但是==不能修改元素==。\n  >\n  >格式`( )`，用`,`分隔。\n  >\n  >```python\n  >tup = ('adb',12,list);\n  >tup2 = ();#空元组\n  >tup3 = (2,);#元组只有一个元素，则必须有个逗号,\n  >```\n  >\n  >**访问元组，类似列表和字符串的查找**，元组不能修改，但是可以==串接==。\n  >\n  >```python\n  >tup1 = (1,2,2);\n  >tup2 = ('ab','cd','ddf');\n  >tup3 = tup1 + tup2;#元组串接。\n  >```\n  >\n  >***元组元素不能删除，但是==元组可以被删除==***\n  >\n  >```python\n  >tup = (1,2,2);\n  >del tup;\n  >```\n  >\n  >`任意无符号的对象，以,分隔，默认为元组`\n  >\n  >- 元组的一些方法和函数，类似列表\n  >\n  >  ```python\n  >  tuple(seq);#列表转化为元组\n  >  ```\n\n- 字典Dictionary\n\n  > 字典类似于java中的map集合。使用键值对`key-value`，格式：=={key1:value1,key2:value2}==\n  >\n  > - **key值唯一**\n  >\n  > - **value值可以任何类型，key值必是不可变类型，如字符串、数字和元组。**\n  >\n  > - 字典内，所有的key不需要都为统一类型\n  >\n  >   ```python\n  >   dict = {\"abc\":'adb','def':23,55:'adb'}\n  >   print (\"dict[55]\");#根据key值，若是没有，会报错。\n  >   ```\n  >\n  > - 字典元素的修改，删除\n  >\n  >   ```python\n  >   del dict[key];#删除指定元素\n  >   dict.clear();#清空字典\n  >   del dict;#删除字典\n  >   ```\n  >\n  > - 字典的函数&方法\n  >\n  >   ```python\n  >   cmp(dict1,dict2);#比较\n  >   len(dict);#计数\n  >   str(dict);#字符输出字典元素\n  >   type(variable);#变量的类型\n  >\n  >   radiansdict.clear();#清空字典\n  >   radiansdict.copy();#字典浅复制\n  >   radiansdict.get(key,default=None);#获取值，若无，返回默认值。\n  >   radiansdict.has_key(key);#查询是否包含指定key值\n  >   radiansdict.items();#遍历显示字典元素数组\n  >   radiansdict.keys();#列表显示所有key\n  >   radiansdict.setdefault(key,default=None);#类似get，若key不存在，则添加。\n  >   radiansdict.update(dict2);#将dict2更新到dict中。\n  >   radiansdict.values();#返回所有value值。\n  >   ```\n\n- python日期时间\n\n  > 类似其他编程语言，时间基于1970年1月1日。Unix和windows支持到2038年？\n  >\n  > - time\n  >\n  >   ```python\n  >   time.time();#获取时间戳\n  >   time.localtime(time.time());#获得时间的元组\n  >   time.asctime(time.localtime(time.time()));#格式化时间\n  >   time.strftime(format[,t]);#自定义字符格式化时间\n  >   # 格式化成2016-03-20 11:45:39形式\n  >   print time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime()) \n  >\n  >   # 格式化成Sat Mar 28 22:24:24 2016形式\n  >   print time.strftime(\"%a %b %d %H:%M:%S %Y\", time.localtime()) \n  >     \n  >   # 将格式字符串转换为时间戳\n  >   a = \"Sat Mar 28 22:24:24 2016\"\n  >   print time.mktime(time.strptime(a,\"%a %b %d %H:%M:%S %Y\"));\n  >   ```\n  >\n  > - calendar\n  >\n  >   ==0-6表示一周，0表示周一。==\n  >\n  >   ```python\n  >   calendar.month(2016,10);#获取制定月份的日历。\n  >   ```\n  >\n  >   **函数和方法不在赘述**\n  >\n  >   datetime、pytz、dateutil模块也是处理时间相关。\n\n- 函数\n\n  > 类似其他编程语言的函数&方法定义，python函数格式：\n  >\n  > ```python\n  > def functionname( parameters ):\n  >     \"函数文档\"\n  >     function_suite\n  >     return [expression]\n  > #def 关键字，声明函数\n  > #functionname 函数名\n  > #(parameters) 参数，多个参数可以，分隔？还是多个括号\n  > #可写声明文档，\n  > #返回值，可以是None。\n  > ```\n  >\n  > **按值传递与按引用传递**\n  >\n  > Python中所有参数的传递，都是==引用传递==，一处修改，原始值则变。\n  >\n  > - 函数的参数：\n  >\n  >   `必备参数`、`关键字参数`、`默认参数`、`不定长参数`\n  >\n  >   ```python\n  >   #必备参数，必须传入的形式，否则报错\n  >   def printStr(str):\n  >       ...\n  >   \treturn;    \n  >   #关键字参数，输入参数的格式顺序，不必和声明的顺序一致。\n  >   def printInfo(name,age):\n  >       print(\"name:\",name);\n  >       print(\"age:\",age)\n  >       return;\n  >   printInfo(age = 27,name = 'jack');\n  >   def printDefault(name,age=20):\n  >       ......\n  >       return;\n  >   #此时可以使用默认参数\n  >   printDefault(name = 'jack');#age 默认了。\n  >\n  >   #不定长参数\n  >   def printLong(arg1,*args):#星号*的那个参数，为可变参数。\n  >       print(arg2);\n  >       for var in args:\n  >           print var;\n  >       return;\n  >   ```\n  >\n  > - Python使用lambda创建匿名函数。\n  >\n  >   - lambda是表达式，函数比def简单\n  >   - 只能在lambda表达式中构建逻辑\n  >   - lambda仅能访问自有参数。\n  >   - lambda似乎只能写一行。\n  >\n  >   ==语法==\n  >\n  >   ```python\n  >   lambda [arg2[,arg2,......]]:expression\n  >   #示例\n  >   sum = lambda arg1,arg2:arg1+arg2;\n  >\n  >   #调用sum函数\n  >   sum(1,2);\n  >   ```\n  >\n  >   **return用于退出函数，无有返回值则是None。**\n  >\n  >   变量作用域，全局和局部，都是作用于其声明范围内。\n\n- Python模块\n\n  > python模块指一段逻辑或函数方法，在python中，模块也是一个对象，可以命名，引用。类似于java中的类文件？\n  >\n  > ```python\n  > import module1[,module2,...]#导入模块，就可以使用其方法和逻辑。\n  > #用类名/文件名.方法/函数,来调用。\n  > from modname import name1[,name2,...]#从指定空间导入模块。\n  > from modname import * #导入指定名称空间下的所有模块。\n  > ```\n  >\n  > 寻找模块的顺序是：当前文件、path路径、系统默认路径。\n  >\n  > - 变量默认都是局部范围的，全局变量需要global声明。\n  > - dir()函数，列表显示。\n  > - globals()和locals(),reload();\n  > - python中也有包，文件的概念。\n\n- Python文件IO和File、异常\n\n  >- 文件I/O\n  >\n  >  `raw_input`\n  >\n  >  `input`\n  >\n  >  ```python\n  >  #raw_input 接受输入的一行\n  >  str = raw_input(\"Please input :\");\n  >  print(\"输入内容为：\",str);#str会接收键盘的输入内容\n  >\n  >  #input类似与raw_input，可以接受输入表达式\n  >  str = input(\"Please input:\");\n  >  print(\"输入内容为：\",str);\n  >  #上面可以输入：[x*5 for x in range(2,10,2)]\n  >  ```\n  >\n  >- file对象操作文件\n  >\n  >  ```python\n  >  file object = open(file_name[,access_mode][,buffering]);#用open()方法打开文件\n  >  file.closed;# true or false\n  >  file.mode;\n  >  file.name;\n  >  file.softspace;#有空格符来结束，需要返回False，不需要，True。\n  >  file.write(string);#不会默认行尾加换行的，。\n  >  file.read([count]);#读取指定个数的字节数。\n  >\n  >  tell();#可知文件内，当前位置。\n  >  seek(offset[,from]);#改变当前位置\n  >\n  >  #python 的os模块有删除、重命名文件的方法\n  >  os.rename(old_name,new_name);\n  >  os.remove(\"test.txt\");#删除文件\n  >  os.mkdir(\"abc\");os.chdir(\"new\");os.getcwd();#显示当前目录。\n  >  os.rmdir();\n  >  ```\n  >\n  >- **异常处理**\n  >\n  >  try/except语句\n  >\n  >  ```python\n  >  try:\n  >      <statements>#运行代码\n  >  except <exception>:\n  >      <e1>#try到异常name\n  >  except <exception>,<data>:\n  >      <e2>#try到异常，并有数据\n  >  else:\n  >      <statements2>#无异常时候运行\n  >  #类似java，python中可以不写exception的name，就会捕获所有异常。\n  >  #也可以\n  >  except(e1,e2,...):\n  >      ...\n  >  #类似java 有try finally\n  >  try:\n  >      <>\n  >  finally:\n  >      <>#总会执行的语句。\n  >  ```\n  >\n  >  ==raise==语句自动触发异常\n  >\n  >  ```python\n  >  raise [Exception[,args[,traceback]]]\n  >  def functionName( level ):\n  >      if level < 1:\n  >          raise Exception(\"Invalid level!\", level)\n  >          # 触发异常后，后面的代码就不会再执行\n  >          \n  >  try:\n  >     # 正常逻辑\n  >  except \"Invalid level!\":#对应自定义的异常名，如上。\n  >     # 触发自定义异常    \n  >  else:\n  >     # 其余代码\n  >\n  >  class MyError(RuntimeError):\n  >      def init(self,arg):\n  >          self.args = arg\n  >          \n  >  #自己触发异常\n  >  try:\n  >      raise MyError(\"hao xiang shu ru cuo le \")\n  >  except Networkerror,e:\n  >      print e.args\n  >  ```\n\n\n## 四、Python高级教程\n\n- 面向对象\n\n  > Python是一种面向对象的解释型语言，类似于其他面向对象的编程语言，需要熟悉一下面向对象的名词概念：\n  >\n  > - `类(class)`：用于描述具有相同属性和方法的对象的集合。描述一类事物，对象是类的实例。\n  > - `类变量`：类中公开化的变量，作用于类的范围内，区别于实例变量。\n  > - `数据成员`：类变量或实例变量，用于处理实例对象相关的数据。\n  > - `方法重写`：重写继承自父类的方法，实现自有的逻辑。override。\n  > - `实例变量`：定义在方法中的变量，作用于方法内。\n  > - `继承`：即一个派生类继承基类的字段和方法。\n  > - `实例化`：创建一个类的实例，类的具体对象。\n  > - `方法`：类中定义的函数。\n  > - `对象`：根据类定义的数据结构构建的一个实例，包含类的数据成员和方法。\n  >\n  > 1. 创建类\n  >\n  >    ```python\n  >    class ClassName:#定义类的关键字class\n  >        '类的描述信息' #帮助文档\n  >        class_suite #类题\n  >    #例如：\n  >    class Employee:\n  >       '所有员工的基类'\n  >       empCount = 0\n  >\n  >       def __init__(self, name, salary):#构造函数\n  >          self.name = name\n  >          self.salary = salary\n  >          Employee.empCount += 1\n  >       \n  >       def displayCount(self):#方法函数\n  >         print \"Total Employee %d\" % Employee.empCount\n  >\n  >       def displayEmployee(self):\n  >          print \"Name : \", self.name,  \", Salary: \", self.salary\n  >    #实例化对象\n  >    objectName = ClassName(...);#根据类的构造函数创建对象。\n  >    #访问方法属性，用object.method();\n  >    objectName.displayCount();\n  >    #可以添加、删除、修改类的属性\n  >    objectName.age = 20;# add attribution\n  >    objectName.age =26;#modify attribution\n  >    del objectName.age # delete attribution\n  >    ```\n  >\n  >\n  >    **Python有专门的函数，处理类的属性和方法**\n  >    getattr(obj,name[,default]);\n  >    setattr(obj,name,value);\n  >    hasattr(obj,name);\n  >    delattr(obj,name);\n  >    ```\n  >\n  > 2. Python内置属性\n  >\n  >    ```python\n  >    #python attribution，用ClassName.function调用。\n  >    __dict__:类的属性\n  >    __doc__:类的文档字符串\n  >    __name__:类名\n  >    __module__:类定义所在的模块\n  >    __bases__类的所有父类构成元素\n  >    ```\n  >\n  > 3. 类似java，python使用内置引用计数器，处理垃圾回收。\n  >\n  > 4. Python的继承：\n  >\n  >    - 格式：class SubClassName [ParentClass1[,ParentClass2,...]]:\n  >\n  >    - Python类的继承==支持多继承==\n  >\n  >    - 派生类继承基类，构造函数不会被自动调用，需要专门调用。\n  >\n  >    - 调用基类方法时候，需要用BaseClassName.而且需要self参数。区别于本类内的函数方法。\n  >\n  >    - 同类函数名，则优先调用本类中的函数方法，若无，再去基类中寻找。\n  >\n  >      ```python\n  >      issbuclass();#判断是否是另一个类的派生类，issubclass(sub,super);\n  >      isinstance(obj,class);#判断一个对象，是不是类的实例。\n  >      ```\n  >\n  > 5. 方法重写与重载\n  >\n  >    - 重写基类的方法，用于实现自己的逻辑。\n  >\n  >    - 基础重载：\n  >\n  >      ```python\n  >      #函数方法，前后两个下划线__init__\n  >      __init__(self[,args])#构造函数\n  >      __del__(self)#删除对象\n  >      __repr__(self)#转化为编译器格式\n  >      __str__(self)#转化为可阅读模式\n  >      __cmp__(self,x)#对象比较\n  >      ```\n  >\n  >    - 运算符重载\n  >\n  >      ```python\n  >      class Vector:\n  >         def __init__(self, a, b):\n  >            self.a = a\n  >            self.b = b\n  >\n  >         def __str__(self):\n  >            return 'Vector (%d, %d)' % (self.a, self.b)\n  >         \n  >         def __add__(self,other):\n  >            return Vector(self.a + other.a, self.b + other.b)\n  >\n  >      v1 = Vector(2,10)\n  >      v2 = Vector(5,-2)\n  >      print v1 + v2#运算符的重载\n  >      #输出结果\n  >      Vector(7,8)\n  >      ```\n  >\n  > 6. **类的属性和方法**\n  >\n  >    - 类的私有属性\n  >\n  >      __private_attrs：两个下划线开头，仅能在类内部使用。self.\\_\\_private_attrs。\n  >\n  >    - 类的方法\n  >\n  >      关键字`def`定义类的方法，类似定义函数。但是类的方法必须包含参数`self`且为第一参数，私有方法：__private_method，内部调用self.\\_\\_private_method\n  >\n  >      ```python\n  >      def method(self[,args]):\n  >          .....\n  >\n  >      ```\n  >\n  >    - Python不允许实例化的类访问私有数据，可用obj._classname\\_attrName访问属性。\n\n- 正则表达式\n\n  > Python的re模块包含了全部的正则表达式。\n  >\n  > compile函数用于构建正则表达式。\n  >\n  > 1. re.match\n  >\n  >    从字符串起始位置匹配，起始不成功匹配，返回None。\n  >\n  >    ```python\n  >    #pattern 正则表达式，string 匹配字符串，flags标志位，如区分大小写，多行匹配等。\n  >    re.match(pattern,string,flags=0);\n  >    group(num= 0)#匹配整个表达式字符串，group可以依次输入多个组号。\n  >    groups();#返回包含所有小组字符串的元组。\n  >    ```\n  >\n  >    示例：\n  >\n  >    ```python\n  >    import re\n  >    print(re.match('www', 'www.runoob.com').span())  # 在起始位置匹配\n  >    print(re.match('com', 'www.runoob.com'))         # 不在起始位置匹配\n  >\n  >    #输出结果\n  >    (0,3)\n  >    None\n  >    ```\n  >\n  >    ```python\n  >    #!/usr/bin/python\n  >    import re\n  >\n  >    line = \"Cats are smarter than dogs\"\n  >\n  >    matchObj = re.match( r'(.*) are (.*?) .*', line, re.M|re.I)\n  >\n  >    if matchObj:\n  >       print \"matchObj.group() : \", matchObj.group()\n  >       print \"matchObj.group(1) : \", matchObj.group(1)\n  >       print \"matchObj.group(2) : \", matchObj.group(2)\n  >    else:\n  >       print \"No match!!\"\n  >\n  >    #输出结果\n  >    matchObj.group() :  Cats are smarter than dogs\n  >    matchObj.group(1) :  Cats\n  >    matchObj.group(2) :  smarter\n  >    ```\n  >\n  > 2. re.search方法\n  >\n  >    扫描整个字符串，并返回第一个成功的匹配。\n  >\n  >    ```python\n  >    re.search(pattern,string,flags=0);\n  >    ```\n  >\n  >    示例：\n  >\n  >    ```python\n  >    #!/usr/bin/python\n  >    # -*- coding: UTF-8 -*- \n  >\n  >    import re\n  >    print(re.search('www', 'www.runoob.com').span())  # 在起始位置匹配\n  >    print(re.search('com', 'www.runoob.com').span())         # 不在起始位置匹配\n  >\n  >    #输出结果\n  >    (0,3)\n  >    (11,14)\n  >    ```\n  >\n  >    ```python\n  >    #!/usr/bin/python\n  >    import re\n  >\n  >    line = \"Cats are smarter than dogs\";\n  >\n  >    searchObj = re.search( r'(.*) are (.*?) .*', line, re.M|re.I)\n  >\n  >    if searchObj:\n  >       print \"searchObj.group() : \", searchObj.group()\n  >       print \"searchObj.group(1) : \", searchObj.group(1)\n  >       print \"searchObj.group(2) : \", searchObj.group(2)\n  >    else:\n  >       print \"Nothing found!!\"\n  >\n  >    #输出结果\n  >    searchObj.group() :  Cats are smarter than dogs\n  >    searchObj.group(1) :  Cats\n  >    searchObj.group(2) :  smarter\n  >    ```\n  >\n  > 3. re.match & re.search\n  >\n  >    `re.match`匹配起始，不成功则None。\n  >\n  >    `re.search`匹配全部。\n  >\n  >    ```python\n  >    #!/usr/bin/python\n  >    import re\n  >\n  >    line = \"Cats are smarter than dogs\";\n  >\n  >    matchObj = re.match( r'dogs', line, re.M|re.I)\n  >    if matchObj:\n  >       print \"match --> matchObj.group() : \", matchObj.group()\n  >    else:\n  >       print \"No match!!\"\n  >\n  >    matchObj = re.search( r'dogs', line, re.M|re.I)\n  >    if matchObj:\n  >       print \"search --> matchObj.group() : \", matchObj.group()\n  >    else:\n  >       print \"No match!!\"\n  >\n  >    #输出结果\n  >    No match!!\n  >    serach --> matchObj.group() : dogs\n  >    ```\n  >\n  > 4. re.sub检索和替换\n  >\n  >    ```python\n  >    re.sub(pattern,rep1,string,max = 0);#count >=0,匹配次数。\n  >    ```\n  >\n  >    示例：\n  >\n  >    ```python\n  >    #!/usr/bin/python\n  >    import re\n  >\n  >    phone = \"2004-959-559 # This is Phone Number\"\n  >\n  >    # Delete Python-style comments\n  >    num = re.sub(r'#.*$', \"\", phone)\n  >    print \"Phone Num : \", num\n  >\n  >    # Remove anything other than digits\n  >    num = re.sub(r'\\D', \"\", phone)    \n  >    print \"Phone Num : \", num\n  >\n  >    #输出结果\n  >    Phone Num :  2004-959-559\n  >    Phone Num :  2004959559\n  >    ```\n  >\n  > 5. 正则表达式的修饰符-可选标志\n  >\n  >    *标志修饰符控制匹配模式，多个标识符可以用按位OR`|`指定*\n  >\n  >    | 修饰符  | 描绘                                |\n  >    | ---- | --------------------------------- |\n  >    | re.l | 匹配不分大小写                           |\n  >    | re.L | 本地化识别(local-aware)匹配              |\n  >    | re.M | 多行匹配，影响`^`和`$`                    |\n  >    | re.S | 使`.`匹配包括行在内的所有字符                  |\n  >    | re.U | Unicode解析字符，影响`\\w`、`\\W`、`\\b`、`\\B` |\n  >    | re.X | 灵活格式                              |\n  >\n  > 6. 正则表达式模式\n  >\n  >    - `字母和数字`表达自身。\n  >    - 多数字母和数字前加`\\`会转义\n  >    - 标点符号均是特殊意思，除非转义。\n  >    - `\\`是转义符\n  >\n  >    ```python\n  >    ^\t匹配字符串的开头\n  >    $\t匹配字符串的末尾。\n  >    .\t匹配任意字符，除了换行符\\n，当re.DOTALL标记被指定时，则可以匹配包括换行符的任意字符。\n  >    [...]\t用来表示一组字符,单独列出：[amk] 匹配 'a'，'m'或'k'\n  >    [^...]\t不在[]中的字符：[^abc] 匹配除了a,b,c之外的字符。\n  >    re*\t匹配0个或多个的表达式。\n  >    re+\t匹配1个或多个的表达式。\n  >    re?\t匹配0个或1个由前面的正则表达式定义的片段，非贪婪方式\n  >    re{ n}\t\n  >    re{ n,}\t精确匹配n个前面表达式。\n  >    re{ n, m}\t匹配 n 到 m 次由前面的正则表达式定义的片段，贪婪方式\n  >    a| b\t匹配a或b\n  >    (re)\tG匹配括号内的表达式，也表示一个组\n  >    (?imx)\t正则表达式包含三种可选标志：i, m, 或 x 。只影响括号中的区域。\n  >    (?-imx)\t正则表达式关闭 i, m, 或 x 可选标志。只影响括号中的区域。\n  >    (?: re)\t类似 (...), 但是不表示一个组\n  >    (?imx: re)\t在括号中使用i, m, 或 x 可选标志\n  >    (?-imx: re)\t在括号中不使用i, m, 或 x 可选标志\n  >    (?#...)\t注释.\n  >    (?= re)\t前向肯定界定符。如果所含正则表达式，以 ... 表示，在当前位置成功匹配时成功，否则失败。但一旦所含表达式已经尝试，匹配引擎根本没有提高；模式的剩余部分还要尝试界定符的右边。\n  >    (?! re)\t前向否定界定符。与肯定界定符相反；当所含表达式不能在字符串当前位置匹配时成功\n  >    (?> re)\t匹配的独立模式，省去回溯。\n  >    \\w\t匹配字母数字及下划线\n  >    \\W\t匹配非字母数字及下划线\n  >    \\s\t匹配任意空白字符，等价于 [\\t\\n\\r\\f].\n  >    \\S\t匹配任意非空字符\n  >    \\d\t匹配任意数字，等价于 [0-9].\n  >    \\D\t匹配任意非数字\n  >    \\A\t匹配字符串开始\n  >    \\Z\t匹配字符串结束，如果是存在换行，只匹配到换行前的结束字符串。c\n  >    \\z\t匹配字符串结束\n  >    \\G\t匹配最后匹配完成的位置。\n  >    \\b\t匹配一个单词边界，也就是指单词和空格间的位置。例如， 'er\\b' 可以匹配\"never\" 中的 'er'，但不能匹配 \"verb\" 中的 'er'。\n  >    \\B\t匹配非单词边界。'er\\B' 能匹配 \"verb\" 中的 'er'，但不能匹配 \"never\" 中的 'er'。\n  >    \\n, \\t, 等.\t匹配一个换行符。匹配一个制表符。等\n  >    \\1...\\9\t匹配第n个分组的子表达式。\n  >    \\10\t匹配第n个分组的子表达式，如果它经匹配。否则指的是八进制字符码的表达式。\n  >    ```\n\n- CGI通用网关接口\n\n  > CGI程序，运行在服务器，python脚本、perl脚本、shell脚本、C/C++程序等。\n  >\n  > Web服务器需支持cgi，通常在/cgi-bin/ /var/www/cgi-bin/\n  >\n  > cgi文件`.cgi`或者各自语言的源文件。\n  >\n  > ```python\n  > #!/usr/bin/python\n  > # -*- coding: UTF-8 -*-\n  >\n  > print \"Content-type:text/html\"\t#向浏览器显示的内容类型\n  > print                               # 空行，告诉服务器结束头部\n  > print '<html>'\n  > print '<head>'\n  > print '<meta charset=\"utf-8\">'\n  > print '<title>Hello Word - 我的第一个 CGI 程序！</title>'\n  > print '</head>'\n  > print '<body>'\n  > print '<h2>Hello Word! 我是来自菜鸟教程的第一CGI程序</h2>'\n  > print '</body>'\n  > print '</html>'\n  > ```\n  >\n  > 如上保存为hello.py，修改权限755。放置于cgi-bin/目录下，即可在浏览器中访问。\n  >\n  > - CGI程序中HTTP头部常用信息\n  >\n  >   | 头                  | 描述              |\n  >   | ------------------ | --------------- |\n  >   | Content-type       | 请求与实体对应的MIME信息。 |\n  >   | Expires:Date       | 响应过期的日期和时间      |\n  >   | Location:URL       | 重定向             |\n  >   | Last-modified:Date | 请求资源的最后修改时间     |\n  >   | Content-length:N   | 请求内容长度          |\n  >   | Set-Cookie:String  | 设置Http Cookie   |\n  >\n  > - CGI环境变量\n  >\n  >   所有CGI程序都接收以下环境变量\n  >\n  >   | 变量名             | 描述                                  |\n  >   | --------------- | ----------------------------------- |\n  >   | CONTENT_TYPE    | MIME类型                              |\n  >   | CONTENT_LENGTH  | 有效数据字节数                             |\n  >   | HTTP_COOKIE     | 客户机内cookie内容                        |\n  >   | HTTP_USER_AGENT | 客户及版本，浏览器信息等。                       |\n  >   | PATH_INFO       | 表示CGI程序名之后的其他路径信息                   |\n  >   | QUERY_STRING    | GET请求时，代表所传递的信息。                    |\n  >   | REMOTE_ADDR     | 客户机ip地址                             |\n  >   | REMOTE_HOST     | 客户机主机名                              |\n  >   | REQUEST_METHOD  | 提供脚本被调用的方法，http/1.0协议，仅GET和POST有意义。 |\n  >   | SCRIPT_FILENAME | CGI脚本完整路径                           |\n  >   | SERVER_NAME     | CGI脚本完整名称                           |\n  >   | SERVER_SOFTWARE | 调用CGI程序的http服务器的名称，版本信息。            |\n  >\n  >   ---\n  >\n  > ```python\n  >       #输出所有cgi环境变量信息\n  >       import os\n  >       print \"Content-type: text/html\"\n  >       print\n  >       print \"<meta charset=\\\"utf-8\\\">\"\n  >       print \"<b>环境变量</b><br>\"\n  >       print \"<ul>\"\n  >       for key in os.environ.keys():\n  >           print \"<li><span style='color:green'>%30s </span>:%s</li>\" % (key,os.environ[key])\n  >       print \"</ul>\"\n  > ```\n  >\n  > - GET&POST\n  >\n  >   浏览器请求服务器的两中主要方式\n  >\n  >   - GET方法\n  >\n  >     ```python\n  >     http://www.test.com/cgi-bin/hello.py?key1=value1&key2=value2\n  >     #GET方法相关注释\n  >     '''\n  >     请求可被缓存，请求保存在浏览器历史纪录，可被收藏书签，请求不应在处理敏感数据时使用，请求有长度限制，请求只应用于取回数据。\n  >     '''\n  >     ```\n  >\n  >   - POST方法\n  >\n  >     post方法较为安全可靠。\n  >\n  > - CGI中使用cookie\n  >\n  >   ```python\n  >   Set-cookie:name=name;expires=date;path=path;domain=domain;secure\n  >   ```\n  >\n  >   **注释：**\n  >\n  >   `name=name`: 需要设置cookie的值(name不能使用\";\"和\",\"号),有多个name值时用 \";\" 分隔，例如：name1=name1;name2=name2;name3=name3。\n  >   `expires=date`: cookie的有效期限,格式： expires=\"Wdy,DD-Mon-YYYY HH:MM:SS\"\n  >   `path=path`: 设置cookie支持的路径,如果path是一个路径，则cookie对这个目录下的所有文件及子目录生效，例如： path=\"/cgi-bin/\"，如果path是一个文件，则cookie指对这个文件生效，例如：path=\"/cgi-bin/cookie.cgi\"。\n  >   `domain=domain`: 对cookie生效的域名，例如：domain=\"www.runoob.com\"\n  >   `secure`: 如果给出此标志，表示cookie只能通过SSL协议的https服务器来传递。\n  >   cookie的接收是通过设置环境变量HTTP_COOKIE来实现的，CGI程序可以通过检索该变量获取cookie信息。\n  >\n  >   - cookie检索\n  >\n  >     ```python\n  >     #cookie信息存储在CGI环境变量HTTP_COOKIE中，\n  >     key1=value1;key=value2;......\n  >     ```\n  >\n  >   - 文件上传\n  >\n  >     ```html\n  >     <!DOCTYPE html>\n  >     <html>\n  >     <head>\n  >     <meta charset=\"utf-8\">\n  >     <title>菜鸟教程(runoob.com)</title>\n  >     </head>\n  >     <body>\n  >      <form enctype=\"multipart/form-data\" \n  >                          action=\"/cgi-bin/save_file.py\" method=\"post\">\n  >        <p>选中文件: <input type=\"file\" name=\"filename\" /></p>\n  >        <p><input type=\"submit\" value=\"上传\" /></p>\n  >        </form>\n  >     </body>\n  >     </html>\n  >     ```\n  >\n  >     上面的html形成一个界面，可以选择上传文件，调用save_file.py脚本\n  >\n  >     ```python\n  >     #!/usr/bin/python\n  >     # -*- coding: UTF-8 -*-\n  >\n  >     import cgi, os\n  >     import cgitb; cgitb.enable()\n  >\n  >     form = cgi.FieldStorage()\n  >\n  >     # 获取文件名\n  >     fileitem = form['filename']\n  >\n  >     # 检测文件是否上传\n  >     if fileitem.filename:\n  >        # 设置文件路径 \n  >        fn = os.path.basename(fileitem.filename)\n  >        open('/tmp/' + fn, 'wb').write(fileitem.file.read())\n  >\n  >        message = '文件 \"' + fn + '\" 上传成功'\n  >        \n  >     else:\n  >        message = '文件没有上传'\n  >        \n  >     print \"\"\"\\\n  >     Content-Type: text/html\\n\n  >     <html>\n  >     <head>\n  >     <meta charset=\"utf-8\">\n  >     <title>菜鸟教程(runoob.com)</title>\n  >     </head>\n  >     <body>\n  >        <p>%s</p>\n  >     </body>\n  >     </html>\n  >     \"\"\" % (message,)\n  >     ```\n  >\n  >     **记得文件的权限设置。**\n  >\n  >     ```python\n  >     #!/usr/bin/python\n  >     # -*- coding: UTF-8 -*-\n  >\n  >     # HTTP 头部\n  >     print \"Content-Disposition: attachment; filename=\\\"foo.txt\\\"\";\n  >     print\n  >     # 打开文件\n  >     fo = open(\"foo.txt\", \"rb\")\n  >\n  >     str = fo.read();\n  >     print str\n  >\n  >     # 关闭文件\n  >     fo.close()\n  >     ```\n  >\n  >     **以上为文件下载**\n\n- Python操作mysql数据库\n\n  > python支持多种数据库，有对应的模块。DB-API使用流程\n  >\n  > 1. 引入api模块。\n  >\n  > 2. 获取数据库链接。\n  >\n  > 3. 执行sql语句和存储。\n  >\n  > 4. 关闭连接。\n  >\n  >    ```python\n  >    #!/usr/bin/python\n  >    # -*- coding: UTF-8 -*-\n  >\n  >    import MySQLdb\n  >\n  >    # 打开数据库连接\n  >    db = MySQLdb.connect(\"localhost\",\"testuser\",\"test123\",\"TESTDB\" )\n  >\n  >    # 使用cursor()方法获取操作游标 \n  >    cursor = db.cursor()\n  >\n  >    # 使用execute方法执行SQL语句\n  >    cursor.execute(\"SELECT VERSION()\")\n  >\n  >    # 使用 fetchone() 方法获取一条数据库。\n  >    data = cursor.fetchone()\n  >\n  >    print \"Database version : %s \" % data\n  >\n  >    # 关闭数据库连接\n  >    db.close()\n  >    ```\n  >\n  > - python数据库mysql，需要mysqldb\n  >\n  >   ```python\n  >   fetchone();#获取下一个查询结果集\n  >   fetchall();#接收全部返回结果行\n  >   rowcount;#只读属性，返回执行execute()后影响的行数\n  >   ```\n  >\n  > - 事务\n  >\n  >   事务的四个属性：\n  >\n  >   - 原子性（atomicity）。一个事务是一个不可分割的工作单位，事务中包括的诸操作要么都做，要么都不做。\n  >   - 一致性（consistency）。事务必须是使数据库从一个一致性状态变到另一个一致性状态。一致性与原子性是密切相关的。\n  >   - 隔离性（isolation）。一个事务的执行不能被其他事务干扰。即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。\n  >   - 持久性（durability）。持续性也称永久性（permanence），指一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。接下来的其他操作或故障不应该对其有任何影响。\n  >\n  >   ***Python DB API 2.0 的事务提供了两个方法 commit 或 rollback。***\n\n- Python网络编程\n\n  > python提供两个级别的网络服务：\n  >\n  > 1、低级别支持基本Socket\n  >\n  > 2、高级别SocketServer\n  >\n  > ==Socket==套接字用于程序在主机间或者进程间通讯。\n  >\n  > ```python\n  > #pyton中socket函数\n  > socket.socket([family[,type[,proto]]])\n  > # family 套接字家族，可用AF_UNIX或AF_INET\n  > #type 类型，面向连接与否，SOCK_STREAM和SOCK_DGRAM\n  > #proto 默认为0\n  > ```\n  >\n  > **Python中socket函数可以参照api文档，此处不在赘述。**\n  >\n  > 示例：\n  >\n  > ```python\n  > #服务端\n  > #!/usr/bin/python\n  > # -*- coding: UTF-8 -*-\n  > # 文件名：server.py\n  >\n  > import socket               # 导入 socket 模块\n  >\n  > s = socket.socket()         # 创建 socket 对象\n  > host = socket.gethostname() # 获取本地主机名\n  > port = 12345                # 设置端口\n  > s.bind((host, port))        # 绑定端口\n  >\n  > s.listen(5)                 # 等待客户端连接\n  > while True:\n  >     c, addr = s.accept()     # 建立客户端连接。\n  >     print '连接地址：', addr\n  >     c.send('欢迎访问菜鸟教程！')\n  >     c.close()                # 关闭连接\n  >     \n  >     \n  > #客户端\n  > #!/usr/bin/python\n  > # -*- coding: UTF-8 -*-\n  > # 文件名：client.py\n  >\n  > import socket               # 导入 socket 模块\n  >\n  > s = socket.socket()         # 创建 socket 对象\n  > host = socket.gethostname() # 获取本地主机名\n  > port = 12345                # 设置端口好\n  >\n  > s.connect((host, port))\n  > print s.recv(1024)\n  > s.close()  \n  > ```\n  >\n  > **Python Internet模块**\n  >\n  > | 协议     | 功能用处      | 端口号  | Python模块                 |\n  > | ------ | --------- | ---- | ------------------------ |\n  > | HTTP   | 网页访问      | 80   | httplib、urllib、xmlrpclib |\n  > | NNTP   | 阅读、张贴新闻文章 | 119  | nntplib                  |\n  > | FTP    | 文件传输      | 20   | ftplib、urllib            |\n  > | SMTP   | 发送邮件      | 25   | smtplib                  |\n  > | POP3   | 接收邮件      | 110  | poplib                   |\n  > | IMAP4  | 获取邮件      | 143  | imaplib                  |\n  > | Telnet | 命令行       | 23   | telnetlib                |\n  > | Gopher | 信息查找      | 70   | gopherlib、urllib         |\n  >\n  > - smtp邮件发送\n  >\n  >   语法格式：\n  >\n  >   ```python\n  >   import smtplib\n  >   #创建对象\n  >   smtpObj = smtplib.SMTP([host[,port[,local_hostname]]])\n  >   #发送邮件\n  >   SMTP.sendmail(from_addr,to_addr,msg[,mail_options,rcpt_options])\n  >   ```\n  >\n  >   示例：\n  >\n  >   ```python\n  >   #!/usr/bin/python\n  >   # -*- coding: UTF-8 -*-\n  >\n  >   import smtplib\n  >   from email.mime.text import MIMEText\n  >   from email.header import Header\n  >\n  >   sender = 'server@server.com'\n  >   receivers = ['receiver@receiver.com']  # 接收邮件，可设置为你的QQ邮箱或者其他邮箱\n  >\n  >   # 三个参数：第一个为文本内容，第二个 plain 设置文本格式，可以是html，text等。第三个 utf-8 设置编码\n  >   message = MIMEText('Python 邮件发送测试...', 'plain', 'utf-8')\n  >   message['From'] = Header(\"菜鸟教程\", 'utf-8')\n  >   message['To'] =  Header(\"测试\", 'utf-8')\n  >\n  >   subject = 'Python SMTP 邮件测试'\n  >   message['Subject'] = Header(subject, 'utf-8')\n  >   ```\n  >\n  >\n  >   try:\n  >       smtpObj = smtplib.SMTP('localhost')\n  >       smtpObj.sendmail(sender, receivers, message.as_string())\n  >       print \"邮件发送成功\"\n  >   except smtplib.SMTPException:\n  >       print \"Error: 无法发送邮件\"\n  >   ```\n  >\n  >   **使用第三方SMTP服务**\n  >\n  >   ```python\n  >   # 第三方 SMTP 服务\n  >   mail_host=\"smtp.XXX.com\"  #设置服务器\n  >   mail_user=\"XXXX\"    #用户名\n  >   mail_pass=\"XXXXXX\"   #密码\n  >\n  >   sender = 'from@runoob.com'\n  >   receivers = ['429240967@qq.com']  # 接收邮件，可设置为你的QQ邮箱或者其他邮箱\n  >\n  >   message = MIMEText('Python 邮件发送测试...', 'plain', 'utf-8')\n  >   message['From'] = Header(\"菜鸟教程\", 'utf-8')\n  >   message['To'] =  Header(\"测试\", 'utf-8')\n  >\n  >   subject = 'Python SMTP 邮件测试'\n  >   message['Subject'] = Header(subject, 'utf-8')\n  >\n  >\n  >   try:\n  >       smtpObj = smtplib.SMTP() \n  >       smtpObj.connect(mail_host, 25)    # 25 为 SMTP 端口号\n  >       smtpObj.login(mail_user,mail_pass)  \n  >       smtpObj.sendmail(sender, receivers, message.as_string())\n  >       print \"邮件发送成功\"\n  >   except smtplib.SMTPException:\n  >       print \"Error: 无法发送邮件\"\n  >   ```\n  >\n  >   创建带附件的邮件发送\n  >\n  > ```python\n  >   #!/usr/bin/python\n  >   # -*- coding: UTF-8 -*-\n  >\n  >   import smtplib\n  >   from email.mime.text import MIMEText\n  >   from email.mime.multipart import MIMEMultipart\n  >   from email.header import Header\n  >\n  >   sender = 'from@runoob.com'\n  >   receivers = ['429240967@qq.com']  # 接收邮件，可设置为你的QQ邮箱或者其他邮箱\n  >\n  >   #创建一个带附件的实例\n  >   message = MIMEMultipart()\n  >   message['From'] = Header(\"菜鸟教程\", 'utf-8')\n  >   message['To'] =  Header(\"测试\", 'utf-8')\n  >   subject = 'Python SMTP 邮件测试'\n  >   message['Subject'] = Header(subject, 'utf-8')\n  >\n  >   #邮件正文内容\n  >   message.attach(MIMEText('这是菜鸟教程Python 邮件发送测试……', 'plain', 'utf-8'))\n  >\n  >   # 构造附件1，传送当前目录下的 test.txt 文件\n  >   att1 = MIMEText(open('test.txt', 'rb').read(), 'base64', 'utf-8')\n  >   att1[\"Content-Type\"] = 'application/octet-stream'\n  >   # 这里的filename可以任意写，写什么名字，邮件中显示什么名字\n  >   att1[\"Content-Disposition\"] = 'attachment; filename=\"test.txt\"'\n  >   message.attach(att1)\n  >\n  >   # 构造附件2，传送当前目录下的 runoob.txt 文件\n  >   att2 = MIMEText(open('runoob.txt', 'rb').read(), 'base64', 'utf-8')\n  >   att2[\"Content-Type\"] = 'application/octet-stream'\n  >   att2[\"Content-Disposition\"] = 'attachment; filename=\"runoob.txt\"'\n  >   message.attach(att2)\n  >\n  >   try:\n  >       smtpObj = smtplib.SMTP('localhost')\n  >       smtpObj.sendmail(sender, receivers, message.as_string())\n  >       print \"邮件发送成功\"\n  >   except smtplib.SMTPException:\n  >       print \"Error: 无法发送邮件\"\n  > ```\n  >\n  > - **Python多线程**\n  >\n  >   关于多线程需要注意两点：\n  >\n  >   - 线程可以被中断(抢占)\n  >   - 其他线程运行时，线程可以休眠(退让)\n  >\n  >   **python使用线程两种方式**\n  >\n  >   1、函数\n  >   ```python\n  >   thread.start_new_thread(function,args[,kwargs])\n  >   # 注释：function-线程函数，args-参数，必须是tuple类型。kwargs-可选参数。\n  >   ```\n  >   示例：\n  >   ```python\n  >   #!/usr/bin/python\n  >   # -*- coding: UTF-8 -*-\n  >\n  >   import thread\n  >   import time\n  >\n  >   # 为线程定义一个函数\n  >   def print_time( threadName, delay):\n  >      count = 0\n  >      while count < 5:\n  >         time.sleep(delay)\n  >         count += 1\n  >         print \"%s: %s\" % ( threadName, time.ctime(time.time()) )\n  >\n  >   # 创建两个线程\n  >   try:\n  >      thread.start_new_thread( print_time, (\"Thread-1\", 2, ) )\n  >      thread.start_new_thread( print_time, (\"Thread-2\", 4, ) )\n  >   except:\n  >      print \"Error: unable to start thread\"\n  >\n  >   while 1:\n  >      pass\n  >   ```\n  >\n  >   *线程结束依靠线程函数，或者手动`thread.exit()`,`抛异常`。*\n  >\n  > - ***线程模块***\n  >\n  >   1、`thread`和`threading`两个标准库\n  >\n  >   ```python\n  >   threading.currentThread();\n  >   threading.enumerate();\n  >   threading.activeCount();\n  >   run();start();join([time]);isAlive();getName();setName();\n  >   ```\n  >\n  >   2、使用Threading模块创建线程\n  >\n  >   ```python\n  >   #继承threading.Thread然后重写__init__方法和run方法\n  >   #!/usr/bin/python\n  >   # -*- coding: UTF-8 -*-\n  >\n  >   import threading\n  >   import time\n  >\n  >   exitFlag = 0\n  >\n  >   class myThread (threading.Thread):   #继承父类threading.Thread\n  >       def __init__(self, threadID, name, counter):\n  >           threading.Thread.__init__(self)\n  >           self.threadID = threadID\n  >           self.name = name\n  >           self.counter = counter\n  >       def run(self):                   #把要执行的代码写到run函数里面 线程在创建后会直接运行run函数 \n  >           print \"Starting \" + self.name\n  >           print_time(self.name, self.counter, 5)\n  >           print \"Exiting \" + self.name\n  >\n  >   def print_time(threadName, delay, counter):\n  >       while counter:\n  >           if exitFlag:\n  >               thread.exit()\n  >           time.sleep(delay)\n  >           print \"%s: %s\" % (threadName, time.ctime(time.time()))\n  >           counter -= 1\n  >\n  >   # 创建新线程\n  >   thread1 = myThread(1, \"Thread-1\", 1)\n  >   thread2 = myThread(2, \"Thread-2\", 2)\n  >\n  >   # 开启线程\n  >   thread1.start()\n  >   thread2.start()\n  >\n  >   print \"Exiting Main Thread\"\n  >   ```\n  >\n  > - 线程同步\n  >\n  >   Python中线程同步使用`Lock`和`Rlock`两个对象，都含有`acquire`和`release`方法。\n  >\n  >   示例：\n  >\n  >   ```python\n  >   #!/usr/bin/python\n  >   # -*- coding: UTF-8 -*-\n  >\n  >   import threading\n  >   import time\n  >\n  >   class myThread (threading.Thread):\n  >       def __init__(self, threadID, name, counter):\n  >           threading.Thread.__init__(self)\n  >           self.threadID = threadID\n  >           self.name = name\n  >           self.counter = counter\n  >       def run(self):\n  >           print \"Starting \" + self.name\n  >          # 获得锁，成功获得锁定后返回True\n  >          # 可选的timeout参数不填时将一直阻塞直到获得锁定\n  >          # 否则超时后将返回False\n  >           threadLock.acquire()\n  >           print_time(self.name, self.counter, 3)\n  >           # 释放锁\n  >           threadLock.release()\n  >\n  >   def print_time(threadName, delay, counter):\n  >       while counter:\n  >           time.sleep(delay)\n  >           print \"%s: %s\" % (threadName, time.ctime(time.time()))\n  >           counter -= 1\n  >\n  >   threadLock = threading.Lock()\n  >   threads = []\n  >\n  >   # 创建新线程\n  >   thread1 = myThread(1, \"Thread-1\", 1)\n  >   thread2 = myThread(2, \"Thread-2\", 2)\n  >\n  >   # 开启新线程\n  >   thread1.start()\n  >   thread2.start()\n  >\n  >   # 添加线程到线程列表\n  >   threads.append(thread1)\n  >   threads.append(thread2)\n  >\n  >   # 等待所有线程完成\n  >   for t in threads:\n  >       t.join()\n  >   print \"Exiting Main Thread\"\n  >   ```\n  >\n  > - **线程优先级队列**\n  >\n  >   Python的Queue模块提供了FIFO和LIFO队列，Queue、LifoQueue和优先级PriorityQueue。\n\n- Python其他特性\n\n  > - xml解析\n  >\n  > xml解析通用的有`SAX`、`DOM`、python有`ElementTree`\n  >\n  > *一般编程中都很少用SAX和DOM解析，都有自己平台的优化解析方式。*\n  >\n  > **注：**因DOM需要将XML数据映射到内存中的树，一是比较慢，二是比较耗内存，而SAX流式读取XML文件，比较快，占用内存少，但需要用户实现回调函数（handler）。\n  >\n  > - GUI编程\n  >\n  >   python提供多种图形界面库`Thinter`、`wxPython`、`Jython`\n  >\n  >   **Tkinter**\n  >\n  >   ```python\n  >   import Tkinter\n  >   top = Tkinter.Tk()\n  >   #进入消息循环\n  >   top.mainloog()\n  >   #如上代码执行，可产生小窗口界面了。\n  >   ```\n  >\n  >   Tkinter包含常用的窗口控件，以及属性和方法，使用时候可差用api。\n  >\n  > - JSON\n  >\n  >   python使用Demjson，`decode`和`encode`解码编码。\n  >\n  >   ```python\n  >   demjson.encode(self,obj,nest_level=0)\n  >   ```\n  >\n  >   示例：(构建json)\n  >\n  >   ```python\n  >   #!/usr/bin/python\n  >   import demjson\n  >\n  >   data = [{'a':1,'b':2,'c':3,'d':4,'e':5}]\n  >\n  >   json = demjson.encode(data)\n  >   print(json)\n  >   ```\n  >\n  >   解析Json\n  >\n  >   ```python\n  >   demjson.decode(self,txt)\n  >   ```\n  >\n  >   ```python\n  >   #!/usr/bin/python\n  >   import demjson\n  >\n  >   json = '{\"a\":1,\"b\":2,\"c\":3,\"d\":4,\"e\":5}';\n  >\n  >   text = demjson.decode(json)\n  >   print(text)\n  >   ```\n\n\n\n**初次接触Python，笔记难免简单初级，仅供自己学习只用，希望也对网友有所益处。**\n\n\n\n\n\n\n","source":"_posts/Python学习笔记.md","raw":"---\ntitle: \"Python学习笔记\"\ndate: 2016-11-03 16:57\nauthor: 冰路梦\ntag:\n    - Linux\ncategories:\n    - Linux\n---\n\n# Python学习笔记\n\n<!-- TOC -->\n\n- [Python学习笔记](#python学习笔记)\n    - [一、基本语法](#一基本语法)\n    - [二、 数据与逻辑](#二-数据与逻辑)\n    - [三、结构与api](#三结构与api)\n    - [四、Python高级教程](#四python高级教程)\n\n<!-- /TOC -->\n## 一、基本语法\n\n`python2.x与python3.x区别很大，新版特性很强，更优化，此笔记学习新版本特性，暂不关注旧版本。`\n\n- 标识符\n\n  > 1. 标识符：数字、字母、下划线，且数字不开头。\n  > 2. 区分大小写；\n  > 3. 单下划线开头`_foo`表示不能直接访问，需要用接口访问，不可\"from xxx import\"导入。`__foo`双下划线表示私有。前后双下划线`___foo__`特殊函数。\n\n- 保留字符\n\n  > and、exec、not、assert、finally、or、break、for、pass、class、from、print、continue、global、raise、def、if、return、del、import、try、elif、in、while、else、is、with、except、lambda、yield。\n  >\n  > Python3中`end`可以将结果输入到同一行，或者输出尾部追加不同的字符\n  >\n  > ```python\n  > #Fibonacci Series: 斐波那契数列\n  > a,b = 0,1\n  > while b<1000:\n  >     print(b,end=',')\n  >     a,b = b,a+b\n  > ```\n  >\n  > ​\n\n- 行与缩进\n\n  > **Python区别于其他语言最大处，python不用{}来控制类、函数和逻辑块。而是用缩进，空格数无妨，但是逻辑块前后必须相同个数空格，使用空格或者tab都行，但是最好别混用**\n  >\n  > ```python\n  > if True:\n  >     print \"True\"\n  > else:\n  >     print \"False\"\n  > ```\n  >\n  > python一般新的一行意味着上个语句块结束。但是多行语句可以用`\\`符号：\n  >\n  > ```python\n  > string = abc + \\\n  > \t\tbcd + \\\n  >     \tefg\n  > # 要是有{}、[]、()的语句，断为多行也无妨。\n  > girls = ['allen','angle'\n  >         'candy','lily'\n  >         'merry']\n  > ```\n\n- 引号与注释\n\n  > python的字符串可以用单引号`'`、双引号`\"`、三引号`'''`包括，其中三引号可以多行分段，有时候可以用作注释。\n  >\n  > `#`符号表示注释，可写在当行，或者代码尾部。多行注释使用三个单引号` ''' `，或三个双引号`\"\"\"`包括。\n  >\n  > ```python\n  > #单行注释\n  > if True\n  > \tprint 'hello' #单个注释，新版中需要加()，视为函数\n  > '''\n  > 多行注释\n  > 是这么写的\n  > 真的可以么\n  > 在markdown语法中\n  > '''\n  > \"\"\"\n  > 似乎可以\n  > 好像是的哦\n  > \"\"\"    \n  > ```\n  >\n  > *函数之间，类与函数间用`空行`分开，便于阅读和维护*\n\n- 零碎语法\n\n  >- 多条语句同一行，可以`;`分割。\n  >\n  >- 同一代码组，首行关键字后`:`结尾，同一代码组前后空白数相同。\n  >\n  >- 旧版中文编码需要头文件注释\n  >\n  >- Python中True和False，似乎不能小写哦！\n  >\n  >  ```python\n  >  #!/usr/bin/python\n  >  #_*_coding:utf-8 _*_\n  >  #或者\n  >  #coding=utf-8\n  >  #新版python已经默认支持了。\n  >  ```\n  >\n\n\n##  二、 数据与逻辑\n\n- 变量类型\n\n  > **python变量赋值不需要类型声明**\n  >\n  > ```python\n  > counter = 100 #整型\n  > miles = 1000.0 # 浮点型\n  > name = \"John\" #字符串\n  > a = b = c = 1 #多个变量同时赋值\n  > a, b, c = 1,2,\"John\" #多变量多类型赋值,个数必须对应。\n  > ```\n  >\n  > python五种标准数据类型：\n  >\n  > - Numbers数字\n  >\n  >   该类型变量赋值后不可改变，重新赋值实质上是分配新的对象。\n  >\n  >   ```python\n  >   a = 1,b=2,c=9\n  >   #del是删除语句\n  >   del a\n  >   del a,b\n  >   # Number有四种不同类型，int、long、float、complex（复数）\n  >   #注意：python新版中，没有long，多了一个bytes。\n  >   8899887897l#后面的l容易与1混淆，一般写作L\n  >   ```\n  >\n  > - String字符串\n  >\n  >   由字母、数字、下划线组成，两种顺序，0开始至后，-1开始向前。\n  >\n  >   string的截取\n  >\n  >   ```python\n  >   s = 'I`m a good boy'\n  >   s[3:9]#其结果是截取对应标号的字符串为新的字符，可以0--size，也可以-1--向前。记住区间[)右边取不到哦\n  >   print s #输出s字符串\n  >   print s[1]#输入下标为1的字母\n  >   print s[1:5]#输出下标1-5，但不含5那个字符\n  >   print s + \"add\" # 字符串连接\n  >   print s * 2 # 重复输出两次\n  >   ```\n  >\n  > - List列表\n  >\n  >   python列表可以混合不同类型数据，嵌套列表，可以使用类似string的方法取子列表。`[]`表示\n  >\n  >   ```python\n  >   list = ['python',666,2.14,'study']\n  >   tinylist = [123,'John']\n  >   print list #完整输出\n  >   print list[0]#输出指定下标元素\n  >   print list[1:3]#输出1-3的元素\n  >   print list[2:]#输出2之后所有元素\n  >   print tinylist * 2 # 重复两次输出\n  >   print list + tinylist#组合列表\n  >   ```\n  >\n  > - Tuple元组\n  >\n  >   元组类似list，`()`标识，`,`分割，不能二次赋值。\n  >\n  >   ```python\n  >   list = [1,2,'abc']\n  >   tuple = (1,2,'abc')\n  >   list[0] = 'ABC'#可以更新\n  >   tuple[0]= 4 #错误，元组数据不能更新\n  >   ```\n  >\n  > - Dictionary字典\n  >\n  >   Dictionary被视为python最为灵活的内置数据结构，列表为有序对象集合，字典则为无序元素结合。区别在于，Dictionary类似与map集合，键值对key-value。`{}`标识\n  >\n  >   ```python\n  >   dict = {}\n  >   dict['one'] = \"This is one\"\n  >   dict[2] = \"This is 2\"\n  >   tinydict = {'name':'john','code':1234,'dept':'good',22:879.0L}\n  >   print dict['one'] #根据键值输出元素\n  >   print dict # 输出所有元素\n  >   print dict.keys()#输出所有key\n  >   print tinydict.vales()#输出所有值value\n  >   ```\n  >\n  > - Set(集合)\n  >\n  >   无序不重复的序列，主要用于成员关系测试和重复文件删除。\n  >\n  >   可以使用大括号`({})`或者`set()`函数创建集合，注意：创建一个空集合必须用 set() 而不是 `{ }`，因为 `{ }` 是用来创建一个空字典。\n  >\n  > **类型转换**，对应数据类型作为函数名即可,返回结果。\n  >\n  > |          函数           |               描述                |\n  > | :-------------------: | :-----------------------------: |\n  > |    int(x [,base])     |            将x转换为一个整数            |\n  > |   long(x [,base] )    |           将x转换为一个长整数            |\n  > |       float(x)        |           将x转换到一个浮点数            |\n  > | complex(real [,imag]) |             创建一个复数              |\n  > |        str(x)         |          将对象 x 转换为字符串           |\n  > |        repr(x)        |         将对象 x 转换为表达式字符串         |\n  > |       eval(str)       |  用来计算在字符串中的有效Python表达式,并返回一个对象  |\n  > |       tuple(s)        |          将序列 s 转换为一个元组          |\n  > |        list(s)        |          将序列 s 转换为一个列表          |\n  > |        set(s)         |             转换为可变集合             |\n  > |        dict(d)        | 创建一个字典。d 必须是一个序列 (key,value)元组。 |\n  > |     frozenset(s)      |            转换为不可变集合             |\n  > |        chr(x)         |          将一个整数转换为一个字符           |\n  > |       unichr(x)       |        将一个整数转换为Unicode字符        |\n  > |        ord(x)         |          将一个字符转换为它的整数值          |\n  > |        hex(x)         |        将一个整数转换为一个十六进制字符串        |\n  > |        oct(x)         |        将一个整数转换为一个八进制字符串         |\n  >\n\n- 运算符号\n\n  >Python运算符支持一下类型：\n  >\n  >- 算术运算符\n  >- 比较（关系）运算符\n  >- 赋值运算符\n  >- 逻辑运算符\n  >- 位运算符\n  >- 成员运算符\n  >- 身份运算符\n  >\n  >**运算符有优先级**\n  >\n  >1. 算术运算符\n  >\n  >   | 运算符  | 描述    | 实例     |\n  >   | ---- | ----- | ------ |\n  >   | +    | 加号    | 1+2得3  |\n  >   | -    | 减号    | 3-1得2  |\n  >   | *    | 乘号    | 2*2得4  |\n  >   | /    | 除号    | 9/3得3  |\n  >   | %    | 取模，求余 | 5%2得1  |\n  >   | **   | 幂     | 2**3得8 |\n  >   | //   | 取整除   | 9//2得4 |\n  >\n  >   示例：\n  >\n  >   ```python\n  >   #算术运算符，得到运算结果\n  >   a,b,c = 12,2,3#多变量同时赋值\n  >   print (a+b)\n  >   print (a-b)\n  >   print (a*b)\n  >   print (a/b)\n  >   print (a%c)\n  >   print (b**c)\n  >   print (c//b)\n  >   ```\n  >\n  >2. 比较运算符\n  >\n  >   | 运算符  | 描述          |\n  >   | ---- | ----------- |\n  >   | ==   | 等于，比较对象是否相等 |\n  >   | !=   | 不等于         |\n  >   | <>   | 不等于         |\n  >   | >    | 大于          |\n  >   | <    | 小于          |\n  >   | \\>=  | 大于等于        |\n  >   | <=   | 小于等于        |\n  >\n  >   示例：\n  >\n  >   ```python\n  >   #关系运算符，返回结果为 True或False\n  >   a,b,c = 12,2,3\n  >   print(a==b)\n  >   print(a!=b)\n  >   print(a<>b)#，新版python中，已经废弃。\n  >   print(a>b)\n  >   print(a<b)\n  >   print(a>=b)\n  >   print(a<=b)\n  >   ```\n  >\n  >3. 赋值运算符\n  >\n  >   | 运算符  | 描述   | 实例                 |\n  >   | ---- | ---- | ------------------ |\n  >   | =    | 简单赋值 | c=a+b,将a+b的结果赋值给c  |\n  >   | +=   | 加法赋值 | c+=a等效于c=c+a       |\n  >   | -=   | 减法赋值 | c-=a等效于c=c-a       |\n  >   | *=   | 乘法赋值 | c*=a等效于c=c\\*a      |\n  >   | /=   | 除法赋值 | c/=a等效于c=c/a       |\n  >   | %=   | 取模赋值 | c%=a等效于c=c%a       |\n  >   | **=  | 幂赋值  | c\\*\\*=a等效于c=c\\*\\*a |\n  >   | //=  | 取整赋值 | c//=a等效于c=c//a     |\n  >\n  >   示例：\n  >\n  >   ```python\n  >   #简单演示\n  >   a,b,c=12,2,3\n  >   #print(c=a)#不能直接在print内写赋值\n  >   c=a\n  >   print(c)\n  >   c=c**b\n  >   print(c**=b)\n  >   ```\n  >\n  >4. 位运算符\n  >\n  >   位运算既是将数字看作二进制，进行运算。\n  >\n  >   | 运算符  | 描述                                       |\n  >   | ---- | ---------------------------------------- |\n  >   | &    | **`按位与`**：两数二进制对齐，对应位置都是1，则为1，否则为0。      |\n  >   | \\|   | **`按位或`**：两数二进制，对应位置有一个为1，则为1。           |\n  >   | ^    | **`按位异或`**：两数二进制，对应位置相异，则为1。             |\n  >   | ~    | **`按位取反`**：对数据的二进制，各个位置取相反，变1为0，变0为1。    |\n  >   | <<   | **`左移动`**：运算数二进制全部左移动若干位，\"<<\"右边的数决定左移位数。**高位丢弃，低位补0** |\n  >   | \\>>  | **`右移动`**：运算数二进制全部右移动软敢为，\">>\"右边的数决定右移位数。 |\n  >\n  >   示例：\n  >\n  >   ```python\n  >   a = 60 # 60 = 0011 1100\n  >   b = 13 # 13 = 0000 1101\n  >   c = 0\n  >   c = a & b\n  >   print(\"a & b :\",c)# 12 = 0000 1100\n  >   c = a | b\n  >   print(\"a | b :\",c)# 61 = 0011 1101\n  >   c = a ^ b\n  >   print(\"a ^ b :\",c)# 49 = 0011 0001\n  >   c = ~a\n  >   print(\"~a :\",c)# -61 = 1100 0011\n  >   c = a<<2\n  >   print(\"a<<2 :\",c) # 240 = 1111 0000\n  >   c = a>>2\n  >   print(\"a>>2 :\",c) # 15 = 0000 1111\n  >   ```\n  >\n  >5. 逻辑运算符\n  >\n  >   | 运算符  | 表达式     | 描述                                       |\n  >   | ---- | ------- | ---------------------------------------- |\n  >   | and  | x and y | **`布尔与`** ：如果x为False，x and y返回False，否则返回y的计算值。 |\n  >   | or   | x or y  | **`布尔或`**：如果x非零，返回x值，否则返回y的计算值。          |\n  >   | not  | not x   | **`布尔非`**：若x为True，返回False，若x为False，返回True。 |\n  >\n  >   示例:\n  >\n  >   ```python\n  >   #True是1，False是0\n  >   \"\"\"所以可以在逻辑运算中判断，是否为0 或者1，来决定true和false\"\"\"\n  >   a, b, c = 12,2,3\n  >   print(a and b)#似乎非0，即认为True\n  >   print(a or b)\n  >   print(not a)\n  >   ```\n  >\n  >6. 成员运算符\n  >\n  >   | 运算符    | 描述                                     |\n  >   | ------ | -------------------------------------- |\n  >   | in     | x in y，若有True，无False。**`y为列表、字符串、元组`** |\n  >   | not in | x not in y 若y中无x则True，有则False。         |\n  >\n  >   示例：\n  >\n  >   ```python\n  >   a = 10;b = 20;list = [1,2,10,15]\n  >   print(a in list)\n  >   print(a not in list)\n  >   print(b in list)\n  >   ```\n  >\n  >7. 身份运算符\n  >\n  >   | 运算符    | 描述                                       |\n  >   | ------ | ---------------------------------------- |\n  >   | is     | `is`判断两标识符是否引用同一对象，id同则返回True，否则False。   |\n  >   | is not | `is not`判断两标识符是不是引用不同对象，id不同则返回True，否则False。 |\n  >\n  >   示例：\n  >\n  >   ```python\n  >   a = 10;b = 20;\n  >   print(a is b);print(a is not b);\n  >   ```\n  >\n  >8. 运算符优先级\n  >\n  >   | 运算符                      | 优先级描述                |\n  >   | ------------------------ | -------------------- |\n  >   | **                       | 指数，最高优先级             |\n  >   | ~，+，-                    | 按位取反、一元加(+@)、一元减(-@) |\n  >   | *，/，%，//                 | 乘、除、取模、取整            |\n  >   | +，-                      | 加法、减法                |\n  >   | \\>>，<<                   | 右移动、左移动              |\n  >   | &                        | 位'AND'               |\n  >   | ^，\\|                     | 位运算                  |\n  >   | <=，<，>，>=                | 比较运算符                |\n  >   | <>，==，!=                 | 等于运算符                |\n  >   | =，%=，/=，//=，-=，+=，*=，**= | 赋值运算符                |\n  >   | is，is not                | 身份运算符                |\n  >   | in ，not in               | 成员运算符                |\n  >   | not，or，and               | 逻辑运算符                |\n  >\n  >   **注意：若是不确定优先级，可以用()来控制**\n\n- 条件语句\n\n  > Python中指定非0，和非null，的值为Ture，0和null为False。\n  >\n  > ```python\n  > # python 中多个条件语句，if..elif...elif...else\n  > if condition1:\n  >     statement1\n  > elif condition2:\n  >     statement2\n  > else:\n  >     statement\n  > if (1!=2) : print \"OK\";#单行语句，可以放在一起。\n  > ```\n  >\n  > **python 没有switch语句，只能多个elif语句结合逻辑符号`and,or,not`来控制多分支语句。**\n\n- 循环语句\n\n  > 编程语言基本都有for、while和嵌套循环。python没有do...while循环。\n  >\n  > 循环控制语句有break、continue和pass。\n  >\n  > - while循环\n  >\n  >   ```python\n  >   # while 循环格式\n  >   while condition:#条件只有True和False的本质区别，但是请记住，Python中的True的定义比较广，非0，非null即为True。\n  >       statement\n  >   ```\n  >\n  >   控制语句break、continue\n  >\n  >   - break，退出循环。\n  >   - continue，跳出本次循环，进入下一次。不执行continue之后的语句。\n  >\n  >   *无限循环：判断条件为永远为True*\n  >\n  > - $for...else$\n  >\n  >   Python中有for...else和while...else循环。\n  >\n  >   `表示for或while语句正常执行后，else语句执行。`注意：循环体正常执行，而不是break出来，才会运行else语句。\n  >\n  >   每一轮的循环，for或while内没有break的话，都会执行else语句。\n  >\n  > - for循环\n  >\n  >   用于遍历任何序列项目，如列表字符串。格式：\n  >\n  >   - 普通方式\n  >\n  >   ```python\n  >   for iterating_var in sequence:\n  >       statements\n  >       \n  >   #如下示例\n  >\n  >   for letter in 'python text':\n  >       print ('当前字母：',letter)\n  >       \n  >   fruits = ['banana','apple','orange']\n  >   for fruit in fruits:\n  >       print(\"水果：\",fruit)\n  >   ```\n  >\n  >   - 使用索引\n  >\n  >     ```python\n  >     fruits = ['banana','orange','apple']\n  >     for index in range(len(fruits)):\n  >         print(\"fruit:\",fruits[index])\n  >     ```\n\n- 循环嵌套\n\n  > 类似其他编程语言，python也允许循环嵌套。\n  >\n  > ```python\n  > for iterating_var in sequence:\n  >     for interating_var in sequence:\n  >         statements\n  >     statements\n  > #python中注意缩进来区分代码块，while嵌套类似，也可以互相嵌套。\n  > ```\n  >\n  > - break、continue语句类似其他编程语言，上面已做介绍。\n  >\n  > - pass语句，不做任何事情，一般用做占位语句\n  >\n  >   ```python\n  >   for letter in 'python':\n  >       if letter == 'h':\n  >           pass\n  >       \tprint(\"just for blank\")\n  >       print(\"letter:\",letter)\n  >   ```\n\n\n## 三、结构与api\n\n- Number数据类型\n\n  > Python的Number数据类型，不允许改变，每次赋值都会是一个新的对象。\n  >\n  > ```python\n  > a = 10\n  > b = 12\n  > a = 20 #内存地址已经变了，不像java那样。\n  > #del语句删除\n  > del a\n  > del a,b\n  > ```\n  >\n  > **Number数据支持四种子类型**\n  >\n  > - int整型，正数、负数，无小数点。\n  > - long长整型，无限大小的整数，后加`L`或`l`。\n  > - float浮点型，整数、小数和科学计数。\n  > - complex复数，实数和虚数构成，a+bj或complex(a,b)，a实数，b虚数。\n\n- Python数学函数\n\n  > | 函数            | 返回值                                   |\n  > | ------------- | ------------------------------------- |\n  > | abs(x)        | 绝对值：返回x的绝对值                           |\n  > | ceil(x)       | 取大整：返回x的上入整数，不是四舍五入。如math.ceil(4.1)得5 |\n  > | cmp(x,y)      | 对比：x\\<y，返回-1，x=y返回0，x\\>y 返回1          |\n  > | exp(x)        | e次幂：e的x次幂                             |\n  > | fabs(x)       | 绝对值：返回x的绝对值，含小数点。                     |\n  > | floor(x)      | 取小整：返回x的向下整数。                         |\n  > | log(x)        | log函数                                 |\n  > | max（x1，x2...) | Max函数。                                |\n  > | min(x1,x2...) | Min函数。                                |\n  > | modf(x)       | 分离：返回x的整数和小数部分，符号与x相同，整数部分为float型。    |\n  > | pow(x,y)      | 幂函数：x**y的值                            |\n  > | rount(x[,n])  | 舍入值：x的四舍五入，舍入到小数后n位。                  |\n  > | sqrt(x)       | 开方：x的平方根，x可为负数，返回实数。                  |\n  >\n  > **Math函数**\n  >\n  > - 随机函数random\n  >\n  >   | 函数                             | 描述                                     |\n  >   | ------------------------------ | -------------------------------------- |\n  >   | choice(seq)                    | random.choice(range(10))，从0--9随机挑一个整数。 |\n  >   | randrange([start],stop,[step]) | 指定范围制定基数获取随机数。                         |\n  >   | random()                       | [0,1)内随机数                              |\n  >   | seed([x])                      | 随机数生成器的种子？？                            |\n  >   | shuffle(lst)                   | 序列元素的随机排序                              |\n  >   | uniform(x,y)                   | [x,y]范围内随机生成下一个实数                      |\n  >\n  >   ==注意函数参数[step]之类的，表示为可选参数==\n  >\n  > - 三角函数\n  >\n  >   | 函数         | 描述                              |\n  >   | ---------- | ------------------------------- |\n  >   | acos(x)    | 反余弦（弧度值）                        |\n  >   | asin(x)    | 反正弦                             |\n  >   | atan(x)    | 反正切                             |\n  >   | atan2(y,x) | 指定x，y坐标的反正切值                    |\n  >   | cos(x)     | 余弦                              |\n  >   | hypot(x,y) | 返回欧几里得范数sqrt(x\\*x+y\\*y)         |\n  >   | sin(x)     | 正弦                              |\n  >   | tan(x)     | 正切                              |\n  >   | degress(x) | 弧度转角度。如degress(math.pi/2),得90.0 |\n  >   | radins(x)  | 角度转弧度                           |\n  >\n  > - 数学常量\n  >\n  >   | 常量   | 描述    |\n  >   | ---- | ----- |\n  >   | pi   | 圆周率   |\n  >   | e    | 自然常数e |\n\n- 字符串\n\n  > python中字符串string可用`'`或`\"`符号，无char类型。\n  >\n  > ```python\n  > #字符串可以用[]类似java数组方式截取\n  > a = 'abc'\n  > b = \"hello python\"\n  >\n  > print('a[0]',a[0])\n  > print(\"b[2:7],b[2:7])#关于字符串的截取可参照上一章数据类型里的描述。\n  > ```\n  >\n  > python可以对string字符串更新操作：\n  >\n  > ```python\n  > a = 'hello python'\n  > print('updated:',a[:6]+'beautiful girl'\n  > ```\n  >\n  > - 类似其他语言，python中也使用`\\`转义其他特殊字符。\n  >\n  >   | 转义字符     | 描述                    |\n  >   | -------- | --------------------- |\n  >   | \\ (在行尾时) | 续行符号                  |\n  >   | \\\\\\      | 反斜杠                   |\n  >   | \\'       | 单引号                   |\n  >   | \\\"       | 双引号                   |\n  >   | \\a       | 响铃                    |\n  >   | \\b       | 退格                    |\n  >   | \\e       | 转义                    |\n  >   | \\000     | 空                     |\n  >   | \\n       | 换行                    |\n  >   | \\v       | 纵向制表符                 |\n  >   | \\t       | 横向制表符                 |\n  >   | \\r       | 回车                    |\n  >   | \\f       | 换页                    |\n  >   | \\oyy     | 八进制，yy表字符，如：\\o12代表换行  |\n  >   | \\xyy     | 十六进制，yy表字符，如：\\x0a代表换行 |\n  >   | \\other   | 其他字符将以普通格式输出          |\n  >\n  > - 字符串运算\n  >\n  >   | 操作符    | 描述                              |\n  >   | ------ | ------------------------------- |\n  >   | +      | 串联                              |\n  >   | *      | 重复                              |\n  >   | []     | 截取[index],index位置的字符            |\n  >   | [ : ]  | 截取`:`前后数字范围内，如，[1:4)取不到右边数字的字符。 |\n  >   | in     | 成员运算符，含有返回True                  |\n  >   | not in | 成员运算符，不含有返回True                 |\n  >   | r/R    | 原始字符串，不转义，原始输出。                 |\n  >\n  > - 字符串格式化\n  >\n  >   类似C 语言的printf函数，将需要格式化的数字字符，格式化后传入%s之类的占据的位置。==格式化==\n  >\n  >   | 符号   | 描述            |\n  >   | ---- | ------------- |\n  >   | %c   | 字符及其ASCII码    |\n  >   | %s   | 字符串           |\n  >   | %d   | 整数            |\n  >   | %u   | 无符号整型         |\n  >   | %o   | 无符号八进制数       |\n  >   | %x   | 无符号十六进制数      |\n  >   | %X   | 无符号十六进制数，大写   |\n  >   | %f   | 浮点数子，可指定小数点精度 |\n  >   | %e   | 科学计数法格式化浮点数   |\n  >   | %E   | 同%e           |\n  >   | %g   | %f和%e的简写      |\n  >   | %G   | %f和%e的简写      |\n  >   | %p   | 十六进制格式化变量的地址  |\n  >\n  >   - 格式化操作符辅助指令\n  >\n  >     | 符号     | 功能                   |\n  >     | ------ | -------------------- |\n  >     | *      | 定义宽度或小数精度            |\n  >     | -      | 左对齐                  |\n  >     | +      | 正数前显示+号              |\n  >     | `<sp>` | 正数前显示空格              |\n  >     | #      | 八进制前显示0，十六进制前显示0x或0X |\n  >     | 0      | 显示的数字前填充0，而不是空格      |\n  >     | %      | '%%'输出显示一个'%'        |\n  >     | (var)  | 映射变量（字典参数）           |\n  >     | m.n.   | m显示最小总宽度，n小数后的位数。    |\n  >\n  > - python的三引号\n  >\n  >   **三引号` ``` `通常把复杂的字符串，整段的复制输出，而不管其中是否换行、转义之类的。\n  >\n  >   ==`u`==符号表示Unicode编码，如：\n  >\n  >   ```python\n  >   #如下，则为Unicode格式\n  >   u'hello world'\n  >   u'hello\\u0020world'#效果如上，内部使用了\\0020代表空格\n  >   ```\n  >\n  > ==往后的api会越来越多，本笔记将不再赘述各个类型和函数的api。==\n\n- List列表\n\n  > Python有6个序列类型，常见的为==列表==和==元组==。序列常用操作：`索引`、`切片`、`加`、`乘`、`检查成员`，以及最大最小值的获取。\n  >\n  > - 列表，格式`[ ]`内用`,分隔。\n  >   ```python\n  >   \tlist = [1,'abc',False,list,\"hello pythono\"];#列表元素类型可以不同，可以嵌套列表。类似数组，可以索引，左0，右-1\n  >   ```\n  >   更新，直接赋值新的元素。删除，del对应元素。\n  >\n  > - python列表脚本操作符\n  >\n  >   | 表达式                      | 结果                        | 描述         |\n  >   | ------------------------ | ------------------------- | ---------- |\n  >   | len([1,2,3])             | 3                         | 长度         |\n  >   | [1,2,3]+[4,5,6]          | [1,2,3,4,5,6]             | zu'he      |\n  >   | ['Hi!']*4                | ['Hi!','Hi!','Hi!','Hi!'] | 重复         |\n  >   | 3 in [1,2,3]             | True                      | 判断元素是否属于列表 |\n  >   | for x in [1,2,3]:print x | 1 2 3                     | 遍历 迭代      |\n  >\n  >   **列表的截取，类似字符串的操作。通过索引，取值范围来截取。**\n  >\n  > - Python列表相关的函数&方法\n  >\n  >   ```python\n  >   cmp(list1,list2);#比较两个列表\n  >   len(list);#list长度、元素个数\n  >   max(list);#list最大元素值\n  >   min(list);#list最小元素值\n  >   list(seq);#将元组转化为列表\n  >\n  >   list.append(obj);#列表尾新增对象\n  >   list.count(obj);#统计某元素出现次数\n  >   list.extend(seq);#用新列表扩展\n  >   list.index(obg);#元素第一次出现位置\n  >   list.insert(index,obj);#指定位置插入\n  >   list.pop(obj=list[-1]);#移除列表中最后一个元素，或指定位置的。\n  >   list.remove(obj);#移除第一个找到的该元素\n  >   list.reverse();#反向列表\n  >   list.sort([func]);#排序\n  >   ```\n\n- 元组\n\n  >元组类似列表，但是==不能修改元素==。\n  >\n  >格式`( )`，用`,`分隔。\n  >\n  >```python\n  >tup = ('adb',12,list);\n  >tup2 = ();#空元组\n  >tup3 = (2,);#元组只有一个元素，则必须有个逗号,\n  >```\n  >\n  >**访问元组，类似列表和字符串的查找**，元组不能修改，但是可以==串接==。\n  >\n  >```python\n  >tup1 = (1,2,2);\n  >tup2 = ('ab','cd','ddf');\n  >tup3 = tup1 + tup2;#元组串接。\n  >```\n  >\n  >***元组元素不能删除，但是==元组可以被删除==***\n  >\n  >```python\n  >tup = (1,2,2);\n  >del tup;\n  >```\n  >\n  >`任意无符号的对象，以,分隔，默认为元组`\n  >\n  >- 元组的一些方法和函数，类似列表\n  >\n  >  ```python\n  >  tuple(seq);#列表转化为元组\n  >  ```\n\n- 字典Dictionary\n\n  > 字典类似于java中的map集合。使用键值对`key-value`，格式：=={key1:value1,key2:value2}==\n  >\n  > - **key值唯一**\n  >\n  > - **value值可以任何类型，key值必是不可变类型，如字符串、数字和元组。**\n  >\n  > - 字典内，所有的key不需要都为统一类型\n  >\n  >   ```python\n  >   dict = {\"abc\":'adb','def':23,55:'adb'}\n  >   print (\"dict[55]\");#根据key值，若是没有，会报错。\n  >   ```\n  >\n  > - 字典元素的修改，删除\n  >\n  >   ```python\n  >   del dict[key];#删除指定元素\n  >   dict.clear();#清空字典\n  >   del dict;#删除字典\n  >   ```\n  >\n  > - 字典的函数&方法\n  >\n  >   ```python\n  >   cmp(dict1,dict2);#比较\n  >   len(dict);#计数\n  >   str(dict);#字符输出字典元素\n  >   type(variable);#变量的类型\n  >\n  >   radiansdict.clear();#清空字典\n  >   radiansdict.copy();#字典浅复制\n  >   radiansdict.get(key,default=None);#获取值，若无，返回默认值。\n  >   radiansdict.has_key(key);#查询是否包含指定key值\n  >   radiansdict.items();#遍历显示字典元素数组\n  >   radiansdict.keys();#列表显示所有key\n  >   radiansdict.setdefault(key,default=None);#类似get，若key不存在，则添加。\n  >   radiansdict.update(dict2);#将dict2更新到dict中。\n  >   radiansdict.values();#返回所有value值。\n  >   ```\n\n- python日期时间\n\n  > 类似其他编程语言，时间基于1970年1月1日。Unix和windows支持到2038年？\n  >\n  > - time\n  >\n  >   ```python\n  >   time.time();#获取时间戳\n  >   time.localtime(time.time());#获得时间的元组\n  >   time.asctime(time.localtime(time.time()));#格式化时间\n  >   time.strftime(format[,t]);#自定义字符格式化时间\n  >   # 格式化成2016-03-20 11:45:39形式\n  >   print time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime()) \n  >\n  >   # 格式化成Sat Mar 28 22:24:24 2016形式\n  >   print time.strftime(\"%a %b %d %H:%M:%S %Y\", time.localtime()) \n  >     \n  >   # 将格式字符串转换为时间戳\n  >   a = \"Sat Mar 28 22:24:24 2016\"\n  >   print time.mktime(time.strptime(a,\"%a %b %d %H:%M:%S %Y\"));\n  >   ```\n  >\n  > - calendar\n  >\n  >   ==0-6表示一周，0表示周一。==\n  >\n  >   ```python\n  >   calendar.month(2016,10);#获取制定月份的日历。\n  >   ```\n  >\n  >   **函数和方法不在赘述**\n  >\n  >   datetime、pytz、dateutil模块也是处理时间相关。\n\n- 函数\n\n  > 类似其他编程语言的函数&方法定义，python函数格式：\n  >\n  > ```python\n  > def functionname( parameters ):\n  >     \"函数文档\"\n  >     function_suite\n  >     return [expression]\n  > #def 关键字，声明函数\n  > #functionname 函数名\n  > #(parameters) 参数，多个参数可以，分隔？还是多个括号\n  > #可写声明文档，\n  > #返回值，可以是None。\n  > ```\n  >\n  > **按值传递与按引用传递**\n  >\n  > Python中所有参数的传递，都是==引用传递==，一处修改，原始值则变。\n  >\n  > - 函数的参数：\n  >\n  >   `必备参数`、`关键字参数`、`默认参数`、`不定长参数`\n  >\n  >   ```python\n  >   #必备参数，必须传入的形式，否则报错\n  >   def printStr(str):\n  >       ...\n  >   \treturn;    \n  >   #关键字参数，输入参数的格式顺序，不必和声明的顺序一致。\n  >   def printInfo(name,age):\n  >       print(\"name:\",name);\n  >       print(\"age:\",age)\n  >       return;\n  >   printInfo(age = 27,name = 'jack');\n  >   def printDefault(name,age=20):\n  >       ......\n  >       return;\n  >   #此时可以使用默认参数\n  >   printDefault(name = 'jack');#age 默认了。\n  >\n  >   #不定长参数\n  >   def printLong(arg1,*args):#星号*的那个参数，为可变参数。\n  >       print(arg2);\n  >       for var in args:\n  >           print var;\n  >       return;\n  >   ```\n  >\n  > - Python使用lambda创建匿名函数。\n  >\n  >   - lambda是表达式，函数比def简单\n  >   - 只能在lambda表达式中构建逻辑\n  >   - lambda仅能访问自有参数。\n  >   - lambda似乎只能写一行。\n  >\n  >   ==语法==\n  >\n  >   ```python\n  >   lambda [arg2[,arg2,......]]:expression\n  >   #示例\n  >   sum = lambda arg1,arg2:arg1+arg2;\n  >\n  >   #调用sum函数\n  >   sum(1,2);\n  >   ```\n  >\n  >   **return用于退出函数，无有返回值则是None。**\n  >\n  >   变量作用域，全局和局部，都是作用于其声明范围内。\n\n- Python模块\n\n  > python模块指一段逻辑或函数方法，在python中，模块也是一个对象，可以命名，引用。类似于java中的类文件？\n  >\n  > ```python\n  > import module1[,module2,...]#导入模块，就可以使用其方法和逻辑。\n  > #用类名/文件名.方法/函数,来调用。\n  > from modname import name1[,name2,...]#从指定空间导入模块。\n  > from modname import * #导入指定名称空间下的所有模块。\n  > ```\n  >\n  > 寻找模块的顺序是：当前文件、path路径、系统默认路径。\n  >\n  > - 变量默认都是局部范围的，全局变量需要global声明。\n  > - dir()函数，列表显示。\n  > - globals()和locals(),reload();\n  > - python中也有包，文件的概念。\n\n- Python文件IO和File、异常\n\n  >- 文件I/O\n  >\n  >  `raw_input`\n  >\n  >  `input`\n  >\n  >  ```python\n  >  #raw_input 接受输入的一行\n  >  str = raw_input(\"Please input :\");\n  >  print(\"输入内容为：\",str);#str会接收键盘的输入内容\n  >\n  >  #input类似与raw_input，可以接受输入表达式\n  >  str = input(\"Please input:\");\n  >  print(\"输入内容为：\",str);\n  >  #上面可以输入：[x*5 for x in range(2,10,2)]\n  >  ```\n  >\n  >- file对象操作文件\n  >\n  >  ```python\n  >  file object = open(file_name[,access_mode][,buffering]);#用open()方法打开文件\n  >  file.closed;# true or false\n  >  file.mode;\n  >  file.name;\n  >  file.softspace;#有空格符来结束，需要返回False，不需要，True。\n  >  file.write(string);#不会默认行尾加换行的，。\n  >  file.read([count]);#读取指定个数的字节数。\n  >\n  >  tell();#可知文件内，当前位置。\n  >  seek(offset[,from]);#改变当前位置\n  >\n  >  #python 的os模块有删除、重命名文件的方法\n  >  os.rename(old_name,new_name);\n  >  os.remove(\"test.txt\");#删除文件\n  >  os.mkdir(\"abc\");os.chdir(\"new\");os.getcwd();#显示当前目录。\n  >  os.rmdir();\n  >  ```\n  >\n  >- **异常处理**\n  >\n  >  try/except语句\n  >\n  >  ```python\n  >  try:\n  >      <statements>#运行代码\n  >  except <exception>:\n  >      <e1>#try到异常name\n  >  except <exception>,<data>:\n  >      <e2>#try到异常，并有数据\n  >  else:\n  >      <statements2>#无异常时候运行\n  >  #类似java，python中可以不写exception的name，就会捕获所有异常。\n  >  #也可以\n  >  except(e1,e2,...):\n  >      ...\n  >  #类似java 有try finally\n  >  try:\n  >      <>\n  >  finally:\n  >      <>#总会执行的语句。\n  >  ```\n  >\n  >  ==raise==语句自动触发异常\n  >\n  >  ```python\n  >  raise [Exception[,args[,traceback]]]\n  >  def functionName( level ):\n  >      if level < 1:\n  >          raise Exception(\"Invalid level!\", level)\n  >          # 触发异常后，后面的代码就不会再执行\n  >          \n  >  try:\n  >     # 正常逻辑\n  >  except \"Invalid level!\":#对应自定义的异常名，如上。\n  >     # 触发自定义异常    \n  >  else:\n  >     # 其余代码\n  >\n  >  class MyError(RuntimeError):\n  >      def init(self,arg):\n  >          self.args = arg\n  >          \n  >  #自己触发异常\n  >  try:\n  >      raise MyError(\"hao xiang shu ru cuo le \")\n  >  except Networkerror,e:\n  >      print e.args\n  >  ```\n\n\n## 四、Python高级教程\n\n- 面向对象\n\n  > Python是一种面向对象的解释型语言，类似于其他面向对象的编程语言，需要熟悉一下面向对象的名词概念：\n  >\n  > - `类(class)`：用于描述具有相同属性和方法的对象的集合。描述一类事物，对象是类的实例。\n  > - `类变量`：类中公开化的变量，作用于类的范围内，区别于实例变量。\n  > - `数据成员`：类变量或实例变量，用于处理实例对象相关的数据。\n  > - `方法重写`：重写继承自父类的方法，实现自有的逻辑。override。\n  > - `实例变量`：定义在方法中的变量，作用于方法内。\n  > - `继承`：即一个派生类继承基类的字段和方法。\n  > - `实例化`：创建一个类的实例，类的具体对象。\n  > - `方法`：类中定义的函数。\n  > - `对象`：根据类定义的数据结构构建的一个实例，包含类的数据成员和方法。\n  >\n  > 1. 创建类\n  >\n  >    ```python\n  >    class ClassName:#定义类的关键字class\n  >        '类的描述信息' #帮助文档\n  >        class_suite #类题\n  >    #例如：\n  >    class Employee:\n  >       '所有员工的基类'\n  >       empCount = 0\n  >\n  >       def __init__(self, name, salary):#构造函数\n  >          self.name = name\n  >          self.salary = salary\n  >          Employee.empCount += 1\n  >       \n  >       def displayCount(self):#方法函数\n  >         print \"Total Employee %d\" % Employee.empCount\n  >\n  >       def displayEmployee(self):\n  >          print \"Name : \", self.name,  \", Salary: \", self.salary\n  >    #实例化对象\n  >    objectName = ClassName(...);#根据类的构造函数创建对象。\n  >    #访问方法属性，用object.method();\n  >    objectName.displayCount();\n  >    #可以添加、删除、修改类的属性\n  >    objectName.age = 20;# add attribution\n  >    objectName.age =26;#modify attribution\n  >    del objectName.age # delete attribution\n  >    ```\n  >\n  >\n  >    **Python有专门的函数，处理类的属性和方法**\n  >    getattr(obj,name[,default]);\n  >    setattr(obj,name,value);\n  >    hasattr(obj,name);\n  >    delattr(obj,name);\n  >    ```\n  >\n  > 2. Python内置属性\n  >\n  >    ```python\n  >    #python attribution，用ClassName.function调用。\n  >    __dict__:类的属性\n  >    __doc__:类的文档字符串\n  >    __name__:类名\n  >    __module__:类定义所在的模块\n  >    __bases__类的所有父类构成元素\n  >    ```\n  >\n  > 3. 类似java，python使用内置引用计数器，处理垃圾回收。\n  >\n  > 4. Python的继承：\n  >\n  >    - 格式：class SubClassName [ParentClass1[,ParentClass2,...]]:\n  >\n  >    - Python类的继承==支持多继承==\n  >\n  >    - 派生类继承基类，构造函数不会被自动调用，需要专门调用。\n  >\n  >    - 调用基类方法时候，需要用BaseClassName.而且需要self参数。区别于本类内的函数方法。\n  >\n  >    - 同类函数名，则优先调用本类中的函数方法，若无，再去基类中寻找。\n  >\n  >      ```python\n  >      issbuclass();#判断是否是另一个类的派生类，issubclass(sub,super);\n  >      isinstance(obj,class);#判断一个对象，是不是类的实例。\n  >      ```\n  >\n  > 5. 方法重写与重载\n  >\n  >    - 重写基类的方法，用于实现自己的逻辑。\n  >\n  >    - 基础重载：\n  >\n  >      ```python\n  >      #函数方法，前后两个下划线__init__\n  >      __init__(self[,args])#构造函数\n  >      __del__(self)#删除对象\n  >      __repr__(self)#转化为编译器格式\n  >      __str__(self)#转化为可阅读模式\n  >      __cmp__(self,x)#对象比较\n  >      ```\n  >\n  >    - 运算符重载\n  >\n  >      ```python\n  >      class Vector:\n  >         def __init__(self, a, b):\n  >            self.a = a\n  >            self.b = b\n  >\n  >         def __str__(self):\n  >            return 'Vector (%d, %d)' % (self.a, self.b)\n  >         \n  >         def __add__(self,other):\n  >            return Vector(self.a + other.a, self.b + other.b)\n  >\n  >      v1 = Vector(2,10)\n  >      v2 = Vector(5,-2)\n  >      print v1 + v2#运算符的重载\n  >      #输出结果\n  >      Vector(7,8)\n  >      ```\n  >\n  > 6. **类的属性和方法**\n  >\n  >    - 类的私有属性\n  >\n  >      __private_attrs：两个下划线开头，仅能在类内部使用。self.\\_\\_private_attrs。\n  >\n  >    - 类的方法\n  >\n  >      关键字`def`定义类的方法，类似定义函数。但是类的方法必须包含参数`self`且为第一参数，私有方法：__private_method，内部调用self.\\_\\_private_method\n  >\n  >      ```python\n  >      def method(self[,args]):\n  >          .....\n  >\n  >      ```\n  >\n  >    - Python不允许实例化的类访问私有数据，可用obj._classname\\_attrName访问属性。\n\n- 正则表达式\n\n  > Python的re模块包含了全部的正则表达式。\n  >\n  > compile函数用于构建正则表达式。\n  >\n  > 1. re.match\n  >\n  >    从字符串起始位置匹配，起始不成功匹配，返回None。\n  >\n  >    ```python\n  >    #pattern 正则表达式，string 匹配字符串，flags标志位，如区分大小写，多行匹配等。\n  >    re.match(pattern,string,flags=0);\n  >    group(num= 0)#匹配整个表达式字符串，group可以依次输入多个组号。\n  >    groups();#返回包含所有小组字符串的元组。\n  >    ```\n  >\n  >    示例：\n  >\n  >    ```python\n  >    import re\n  >    print(re.match('www', 'www.runoob.com').span())  # 在起始位置匹配\n  >    print(re.match('com', 'www.runoob.com'))         # 不在起始位置匹配\n  >\n  >    #输出结果\n  >    (0,3)\n  >    None\n  >    ```\n  >\n  >    ```python\n  >    #!/usr/bin/python\n  >    import re\n  >\n  >    line = \"Cats are smarter than dogs\"\n  >\n  >    matchObj = re.match( r'(.*) are (.*?) .*', line, re.M|re.I)\n  >\n  >    if matchObj:\n  >       print \"matchObj.group() : \", matchObj.group()\n  >       print \"matchObj.group(1) : \", matchObj.group(1)\n  >       print \"matchObj.group(2) : \", matchObj.group(2)\n  >    else:\n  >       print \"No match!!\"\n  >\n  >    #输出结果\n  >    matchObj.group() :  Cats are smarter than dogs\n  >    matchObj.group(1) :  Cats\n  >    matchObj.group(2) :  smarter\n  >    ```\n  >\n  > 2. re.search方法\n  >\n  >    扫描整个字符串，并返回第一个成功的匹配。\n  >\n  >    ```python\n  >    re.search(pattern,string,flags=0);\n  >    ```\n  >\n  >    示例：\n  >\n  >    ```python\n  >    #!/usr/bin/python\n  >    # -*- coding: UTF-8 -*- \n  >\n  >    import re\n  >    print(re.search('www', 'www.runoob.com').span())  # 在起始位置匹配\n  >    print(re.search('com', 'www.runoob.com').span())         # 不在起始位置匹配\n  >\n  >    #输出结果\n  >    (0,3)\n  >    (11,14)\n  >    ```\n  >\n  >    ```python\n  >    #!/usr/bin/python\n  >    import re\n  >\n  >    line = \"Cats are smarter than dogs\";\n  >\n  >    searchObj = re.search( r'(.*) are (.*?) .*', line, re.M|re.I)\n  >\n  >    if searchObj:\n  >       print \"searchObj.group() : \", searchObj.group()\n  >       print \"searchObj.group(1) : \", searchObj.group(1)\n  >       print \"searchObj.group(2) : \", searchObj.group(2)\n  >    else:\n  >       print \"Nothing found!!\"\n  >\n  >    #输出结果\n  >    searchObj.group() :  Cats are smarter than dogs\n  >    searchObj.group(1) :  Cats\n  >    searchObj.group(2) :  smarter\n  >    ```\n  >\n  > 3. re.match & re.search\n  >\n  >    `re.match`匹配起始，不成功则None。\n  >\n  >    `re.search`匹配全部。\n  >\n  >    ```python\n  >    #!/usr/bin/python\n  >    import re\n  >\n  >    line = \"Cats are smarter than dogs\";\n  >\n  >    matchObj = re.match( r'dogs', line, re.M|re.I)\n  >    if matchObj:\n  >       print \"match --> matchObj.group() : \", matchObj.group()\n  >    else:\n  >       print \"No match!!\"\n  >\n  >    matchObj = re.search( r'dogs', line, re.M|re.I)\n  >    if matchObj:\n  >       print \"search --> matchObj.group() : \", matchObj.group()\n  >    else:\n  >       print \"No match!!\"\n  >\n  >    #输出结果\n  >    No match!!\n  >    serach --> matchObj.group() : dogs\n  >    ```\n  >\n  > 4. re.sub检索和替换\n  >\n  >    ```python\n  >    re.sub(pattern,rep1,string,max = 0);#count >=0,匹配次数。\n  >    ```\n  >\n  >    示例：\n  >\n  >    ```python\n  >    #!/usr/bin/python\n  >    import re\n  >\n  >    phone = \"2004-959-559 # This is Phone Number\"\n  >\n  >    # Delete Python-style comments\n  >    num = re.sub(r'#.*$', \"\", phone)\n  >    print \"Phone Num : \", num\n  >\n  >    # Remove anything other than digits\n  >    num = re.sub(r'\\D', \"\", phone)    \n  >    print \"Phone Num : \", num\n  >\n  >    #输出结果\n  >    Phone Num :  2004-959-559\n  >    Phone Num :  2004959559\n  >    ```\n  >\n  > 5. 正则表达式的修饰符-可选标志\n  >\n  >    *标志修饰符控制匹配模式，多个标识符可以用按位OR`|`指定*\n  >\n  >    | 修饰符  | 描绘                                |\n  >    | ---- | --------------------------------- |\n  >    | re.l | 匹配不分大小写                           |\n  >    | re.L | 本地化识别(local-aware)匹配              |\n  >    | re.M | 多行匹配，影响`^`和`$`                    |\n  >    | re.S | 使`.`匹配包括行在内的所有字符                  |\n  >    | re.U | Unicode解析字符，影响`\\w`、`\\W`、`\\b`、`\\B` |\n  >    | re.X | 灵活格式                              |\n  >\n  > 6. 正则表达式模式\n  >\n  >    - `字母和数字`表达自身。\n  >    - 多数字母和数字前加`\\`会转义\n  >    - 标点符号均是特殊意思，除非转义。\n  >    - `\\`是转义符\n  >\n  >    ```python\n  >    ^\t匹配字符串的开头\n  >    $\t匹配字符串的末尾。\n  >    .\t匹配任意字符，除了换行符\\n，当re.DOTALL标记被指定时，则可以匹配包括换行符的任意字符。\n  >    [...]\t用来表示一组字符,单独列出：[amk] 匹配 'a'，'m'或'k'\n  >    [^...]\t不在[]中的字符：[^abc] 匹配除了a,b,c之外的字符。\n  >    re*\t匹配0个或多个的表达式。\n  >    re+\t匹配1个或多个的表达式。\n  >    re?\t匹配0个或1个由前面的正则表达式定义的片段，非贪婪方式\n  >    re{ n}\t\n  >    re{ n,}\t精确匹配n个前面表达式。\n  >    re{ n, m}\t匹配 n 到 m 次由前面的正则表达式定义的片段，贪婪方式\n  >    a| b\t匹配a或b\n  >    (re)\tG匹配括号内的表达式，也表示一个组\n  >    (?imx)\t正则表达式包含三种可选标志：i, m, 或 x 。只影响括号中的区域。\n  >    (?-imx)\t正则表达式关闭 i, m, 或 x 可选标志。只影响括号中的区域。\n  >    (?: re)\t类似 (...), 但是不表示一个组\n  >    (?imx: re)\t在括号中使用i, m, 或 x 可选标志\n  >    (?-imx: re)\t在括号中不使用i, m, 或 x 可选标志\n  >    (?#...)\t注释.\n  >    (?= re)\t前向肯定界定符。如果所含正则表达式，以 ... 表示，在当前位置成功匹配时成功，否则失败。但一旦所含表达式已经尝试，匹配引擎根本没有提高；模式的剩余部分还要尝试界定符的右边。\n  >    (?! re)\t前向否定界定符。与肯定界定符相反；当所含表达式不能在字符串当前位置匹配时成功\n  >    (?> re)\t匹配的独立模式，省去回溯。\n  >    \\w\t匹配字母数字及下划线\n  >    \\W\t匹配非字母数字及下划线\n  >    \\s\t匹配任意空白字符，等价于 [\\t\\n\\r\\f].\n  >    \\S\t匹配任意非空字符\n  >    \\d\t匹配任意数字，等价于 [0-9].\n  >    \\D\t匹配任意非数字\n  >    \\A\t匹配字符串开始\n  >    \\Z\t匹配字符串结束，如果是存在换行，只匹配到换行前的结束字符串。c\n  >    \\z\t匹配字符串结束\n  >    \\G\t匹配最后匹配完成的位置。\n  >    \\b\t匹配一个单词边界，也就是指单词和空格间的位置。例如， 'er\\b' 可以匹配\"never\" 中的 'er'，但不能匹配 \"verb\" 中的 'er'。\n  >    \\B\t匹配非单词边界。'er\\B' 能匹配 \"verb\" 中的 'er'，但不能匹配 \"never\" 中的 'er'。\n  >    \\n, \\t, 等.\t匹配一个换行符。匹配一个制表符。等\n  >    \\1...\\9\t匹配第n个分组的子表达式。\n  >    \\10\t匹配第n个分组的子表达式，如果它经匹配。否则指的是八进制字符码的表达式。\n  >    ```\n\n- CGI通用网关接口\n\n  > CGI程序，运行在服务器，python脚本、perl脚本、shell脚本、C/C++程序等。\n  >\n  > Web服务器需支持cgi，通常在/cgi-bin/ /var/www/cgi-bin/\n  >\n  > cgi文件`.cgi`或者各自语言的源文件。\n  >\n  > ```python\n  > #!/usr/bin/python\n  > # -*- coding: UTF-8 -*-\n  >\n  > print \"Content-type:text/html\"\t#向浏览器显示的内容类型\n  > print                               # 空行，告诉服务器结束头部\n  > print '<html>'\n  > print '<head>'\n  > print '<meta charset=\"utf-8\">'\n  > print '<title>Hello Word - 我的第一个 CGI 程序！</title>'\n  > print '</head>'\n  > print '<body>'\n  > print '<h2>Hello Word! 我是来自菜鸟教程的第一CGI程序</h2>'\n  > print '</body>'\n  > print '</html>'\n  > ```\n  >\n  > 如上保存为hello.py，修改权限755。放置于cgi-bin/目录下，即可在浏览器中访问。\n  >\n  > - CGI程序中HTTP头部常用信息\n  >\n  >   | 头                  | 描述              |\n  >   | ------------------ | --------------- |\n  >   | Content-type       | 请求与实体对应的MIME信息。 |\n  >   | Expires:Date       | 响应过期的日期和时间      |\n  >   | Location:URL       | 重定向             |\n  >   | Last-modified:Date | 请求资源的最后修改时间     |\n  >   | Content-length:N   | 请求内容长度          |\n  >   | Set-Cookie:String  | 设置Http Cookie   |\n  >\n  > - CGI环境变量\n  >\n  >   所有CGI程序都接收以下环境变量\n  >\n  >   | 变量名             | 描述                                  |\n  >   | --------------- | ----------------------------------- |\n  >   | CONTENT_TYPE    | MIME类型                              |\n  >   | CONTENT_LENGTH  | 有效数据字节数                             |\n  >   | HTTP_COOKIE     | 客户机内cookie内容                        |\n  >   | HTTP_USER_AGENT | 客户及版本，浏览器信息等。                       |\n  >   | PATH_INFO       | 表示CGI程序名之后的其他路径信息                   |\n  >   | QUERY_STRING    | GET请求时，代表所传递的信息。                    |\n  >   | REMOTE_ADDR     | 客户机ip地址                             |\n  >   | REMOTE_HOST     | 客户机主机名                              |\n  >   | REQUEST_METHOD  | 提供脚本被调用的方法，http/1.0协议，仅GET和POST有意义。 |\n  >   | SCRIPT_FILENAME | CGI脚本完整路径                           |\n  >   | SERVER_NAME     | CGI脚本完整名称                           |\n  >   | SERVER_SOFTWARE | 调用CGI程序的http服务器的名称，版本信息。            |\n  >\n  >   ---\n  >\n  > ```python\n  >       #输出所有cgi环境变量信息\n  >       import os\n  >       print \"Content-type: text/html\"\n  >       print\n  >       print \"<meta charset=\\\"utf-8\\\">\"\n  >       print \"<b>环境变量</b><br>\"\n  >       print \"<ul>\"\n  >       for key in os.environ.keys():\n  >           print \"<li><span style='color:green'>%30s </span>:%s</li>\" % (key,os.environ[key])\n  >       print \"</ul>\"\n  > ```\n  >\n  > - GET&POST\n  >\n  >   浏览器请求服务器的两中主要方式\n  >\n  >   - GET方法\n  >\n  >     ```python\n  >     http://www.test.com/cgi-bin/hello.py?key1=value1&key2=value2\n  >     #GET方法相关注释\n  >     '''\n  >     请求可被缓存，请求保存在浏览器历史纪录，可被收藏书签，请求不应在处理敏感数据时使用，请求有长度限制，请求只应用于取回数据。\n  >     '''\n  >     ```\n  >\n  >   - POST方法\n  >\n  >     post方法较为安全可靠。\n  >\n  > - CGI中使用cookie\n  >\n  >   ```python\n  >   Set-cookie:name=name;expires=date;path=path;domain=domain;secure\n  >   ```\n  >\n  >   **注释：**\n  >\n  >   `name=name`: 需要设置cookie的值(name不能使用\";\"和\",\"号),有多个name值时用 \";\" 分隔，例如：name1=name1;name2=name2;name3=name3。\n  >   `expires=date`: cookie的有效期限,格式： expires=\"Wdy,DD-Mon-YYYY HH:MM:SS\"\n  >   `path=path`: 设置cookie支持的路径,如果path是一个路径，则cookie对这个目录下的所有文件及子目录生效，例如： path=\"/cgi-bin/\"，如果path是一个文件，则cookie指对这个文件生效，例如：path=\"/cgi-bin/cookie.cgi\"。\n  >   `domain=domain`: 对cookie生效的域名，例如：domain=\"www.runoob.com\"\n  >   `secure`: 如果给出此标志，表示cookie只能通过SSL协议的https服务器来传递。\n  >   cookie的接收是通过设置环境变量HTTP_COOKIE来实现的，CGI程序可以通过检索该变量获取cookie信息。\n  >\n  >   - cookie检索\n  >\n  >     ```python\n  >     #cookie信息存储在CGI环境变量HTTP_COOKIE中，\n  >     key1=value1;key=value2;......\n  >     ```\n  >\n  >   - 文件上传\n  >\n  >     ```html\n  >     <!DOCTYPE html>\n  >     <html>\n  >     <head>\n  >     <meta charset=\"utf-8\">\n  >     <title>菜鸟教程(runoob.com)</title>\n  >     </head>\n  >     <body>\n  >      <form enctype=\"multipart/form-data\" \n  >                          action=\"/cgi-bin/save_file.py\" method=\"post\">\n  >        <p>选中文件: <input type=\"file\" name=\"filename\" /></p>\n  >        <p><input type=\"submit\" value=\"上传\" /></p>\n  >        </form>\n  >     </body>\n  >     </html>\n  >     ```\n  >\n  >     上面的html形成一个界面，可以选择上传文件，调用save_file.py脚本\n  >\n  >     ```python\n  >     #!/usr/bin/python\n  >     # -*- coding: UTF-8 -*-\n  >\n  >     import cgi, os\n  >     import cgitb; cgitb.enable()\n  >\n  >     form = cgi.FieldStorage()\n  >\n  >     # 获取文件名\n  >     fileitem = form['filename']\n  >\n  >     # 检测文件是否上传\n  >     if fileitem.filename:\n  >        # 设置文件路径 \n  >        fn = os.path.basename(fileitem.filename)\n  >        open('/tmp/' + fn, 'wb').write(fileitem.file.read())\n  >\n  >        message = '文件 \"' + fn + '\" 上传成功'\n  >        \n  >     else:\n  >        message = '文件没有上传'\n  >        \n  >     print \"\"\"\\\n  >     Content-Type: text/html\\n\n  >     <html>\n  >     <head>\n  >     <meta charset=\"utf-8\">\n  >     <title>菜鸟教程(runoob.com)</title>\n  >     </head>\n  >     <body>\n  >        <p>%s</p>\n  >     </body>\n  >     </html>\n  >     \"\"\" % (message,)\n  >     ```\n  >\n  >     **记得文件的权限设置。**\n  >\n  >     ```python\n  >     #!/usr/bin/python\n  >     # -*- coding: UTF-8 -*-\n  >\n  >     # HTTP 头部\n  >     print \"Content-Disposition: attachment; filename=\\\"foo.txt\\\"\";\n  >     print\n  >     # 打开文件\n  >     fo = open(\"foo.txt\", \"rb\")\n  >\n  >     str = fo.read();\n  >     print str\n  >\n  >     # 关闭文件\n  >     fo.close()\n  >     ```\n  >\n  >     **以上为文件下载**\n\n- Python操作mysql数据库\n\n  > python支持多种数据库，有对应的模块。DB-API使用流程\n  >\n  > 1. 引入api模块。\n  >\n  > 2. 获取数据库链接。\n  >\n  > 3. 执行sql语句和存储。\n  >\n  > 4. 关闭连接。\n  >\n  >    ```python\n  >    #!/usr/bin/python\n  >    # -*- coding: UTF-8 -*-\n  >\n  >    import MySQLdb\n  >\n  >    # 打开数据库连接\n  >    db = MySQLdb.connect(\"localhost\",\"testuser\",\"test123\",\"TESTDB\" )\n  >\n  >    # 使用cursor()方法获取操作游标 \n  >    cursor = db.cursor()\n  >\n  >    # 使用execute方法执行SQL语句\n  >    cursor.execute(\"SELECT VERSION()\")\n  >\n  >    # 使用 fetchone() 方法获取一条数据库。\n  >    data = cursor.fetchone()\n  >\n  >    print \"Database version : %s \" % data\n  >\n  >    # 关闭数据库连接\n  >    db.close()\n  >    ```\n  >\n  > - python数据库mysql，需要mysqldb\n  >\n  >   ```python\n  >   fetchone();#获取下一个查询结果集\n  >   fetchall();#接收全部返回结果行\n  >   rowcount;#只读属性，返回执行execute()后影响的行数\n  >   ```\n  >\n  > - 事务\n  >\n  >   事务的四个属性：\n  >\n  >   - 原子性（atomicity）。一个事务是一个不可分割的工作单位，事务中包括的诸操作要么都做，要么都不做。\n  >   - 一致性（consistency）。事务必须是使数据库从一个一致性状态变到另一个一致性状态。一致性与原子性是密切相关的。\n  >   - 隔离性（isolation）。一个事务的执行不能被其他事务干扰。即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。\n  >   - 持久性（durability）。持续性也称永久性（permanence），指一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。接下来的其他操作或故障不应该对其有任何影响。\n  >\n  >   ***Python DB API 2.0 的事务提供了两个方法 commit 或 rollback。***\n\n- Python网络编程\n\n  > python提供两个级别的网络服务：\n  >\n  > 1、低级别支持基本Socket\n  >\n  > 2、高级别SocketServer\n  >\n  > ==Socket==套接字用于程序在主机间或者进程间通讯。\n  >\n  > ```python\n  > #pyton中socket函数\n  > socket.socket([family[,type[,proto]]])\n  > # family 套接字家族，可用AF_UNIX或AF_INET\n  > #type 类型，面向连接与否，SOCK_STREAM和SOCK_DGRAM\n  > #proto 默认为0\n  > ```\n  >\n  > **Python中socket函数可以参照api文档，此处不在赘述。**\n  >\n  > 示例：\n  >\n  > ```python\n  > #服务端\n  > #!/usr/bin/python\n  > # -*- coding: UTF-8 -*-\n  > # 文件名：server.py\n  >\n  > import socket               # 导入 socket 模块\n  >\n  > s = socket.socket()         # 创建 socket 对象\n  > host = socket.gethostname() # 获取本地主机名\n  > port = 12345                # 设置端口\n  > s.bind((host, port))        # 绑定端口\n  >\n  > s.listen(5)                 # 等待客户端连接\n  > while True:\n  >     c, addr = s.accept()     # 建立客户端连接。\n  >     print '连接地址：', addr\n  >     c.send('欢迎访问菜鸟教程！')\n  >     c.close()                # 关闭连接\n  >     \n  >     \n  > #客户端\n  > #!/usr/bin/python\n  > # -*- coding: UTF-8 -*-\n  > # 文件名：client.py\n  >\n  > import socket               # 导入 socket 模块\n  >\n  > s = socket.socket()         # 创建 socket 对象\n  > host = socket.gethostname() # 获取本地主机名\n  > port = 12345                # 设置端口好\n  >\n  > s.connect((host, port))\n  > print s.recv(1024)\n  > s.close()  \n  > ```\n  >\n  > **Python Internet模块**\n  >\n  > | 协议     | 功能用处      | 端口号  | Python模块                 |\n  > | ------ | --------- | ---- | ------------------------ |\n  > | HTTP   | 网页访问      | 80   | httplib、urllib、xmlrpclib |\n  > | NNTP   | 阅读、张贴新闻文章 | 119  | nntplib                  |\n  > | FTP    | 文件传输      | 20   | ftplib、urllib            |\n  > | SMTP   | 发送邮件      | 25   | smtplib                  |\n  > | POP3   | 接收邮件      | 110  | poplib                   |\n  > | IMAP4  | 获取邮件      | 143  | imaplib                  |\n  > | Telnet | 命令行       | 23   | telnetlib                |\n  > | Gopher | 信息查找      | 70   | gopherlib、urllib         |\n  >\n  > - smtp邮件发送\n  >\n  >   语法格式：\n  >\n  >   ```python\n  >   import smtplib\n  >   #创建对象\n  >   smtpObj = smtplib.SMTP([host[,port[,local_hostname]]])\n  >   #发送邮件\n  >   SMTP.sendmail(from_addr,to_addr,msg[,mail_options,rcpt_options])\n  >   ```\n  >\n  >   示例：\n  >\n  >   ```python\n  >   #!/usr/bin/python\n  >   # -*- coding: UTF-8 -*-\n  >\n  >   import smtplib\n  >   from email.mime.text import MIMEText\n  >   from email.header import Header\n  >\n  >   sender = 'server@server.com'\n  >   receivers = ['receiver@receiver.com']  # 接收邮件，可设置为你的QQ邮箱或者其他邮箱\n  >\n  >   # 三个参数：第一个为文本内容，第二个 plain 设置文本格式，可以是html，text等。第三个 utf-8 设置编码\n  >   message = MIMEText('Python 邮件发送测试...', 'plain', 'utf-8')\n  >   message['From'] = Header(\"菜鸟教程\", 'utf-8')\n  >   message['To'] =  Header(\"测试\", 'utf-8')\n  >\n  >   subject = 'Python SMTP 邮件测试'\n  >   message['Subject'] = Header(subject, 'utf-8')\n  >   ```\n  >\n  >\n  >   try:\n  >       smtpObj = smtplib.SMTP('localhost')\n  >       smtpObj.sendmail(sender, receivers, message.as_string())\n  >       print \"邮件发送成功\"\n  >   except smtplib.SMTPException:\n  >       print \"Error: 无法发送邮件\"\n  >   ```\n  >\n  >   **使用第三方SMTP服务**\n  >\n  >   ```python\n  >   # 第三方 SMTP 服务\n  >   mail_host=\"smtp.XXX.com\"  #设置服务器\n  >   mail_user=\"XXXX\"    #用户名\n  >   mail_pass=\"XXXXXX\"   #密码\n  >\n  >   sender = 'from@runoob.com'\n  >   receivers = ['429240967@qq.com']  # 接收邮件，可设置为你的QQ邮箱或者其他邮箱\n  >\n  >   message = MIMEText('Python 邮件发送测试...', 'plain', 'utf-8')\n  >   message['From'] = Header(\"菜鸟教程\", 'utf-8')\n  >   message['To'] =  Header(\"测试\", 'utf-8')\n  >\n  >   subject = 'Python SMTP 邮件测试'\n  >   message['Subject'] = Header(subject, 'utf-8')\n  >\n  >\n  >   try:\n  >       smtpObj = smtplib.SMTP() \n  >       smtpObj.connect(mail_host, 25)    # 25 为 SMTP 端口号\n  >       smtpObj.login(mail_user,mail_pass)  \n  >       smtpObj.sendmail(sender, receivers, message.as_string())\n  >       print \"邮件发送成功\"\n  >   except smtplib.SMTPException:\n  >       print \"Error: 无法发送邮件\"\n  >   ```\n  >\n  >   创建带附件的邮件发送\n  >\n  > ```python\n  >   #!/usr/bin/python\n  >   # -*- coding: UTF-8 -*-\n  >\n  >   import smtplib\n  >   from email.mime.text import MIMEText\n  >   from email.mime.multipart import MIMEMultipart\n  >   from email.header import Header\n  >\n  >   sender = 'from@runoob.com'\n  >   receivers = ['429240967@qq.com']  # 接收邮件，可设置为你的QQ邮箱或者其他邮箱\n  >\n  >   #创建一个带附件的实例\n  >   message = MIMEMultipart()\n  >   message['From'] = Header(\"菜鸟教程\", 'utf-8')\n  >   message['To'] =  Header(\"测试\", 'utf-8')\n  >   subject = 'Python SMTP 邮件测试'\n  >   message['Subject'] = Header(subject, 'utf-8')\n  >\n  >   #邮件正文内容\n  >   message.attach(MIMEText('这是菜鸟教程Python 邮件发送测试……', 'plain', 'utf-8'))\n  >\n  >   # 构造附件1，传送当前目录下的 test.txt 文件\n  >   att1 = MIMEText(open('test.txt', 'rb').read(), 'base64', 'utf-8')\n  >   att1[\"Content-Type\"] = 'application/octet-stream'\n  >   # 这里的filename可以任意写，写什么名字，邮件中显示什么名字\n  >   att1[\"Content-Disposition\"] = 'attachment; filename=\"test.txt\"'\n  >   message.attach(att1)\n  >\n  >   # 构造附件2，传送当前目录下的 runoob.txt 文件\n  >   att2 = MIMEText(open('runoob.txt', 'rb').read(), 'base64', 'utf-8')\n  >   att2[\"Content-Type\"] = 'application/octet-stream'\n  >   att2[\"Content-Disposition\"] = 'attachment; filename=\"runoob.txt\"'\n  >   message.attach(att2)\n  >\n  >   try:\n  >       smtpObj = smtplib.SMTP('localhost')\n  >       smtpObj.sendmail(sender, receivers, message.as_string())\n  >       print \"邮件发送成功\"\n  >   except smtplib.SMTPException:\n  >       print \"Error: 无法发送邮件\"\n  > ```\n  >\n  > - **Python多线程**\n  >\n  >   关于多线程需要注意两点：\n  >\n  >   - 线程可以被中断(抢占)\n  >   - 其他线程运行时，线程可以休眠(退让)\n  >\n  >   **python使用线程两种方式**\n  >\n  >   1、函数\n  >   ```python\n  >   thread.start_new_thread(function,args[,kwargs])\n  >   # 注释：function-线程函数，args-参数，必须是tuple类型。kwargs-可选参数。\n  >   ```\n  >   示例：\n  >   ```python\n  >   #!/usr/bin/python\n  >   # -*- coding: UTF-8 -*-\n  >\n  >   import thread\n  >   import time\n  >\n  >   # 为线程定义一个函数\n  >   def print_time( threadName, delay):\n  >      count = 0\n  >      while count < 5:\n  >         time.sleep(delay)\n  >         count += 1\n  >         print \"%s: %s\" % ( threadName, time.ctime(time.time()) )\n  >\n  >   # 创建两个线程\n  >   try:\n  >      thread.start_new_thread( print_time, (\"Thread-1\", 2, ) )\n  >      thread.start_new_thread( print_time, (\"Thread-2\", 4, ) )\n  >   except:\n  >      print \"Error: unable to start thread\"\n  >\n  >   while 1:\n  >      pass\n  >   ```\n  >\n  >   *线程结束依靠线程函数，或者手动`thread.exit()`,`抛异常`。*\n  >\n  > - ***线程模块***\n  >\n  >   1、`thread`和`threading`两个标准库\n  >\n  >   ```python\n  >   threading.currentThread();\n  >   threading.enumerate();\n  >   threading.activeCount();\n  >   run();start();join([time]);isAlive();getName();setName();\n  >   ```\n  >\n  >   2、使用Threading模块创建线程\n  >\n  >   ```python\n  >   #继承threading.Thread然后重写__init__方法和run方法\n  >   #!/usr/bin/python\n  >   # -*- coding: UTF-8 -*-\n  >\n  >   import threading\n  >   import time\n  >\n  >   exitFlag = 0\n  >\n  >   class myThread (threading.Thread):   #继承父类threading.Thread\n  >       def __init__(self, threadID, name, counter):\n  >           threading.Thread.__init__(self)\n  >           self.threadID = threadID\n  >           self.name = name\n  >           self.counter = counter\n  >       def run(self):                   #把要执行的代码写到run函数里面 线程在创建后会直接运行run函数 \n  >           print \"Starting \" + self.name\n  >           print_time(self.name, self.counter, 5)\n  >           print \"Exiting \" + self.name\n  >\n  >   def print_time(threadName, delay, counter):\n  >       while counter:\n  >           if exitFlag:\n  >               thread.exit()\n  >           time.sleep(delay)\n  >           print \"%s: %s\" % (threadName, time.ctime(time.time()))\n  >           counter -= 1\n  >\n  >   # 创建新线程\n  >   thread1 = myThread(1, \"Thread-1\", 1)\n  >   thread2 = myThread(2, \"Thread-2\", 2)\n  >\n  >   # 开启线程\n  >   thread1.start()\n  >   thread2.start()\n  >\n  >   print \"Exiting Main Thread\"\n  >   ```\n  >\n  > - 线程同步\n  >\n  >   Python中线程同步使用`Lock`和`Rlock`两个对象，都含有`acquire`和`release`方法。\n  >\n  >   示例：\n  >\n  >   ```python\n  >   #!/usr/bin/python\n  >   # -*- coding: UTF-8 -*-\n  >\n  >   import threading\n  >   import time\n  >\n  >   class myThread (threading.Thread):\n  >       def __init__(self, threadID, name, counter):\n  >           threading.Thread.__init__(self)\n  >           self.threadID = threadID\n  >           self.name = name\n  >           self.counter = counter\n  >       def run(self):\n  >           print \"Starting \" + self.name\n  >          # 获得锁，成功获得锁定后返回True\n  >          # 可选的timeout参数不填时将一直阻塞直到获得锁定\n  >          # 否则超时后将返回False\n  >           threadLock.acquire()\n  >           print_time(self.name, self.counter, 3)\n  >           # 释放锁\n  >           threadLock.release()\n  >\n  >   def print_time(threadName, delay, counter):\n  >       while counter:\n  >           time.sleep(delay)\n  >           print \"%s: %s\" % (threadName, time.ctime(time.time()))\n  >           counter -= 1\n  >\n  >   threadLock = threading.Lock()\n  >   threads = []\n  >\n  >   # 创建新线程\n  >   thread1 = myThread(1, \"Thread-1\", 1)\n  >   thread2 = myThread(2, \"Thread-2\", 2)\n  >\n  >   # 开启新线程\n  >   thread1.start()\n  >   thread2.start()\n  >\n  >   # 添加线程到线程列表\n  >   threads.append(thread1)\n  >   threads.append(thread2)\n  >\n  >   # 等待所有线程完成\n  >   for t in threads:\n  >       t.join()\n  >   print \"Exiting Main Thread\"\n  >   ```\n  >\n  > - **线程优先级队列**\n  >\n  >   Python的Queue模块提供了FIFO和LIFO队列，Queue、LifoQueue和优先级PriorityQueue。\n\n- Python其他特性\n\n  > - xml解析\n  >\n  > xml解析通用的有`SAX`、`DOM`、python有`ElementTree`\n  >\n  > *一般编程中都很少用SAX和DOM解析，都有自己平台的优化解析方式。*\n  >\n  > **注：**因DOM需要将XML数据映射到内存中的树，一是比较慢，二是比较耗内存，而SAX流式读取XML文件，比较快，占用内存少，但需要用户实现回调函数（handler）。\n  >\n  > - GUI编程\n  >\n  >   python提供多种图形界面库`Thinter`、`wxPython`、`Jython`\n  >\n  >   **Tkinter**\n  >\n  >   ```python\n  >   import Tkinter\n  >   top = Tkinter.Tk()\n  >   #进入消息循环\n  >   top.mainloog()\n  >   #如上代码执行，可产生小窗口界面了。\n  >   ```\n  >\n  >   Tkinter包含常用的窗口控件，以及属性和方法，使用时候可差用api。\n  >\n  > - JSON\n  >\n  >   python使用Demjson，`decode`和`encode`解码编码。\n  >\n  >   ```python\n  >   demjson.encode(self,obj,nest_level=0)\n  >   ```\n  >\n  >   示例：(构建json)\n  >\n  >   ```python\n  >   #!/usr/bin/python\n  >   import demjson\n  >\n  >   data = [{'a':1,'b':2,'c':3,'d':4,'e':5}]\n  >\n  >   json = demjson.encode(data)\n  >   print(json)\n  >   ```\n  >\n  >   解析Json\n  >\n  >   ```python\n  >   demjson.decode(self,txt)\n  >   ```\n  >\n  >   ```python\n  >   #!/usr/bin/python\n  >   import demjson\n  >\n  >   json = '{\"a\":1,\"b\":2,\"c\":3,\"d\":4,\"e\":5}';\n  >\n  >   text = demjson.decode(json)\n  >   print(text)\n  >   ```\n\n\n\n**初次接触Python，笔记难免简单初级，仅供自己学习只用，希望也对网友有所益处。**\n\n\n\n\n\n\n","slug":"Python学习笔记","published":1,"updated":"2017-03-31T03:02:33.619Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0xj1ngh001yscowrmuxuu05","content":"<h1 id=\"Python学习笔记\"><a href=\"#Python学习笔记\" class=\"headerlink\" title=\"Python学习笔记\"></a>Python学习笔记</h1><!-- TOC -->\n<ul>\n<li><a href=\"#python学习笔记\">Python学习笔记</a><ul>\n<li><a href=\"#一基本语法\">一、基本语法</a></li>\n<li><a href=\"#二-数据与逻辑\">二、 数据与逻辑</a></li>\n<li><a href=\"#三结构与api\">三、结构与api</a></li>\n<li><a href=\"#四python高级教程\">四、Python高级教程</a></li>\n</ul>\n</li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"一、基本语法\"><a href=\"#一、基本语法\" class=\"headerlink\" title=\"一、基本语法\"></a>一、基本语法</h2><p><code>python2.x与python3.x区别很大，新版特性很强，更优化，此笔记学习新版本特性，暂不关注旧版本。</code></p>\n<ul>\n<li><p>标识符</p>\n<blockquote>\n<ol>\n<li>标识符：数字、字母、下划线，且数字不开头。</li>\n<li>区分大小写；</li>\n<li>单下划线开头<code>_foo</code>表示不能直接访问，需要用接口访问，不可”from xxx import”导入。<code>__foo</code>双下划线表示私有。前后双下划线<code>___foo__</code>特殊函数。</li>\n</ol>\n</blockquote>\n</li>\n<li><p>保留字符</p>\n<blockquote>\n<p>and、exec、not、assert、finally、or、break、for、pass、class、from、print、continue、global、raise、def、if、return、del、import、try、elif、in、while、else、is、with、except、lambda、yield。</p>\n<p>Python3中<code>end</code>可以将结果输入到同一行，或者输出尾部追加不同的字符</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"comment\">#Fibonacci Series: 斐波那契数列</span></div><div class=\"line\">&gt; a,b = <span class=\"number\">0</span>,<span class=\"number\">1</span></div><div class=\"line\">&gt; <span class=\"keyword\">while</span> b&lt;<span class=\"number\">1000</span>:</div><div class=\"line\">&gt;     print(b,end=<span class=\"string\">','</span>)</div><div class=\"line\">&gt;     a,b = b,a+b</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>​</p>\n</blockquote>\n</li>\n<li><p>行与缩进</p>\n<blockquote>\n<p><strong>Python区别于其他语言最大处，python不用{}来控制类、函数和逻辑块。而是用缩进，空格数无妨，但是逻辑块前后必须相同个数空格，使用空格或者tab都行，但是最好别混用</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">if</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">&gt;     <span class=\"keyword\">print</span> <span class=\"string\">\"True\"</span></div><div class=\"line\">&gt; <span class=\"keyword\">else</span>:</div><div class=\"line\">&gt;     <span class=\"keyword\">print</span> <span class=\"string\">\"False\"</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>python一般新的一行意味着上个语句块结束。但是多行语句可以用<code>\\</code>符号：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; string = abc + \\</div><div class=\"line\">&gt; \t\tbcd + \\</div><div class=\"line\">&gt;     \tefg</div><div class=\"line\">&gt; <span class=\"comment\"># 要是有&#123;&#125;、[]、()的语句，断为多行也无妨。</span></div><div class=\"line\">&gt; girls = [<span class=\"string\">'allen'</span>,<span class=\"string\">'angle'</span></div><div class=\"line\">&gt;         <span class=\"string\">'candy'</span>,<span class=\"string\">'lily'</span></div><div class=\"line\">&gt;         <span class=\"string\">'merry'</span>]</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>引号与注释</p>\n<blockquote>\n<p>python的字符串可以用单引号<code>&#39;</code>、双引号<code>&quot;</code>、三引号<code>&#39;&#39;&#39;</code>包括，其中三引号可以多行分段，有时候可以用作注释。</p>\n<p><code>#</code>符号表示注释，可写在当行，或者代码尾部。多行注释使用三个单引号<code>&#39;&#39;&#39;</code>，或三个双引号<code>&quot;&quot;&quot;</code>包括。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"comment\">#单行注释</span></div><div class=\"line\">&gt; <span class=\"keyword\">if</span> <span class=\"keyword\">True</span></div><div class=\"line\">&gt; \t<span class=\"keyword\">print</span> <span class=\"string\">'hello'</span> <span class=\"comment\">#单个注释，新版中需要加()，视为函数</span></div><div class=\"line\">&gt; <span class=\"string\">'''</span></div><div class=\"line\">&gt; 多行注释</div><div class=\"line\">&gt; 是这么写的</div><div class=\"line\">&gt; 真的可以么</div><div class=\"line\">&gt; 在markdown语法中</div><div class=\"line\">&gt; '''</div><div class=\"line\">&gt; <span class=\"string\">\"\"\"</span></div><div class=\"line\">&gt; 似乎可以</div><div class=\"line\">&gt; 好像是的哦</div><div class=\"line\">&gt; \"\"\"    </div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><em>函数之间，类与函数间用<code>空行</code>分开，便于阅读和维护</em></p>\n</blockquote>\n</li>\n<li><p>零碎语法</p>\n<blockquote>\n<ul>\n<li><p>多条语句同一行，可以<code>;</code>分割。</p>\n</li>\n<li><p>同一代码组，首行关键字后<code>:</code>结尾，同一代码组前后空白数相同。</p>\n</li>\n<li><p>旧版中文编码需要头文件注释</p>\n</li>\n<li><p>Python中True和False，似乎不能小写哦！</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;  <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt;  <span class=\"comment\">#_*_coding:utf-8 _*_</span></div><div class=\"line\">&gt;  <span class=\"comment\">#或者</span></div><div class=\"line\">&gt;  <span class=\"comment\">#coding=utf-8</span></div><div class=\"line\">&gt;  <span class=\"comment\">#新版python已经默认支持了。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n</li>\n</ul>\n<h2 id=\"二、-数据与逻辑\"><a href=\"#二、-数据与逻辑\" class=\"headerlink\" title=\"二、 数据与逻辑\"></a>二、 数据与逻辑</h2><ul>\n<li><p>变量类型</p>\n<blockquote>\n<p><strong>python变量赋值不需要类型声明</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; counter = <span class=\"number\">100</span> <span class=\"comment\">#整型</span></div><div class=\"line\">&gt; miles = <span class=\"number\">1000.0</span> <span class=\"comment\"># 浮点型</span></div><div class=\"line\">&gt; name = <span class=\"string\">\"John\"</span> <span class=\"comment\">#字符串</span></div><div class=\"line\">&gt; a = b = c = <span class=\"number\">1</span> <span class=\"comment\">#多个变量同时赋值</span></div><div class=\"line\">&gt; a, b, c = <span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"string\">\"John\"</span> <span class=\"comment\">#多变量多类型赋值,个数必须对应。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>python五种标准数据类型：</p>\n<ul>\n<li><p>Numbers数字</p>\n<p>该类型变量赋值后不可改变，重新赋值实质上是分配新的对象。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   a = <span class=\"number\">1</span>,b=<span class=\"number\">2</span>,c=<span class=\"number\">9</span></div><div class=\"line\">&gt;   <span class=\"comment\">#del是删除语句</span></div><div class=\"line\">&gt;   <span class=\"keyword\">del</span> a</div><div class=\"line\">&gt;   <span class=\"keyword\">del</span> a,b</div><div class=\"line\">&gt;   <span class=\"comment\"># Number有四种不同类型，int、long、float、complex（复数）</span></div><div class=\"line\">&gt;   <span class=\"comment\">#注意：python新版中，没有long，多了一个bytes。</span></div><div class=\"line\">&gt;   <span class=\"number\">8899887897l</span><span class=\"comment\">#后面的l容易与1混淆，一般写作L</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>String字符串</p>\n<p>由字母、数字、下划线组成，两种顺序，0开始至后，-1开始向前。</p>\n<p>string的截取</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   s = <span class=\"string\">'I`m a good boy'</span></div><div class=\"line\">&gt;   s[<span class=\"number\">3</span>:<span class=\"number\">9</span>]<span class=\"comment\">#其结果是截取对应标号的字符串为新的字符，可以0--size，也可以-1--向前。记住区间[)右边取不到哦</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> s <span class=\"comment\">#输出s字符串</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> s[<span class=\"number\">1</span>]<span class=\"comment\">#输入下标为1的字母</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> s[<span class=\"number\">1</span>:<span class=\"number\">5</span>]<span class=\"comment\">#输出下标1-5，但不含5那个字符</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> s + <span class=\"string\">\"add\"</span> <span class=\"comment\"># 字符串连接</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> s * <span class=\"number\">2</span> <span class=\"comment\"># 重复输出两次</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>List列表</p>\n<p>python列表可以混合不同类型数据，嵌套列表，可以使用类似string的方法取子列表。<code>[]</code>表示</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   list = [<span class=\"string\">'python'</span>,<span class=\"number\">666</span>,<span class=\"number\">2.14</span>,<span class=\"string\">'study'</span>]</div><div class=\"line\">&gt;   tinylist = [<span class=\"number\">123</span>,<span class=\"string\">'John'</span>]</div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> list <span class=\"comment\">#完整输出</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> list[<span class=\"number\">0</span>]<span class=\"comment\">#输出指定下标元素</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> list[<span class=\"number\">1</span>:<span class=\"number\">3</span>]<span class=\"comment\">#输出1-3的元素</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> list[<span class=\"number\">2</span>:]<span class=\"comment\">#输出2之后所有元素</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> tinylist * <span class=\"number\">2</span> <span class=\"comment\"># 重复两次输出</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> list + tinylist<span class=\"comment\">#组合列表</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>Tuple元组</p>\n<p>元组类似list，<code>()</code>标识，<code>,</code>分割，不能二次赋值。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   list = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"string\">'abc'</span>]</div><div class=\"line\">&gt;   tuple = (<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"string\">'abc'</span>)</div><div class=\"line\">&gt;   list[<span class=\"number\">0</span>] = <span class=\"string\">'ABC'</span><span class=\"comment\">#可以更新</span></div><div class=\"line\">&gt;   tuple[<span class=\"number\">0</span>]= <span class=\"number\">4</span> <span class=\"comment\">#错误，元组数据不能更新</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>Dictionary字典</p>\n<p>Dictionary被视为python最为灵活的内置数据结构，列表为有序对象集合，字典则为无序元素结合。区别在于，Dictionary类似与map集合，键值对key-value。<code>{}</code>标识</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   dict = &#123;&#125;</div><div class=\"line\">&gt;   dict[<span class=\"string\">'one'</span>] = <span class=\"string\">\"This is one\"</span></div><div class=\"line\">&gt;   dict[<span class=\"number\">2</span>] = <span class=\"string\">\"This is 2\"</span></div><div class=\"line\">&gt;   tinydict = &#123;<span class=\"string\">'name'</span>:<span class=\"string\">'john'</span>,<span class=\"string\">'code'</span>:<span class=\"number\">1234</span>,<span class=\"string\">'dept'</span>:<span class=\"string\">'good'</span>,<span class=\"number\">22</span>:<span class=\"number\">879.0L</span>&#125;</div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> dict[<span class=\"string\">'one'</span>] <span class=\"comment\">#根据键值输出元素</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> dict <span class=\"comment\"># 输出所有元素</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> dict.keys()<span class=\"comment\">#输出所有key</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> tinydict.vales()<span class=\"comment\">#输出所有值value</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>Set(集合)</p>\n<p>无序不重复的序列，主要用于成员关系测试和重复文件删除。</p>\n<p>可以使用大括号<code>({})</code>或者<code>set()</code>函数创建集合，注意：创建一个空集合必须用 set() 而不是 <code>{ }</code>，因为 <code>{ }</code> 是用来创建一个空字典。</p>\n</li>\n</ul>\n<p><strong>类型转换</strong>，对应数据类型作为函数名即可,返回结果。</p>\n<p>|          函数           |               描述                |<br>| :——————-: | :—————————–: |<br>|    int(x [,base])     |            将x转换为一个整数            |<br>|   long(x [,base] )    |           将x转换为一个长整数            |<br>|       float(x)        |           将x转换到一个浮点数            |<br>| complex(real [,imag]) |             创建一个复数              |<br>|        str(x)         |          将对象 x 转换为字符串           |<br>|        repr(x)        |         将对象 x 转换为表达式字符串         |<br>|       eval(str)       |  用来计算在字符串中的有效Python表达式,并返回一个对象  |<br>|       tuple(s)        |          将序列 s 转换为一个元组          |<br>|        list(s)        |          将序列 s 转换为一个列表          |<br>|        set(s)         |             转换为可变集合             |<br>|        dict(d)        | 创建一个字典。d 必须是一个序列 (key,value)元组。 |<br>|     frozenset(s)      |            转换为不可变集合             |<br>|        chr(x)         |          将一个整数转换为一个字符           |<br>|       unichr(x)       |        将一个整数转换为Unicode字符        |<br>|        ord(x)         |          将一个字符转换为它的整数值          |<br>|        hex(x)         |        将一个整数转换为一个十六进制字符串        |<br>|        oct(x)         |        将一个整数转换为一个八进制字符串         |</p>\n</blockquote>\n</li>\n<li><p>运算符号</p>\n<blockquote>\n<p>Python运算符支持一下类型：</p>\n<ul>\n<li>算术运算符</li>\n<li>比较（关系）运算符</li>\n<li>赋值运算符</li>\n<li>逻辑运算符</li>\n<li>位运算符</li>\n<li>成员运算符</li>\n<li>身份运算符</li>\n</ul>\n<p><strong>运算符有优先级</strong></p>\n<ol>\n<li><p>算术运算符</p>\n<p>| 运算符  | 描述    | 实例     |<br>| —- | —– | —— |<br>| +    | 加号    | 1+2得3  |<br>| -    | 减号    | 3-1得2  |<br>| <em>    | 乘号    | 2</em>2得4  |<br>| /    | 除号    | 9/3得3  |<br>| %    | 取模，求余 | 5%2得1  |<br>| <strong>   | 幂     | 2</strong>3得8 |<br>| //   | 取整除   | 9//2得4 |</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"comment\">#算术运算符，得到运算结果</span></div><div class=\"line\">&gt;   a,b,c = <span class=\"number\">12</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span><span class=\"comment\">#多变量同时赋值</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> (a+b)</div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> (a-b)</div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> (a*b)</div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> (a/b)</div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> (a%c)</div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> (b**c)</div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> (c//b)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p>比较运算符</p>\n<p>| 运算符  | 描述          |<br>| —- | ———– |<br>| ==   | 等于，比较对象是否相等 |<br>| !=   | 不等于         |<br>| &lt;&gt;   | 不等于         |<br>| &gt;    | 大于          |<br>| &lt;    | 小于          |<br>| >=  | 大于等于        |<br>| &lt;=   | 小于等于        |</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"comment\">#关系运算符，返回结果为 True或False</span></div><div class=\"line\">&gt;   a,b,c = <span class=\"number\">12</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span></div><div class=\"line\">&gt;   print(a==b)</div><div class=\"line\">&gt;   print(a!=b)</div><div class=\"line\">&gt;   print(a&lt;&gt;b)<span class=\"comment\">#，新版python中，已经废弃。</span></div><div class=\"line\">&gt;   print(a&gt;b)</div><div class=\"line\">&gt;   print(a&lt;b)</div><div class=\"line\">&gt;   print(a&gt;=b)</div><div class=\"line\">&gt;   print(a&lt;=b)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p>赋值运算符</p>\n<p>| 运算符  | 描述   | 实例                 |<br>| —- | —- | —————— |<br>| =    | 简单赋值 | c=a+b,将a+b的结果赋值给c  |<br>| +=   | 加法赋值 | c+=a等效于c=c+a       |<br>| -=   | 减法赋值 | c-=a等效于c=c-a       |<br>| <em>=   | 乘法赋值 | c</em>=a等效于c=c*a      |<br>| /=   | 除法赋值 | c/=a等效于c=c/a       |<br>| %=   | 取模赋值 | c%=a等效于c=c%a       |<br>| <em>*=  | 幂赋值  | c\\</em>*=a等效于c=c**a |<br>| //=  | 取整赋值 | c//=a等效于c=c//a     |</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"comment\">#简单演示</span></div><div class=\"line\">&gt;   a,b,c=<span class=\"number\">12</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span></div><div class=\"line\">&gt;   <span class=\"comment\">#print(c=a)#不能直接在print内写赋值</span></div><div class=\"line\">&gt;   c=a</div><div class=\"line\">&gt;   print(c)</div><div class=\"line\">&gt;   c=c**b</div><div class=\"line\">&gt;   print(c**=b)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p>位运算符</p>\n<p>位运算既是将数字看作二进制，进行运算。</p>\n<p>| 运算符  | 描述                                       |<br>| —- | —————————————- |<br>| &amp;    | <strong><code>按位与</code></strong>：两数二进制对齐，对应位置都是1，则为1，否则为0。      |<br>| |   | <strong><code>按位或</code></strong>：两数二进制，对应位置有一个为1，则为1。           |<br>| ^    | <strong><code>按位异或</code></strong>：两数二进制，对应位置相异，则为1。             |<br>| ~    | <strong><code>按位取反</code></strong>：对数据的二进制，各个位置取相反，变1为0，变0为1。    |<br>| &lt;&lt;   | <strong><code>左移动</code></strong>：运算数二进制全部左移动若干位，”&lt;&lt;”右边的数决定左移位数。<strong>高位丢弃，低位补0</strong> |<br>| >&gt;  | <strong><code>右移动</code></strong>：运算数二进制全部右移动软敢为，”&gt;&gt;”右边的数决定右移位数。 |</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   a = <span class=\"number\">60</span> <span class=\"comment\"># 60 = 0011 1100</span></div><div class=\"line\">&gt;   b = <span class=\"number\">13</span> <span class=\"comment\"># 13 = 0000 1101</span></div><div class=\"line\">&gt;   c = <span class=\"number\">0</span></div><div class=\"line\">&gt;   c = a &amp; b</div><div class=\"line\">&gt;   print(<span class=\"string\">\"a &amp; b :\"</span>,c)<span class=\"comment\"># 12 = 0000 1100</span></div><div class=\"line\">&gt;   c = a | b</div><div class=\"line\">&gt;   print(<span class=\"string\">\"a | b :\"</span>,c)<span class=\"comment\"># 61 = 0011 1101</span></div><div class=\"line\">&gt;   c = a ^ b</div><div class=\"line\">&gt;   print(<span class=\"string\">\"a ^ b :\"</span>,c)<span class=\"comment\"># 49 = 0011 0001</span></div><div class=\"line\">&gt;   c = ~a</div><div class=\"line\">&gt;   print(<span class=\"string\">\"~a :\"</span>,c)<span class=\"comment\"># -61 = 1100 0011</span></div><div class=\"line\">&gt;   c = a&lt;&lt;<span class=\"number\">2</span></div><div class=\"line\">&gt;   print(<span class=\"string\">\"a&lt;&lt;2 :\"</span>,c) <span class=\"comment\"># 240 = 1111 0000</span></div><div class=\"line\">&gt;   c = a&gt;&gt;<span class=\"number\">2</span></div><div class=\"line\">&gt;   print(<span class=\"string\">\"a&gt;&gt;2 :\"</span>,c) <span class=\"comment\"># 15 = 0000 1111</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p>逻辑运算符</p>\n<p>| 运算符  | 表达式     | 描述                                       |<br>| —- | ——- | —————————————- |<br>| and  | x and y | <strong><code>布尔与</code></strong> ：如果x为False，x and y返回False，否则返回y的计算值。 |<br>| or   | x or y  | <strong><code>布尔或</code></strong>：如果x非零，返回x值，否则返回y的计算值。          |<br>| not  | not x   | <strong><code>布尔非</code></strong>：若x为True，返回False，若x为False，返回True。 |</p>\n<p>示例:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"comment\">#True是1，False是0</span></div><div class=\"line\">&gt;   <span class=\"string\">\"\"\"所以可以在逻辑运算中判断，是否为0 或者1，来决定true和false\"\"\"</span></div><div class=\"line\">&gt;   a, b, c = <span class=\"number\">12</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span></div><div class=\"line\">&gt;   print(a <span class=\"keyword\">and</span> b)<span class=\"comment\">#似乎非0，即认为True</span></div><div class=\"line\">&gt;   print(a <span class=\"keyword\">or</span> b)</div><div class=\"line\">&gt;   print(<span class=\"keyword\">not</span> a)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p>成员运算符</p>\n<p>| 运算符    | 描述                                     |<br>| —— | ————————————– |<br>| in     | x in y，若有True，无False。<strong><code>y为列表、字符串、元组</code></strong> |<br>| not in | x not in y 若y中无x则True，有则False。         |</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   a = <span class=\"number\">10</span>;b = <span class=\"number\">20</span>;list = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">10</span>,<span class=\"number\">15</span>]</div><div class=\"line\">&gt;   print(a <span class=\"keyword\">in</span> list)</div><div class=\"line\">&gt;   print(a <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> list)</div><div class=\"line\">&gt;   print(b <span class=\"keyword\">in</span> list)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p>身份运算符</p>\n<p>| 运算符    | 描述                                       |<br>| —— | —————————————- |<br>| is     | <code>is</code>判断两标识符是否引用同一对象，id同则返回True，否则False。   |<br>| is not | <code>is not</code>判断两标识符是不是引用不同对象，id不同则返回True，否则False。 |</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   a = <span class=\"number\">10</span>;b = <span class=\"number\">20</span>;</div><div class=\"line\">&gt;   print(a <span class=\"keyword\">is</span> b);print(a <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> b);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p>运算符优先级</p>\n<p>| 运算符                      | 优先级描述                |<br>| ———————— | ——————– |<br>| <strong>                       | 指数，最高优先级             |<br>| ~，+，-                    | 按位取反、一元加(+@)、一元减(-@) |<br>| <em>，/，%，//                 | 乘、除、取模、取整            |<br>| +，-                      | 加法、减法                |<br>| >&gt;，&lt;&lt;                   | 右移动、左移动              |<br>| &amp;                        | 位’AND’               |<br>| ^，|                     | 位运算                  |<br>| &lt;=，&lt;，&gt;，&gt;=                | 比较运算符                |<br>| &lt;&gt;，==，!=                 | 等于运算符                |<br>| =，%=，/=，//=，-=，+=，</em>=，</strong>= | 赋值运算符                |<br>| is，is not                | 身份运算符                |<br>| in ，not in               | 成员运算符                |<br>| not，or，and               | 逻辑运算符                |</p>\n<p><strong>注意：若是不确定优先级，可以用()来控制</strong></p>\n</li>\n</ol>\n</blockquote>\n</li>\n<li><p>条件语句</p>\n<blockquote>\n<p>Python中指定非0，和非null，的值为Ture，0和null为False。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"comment\"># python 中多个条件语句，if..elif...elif...else</span></div><div class=\"line\">&gt; <span class=\"keyword\">if</span> condition1:</div><div class=\"line\">&gt;     statement1</div><div class=\"line\">&gt; <span class=\"keyword\">elif</span> condition2:</div><div class=\"line\">&gt;     statement2</div><div class=\"line\">&gt; <span class=\"keyword\">else</span>:</div><div class=\"line\">&gt;     statement</div><div class=\"line\">&gt; <span class=\"keyword\">if</span> (<span class=\"number\">1</span>!=<span class=\"number\">2</span>) : <span class=\"keyword\">print</span> <span class=\"string\">\"OK\"</span>;<span class=\"comment\">#单行语句，可以放在一起。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><strong>python 没有switch语句，只能多个elif语句结合逻辑符号<code>and,or,not</code>来控制多分支语句。</strong></p>\n</blockquote>\n</li>\n<li><p>循环语句</p>\n<blockquote>\n<p>编程语言基本都有for、while和嵌套循环。python没有do…while循环。</p>\n<p>循环控制语句有break、continue和pass。</p>\n<ul>\n<li><p>while循环</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"comment\"># while 循环格式</span></div><div class=\"line\">&gt;   <span class=\"keyword\">while</span> condition:<span class=\"comment\">#条件只有True和False的本质区别，但是请记住，Python中的True的定义比较广，非0，非null即为True。</span></div><div class=\"line\">&gt;       statement</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>  控制语句break、continue</p>\n<ul>\n<li>break，退出循环。</li>\n<li><p>continue，跳出本次循环，进入下一次。不执行continue之后的语句。</p>\n<p><em>无限循环：判断条件为永远为True</em></p>\n</li>\n</ul>\n<ul>\n<li><p>$for…else$</p>\n<p>Python中有for…else和while…else循环。</p>\n<p><code>表示for或while语句正常执行后，else语句执行。</code>注意：循环体正常执行，而不是break出来，才会运行else语句。</p>\n<p>每一轮的循环，for或while内没有break的话，都会执行else语句。</p>\n</li>\n<li><p>for循环</p>\n<p>用于遍历任何序列项目，如列表字符串。格式：</p>\n<ul>\n<li>普通方式</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"keyword\">for</span> iterating_var <span class=\"keyword\">in</span> sequence:</div><div class=\"line\">&gt;       statements</div><div class=\"line\">&gt;       </div><div class=\"line\">&gt;   <span class=\"comment\">#如下示例</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"keyword\">for</span> letter <span class=\"keyword\">in</span> <span class=\"string\">'python text'</span>:</div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> (<span class=\"string\">'当前字母：'</span>,letter)</div><div class=\"line\">&gt;       </div><div class=\"line\">&gt;   fruits = [<span class=\"string\">'banana'</span>,<span class=\"string\">'apple'</span>,<span class=\"string\">'orange'</span>]</div><div class=\"line\">&gt;   <span class=\"keyword\">for</span> fruit <span class=\"keyword\">in</span> fruits:</div><div class=\"line\">&gt;       print(<span class=\"string\">\"水果：\"</span>,fruit)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>使用索引</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;     fruits = [<span class=\"string\">'banana'</span>,<span class=\"string\">'orange'</span>,<span class=\"string\">'apple'</span>]</div><div class=\"line\">&gt;     <span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> range(len(fruits)):</div><div class=\"line\">&gt;         print(<span class=\"string\">\"fruit:\"</span>,fruits[index])</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p>循环嵌套</p>\n<blockquote>\n<p>类似其他编程语言，python也允许循环嵌套。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">for</span> iterating_var <span class=\"keyword\">in</span> sequence:</div><div class=\"line\">&gt;     <span class=\"keyword\">for</span> interating_var <span class=\"keyword\">in</span> sequence:</div><div class=\"line\">&gt;         statements</div><div class=\"line\">&gt;     statements</div><div class=\"line\">&gt; <span class=\"comment\">#python中注意缩进来区分代码块，while嵌套类似，也可以互相嵌套。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>break、continue语句类似其他编程语言，上面已做介绍。</p>\n</li>\n<li><p>pass语句，不做任何事情，一般用做占位语句</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"keyword\">for</span> letter <span class=\"keyword\">in</span> <span class=\"string\">'python'</span>:</div><div class=\"line\">&gt;       <span class=\"keyword\">if</span> letter == <span class=\"string\">'h'</span>:</div><div class=\"line\">&gt;           <span class=\"keyword\">pass</span></div><div class=\"line\">&gt;       \tprint(<span class=\"string\">\"just for blank\"</span>)</div><div class=\"line\">&gt;       print(<span class=\"string\">\"letter:\"</span>,letter)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"三、结构与api\"><a href=\"#三、结构与api\" class=\"headerlink\" title=\"三、结构与api\"></a>三、结构与api</h2><ul>\n<li><p>Number数据类型</p>\n<blockquote>\n<p>Python的Number数据类型，不允许改变，每次赋值都会是一个新的对象。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; a = <span class=\"number\">10</span></div><div class=\"line\">&gt; b = <span class=\"number\">12</span></div><div class=\"line\">&gt; a = <span class=\"number\">20</span> <span class=\"comment\">#内存地址已经变了，不像java那样。</span></div><div class=\"line\">&gt; <span class=\"comment\">#del语句删除</span></div><div class=\"line\">&gt; <span class=\"keyword\">del</span> a</div><div class=\"line\">&gt; <span class=\"keyword\">del</span> a,b</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><strong>Number数据支持四种子类型</strong></p>\n<ul>\n<li>int整型，正数、负数，无小数点。</li>\n<li>long长整型，无限大小的整数，后加<code>L</code>或<code>l</code>。</li>\n<li>float浮点型，整数、小数和科学计数。</li>\n<li>complex复数，实数和虚数构成，a+bj或complex(a,b)，a实数，b虚数。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>Python数学函数</p>\n<blockquote>\n<p>| 函数            | 返回值                                   |<br>| ————- | ————————————- |<br>| abs(x)        | 绝对值：返回x的绝对值                           |<br>| ceil(x)       | 取大整：返回x的上入整数，不是四舍五入。如math.ceil(4.1)得5 |<br>| cmp(x,y)      | 对比：x\\<y，返回-1，x=y返回0，x\\>y 返回1          |<br>| exp(x)        | e次幂：e的x次幂                             |<br>| fabs(x)       | 绝对值：返回x的绝对值，含小数点。                     |<br>| floor(x)      | 取小整：返回x的向下整数。                         |<br>| log(x)        | log函数                                 |<br>| max（x1，x2…) | Max函数。                                |<br>| min(x1,x2…) | Min函数。                                |<br>| modf(x)       | 分离：返回x的整数和小数部分，符号与x相同，整数部分为float型。    |<br>| pow(x,y)      | 幂函数：x**y的值                            |<br>| rount(x[,n])  | 舍入值：x的四舍五入，舍入到小数后n位。                  |<br>| sqrt(x)       | 开方：x的平方根，x可为负数，返回实数。                  |</y，返回-1，x=y返回0，x\\></p>\n<p><strong>Math函数</strong></p>\n<ul>\n<li><p>随机函数random</p>\n<p>| 函数                             | 描述                                     |<br>| —————————— | ————————————– |<br>| choice(seq)                    | random.choice(range(10))，从0–9随机挑一个整数。 |<br>| randrange([start],stop,[step]) | 指定范围制定基数获取随机数。                         |<br>| random()                       | [0,1)内随机数                              |<br>| seed([x])                      | 随机数生成器的种子？？                            |<br>| shuffle(lst)                   | 序列元素的随机排序                              |<br>| uniform(x,y)                   | [x,y]范围内随机生成下一个实数                      |</p>\n<p>==注意函数参数[step]之类的，表示为可选参数==</p>\n</li>\n<li><p>三角函数</p>\n<p>| 函数         | 描述                              |<br>| ———- | ——————————- |<br>| acos(x)    | 反余弦（弧度值）                        |<br>| asin(x)    | 反正弦                             |<br>| atan(x)    | 反正切                             |<br>| atan2(y,x) | 指定x，y坐标的反正切值                    |<br>| cos(x)     | 余弦                              |<br>| hypot(x,y) | 返回欧几里得范数sqrt(x*x+y*y)         |<br>| sin(x)     | 正弦                              |<br>| tan(x)     | 正切                              |<br>| degress(x) | 弧度转角度。如degress(math.pi/2),得90.0 |<br>| radins(x)  | 角度转弧度                           |</p>\n</li>\n<li><p>数学常量</p>\n<p>| 常量   | 描述    |<br>| —- | —– |<br>| pi   | 圆周率   |<br>| e    | 自然常数e |</p>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p>字符串</p>\n<blockquote>\n<p>python中字符串string可用<code>&#39;</code>或<code>&quot;</code>符号，无char类型。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; #字符串可以用[]类似java数组方式截取</div><div class=\"line\">&gt; a = 'abc'</div><div class=\"line\">&gt; b = \"hello python\"</div><div class=\"line\">&gt;</div><div class=\"line\">&gt; print('a[0]',a[0])</div><div class=\"line\">&gt; print(\"b[2:7],b[2:7])#关于字符串的截取可参照上一章数据类型里的描述。</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>python可以对string字符串更新操作：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; a = <span class=\"string\">'hello python'</span></div><div class=\"line\">&gt; print(<span class=\"string\">'updated:'</span>,a[:<span class=\"number\">6</span>]+<span class=\"string\">'beautiful girl'</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>类似其他语言，python中也使用<code>\\</code>转义其他特殊字符。</p>\n<p>| 转义字符     | 描述                    |<br>| ——– | ——————— |<br>| \\ (在行尾时) | 续行符号                  |<br>| \\\\      | 反斜杠                   |<br>| \\’       | 单引号                   |<br>| \\”       | 双引号                   |<br>| \\a       | 响铃                    |<br>| \\b       | 退格                    |<br>| \\e       | 转义                    |<br>| \\000     | 空                     |<br>| \\n       | 换行                    |<br>| \\v       | 纵向制表符                 |<br>| \\t       | 横向制表符                 |<br>| \\r       | 回车                    |<br>| \\f       | 换页                    |<br>| \\oyy     | 八进制，yy表字符，如：\\o12代表换行  |<br>| \\xyy     | 十六进制，yy表字符，如：\\x0a代表换行 |<br>| \\other   | 其他字符将以普通格式输出          |</p>\n</li>\n<li><p>字符串运算</p>\n<p>| 操作符    | 描述                              |<br>| —— | ——————————- |<br>| +      | 串联                              |<br>| *      | 重复                              |<br>| []     | 截取[index],index位置的字符            |<br>| [ : ]  | 截取<code>:</code>前后数字范围内，如，[1:4)取不到右边数字的字符。 |<br>| in     | 成员运算符，含有返回True                  |<br>| not in | 成员运算符，不含有返回True                 |<br>| r/R    | 原始字符串，不转义，原始输出。                 |</p>\n</li>\n<li><p>字符串格式化</p>\n<p>类似C 语言的printf函数，将需要格式化的数字字符，格式化后传入%s之类的占据的位置。==格式化==</p>\n<p>| 符号   | 描述            |<br>| —- | ————- |<br>| %c   | 字符及其ASCII码    |<br>| %s   | 字符串           |<br>| %d   | 整数            |<br>| %u   | 无符号整型         |<br>| %o   | 无符号八进制数       |<br>| %x   | 无符号十六进制数      |<br>| %X   | 无符号十六进制数，大写   |<br>| %f   | 浮点数子，可指定小数点精度 |<br>| %e   | 科学计数法格式化浮点数   |<br>| %E   | 同%e           |<br>| %g   | %f和%e的简写      |<br>| %G   | %f和%e的简写      |<br>| %p   | 十六进制格式化变量的地址  |</p>\n<ul>\n<li><p>格式化操作符辅助指令</p>\n<p>| 符号     | 功能                   |<br>| —— | ——————– |<br>| *      | 定义宽度或小数精度            |<br>| -      | 左对齐                  |<br>| +      | 正数前显示+号              |<br>| <code>&lt;sp&gt;</code> | 正数前显示空格              |<br>| #      | 八进制前显示0，十六进制前显示0x或0X |<br>| 0      | 显示的数字前填充0，而不是空格      |<br>| %      | ‘%%’输出显示一个’%’        |<br>| (var)  | 映射变量（字典参数）           |<br>| m.n.   | m显示最小总宽度，n小数后的位数。    |</p>\n</li>\n</ul>\n</li>\n<li><p>python的三引号</p>\n<p>**三引号` <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;</div><div class=\"line\">&gt;   ==`u`==符号表示Unicode编码，如：</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   ```python</div><div class=\"line\">&gt;   #如下，则为Unicode格式</div><div class=\"line\">&gt;   u&apos;hello world&apos;</div><div class=\"line\">&gt;   u&apos;hello\\u0020world&apos;#效果如上，内部使用了\\0020代表空格</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure></p>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>==往后的api会越来越多，本笔记将不再赘述各个类型和函数的api。==</p>\n</blockquote>\n</li>\n<li><p>List列表</p>\n<blockquote>\n<p>Python有6个序列类型，常见的为==列表==和==元组==。序列常用操作：<code>索引</code>、<code>切片</code>、<code>加</code>、<code>乘</code>、<code>检查成员</code>，以及最大最小值的获取。</p>\n<ul>\n<li><p>列表，格式<code>[ ]</code>内用`,分隔。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   \tlist = [<span class=\"number\">1</span>,<span class=\"string\">'abc'</span>,<span class=\"keyword\">False</span>,list,<span class=\"string\">\"hello pythono\"</span>];<span class=\"comment\">#列表元素类型可以不同，可以嵌套列表。类似数组，可以索引，左0，右-1</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n<p>更新，直接赋值新的元素。删除，del对应元素。</p>\n</li>\n<li><p>python列表脚本操作符</p>\n<p>| 表达式                      | 结果                        | 描述         |<br>| ———————— | ————————- | ———- |<br>| len([1,2,3])             | 3                         | 长度         |<br>| [1,2,3]+[4,5,6]          | [1,2,3,4,5,6]             | zu’he      |<br>| [‘Hi!’]*4                | [‘Hi!’,’Hi!’,’Hi!’,’Hi!’] | 重复         |<br>| 3 in [1,2,3]             | True                      | 判断元素是否属于列表 |<br>| for x in [1,2,3]:print x | 1 2 3                     | 遍历 迭代      |</p>\n<p><strong>列表的截取，类似字符串的操作。通过索引，取值范围来截取。</strong></p>\n</li>\n<li><p>Python列表相关的函数&amp;方法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   cmp(list1,list2);<span class=\"comment\">#比较两个列表</span></div><div class=\"line\">&gt;   len(list);<span class=\"comment\">#list长度、元素个数</span></div><div class=\"line\">&gt;   max(list);<span class=\"comment\">#list最大元素值</span></div><div class=\"line\">&gt;   min(list);<span class=\"comment\">#list最小元素值</span></div><div class=\"line\">&gt;   list(seq);<span class=\"comment\">#将元组转化为列表</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   list.append(obj);<span class=\"comment\">#列表尾新增对象</span></div><div class=\"line\">&gt;   list.count(obj);<span class=\"comment\">#统计某元素出现次数</span></div><div class=\"line\">&gt;   list.extend(seq);<span class=\"comment\">#用新列表扩展</span></div><div class=\"line\">&gt;   list.index(obg);<span class=\"comment\">#元素第一次出现位置</span></div><div class=\"line\">&gt;   list.insert(index,obj);<span class=\"comment\">#指定位置插入</span></div><div class=\"line\">&gt;   list.pop(obj=list[<span class=\"number\">-1</span>]);<span class=\"comment\">#移除列表中最后一个元素，或指定位置的。</span></div><div class=\"line\">&gt;   list.remove(obj);<span class=\"comment\">#移除第一个找到的该元素</span></div><div class=\"line\">&gt;   list.reverse();<span class=\"comment\">#反向列表</span></div><div class=\"line\">&gt;   list.sort([func]);<span class=\"comment\">#排序</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p>元组</p>\n<blockquote>\n<p>元组类似列表，但是==不能修改元素==。</p>\n<p>格式<code>( )</code>，用<code>,</code>分隔。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;tup = (<span class=\"string\">'adb'</span>,<span class=\"number\">12</span>,list);</div><div class=\"line\">&gt;tup2 = ();<span class=\"comment\">#空元组</span></div><div class=\"line\">&gt;tup3 = (<span class=\"number\">2</span>,);<span class=\"comment\">#元组只有一个元素，则必须有个逗号,</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><strong>访问元组，类似列表和字符串的查找</strong>，元组不能修改，但是可以==串接==。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;tup1 = (<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>);</div><div class=\"line\">&gt;tup2 = (<span class=\"string\">'ab'</span>,<span class=\"string\">'cd'</span>,<span class=\"string\">'ddf'</span>);</div><div class=\"line\">&gt;tup3 = tup1 + tup2;<span class=\"comment\">#元组串接。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><strong><em>元组元素不能删除，但是==元组可以被删除==</em></strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;tup = (<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>);</div><div class=\"line\">&gt;<span class=\"keyword\">del</span> tup;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><code>任意无符号的对象，以,分隔，默认为元组</code></p>\n<ul>\n<li><p>元组的一些方法和函数，类似列表</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;  tuple(seq);<span class=\"comment\">#列表转化为元组</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p>字典Dictionary</p>\n<blockquote>\n<p>字典类似于java中的map集合。使用键值对<code>key-value</code>，格式：=={key1:value1,key2:value2}==</p>\n<ul>\n<li><p><strong>key值唯一</strong></p>\n</li>\n<li><p><strong>value值可以任何类型，key值必是不可变类型，如字符串、数字和元组。</strong></p>\n</li>\n<li><p>字典内，所有的key不需要都为统一类型</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   dict = &#123;<span class=\"string\">\"abc\"</span>:<span class=\"string\">'adb'</span>,<span class=\"string\">'def'</span>:<span class=\"number\">23</span>,<span class=\"number\">55</span>:<span class=\"string\">'adb'</span>&#125;</div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> (<span class=\"string\">\"dict[55]\"</span>);<span class=\"comment\">#根据key值，若是没有，会报错。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>字典元素的修改，删除</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"keyword\">del</span> dict[key];<span class=\"comment\">#删除指定元素</span></div><div class=\"line\">&gt;   dict.clear();<span class=\"comment\">#清空字典</span></div><div class=\"line\">&gt;   <span class=\"keyword\">del</span> dict;<span class=\"comment\">#删除字典</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>字典的函数&amp;方法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   cmp(dict1,dict2);<span class=\"comment\">#比较</span></div><div class=\"line\">&gt;   len(dict);<span class=\"comment\">#计数</span></div><div class=\"line\">&gt;   str(dict);<span class=\"comment\">#字符输出字典元素</span></div><div class=\"line\">&gt;   type(variable);<span class=\"comment\">#变量的类型</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   radiansdict.clear();<span class=\"comment\">#清空字典</span></div><div class=\"line\">&gt;   radiansdict.copy();<span class=\"comment\">#字典浅复制</span></div><div class=\"line\">&gt;   radiansdict.get(key,default=<span class=\"keyword\">None</span>);<span class=\"comment\">#获取值，若无，返回默认值。</span></div><div class=\"line\">&gt;   radiansdict.has_key(key);<span class=\"comment\">#查询是否包含指定key值</span></div><div class=\"line\">&gt;   radiansdict.items();<span class=\"comment\">#遍历显示字典元素数组</span></div><div class=\"line\">&gt;   radiansdict.keys();<span class=\"comment\">#列表显示所有key</span></div><div class=\"line\">&gt;   radiansdict.setdefault(key,default=<span class=\"keyword\">None</span>);<span class=\"comment\">#类似get，若key不存在，则添加。</span></div><div class=\"line\">&gt;   radiansdict.update(dict2);<span class=\"comment\">#将dict2更新到dict中。</span></div><div class=\"line\">&gt;   radiansdict.values();<span class=\"comment\">#返回所有value值。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p>python日期时间</p>\n<blockquote>\n<p>类似其他编程语言，时间基于1970年1月1日。Unix和windows支持到2038年？</p>\n<ul>\n<li><p>time</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   time.time();<span class=\"comment\">#获取时间戳</span></div><div class=\"line\">&gt;   time.localtime(time.time());<span class=\"comment\">#获得时间的元组</span></div><div class=\"line\">&gt;   time.asctime(time.localtime(time.time()));<span class=\"comment\">#格式化时间</span></div><div class=\"line\">&gt;   time.strftime(format[,t]);<span class=\"comment\">#自定义字符格式化时间</span></div><div class=\"line\">&gt;   <span class=\"comment\"># 格式化成2016-03-20 11:45:39形式</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> time.strftime(<span class=\"string\">\"%Y-%m-%d %H:%M:%S\"</span>, time.localtime()) </div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\"># 格式化成Sat Mar 28 22:24:24 2016形式</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> time.strftime(<span class=\"string\">\"%a %b %d %H:%M:%S %Y\"</span>, time.localtime()) </div><div class=\"line\">&gt;     </div><div class=\"line\">&gt;   <span class=\"comment\"># 将格式字符串转换为时间戳</span></div><div class=\"line\">&gt;   a = <span class=\"string\">\"Sat Mar 28 22:24:24 2016\"</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> time.mktime(time.strptime(a,<span class=\"string\">\"%a %b %d %H:%M:%S %Y\"</span>));</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>calendar</p>\n<p>==0-6表示一周，0表示周一。==</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   calendar.month(<span class=\"number\">2016</span>,<span class=\"number\">10</span>);<span class=\"comment\">#获取制定月份的日历。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>  <strong>函数和方法不在赘述</strong></p>\n<p>  datetime、pytz、dateutil模块也是处理时间相关。</p>\n</blockquote>\n</li>\n<li><p>函数</p>\n<blockquote>\n<p>类似其他编程语言的函数&amp;方法定义，python函数格式：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">functionname</span><span class=\"params\">( parameters )</span>:</span></div><div class=\"line\">&gt;     <span class=\"string\">\"函数文档\"</span></div><div class=\"line\">&gt;     function_suite</div><div class=\"line\">&gt;     <span class=\"keyword\">return</span> [expression]</div><div class=\"line\">&gt; <span class=\"comment\">#def 关键字，声明函数</span></div><div class=\"line\">&gt; <span class=\"comment\">#functionname 函数名</span></div><div class=\"line\">&gt; <span class=\"comment\">#(parameters) 参数，多个参数可以，分隔？还是多个括号</span></div><div class=\"line\">&gt; <span class=\"comment\">#可写声明文档，</span></div><div class=\"line\">&gt; <span class=\"comment\">#返回值，可以是None。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><strong>按值传递与按引用传递</strong></p>\n<p>Python中所有参数的传递，都是==引用传递==，一处修改，原始值则变。</p>\n<ul>\n<li><p>函数的参数：</p>\n<p><code>必备参数</code>、<code>关键字参数</code>、<code>默认参数</code>、<code>不定长参数</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"comment\">#必备参数，必须传入的形式，否则报错</span></div><div class=\"line\">&gt;   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">printStr</span><span class=\"params\">(str)</span>:</span></div><div class=\"line\">&gt;       ...</div><div class=\"line\">&gt;   \t<span class=\"keyword\">return</span>;    </div><div class=\"line\">&gt;   <span class=\"comment\">#关键字参数，输入参数的格式顺序，不必和声明的顺序一致。</span></div><div class=\"line\">&gt;   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">printInfo</span><span class=\"params\">(name,age)</span>:</span></div><div class=\"line\">&gt;       print(<span class=\"string\">\"name:\"</span>,name);</div><div class=\"line\">&gt;       print(<span class=\"string\">\"age:\"</span>,age)</div><div class=\"line\">&gt;       <span class=\"keyword\">return</span>;</div><div class=\"line\">&gt;   printInfo(age = <span class=\"number\">27</span>,name = <span class=\"string\">'jack'</span>);</div><div class=\"line\">&gt;   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">printDefault</span><span class=\"params\">(name,age=<span class=\"number\">20</span>)</span>:</span></div><div class=\"line\">&gt;       ......</div><div class=\"line\">&gt;       <span class=\"keyword\">return</span>;</div><div class=\"line\">&gt;   <span class=\"comment\">#此时可以使用默认参数</span></div><div class=\"line\">&gt;   printDefault(name = <span class=\"string\">'jack'</span>);<span class=\"comment\">#age 默认了。</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\">#不定长参数</span></div><div class=\"line\">&gt;   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">printLong</span><span class=\"params\">(arg1,*args)</span>:</span><span class=\"comment\">#星号*的那个参数，为可变参数。</span></div><div class=\"line\">&gt;       print(arg2);</div><div class=\"line\">&gt;       <span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> args:</div><div class=\"line\">&gt;           <span class=\"keyword\">print</span> var;</div><div class=\"line\">&gt;       <span class=\"keyword\">return</span>;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>Python使用lambda创建匿名函数。</p>\n<ul>\n<li>lambda是表达式，函数比def简单</li>\n<li>只能在lambda表达式中构建逻辑</li>\n<li>lambda仅能访问自有参数。</li>\n<li>lambda似乎只能写一行。</li>\n</ul>\n<p>==语法==</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"keyword\">lambda</span> [arg2[,arg2,......]]:expression</div><div class=\"line\">&gt;   <span class=\"comment\">#示例</span></div><div class=\"line\">&gt;   sum = <span class=\"keyword\">lambda</span> arg1,arg2:arg1+arg2;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\">#调用sum函数</span></div><div class=\"line\">&gt;   sum(<span class=\"number\">1</span>,<span class=\"number\">2</span>);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>  <strong>return用于退出函数，无有返回值则是None。</strong></p>\n<p>  变量作用域，全局和局部，都是作用于其声明范围内。</p>\n</blockquote>\n</li>\n<li><p>Python模块</p>\n<blockquote>\n<p>python模块指一段逻辑或函数方法，在python中，模块也是一个对象，可以命名，引用。类似于java中的类文件？</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">import</span> module1[,module2,...]<span class=\"comment\">#导入模块，就可以使用其方法和逻辑。</span></div><div class=\"line\">&gt; <span class=\"comment\">#用类名/文件名.方法/函数,来调用。</span></div><div class=\"line\">&gt; <span class=\"keyword\">from</span> modname <span class=\"keyword\">import</span> name1[,name2,...]<span class=\"comment\">#从指定空间导入模块。</span></div><div class=\"line\">&gt; <span class=\"keyword\">from</span> modname <span class=\"keyword\">import</span> * <span class=\"comment\">#导入指定名称空间下的所有模块。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>寻找模块的顺序是：当前文件、path路径、系统默认路径。</p>\n<ul>\n<li>变量默认都是局部范围的，全局变量需要global声明。</li>\n<li>dir()函数，列表显示。</li>\n<li>globals()和locals(),reload();</li>\n<li>python中也有包，文件的概念。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>Python文件IO和File、异常</p>\n<blockquote>\n<ul>\n<li><p>文件I/O</p>\n<p><code>raw_input</code></p>\n<p><code>input</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;  <span class=\"comment\">#raw_input 接受输入的一行</span></div><div class=\"line\">&gt;  str = raw_input(<span class=\"string\">\"Please input :\"</span>);</div><div class=\"line\">&gt;  print(<span class=\"string\">\"输入内容为：\"</span>,str);<span class=\"comment\">#str会接收键盘的输入内容</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;  <span class=\"comment\">#input类似与raw_input，可以接受输入表达式</span></div><div class=\"line\">&gt;  str = input(<span class=\"string\">\"Please input:\"</span>);</div><div class=\"line\">&gt;  print(<span class=\"string\">\"输入内容为：\"</span>,str);</div><div class=\"line\">&gt;  <span class=\"comment\">#上面可以输入：[x*5 for x in range(2,10,2)]</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>file对象操作文件</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;  file object = open(file_name[,access_mode][,buffering]);<span class=\"comment\">#用open()方法打开文件</span></div><div class=\"line\">&gt;  file.closed;<span class=\"comment\"># true or false</span></div><div class=\"line\">&gt;  file.mode;</div><div class=\"line\">&gt;  file.name;</div><div class=\"line\">&gt;  file.softspace;<span class=\"comment\">#有空格符来结束，需要返回False，不需要，True。</span></div><div class=\"line\">&gt;  file.write(string);<span class=\"comment\">#不会默认行尾加换行的，。</span></div><div class=\"line\">&gt;  file.read([count]);<span class=\"comment\">#读取指定个数的字节数。</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;  tell();<span class=\"comment\">#可知文件内，当前位置。</span></div><div class=\"line\">&gt;  seek(offset[,<span class=\"keyword\">from</span>]);<span class=\"comment\">#改变当前位置</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;  <span class=\"comment\">#python 的os模块有删除、重命名文件的方法</span></div><div class=\"line\">&gt;  os.rename(old_name,new_name);</div><div class=\"line\">&gt;  os.remove(<span class=\"string\">\"test.txt\"</span>);<span class=\"comment\">#删除文件</span></div><div class=\"line\">&gt;  os.mkdir(<span class=\"string\">\"abc\"</span>);os.chdir(<span class=\"string\">\"new\"</span>);os.getcwd();<span class=\"comment\">#显示当前目录。</span></div><div class=\"line\">&gt;  os.rmdir();</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p><strong>异常处理</strong></p>\n<p>try/except语句</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;  <span class=\"keyword\">try</span>:</div><div class=\"line\">&gt;      &lt;statements&gt;<span class=\"comment\">#运行代码</span></div><div class=\"line\">&gt;  <span class=\"keyword\">except</span> &lt;exception&gt;:</div><div class=\"line\">&gt;      &lt;e1&gt;<span class=\"comment\">#try到异常name</span></div><div class=\"line\">&gt;  <span class=\"keyword\">except</span> &lt;exception&gt;,&lt;data&gt;:</div><div class=\"line\">&gt;      &lt;e2&gt;<span class=\"comment\">#try到异常，并有数据</span></div><div class=\"line\">&gt;  <span class=\"keyword\">else</span>:</div><div class=\"line\">&gt;      &lt;statements2&gt;<span class=\"comment\">#无异常时候运行</span></div><div class=\"line\">&gt;  <span class=\"comment\">#类似java，python中可以不写exception的name，就会捕获所有异常。</span></div><div class=\"line\">&gt;  <span class=\"comment\">#也可以</span></div><div class=\"line\">&gt;  <span class=\"keyword\">except</span>(e1,e2,...):</div><div class=\"line\">&gt;      ...</div><div class=\"line\">&gt;  <span class=\"comment\">#类似java 有try finally</span></div><div class=\"line\">&gt;  <span class=\"keyword\">try</span>:</div><div class=\"line\">&gt;      &lt;&gt;</div><div class=\"line\">&gt;  <span class=\"keyword\">finally</span>:</div><div class=\"line\">&gt;      &lt;&gt;<span class=\"comment\">#总会执行的语句。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p> ==raise==语句自动触发异常</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;  <span class=\"keyword\">raise</span> [Exception[,args[,traceback]]]</div><div class=\"line\">&gt;  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">functionName</span><span class=\"params\">( level )</span>:</span></div><div class=\"line\">&gt;      <span class=\"keyword\">if</span> level &lt; <span class=\"number\">1</span>:</div><div class=\"line\">&gt;          <span class=\"keyword\">raise</span> Exception(<span class=\"string\">\"Invalid level!\"</span>, level)</div><div class=\"line\">&gt;          <span class=\"comment\"># 触发异常后，后面的代码就不会再执行</span></div><div class=\"line\">&gt;          </div><div class=\"line\">&gt;  <span class=\"keyword\">try</span>:</div><div class=\"line\">&gt;     <span class=\"comment\"># 正常逻辑</span></div><div class=\"line\">&gt;  <span class=\"keyword\">except</span> <span class=\"string\">\"Invalid level!\"</span>:<span class=\"comment\">#对应自定义的异常名，如上。</span></div><div class=\"line\">&gt;     <span class=\"comment\"># 触发自定义异常    </span></div><div class=\"line\">&gt;  <span class=\"keyword\">else</span>:</div><div class=\"line\">&gt;     <span class=\"comment\"># 其余代码</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyError</span><span class=\"params\">(RuntimeError)</span>:</span></div><div class=\"line\">&gt;      <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">init</span><span class=\"params\">(self,arg)</span>:</span></div><div class=\"line\">&gt;          self.args = arg</div><div class=\"line\">&gt;          </div><div class=\"line\">&gt;  <span class=\"comment\">#自己触发异常</span></div><div class=\"line\">&gt;  <span class=\"keyword\">try</span>:</div><div class=\"line\">&gt;      <span class=\"keyword\">raise</span> MyError(<span class=\"string\">\"hao xiang shu ru cuo le \"</span>)</div><div class=\"line\">&gt;  <span class=\"keyword\">except</span> Networkerror,e:</div><div class=\"line\">&gt;      <span class=\"keyword\">print</span> e.args</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"四、Python高级教程\"><a href=\"#四、Python高级教程\" class=\"headerlink\" title=\"四、Python高级教程\"></a>四、Python高级教程</h2><ul>\n<li><p>面向对象</p>\n<blockquote>\n<p>Python是一种面向对象的解释型语言，类似于其他面向对象的编程语言，需要熟悉一下面向对象的名词概念：</p>\n<ul>\n<li><code>类(class)</code>：用于描述具有相同属性和方法的对象的集合。描述一类事物，对象是类的实例。</li>\n<li><code>类变量</code>：类中公开化的变量，作用于类的范围内，区别于实例变量。</li>\n<li><code>数据成员</code>：类变量或实例变量，用于处理实例对象相关的数据。</li>\n<li><code>方法重写</code>：重写继承自父类的方法，实现自有的逻辑。override。</li>\n<li><code>实例变量</code>：定义在方法中的变量，作用于方法内。</li>\n<li><code>继承</code>：即一个派生类继承基类的字段和方法。</li>\n<li><code>实例化</code>：创建一个类的实例，类的具体对象。</li>\n<li><code>方法</code>：类中定义的函数。</li>\n<li><code>对象</code>：根据类定义的数据结构构建的一个实例，包含类的数据成员和方法。</li>\n</ul>\n<ol>\n<li><p>创建类</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassName</span>:</span><span class=\"comment\">#定义类的关键字class</span></div><div class=\"line\">&gt;        <span class=\"string\">'类的描述信息'</span> <span class=\"comment\">#帮助文档</span></div><div class=\"line\">&gt;        class_suite <span class=\"comment\">#类题</span></div><div class=\"line\">&gt;    <span class=\"comment\">#例如：</span></div><div class=\"line\">&gt;    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span>:</span></div><div class=\"line\">&gt;       <span class=\"string\">'所有员工的基类'</span></div><div class=\"line\">&gt;       empCount = <span class=\"number\">0</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;       <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name, salary)</span>:</span><span class=\"comment\">#构造函数</span></div><div class=\"line\">&gt;          self.name = name</div><div class=\"line\">&gt;          self.salary = salary</div><div class=\"line\">&gt;          Employee.empCount += <span class=\"number\">1</span></div><div class=\"line\">&gt;       </div><div class=\"line\">&gt;       <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">displayCount</span><span class=\"params\">(self)</span>:</span><span class=\"comment\">#方法函数</span></div><div class=\"line\">&gt;         <span class=\"keyword\">print</span> <span class=\"string\">\"Total Employee %d\"</span> % Employee.empCount</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;       <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">displayEmployee</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">&gt;          <span class=\"keyword\">print</span> <span class=\"string\">\"Name : \"</span>, self.name,  <span class=\"string\">\", Salary: \"</span>, self.salary</div><div class=\"line\">&gt;    <span class=\"comment\">#实例化对象</span></div><div class=\"line\">&gt;    objectName = ClassName(...);<span class=\"comment\">#根据类的构造函数创建对象。</span></div><div class=\"line\">&gt;    <span class=\"comment\">#访问方法属性，用object.method();</span></div><div class=\"line\">&gt;    objectName.displayCount();</div><div class=\"line\">&gt;    <span class=\"comment\">#可以添加、删除、修改类的属性</span></div><div class=\"line\">&gt;    objectName.age = <span class=\"number\">20</span>;<span class=\"comment\"># add attribution</span></div><div class=\"line\">&gt;    objectName.age =<span class=\"number\">26</span>;<span class=\"comment\">#modify attribution</span></div><div class=\"line\">&gt;    <span class=\"keyword\">del</span> objectName.age <span class=\"comment\"># delete attribution</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;<br>&gt;</p>\n<blockquote>\n<p>   <strong>Python有专门的函数，处理类的属性和方法</strong><br>   getattr(obj,name[,default]);<br>   setattr(obj,name,value);<br>   hasattr(obj,name);<br>   delattr(obj,name);</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;</div><div class=\"line\">&gt; 2. Python内置属性</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    ```python</div><div class=\"line\">&gt;    #python attribution，用ClassName.function调用。</div><div class=\"line\">&gt;    __dict__:类的属性</div><div class=\"line\">&gt;    __doc__:类的文档字符串</div><div class=\"line\">&gt;    __name__:类名</div><div class=\"line\">&gt;    __module__:类定义所在的模块</div><div class=\"line\">&gt;    __bases__类的所有父类构成元素</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p>类似java，python使用内置引用计数器，处理垃圾回收。</p>\n</li>\n<li><p>Python的继承：</p>\n<ul>\n<li><p>格式：class SubClassName [ParentClass1[,ParentClass2,…]]:</p>\n</li>\n<li><p>Python类的继承==支持多继承==</p>\n</li>\n<li><p>派生类继承基类，构造函数不会被自动调用，需要专门调用。</p>\n</li>\n<li><p>调用基类方法时候，需要用BaseClassName.而且需要self参数。区别于本类内的函数方法。</p>\n</li>\n<li><p>同类函数名，则优先调用本类中的函数方法，若无，再去基类中寻找。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;      issbuclass();#判断是否是另一个类的派生类，issubclass(sub,super);</div><div class=\"line\">&gt;      isinstance(obj,class);#判断一个对象，是不是类的实例。</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p>方法重写与重载</p>\n<ul>\n<li><p>重写基类的方法，用于实现自己的逻辑。</p>\n</li>\n<li><p>基础重载：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;      <span class=\"comment\">#函数方法，前后两个下划线__init__</span></div><div class=\"line\">&gt;      __init__(self[,args])<span class=\"comment\">#构造函数</span></div><div class=\"line\">&gt;      __del__(self)<span class=\"comment\">#删除对象</span></div><div class=\"line\">&gt;      __repr__(self)<span class=\"comment\">#转化为编译器格式</span></div><div class=\"line\">&gt;      __str__(self)<span class=\"comment\">#转化为可阅读模式</span></div><div class=\"line\">&gt;      __cmp__(self,x)<span class=\"comment\">#对象比较</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>运算符重载</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;      <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vector</span>:</span></div><div class=\"line\">&gt;         <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, a, b)</span>:</span></div><div class=\"line\">&gt;            self.a = a</div><div class=\"line\">&gt;            self.b = b</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;         <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">&gt;            <span class=\"keyword\">return</span> <span class=\"string\">'Vector (%d, %d)'</span> % (self.a, self.b)</div><div class=\"line\">&gt;         </div><div class=\"line\">&gt;         <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__add__</span><span class=\"params\">(self,other)</span>:</span></div><div class=\"line\">&gt;            <span class=\"keyword\">return</span> Vector(self.a + other.a, self.b + other.b)</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;      v1 = Vector(<span class=\"number\">2</span>,<span class=\"number\">10</span>)</div><div class=\"line\">&gt;      v2 = Vector(<span class=\"number\">5</span>,<span class=\"number\">-2</span>)</div><div class=\"line\">&gt;      <span class=\"keyword\">print</span> v1 + v2<span class=\"comment\">#运算符的重载</span></div><div class=\"line\">&gt;      <span class=\"comment\">#输出结果</span></div><div class=\"line\">&gt;      Vector(<span class=\"number\">7</span>,<span class=\"number\">8</span>)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p><strong>类的属性和方法</strong></p>\n<ul>\n<li><p>类的私有属性</p>\n<p>__private<em>attrs：两个下划线开头，仅能在类内部使用。self.\\</em>_private_attrs。</p>\n</li>\n<li><p>类的方法</p>\n<p>关键字<code>def</code>定义类的方法，类似定义函数。但是类的方法必须包含参数<code>self</code>且为第一参数，私有方法：__private<em>method，内部调用self.\\</em>_private_method</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;      <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">method</span><span class=\"params\">(self[,args])</span>:</span></div><div class=\"line\">&gt;          .....</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li>Python不允许实例化的类访问私有数据，可用obj._classname_attrName访问属性。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>正则表达式</p>\n<blockquote>\n<p>Python的re模块包含了全部的正则表达式。</p>\n<p>compile函数用于构建正则表达式。</p>\n<ol>\n<li><p>re.match</p>\n<p>从字符串起始位置匹配，起始不成功匹配，返回None。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    <span class=\"comment\">#pattern 正则表达式，string 匹配字符串，flags标志位，如区分大小写，多行匹配等。</span></div><div class=\"line\">&gt;    re.match(pattern,string,flags=<span class=\"number\">0</span>);</div><div class=\"line\">&gt;    group(num= <span class=\"number\">0</span>)<span class=\"comment\">#匹配整个表达式字符串，group可以依次输入多个组号。</span></div><div class=\"line\">&gt;    groups();<span class=\"comment\">#返回包含所有小组字符串的元组。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>   示例：</p>\n   <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    <span class=\"keyword\">import</span> re</div><div class=\"line\">&gt;    print(re.match(<span class=\"string\">'www'</span>, <span class=\"string\">'www.runoob.com'</span>).span())  <span class=\"comment\"># 在起始位置匹配</span></div><div class=\"line\">&gt;    print(re.match(<span class=\"string\">'com'</span>, <span class=\"string\">'www.runoob.com'</span>))         <span class=\"comment\"># 不在起始位置匹配</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\">#输出结果</span></div><div class=\"line\">&gt;    (<span class=\"number\">0</span>,<span class=\"number\">3</span>)</div><div class=\"line\">&gt;    <span class=\"keyword\">None</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n   <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt;    <span class=\"keyword\">import</span> re</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    line = <span class=\"string\">\"Cats are smarter than dogs\"</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    matchObj = re.match( <span class=\"string\">r'(.*) are (.*?) .*'</span>, line, re.M|re.I)</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"keyword\">if</span> matchObj:</div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> <span class=\"string\">\"matchObj.group() : \"</span>, matchObj.group()</div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> <span class=\"string\">\"matchObj.group(1) : \"</span>, matchObj.group(<span class=\"number\">1</span>)</div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> <span class=\"string\">\"matchObj.group(2) : \"</span>, matchObj.group(<span class=\"number\">2</span>)</div><div class=\"line\">&gt;    <span class=\"keyword\">else</span>:</div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> <span class=\"string\">\"No match!!\"</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\">#输出结果</span></div><div class=\"line\">&gt;    matchObj.group() :  Cats are smarter than dogs</div><div class=\"line\">&gt;    matchObj.group(<span class=\"number\">1</span>) :  Cats</div><div class=\"line\">&gt;    matchObj.group(<span class=\"number\">2</span>) :  smarter</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p>re.search方法</p>\n<p>扫描整个字符串，并返回第一个成功的匹配。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    re.search(pattern,string,flags=<span class=\"number\">0</span>);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>   示例：</p>\n   <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt;    <span class=\"comment\"># -*- coding: UTF-8 -*- </span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"keyword\">import</span> re</div><div class=\"line\">&gt;    print(re.search(<span class=\"string\">'www'</span>, <span class=\"string\">'www.runoob.com'</span>).span())  <span class=\"comment\"># 在起始位置匹配</span></div><div class=\"line\">&gt;    print(re.search(<span class=\"string\">'com'</span>, <span class=\"string\">'www.runoob.com'</span>).span())         <span class=\"comment\"># 不在起始位置匹配</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\">#输出结果</span></div><div class=\"line\">&gt;    (<span class=\"number\">0</span>,<span class=\"number\">3</span>)</div><div class=\"line\">&gt;    (<span class=\"number\">11</span>,<span class=\"number\">14</span>)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n   <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt;    <span class=\"keyword\">import</span> re</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    line = <span class=\"string\">\"Cats are smarter than dogs\"</span>;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    searchObj = re.search( <span class=\"string\">r'(.*) are (.*?) .*'</span>, line, re.M|re.I)</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"keyword\">if</span> searchObj:</div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> <span class=\"string\">\"searchObj.group() : \"</span>, searchObj.group()</div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> <span class=\"string\">\"searchObj.group(1) : \"</span>, searchObj.group(<span class=\"number\">1</span>)</div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> <span class=\"string\">\"searchObj.group(2) : \"</span>, searchObj.group(<span class=\"number\">2</span>)</div><div class=\"line\">&gt;    <span class=\"keyword\">else</span>:</div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> <span class=\"string\">\"Nothing found!!\"</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\">#输出结果</span></div><div class=\"line\">&gt;    searchObj.group() :  Cats are smarter than dogs</div><div class=\"line\">&gt;    searchObj.group(<span class=\"number\">1</span>) :  Cats</div><div class=\"line\">&gt;    searchObj.group(<span class=\"number\">2</span>) :  smarter</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p>re.match &amp; re.search</p>\n<p><code>re.match</code>匹配起始，不成功则None。</p>\n<p><code>re.search</code>匹配全部。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    #!/usr/bin/python</div><div class=\"line\">&gt;    import re</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    line = \"Cats are smarter than dogs\";</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    matchObj = re.match( r'dogs', line, re.M|re.I)</div><div class=\"line\">&gt;    if matchObj:</div><div class=\"line\">&gt;       print \"match --&gt; matchObj.group() : \", matchObj.group()</div><div class=\"line\">&gt;    else:</div><div class=\"line\">&gt;       print \"No match!!\"</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    matchObj = re.search( r'dogs', line, re.M|re.I)</div><div class=\"line\">&gt;    if matchObj:</div><div class=\"line\">&gt;       print \"search --&gt; matchObj.group() : \", matchObj.group()</div><div class=\"line\">&gt;    else:</div><div class=\"line\">&gt;       print \"No match!!\"</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    #输出结果</div><div class=\"line\">&gt;    No match!!</div><div class=\"line\">&gt;    serach --&gt; matchObj.group() : dogs</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p>re.sub检索和替换</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    re.sub(pattern,rep1,string,max = <span class=\"number\">0</span>);<span class=\"comment\">#count &gt;=0,匹配次数。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>   示例：</p>\n   <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt;    <span class=\"keyword\">import</span> re</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    phone = <span class=\"string\">\"2004-959-559 # This is Phone Number\"</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\"># Delete Python-style comments</span></div><div class=\"line\">&gt;    num = re.sub(<span class=\"string\">r'#.*$'</span>, <span class=\"string\">\"\"</span>, phone)</div><div class=\"line\">&gt;    <span class=\"keyword\">print</span> <span class=\"string\">\"Phone Num : \"</span>, num</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\"># Remove anything other than digits</span></div><div class=\"line\">&gt;    num = re.sub(<span class=\"string\">r'\\D'</span>, <span class=\"string\">\"\"</span>, phone)    </div><div class=\"line\">&gt;    <span class=\"keyword\">print</span> <span class=\"string\">\"Phone Num : \"</span>, num</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\">#输出结果</span></div><div class=\"line\">&gt;    Phone Num :  <span class=\"number\">2004</span><span class=\"number\">-959</span><span class=\"number\">-559</span></div><div class=\"line\">&gt;    Phone Num :  <span class=\"number\">2004959559</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p>正则表达式的修饰符-可选标志</p>\n<p><em>标志修饰符控制匹配模式，多个标识符可以用按位OR<code>|</code>指定</em></p>\n<p>| 修饰符  | 描绘                                |<br>| —- | ——————————— |<br>| re.l | 匹配不分大小写                           |<br>| re.L | 本地化识别(local-aware)匹配              |<br>| re.M | 多行匹配，影响<code>^</code>和<code>$</code>                    |<br>| re.S | 使<code>.</code>匹配包括行在内的所有字符                  |<br>| re.U | Unicode解析字符，影响<code>\\w</code>、<code>\\W</code>、<code>\\b</code>、<code>\\B</code> |<br>| re.X | 灵活格式                              |</p>\n</li>\n<li><p>正则表达式模式</p>\n<ul>\n<li><code>字母和数字</code>表达自身。</li>\n<li>多数字母和数字前加<code>\\</code>会转义</li>\n<li>标点符号均是特殊意思，除非转义。</li>\n<li><code>\\</code>是转义符</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    ^\t匹配字符串的开头</div><div class=\"line\">&gt;    $\t匹配字符串的末尾。</div><div class=\"line\">&gt;    .\t匹配任意字符，除了换行符\\n，当re.DOTALL标记被指定时，则可以匹配包括换行符的任意字符。</div><div class=\"line\">&gt;    [...]\t用来表示一组字符,单独列出：[amk] 匹配 'a'，'m'或'k'</div><div class=\"line\">&gt;    [^...]\t不在[]中的字符：[^abc] 匹配除了a,b,c之外的字符。</div><div class=\"line\">&gt;    re*\t匹配0个或多个的表达式。</div><div class=\"line\">&gt;    re+\t匹配1个或多个的表达式。</div><div class=\"line\">&gt;    re?\t匹配0个或1个由前面的正则表达式定义的片段，非贪婪方式</div><div class=\"line\">&gt;    re&#123; n&#125;\t</div><div class=\"line\">&gt;    re&#123; n,&#125;\t精确匹配n个前面表达式。</div><div class=\"line\">&gt;    re&#123; n, m&#125;\t匹配 n 到 m 次由前面的正则表达式定义的片段，贪婪方式</div><div class=\"line\">&gt;    a| b\t匹配a或b</div><div class=\"line\">&gt;    (re)\tG匹配括号内的表达式，也表示一个组</div><div class=\"line\">&gt;    (?imx)\t正则表达式包含三种可选标志：i, m, 或 x 。只影响括号中的区域。</div><div class=\"line\">&gt;    (?-imx)\t正则表达式关闭 i, m, 或 x 可选标志。只影响括号中的区域。</div><div class=\"line\">&gt;    (?: re)\t类似 (...), 但是不表示一个组</div><div class=\"line\">&gt;    (?imx: re)\t在括号中使用i, m, 或 x 可选标志</div><div class=\"line\">&gt;    (?-imx: re)\t在括号中不使用i, m, 或 x 可选标志</div><div class=\"line\">&gt;    (?#...)\t注释.</div><div class=\"line\">&gt;    (?= re)\t前向肯定界定符。如果所含正则表达式，以 ... 表示，在当前位置成功匹配时成功，否则失败。但一旦所含表达式已经尝试，匹配引擎根本没有提高；模式的剩余部分还要尝试界定符的右边。</div><div class=\"line\">&gt;    (?! re)\t前向否定界定符。与肯定界定符相反；当所含表达式不能在字符串当前位置匹配时成功</div><div class=\"line\">&gt;    (?&gt; re)\t匹配的独立模式，省去回溯。</div><div class=\"line\">&gt;    \\w\t匹配字母数字及下划线</div><div class=\"line\">&gt;    \\W\t匹配非字母数字及下划线</div><div class=\"line\">&gt;    \\s\t匹配任意空白字符，等价于 [\\t\\n\\r\\f].</div><div class=\"line\">&gt;    \\S\t匹配任意非空字符</div><div class=\"line\">&gt;    \\d\t匹配任意数字，等价于 [0-9].</div><div class=\"line\">&gt;    \\D\t匹配任意非数字</div><div class=\"line\">&gt;    \\A\t匹配字符串开始</div><div class=\"line\">&gt;    \\Z\t匹配字符串结束，如果是存在换行，只匹配到换行前的结束字符串。c</div><div class=\"line\">&gt;    \\z\t匹配字符串结束</div><div class=\"line\">&gt;    \\G\t匹配最后匹配完成的位置。</div><div class=\"line\">&gt;    \\b\t匹配一个单词边界，也就是指单词和空格间的位置。例如， 'er\\b' 可以匹配\"never\" 中的 'er'，但不能匹配 \"verb\" 中的 'er'。</div><div class=\"line\">&gt;    \\B\t匹配非单词边界。'er\\B' 能匹配 \"verb\" 中的 'er'，但不能匹配 \"never\" 中的 'er'。</div><div class=\"line\">&gt;    \\n, \\t, 等.\t匹配一个换行符。匹配一个制表符。等</div><div class=\"line\">&gt;    \\1...\\9\t匹配第n个分组的子表达式。</div><div class=\"line\">&gt;    \\10\t匹配第n个分组的子表达式，如果它经匹配。否则指的是八进制字符码的表达式。</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n</li>\n<li><p>CGI通用网关接口</p>\n<blockquote>\n<p>CGI程序，运行在服务器，python脚本、perl脚本、shell脚本、C/C++程序等。</p>\n<p>Web服务器需支持cgi，通常在/cgi-bin/ /var/www/cgi-bin/</p>\n<p>cgi文件<code>.cgi</code>或者各自语言的源文件。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt; <span class=\"comment\"># -*- coding: UTF-8 -*-</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt; <span class=\"keyword\">print</span> <span class=\"string\">\"Content-type:text/html\"</span>\t<span class=\"comment\">#向浏览器显示的内容类型</span></div><div class=\"line\">&gt; <span class=\"keyword\">print</span>                               <span class=\"comment\"># 空行，告诉服务器结束头部</span></div><div class=\"line\">&gt; <span class=\"keyword\">print</span> <span class=\"string\">'&lt;html&gt;'</span></div><div class=\"line\">&gt; <span class=\"keyword\">print</span> <span class=\"string\">'&lt;head&gt;'</span></div><div class=\"line\">&gt; <span class=\"keyword\">print</span> <span class=\"string\">'&lt;meta charset=\"utf-8\"&gt;'</span></div><div class=\"line\">&gt; <span class=\"keyword\">print</span> <span class=\"string\">'&lt;title&gt;Hello Word - 我的第一个 CGI 程序！&lt;/title&gt;'</span></div><div class=\"line\">&gt; <span class=\"keyword\">print</span> <span class=\"string\">'&lt;/head&gt;'</span></div><div class=\"line\">&gt; <span class=\"keyword\">print</span> <span class=\"string\">'&lt;body&gt;'</span></div><div class=\"line\">&gt; <span class=\"keyword\">print</span> <span class=\"string\">'&lt;h2&gt;Hello Word! 我是来自菜鸟教程的第一CGI程序&lt;/h2&gt;'</span></div><div class=\"line\">&gt; <span class=\"keyword\">print</span> <span class=\"string\">'&lt;/body&gt;'</span></div><div class=\"line\">&gt; <span class=\"keyword\">print</span> <span class=\"string\">'&lt;/html&gt;'</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>如上保存为hello.py，修改权限755。放置于cgi-bin/目录下，即可在浏览器中访问。</p>\n<ul>\n<li><p>CGI程序中HTTP头部常用信息</p>\n<p>| 头                  | 描述              |<br>| —————— | ————— |<br>| Content-type       | 请求与实体对应的MIME信息。 |<br>| Expires:Date       | 响应过期的日期和时间      |<br>| Location:URL       | 重定向             |<br>| Last-modified:Date | 请求资源的最后修改时间     |<br>| Content-length:N   | 请求内容长度          |<br>| Set-Cookie:String  | 设置Http Cookie   |</p>\n</li>\n<li><p>CGI环境变量</p>\n<p>所有CGI程序都接收以下环境变量</p>\n<p>| 变量名             | 描述                                  |<br>| ————— | ———————————– |<br>| CONTENT_TYPE    | MIME类型                              |<br>| CONTENT_LENGTH  | 有效数据字节数                             |<br>| HTTP_COOKIE     | 客户机内cookie内容                        |<br>| HTTP_USER_AGENT | 客户及版本，浏览器信息等。                       |<br>| PATH_INFO       | 表示CGI程序名之后的其他路径信息                   |<br>| QUERY_STRING    | GET请求时，代表所传递的信息。                    |<br>| REMOTE_ADDR     | 客户机ip地址                             |<br>| REMOTE_HOST     | 客户机主机名                              |<br>| REQUEST_METHOD  | 提供脚本被调用的方法，http/1.0协议，仅GET和POST有意义。 |<br>| SCRIPT_FILENAME | CGI脚本完整路径                           |<br>| SERVER_NAME     | CGI脚本完整名称                           |<br>| SERVER_SOFTWARE | 调用CGI程序的http服务器的名称，版本信息。            |</p>\n<hr>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;       <span class=\"comment\">#输出所有cgi环境变量信息</span></div><div class=\"line\">&gt;       <span class=\"keyword\">import</span> os</div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> <span class=\"string\">\"Content-type: text/html\"</span></div><div class=\"line\">&gt;       <span class=\"keyword\">print</span></div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> <span class=\"string\">\"&lt;meta charset=\\\"utf-8\\\"&gt;\"</span></div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> <span class=\"string\">\"&lt;b&gt;环境变量&lt;/b&gt;&lt;br&gt;\"</span></div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> <span class=\"string\">\"&lt;ul&gt;\"</span></div><div class=\"line\">&gt;       <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> os.environ.keys():</div><div class=\"line\">&gt;           <span class=\"keyword\">print</span> <span class=\"string\">\"&lt;li&gt;&lt;span style='color:green'&gt;%30s &lt;/span&gt;:%s&lt;/li&gt;\"</span> % (key,os.environ[key])</div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> <span class=\"string\">\"&lt;/ul&gt;\"</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>GET&amp;POST</p>\n<p>浏览器请求服务器的两中主要方式</p>\n<ul>\n<li><p>GET方法</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;     http://www.test.com/cgi-bin/hello.py?key1=value1&amp;key2=value2</div><div class=\"line\">&gt;     #GET方法相关注释</div><div class=\"line\">&gt;     '''</div><div class=\"line\">&gt;     请求可被缓存，请求保存在浏览器历史纪录，可被收藏书签，请求不应在处理敏感数据时使用，请求有长度限制，请求只应用于取回数据。</div><div class=\"line\">&gt;     '''</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>POST方法</p>\n<p>post方法较为安全可靠。</p>\n</li>\n</ul>\n<ul>\n<li><p>CGI中使用cookie</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   Set-cookie:name=name;expires=date;path=path;domain=domain;secure</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>  <strong>注释：</strong></p>\n<p>  <code>name=name</code>: 需要设置cookie的值(name不能使用”;”和”,”号),有多个name值时用 “;” 分隔，例如：name1=name1;name2=name2;name3=name3。<br>  <code>expires=date</code>: cookie的有效期限,格式： expires=”Wdy,DD-Mon-YYYY HH:MM:SS”<br>  <code>path=path</code>: 设置cookie支持的路径,如果path是一个路径，则cookie对这个目录下的所有文件及子目录生效，例如： path=”/cgi-bin/“，如果path是一个文件，则cookie指对这个文件生效，例如：path=”/cgi-bin/cookie.cgi”。<br>  <code>domain=domain</code>: 对cookie生效的域名，例如：domain=”www.runoob.com”<br>  <code>secure</code>: 如果给出此标志，表示cookie只能通过SSL协议的https服务器来传递。<br>  cookie的接收是通过设置环境变量HTTP_COOKIE来实现的，CGI程序可以通过检索该变量获取cookie信息。</p>\n<ul>\n<li><p>cookie检索</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;     <span class=\"comment\">#cookie信息存储在CGI环境变量HTTP_COOKIE中，</span></div><div class=\"line\">&gt;     key1=value1;key=value2;......</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>文件上传</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;     <span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\">&gt;     <span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">&gt;     <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">&gt;     <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">&gt;     <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>菜鸟教程(runoob.com)<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">&gt;     <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">&gt;     <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">&gt;      <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">enctype</span>=<span class=\"string\">\"multipart/form-data\"</span> </span></div><div class=\"line\">&gt;                          action=\"/cgi-bin/save_file.py\" method=\"post\"&gt;</div><div class=\"line\">&gt;        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>选中文件: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"filename\"</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">&gt;        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"上传\"</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">&gt;        <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\">&gt;     <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">&gt;     <span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<pre><code>上面的html形成一个界面，可以选择上传文件，调用save_file.py脚本\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;     <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt;     <span class=\"comment\"># -*- coding: UTF-8 -*-</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     <span class=\"keyword\">import</span> cgi, os</div><div class=\"line\">&gt;     <span class=\"keyword\">import</span> cgitb; cgitb.enable()</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     form = cgi.FieldStorage()</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     <span class=\"comment\"># 获取文件名</span></div><div class=\"line\">&gt;     fileitem = form[<span class=\"string\">'filename'</span>]</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     <span class=\"comment\"># 检测文件是否上传</span></div><div class=\"line\">&gt;     <span class=\"keyword\">if</span> fileitem.filename:</div><div class=\"line\">&gt;        <span class=\"comment\"># 设置文件路径 </span></div><div class=\"line\">&gt;        fn = os.path.basename(fileitem.filename)</div><div class=\"line\">&gt;        open(<span class=\"string\">'/tmp/'</span> + fn, <span class=\"string\">'wb'</span>).write(fileitem.file.read())</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;        message = <span class=\"string\">'文件 \"'</span> + fn + <span class=\"string\">'\" 上传成功'</span></div><div class=\"line\">&gt;        </div><div class=\"line\">&gt;     <span class=\"keyword\">else</span>:</div><div class=\"line\">&gt;        message = <span class=\"string\">'文件没有上传'</span></div><div class=\"line\">&gt;        </div><div class=\"line\">&gt;     <span class=\"keyword\">print</span> <span class=\"string\">\"\"\"\\</span></div><div class=\"line\">&gt;     Content-Type: text/html\\n</div><div class=\"line\">&gt;     &lt;html&gt;</div><div class=\"line\">&gt;     &lt;head&gt;</div><div class=\"line\">&gt;     &lt;meta charset=\"utf-8\"&gt;</div><div class=\"line\">&gt;     &lt;title&gt;菜鸟教程(runoob.com)&lt;/title&gt;</div><div class=\"line\">&gt;     &lt;/head&gt;</div><div class=\"line\">&gt;     &lt;body&gt;</div><div class=\"line\">&gt;        &lt;p&gt;%s&lt;/p&gt;</div><div class=\"line\">&gt;     &lt;/body&gt;</div><div class=\"line\">&gt;     &lt;/html&gt;</div><div class=\"line\">&gt;     \"\"\" % (message,)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</code></pre></blockquote>\n<p>&gt;</p>\n<blockquote>\n<pre><code>**记得文件的权限设置。**\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;     <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt;     <span class=\"comment\"># -*- coding: UTF-8 -*-</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     <span class=\"comment\"># HTTP 头部</span></div><div class=\"line\">&gt;     <span class=\"keyword\">print</span> <span class=\"string\">\"Content-Disposition: attachment; filename=\\\"foo.txt\\\"\"</span>;</div><div class=\"line\">&gt;     <span class=\"keyword\">print</span></div><div class=\"line\">&gt;     <span class=\"comment\"># 打开文件</span></div><div class=\"line\">&gt;     fo = open(<span class=\"string\">\"foo.txt\"</span>, <span class=\"string\">\"rb\"</span>)</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     str = fo.read();</div><div class=\"line\">&gt;     <span class=\"keyword\">print</span> str</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     <span class=\"comment\"># 关闭文件</span></div><div class=\"line\">&gt;     fo.close()</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</code></pre></blockquote>\n<p>&gt;</p>\n<blockquote>\n<pre><code>**以上为文件下载**\n</code></pre></blockquote>\n</li>\n<li><p>Python操作mysql数据库</p>\n<blockquote>\n<p>python支持多种数据库，有对应的模块。DB-API使用流程</p>\n<ol>\n<li><p>引入api模块。</p>\n</li>\n<li><p>获取数据库链接。</p>\n</li>\n<li><p>执行sql语句和存储。</p>\n</li>\n<li><p>关闭连接。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt;    <span class=\"comment\"># -*- coding: UTF-8 -*-</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"keyword\">import</span> MySQLdb</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\"># 打开数据库连接</span></div><div class=\"line\">&gt;    db = MySQLdb.connect(<span class=\"string\">\"localhost\"</span>,<span class=\"string\">\"testuser\"</span>,<span class=\"string\">\"test123\"</span>,<span class=\"string\">\"TESTDB\"</span> )</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\"># 使用cursor()方法获取操作游标 </span></div><div class=\"line\">&gt;    cursor = db.cursor()</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\"># 使用execute方法执行SQL语句</span></div><div class=\"line\">&gt;    cursor.execute(<span class=\"string\">\"SELECT VERSION()\"</span>)</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\"># 使用 fetchone() 方法获取一条数据库。</span></div><div class=\"line\">&gt;    data = cursor.fetchone()</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"keyword\">print</span> <span class=\"string\">\"Database version : %s \"</span> % data</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\"># 关闭数据库连接</span></div><div class=\"line\">&gt;    db.close()</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>python数据库mysql，需要mysqldb</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   fetchone();<span class=\"comment\">#获取下一个查询结果集</span></div><div class=\"line\">&gt;   fetchall();<span class=\"comment\">#接收全部返回结果行</span></div><div class=\"line\">&gt;   rowcount;<span class=\"comment\">#只读属性，返回执行execute()后影响的行数</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>事务</p>\n<p>事务的四个属性：</p>\n<ul>\n<li>原子性（atomicity）。一个事务是一个不可分割的工作单位，事务中包括的诸操作要么都做，要么都不做。</li>\n<li>一致性（consistency）。事务必须是使数据库从一个一致性状态变到另一个一致性状态。一致性与原子性是密切相关的。</li>\n<li>隔离性（isolation）。一个事务的执行不能被其他事务干扰。即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。</li>\n<li>持久性（durability）。持续性也称永久性（permanence），指一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。接下来的其他操作或故障不应该对其有任何影响。</li>\n</ul>\n<p><strong><em>Python DB API 2.0 的事务提供了两个方法 commit 或 rollback。</em></strong></p>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p>Python网络编程</p>\n<blockquote>\n<p>python提供两个级别的网络服务：</p>\n<p>1、低级别支持基本Socket</p>\n<p>2、高级别SocketServer</p>\n<p>==Socket==套接字用于程序在主机间或者进程间通讯。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"comment\">#pyton中socket函数</span></div><div class=\"line\">&gt; socket.socket([family[,type[,proto]]])</div><div class=\"line\">&gt; <span class=\"comment\"># family 套接字家族，可用AF_UNIX或AF_INET</span></div><div class=\"line\">&gt; <span class=\"comment\">#type 类型，面向连接与否，SOCK_STREAM和SOCK_DGRAM</span></div><div class=\"line\">&gt; <span class=\"comment\">#proto 默认为0</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><strong>Python中socket函数可以参照api文档，此处不在赘述。</strong></p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"comment\">#服务端</span></div><div class=\"line\">&gt; <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt; <span class=\"comment\"># -*- coding: UTF-8 -*-</span></div><div class=\"line\">&gt; <span class=\"comment\"># 文件名：server.py</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt; <span class=\"keyword\">import</span> socket               <span class=\"comment\"># 导入 socket 模块</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt; s = socket.socket()         <span class=\"comment\"># 创建 socket 对象</span></div><div class=\"line\">&gt; host = socket.gethostname() <span class=\"comment\"># 获取本地主机名</span></div><div class=\"line\">&gt; port = <span class=\"number\">12345</span>                <span class=\"comment\"># 设置端口</span></div><div class=\"line\">&gt; s.bind((host, port))        <span class=\"comment\"># 绑定端口</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt; s.listen(<span class=\"number\">5</span>)                 <span class=\"comment\"># 等待客户端连接</span></div><div class=\"line\">&gt; <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">&gt;     c, addr = s.accept()     <span class=\"comment\"># 建立客户端连接。</span></div><div class=\"line\">&gt;     <span class=\"keyword\">print</span> <span class=\"string\">'连接地址：'</span>, addr</div><div class=\"line\">&gt;     c.send(<span class=\"string\">'欢迎访问菜鸟教程！'</span>)</div><div class=\"line\">&gt;     c.close()                <span class=\"comment\"># 关闭连接</span></div><div class=\"line\">&gt;     </div><div class=\"line\">&gt;     </div><div class=\"line\">&gt; <span class=\"comment\">#客户端</span></div><div class=\"line\">&gt; <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt; <span class=\"comment\"># -*- coding: UTF-8 -*-</span></div><div class=\"line\">&gt; <span class=\"comment\"># 文件名：client.py</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt; <span class=\"keyword\">import</span> socket               <span class=\"comment\"># 导入 socket 模块</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt; s = socket.socket()         <span class=\"comment\"># 创建 socket 对象</span></div><div class=\"line\">&gt; host = socket.gethostname() <span class=\"comment\"># 获取本地主机名</span></div><div class=\"line\">&gt; port = <span class=\"number\">12345</span>                <span class=\"comment\"># 设置端口好</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt; s.connect((host, port))</div><div class=\"line\">&gt; <span class=\"keyword\">print</span> s.recv(<span class=\"number\">1024</span>)</div><div class=\"line\">&gt; s.close()  </div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><strong>Python Internet模块</strong></p>\n<p>| 协议     | 功能用处      | 端口号  | Python模块                 |<br>| —— | ——— | —- | ———————— |<br>| HTTP   | 网页访问      | 80   | httplib、urllib、xmlrpclib |<br>| NNTP   | 阅读、张贴新闻文章 | 119  | nntplib                  |<br>| FTP    | 文件传输      | 20   | ftplib、urllib            |<br>| SMTP   | 发送邮件      | 25   | smtplib                  |<br>| POP3   | 接收邮件      | 110  | poplib                   |<br>| IMAP4  | 获取邮件      | 143  | imaplib                  |<br>| Telnet | 命令行       | 23   | telnetlib                |<br>| Gopher | 信息查找      | 70   | gopherlib、urllib         |</p>\n<ul>\n<li><p>smtp邮件发送</p>\n<p>语法格式：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"keyword\">import</span> smtplib</div><div class=\"line\">&gt;   <span class=\"comment\">#创建对象</span></div><div class=\"line\">&gt;   smtpObj = smtplib.SMTP([host[,port[,local_hostname]]])</div><div class=\"line\">&gt;   <span class=\"comment\">#发送邮件</span></div><div class=\"line\">&gt;   SMTP.sendmail(from_addr,to_addr,msg[,mail_options,rcpt_options])</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>  示例：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt;   <span class=\"comment\"># -*- coding: UTF-8 -*-</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"keyword\">import</span> smtplib</div><div class=\"line\">&gt;   <span class=\"keyword\">from</span> email.mime.text <span class=\"keyword\">import</span> MIMEText</div><div class=\"line\">&gt;   <span class=\"keyword\">from</span> email.header <span class=\"keyword\">import</span> Header</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   sender = <span class=\"string\">'server@server.com'</span></div><div class=\"line\">&gt;   receivers = [<span class=\"string\">'receiver@receiver.com'</span>]  <span class=\"comment\"># 接收邮件，可设置为你的QQ邮箱或者其他邮箱</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\"># 三个参数：第一个为文本内容，第二个 plain 设置文本格式，可以是html，text等。第三个 utf-8 设置编码</span></div><div class=\"line\">&gt;   message = MIMEText(<span class=\"string\">'Python 邮件发送测试...'</span>, <span class=\"string\">'plain'</span>, <span class=\"string\">'utf-8'</span>)</div><div class=\"line\">&gt;   message[<span class=\"string\">'From'</span>] = Header(<span class=\"string\">\"菜鸟教程\"</span>, <span class=\"string\">'utf-8'</span>)</div><div class=\"line\">&gt;   message[<span class=\"string\">'To'</span>] =  Header(<span class=\"string\">\"测试\"</span>, <span class=\"string\">'utf-8'</span>)</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   subject = <span class=\"string\">'Python SMTP 邮件测试'</span></div><div class=\"line\">&gt;   message[<span class=\"string\">'Subject'</span>] = Header(subject, <span class=\"string\">'utf-8'</span>)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;<br>&gt;</p>\n<blockquote>\n<p>  try:</p>\n<pre><code>smtpObj = smtplib.SMTP(&apos;localhost&apos;)\nsmtpObj.sendmail(sender, receivers, message.as_string())\nprint &quot;邮件发送成功&quot;\n</code></pre><p>  except smtplib.SMTPException:</p>\n<pre><code>print &quot;Error: 无法发送邮件&quot;\n</code></pre>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;</div><div class=\"line\">&gt;   **使用第三方SMTP服务**</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   ```python</div><div class=\"line\">&gt;   # 第三方 SMTP 服务</div><div class=\"line\">&gt;   mail_host=&quot;smtp.XXX.com&quot;  #设置服务器</div><div class=\"line\">&gt;   mail_user=&quot;XXXX&quot;    #用户名</div><div class=\"line\">&gt;   mail_pass=&quot;XXXXXX&quot;   #密码</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   sender = &apos;from@runoob.com&apos;</div><div class=\"line\">&gt;   receivers = [&apos;429240967@qq.com&apos;]  # 接收邮件，可设置为你的QQ邮箱或者其他邮箱</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   message = MIMEText(&apos;Python 邮件发送测试...&apos;, &apos;plain&apos;, &apos;utf-8&apos;)</div><div class=\"line\">&gt;   message[&apos;From&apos;] = Header(&quot;菜鸟教程&quot;, &apos;utf-8&apos;)</div><div class=\"line\">&gt;   message[&apos;To&apos;] =  Header(&quot;测试&quot;, &apos;utf-8&apos;)</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   subject = &apos;Python SMTP 邮件测试&apos;</div><div class=\"line\">&gt;   message[&apos;Subject&apos;] = Header(subject, &apos;utf-8&apos;)</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   try:</div><div class=\"line\">&gt;       smtpObj = smtplib.SMTP() </div><div class=\"line\">&gt;       smtpObj.connect(mail_host, 25)    # 25 为 SMTP 端口号</div><div class=\"line\">&gt;       smtpObj.login(mail_user,mail_pass)  </div><div class=\"line\">&gt;       smtpObj.sendmail(sender, receivers, message.as_string())</div><div class=\"line\">&gt;       print &quot;邮件发送成功&quot;</div><div class=\"line\">&gt;   except smtplib.SMTPException:</div><div class=\"line\">&gt;       print &quot;Error: 无法发送邮件&quot;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>  创建带附件的邮件发送</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt;   <span class=\"comment\"># -*- coding: UTF-8 -*-</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"keyword\">import</span> smtplib</div><div class=\"line\">&gt;   <span class=\"keyword\">from</span> email.mime.text <span class=\"keyword\">import</span> MIMEText</div><div class=\"line\">&gt;   <span class=\"keyword\">from</span> email.mime.multipart <span class=\"keyword\">import</span> MIMEMultipart</div><div class=\"line\">&gt;   <span class=\"keyword\">from</span> email.header <span class=\"keyword\">import</span> Header</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   sender = <span class=\"string\">'from@runoob.com'</span></div><div class=\"line\">&gt;   receivers = [<span class=\"string\">'429240967@qq.com'</span>]  <span class=\"comment\"># 接收邮件，可设置为你的QQ邮箱或者其他邮箱</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\">#创建一个带附件的实例</span></div><div class=\"line\">&gt;   message = MIMEMultipart()</div><div class=\"line\">&gt;   message[<span class=\"string\">'From'</span>] = Header(<span class=\"string\">\"菜鸟教程\"</span>, <span class=\"string\">'utf-8'</span>)</div><div class=\"line\">&gt;   message[<span class=\"string\">'To'</span>] =  Header(<span class=\"string\">\"测试\"</span>, <span class=\"string\">'utf-8'</span>)</div><div class=\"line\">&gt;   subject = <span class=\"string\">'Python SMTP 邮件测试'</span></div><div class=\"line\">&gt;   message[<span class=\"string\">'Subject'</span>] = Header(subject, <span class=\"string\">'utf-8'</span>)</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\">#邮件正文内容</span></div><div class=\"line\">&gt;   message.attach(MIMEText(<span class=\"string\">'这是菜鸟教程Python 邮件发送测试……'</span>, <span class=\"string\">'plain'</span>, <span class=\"string\">'utf-8'</span>))</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\"># 构造附件1，传送当前目录下的 test.txt 文件</span></div><div class=\"line\">&gt;   att1 = MIMEText(open(<span class=\"string\">'test.txt'</span>, <span class=\"string\">'rb'</span>).read(), <span class=\"string\">'base64'</span>, <span class=\"string\">'utf-8'</span>)</div><div class=\"line\">&gt;   att1[<span class=\"string\">\"Content-Type\"</span>] = <span class=\"string\">'application/octet-stream'</span></div><div class=\"line\">&gt;   <span class=\"comment\"># 这里的filename可以任意写，写什么名字，邮件中显示什么名字</span></div><div class=\"line\">&gt;   att1[<span class=\"string\">\"Content-Disposition\"</span>] = <span class=\"string\">'attachment; filename=\"test.txt\"'</span></div><div class=\"line\">&gt;   message.attach(att1)</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\"># 构造附件2，传送当前目录下的 runoob.txt 文件</span></div><div class=\"line\">&gt;   att2 = MIMEText(open(<span class=\"string\">'runoob.txt'</span>, <span class=\"string\">'rb'</span>).read(), <span class=\"string\">'base64'</span>, <span class=\"string\">'utf-8'</span>)</div><div class=\"line\">&gt;   att2[<span class=\"string\">\"Content-Type\"</span>] = <span class=\"string\">'application/octet-stream'</span></div><div class=\"line\">&gt;   att2[<span class=\"string\">\"Content-Disposition\"</span>] = <span class=\"string\">'attachment; filename=\"runoob.txt\"'</span></div><div class=\"line\">&gt;   message.attach(att2)</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"keyword\">try</span>:</div><div class=\"line\">&gt;       smtpObj = smtplib.SMTP(<span class=\"string\">'localhost'</span>)</div><div class=\"line\">&gt;       smtpObj.sendmail(sender, receivers, message.as_string())</div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> <span class=\"string\">\"邮件发送成功\"</span></div><div class=\"line\">&gt;   <span class=\"keyword\">except</span> smtplib.SMTPException:</div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> <span class=\"string\">\"Error: 无法发送邮件\"</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p><strong>Python多线程</strong></p>\n<p>关于多线程需要注意两点：</p>\n<ul>\n<li>线程可以被中断(抢占)</li>\n<li>其他线程运行时，线程可以休眠(退让)</li>\n</ul>\n<p><strong>python使用线程两种方式</strong></p>\n<p>1、函数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   thread.start_new_thread(function,args[,kwargs])</div><div class=\"line\">&gt;   <span class=\"comment\"># 注释：function-线程函数，args-参数，必须是tuple类型。kwargs-可选参数。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt;   <span class=\"comment\"># -*- coding: UTF-8 -*-</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"keyword\">import</span> thread</div><div class=\"line\">&gt;   <span class=\"keyword\">import</span> time</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\"># 为线程定义一个函数</span></div><div class=\"line\">&gt;   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print_time</span><span class=\"params\">( threadName, delay)</span>:</span></div><div class=\"line\">&gt;      count = <span class=\"number\">0</span></div><div class=\"line\">&gt;      <span class=\"keyword\">while</span> count &lt; <span class=\"number\">5</span>:</div><div class=\"line\">&gt;         time.sleep(delay)</div><div class=\"line\">&gt;         count += <span class=\"number\">1</span></div><div class=\"line\">&gt;         <span class=\"keyword\">print</span> <span class=\"string\">\"%s: %s\"</span> % ( threadName, time.ctime(time.time()) )</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\"># 创建两个线程</span></div><div class=\"line\">&gt;   <span class=\"keyword\">try</span>:</div><div class=\"line\">&gt;      thread.start_new_thread( print_time, (<span class=\"string\">\"Thread-1\"</span>, <span class=\"number\">2</span>, ) )</div><div class=\"line\">&gt;      thread.start_new_thread( print_time, (<span class=\"string\">\"Thread-2\"</span>, <span class=\"number\">4</span>, ) )</div><div class=\"line\">&gt;   <span class=\"keyword\">except</span>:</div><div class=\"line\">&gt;      <span class=\"keyword\">print</span> <span class=\"string\">\"Error: unable to start thread\"</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"keyword\">while</span> <span class=\"number\">1</span>:</div><div class=\"line\">&gt;      <span class=\"keyword\">pass</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>  <em>线程结束依靠线程函数，或者手动<code>thread.exit()</code>,<code>抛异常</code>。</em></p>\n<ul>\n<li><p><strong><em>线程模块</em></strong></p>\n<p>1、<code>thread</code>和<code>threading</code>两个标准库</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   threading.currentThread();</div><div class=\"line\">&gt;   threading.enumerate();</div><div class=\"line\">&gt;   threading.activeCount();</div><div class=\"line\">&gt;   run();start();join([time]);isAlive();getName();setName();</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>  2、使用Threading模块创建线程</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"comment\">#继承threading.Thread然后重写__init__方法和run方法</span></div><div class=\"line\">&gt;   <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt;   <span class=\"comment\"># -*- coding: UTF-8 -*-</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"keyword\">import</span> threading</div><div class=\"line\">&gt;   <span class=\"keyword\">import</span> time</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   exitFlag = <span class=\"number\">0</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">myThread</span> <span class=\"params\">(threading.Thread)</span>:</span>   <span class=\"comment\">#继承父类threading.Thread</span></div><div class=\"line\">&gt;       <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, threadID, name, counter)</span>:</span></div><div class=\"line\">&gt;           threading.Thread.__init__(self)</div><div class=\"line\">&gt;           self.threadID = threadID</div><div class=\"line\">&gt;           self.name = name</div><div class=\"line\">&gt;           self.counter = counter</div><div class=\"line\">&gt;       <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span>                   <span class=\"comment\">#把要执行的代码写到run函数里面 线程在创建后会直接运行run函数 </span></div><div class=\"line\">&gt;           <span class=\"keyword\">print</span> <span class=\"string\">\"Starting \"</span> + self.name</div><div class=\"line\">&gt;           print_time(self.name, self.counter, <span class=\"number\">5</span>)</div><div class=\"line\">&gt;           <span class=\"keyword\">print</span> <span class=\"string\">\"Exiting \"</span> + self.name</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print_time</span><span class=\"params\">(threadName, delay, counter)</span>:</span></div><div class=\"line\">&gt;       <span class=\"keyword\">while</span> counter:</div><div class=\"line\">&gt;           <span class=\"keyword\">if</span> exitFlag:</div><div class=\"line\">&gt;               thread.exit()</div><div class=\"line\">&gt;           time.sleep(delay)</div><div class=\"line\">&gt;           <span class=\"keyword\">print</span> <span class=\"string\">\"%s: %s\"</span> % (threadName, time.ctime(time.time()))</div><div class=\"line\">&gt;           counter -= <span class=\"number\">1</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\"># 创建新线程</span></div><div class=\"line\">&gt;   thread1 = myThread(<span class=\"number\">1</span>, <span class=\"string\">\"Thread-1\"</span>, <span class=\"number\">1</span>)</div><div class=\"line\">&gt;   thread2 = myThread(<span class=\"number\">2</span>, <span class=\"string\">\"Thread-2\"</span>, <span class=\"number\">2</span>)</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\"># 开启线程</span></div><div class=\"line\">&gt;   thread1.start()</div><div class=\"line\">&gt;   thread2.start()</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> <span class=\"string\">\"Exiting Main Thread\"</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>线程同步</p>\n<p>Python中线程同步使用<code>Lock</code>和<code>Rlock</code>两个对象，都含有<code>acquire</code>和<code>release</code>方法。</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt;   <span class=\"comment\"># -*- coding: UTF-8 -*-</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"keyword\">import</span> threading</div><div class=\"line\">&gt;   <span class=\"keyword\">import</span> time</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">myThread</span> <span class=\"params\">(threading.Thread)</span>:</span></div><div class=\"line\">&gt;       <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, threadID, name, counter)</span>:</span></div><div class=\"line\">&gt;           threading.Thread.__init__(self)</div><div class=\"line\">&gt;           self.threadID = threadID</div><div class=\"line\">&gt;           self.name = name</div><div class=\"line\">&gt;           self.counter = counter</div><div class=\"line\">&gt;       <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">&gt;           <span class=\"keyword\">print</span> <span class=\"string\">\"Starting \"</span> + self.name</div><div class=\"line\">&gt;          <span class=\"comment\"># 获得锁，成功获得锁定后返回True</span></div><div class=\"line\">&gt;          <span class=\"comment\"># 可选的timeout参数不填时将一直阻塞直到获得锁定</span></div><div class=\"line\">&gt;          <span class=\"comment\"># 否则超时后将返回False</span></div><div class=\"line\">&gt;           threadLock.acquire()</div><div class=\"line\">&gt;           print_time(self.name, self.counter, <span class=\"number\">3</span>)</div><div class=\"line\">&gt;           <span class=\"comment\"># 释放锁</span></div><div class=\"line\">&gt;           threadLock.release()</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print_time</span><span class=\"params\">(threadName, delay, counter)</span>:</span></div><div class=\"line\">&gt;       <span class=\"keyword\">while</span> counter:</div><div class=\"line\">&gt;           time.sleep(delay)</div><div class=\"line\">&gt;           <span class=\"keyword\">print</span> <span class=\"string\">\"%s: %s\"</span> % (threadName, time.ctime(time.time()))</div><div class=\"line\">&gt;           counter -= <span class=\"number\">1</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   threadLock = threading.Lock()</div><div class=\"line\">&gt;   threads = []</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\"># 创建新线程</span></div><div class=\"line\">&gt;   thread1 = myThread(<span class=\"number\">1</span>, <span class=\"string\">\"Thread-1\"</span>, <span class=\"number\">1</span>)</div><div class=\"line\">&gt;   thread2 = myThread(<span class=\"number\">2</span>, <span class=\"string\">\"Thread-2\"</span>, <span class=\"number\">2</span>)</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\"># 开启新线程</span></div><div class=\"line\">&gt;   thread1.start()</div><div class=\"line\">&gt;   thread2.start()</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\"># 添加线程到线程列表</span></div><div class=\"line\">&gt;   threads.append(thread1)</div><div class=\"line\">&gt;   threads.append(thread2)</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\"># 等待所有线程完成</span></div><div class=\"line\">&gt;   <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> threads:</div><div class=\"line\">&gt;       t.join()</div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> <span class=\"string\">\"Exiting Main Thread\"</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p><strong>线程优先级队列</strong></p>\n<p>Python的Queue模块提供了FIFO和LIFO队列，Queue、LifoQueue和优先级PriorityQueue。</p>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p>Python其他特性</p>\n<blockquote>\n<ul>\n<li>xml解析</li>\n</ul>\n<p>xml解析通用的有<code>SAX</code>、<code>DOM</code>、python有<code>ElementTree</code></p>\n<p><em>一般编程中都很少用SAX和DOM解析，都有自己平台的优化解析方式。</em></p>\n<p><strong>注：</strong>因DOM需要将XML数据映射到内存中的树，一是比较慢，二是比较耗内存，而SAX流式读取XML文件，比较快，占用内存少，但需要用户实现回调函数（handler）。</p>\n<ul>\n<li><p>GUI编程</p>\n<p>python提供多种图形界面库<code>Thinter</code>、<code>wxPython</code>、<code>Jython</code></p>\n<p><strong>Tkinter</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"keyword\">import</span> Tkinter</div><div class=\"line\">&gt;   top = Tkinter.Tk()</div><div class=\"line\">&gt;   <span class=\"comment\">#进入消息循环</span></div><div class=\"line\">&gt;   top.mainloog()</div><div class=\"line\">&gt;   <span class=\"comment\">#如上代码执行，可产生小窗口界面了。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>  Tkinter包含常用的窗口控件，以及属性和方法，使用时候可差用api。</p>\n<ul>\n<li><p>JSON</p>\n<p>python使用Demjson，<code>decode</code>和<code>encode</code>解码编码。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   demjson.encode(self,obj,nest_level=<span class=\"number\">0</span>)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>  示例：(构建json)</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt;   <span class=\"keyword\">import</span> demjson</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   data = [&#123;<span class=\"string\">'a'</span>:<span class=\"number\">1</span>,<span class=\"string\">'b'</span>:<span class=\"number\">2</span>,<span class=\"string\">'c'</span>:<span class=\"number\">3</span>,<span class=\"string\">'d'</span>:<span class=\"number\">4</span>,<span class=\"string\">'e'</span>:<span class=\"number\">5</span>&#125;]</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   json = demjson.encode(data)</div><div class=\"line\">&gt;   print(json)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>  解析Json</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   demjson.decode(self,txt)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt;   <span class=\"keyword\">import</span> demjson</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   json = <span class=\"string\">'&#123;\"a\":1,\"b\":2,\"c\":3,\"d\":4,\"e\":5&#125;'</span>;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   text = demjson.decode(json)</div><div class=\"line\">&gt;   print(text)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n<p><strong>初次接触Python，笔记难免简单初级，仅供自己学习只用，希望也对网友有所益处。</strong></p>\n","excerpt":"","more":"<h1 id=\"Python学习笔记\"><a href=\"#Python学习笔记\" class=\"headerlink\" title=\"Python学习笔记\"></a>Python学习笔记</h1><!-- TOC -->\n<ul>\n<li><a href=\"#python学习笔记\">Python学习笔记</a><ul>\n<li><a href=\"#一基本语法\">一、基本语法</a></li>\n<li><a href=\"#二-数据与逻辑\">二、 数据与逻辑</a></li>\n<li><a href=\"#三结构与api\">三、结构与api</a></li>\n<li><a href=\"#四python高级教程\">四、Python高级教程</a></li>\n</ul>\n</li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"一、基本语法\"><a href=\"#一、基本语法\" class=\"headerlink\" title=\"一、基本语法\"></a>一、基本语法</h2><p><code>python2.x与python3.x区别很大，新版特性很强，更优化，此笔记学习新版本特性，暂不关注旧版本。</code></p>\n<ul>\n<li><p>标识符</p>\n<blockquote>\n<ol>\n<li>标识符：数字、字母、下划线，且数字不开头。</li>\n<li>区分大小写；</li>\n<li>单下划线开头<code>_foo</code>表示不能直接访问，需要用接口访问，不可”from xxx import”导入。<code>__foo</code>双下划线表示私有。前后双下划线<code>___foo__</code>特殊函数。</li>\n</ol>\n</blockquote>\n</li>\n<li><p>保留字符</p>\n<blockquote>\n<p>and、exec、not、assert、finally、or、break、for、pass、class、from、print、continue、global、raise、def、if、return、del、import、try、elif、in、while、else、is、with、except、lambda、yield。</p>\n<p>Python3中<code>end</code>可以将结果输入到同一行，或者输出尾部追加不同的字符</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"comment\">#Fibonacci Series: 斐波那契数列</span></div><div class=\"line\">&gt; a,b = <span class=\"number\">0</span>,<span class=\"number\">1</span></div><div class=\"line\">&gt; <span class=\"keyword\">while</span> b&lt;<span class=\"number\">1000</span>:</div><div class=\"line\">&gt;     print(b,end=<span class=\"string\">','</span>)</div><div class=\"line\">&gt;     a,b = b,a+b</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>​</p>\n</blockquote>\n</li>\n<li><p>行与缩进</p>\n<blockquote>\n<p><strong>Python区别于其他语言最大处，python不用{}来控制类、函数和逻辑块。而是用缩进，空格数无妨，但是逻辑块前后必须相同个数空格，使用空格或者tab都行，但是最好别混用</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">if</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">&gt;     <span class=\"keyword\">print</span> <span class=\"string\">\"True\"</span></div><div class=\"line\">&gt; <span class=\"keyword\">else</span>:</div><div class=\"line\">&gt;     <span class=\"keyword\">print</span> <span class=\"string\">\"False\"</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>python一般新的一行意味着上个语句块结束。但是多行语句可以用<code>\\</code>符号：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; string = abc + \\</div><div class=\"line\">&gt; \t\tbcd + \\</div><div class=\"line\">&gt;     \tefg</div><div class=\"line\">&gt; <span class=\"comment\"># 要是有&#123;&#125;、[]、()的语句，断为多行也无妨。</span></div><div class=\"line\">&gt; girls = [<span class=\"string\">'allen'</span>,<span class=\"string\">'angle'</span></div><div class=\"line\">&gt;         <span class=\"string\">'candy'</span>,<span class=\"string\">'lily'</span></div><div class=\"line\">&gt;         <span class=\"string\">'merry'</span>]</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>引号与注释</p>\n<blockquote>\n<p>python的字符串可以用单引号<code>&#39;</code>、双引号<code>&quot;</code>、三引号<code>&#39;&#39;&#39;</code>包括，其中三引号可以多行分段，有时候可以用作注释。</p>\n<p><code>#</code>符号表示注释，可写在当行，或者代码尾部。多行注释使用三个单引号<code>&#39;&#39;&#39;</code>，或三个双引号<code>&quot;&quot;&quot;</code>包括。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"comment\">#单行注释</span></div><div class=\"line\">&gt; <span class=\"keyword\">if</span> <span class=\"keyword\">True</span></div><div class=\"line\">&gt; \t<span class=\"keyword\">print</span> <span class=\"string\">'hello'</span> <span class=\"comment\">#单个注释，新版中需要加()，视为函数</span></div><div class=\"line\">&gt; <span class=\"string\">'''</span></div><div class=\"line\">&gt; 多行注释</div><div class=\"line\">&gt; 是这么写的</div><div class=\"line\">&gt; 真的可以么</div><div class=\"line\">&gt; 在markdown语法中</div><div class=\"line\">&gt; '''</div><div class=\"line\">&gt; <span class=\"string\">\"\"\"</span></div><div class=\"line\">&gt; 似乎可以</div><div class=\"line\">&gt; 好像是的哦</div><div class=\"line\">&gt; \"\"\"    </div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><em>函数之间，类与函数间用<code>空行</code>分开，便于阅读和维护</em></p>\n</blockquote>\n</li>\n<li><p>零碎语法</p>\n<blockquote>\n<ul>\n<li><p>多条语句同一行，可以<code>;</code>分割。</p>\n</li>\n<li><p>同一代码组，首行关键字后<code>:</code>结尾，同一代码组前后空白数相同。</p>\n</li>\n<li><p>旧版中文编码需要头文件注释</p>\n</li>\n<li><p>Python中True和False，似乎不能小写哦！</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;  <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt;  <span class=\"comment\">#_*_coding:utf-8 _*_</span></div><div class=\"line\">&gt;  <span class=\"comment\">#或者</span></div><div class=\"line\">&gt;  <span class=\"comment\">#coding=utf-8</span></div><div class=\"line\">&gt;  <span class=\"comment\">#新版python已经默认支持了。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n</li>\n</ul>\n<h2 id=\"二、-数据与逻辑\"><a href=\"#二、-数据与逻辑\" class=\"headerlink\" title=\"二、 数据与逻辑\"></a>二、 数据与逻辑</h2><ul>\n<li><p>变量类型</p>\n<blockquote>\n<p><strong>python变量赋值不需要类型声明</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; counter = <span class=\"number\">100</span> <span class=\"comment\">#整型</span></div><div class=\"line\">&gt; miles = <span class=\"number\">1000.0</span> <span class=\"comment\"># 浮点型</span></div><div class=\"line\">&gt; name = <span class=\"string\">\"John\"</span> <span class=\"comment\">#字符串</span></div><div class=\"line\">&gt; a = b = c = <span class=\"number\">1</span> <span class=\"comment\">#多个变量同时赋值</span></div><div class=\"line\">&gt; a, b, c = <span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"string\">\"John\"</span> <span class=\"comment\">#多变量多类型赋值,个数必须对应。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>python五种标准数据类型：</p>\n<ul>\n<li><p>Numbers数字</p>\n<p>该类型变量赋值后不可改变，重新赋值实质上是分配新的对象。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   a = <span class=\"number\">1</span>,b=<span class=\"number\">2</span>,c=<span class=\"number\">9</span></div><div class=\"line\">&gt;   <span class=\"comment\">#del是删除语句</span></div><div class=\"line\">&gt;   <span class=\"keyword\">del</span> a</div><div class=\"line\">&gt;   <span class=\"keyword\">del</span> a,b</div><div class=\"line\">&gt;   <span class=\"comment\"># Number有四种不同类型，int、long、float、complex（复数）</span></div><div class=\"line\">&gt;   <span class=\"comment\">#注意：python新版中，没有long，多了一个bytes。</span></div><div class=\"line\">&gt;   <span class=\"number\">8899887897l</span><span class=\"comment\">#后面的l容易与1混淆，一般写作L</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>String字符串</p>\n<p>由字母、数字、下划线组成，两种顺序，0开始至后，-1开始向前。</p>\n<p>string的截取</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   s = <span class=\"string\">'I`m a good boy'</span></div><div class=\"line\">&gt;   s[<span class=\"number\">3</span>:<span class=\"number\">9</span>]<span class=\"comment\">#其结果是截取对应标号的字符串为新的字符，可以0--size，也可以-1--向前。记住区间[)右边取不到哦</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> s <span class=\"comment\">#输出s字符串</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> s[<span class=\"number\">1</span>]<span class=\"comment\">#输入下标为1的字母</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> s[<span class=\"number\">1</span>:<span class=\"number\">5</span>]<span class=\"comment\">#输出下标1-5，但不含5那个字符</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> s + <span class=\"string\">\"add\"</span> <span class=\"comment\"># 字符串连接</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> s * <span class=\"number\">2</span> <span class=\"comment\"># 重复输出两次</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>List列表</p>\n<p>python列表可以混合不同类型数据，嵌套列表，可以使用类似string的方法取子列表。<code>[]</code>表示</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   list = [<span class=\"string\">'python'</span>,<span class=\"number\">666</span>,<span class=\"number\">2.14</span>,<span class=\"string\">'study'</span>]</div><div class=\"line\">&gt;   tinylist = [<span class=\"number\">123</span>,<span class=\"string\">'John'</span>]</div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> list <span class=\"comment\">#完整输出</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> list[<span class=\"number\">0</span>]<span class=\"comment\">#输出指定下标元素</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> list[<span class=\"number\">1</span>:<span class=\"number\">3</span>]<span class=\"comment\">#输出1-3的元素</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> list[<span class=\"number\">2</span>:]<span class=\"comment\">#输出2之后所有元素</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> tinylist * <span class=\"number\">2</span> <span class=\"comment\"># 重复两次输出</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> list + tinylist<span class=\"comment\">#组合列表</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>Tuple元组</p>\n<p>元组类似list，<code>()</code>标识，<code>,</code>分割，不能二次赋值。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   list = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"string\">'abc'</span>]</div><div class=\"line\">&gt;   tuple = (<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"string\">'abc'</span>)</div><div class=\"line\">&gt;   list[<span class=\"number\">0</span>] = <span class=\"string\">'ABC'</span><span class=\"comment\">#可以更新</span></div><div class=\"line\">&gt;   tuple[<span class=\"number\">0</span>]= <span class=\"number\">4</span> <span class=\"comment\">#错误，元组数据不能更新</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>Dictionary字典</p>\n<p>Dictionary被视为python最为灵活的内置数据结构，列表为有序对象集合，字典则为无序元素结合。区别在于，Dictionary类似与map集合，键值对key-value。<code>{}</code>标识</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   dict = &#123;&#125;</div><div class=\"line\">&gt;   dict[<span class=\"string\">'one'</span>] = <span class=\"string\">\"This is one\"</span></div><div class=\"line\">&gt;   dict[<span class=\"number\">2</span>] = <span class=\"string\">\"This is 2\"</span></div><div class=\"line\">&gt;   tinydict = &#123;<span class=\"string\">'name'</span>:<span class=\"string\">'john'</span>,<span class=\"string\">'code'</span>:<span class=\"number\">1234</span>,<span class=\"string\">'dept'</span>:<span class=\"string\">'good'</span>,<span class=\"number\">22</span>:<span class=\"number\">879.0L</span>&#125;</div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> dict[<span class=\"string\">'one'</span>] <span class=\"comment\">#根据键值输出元素</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> dict <span class=\"comment\"># 输出所有元素</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> dict.keys()<span class=\"comment\">#输出所有key</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> tinydict.vales()<span class=\"comment\">#输出所有值value</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>Set(集合)</p>\n<p>无序不重复的序列，主要用于成员关系测试和重复文件删除。</p>\n<p>可以使用大括号<code>({})</code>或者<code>set()</code>函数创建集合，注意：创建一个空集合必须用 set() 而不是 <code>{ }</code>，因为 <code>{ }</code> 是用来创建一个空字典。</p>\n</li>\n</ul>\n<p><strong>类型转换</strong>，对应数据类型作为函数名即可,返回结果。</p>\n<p>|          函数           |               描述                |<br>| :——————-: | :—————————–: |<br>|    int(x [,base])     |            将x转换为一个整数            |<br>|   long(x [,base] )    |           将x转换为一个长整数            |<br>|       float(x)        |           将x转换到一个浮点数            |<br>| complex(real [,imag]) |             创建一个复数              |<br>|        str(x)         |          将对象 x 转换为字符串           |<br>|        repr(x)        |         将对象 x 转换为表达式字符串         |<br>|       eval(str)       |  用来计算在字符串中的有效Python表达式,并返回一个对象  |<br>|       tuple(s)        |          将序列 s 转换为一个元组          |<br>|        list(s)        |          将序列 s 转换为一个列表          |<br>|        set(s)         |             转换为可变集合             |<br>|        dict(d)        | 创建一个字典。d 必须是一个序列 (key,value)元组。 |<br>|     frozenset(s)      |            转换为不可变集合             |<br>|        chr(x)         |          将一个整数转换为一个字符           |<br>|       unichr(x)       |        将一个整数转换为Unicode字符        |<br>|        ord(x)         |          将一个字符转换为它的整数值          |<br>|        hex(x)         |        将一个整数转换为一个十六进制字符串        |<br>|        oct(x)         |        将一个整数转换为一个八进制字符串         |</p>\n</blockquote>\n</li>\n<li><p>运算符号</p>\n<blockquote>\n<p>Python运算符支持一下类型：</p>\n<ul>\n<li>算术运算符</li>\n<li>比较（关系）运算符</li>\n<li>赋值运算符</li>\n<li>逻辑运算符</li>\n<li>位运算符</li>\n<li>成员运算符</li>\n<li>身份运算符</li>\n</ul>\n<p><strong>运算符有优先级</strong></p>\n<ol>\n<li><p>算术运算符</p>\n<p>| 运算符  | 描述    | 实例     |<br>| —- | —– | —— |<br>| +    | 加号    | 1+2得3  |<br>| -    | 减号    | 3-1得2  |<br>| <em>    | 乘号    | 2</em>2得4  |<br>| /    | 除号    | 9/3得3  |<br>| %    | 取模，求余 | 5%2得1  |<br>| <strong>   | 幂     | 2</strong>3得8 |<br>| //   | 取整除   | 9//2得4 |</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"comment\">#算术运算符，得到运算结果</span></div><div class=\"line\">&gt;   a,b,c = <span class=\"number\">12</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span><span class=\"comment\">#多变量同时赋值</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> (a+b)</div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> (a-b)</div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> (a*b)</div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> (a/b)</div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> (a%c)</div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> (b**c)</div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> (c//b)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p>比较运算符</p>\n<p>| 运算符  | 描述          |<br>| —- | ———– |<br>| ==   | 等于，比较对象是否相等 |<br>| !=   | 不等于         |<br>| &lt;&gt;   | 不等于         |<br>| &gt;    | 大于          |<br>| &lt;    | 小于          |<br>| >=  | 大于等于        |<br>| &lt;=   | 小于等于        |</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"comment\">#关系运算符，返回结果为 True或False</span></div><div class=\"line\">&gt;   a,b,c = <span class=\"number\">12</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span></div><div class=\"line\">&gt;   print(a==b)</div><div class=\"line\">&gt;   print(a!=b)</div><div class=\"line\">&gt;   print(a&lt;&gt;b)<span class=\"comment\">#，新版python中，已经废弃。</span></div><div class=\"line\">&gt;   print(a&gt;b)</div><div class=\"line\">&gt;   print(a&lt;b)</div><div class=\"line\">&gt;   print(a&gt;=b)</div><div class=\"line\">&gt;   print(a&lt;=b)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p>赋值运算符</p>\n<p>| 运算符  | 描述   | 实例                 |<br>| —- | —- | —————— |<br>| =    | 简单赋值 | c=a+b,将a+b的结果赋值给c  |<br>| +=   | 加法赋值 | c+=a等效于c=c+a       |<br>| -=   | 减法赋值 | c-=a等效于c=c-a       |<br>| <em>=   | 乘法赋值 | c</em>=a等效于c=c*a      |<br>| /=   | 除法赋值 | c/=a等效于c=c/a       |<br>| %=   | 取模赋值 | c%=a等效于c=c%a       |<br>| <em>*=  | 幂赋值  | c\\</em>*=a等效于c=c**a |<br>| //=  | 取整赋值 | c//=a等效于c=c//a     |</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"comment\">#简单演示</span></div><div class=\"line\">&gt;   a,b,c=<span class=\"number\">12</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span></div><div class=\"line\">&gt;   <span class=\"comment\">#print(c=a)#不能直接在print内写赋值</span></div><div class=\"line\">&gt;   c=a</div><div class=\"line\">&gt;   print(c)</div><div class=\"line\">&gt;   c=c**b</div><div class=\"line\">&gt;   print(c**=b)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p>位运算符</p>\n<p>位运算既是将数字看作二进制，进行运算。</p>\n<p>| 运算符  | 描述                                       |<br>| —- | —————————————- |<br>| &amp;    | <strong><code>按位与</code></strong>：两数二进制对齐，对应位置都是1，则为1，否则为0。      |<br>| |   | <strong><code>按位或</code></strong>：两数二进制，对应位置有一个为1，则为1。           |<br>| ^    | <strong><code>按位异或</code></strong>：两数二进制，对应位置相异，则为1。             |<br>| ~    | <strong><code>按位取反</code></strong>：对数据的二进制，各个位置取相反，变1为0，变0为1。    |<br>| &lt;&lt;   | <strong><code>左移动</code></strong>：运算数二进制全部左移动若干位，”&lt;&lt;”右边的数决定左移位数。<strong>高位丢弃，低位补0</strong> |<br>| >&gt;  | <strong><code>右移动</code></strong>：运算数二进制全部右移动软敢为，”&gt;&gt;”右边的数决定右移位数。 |</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   a = <span class=\"number\">60</span> <span class=\"comment\"># 60 = 0011 1100</span></div><div class=\"line\">&gt;   b = <span class=\"number\">13</span> <span class=\"comment\"># 13 = 0000 1101</span></div><div class=\"line\">&gt;   c = <span class=\"number\">0</span></div><div class=\"line\">&gt;   c = a &amp; b</div><div class=\"line\">&gt;   print(<span class=\"string\">\"a &amp; b :\"</span>,c)<span class=\"comment\"># 12 = 0000 1100</span></div><div class=\"line\">&gt;   c = a | b</div><div class=\"line\">&gt;   print(<span class=\"string\">\"a | b :\"</span>,c)<span class=\"comment\"># 61 = 0011 1101</span></div><div class=\"line\">&gt;   c = a ^ b</div><div class=\"line\">&gt;   print(<span class=\"string\">\"a ^ b :\"</span>,c)<span class=\"comment\"># 49 = 0011 0001</span></div><div class=\"line\">&gt;   c = ~a</div><div class=\"line\">&gt;   print(<span class=\"string\">\"~a :\"</span>,c)<span class=\"comment\"># -61 = 1100 0011</span></div><div class=\"line\">&gt;   c = a&lt;&lt;<span class=\"number\">2</span></div><div class=\"line\">&gt;   print(<span class=\"string\">\"a&lt;&lt;2 :\"</span>,c) <span class=\"comment\"># 240 = 1111 0000</span></div><div class=\"line\">&gt;   c = a&gt;&gt;<span class=\"number\">2</span></div><div class=\"line\">&gt;   print(<span class=\"string\">\"a&gt;&gt;2 :\"</span>,c) <span class=\"comment\"># 15 = 0000 1111</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p>逻辑运算符</p>\n<p>| 运算符  | 表达式     | 描述                                       |<br>| —- | ——- | —————————————- |<br>| and  | x and y | <strong><code>布尔与</code></strong> ：如果x为False，x and y返回False，否则返回y的计算值。 |<br>| or   | x or y  | <strong><code>布尔或</code></strong>：如果x非零，返回x值，否则返回y的计算值。          |<br>| not  | not x   | <strong><code>布尔非</code></strong>：若x为True，返回False，若x为False，返回True。 |</p>\n<p>示例:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"comment\">#True是1，False是0</span></div><div class=\"line\">&gt;   <span class=\"string\">\"\"\"所以可以在逻辑运算中判断，是否为0 或者1，来决定true和false\"\"\"</span></div><div class=\"line\">&gt;   a, b, c = <span class=\"number\">12</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span></div><div class=\"line\">&gt;   print(a <span class=\"keyword\">and</span> b)<span class=\"comment\">#似乎非0，即认为True</span></div><div class=\"line\">&gt;   print(a <span class=\"keyword\">or</span> b)</div><div class=\"line\">&gt;   print(<span class=\"keyword\">not</span> a)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p>成员运算符</p>\n<p>| 运算符    | 描述                                     |<br>| —— | ————————————– |<br>| in     | x in y，若有True，无False。<strong><code>y为列表、字符串、元组</code></strong> |<br>| not in | x not in y 若y中无x则True，有则False。         |</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   a = <span class=\"number\">10</span>;b = <span class=\"number\">20</span>;list = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">10</span>,<span class=\"number\">15</span>]</div><div class=\"line\">&gt;   print(a <span class=\"keyword\">in</span> list)</div><div class=\"line\">&gt;   print(a <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> list)</div><div class=\"line\">&gt;   print(b <span class=\"keyword\">in</span> list)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p>身份运算符</p>\n<p>| 运算符    | 描述                                       |<br>| —— | —————————————- |<br>| is     | <code>is</code>判断两标识符是否引用同一对象，id同则返回True，否则False。   |<br>| is not | <code>is not</code>判断两标识符是不是引用不同对象，id不同则返回True，否则False。 |</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   a = <span class=\"number\">10</span>;b = <span class=\"number\">20</span>;</div><div class=\"line\">&gt;   print(a <span class=\"keyword\">is</span> b);print(a <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> b);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p>运算符优先级</p>\n<p>| 运算符                      | 优先级描述                |<br>| ———————— | ——————– |<br>| <strong>                       | 指数，最高优先级             |<br>| ~，+，-                    | 按位取反、一元加(+@)、一元减(-@) |<br>| <em>，/，%，//                 | 乘、除、取模、取整            |<br>| +，-                      | 加法、减法                |<br>| >&gt;，&lt;&lt;                   | 右移动、左移动              |<br>| &amp;                        | 位’AND’               |<br>| ^，|                     | 位运算                  |<br>| &lt;=，&lt;，&gt;，&gt;=                | 比较运算符                |<br>| &lt;&gt;，==，!=                 | 等于运算符                |<br>| =，%=，/=，//=，-=，+=，</em>=，</strong>= | 赋值运算符                |<br>| is，is not                | 身份运算符                |<br>| in ，not in               | 成员运算符                |<br>| not，or，and               | 逻辑运算符                |</p>\n<p><strong>注意：若是不确定优先级，可以用()来控制</strong></p>\n</li>\n</ol>\n</blockquote>\n</li>\n<li><p>条件语句</p>\n<blockquote>\n<p>Python中指定非0，和非null，的值为Ture，0和null为False。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"comment\"># python 中多个条件语句，if..elif...elif...else</span></div><div class=\"line\">&gt; <span class=\"keyword\">if</span> condition1:</div><div class=\"line\">&gt;     statement1</div><div class=\"line\">&gt; <span class=\"keyword\">elif</span> condition2:</div><div class=\"line\">&gt;     statement2</div><div class=\"line\">&gt; <span class=\"keyword\">else</span>:</div><div class=\"line\">&gt;     statement</div><div class=\"line\">&gt; <span class=\"keyword\">if</span> (<span class=\"number\">1</span>!=<span class=\"number\">2</span>) : <span class=\"keyword\">print</span> <span class=\"string\">\"OK\"</span>;<span class=\"comment\">#单行语句，可以放在一起。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><strong>python 没有switch语句，只能多个elif语句结合逻辑符号<code>and,or,not</code>来控制多分支语句。</strong></p>\n</blockquote>\n</li>\n<li><p>循环语句</p>\n<blockquote>\n<p>编程语言基本都有for、while和嵌套循环。python没有do…while循环。</p>\n<p>循环控制语句有break、continue和pass。</p>\n<ul>\n<li><p>while循环</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"comment\"># while 循环格式</span></div><div class=\"line\">&gt;   <span class=\"keyword\">while</span> condition:<span class=\"comment\">#条件只有True和False的本质区别，但是请记住，Python中的True的定义比较广，非0，非null即为True。</span></div><div class=\"line\">&gt;       statement</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>  控制语句break、continue</p>\n<ul>\n<li>break，退出循环。</li>\n<li><p>continue，跳出本次循环，进入下一次。不执行continue之后的语句。</p>\n<p><em>无限循环：判断条件为永远为True</em></p>\n</li>\n</ul>\n<ul>\n<li><p>$for…else$</p>\n<p>Python中有for…else和while…else循环。</p>\n<p><code>表示for或while语句正常执行后，else语句执行。</code>注意：循环体正常执行，而不是break出来，才会运行else语句。</p>\n<p>每一轮的循环，for或while内没有break的话，都会执行else语句。</p>\n</li>\n<li><p>for循环</p>\n<p>用于遍历任何序列项目，如列表字符串。格式：</p>\n<ul>\n<li>普通方式</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"keyword\">for</span> iterating_var <span class=\"keyword\">in</span> sequence:</div><div class=\"line\">&gt;       statements</div><div class=\"line\">&gt;       </div><div class=\"line\">&gt;   <span class=\"comment\">#如下示例</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"keyword\">for</span> letter <span class=\"keyword\">in</span> <span class=\"string\">'python text'</span>:</div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> (<span class=\"string\">'当前字母：'</span>,letter)</div><div class=\"line\">&gt;       </div><div class=\"line\">&gt;   fruits = [<span class=\"string\">'banana'</span>,<span class=\"string\">'apple'</span>,<span class=\"string\">'orange'</span>]</div><div class=\"line\">&gt;   <span class=\"keyword\">for</span> fruit <span class=\"keyword\">in</span> fruits:</div><div class=\"line\">&gt;       print(<span class=\"string\">\"水果：\"</span>,fruit)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>使用索引</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;     fruits = [<span class=\"string\">'banana'</span>,<span class=\"string\">'orange'</span>,<span class=\"string\">'apple'</span>]</div><div class=\"line\">&gt;     <span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> range(len(fruits)):</div><div class=\"line\">&gt;         print(<span class=\"string\">\"fruit:\"</span>,fruits[index])</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p>循环嵌套</p>\n<blockquote>\n<p>类似其他编程语言，python也允许循环嵌套。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">for</span> iterating_var <span class=\"keyword\">in</span> sequence:</div><div class=\"line\">&gt;     <span class=\"keyword\">for</span> interating_var <span class=\"keyword\">in</span> sequence:</div><div class=\"line\">&gt;         statements</div><div class=\"line\">&gt;     statements</div><div class=\"line\">&gt; <span class=\"comment\">#python中注意缩进来区分代码块，while嵌套类似，也可以互相嵌套。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>break、continue语句类似其他编程语言，上面已做介绍。</p>\n</li>\n<li><p>pass语句，不做任何事情，一般用做占位语句</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"keyword\">for</span> letter <span class=\"keyword\">in</span> <span class=\"string\">'python'</span>:</div><div class=\"line\">&gt;       <span class=\"keyword\">if</span> letter == <span class=\"string\">'h'</span>:</div><div class=\"line\">&gt;           <span class=\"keyword\">pass</span></div><div class=\"line\">&gt;       \tprint(<span class=\"string\">\"just for blank\"</span>)</div><div class=\"line\">&gt;       print(<span class=\"string\">\"letter:\"</span>,letter)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"三、结构与api\"><a href=\"#三、结构与api\" class=\"headerlink\" title=\"三、结构与api\"></a>三、结构与api</h2><ul>\n<li><p>Number数据类型</p>\n<blockquote>\n<p>Python的Number数据类型，不允许改变，每次赋值都会是一个新的对象。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; a = <span class=\"number\">10</span></div><div class=\"line\">&gt; b = <span class=\"number\">12</span></div><div class=\"line\">&gt; a = <span class=\"number\">20</span> <span class=\"comment\">#内存地址已经变了，不像java那样。</span></div><div class=\"line\">&gt; <span class=\"comment\">#del语句删除</span></div><div class=\"line\">&gt; <span class=\"keyword\">del</span> a</div><div class=\"line\">&gt; <span class=\"keyword\">del</span> a,b</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><strong>Number数据支持四种子类型</strong></p>\n<ul>\n<li>int整型，正数、负数，无小数点。</li>\n<li>long长整型，无限大小的整数，后加<code>L</code>或<code>l</code>。</li>\n<li>float浮点型，整数、小数和科学计数。</li>\n<li>complex复数，实数和虚数构成，a+bj或complex(a,b)，a实数，b虚数。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>Python数学函数</p>\n<blockquote>\n<p>| 函数            | 返回值                                   |<br>| ————- | ————————————- |<br>| abs(x)        | 绝对值：返回x的绝对值                           |<br>| ceil(x)       | 取大整：返回x的上入整数，不是四舍五入。如math.ceil(4.1)得5 |<br>| cmp(x,y)      | 对比：x\\<y，返回-1，x=y返回0，x\\>y 返回1          |<br>| exp(x)        | e次幂：e的x次幂                             |<br>| fabs(x)       | 绝对值：返回x的绝对值，含小数点。                     |<br>| floor(x)      | 取小整：返回x的向下整数。                         |<br>| log(x)        | log函数                                 |<br>| max（x1，x2…) | Max函数。                                |<br>| min(x1,x2…) | Min函数。                                |<br>| modf(x)       | 分离：返回x的整数和小数部分，符号与x相同，整数部分为float型。    |<br>| pow(x,y)      | 幂函数：x**y的值                            |<br>| rount(x[,n])  | 舍入值：x的四舍五入，舍入到小数后n位。                  |<br>| sqrt(x)       | 开方：x的平方根，x可为负数，返回实数。                  |</y，返回-1，x=y返回0，x\\></p>\n<p><strong>Math函数</strong></p>\n<ul>\n<li><p>随机函数random</p>\n<p>| 函数                             | 描述                                     |<br>| —————————— | ————————————– |<br>| choice(seq)                    | random.choice(range(10))，从0–9随机挑一个整数。 |<br>| randrange([start],stop,[step]) | 指定范围制定基数获取随机数。                         |<br>| random()                       | [0,1)内随机数                              |<br>| seed([x])                      | 随机数生成器的种子？？                            |<br>| shuffle(lst)                   | 序列元素的随机排序                              |<br>| uniform(x,y)                   | [x,y]范围内随机生成下一个实数                      |</p>\n<p>==注意函数参数[step]之类的，表示为可选参数==</p>\n</li>\n<li><p>三角函数</p>\n<p>| 函数         | 描述                              |<br>| ———- | ——————————- |<br>| acos(x)    | 反余弦（弧度值）                        |<br>| asin(x)    | 反正弦                             |<br>| atan(x)    | 反正切                             |<br>| atan2(y,x) | 指定x，y坐标的反正切值                    |<br>| cos(x)     | 余弦                              |<br>| hypot(x,y) | 返回欧几里得范数sqrt(x*x+y*y)         |<br>| sin(x)     | 正弦                              |<br>| tan(x)     | 正切                              |<br>| degress(x) | 弧度转角度。如degress(math.pi/2),得90.0 |<br>| radins(x)  | 角度转弧度                           |</p>\n</li>\n<li><p>数学常量</p>\n<p>| 常量   | 描述    |<br>| —- | —– |<br>| pi   | 圆周率   |<br>| e    | 自然常数e |</p>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p>字符串</p>\n<blockquote>\n<p>python中字符串string可用<code>&#39;</code>或<code>&quot;</code>符号，无char类型。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; #字符串可以用[]类似java数组方式截取</div><div class=\"line\">&gt; a = 'abc'</div><div class=\"line\">&gt; b = \"hello python\"</div><div class=\"line\">&gt;</div><div class=\"line\">&gt; print('a[0]',a[0])</div><div class=\"line\">&gt; print(\"b[2:7],b[2:7])#关于字符串的截取可参照上一章数据类型里的描述。</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>python可以对string字符串更新操作：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; a = <span class=\"string\">'hello python'</span></div><div class=\"line\">&gt; print(<span class=\"string\">'updated:'</span>,a[:<span class=\"number\">6</span>]+<span class=\"string\">'beautiful girl'</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>类似其他语言，python中也使用<code>\\</code>转义其他特殊字符。</p>\n<p>| 转义字符     | 描述                    |<br>| ——– | ——————— |<br>| \\ (在行尾时) | 续行符号                  |<br>| \\\\      | 反斜杠                   |<br>| \\’       | 单引号                   |<br>| \\”       | 双引号                   |<br>| \\a       | 响铃                    |<br>| \\b       | 退格                    |<br>| \\e       | 转义                    |<br>| \\000     | 空                     |<br>| \\n       | 换行                    |<br>| \\v       | 纵向制表符                 |<br>| \\t       | 横向制表符                 |<br>| \\r       | 回车                    |<br>| \\f       | 换页                    |<br>| \\oyy     | 八进制，yy表字符，如：\\o12代表换行  |<br>| \\xyy     | 十六进制，yy表字符，如：\\x0a代表换行 |<br>| \\other   | 其他字符将以普通格式输出          |</p>\n</li>\n<li><p>字符串运算</p>\n<p>| 操作符    | 描述                              |<br>| —— | ——————————- |<br>| +      | 串联                              |<br>| *      | 重复                              |<br>| []     | 截取[index],index位置的字符            |<br>| [ : ]  | 截取<code>:</code>前后数字范围内，如，[1:4)取不到右边数字的字符。 |<br>| in     | 成员运算符，含有返回True                  |<br>| not in | 成员运算符，不含有返回True                 |<br>| r/R    | 原始字符串，不转义，原始输出。                 |</p>\n</li>\n<li><p>字符串格式化</p>\n<p>类似C 语言的printf函数，将需要格式化的数字字符，格式化后传入%s之类的占据的位置。==格式化==</p>\n<p>| 符号   | 描述            |<br>| —- | ————- |<br>| %c   | 字符及其ASCII码    |<br>| %s   | 字符串           |<br>| %d   | 整数            |<br>| %u   | 无符号整型         |<br>| %o   | 无符号八进制数       |<br>| %x   | 无符号十六进制数      |<br>| %X   | 无符号十六进制数，大写   |<br>| %f   | 浮点数子，可指定小数点精度 |<br>| %e   | 科学计数法格式化浮点数   |<br>| %E   | 同%e           |<br>| %g   | %f和%e的简写      |<br>| %G   | %f和%e的简写      |<br>| %p   | 十六进制格式化变量的地址  |</p>\n<ul>\n<li><p>格式化操作符辅助指令</p>\n<p>| 符号     | 功能                   |<br>| —— | ——————– |<br>| *      | 定义宽度或小数精度            |<br>| -      | 左对齐                  |<br>| +      | 正数前显示+号              |<br>| <code>&lt;sp&gt;</code> | 正数前显示空格              |<br>| #      | 八进制前显示0，十六进制前显示0x或0X |<br>| 0      | 显示的数字前填充0，而不是空格      |<br>| %      | ‘%%’输出显示一个’%’        |<br>| (var)  | 映射变量（字典参数）           |<br>| m.n.   | m显示最小总宽度，n小数后的位数。    |</p>\n</li>\n</ul>\n</li>\n<li><p>python的三引号</p>\n<p>**三引号` <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;</div><div class=\"line\">&gt;   ==`u`==符号表示Unicode编码，如：</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   ```python</div><div class=\"line\">&gt;   #如下，则为Unicode格式</div><div class=\"line\">&gt;   u&apos;hello world&apos;</div><div class=\"line\">&gt;   u&apos;hello\\u0020world&apos;#效果如上，内部使用了\\0020代表空格</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure></p>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>==往后的api会越来越多，本笔记将不再赘述各个类型和函数的api。==</p>\n</blockquote>\n</li>\n<li><p>List列表</p>\n<blockquote>\n<p>Python有6个序列类型，常见的为==列表==和==元组==。序列常用操作：<code>索引</code>、<code>切片</code>、<code>加</code>、<code>乘</code>、<code>检查成员</code>，以及最大最小值的获取。</p>\n<ul>\n<li><p>列表，格式<code>[ ]</code>内用`,分隔。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   \tlist = [<span class=\"number\">1</span>,<span class=\"string\">'abc'</span>,<span class=\"keyword\">False</span>,list,<span class=\"string\">\"hello pythono\"</span>];<span class=\"comment\">#列表元素类型可以不同，可以嵌套列表。类似数组，可以索引，左0，右-1</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n<p>更新，直接赋值新的元素。删除，del对应元素。</p>\n</li>\n<li><p>python列表脚本操作符</p>\n<p>| 表达式                      | 结果                        | 描述         |<br>| ———————— | ————————- | ———- |<br>| len([1,2,3])             | 3                         | 长度         |<br>| [1,2,3]+[4,5,6]          | [1,2,3,4,5,6]             | zu’he      |<br>| [‘Hi!’]*4                | [‘Hi!’,’Hi!’,’Hi!’,’Hi!’] | 重复         |<br>| 3 in [1,2,3]             | True                      | 判断元素是否属于列表 |<br>| for x in [1,2,3]:print x | 1 2 3                     | 遍历 迭代      |</p>\n<p><strong>列表的截取，类似字符串的操作。通过索引，取值范围来截取。</strong></p>\n</li>\n<li><p>Python列表相关的函数&amp;方法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   cmp(list1,list2);<span class=\"comment\">#比较两个列表</span></div><div class=\"line\">&gt;   len(list);<span class=\"comment\">#list长度、元素个数</span></div><div class=\"line\">&gt;   max(list);<span class=\"comment\">#list最大元素值</span></div><div class=\"line\">&gt;   min(list);<span class=\"comment\">#list最小元素值</span></div><div class=\"line\">&gt;   list(seq);<span class=\"comment\">#将元组转化为列表</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   list.append(obj);<span class=\"comment\">#列表尾新增对象</span></div><div class=\"line\">&gt;   list.count(obj);<span class=\"comment\">#统计某元素出现次数</span></div><div class=\"line\">&gt;   list.extend(seq);<span class=\"comment\">#用新列表扩展</span></div><div class=\"line\">&gt;   list.index(obg);<span class=\"comment\">#元素第一次出现位置</span></div><div class=\"line\">&gt;   list.insert(index,obj);<span class=\"comment\">#指定位置插入</span></div><div class=\"line\">&gt;   list.pop(obj=list[<span class=\"number\">-1</span>]);<span class=\"comment\">#移除列表中最后一个元素，或指定位置的。</span></div><div class=\"line\">&gt;   list.remove(obj);<span class=\"comment\">#移除第一个找到的该元素</span></div><div class=\"line\">&gt;   list.reverse();<span class=\"comment\">#反向列表</span></div><div class=\"line\">&gt;   list.sort([func]);<span class=\"comment\">#排序</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p>元组</p>\n<blockquote>\n<p>元组类似列表，但是==不能修改元素==。</p>\n<p>格式<code>( )</code>，用<code>,</code>分隔。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;tup = (<span class=\"string\">'adb'</span>,<span class=\"number\">12</span>,list);</div><div class=\"line\">&gt;tup2 = ();<span class=\"comment\">#空元组</span></div><div class=\"line\">&gt;tup3 = (<span class=\"number\">2</span>,);<span class=\"comment\">#元组只有一个元素，则必须有个逗号,</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><strong>访问元组，类似列表和字符串的查找</strong>，元组不能修改，但是可以==串接==。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;tup1 = (<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>);</div><div class=\"line\">&gt;tup2 = (<span class=\"string\">'ab'</span>,<span class=\"string\">'cd'</span>,<span class=\"string\">'ddf'</span>);</div><div class=\"line\">&gt;tup3 = tup1 + tup2;<span class=\"comment\">#元组串接。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><strong><em>元组元素不能删除，但是==元组可以被删除==</em></strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;tup = (<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>);</div><div class=\"line\">&gt;<span class=\"keyword\">del</span> tup;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><code>任意无符号的对象，以,分隔，默认为元组</code></p>\n<ul>\n<li><p>元组的一些方法和函数，类似列表</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;  tuple(seq);<span class=\"comment\">#列表转化为元组</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p>字典Dictionary</p>\n<blockquote>\n<p>字典类似于java中的map集合。使用键值对<code>key-value</code>，格式：=={key1:value1,key2:value2}==</p>\n<ul>\n<li><p><strong>key值唯一</strong></p>\n</li>\n<li><p><strong>value值可以任何类型，key值必是不可变类型，如字符串、数字和元组。</strong></p>\n</li>\n<li><p>字典内，所有的key不需要都为统一类型</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   dict = &#123;<span class=\"string\">\"abc\"</span>:<span class=\"string\">'adb'</span>,<span class=\"string\">'def'</span>:<span class=\"number\">23</span>,<span class=\"number\">55</span>:<span class=\"string\">'adb'</span>&#125;</div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> (<span class=\"string\">\"dict[55]\"</span>);<span class=\"comment\">#根据key值，若是没有，会报错。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>字典元素的修改，删除</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"keyword\">del</span> dict[key];<span class=\"comment\">#删除指定元素</span></div><div class=\"line\">&gt;   dict.clear();<span class=\"comment\">#清空字典</span></div><div class=\"line\">&gt;   <span class=\"keyword\">del</span> dict;<span class=\"comment\">#删除字典</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>字典的函数&amp;方法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   cmp(dict1,dict2);<span class=\"comment\">#比较</span></div><div class=\"line\">&gt;   len(dict);<span class=\"comment\">#计数</span></div><div class=\"line\">&gt;   str(dict);<span class=\"comment\">#字符输出字典元素</span></div><div class=\"line\">&gt;   type(variable);<span class=\"comment\">#变量的类型</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   radiansdict.clear();<span class=\"comment\">#清空字典</span></div><div class=\"line\">&gt;   radiansdict.copy();<span class=\"comment\">#字典浅复制</span></div><div class=\"line\">&gt;   radiansdict.get(key,default=<span class=\"keyword\">None</span>);<span class=\"comment\">#获取值，若无，返回默认值。</span></div><div class=\"line\">&gt;   radiansdict.has_key(key);<span class=\"comment\">#查询是否包含指定key值</span></div><div class=\"line\">&gt;   radiansdict.items();<span class=\"comment\">#遍历显示字典元素数组</span></div><div class=\"line\">&gt;   radiansdict.keys();<span class=\"comment\">#列表显示所有key</span></div><div class=\"line\">&gt;   radiansdict.setdefault(key,default=<span class=\"keyword\">None</span>);<span class=\"comment\">#类似get，若key不存在，则添加。</span></div><div class=\"line\">&gt;   radiansdict.update(dict2);<span class=\"comment\">#将dict2更新到dict中。</span></div><div class=\"line\">&gt;   radiansdict.values();<span class=\"comment\">#返回所有value值。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p>python日期时间</p>\n<blockquote>\n<p>类似其他编程语言，时间基于1970年1月1日。Unix和windows支持到2038年？</p>\n<ul>\n<li><p>time</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   time.time();<span class=\"comment\">#获取时间戳</span></div><div class=\"line\">&gt;   time.localtime(time.time());<span class=\"comment\">#获得时间的元组</span></div><div class=\"line\">&gt;   time.asctime(time.localtime(time.time()));<span class=\"comment\">#格式化时间</span></div><div class=\"line\">&gt;   time.strftime(format[,t]);<span class=\"comment\">#自定义字符格式化时间</span></div><div class=\"line\">&gt;   <span class=\"comment\"># 格式化成2016-03-20 11:45:39形式</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> time.strftime(<span class=\"string\">\"%Y-%m-%d %H:%M:%S\"</span>, time.localtime()) </div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\"># 格式化成Sat Mar 28 22:24:24 2016形式</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> time.strftime(<span class=\"string\">\"%a %b %d %H:%M:%S %Y\"</span>, time.localtime()) </div><div class=\"line\">&gt;     </div><div class=\"line\">&gt;   <span class=\"comment\"># 将格式字符串转换为时间戳</span></div><div class=\"line\">&gt;   a = <span class=\"string\">\"Sat Mar 28 22:24:24 2016\"</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> time.mktime(time.strptime(a,<span class=\"string\">\"%a %b %d %H:%M:%S %Y\"</span>));</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>calendar</p>\n<p>==0-6表示一周，0表示周一。==</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   calendar.month(<span class=\"number\">2016</span>,<span class=\"number\">10</span>);<span class=\"comment\">#获取制定月份的日历。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>  <strong>函数和方法不在赘述</strong></p>\n<p>  datetime、pytz、dateutil模块也是处理时间相关。</p>\n</blockquote>\n</li>\n<li><p>函数</p>\n<blockquote>\n<p>类似其他编程语言的函数&amp;方法定义，python函数格式：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">functionname</span><span class=\"params\">( parameters )</span>:</span></div><div class=\"line\">&gt;     <span class=\"string\">\"函数文档\"</span></div><div class=\"line\">&gt;     function_suite</div><div class=\"line\">&gt;     <span class=\"keyword\">return</span> [expression]</div><div class=\"line\">&gt; <span class=\"comment\">#def 关键字，声明函数</span></div><div class=\"line\">&gt; <span class=\"comment\">#functionname 函数名</span></div><div class=\"line\">&gt; <span class=\"comment\">#(parameters) 参数，多个参数可以，分隔？还是多个括号</span></div><div class=\"line\">&gt; <span class=\"comment\">#可写声明文档，</span></div><div class=\"line\">&gt; <span class=\"comment\">#返回值，可以是None。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><strong>按值传递与按引用传递</strong></p>\n<p>Python中所有参数的传递，都是==引用传递==，一处修改，原始值则变。</p>\n<ul>\n<li><p>函数的参数：</p>\n<p><code>必备参数</code>、<code>关键字参数</code>、<code>默认参数</code>、<code>不定长参数</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"comment\">#必备参数，必须传入的形式，否则报错</span></div><div class=\"line\">&gt;   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">printStr</span><span class=\"params\">(str)</span>:</span></div><div class=\"line\">&gt;       ...</div><div class=\"line\">&gt;   \t<span class=\"keyword\">return</span>;    </div><div class=\"line\">&gt;   <span class=\"comment\">#关键字参数，输入参数的格式顺序，不必和声明的顺序一致。</span></div><div class=\"line\">&gt;   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">printInfo</span><span class=\"params\">(name,age)</span>:</span></div><div class=\"line\">&gt;       print(<span class=\"string\">\"name:\"</span>,name);</div><div class=\"line\">&gt;       print(<span class=\"string\">\"age:\"</span>,age)</div><div class=\"line\">&gt;       <span class=\"keyword\">return</span>;</div><div class=\"line\">&gt;   printInfo(age = <span class=\"number\">27</span>,name = <span class=\"string\">'jack'</span>);</div><div class=\"line\">&gt;   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">printDefault</span><span class=\"params\">(name,age=<span class=\"number\">20</span>)</span>:</span></div><div class=\"line\">&gt;       ......</div><div class=\"line\">&gt;       <span class=\"keyword\">return</span>;</div><div class=\"line\">&gt;   <span class=\"comment\">#此时可以使用默认参数</span></div><div class=\"line\">&gt;   printDefault(name = <span class=\"string\">'jack'</span>);<span class=\"comment\">#age 默认了。</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\">#不定长参数</span></div><div class=\"line\">&gt;   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">printLong</span><span class=\"params\">(arg1,*args)</span>:</span><span class=\"comment\">#星号*的那个参数，为可变参数。</span></div><div class=\"line\">&gt;       print(arg2);</div><div class=\"line\">&gt;       <span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> args:</div><div class=\"line\">&gt;           <span class=\"keyword\">print</span> var;</div><div class=\"line\">&gt;       <span class=\"keyword\">return</span>;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>Python使用lambda创建匿名函数。</p>\n<ul>\n<li>lambda是表达式，函数比def简单</li>\n<li>只能在lambda表达式中构建逻辑</li>\n<li>lambda仅能访问自有参数。</li>\n<li>lambda似乎只能写一行。</li>\n</ul>\n<p>==语法==</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"keyword\">lambda</span> [arg2[,arg2,......]]:expression</div><div class=\"line\">&gt;   <span class=\"comment\">#示例</span></div><div class=\"line\">&gt;   sum = <span class=\"keyword\">lambda</span> arg1,arg2:arg1+arg2;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\">#调用sum函数</span></div><div class=\"line\">&gt;   sum(<span class=\"number\">1</span>,<span class=\"number\">2</span>);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>  <strong>return用于退出函数，无有返回值则是None。</strong></p>\n<p>  变量作用域，全局和局部，都是作用于其声明范围内。</p>\n</blockquote>\n</li>\n<li><p>Python模块</p>\n<blockquote>\n<p>python模块指一段逻辑或函数方法，在python中，模块也是一个对象，可以命名，引用。类似于java中的类文件？</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">import</span> module1[,module2,...]<span class=\"comment\">#导入模块，就可以使用其方法和逻辑。</span></div><div class=\"line\">&gt; <span class=\"comment\">#用类名/文件名.方法/函数,来调用。</span></div><div class=\"line\">&gt; <span class=\"keyword\">from</span> modname <span class=\"keyword\">import</span> name1[,name2,...]<span class=\"comment\">#从指定空间导入模块。</span></div><div class=\"line\">&gt; <span class=\"keyword\">from</span> modname <span class=\"keyword\">import</span> * <span class=\"comment\">#导入指定名称空间下的所有模块。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>寻找模块的顺序是：当前文件、path路径、系统默认路径。</p>\n<ul>\n<li>变量默认都是局部范围的，全局变量需要global声明。</li>\n<li>dir()函数，列表显示。</li>\n<li>globals()和locals(),reload();</li>\n<li>python中也有包，文件的概念。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>Python文件IO和File、异常</p>\n<blockquote>\n<ul>\n<li><p>文件I/O</p>\n<p><code>raw_input</code></p>\n<p><code>input</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;  <span class=\"comment\">#raw_input 接受输入的一行</span></div><div class=\"line\">&gt;  str = raw_input(<span class=\"string\">\"Please input :\"</span>);</div><div class=\"line\">&gt;  print(<span class=\"string\">\"输入内容为：\"</span>,str);<span class=\"comment\">#str会接收键盘的输入内容</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;  <span class=\"comment\">#input类似与raw_input，可以接受输入表达式</span></div><div class=\"line\">&gt;  str = input(<span class=\"string\">\"Please input:\"</span>);</div><div class=\"line\">&gt;  print(<span class=\"string\">\"输入内容为：\"</span>,str);</div><div class=\"line\">&gt;  <span class=\"comment\">#上面可以输入：[x*5 for x in range(2,10,2)]</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>file对象操作文件</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;  file object = open(file_name[,access_mode][,buffering]);<span class=\"comment\">#用open()方法打开文件</span></div><div class=\"line\">&gt;  file.closed;<span class=\"comment\"># true or false</span></div><div class=\"line\">&gt;  file.mode;</div><div class=\"line\">&gt;  file.name;</div><div class=\"line\">&gt;  file.softspace;<span class=\"comment\">#有空格符来结束，需要返回False，不需要，True。</span></div><div class=\"line\">&gt;  file.write(string);<span class=\"comment\">#不会默认行尾加换行的，。</span></div><div class=\"line\">&gt;  file.read([count]);<span class=\"comment\">#读取指定个数的字节数。</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;  tell();<span class=\"comment\">#可知文件内，当前位置。</span></div><div class=\"line\">&gt;  seek(offset[,<span class=\"keyword\">from</span>]);<span class=\"comment\">#改变当前位置</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;  <span class=\"comment\">#python 的os模块有删除、重命名文件的方法</span></div><div class=\"line\">&gt;  os.rename(old_name,new_name);</div><div class=\"line\">&gt;  os.remove(<span class=\"string\">\"test.txt\"</span>);<span class=\"comment\">#删除文件</span></div><div class=\"line\">&gt;  os.mkdir(<span class=\"string\">\"abc\"</span>);os.chdir(<span class=\"string\">\"new\"</span>);os.getcwd();<span class=\"comment\">#显示当前目录。</span></div><div class=\"line\">&gt;  os.rmdir();</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p><strong>异常处理</strong></p>\n<p>try/except语句</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;  <span class=\"keyword\">try</span>:</div><div class=\"line\">&gt;      &lt;statements&gt;<span class=\"comment\">#运行代码</span></div><div class=\"line\">&gt;  <span class=\"keyword\">except</span> &lt;exception&gt;:</div><div class=\"line\">&gt;      &lt;e1&gt;<span class=\"comment\">#try到异常name</span></div><div class=\"line\">&gt;  <span class=\"keyword\">except</span> &lt;exception&gt;,&lt;data&gt;:</div><div class=\"line\">&gt;      &lt;e2&gt;<span class=\"comment\">#try到异常，并有数据</span></div><div class=\"line\">&gt;  <span class=\"keyword\">else</span>:</div><div class=\"line\">&gt;      &lt;statements2&gt;<span class=\"comment\">#无异常时候运行</span></div><div class=\"line\">&gt;  <span class=\"comment\">#类似java，python中可以不写exception的name，就会捕获所有异常。</span></div><div class=\"line\">&gt;  <span class=\"comment\">#也可以</span></div><div class=\"line\">&gt;  <span class=\"keyword\">except</span>(e1,e2,...):</div><div class=\"line\">&gt;      ...</div><div class=\"line\">&gt;  <span class=\"comment\">#类似java 有try finally</span></div><div class=\"line\">&gt;  <span class=\"keyword\">try</span>:</div><div class=\"line\">&gt;      &lt;&gt;</div><div class=\"line\">&gt;  <span class=\"keyword\">finally</span>:</div><div class=\"line\">&gt;      &lt;&gt;<span class=\"comment\">#总会执行的语句。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p> ==raise==语句自动触发异常</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;  <span class=\"keyword\">raise</span> [Exception[,args[,traceback]]]</div><div class=\"line\">&gt;  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">functionName</span><span class=\"params\">( level )</span>:</span></div><div class=\"line\">&gt;      <span class=\"keyword\">if</span> level &lt; <span class=\"number\">1</span>:</div><div class=\"line\">&gt;          <span class=\"keyword\">raise</span> Exception(<span class=\"string\">\"Invalid level!\"</span>, level)</div><div class=\"line\">&gt;          <span class=\"comment\"># 触发异常后，后面的代码就不会再执行</span></div><div class=\"line\">&gt;          </div><div class=\"line\">&gt;  <span class=\"keyword\">try</span>:</div><div class=\"line\">&gt;     <span class=\"comment\"># 正常逻辑</span></div><div class=\"line\">&gt;  <span class=\"keyword\">except</span> <span class=\"string\">\"Invalid level!\"</span>:<span class=\"comment\">#对应自定义的异常名，如上。</span></div><div class=\"line\">&gt;     <span class=\"comment\"># 触发自定义异常    </span></div><div class=\"line\">&gt;  <span class=\"keyword\">else</span>:</div><div class=\"line\">&gt;     <span class=\"comment\"># 其余代码</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyError</span><span class=\"params\">(RuntimeError)</span>:</span></div><div class=\"line\">&gt;      <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">init</span><span class=\"params\">(self,arg)</span>:</span></div><div class=\"line\">&gt;          self.args = arg</div><div class=\"line\">&gt;          </div><div class=\"line\">&gt;  <span class=\"comment\">#自己触发异常</span></div><div class=\"line\">&gt;  <span class=\"keyword\">try</span>:</div><div class=\"line\">&gt;      <span class=\"keyword\">raise</span> MyError(<span class=\"string\">\"hao xiang shu ru cuo le \"</span>)</div><div class=\"line\">&gt;  <span class=\"keyword\">except</span> Networkerror,e:</div><div class=\"line\">&gt;      <span class=\"keyword\">print</span> e.args</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"四、Python高级教程\"><a href=\"#四、Python高级教程\" class=\"headerlink\" title=\"四、Python高级教程\"></a>四、Python高级教程</h2><ul>\n<li><p>面向对象</p>\n<blockquote>\n<p>Python是一种面向对象的解释型语言，类似于其他面向对象的编程语言，需要熟悉一下面向对象的名词概念：</p>\n<ul>\n<li><code>类(class)</code>：用于描述具有相同属性和方法的对象的集合。描述一类事物，对象是类的实例。</li>\n<li><code>类变量</code>：类中公开化的变量，作用于类的范围内，区别于实例变量。</li>\n<li><code>数据成员</code>：类变量或实例变量，用于处理实例对象相关的数据。</li>\n<li><code>方法重写</code>：重写继承自父类的方法，实现自有的逻辑。override。</li>\n<li><code>实例变量</code>：定义在方法中的变量，作用于方法内。</li>\n<li><code>继承</code>：即一个派生类继承基类的字段和方法。</li>\n<li><code>实例化</code>：创建一个类的实例，类的具体对象。</li>\n<li><code>方法</code>：类中定义的函数。</li>\n<li><code>对象</code>：根据类定义的数据结构构建的一个实例，包含类的数据成员和方法。</li>\n</ul>\n<ol>\n<li><p>创建类</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassName</span>:</span><span class=\"comment\">#定义类的关键字class</span></div><div class=\"line\">&gt;        <span class=\"string\">'类的描述信息'</span> <span class=\"comment\">#帮助文档</span></div><div class=\"line\">&gt;        class_suite <span class=\"comment\">#类题</span></div><div class=\"line\">&gt;    <span class=\"comment\">#例如：</span></div><div class=\"line\">&gt;    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span>:</span></div><div class=\"line\">&gt;       <span class=\"string\">'所有员工的基类'</span></div><div class=\"line\">&gt;       empCount = <span class=\"number\">0</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;       <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name, salary)</span>:</span><span class=\"comment\">#构造函数</span></div><div class=\"line\">&gt;          self.name = name</div><div class=\"line\">&gt;          self.salary = salary</div><div class=\"line\">&gt;          Employee.empCount += <span class=\"number\">1</span></div><div class=\"line\">&gt;       </div><div class=\"line\">&gt;       <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">displayCount</span><span class=\"params\">(self)</span>:</span><span class=\"comment\">#方法函数</span></div><div class=\"line\">&gt;         <span class=\"keyword\">print</span> <span class=\"string\">\"Total Employee %d\"</span> % Employee.empCount</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;       <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">displayEmployee</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">&gt;          <span class=\"keyword\">print</span> <span class=\"string\">\"Name : \"</span>, self.name,  <span class=\"string\">\", Salary: \"</span>, self.salary</div><div class=\"line\">&gt;    <span class=\"comment\">#实例化对象</span></div><div class=\"line\">&gt;    objectName = ClassName(...);<span class=\"comment\">#根据类的构造函数创建对象。</span></div><div class=\"line\">&gt;    <span class=\"comment\">#访问方法属性，用object.method();</span></div><div class=\"line\">&gt;    objectName.displayCount();</div><div class=\"line\">&gt;    <span class=\"comment\">#可以添加、删除、修改类的属性</span></div><div class=\"line\">&gt;    objectName.age = <span class=\"number\">20</span>;<span class=\"comment\"># add attribution</span></div><div class=\"line\">&gt;    objectName.age =<span class=\"number\">26</span>;<span class=\"comment\">#modify attribution</span></div><div class=\"line\">&gt;    <span class=\"keyword\">del</span> objectName.age <span class=\"comment\"># delete attribution</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;<br>&gt;</p>\n<blockquote>\n<p>   <strong>Python有专门的函数，处理类的属性和方法</strong><br>   getattr(obj,name[,default]);<br>   setattr(obj,name,value);<br>   hasattr(obj,name);<br>   delattr(obj,name);</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;</div><div class=\"line\">&gt; 2. Python内置属性</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    ```python</div><div class=\"line\">&gt;    #python attribution，用ClassName.function调用。</div><div class=\"line\">&gt;    __dict__:类的属性</div><div class=\"line\">&gt;    __doc__:类的文档字符串</div><div class=\"line\">&gt;    __name__:类名</div><div class=\"line\">&gt;    __module__:类定义所在的模块</div><div class=\"line\">&gt;    __bases__类的所有父类构成元素</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p>类似java，python使用内置引用计数器，处理垃圾回收。</p>\n</li>\n<li><p>Python的继承：</p>\n<ul>\n<li><p>格式：class SubClassName [ParentClass1[,ParentClass2,…]]:</p>\n</li>\n<li><p>Python类的继承==支持多继承==</p>\n</li>\n<li><p>派生类继承基类，构造函数不会被自动调用，需要专门调用。</p>\n</li>\n<li><p>调用基类方法时候，需要用BaseClassName.而且需要self参数。区别于本类内的函数方法。</p>\n</li>\n<li><p>同类函数名，则优先调用本类中的函数方法，若无，再去基类中寻找。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;      issbuclass();#判断是否是另一个类的派生类，issubclass(sub,super);</div><div class=\"line\">&gt;      isinstance(obj,class);#判断一个对象，是不是类的实例。</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p>方法重写与重载</p>\n<ul>\n<li><p>重写基类的方法，用于实现自己的逻辑。</p>\n</li>\n<li><p>基础重载：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;      <span class=\"comment\">#函数方法，前后两个下划线__init__</span></div><div class=\"line\">&gt;      __init__(self[,args])<span class=\"comment\">#构造函数</span></div><div class=\"line\">&gt;      __del__(self)<span class=\"comment\">#删除对象</span></div><div class=\"line\">&gt;      __repr__(self)<span class=\"comment\">#转化为编译器格式</span></div><div class=\"line\">&gt;      __str__(self)<span class=\"comment\">#转化为可阅读模式</span></div><div class=\"line\">&gt;      __cmp__(self,x)<span class=\"comment\">#对象比较</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>运算符重载</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;      <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vector</span>:</span></div><div class=\"line\">&gt;         <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, a, b)</span>:</span></div><div class=\"line\">&gt;            self.a = a</div><div class=\"line\">&gt;            self.b = b</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;         <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">&gt;            <span class=\"keyword\">return</span> <span class=\"string\">'Vector (%d, %d)'</span> % (self.a, self.b)</div><div class=\"line\">&gt;         </div><div class=\"line\">&gt;         <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__add__</span><span class=\"params\">(self,other)</span>:</span></div><div class=\"line\">&gt;            <span class=\"keyword\">return</span> Vector(self.a + other.a, self.b + other.b)</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;      v1 = Vector(<span class=\"number\">2</span>,<span class=\"number\">10</span>)</div><div class=\"line\">&gt;      v2 = Vector(<span class=\"number\">5</span>,<span class=\"number\">-2</span>)</div><div class=\"line\">&gt;      <span class=\"keyword\">print</span> v1 + v2<span class=\"comment\">#运算符的重载</span></div><div class=\"line\">&gt;      <span class=\"comment\">#输出结果</span></div><div class=\"line\">&gt;      Vector(<span class=\"number\">7</span>,<span class=\"number\">8</span>)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p><strong>类的属性和方法</strong></p>\n<ul>\n<li><p>类的私有属性</p>\n<p>__private<em>attrs：两个下划线开头，仅能在类内部使用。self.\\</em>_private_attrs。</p>\n</li>\n<li><p>类的方法</p>\n<p>关键字<code>def</code>定义类的方法，类似定义函数。但是类的方法必须包含参数<code>self</code>且为第一参数，私有方法：__private<em>method，内部调用self.\\</em>_private_method</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;      <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">method</span><span class=\"params\">(self[,args])</span>:</span></div><div class=\"line\">&gt;          .....</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li>Python不允许实例化的类访问私有数据，可用obj._classname_attrName访问属性。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>正则表达式</p>\n<blockquote>\n<p>Python的re模块包含了全部的正则表达式。</p>\n<p>compile函数用于构建正则表达式。</p>\n<ol>\n<li><p>re.match</p>\n<p>从字符串起始位置匹配，起始不成功匹配，返回None。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    <span class=\"comment\">#pattern 正则表达式，string 匹配字符串，flags标志位，如区分大小写，多行匹配等。</span></div><div class=\"line\">&gt;    re.match(pattern,string,flags=<span class=\"number\">0</span>);</div><div class=\"line\">&gt;    group(num= <span class=\"number\">0</span>)<span class=\"comment\">#匹配整个表达式字符串，group可以依次输入多个组号。</span></div><div class=\"line\">&gt;    groups();<span class=\"comment\">#返回包含所有小组字符串的元组。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>   示例：</p>\n   <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    <span class=\"keyword\">import</span> re</div><div class=\"line\">&gt;    print(re.match(<span class=\"string\">'www'</span>, <span class=\"string\">'www.runoob.com'</span>).span())  <span class=\"comment\"># 在起始位置匹配</span></div><div class=\"line\">&gt;    print(re.match(<span class=\"string\">'com'</span>, <span class=\"string\">'www.runoob.com'</span>))         <span class=\"comment\"># 不在起始位置匹配</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\">#输出结果</span></div><div class=\"line\">&gt;    (<span class=\"number\">0</span>,<span class=\"number\">3</span>)</div><div class=\"line\">&gt;    <span class=\"keyword\">None</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n   <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt;    <span class=\"keyword\">import</span> re</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    line = <span class=\"string\">\"Cats are smarter than dogs\"</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    matchObj = re.match( <span class=\"string\">r'(.*) are (.*?) .*'</span>, line, re.M|re.I)</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"keyword\">if</span> matchObj:</div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> <span class=\"string\">\"matchObj.group() : \"</span>, matchObj.group()</div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> <span class=\"string\">\"matchObj.group(1) : \"</span>, matchObj.group(<span class=\"number\">1</span>)</div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> <span class=\"string\">\"matchObj.group(2) : \"</span>, matchObj.group(<span class=\"number\">2</span>)</div><div class=\"line\">&gt;    <span class=\"keyword\">else</span>:</div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> <span class=\"string\">\"No match!!\"</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\">#输出结果</span></div><div class=\"line\">&gt;    matchObj.group() :  Cats are smarter than dogs</div><div class=\"line\">&gt;    matchObj.group(<span class=\"number\">1</span>) :  Cats</div><div class=\"line\">&gt;    matchObj.group(<span class=\"number\">2</span>) :  smarter</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p>re.search方法</p>\n<p>扫描整个字符串，并返回第一个成功的匹配。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    re.search(pattern,string,flags=<span class=\"number\">0</span>);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>   示例：</p>\n   <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt;    <span class=\"comment\"># -*- coding: UTF-8 -*- </span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"keyword\">import</span> re</div><div class=\"line\">&gt;    print(re.search(<span class=\"string\">'www'</span>, <span class=\"string\">'www.runoob.com'</span>).span())  <span class=\"comment\"># 在起始位置匹配</span></div><div class=\"line\">&gt;    print(re.search(<span class=\"string\">'com'</span>, <span class=\"string\">'www.runoob.com'</span>).span())         <span class=\"comment\"># 不在起始位置匹配</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\">#输出结果</span></div><div class=\"line\">&gt;    (<span class=\"number\">0</span>,<span class=\"number\">3</span>)</div><div class=\"line\">&gt;    (<span class=\"number\">11</span>,<span class=\"number\">14</span>)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n   <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt;    <span class=\"keyword\">import</span> re</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    line = <span class=\"string\">\"Cats are smarter than dogs\"</span>;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    searchObj = re.search( <span class=\"string\">r'(.*) are (.*?) .*'</span>, line, re.M|re.I)</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"keyword\">if</span> searchObj:</div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> <span class=\"string\">\"searchObj.group() : \"</span>, searchObj.group()</div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> <span class=\"string\">\"searchObj.group(1) : \"</span>, searchObj.group(<span class=\"number\">1</span>)</div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> <span class=\"string\">\"searchObj.group(2) : \"</span>, searchObj.group(<span class=\"number\">2</span>)</div><div class=\"line\">&gt;    <span class=\"keyword\">else</span>:</div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> <span class=\"string\">\"Nothing found!!\"</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\">#输出结果</span></div><div class=\"line\">&gt;    searchObj.group() :  Cats are smarter than dogs</div><div class=\"line\">&gt;    searchObj.group(<span class=\"number\">1</span>) :  Cats</div><div class=\"line\">&gt;    searchObj.group(<span class=\"number\">2</span>) :  smarter</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p>re.match &amp; re.search</p>\n<p><code>re.match</code>匹配起始，不成功则None。</p>\n<p><code>re.search</code>匹配全部。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    #!/usr/bin/python</div><div class=\"line\">&gt;    import re</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    line = \"Cats are smarter than dogs\";</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    matchObj = re.match( r'dogs', line, re.M|re.I)</div><div class=\"line\">&gt;    if matchObj:</div><div class=\"line\">&gt;       print \"match --&gt; matchObj.group() : \", matchObj.group()</div><div class=\"line\">&gt;    else:</div><div class=\"line\">&gt;       print \"No match!!\"</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    matchObj = re.search( r'dogs', line, re.M|re.I)</div><div class=\"line\">&gt;    if matchObj:</div><div class=\"line\">&gt;       print \"search --&gt; matchObj.group() : \", matchObj.group()</div><div class=\"line\">&gt;    else:</div><div class=\"line\">&gt;       print \"No match!!\"</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    #输出结果</div><div class=\"line\">&gt;    No match!!</div><div class=\"line\">&gt;    serach --&gt; matchObj.group() : dogs</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p>re.sub检索和替换</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    re.sub(pattern,rep1,string,max = <span class=\"number\">0</span>);<span class=\"comment\">#count &gt;=0,匹配次数。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>   示例：</p>\n   <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt;    <span class=\"keyword\">import</span> re</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    phone = <span class=\"string\">\"2004-959-559 # This is Phone Number\"</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\"># Delete Python-style comments</span></div><div class=\"line\">&gt;    num = re.sub(<span class=\"string\">r'#.*$'</span>, <span class=\"string\">\"\"</span>, phone)</div><div class=\"line\">&gt;    <span class=\"keyword\">print</span> <span class=\"string\">\"Phone Num : \"</span>, num</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\"># Remove anything other than digits</span></div><div class=\"line\">&gt;    num = re.sub(<span class=\"string\">r'\\D'</span>, <span class=\"string\">\"\"</span>, phone)    </div><div class=\"line\">&gt;    <span class=\"keyword\">print</span> <span class=\"string\">\"Phone Num : \"</span>, num</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\">#输出结果</span></div><div class=\"line\">&gt;    Phone Num :  <span class=\"number\">2004</span><span class=\"number\">-959</span><span class=\"number\">-559</span></div><div class=\"line\">&gt;    Phone Num :  <span class=\"number\">2004959559</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p>正则表达式的修饰符-可选标志</p>\n<p><em>标志修饰符控制匹配模式，多个标识符可以用按位OR<code>|</code>指定</em></p>\n<p>| 修饰符  | 描绘                                |<br>| —- | ——————————— |<br>| re.l | 匹配不分大小写                           |<br>| re.L | 本地化识别(local-aware)匹配              |<br>| re.M | 多行匹配，影响<code>^</code>和<code>$</code>                    |<br>| re.S | 使<code>.</code>匹配包括行在内的所有字符                  |<br>| re.U | Unicode解析字符，影响<code>\\w</code>、<code>\\W</code>、<code>\\b</code>、<code>\\B</code> |<br>| re.X | 灵活格式                              |</p>\n</li>\n<li><p>正则表达式模式</p>\n<ul>\n<li><code>字母和数字</code>表达自身。</li>\n<li>多数字母和数字前加<code>\\</code>会转义</li>\n<li>标点符号均是特殊意思，除非转义。</li>\n<li><code>\\</code>是转义符</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    ^\t匹配字符串的开头</div><div class=\"line\">&gt;    $\t匹配字符串的末尾。</div><div class=\"line\">&gt;    .\t匹配任意字符，除了换行符\\n，当re.DOTALL标记被指定时，则可以匹配包括换行符的任意字符。</div><div class=\"line\">&gt;    [...]\t用来表示一组字符,单独列出：[amk] 匹配 'a'，'m'或'k'</div><div class=\"line\">&gt;    [^...]\t不在[]中的字符：[^abc] 匹配除了a,b,c之外的字符。</div><div class=\"line\">&gt;    re*\t匹配0个或多个的表达式。</div><div class=\"line\">&gt;    re+\t匹配1个或多个的表达式。</div><div class=\"line\">&gt;    re?\t匹配0个或1个由前面的正则表达式定义的片段，非贪婪方式</div><div class=\"line\">&gt;    re&#123; n&#125;\t</div><div class=\"line\">&gt;    re&#123; n,&#125;\t精确匹配n个前面表达式。</div><div class=\"line\">&gt;    re&#123; n, m&#125;\t匹配 n 到 m 次由前面的正则表达式定义的片段，贪婪方式</div><div class=\"line\">&gt;    a| b\t匹配a或b</div><div class=\"line\">&gt;    (re)\tG匹配括号内的表达式，也表示一个组</div><div class=\"line\">&gt;    (?imx)\t正则表达式包含三种可选标志：i, m, 或 x 。只影响括号中的区域。</div><div class=\"line\">&gt;    (?-imx)\t正则表达式关闭 i, m, 或 x 可选标志。只影响括号中的区域。</div><div class=\"line\">&gt;    (?: re)\t类似 (...), 但是不表示一个组</div><div class=\"line\">&gt;    (?imx: re)\t在括号中使用i, m, 或 x 可选标志</div><div class=\"line\">&gt;    (?-imx: re)\t在括号中不使用i, m, 或 x 可选标志</div><div class=\"line\">&gt;    (?#...)\t注释.</div><div class=\"line\">&gt;    (?= re)\t前向肯定界定符。如果所含正则表达式，以 ... 表示，在当前位置成功匹配时成功，否则失败。但一旦所含表达式已经尝试，匹配引擎根本没有提高；模式的剩余部分还要尝试界定符的右边。</div><div class=\"line\">&gt;    (?! re)\t前向否定界定符。与肯定界定符相反；当所含表达式不能在字符串当前位置匹配时成功</div><div class=\"line\">&gt;    (?&gt; re)\t匹配的独立模式，省去回溯。</div><div class=\"line\">&gt;    \\w\t匹配字母数字及下划线</div><div class=\"line\">&gt;    \\W\t匹配非字母数字及下划线</div><div class=\"line\">&gt;    \\s\t匹配任意空白字符，等价于 [\\t\\n\\r\\f].</div><div class=\"line\">&gt;    \\S\t匹配任意非空字符</div><div class=\"line\">&gt;    \\d\t匹配任意数字，等价于 [0-9].</div><div class=\"line\">&gt;    \\D\t匹配任意非数字</div><div class=\"line\">&gt;    \\A\t匹配字符串开始</div><div class=\"line\">&gt;    \\Z\t匹配字符串结束，如果是存在换行，只匹配到换行前的结束字符串。c</div><div class=\"line\">&gt;    \\z\t匹配字符串结束</div><div class=\"line\">&gt;    \\G\t匹配最后匹配完成的位置。</div><div class=\"line\">&gt;    \\b\t匹配一个单词边界，也就是指单词和空格间的位置。例如， 'er\\b' 可以匹配\"never\" 中的 'er'，但不能匹配 \"verb\" 中的 'er'。</div><div class=\"line\">&gt;    \\B\t匹配非单词边界。'er\\B' 能匹配 \"verb\" 中的 'er'，但不能匹配 \"never\" 中的 'er'。</div><div class=\"line\">&gt;    \\n, \\t, 等.\t匹配一个换行符。匹配一个制表符。等</div><div class=\"line\">&gt;    \\1...\\9\t匹配第n个分组的子表达式。</div><div class=\"line\">&gt;    \\10\t匹配第n个分组的子表达式，如果它经匹配。否则指的是八进制字符码的表达式。</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n</li>\n<li><p>CGI通用网关接口</p>\n<blockquote>\n<p>CGI程序，运行在服务器，python脚本、perl脚本、shell脚本、C/C++程序等。</p>\n<p>Web服务器需支持cgi，通常在/cgi-bin/ /var/www/cgi-bin/</p>\n<p>cgi文件<code>.cgi</code>或者各自语言的源文件。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt; <span class=\"comment\"># -*- coding: UTF-8 -*-</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt; <span class=\"keyword\">print</span> <span class=\"string\">\"Content-type:text/html\"</span>\t<span class=\"comment\">#向浏览器显示的内容类型</span></div><div class=\"line\">&gt; <span class=\"keyword\">print</span>                               <span class=\"comment\"># 空行，告诉服务器结束头部</span></div><div class=\"line\">&gt; <span class=\"keyword\">print</span> <span class=\"string\">'&lt;html&gt;'</span></div><div class=\"line\">&gt; <span class=\"keyword\">print</span> <span class=\"string\">'&lt;head&gt;'</span></div><div class=\"line\">&gt; <span class=\"keyword\">print</span> <span class=\"string\">'&lt;meta charset=\"utf-8\"&gt;'</span></div><div class=\"line\">&gt; <span class=\"keyword\">print</span> <span class=\"string\">'&lt;title&gt;Hello Word - 我的第一个 CGI 程序！&lt;/title&gt;'</span></div><div class=\"line\">&gt; <span class=\"keyword\">print</span> <span class=\"string\">'&lt;/head&gt;'</span></div><div class=\"line\">&gt; <span class=\"keyword\">print</span> <span class=\"string\">'&lt;body&gt;'</span></div><div class=\"line\">&gt; <span class=\"keyword\">print</span> <span class=\"string\">'&lt;h2&gt;Hello Word! 我是来自菜鸟教程的第一CGI程序&lt;/h2&gt;'</span></div><div class=\"line\">&gt; <span class=\"keyword\">print</span> <span class=\"string\">'&lt;/body&gt;'</span></div><div class=\"line\">&gt; <span class=\"keyword\">print</span> <span class=\"string\">'&lt;/html&gt;'</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>如上保存为hello.py，修改权限755。放置于cgi-bin/目录下，即可在浏览器中访问。</p>\n<ul>\n<li><p>CGI程序中HTTP头部常用信息</p>\n<p>| 头                  | 描述              |<br>| —————— | ————— |<br>| Content-type       | 请求与实体对应的MIME信息。 |<br>| Expires:Date       | 响应过期的日期和时间      |<br>| Location:URL       | 重定向             |<br>| Last-modified:Date | 请求资源的最后修改时间     |<br>| Content-length:N   | 请求内容长度          |<br>| Set-Cookie:String  | 设置Http Cookie   |</p>\n</li>\n<li><p>CGI环境变量</p>\n<p>所有CGI程序都接收以下环境变量</p>\n<p>| 变量名             | 描述                                  |<br>| ————— | ———————————– |<br>| CONTENT_TYPE    | MIME类型                              |<br>| CONTENT_LENGTH  | 有效数据字节数                             |<br>| HTTP_COOKIE     | 客户机内cookie内容                        |<br>| HTTP_USER_AGENT | 客户及版本，浏览器信息等。                       |<br>| PATH_INFO       | 表示CGI程序名之后的其他路径信息                   |<br>| QUERY_STRING    | GET请求时，代表所传递的信息。                    |<br>| REMOTE_ADDR     | 客户机ip地址                             |<br>| REMOTE_HOST     | 客户机主机名                              |<br>| REQUEST_METHOD  | 提供脚本被调用的方法，http/1.0协议，仅GET和POST有意义。 |<br>| SCRIPT_FILENAME | CGI脚本完整路径                           |<br>| SERVER_NAME     | CGI脚本完整名称                           |<br>| SERVER_SOFTWARE | 调用CGI程序的http服务器的名称，版本信息。            |</p>\n<hr>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;       <span class=\"comment\">#输出所有cgi环境变量信息</span></div><div class=\"line\">&gt;       <span class=\"keyword\">import</span> os</div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> <span class=\"string\">\"Content-type: text/html\"</span></div><div class=\"line\">&gt;       <span class=\"keyword\">print</span></div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> <span class=\"string\">\"&lt;meta charset=\\\"utf-8\\\"&gt;\"</span></div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> <span class=\"string\">\"&lt;b&gt;环境变量&lt;/b&gt;&lt;br&gt;\"</span></div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> <span class=\"string\">\"&lt;ul&gt;\"</span></div><div class=\"line\">&gt;       <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> os.environ.keys():</div><div class=\"line\">&gt;           <span class=\"keyword\">print</span> <span class=\"string\">\"&lt;li&gt;&lt;span style='color:green'&gt;%30s &lt;/span&gt;:%s&lt;/li&gt;\"</span> % (key,os.environ[key])</div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> <span class=\"string\">\"&lt;/ul&gt;\"</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>GET&amp;POST</p>\n<p>浏览器请求服务器的两中主要方式</p>\n<ul>\n<li><p>GET方法</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;     http://www.test.com/cgi-bin/hello.py?key1=value1&amp;key2=value2</div><div class=\"line\">&gt;     #GET方法相关注释</div><div class=\"line\">&gt;     '''</div><div class=\"line\">&gt;     请求可被缓存，请求保存在浏览器历史纪录，可被收藏书签，请求不应在处理敏感数据时使用，请求有长度限制，请求只应用于取回数据。</div><div class=\"line\">&gt;     '''</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>POST方法</p>\n<p>post方法较为安全可靠。</p>\n</li>\n</ul>\n<ul>\n<li><p>CGI中使用cookie</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   Set-cookie:name=name;expires=date;path=path;domain=domain;secure</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>  <strong>注释：</strong></p>\n<p>  <code>name=name</code>: 需要设置cookie的值(name不能使用”;”和”,”号),有多个name值时用 “;” 分隔，例如：name1=name1;name2=name2;name3=name3。<br>  <code>expires=date</code>: cookie的有效期限,格式： expires=”Wdy,DD-Mon-YYYY HH:MM:SS”<br>  <code>path=path</code>: 设置cookie支持的路径,如果path是一个路径，则cookie对这个目录下的所有文件及子目录生效，例如： path=”/cgi-bin/“，如果path是一个文件，则cookie指对这个文件生效，例如：path=”/cgi-bin/cookie.cgi”。<br>  <code>domain=domain</code>: 对cookie生效的域名，例如：domain=”www.runoob.com”<br>  <code>secure</code>: 如果给出此标志，表示cookie只能通过SSL协议的https服务器来传递。<br>  cookie的接收是通过设置环境变量HTTP_COOKIE来实现的，CGI程序可以通过检索该变量获取cookie信息。</p>\n<ul>\n<li><p>cookie检索</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;     <span class=\"comment\">#cookie信息存储在CGI环境变量HTTP_COOKIE中，</span></div><div class=\"line\">&gt;     key1=value1;key=value2;......</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>文件上传</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;     <span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\">&gt;     <span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">&gt;     <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">&gt;     <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">&gt;     <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>菜鸟教程(runoob.com)<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">&gt;     <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">&gt;     <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">&gt;      <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">enctype</span>=<span class=\"string\">\"multipart/form-data\"</span> </span></div><div class=\"line\">&gt;                          action=\"/cgi-bin/save_file.py\" method=\"post\"&gt;</div><div class=\"line\">&gt;        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>选中文件: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"filename\"</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">&gt;        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"上传\"</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">&gt;        <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\">&gt;     <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">&gt;     <span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<pre><code>上面的html形成一个界面，可以选择上传文件，调用save_file.py脚本\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;     <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt;     <span class=\"comment\"># -*- coding: UTF-8 -*-</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     <span class=\"keyword\">import</span> cgi, os</div><div class=\"line\">&gt;     <span class=\"keyword\">import</span> cgitb; cgitb.enable()</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     form = cgi.FieldStorage()</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     <span class=\"comment\"># 获取文件名</span></div><div class=\"line\">&gt;     fileitem = form[<span class=\"string\">'filename'</span>]</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     <span class=\"comment\"># 检测文件是否上传</span></div><div class=\"line\">&gt;     <span class=\"keyword\">if</span> fileitem.filename:</div><div class=\"line\">&gt;        <span class=\"comment\"># 设置文件路径 </span></div><div class=\"line\">&gt;        fn = os.path.basename(fileitem.filename)</div><div class=\"line\">&gt;        open(<span class=\"string\">'/tmp/'</span> + fn, <span class=\"string\">'wb'</span>).write(fileitem.file.read())</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;        message = <span class=\"string\">'文件 \"'</span> + fn + <span class=\"string\">'\" 上传成功'</span></div><div class=\"line\">&gt;        </div><div class=\"line\">&gt;     <span class=\"keyword\">else</span>:</div><div class=\"line\">&gt;        message = <span class=\"string\">'文件没有上传'</span></div><div class=\"line\">&gt;        </div><div class=\"line\">&gt;     <span class=\"keyword\">print</span> <span class=\"string\">\"\"\"\\</span></div><div class=\"line\">&gt;     Content-Type: text/html\\n</div><div class=\"line\">&gt;     &lt;html&gt;</div><div class=\"line\">&gt;     &lt;head&gt;</div><div class=\"line\">&gt;     &lt;meta charset=\"utf-8\"&gt;</div><div class=\"line\">&gt;     &lt;title&gt;菜鸟教程(runoob.com)&lt;/title&gt;</div><div class=\"line\">&gt;     &lt;/head&gt;</div><div class=\"line\">&gt;     &lt;body&gt;</div><div class=\"line\">&gt;        &lt;p&gt;%s&lt;/p&gt;</div><div class=\"line\">&gt;     &lt;/body&gt;</div><div class=\"line\">&gt;     &lt;/html&gt;</div><div class=\"line\">&gt;     \"\"\" % (message,)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</code></pre></blockquote>\n<p>&gt;</p>\n<blockquote>\n<pre><code>**记得文件的权限设置。**\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;     <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt;     <span class=\"comment\"># -*- coding: UTF-8 -*-</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     <span class=\"comment\"># HTTP 头部</span></div><div class=\"line\">&gt;     <span class=\"keyword\">print</span> <span class=\"string\">\"Content-Disposition: attachment; filename=\\\"foo.txt\\\"\"</span>;</div><div class=\"line\">&gt;     <span class=\"keyword\">print</span></div><div class=\"line\">&gt;     <span class=\"comment\"># 打开文件</span></div><div class=\"line\">&gt;     fo = open(<span class=\"string\">\"foo.txt\"</span>, <span class=\"string\">\"rb\"</span>)</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     str = fo.read();</div><div class=\"line\">&gt;     <span class=\"keyword\">print</span> str</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     <span class=\"comment\"># 关闭文件</span></div><div class=\"line\">&gt;     fo.close()</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</code></pre></blockquote>\n<p>&gt;</p>\n<blockquote>\n<pre><code>**以上为文件下载**\n</code></pre></blockquote>\n</li>\n<li><p>Python操作mysql数据库</p>\n<blockquote>\n<p>python支持多种数据库，有对应的模块。DB-API使用流程</p>\n<ol>\n<li><p>引入api模块。</p>\n</li>\n<li><p>获取数据库链接。</p>\n</li>\n<li><p>执行sql语句和存储。</p>\n</li>\n<li><p>关闭连接。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt;    <span class=\"comment\"># -*- coding: UTF-8 -*-</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"keyword\">import</span> MySQLdb</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\"># 打开数据库连接</span></div><div class=\"line\">&gt;    db = MySQLdb.connect(<span class=\"string\">\"localhost\"</span>,<span class=\"string\">\"testuser\"</span>,<span class=\"string\">\"test123\"</span>,<span class=\"string\">\"TESTDB\"</span> )</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\"># 使用cursor()方法获取操作游标 </span></div><div class=\"line\">&gt;    cursor = db.cursor()</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\"># 使用execute方法执行SQL语句</span></div><div class=\"line\">&gt;    cursor.execute(<span class=\"string\">\"SELECT VERSION()\"</span>)</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\"># 使用 fetchone() 方法获取一条数据库。</span></div><div class=\"line\">&gt;    data = cursor.fetchone()</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"keyword\">print</span> <span class=\"string\">\"Database version : %s \"</span> % data</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\"># 关闭数据库连接</span></div><div class=\"line\">&gt;    db.close()</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>python数据库mysql，需要mysqldb</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   fetchone();<span class=\"comment\">#获取下一个查询结果集</span></div><div class=\"line\">&gt;   fetchall();<span class=\"comment\">#接收全部返回结果行</span></div><div class=\"line\">&gt;   rowcount;<span class=\"comment\">#只读属性，返回执行execute()后影响的行数</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>事务</p>\n<p>事务的四个属性：</p>\n<ul>\n<li>原子性（atomicity）。一个事务是一个不可分割的工作单位，事务中包括的诸操作要么都做，要么都不做。</li>\n<li>一致性（consistency）。事务必须是使数据库从一个一致性状态变到另一个一致性状态。一致性与原子性是密切相关的。</li>\n<li>隔离性（isolation）。一个事务的执行不能被其他事务干扰。即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。</li>\n<li>持久性（durability）。持续性也称永久性（permanence），指一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。接下来的其他操作或故障不应该对其有任何影响。</li>\n</ul>\n<p><strong><em>Python DB API 2.0 的事务提供了两个方法 commit 或 rollback。</em></strong></p>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p>Python网络编程</p>\n<blockquote>\n<p>python提供两个级别的网络服务：</p>\n<p>1、低级别支持基本Socket</p>\n<p>2、高级别SocketServer</p>\n<p>==Socket==套接字用于程序在主机间或者进程间通讯。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"comment\">#pyton中socket函数</span></div><div class=\"line\">&gt; socket.socket([family[,type[,proto]]])</div><div class=\"line\">&gt; <span class=\"comment\"># family 套接字家族，可用AF_UNIX或AF_INET</span></div><div class=\"line\">&gt; <span class=\"comment\">#type 类型，面向连接与否，SOCK_STREAM和SOCK_DGRAM</span></div><div class=\"line\">&gt; <span class=\"comment\">#proto 默认为0</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><strong>Python中socket函数可以参照api文档，此处不在赘述。</strong></p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"comment\">#服务端</span></div><div class=\"line\">&gt; <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt; <span class=\"comment\"># -*- coding: UTF-8 -*-</span></div><div class=\"line\">&gt; <span class=\"comment\"># 文件名：server.py</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt; <span class=\"keyword\">import</span> socket               <span class=\"comment\"># 导入 socket 模块</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt; s = socket.socket()         <span class=\"comment\"># 创建 socket 对象</span></div><div class=\"line\">&gt; host = socket.gethostname() <span class=\"comment\"># 获取本地主机名</span></div><div class=\"line\">&gt; port = <span class=\"number\">12345</span>                <span class=\"comment\"># 设置端口</span></div><div class=\"line\">&gt; s.bind((host, port))        <span class=\"comment\"># 绑定端口</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt; s.listen(<span class=\"number\">5</span>)                 <span class=\"comment\"># 等待客户端连接</span></div><div class=\"line\">&gt; <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">&gt;     c, addr = s.accept()     <span class=\"comment\"># 建立客户端连接。</span></div><div class=\"line\">&gt;     <span class=\"keyword\">print</span> <span class=\"string\">'连接地址：'</span>, addr</div><div class=\"line\">&gt;     c.send(<span class=\"string\">'欢迎访问菜鸟教程！'</span>)</div><div class=\"line\">&gt;     c.close()                <span class=\"comment\"># 关闭连接</span></div><div class=\"line\">&gt;     </div><div class=\"line\">&gt;     </div><div class=\"line\">&gt; <span class=\"comment\">#客户端</span></div><div class=\"line\">&gt; <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt; <span class=\"comment\"># -*- coding: UTF-8 -*-</span></div><div class=\"line\">&gt; <span class=\"comment\"># 文件名：client.py</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt; <span class=\"keyword\">import</span> socket               <span class=\"comment\"># 导入 socket 模块</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt; s = socket.socket()         <span class=\"comment\"># 创建 socket 对象</span></div><div class=\"line\">&gt; host = socket.gethostname() <span class=\"comment\"># 获取本地主机名</span></div><div class=\"line\">&gt; port = <span class=\"number\">12345</span>                <span class=\"comment\"># 设置端口好</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt; s.connect((host, port))</div><div class=\"line\">&gt; <span class=\"keyword\">print</span> s.recv(<span class=\"number\">1024</span>)</div><div class=\"line\">&gt; s.close()  </div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><strong>Python Internet模块</strong></p>\n<p>| 协议     | 功能用处      | 端口号  | Python模块                 |<br>| —— | ——— | —- | ———————— |<br>| HTTP   | 网页访问      | 80   | httplib、urllib、xmlrpclib |<br>| NNTP   | 阅读、张贴新闻文章 | 119  | nntplib                  |<br>| FTP    | 文件传输      | 20   | ftplib、urllib            |<br>| SMTP   | 发送邮件      | 25   | smtplib                  |<br>| POP3   | 接收邮件      | 110  | poplib                   |<br>| IMAP4  | 获取邮件      | 143  | imaplib                  |<br>| Telnet | 命令行       | 23   | telnetlib                |<br>| Gopher | 信息查找      | 70   | gopherlib、urllib         |</p>\n<ul>\n<li><p>smtp邮件发送</p>\n<p>语法格式：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"keyword\">import</span> smtplib</div><div class=\"line\">&gt;   <span class=\"comment\">#创建对象</span></div><div class=\"line\">&gt;   smtpObj = smtplib.SMTP([host[,port[,local_hostname]]])</div><div class=\"line\">&gt;   <span class=\"comment\">#发送邮件</span></div><div class=\"line\">&gt;   SMTP.sendmail(from_addr,to_addr,msg[,mail_options,rcpt_options])</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>  示例：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt;   <span class=\"comment\"># -*- coding: UTF-8 -*-</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"keyword\">import</span> smtplib</div><div class=\"line\">&gt;   <span class=\"keyword\">from</span> email.mime.text <span class=\"keyword\">import</span> MIMEText</div><div class=\"line\">&gt;   <span class=\"keyword\">from</span> email.header <span class=\"keyword\">import</span> Header</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   sender = <span class=\"string\">'server@server.com'</span></div><div class=\"line\">&gt;   receivers = [<span class=\"string\">'receiver@receiver.com'</span>]  <span class=\"comment\"># 接收邮件，可设置为你的QQ邮箱或者其他邮箱</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\"># 三个参数：第一个为文本内容，第二个 plain 设置文本格式，可以是html，text等。第三个 utf-8 设置编码</span></div><div class=\"line\">&gt;   message = MIMEText(<span class=\"string\">'Python 邮件发送测试...'</span>, <span class=\"string\">'plain'</span>, <span class=\"string\">'utf-8'</span>)</div><div class=\"line\">&gt;   message[<span class=\"string\">'From'</span>] = Header(<span class=\"string\">\"菜鸟教程\"</span>, <span class=\"string\">'utf-8'</span>)</div><div class=\"line\">&gt;   message[<span class=\"string\">'To'</span>] =  Header(<span class=\"string\">\"测试\"</span>, <span class=\"string\">'utf-8'</span>)</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   subject = <span class=\"string\">'Python SMTP 邮件测试'</span></div><div class=\"line\">&gt;   message[<span class=\"string\">'Subject'</span>] = Header(subject, <span class=\"string\">'utf-8'</span>)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;<br>&gt;</p>\n<blockquote>\n<p>  try:</p>\n<pre><code>smtpObj = smtplib.SMTP(&apos;localhost&apos;)\nsmtpObj.sendmail(sender, receivers, message.as_string())\nprint &quot;邮件发送成功&quot;\n</code></pre><p>  except smtplib.SMTPException:</p>\n<pre><code>print &quot;Error: 无法发送邮件&quot;\n</code></pre>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;</div><div class=\"line\">&gt;   **使用第三方SMTP服务**</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   ```python</div><div class=\"line\">&gt;   # 第三方 SMTP 服务</div><div class=\"line\">&gt;   mail_host=&quot;smtp.XXX.com&quot;  #设置服务器</div><div class=\"line\">&gt;   mail_user=&quot;XXXX&quot;    #用户名</div><div class=\"line\">&gt;   mail_pass=&quot;XXXXXX&quot;   #密码</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   sender = &apos;from@runoob.com&apos;</div><div class=\"line\">&gt;   receivers = [&apos;429240967@qq.com&apos;]  # 接收邮件，可设置为你的QQ邮箱或者其他邮箱</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   message = MIMEText(&apos;Python 邮件发送测试...&apos;, &apos;plain&apos;, &apos;utf-8&apos;)</div><div class=\"line\">&gt;   message[&apos;From&apos;] = Header(&quot;菜鸟教程&quot;, &apos;utf-8&apos;)</div><div class=\"line\">&gt;   message[&apos;To&apos;] =  Header(&quot;测试&quot;, &apos;utf-8&apos;)</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   subject = &apos;Python SMTP 邮件测试&apos;</div><div class=\"line\">&gt;   message[&apos;Subject&apos;] = Header(subject, &apos;utf-8&apos;)</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   try:</div><div class=\"line\">&gt;       smtpObj = smtplib.SMTP() </div><div class=\"line\">&gt;       smtpObj.connect(mail_host, 25)    # 25 为 SMTP 端口号</div><div class=\"line\">&gt;       smtpObj.login(mail_user,mail_pass)  </div><div class=\"line\">&gt;       smtpObj.sendmail(sender, receivers, message.as_string())</div><div class=\"line\">&gt;       print &quot;邮件发送成功&quot;</div><div class=\"line\">&gt;   except smtplib.SMTPException:</div><div class=\"line\">&gt;       print &quot;Error: 无法发送邮件&quot;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>  创建带附件的邮件发送</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt;   <span class=\"comment\"># -*- coding: UTF-8 -*-</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"keyword\">import</span> smtplib</div><div class=\"line\">&gt;   <span class=\"keyword\">from</span> email.mime.text <span class=\"keyword\">import</span> MIMEText</div><div class=\"line\">&gt;   <span class=\"keyword\">from</span> email.mime.multipart <span class=\"keyword\">import</span> MIMEMultipart</div><div class=\"line\">&gt;   <span class=\"keyword\">from</span> email.header <span class=\"keyword\">import</span> Header</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   sender = <span class=\"string\">'from@runoob.com'</span></div><div class=\"line\">&gt;   receivers = [<span class=\"string\">'429240967@qq.com'</span>]  <span class=\"comment\"># 接收邮件，可设置为你的QQ邮箱或者其他邮箱</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\">#创建一个带附件的实例</span></div><div class=\"line\">&gt;   message = MIMEMultipart()</div><div class=\"line\">&gt;   message[<span class=\"string\">'From'</span>] = Header(<span class=\"string\">\"菜鸟教程\"</span>, <span class=\"string\">'utf-8'</span>)</div><div class=\"line\">&gt;   message[<span class=\"string\">'To'</span>] =  Header(<span class=\"string\">\"测试\"</span>, <span class=\"string\">'utf-8'</span>)</div><div class=\"line\">&gt;   subject = <span class=\"string\">'Python SMTP 邮件测试'</span></div><div class=\"line\">&gt;   message[<span class=\"string\">'Subject'</span>] = Header(subject, <span class=\"string\">'utf-8'</span>)</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\">#邮件正文内容</span></div><div class=\"line\">&gt;   message.attach(MIMEText(<span class=\"string\">'这是菜鸟教程Python 邮件发送测试……'</span>, <span class=\"string\">'plain'</span>, <span class=\"string\">'utf-8'</span>))</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\"># 构造附件1，传送当前目录下的 test.txt 文件</span></div><div class=\"line\">&gt;   att1 = MIMEText(open(<span class=\"string\">'test.txt'</span>, <span class=\"string\">'rb'</span>).read(), <span class=\"string\">'base64'</span>, <span class=\"string\">'utf-8'</span>)</div><div class=\"line\">&gt;   att1[<span class=\"string\">\"Content-Type\"</span>] = <span class=\"string\">'application/octet-stream'</span></div><div class=\"line\">&gt;   <span class=\"comment\"># 这里的filename可以任意写，写什么名字，邮件中显示什么名字</span></div><div class=\"line\">&gt;   att1[<span class=\"string\">\"Content-Disposition\"</span>] = <span class=\"string\">'attachment; filename=\"test.txt\"'</span></div><div class=\"line\">&gt;   message.attach(att1)</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\"># 构造附件2，传送当前目录下的 runoob.txt 文件</span></div><div class=\"line\">&gt;   att2 = MIMEText(open(<span class=\"string\">'runoob.txt'</span>, <span class=\"string\">'rb'</span>).read(), <span class=\"string\">'base64'</span>, <span class=\"string\">'utf-8'</span>)</div><div class=\"line\">&gt;   att2[<span class=\"string\">\"Content-Type\"</span>] = <span class=\"string\">'application/octet-stream'</span></div><div class=\"line\">&gt;   att2[<span class=\"string\">\"Content-Disposition\"</span>] = <span class=\"string\">'attachment; filename=\"runoob.txt\"'</span></div><div class=\"line\">&gt;   message.attach(att2)</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"keyword\">try</span>:</div><div class=\"line\">&gt;       smtpObj = smtplib.SMTP(<span class=\"string\">'localhost'</span>)</div><div class=\"line\">&gt;       smtpObj.sendmail(sender, receivers, message.as_string())</div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> <span class=\"string\">\"邮件发送成功\"</span></div><div class=\"line\">&gt;   <span class=\"keyword\">except</span> smtplib.SMTPException:</div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> <span class=\"string\">\"Error: 无法发送邮件\"</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p><strong>Python多线程</strong></p>\n<p>关于多线程需要注意两点：</p>\n<ul>\n<li>线程可以被中断(抢占)</li>\n<li>其他线程运行时，线程可以休眠(退让)</li>\n</ul>\n<p><strong>python使用线程两种方式</strong></p>\n<p>1、函数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   thread.start_new_thread(function,args[,kwargs])</div><div class=\"line\">&gt;   <span class=\"comment\"># 注释：function-线程函数，args-参数，必须是tuple类型。kwargs-可选参数。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt;   <span class=\"comment\"># -*- coding: UTF-8 -*-</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"keyword\">import</span> thread</div><div class=\"line\">&gt;   <span class=\"keyword\">import</span> time</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\"># 为线程定义一个函数</span></div><div class=\"line\">&gt;   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print_time</span><span class=\"params\">( threadName, delay)</span>:</span></div><div class=\"line\">&gt;      count = <span class=\"number\">0</span></div><div class=\"line\">&gt;      <span class=\"keyword\">while</span> count &lt; <span class=\"number\">5</span>:</div><div class=\"line\">&gt;         time.sleep(delay)</div><div class=\"line\">&gt;         count += <span class=\"number\">1</span></div><div class=\"line\">&gt;         <span class=\"keyword\">print</span> <span class=\"string\">\"%s: %s\"</span> % ( threadName, time.ctime(time.time()) )</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\"># 创建两个线程</span></div><div class=\"line\">&gt;   <span class=\"keyword\">try</span>:</div><div class=\"line\">&gt;      thread.start_new_thread( print_time, (<span class=\"string\">\"Thread-1\"</span>, <span class=\"number\">2</span>, ) )</div><div class=\"line\">&gt;      thread.start_new_thread( print_time, (<span class=\"string\">\"Thread-2\"</span>, <span class=\"number\">4</span>, ) )</div><div class=\"line\">&gt;   <span class=\"keyword\">except</span>:</div><div class=\"line\">&gt;      <span class=\"keyword\">print</span> <span class=\"string\">\"Error: unable to start thread\"</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"keyword\">while</span> <span class=\"number\">1</span>:</div><div class=\"line\">&gt;      <span class=\"keyword\">pass</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>  <em>线程结束依靠线程函数，或者手动<code>thread.exit()</code>,<code>抛异常</code>。</em></p>\n<ul>\n<li><p><strong><em>线程模块</em></strong></p>\n<p>1、<code>thread</code>和<code>threading</code>两个标准库</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   threading.currentThread();</div><div class=\"line\">&gt;   threading.enumerate();</div><div class=\"line\">&gt;   threading.activeCount();</div><div class=\"line\">&gt;   run();start();join([time]);isAlive();getName();setName();</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>  2、使用Threading模块创建线程</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"comment\">#继承threading.Thread然后重写__init__方法和run方法</span></div><div class=\"line\">&gt;   <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt;   <span class=\"comment\"># -*- coding: UTF-8 -*-</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"keyword\">import</span> threading</div><div class=\"line\">&gt;   <span class=\"keyword\">import</span> time</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   exitFlag = <span class=\"number\">0</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">myThread</span> <span class=\"params\">(threading.Thread)</span>:</span>   <span class=\"comment\">#继承父类threading.Thread</span></div><div class=\"line\">&gt;       <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, threadID, name, counter)</span>:</span></div><div class=\"line\">&gt;           threading.Thread.__init__(self)</div><div class=\"line\">&gt;           self.threadID = threadID</div><div class=\"line\">&gt;           self.name = name</div><div class=\"line\">&gt;           self.counter = counter</div><div class=\"line\">&gt;       <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span>                   <span class=\"comment\">#把要执行的代码写到run函数里面 线程在创建后会直接运行run函数 </span></div><div class=\"line\">&gt;           <span class=\"keyword\">print</span> <span class=\"string\">\"Starting \"</span> + self.name</div><div class=\"line\">&gt;           print_time(self.name, self.counter, <span class=\"number\">5</span>)</div><div class=\"line\">&gt;           <span class=\"keyword\">print</span> <span class=\"string\">\"Exiting \"</span> + self.name</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print_time</span><span class=\"params\">(threadName, delay, counter)</span>:</span></div><div class=\"line\">&gt;       <span class=\"keyword\">while</span> counter:</div><div class=\"line\">&gt;           <span class=\"keyword\">if</span> exitFlag:</div><div class=\"line\">&gt;               thread.exit()</div><div class=\"line\">&gt;           time.sleep(delay)</div><div class=\"line\">&gt;           <span class=\"keyword\">print</span> <span class=\"string\">\"%s: %s\"</span> % (threadName, time.ctime(time.time()))</div><div class=\"line\">&gt;           counter -= <span class=\"number\">1</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\"># 创建新线程</span></div><div class=\"line\">&gt;   thread1 = myThread(<span class=\"number\">1</span>, <span class=\"string\">\"Thread-1\"</span>, <span class=\"number\">1</span>)</div><div class=\"line\">&gt;   thread2 = myThread(<span class=\"number\">2</span>, <span class=\"string\">\"Thread-2\"</span>, <span class=\"number\">2</span>)</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\"># 开启线程</span></div><div class=\"line\">&gt;   thread1.start()</div><div class=\"line\">&gt;   thread2.start()</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> <span class=\"string\">\"Exiting Main Thread\"</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>线程同步</p>\n<p>Python中线程同步使用<code>Lock</code>和<code>Rlock</code>两个对象，都含有<code>acquire</code>和<code>release</code>方法。</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt;   <span class=\"comment\"># -*- coding: UTF-8 -*-</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"keyword\">import</span> threading</div><div class=\"line\">&gt;   <span class=\"keyword\">import</span> time</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">myThread</span> <span class=\"params\">(threading.Thread)</span>:</span></div><div class=\"line\">&gt;       <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, threadID, name, counter)</span>:</span></div><div class=\"line\">&gt;           threading.Thread.__init__(self)</div><div class=\"line\">&gt;           self.threadID = threadID</div><div class=\"line\">&gt;           self.name = name</div><div class=\"line\">&gt;           self.counter = counter</div><div class=\"line\">&gt;       <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">&gt;           <span class=\"keyword\">print</span> <span class=\"string\">\"Starting \"</span> + self.name</div><div class=\"line\">&gt;          <span class=\"comment\"># 获得锁，成功获得锁定后返回True</span></div><div class=\"line\">&gt;          <span class=\"comment\"># 可选的timeout参数不填时将一直阻塞直到获得锁定</span></div><div class=\"line\">&gt;          <span class=\"comment\"># 否则超时后将返回False</span></div><div class=\"line\">&gt;           threadLock.acquire()</div><div class=\"line\">&gt;           print_time(self.name, self.counter, <span class=\"number\">3</span>)</div><div class=\"line\">&gt;           <span class=\"comment\"># 释放锁</span></div><div class=\"line\">&gt;           threadLock.release()</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print_time</span><span class=\"params\">(threadName, delay, counter)</span>:</span></div><div class=\"line\">&gt;       <span class=\"keyword\">while</span> counter:</div><div class=\"line\">&gt;           time.sleep(delay)</div><div class=\"line\">&gt;           <span class=\"keyword\">print</span> <span class=\"string\">\"%s: %s\"</span> % (threadName, time.ctime(time.time()))</div><div class=\"line\">&gt;           counter -= <span class=\"number\">1</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   threadLock = threading.Lock()</div><div class=\"line\">&gt;   threads = []</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\"># 创建新线程</span></div><div class=\"line\">&gt;   thread1 = myThread(<span class=\"number\">1</span>, <span class=\"string\">\"Thread-1\"</span>, <span class=\"number\">1</span>)</div><div class=\"line\">&gt;   thread2 = myThread(<span class=\"number\">2</span>, <span class=\"string\">\"Thread-2\"</span>, <span class=\"number\">2</span>)</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\"># 开启新线程</span></div><div class=\"line\">&gt;   thread1.start()</div><div class=\"line\">&gt;   thread2.start()</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\"># 添加线程到线程列表</span></div><div class=\"line\">&gt;   threads.append(thread1)</div><div class=\"line\">&gt;   threads.append(thread2)</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\"># 等待所有线程完成</span></div><div class=\"line\">&gt;   <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> threads:</div><div class=\"line\">&gt;       t.join()</div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> <span class=\"string\">\"Exiting Main Thread\"</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p><strong>线程优先级队列</strong></p>\n<p>Python的Queue模块提供了FIFO和LIFO队列，Queue、LifoQueue和优先级PriorityQueue。</p>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p>Python其他特性</p>\n<blockquote>\n<ul>\n<li>xml解析</li>\n</ul>\n<p>xml解析通用的有<code>SAX</code>、<code>DOM</code>、python有<code>ElementTree</code></p>\n<p><em>一般编程中都很少用SAX和DOM解析，都有自己平台的优化解析方式。</em></p>\n<p><strong>注：</strong>因DOM需要将XML数据映射到内存中的树，一是比较慢，二是比较耗内存，而SAX流式读取XML文件，比较快，占用内存少，但需要用户实现回调函数（handler）。</p>\n<ul>\n<li><p>GUI编程</p>\n<p>python提供多种图形界面库<code>Thinter</code>、<code>wxPython</code>、<code>Jython</code></p>\n<p><strong>Tkinter</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"keyword\">import</span> Tkinter</div><div class=\"line\">&gt;   top = Tkinter.Tk()</div><div class=\"line\">&gt;   <span class=\"comment\">#进入消息循环</span></div><div class=\"line\">&gt;   top.mainloog()</div><div class=\"line\">&gt;   <span class=\"comment\">#如上代码执行，可产生小窗口界面了。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>  Tkinter包含常用的窗口控件，以及属性和方法，使用时候可差用api。</p>\n<ul>\n<li><p>JSON</p>\n<p>python使用Demjson，<code>decode</code>和<code>encode</code>解码编码。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   demjson.encode(self,obj,nest_level=<span class=\"number\">0</span>)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>  示例：(构建json)</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt;   <span class=\"keyword\">import</span> demjson</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   data = [&#123;<span class=\"string\">'a'</span>:<span class=\"number\">1</span>,<span class=\"string\">'b'</span>:<span class=\"number\">2</span>,<span class=\"string\">'c'</span>:<span class=\"number\">3</span>,<span class=\"string\">'d'</span>:<span class=\"number\">4</span>,<span class=\"string\">'e'</span>:<span class=\"number\">5</span>&#125;]</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   json = demjson.encode(data)</div><div class=\"line\">&gt;   print(json)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>  解析Json</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   demjson.decode(self,txt)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt;   <span class=\"keyword\">import</span> demjson</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   json = <span class=\"string\">'&#123;\"a\":1,\"b\":2,\"c\":3,\"d\":4,\"e\":5&#125;'</span>;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   text = demjson.decode(json)</div><div class=\"line\">&gt;   print(text)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n<p><strong>初次接触Python，笔记难免简单初级，仅供自己学习只用，希望也对网友有所益处。</strong></p>\n"},{"title":"Android图像与动画","date":"2017-03-27T08:57:00.000Z","author":"冰路梦","_content":"## 第四篇、Android图像与动画\n[TOC]\n### 第1章、高效显示Bitmap\n\n本节主要介绍加载处理Bitmap对象常用方法，以避免UI线程阻塞与OOM问题。由于Android设备\n\n- Android单个应用至少16M内存，不同分辨率屏幕的设备要求不同。`国内自定义ROM限制也有差异。`\n- Bitmap消耗内存，一张5M的高清照片，使用ARGB_8888方式加载Bitmap，则需要19M左右的内存。\n- Android应用一般加载多个Bitmap，预先加载以备显示。\n\n所以如上三条，需要我们对Bitmap做优化处理。\n\n#### 1、高效加载大图（Loading Large Bitmap Efficiently）\n\n本节介绍加载缩小的图片，来避免过多消耗内存，原始大小的图片和超过控件大小和设备分辨率的图片加载，在显示上并无意义，反而带来内存风险。\n\n- ##### 读取位图尺寸与类型（Read Bitmap Dimensions and Type）\n\n  `BitmapFactory`提供了不同类型的decode方法，配有`BitmapFactory.Options`选项来标记解码方式。\n\n  设置`inJustDecodeBounds=true`属性可以避免解码时候分配内存。其返回`null`的Bitmap，但是可以用于获取长宽和类型。\n\n  ```java\n  BitmapFactory.Options options = new BitmapFactory.Options();\n  options.inJustDecodeBounds = true;//不加载分配内存\n  BitmapFactory.decodeResource(getResource(),R.drawable.iclauncher,options);\n  //图像长宽\n  int imgWidth = options.outWidth;\n  int imgHeight = options.outHeight;\n  String imgType = options.outMimeType;//图像类型\n  ```\n\n  *一般需要在加载图片前判断图片大小，避免OOM，除非你确保不会OOM*\n\n- ##### 加载缩小版图片到内存（Load a Scale Down Version into Memory）\n\n  加载缩小版图片也需要考虑一些因素：\n\n  - 评估完整图片加载需耗内存。\n  - 加载图片可能涉及到的其他内存需求。\n  - 显示图片的控件尺寸。\n  - 设备屏幕的密度和大小。\n\n  BitmapFactory.Options中设置`inSampleSize`来确定缩放比。\n\n  ```java\n  /**\n   * 计算图像缩放比\n   */\n  public static int calculateInSampleSize(\n              BitmapFactory.Options options, int reqWidth, int reqHeight) {\n      // 获取图像的原始大小\n      final int height = options.outHeight;\n      final int width = options.outWidth;\n      int inSampleSize = 1;\n      if (height > reqHeight || width > reqWidth) {\n          final int halfHeight = height / 2;\n          final int halfWidth = width / 2;\n          //保持宽高大于请求的宽高，缩放比为计算值的2倍\n          while ((halfHeight / inSampleSize) > reqHeight\n                  && (halfWidth / inSampleSize) > reqWidth) {\n              inSampleSize *= 2;\n          }\n      }\n      return inSampleSize;\n  }\n  ```\n\n  ==*设置缩放比`inSampleSize`为2的倍数，是因为解码器对非2倍数会就近处理为2的倍数。*==\n\n  先设置`inJustDecodeBounds=true`来设置`inSampleSize`之后在设置`inJustDecodeBounds=false`加载缩放后的Bitmap\n\n  ```java\n  mImageView.setImageBitmap(decodeSampleBitmapFromResource(getResource(),R.drawable.iclauncher,100,100));//加载大小100长宽的图片\n  /*\n   * 根据控件大小，加载缩放图片\n   */\n  public static Bitmap decodeSampleBitmapFromResource(Resource res,int resId,int reqWidth,int reqHeight){\n    //先空加载图片，计算缩放比\n    final BitmapFactory.Options options = new BitmapFactory.Options();\n    options.inJustDecodeBounds = true;\n    BitmapFactory.decodeResource(res,resId,options);\n    options.inSampleSize = calculateInSampleSize(options,reqWidth,reqHeight);\n    //解码缩放后的图像\n    options.inJustDecodeBounds = false;\n    returen BitmapFactory.decodeResource(res,resId,options);\n  }\n  ```\n\n#### 2、非UI线程处理Bitmap\n\n上一节仅仅介绍了如何缩放加载图像，若是获取网络图像或者其他储存设备，则应避免在UI线程执行加载操作，避免ANR。\n\n- ##### 使用AsyncTask（Use a AsyncTask）\n\n  AsyncTask是Android提供的一个封装好的后台线程操作方式，并可以实现前后台信息传递。\n\n  ```java\n  class BitmapWorkerTask extends AsyncTask{\n    private final WeakReference imageViewReference;\n    private int data = 0;\n    public BitmapWorkerTask(ImageView imageView){\n      //使用弱引用，确保图像会被及时的GC回收。\n      imageViewReference = new WeakReference(imageView);\n    }\n    //后台解码图片\n    @override\n    protected Bitmap doInBackground(Integer... params){\n      data = params[0];\n      return decodeSampleBitmapFromResource(getResource(),data,100,100);\n    }\n    //完成解码后，加载图像到控件显示\n    //要判断引用对象是否还存在，控件是否存在等，避免空指针。\n    @override\n    protected void onPostExecute(Bitmap bitmap){\n      if(imageViewReference !=null && bitmap !=null){\n        final ImageView imageView = imageViewReference.get();\n        if(imageView!=null){\n          imageView.setImageBitmap(bitmap);\n        }\n      }\n    }\n  }\n  //创建一个任务task，执行异步加载\n  public void loadBitmap(int resId,ImageView imageView){\n    BitmapWorkerTask task = new BitmapWorkerTask(imageView);\n    task.execute(resId);//执行Task\n  }\n  ```\n\n- ##### 处理并发问题（Handle Concurrency）\n\n  List View和Grid View控件显示多个位图结合AsyncTask使用时会产生并发问题。每个item都执行task的话，启动顺序，任务顺序都很难保持一致性。为此可以使用Image View来保存最近使用的AsyncTask引用，创建一个专用的`Drawable`子类来存储任务引用，如`BitmapDrawable`,并提供占位图像:\n\n  ```java\n  static class AsyncDrawable extends BitmapDrawable{\n    private final WeakReference bitmapWorkerTaskReference;\n    public AsyncDrawable(Resource res,Bitmap bitmap,BitmapWorkerTask bitmapWorkerTask){\n      super(res,bitmap);\n      //初始化弱引用对象\n      bitmapWorkerTaskReference = new BitmapWorkerTaskReference(bitmapWorkerTask);\n    }\n    //对外公开task的引用。\n    public BitmapWorkerTask getBitmapWorkerTask(){\n      return bitmapWorkerTaskReference.get();\n    }\n  }\n  ```\n\n  在执行BitmapWorkerTask之前需要创建AsyncDrawable并绑定到ImageView上：\n\n  ```java\n  public void loadBitmap(int resId,ImageView imageView){\n    if(cancelPotentialWork(resId,imageView)){\n      final BitmapWorkerTask task = new BitmapWorkerTask(imageView);\n      final AsyncDrawable asyncDrawable = new \t\t\t\t\t\t\t   AsyncDrawable(getResource(),mPlaceHolderBitmap,task);\n      imageView.setImageDrawable(asyncDrawable);\n      task.execute(resId);\n    }\n  }\n  //该方法用于检测是否有已存在的任务在执行该Image View控件的请求。\n  public static boolean cancelPotentialWork(int data, ImageView imageView) {\n  \t//检索AsyncTask是否已经被分配到指定的ImageView控件。\n    final BitmapWorkerTask bitmapWorkerTask = getBitmapWorkerTask(imageView);\n      if (bitmapWorkerTask != null) {\n          final int bitmapData = bitmapWorkerTask.data;\n          if (bitmapData == 0 || bitmapData != data) {\n              //取消先前的任务\n              bitmapWorkerTask.cancel(true);\n          } else {\n              //同样的请求任务已经在执行\n              return false;\n          }\n      }\n      //没有符合当下请求的任务绑定在ImageView控件上，或者之前的取消了。\n      return true;\n  }\n  //获取控件相关的task\n  private static BitmapWorkerTask getBitmapWorkerTask(ImageView imageView) {\n     if (imageView != null) {\n         final Drawable drawable = imageView.getDrawable();\n         if (drawable instanceof AsyncDrawable) {\n             final AsyncDrawable asyncDrawable = (AsyncDrawable) drawable;\n           //获取AsyncDrawable中定义的绑定task引用\n             return asyncDrawable.getBitmapWorkerTask();\n         }\n      }\n      return null;\n  }\n  ```\n\n  完成异步task的绑定后，在`onPostExecute()`中更新view\n\n  ```java\n  class BitmapWorkerTask extends AsyncTask {\n      ...\n\n      @Override\n      protected void onPostExecute(Bitmap bitmap) {\n          if (isCancelled()) {\n              bitmap = null;\n          }\n  \t\t//更新View前，判断资源和控件的非空\n          if (imageViewReference != null && bitmap != null) {\n              final ImageView imageView = imageViewReference.get();\n              final BitmapWorkerTask bitmapWorkerTask =\n                      getBitmapWorkerTask(imageView);\n              if (this == bitmapWorkerTask && imageView != null) {\n                  imageView.setImageBitmap(bitmap);\n              }\n          }\n      }\n  }\n  ```\n\n  应用与listView和GridView等，循环利用子视图的控件，只要在设置ImageView的地方调用loadBitmap方法即可。如GridView的`getView()`中。\n\n#### 3、缓存Bitmap\n\n在List View或GridView控件场景中，可能需要大量图片展示，而且存在图片复用现象，此时就需要用到缓存，以提高效能和用户体验。\n\n- ##### 使用内存缓存（Use a Memory Cache）\n\n  使用内存缓存实现以_空间换时间_，提高速度。`LruCache`类用于缓存Bitmaps，其使用强引用`LinkedHashMap`保存最近引用对象，在缓存超出设置大小时候剔除最近最少使用的对象。\n\n  > **注意：**以前多使用`软引用`或`弱引用`但是现在并不推荐，由于Android版本的GC频率增高，引用效率也大为降低。\n\n  为LruCache设置合适的大小，考虑一下因素：\n\n  - 应用剩余可用内存大小\n  - 同时显示图像数量，以及预加载图片数量\n  - 设备屏幕尺寸与密度\n  - 图像尺寸、类型\n  - 图像被访问的频率高低\n  - 显示图像的质量和数量的平衡\n\n  以上因素都需要具体分析，如下创建一个Bitmap的LruCache的示例：\n\n  ```java\n  private LruCache<String, Bitmap> mMemoryCache;\n\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n      ...\n      // 获取应用VM最大可用内存\n      final int maxMemory = (int) (Runtime.getRuntime().maxMemory() / 1024);\n\n      // 使用可用内存的1/8来缓存\n      final int cacheSize = maxMemory / 8;\n  \t//建立LruCache缓存对象\n      mMemoryCache = new LruCache<String, Bitmap>(cacheSize) {\n          @Override\n          protected int sizeOf(String key, Bitmap bitmap) {\n              // 缓存以KB为单位计算，而非对象item个数\n              return bitmap.getByteCount() / 1024;\n          }\n      };\n      ...\n  }\n  //加入bitmap对象到lrucache\n  public void addBitmapToMemoryCache(String key, Bitmap bitmap) {\n      if (getBitmapFromMemCache(key) == null) {\n          mMemoryCache.put(key, bitmap);\n      }\n  }\n  //从lrucache获取bitmap缓存\n  public Bitmap getBitmapFromMemCache(String key) {\n      return mMemoryCache.get(key);\n  }\n  ```\n\n  > **Note:**在上面的例子中, 有1/8的内存空间被用作缓存。 这意味着在常见的设备上（hdpi），最少大概有4MB的缓存空间（32/8）。如果一个填满图片的GridView控件放置在800x480像素的手机屏幕上，大概会花费1.5MB的缓存空间（800x480x4 bytes），因此缓存的容量大概可以缓存2.5页的图片内容。\n\n  加入缓存的bitmap亦是已经优化过的图像：\n\n  ```java\n  class BitmapWorkerTask extends AsyncTask<Integer, Void, Bitmap> {\n      ...\n      //异步线程解码图像\n      @Override\n      protected Bitmap doInBackground(Integer... params) {\n        //缩放图像\n          final Bitmap bitmap = decodeSampledBitmapFromResource(\n                  getResources(), params[0], 100, 100));\n        //添加到lrucache缓存\n          addBitmapToMemoryCache(String.valueOf(params[0]), bitmap);\n          return bitmap;\n      }\n      ...\n  }\n  ```\n\n- ##### 使用磁盘缓存（Use a Disk Cache）\n\n  使用内存作为缓存虽然有较高的速度，但也可能因为应用被后台化，系统资源不足，亦或者过于大量的图像加载，而导致效果不佳，体验不好。因而可以使用磁盘缓存，需要异步处理，避免ANR。\n\n  > **Note:**如果图像过于频繁访问，可以使用`ContentProvider`更为合适。\n\n  如下示例`DiskLruCache`为Android源码基础上优化的：\n\n  ```java\n  private DiskLruCache mDiskLruCache;//DiskLruCache对象\n  private final Object mDiskCacheLock = new Object();//常量化同步锁\n  private boolean mDiskCacheStarting = true;//是否开启缓存\n  private static final int DISK_CACHE_SIZE = 1024 * 1024 * 10; // 10MB\n  private static final String DISK_CACHE_SUBDIR = \"thumbnails\";//缓存文件夹\n\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n      ...\n      // 初始化内存缓存\n      ...\n      // 后台线程初始化磁盘缓存\n      File cacheDir = getDiskCacheDir(this, DISK_CACHE_SUBDIR);//从磁盘加载出缓存文件\n      new InitDiskCacheTask().execute(cacheDir);//异步开始加载到缓存文件\n      ...\n  }\n  //内部类，初始化磁盘加载task\n  class InitDiskCacheTask extends AsyncTask<File, Void, Void> {\n      @Override\n      protected Void doInBackground(File... params) {\n          synchronized (mDiskCacheLock) {//同步锁\n              File cacheDir = params[0];//缓存文件\n              mDiskLruCache = DiskLruCache.open(cacheDir, DISK_CACHE_SIZE);\n              mDiskCacheStarting = false; //完成初始化磁盘加载\n              mDiskCacheLock.notifyAll(); //唤起其他休眠线程\n          }\n          return null;\n      }\n  }\n  //异步加载图片的task，\n  class BitmapWorkerTask extends AsyncTask<Integer, Void, Bitmap> {\n      ...\n      // 解码图像\n      @Override\n      protected Bitmap doInBackground(Integer... params) {\n          final String imageKey = String.valueOf(params[0]);\n\n          //后台线程检查磁盘缓存\n          Bitmap bitmap = getBitmapFromDiskCache(imageKey);\n\n          if (bitmap == null) { // 磁盘缓存没有所需图像\n              // 正常途径加载\n              final Bitmap bitmap = decodeSampledBitmapFromResource(\n                      getResources(), params[0], 100, 100));\n          }\n\n          //并将优化后的图像加入磁盘缓存\n          addBitmapToCache(imageKey, bitmap);\n\n          return bitmap;\n      }\n      ...\n  }\n  //加入磁盘缓存\n  public void addBitmapToCache(String key, Bitmap bitmap) {\n      // 先加入内存缓存\n      if (getBitmapFromMemCache(key) == null) {\n          mMemoryCache.put(key, bitmap);\n      }\n\n      // 然后加入到磁盘缓存\n      synchronized (mDiskCacheLock) {\n          if (mDiskLruCache != null && mDiskLruCache.get(key) == null) {\n              mDiskLruCache.put(key, bitmap);\n          }\n      }\n  }\n  //从磁盘缓存获取图像\n  public Bitmap getBitmapFromDiskCache(String key) {\n      synchronized (mDiskCacheLock) {//同步获取锁\n          // 等待后台线程获取磁盘缓存\n          while (mDiskCacheStarting) {\n              try {\n                  mDiskCacheLock.wait();\n              } catch (InterruptedException e) {}\n          }\n          if (mDiskLruCache != null) {\n              return mDiskLruCache.get(key);\n          }\n      }\n      return null;\n  }\n\n  // 为特定的app创建唯一的子文件夹，优先使用外部sd卡，若没有，就使用内部sd卡\n  public static File getDiskCacheDir(Context context, String uniqueName) {\n      // 检查是否有外部存储，否则用内部存储\n      final String cachePath =\n              Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState()) ||\n                      !isExternalStorageRemovable() ? getExternalCacheDir(context).getPath() :\n                              context.getCacheDir().getPath();\n\n      return new File(cachePath + File.separator + uniqueName);\n  }\n  ```\n\n  > **注意：**如上使用==同步锁==是为了防止在后台异步I/O操作时候，错误读取。\n\n  内存缓存检查可以在UI线程操作，而磁盘缓存需要在后台线程。\n\n- ##### 处理配置改变（Handle Configuration Changes）\n\n  Android的配置信息发生变化，Activity可能会随之变化、销毁重建。平滑恢复原有图像，创造良好用户体验，`setRetainInstance(true)`保留的一个`Fragement`实例可以将缓存重新附着与Activity上。\n\n  ```java\n  private LruCache<String, Bitmap> mMemoryCache;\n\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n      ...\n        //RetainFragment\n      RetainFragment retainFragment =\n              RetainFragment.findOrCreateRetainFragment(getFragmentManager());\n    //获取缓存对象  \n    mMemoryCache = retainFragment.mRetainedCache;\n      if (mMemoryCache == null) {\n          mMemoryCache = new LruCache<String, Bitmap>(cacheSize) {\n              ... // 初始化缓存\n          }\n          retainFragment.mRetainedCache = mMemoryCache;\n      }\n      ...\n  }\n  //自定义内部类Fragment，用于存储缓存对象？？\n  class RetainFragment extends Fragment {\n      private static final String TAG = \"RetainFragment\";\n      public LruCache<String, Bitmap> mRetainedCache;\n\n      public RetainFragment() {}\n\n      public static RetainFragment findOrCreateRetainFragment(FragmentManager fm) {\n          RetainFragment fragment = (RetainFragment) fm.findFragmentByTag(TAG);\n          if (fragment == null) {\n              fragment = new RetainFragment();\n              fm.beginTransaction().add(fragment, TAG).commit();\n          }\n          return fragment;\n      }\n\n      @Override\n      public void onCreate(Bundle savedInstanceState) {\n          super.onCreate(savedInstanceState);\n          setRetainInstance(true);\n      }\n  }\n  ```\n\n#### 4、管理Bitmap的内存\n\n关于Bitmap内存管理了解两点：1、Android2.3之后GC回收并发执行，内存不引用，会被立即回收。2、Android3.0以后bitmap引用和数据一同存放在`Dalvik堆`内存中。\n\n- ##### Android2.3以下版本的内存管理\n\n  推荐使用`recycle()`方法，低版本Android单线程GC。使用引用计数法：\n\n  ```java\n  private int mCacheRefCount=0;//引用计数\n  private int mDisplayRefCount = 0;//引用计数\n  ...\n  //通知drawable显示状态发生改变，drawable引用计数来决定引用状态和显示\n  public void setIsDisplayed(boolean isDisplayed) {\n      synchronized (this) {\n          if (isDisplayed) {\n              mDisplayRefCount++;\n              mHasBeenDisplayed = true;\n          } else {\n              mDisplayRefCount--;\n          }\n      }\n      // Check to see if recycle() can be called.\n      checkState();\n  }\n  // Notify the drawable that the cache state has changed.\n  // Keep a count to determine when the drawable is no longer being cached.\n  public void setIsCached(boolean isCached) {\n      synchronized (this) {\n          if (isCached) {\n              mCacheRefCount++;\n          } else {\n              mCacheRefCount--;\n          }\n      }\n      // Check to see if recycle() can be called.\n      checkState();\n  }\n\n  private synchronized void checkState() {\n      // If the drawable cache and display ref counts = 0, and this drawable\n      // has been displayed, then recycle.\n      if (mCacheRefCount <= 0 && mDisplayRefCount <= 0 && mHasBeenDisplayed\n              && hasValidBitmap()) {\n          getBitmap().recycle();\n      }\n  }\n  private synchronized boolean hasValidBitmap() {\n      Bitmap bitmap = getBitmap();\n      return bitmap != null && !bitmap.isRecycled();\n  }\n  ```\n\n- ##### Android3.0以上版本内存管理\n\n  API 11引入`BitmapFactory.Options.inBitmap`使Bitmap在加载时候可以重中已存在的，但是大小一样的位图（< API 19时候）。\n\n- 保存Bitmap以备复用\n\n  android3.0以上，bitmap从L如Cache移除时，Bitmap的软引用会被村房子啊Hashset中，以便`inBitmap`复用。\n\n  ```java\n  Set<SoftReference<Bitmap>> mReusableBitmaps;\n  private LruCache<String, BitmapDrawable> mMemoryCache;\n\n  // If you're running on Honeycomb or newer, create a\n  // synchronized HashSet of references to reusable bitmaps.\n  if (Utils.hasHoneycomb()) {\n      mReusableBitmaps =\n              Collections.synchronizedSet(new HashSet<SoftReference<Bitmap>>());\n  }\n\n  mMemoryCache = new LruCache<String, BitmapDrawable>(mCacheParams.memCacheSize) {\n\n      // Notify the removed entry that is no longer being cached.\n      @Override\n      protected void entryRemoved(boolean evicted, String key,\n              BitmapDrawable oldValue, BitmapDrawable newValue) {\n          if (RecyclingBitmapDrawable.class.isInstance(oldValue)) {\n              // The removed entry is a recycling drawable, so notify it\n              // that it has been removed from the memory cache.\n              ((RecyclingBitmapDrawable) oldValue).setIsCached(false);\n          } else {\n              // The removed entry is a standard BitmapDrawable.\n              if (Utils.hasHoneycomb()) {\n                  // We're running on Honeycomb or later, so add the bitmap\n                  // to a SoftReference set for possible use with inBitmap later.\n                  mReusableBitmaps.add\n                          (new SoftReference<Bitmap>(oldValue.getBitmap()));\n              }\n          }\n      }\n  ....\n  }\n  ```\n\n- ##### 使用已经存在的Bitmap\n\n  ```java\n  public static Bitmap decodeSampledBitmapFromFile(String filename,\n          int reqWidth, int reqHeight, ImageCache cache) {\n\n      final BitmapFactory.Options options = new BitmapFactory.Options();\n      ...\n      BitmapFactory.decodeFile(filename, options);\n      ...\n\n      // If we're running on Honeycomb or newer, try to use inBitmap.\n      if (Utils.hasHoneycomb()) {\n          addInBitmapOptions(options, cache);\n      }\n      ...\n      return BitmapFactory.decodeFile(filename, options);\n  }\n  //查找适合且可复用的bitmap，设置到inBitmap的属性值，\n  private static void addInBitmapOptions(BitmapFactory.Options options,\n          ImageCache cache) {\n      // inBitmap only works with mutable bitmaps, so force the decoder to\n      // return mutable bitmaps.\n      options.inMutable = true;\n\n      if (cache != null) {\n          // Try to find a bitmap to use for inBitmap.\n          Bitmap inBitmap = cache.getBitmapFromReusableSet(options);\n\n          if (inBitmap != null) {\n              // If a suitable bitmap has been found, set it as the value of\n              // inBitmap.\n              options.inBitmap = inBitmap;\n          }\n      }\n  }\n\n  // This method iterates through the reusable bitmaps, looking for one\n  // to use for inBitmap:\n  protected Bitmap getBitmapFromReusableSet(BitmapFactory.Options options) {\n          Bitmap bitmap = null;\n\n      if (mReusableBitmaps != null && !mReusableBitmaps.isEmpty()) {\n          synchronized (mReusableBitmaps) {\n              final Iterator<SoftReference<Bitmap>> iterator\n                      = mReusableBitmaps.iterator();\n              Bitmap item;\n\n              while (iterator.hasNext()) {\n                  item = iterator.next().get();\n\n                  if (null != item && item.isMutable()) {\n                      // Check to see it the item can be used for inBitmap.\n                      if (canUseForInBitmap(item, options)) {\n                          bitmap = item;\n\n                          // Remove from reusable set so it can't be used again.\n                          iterator.remove();\n                          break;\n                      }\n                  } else {\n                      // Remove from the set if the reference has been cleared.\n                      iterator.remove();\n                  }\n              }\n          }\n      }\n      return bitmap;\n  }\n  ```\n\n  判断Bitmap是否符合inBitmap的要求：\n\n  ```java\n  static boolean canUseForInBitmap(\n          Bitmap candidate, BitmapFactory.Options targetOptions) {\n\n      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n          // From Android 4.4 (KitKat) onward we can re-use if the byte size of\n          // the new bitmap is smaller than the reusable bitmap candidate\n          // allocation byte count.\n          int width = targetOptions.outWidth / targetOptions.inSampleSize;\n          int height = targetOptions.outHeight / targetOptions.inSampleSize;\n          int byteCount = width * height * getBytesPerPixel(candidate.getConfig());\n          return byteCount <= candidate.getAllocationByteCount();\n      }\n\n      // On earlier versions, the dimensions must match exactly and the inSampleSize must be 1\n      return candidate.getWidth() == targetOptions.outWidth\n              && candidate.getHeight() == targetOptions.outHeight\n              && targetOptions.inSampleSize == 1;\n  }\n\n  /**\n   * A helper function to return the byte usage per pixel of a bitmap based on its configuration.\n   */\n  static int getBytesPerPixel(Config config) {\n      if (config == Config.ARGB_8888) {\n          return 4;\n      } else if (config == Config.RGB_565) {\n          return 2;\n      } else if (config == Config.ARGB_4444) {\n          return 2;\n      } else if (config == Config.ALPHA_8) {\n          return 1;\n      }\n      return 1;\n  }\n  ```\n\n#### 5、在UI上显示Bitmap\n\n本节学习如何综合使用后台线程与缓存机制，将图像加载到ViewPager或Grid View控件上，并处理并发与配置改变的问题。\n\n- ##### 实现加载图片到View Pager\n\n  `Swipe View Pattern`是滑动显示的设计模型。可通过`PagerAdapter`与`ViewPager`控件实现该效果。而`FragmentStatePagerAdapter`更为合适，因为其能在Fragment状态改变时保存状态值。减少内存消耗。少量图片的话，`PagerAdapter与FragmentPagerAdapter`都可。\n\n  ```java\n  public class ImageDetailActivity extends FragmentActivity {\n      public static final String EXTRA_IMAGE = \"extra_image\";\n\n      private ImagePagerAdapter mAdapter;//adapter\n      private ViewPager mPager;//viewpager\n\n      // 用于传递给viewpager 的adapter的图片数据资源\n      public final static Integer[] imageResIds = new Integer[] {\n              R.drawable.sample_image_1, R.drawable.sample_image_2, R.drawable.sample_image_3,\n              R.drawable.sample_image_4, R.drawable.sample_image_5, R.drawable.sample_image_6,\n              R.drawable.sample_image_7, R.drawable.sample_image_8, R.drawable.sample_image_9};\n\n      @Override\n      public void onCreate(Bundle savedInstanceState) {\n          super.onCreate(savedInstanceState);\n          setContentView(R.layout.image_detail_pager); // 就一个viewpager\n  \t\t//初始化控件，并绑定适配器\n          mAdapter = new ImagePagerAdapter(getSupportFragmentManager(), imageResIds.length);\n          mPager = (ViewPager) findViewById(R.id.pager);\n          mPager.setAdapter(mAdapter);\n      }\n\n      public static class ImagePagerAdapter extends FragmentStatePagerAdapter {\n          private final int mSize;\n  \t\t//\n          public ImagePagerAdapter(FragmentManager fm, int size) {\n              super(fm);\n              mSize = size;\n          }\n\n          @Override\n          public int getCount() {\n              return mSize;\n          }\n  \t\t//返回fragment对象\n          @Override\n          public Fragment getItem(int position) {\n              return ImageDetailFragment.newInstance(position);\n          }\n      }\n  }\n  ```\n\n  Fragment里面包含Image View控件\n\n  ```java\n  public class ImageDetailFragment extends Fragment {\n      private static final String IMAGE_DATA_EXTRA = \"resId\";\n      private int mImageNum;//图像数目\n      private ImageView mImageView;//image view控件\n  \t//构造函数，接收图片数目参数\n      static ImageDetailFragment newInstance(int imageNum) {\n          final ImageDetailFragment f = new ImageDetailFragment();\n          final Bundle args = new Bundle();\n          args.putInt(IMAGE_DATA_EXTRA, imageNum);\n          f.setArguments(args);\n          return f;\n      }\n\n      // Empty constructor, required as per Fragment docs\n      public ImageDetailFragment() {}\n\n      @Override\n      public void onCreate(Bundle savedInstanceState) {\n          super.onCreate(savedInstanceState);\n          mImageNum = getArguments() != null ? getArguments().getInt(IMAGE_DATA_EXTRA) : -1;\n      }\n\n      @Override\n      public View onCreateView(LayoutInflater inflater, ViewGroup container,\n              Bundle savedInstanceState) {\n          // image_detail_fragment.xml contains just an ImageView\n          final View v = inflater.inflate(R.layout.image_detail_fragment, container, false);\n          mImageView = (ImageView) v.findViewById(R.id.imageView);\n          return v;\n      }\n\n      @Override\n      public void onActivityCreated(Bundle savedInstanceState) {\n          super.onActivityCreated(savedInstanceState);\n          final int resId = ImageDetailActivity.imageResIds[mImageNum];\n          mImageView.setImageResource(resId); // Load image into ImageView\n      }\n  }\n  ```\n\n  ==**如上方式，可能会阻塞UI线程**==，改用AsyncTask最好：\n\n  ```java\n  public class ImageDetailActivity extends FragmentActivity {\n      ...\n  \t//后台加载图片\n      public void loadBitmap(int resId, ImageView imageView) {\n          mImageView.setImageResource(R.drawable.image_placeholder);\n        //后台执行\n          BitmapWorkerTask task = new BitmapWorkerTask(mImageView);\n          task.execute(resId);\n      }\n\n      ... // include BitmapWorkerTask class\n  }\n\n  public class ImageDetailFragment extends Fragment {\n      ...\n\n      @Override\n      public void onActivityCreated(Bundle savedInstanceState) {\n          super.onActivityCreated(savedInstanceState);\n          if (ImageDetailActivity.class.isInstance(getActivity())) {\n              final int resId = ImageDetailActivity.imageResIds[mImageNum];\n              //调用上面的后台加载图片\n              ((ImageDetailActivity) getActivity()).loadBitmap(resId, mImageView);\n          }\n      }\n  }\n  ```\n\n  后台的操作可以更为合理，加载并缓存图像\n\n  ```java\n  public class ImageDetailActivity extends FragmentActivity {\n      ...\n      private LruCache mMemoryCache;\n      @Override\n      public void onCreate(Bundle savedInstanceState) {\n          ...\n          // initialize LruCache as per Use a Memory Cache section\n      }\n      public void loadBitmap(int resId, ImageView imageView) {\n          final String imageKey = String.valueOf(resId);\n\n          final Bitmap bitmap = mMemoryCache.get(imageKey);\n          if (bitmap != null) {\n              mImageView.setImageBitmap(bitmap);\n          } else {\n              mImageView.setImageResource(R.drawable.image_placeholder);\n              BitmapWorkerTask task = new BitmapWorkerTask(mImageView);\n              task.execute(resId);\n          }\n      }\n      ... // include updated BitmapWorkerTask from Use a Memory Cache section\n  }\n  ```\n\n- ##### 实现加载图片到GridView\n\n  如下场景，Fragment内置Grid View，item是Image View：\n\n  ```java\n  public class ImageGridFragment extends Fragment implements AdapterView.OnItemClickListener {\n      private ImageAdapter mAdapter;\n\n      //静态加载的图片资源，用于适配器\n      public final static Integer[] imageResIds = new Integer[] {\n              R.drawable.sample_image_1, R.drawable.sample_image_2, R.drawable.sample_image_3,\n              R.drawable.sample_image_4, R.drawable.sample_image_5, R.drawable.sample_image_6,\n              R.drawable.sample_image_7, R.drawable.sample_image_8, R.drawable.sample_image_9};\n\n      // Empty constructor as per Fragment docs\n      public ImageGridFragment() {}\n\n      @Override\n      public void onCreate(Bundle savedInstanceState) {\n          super.onCreate(savedInstanceState);\n          mAdapter = new ImageAdapter(getActivity());\n      }\n\n      @Override\n      public View onCreateView(\n              LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        //初始化控件，并绑定适配器，注册监听  \n        final View v = inflater.inflate(R.layout.image_grid_fragment, container, false);\n          final GridView mGridView = (GridView) v.findViewById(R.id.gridView);\n          mGridView.setAdapter(mAdapter);\n          mGridView.setOnItemClickListener(this);\n          return v;\n      }\n\n      @Override\n      public void onItemClick(AdapterView parent, View v, int position, long id) {\n          final Intent i = new Intent(getActivity(), ImageDetailActivity.class);\n          i.putExtra(ImageDetailActivity.EXTRA_IMAGE, position);\n          startActivity(i);\n      }\n\n      private class ImageAdapter extends BaseAdapter {\n          private final Context mContext;\n\n          public ImageAdapter(Context context) {\n              super();\n              mContext = context;\n          }\n\n          @Override\n          public int getCount() {\n              return imageResIds.length;\n          }\n\n          @Override\n          public Object getItem(int position) {\n              return imageResIds[position];\n          }\n\n          @Override\n          public long getItemId(int position) {\n              return position;\n          }\n\n          @Override\n          public View getView(int position, View convertView, ViewGroup container) {\n              ImageView imageView;\n              if (convertView == null) { // 判断是否是循环复用的item view，不是的话，需要初始化一些属性。\n                  imageView = new ImageView(mContext);\n                  imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);\n                  imageView.setLayoutParams(new GridView.LayoutParams(\n                          LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n              } else {\n                  imageView = (ImageView) convertView;\n              }\n          //请注意下面的代码，如此可能会耗时，阻塞UI\n          imageView.setImageResource(imageResIds[position]); // Load image into ImageView\n          return imageView;\n      }\n  }\n  ```\n\n  考虑UI的可能阻塞，以及GridView引起的并发问题，代码优化如下：\n\n  ```java\n  public class ImageGridFragment extends Fragment implements AdapterView.OnItemClickListener {\n      ...\n\n      private class ImageAdapter extends BaseAdapter {\n          ...\n\n          @Override\n          public View getView(int position, View convertView, ViewGroup container) {\n              ...\n              loadBitmap(imageResIds[position], imageView)\n              return imageView;\n          }\n      }\n  \t//异步加载图像\n      public void loadBitmap(int resId, ImageView imageView) {\n          if (cancelPotentialWork(resId, imageView)) {\n              final BitmapWorkerTask task = new BitmapWorkerTask(imageView);\n              final AsyncDrawable asyncDrawable =\n                      new AsyncDrawable(getResources(), mPlaceHolderBitmap, task);\n              imageView.setImageDrawable(asyncDrawable);\n              task.execute(resId);\n          }\n      }\n  \t//用于绑定到imageView的drawable\n      static class AsyncDrawable extends BitmapDrawable {\n          private final WeakReference bitmapWorkerTaskReference;\n\n          public AsyncDrawable(Resources res, Bitmap bitmap,\n                  BitmapWorkerTask bitmapWorkerTask) {\n              super(res, bitmap);\n              bitmapWorkerTaskReference =\n                  new WeakReference(bitmapWorkerTask);\n          }\n\n          public BitmapWorkerTask getBitmapWorkerTask() {\n              return bitmapWorkerTaskReference.get();\n          }\n      }\n  \t//判断imageview是否已经有加载图像的task\n      public static boolean cancelPotentialWork(int data, ImageView imageView) {\n          final BitmapWorkerTask bitmapWorkerTask = getBitmapWorkerTask(imageView);\n\n          if (bitmapWorkerTask != null) {\n              final int bitmapData = bitmapWorkerTask.data;\n              if (bitmapData != data) {\n                  // Cancel previous task\n                  bitmapWorkerTask.cancel(true);\n              } else {\n                  // The same work is already in progress\n                  return false;\n              }\n          }\n          // No task associated with the ImageView, or an existing task was cancelled\n          return true;\n      }\n  \t//获取图像加载task\n      private static BitmapWorkerTask getBitmapWorkerTask(ImageView imageView) {\n         if (imageView != null) {\n             final Drawable drawable = imageView.getDrawable();\n             if (drawable instanceof AsyncDrawable) {\n                 final AsyncDrawable asyncDrawable = (AsyncDrawable) drawable;\n                 return asyncDrawable.getBitmapWorkerTask();\n             }\n          }\n          return null;\n      }\n\n      ... // include updated BitmapWorkerTask class\n  ```\n\n### 2、使用OpenGL ES显示图像\n\nAndroid平台提供了OpenGL ES接口，帮助我们实现更为丰富的图像显示效果。本章记述OpenGL构建应用的基础知识，包括配置、绘制对象、移动图形以及响应事件。\n\n**注意，不要混用OpenGL ES 1.x版和2.x版本的接口，因为并不通用。**\n\n#### 1、建立OpenGL ES的环境\n\n在应用中使用OpenGL ES来绘制图像，需要给它一个容器。通常实现`GLSurfaceView`做容器和`GLSurfaceView.Renderer`类来控制绘制。`GLSurfaceView`一般用于全屏或者接近全屏的View绘制，若是小范围，可以用`TextureView`。亦或者自定义View继承SurfaceView，但是会费事。\n\n- ##### 在Manifest中声明使用OpenGL ES\n\n  ```xml\n  <uses-feature android.glEsVersion=\"0x00020000\" android.required=\"true\"/>\n  ```\n\n  如果使用图像纹理压缩，则必须在清单中声明支持的压缩格式：\n\n  ```xml\n  <supports-gl-texture android:name=\"GL_OES_compressed_ETC1_RGB8_texture\"/>\n  <supports-gl-texture android:name=\"GL_OES_compressed_paletted_texture\"/>\n  ...\n  ```\n\n  使用OpenGL ES的App可以Activity中使用GLSurfaceView布局。\n\n  ```java\n  //要求api>=8\n  public class OpenGLES20Activity extends Activity {\n\n      private GLSurfaceView mGLView;\n\n      @Override\n      public void onCreate(Bundle savedInstanceState) {\n          super.onCreate(savedInstanceState);\n  \t\t//创建GLSurfaceView对象，设置为Activity布局。\n          mGLView = new MyGLSurfaceView(this);\n          setContentView(mGLView);\n      }\n  }\n  ```\n- ##### 构建一个GLSurfaceView对象\n    GLSurfaceView是一个特殊的view，用于绘制OpenGL ES图像的一个容器。其内部类GLSurfaceView.Renderer用于控制绘制。\n    一般需要继承`GLSurfaceView`来用于自主控制各类触控事件。\n    ```java\n    class MyGLSurfaceView extends GLSurfaceView {\n\n        private final MyGLRenderer mRenderer;\n\n        public MyGLSurfaceView(Context context){\n            super(context);\n\n            // Create an OpenGL ES 2.0 context\n            setEGLContextClientVersion(2);\n\n            mRenderer = new MyGLRenderer();\n\n            // Set the Renderer for drawing on the GLSurfaceView\n            setRenderer(mRenderer);\n            // Render the view only when there is a change in the drawing data\n            //设置此属性的话，除非调用requestRender()，否则GLSurfaceView不会刷新。只当有图像变化才会刷新。\n            setRenderMode(GLSurfaceView.RENDERMODE_WHEN_DIRTY);\n        }\n    }\n    ```\n- ##### 构建一个渲染类\n    `GLSurfaceView.Renderer`被称为渲染器，控制图像绘制。Android可调用：\n\n    - onSurfaceCreated();调用一次，用于创建OpenGL ES环境\n    - onDrawFrame();每次重绘View时调用。\n    - onSurfaceChanged();View的几何形态变化时调用。\n\n    示例：\n    ```java\n    public class MyGLRenderer implements GLSurfaceView.Renderer {\n\n        public void onSurfaceCreated(GL10 unused, EGLConfig config) {\n            // 设置背景框架颜色，此处为黑色，ARGB值\n            GLES20.glClearColor(0.0f, 0.0f, 0.0f, 1.0f);\n        }\n\n        public void onDrawFrame(GL10 unused) {\n            // 重绘背景色\n            GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT);\n        }\n\n        public void onSurfaceChanged(GL10 unused, int width, int height) {\n            GLES20.glViewport(0, 0, width, height);\n        }\n    }\n    ```\n#### 2、定义shapes\n了解了OpenGL ES的基本概念后，便可以学习如何绘制基本图形。\n- 定义一个三角形\n    OpenGL ES允许我们使用三维空间坐标来绘制图形，通常会定义float坐标数组，为了高效此处使用了\n    ByteBuffer：\n    ```java\n    public class Triangle {\n\n        private FloatBuffer vertexBuffer;//浮点数组\n\n        // 数组中含有的坐标点数\n        static final int COORDS_PER_VERTEX = 3;\n        static float triangleCoords[] = {   //坐标点逆时针顺序\n                0.0f,  0.622008459f, 0.0f, // 顶点\n                -0.5f, -0.311004243f, 0.0f, // 左下角\n                0.5f, -0.311004243f, 0.0f  //右下角\n        };\n\n        //设置RGB，Alpha\n        float color[] = { 0.63671875f, 0.76953125f, 0.22265625f, 1.0f };\n\n        public Triangle() {\n            // initialize vertex byte buffer for shape coordinates\n            ByteBuffer bb = ByteBuffer.allocateDirect(\n                    // (number of coordinate values * 4 bytes per float)\n                    triangleCoords.length * 4);\n            // use the device hardware's native byte order\n            bb.order(ByteOrder.nativeOrder());\n\n            // create a floating point buffer from the ByteBuffer\n            vertexBuffer = bb.asFloatBuffer();\n            // add the coordinates to the FloatBuffer\n            vertexBuffer.put(triangleCoords);\n            // set the buffer to read the first coordinate\n            vertexBuffer.position(0);\n        }\n    }\n    ```\n    默认情况下，OpenGL ES会有一个[0,0,0]的三维坐标系。更多的需要参考OpenGL手册。\n- 定义一个矩形\n    如下示例演示通过定义两个三角形来实现一个矩形。\n    ![矩形](第四篇、Android图像与动画/ccw-square.png)\n      ```java\n      //绘制两个三角形，所以使用一个绘制列表来通知OpenGL如何绘制顶点。\n      public class Square {\n\n          private FloatBuffer vertexBuffer;\n          private ShortBuffer drawListBuffer;\n\n          // number of coordinates per vertex in this array\n          static final int COORDS_PER_VERTEX = 3;\n          static float squareCoords[] = {\n                  -0.5f,  0.5f, 0.0f,   // top left\n                  -0.5f, -0.5f, 0.0f,   // bottom left\n                  0.5f, -0.5f, 0.0f,   // bottom right\n                  0.5f,  0.5f, 0.0f }; // top right\n\n          private short drawOrder[] = { 0, 1, 2, 0, 2, 3 }; // order to draw vertices\n\n          public Square() {\n              // initialize vertex byte buffer for shape coordinates\n              ByteBuffer bb = ByteBuffer.allocateDirect(\n              // (# of coordinate values * 4 bytes per float)\n                      squareCoords.length * 4);\n              bb.order(ByteOrder.nativeOrder());\n              vertexBuffer = bb.asFloatBuffer();\n              vertexBuffer.put(squareCoords);\n              vertexBuffer.position(0);\n\n              // initialize byte buffer for the draw list\n              ByteBuffer dlb = ByteBuffer.allocateDirect(\n              // (# of coordinate values * 2 bytes per short)\n                      drawOrder.length * 2);\n              dlb.order(ByteOrder.nativeOrder());\n              drawListBuffer = dlb.asShortBuffer();\n              drawListBuffer.put(drawOrder);\n              drawListBuffer.position(0);\n          }\n      }\n      ```\n#### 3、绘制shapes\n\n如上小节只是介绍了如何定义一个shape图形，本节将介绍如何绘制出需要的图形。出于内存和效率考虑，\n除非加载的图形变化，一般都在`onSurfaceCreated()`中初始化shape图形。\n- ##### 初始化图形\n    ```java\n    public class MyGLRenderer implements GLSurfaceView.Renderer {\n\n        ...\n        private Triangle mTriangle;\n        private Square   mSquare;\n\n        public void onSurfaceCreated(GL10 unused, EGLConfig config) {\n            ...\n\n            // initialize a triangle\n            mTriangle = new Triangle();\n            // initialize a square\n            mSquare = new Square();\n        }\n        ...\n    }\n    ```\n\n    使用OpenGL ES 绘制一个定义好的图形，需要如下步骤：\n\n    - 顶点着色器（Vertex Shader）：用于渲染顶点的OpenGL ES 代码\n    - 片段着色器（Fragment Shader）：使用颜色和纹理渲染图形表面的OpenGL ES 代码\n    - 程式（Program）： OpenGL ES对象，包含各类着色器等。\n\n    示例:\n    ```java\n    private final String vertexShaderCode =\n        \"attribute vec4 vPosition;\" +\n        \"void main() {\" +\n        \"  gl_Position = vPosition;\" +\n        \"}\";\n\n    private final String fragmentShaderCode =\n        \"precision mediump float;\" +\n        \"uniform vec4 vColor;\" +\n        \"void main() {\" +\n        \"  gl_FragColor = vColor;\" +\n        \"}\";\n\n    ...\n    ```\n    着色器包含OpenGL Shading Language（GLSL）代码，需要先编译，\n    ```java\n    public static int loadShader(int type, String shaderCode){\n\n        // create a vertex shader type (GLES20.GL_VERTEX_SHADER)\n        // or a fragment shader type (GLES20.GL_FRAGMENT_SHADER)\n        int shader = GLES20.glCreateShader(type);\n\n        // add the source code to the shader and compile it\n        GLES20.glShaderSource(shader, shaderCode);\n        GLES20.glCompileShader(shader);\n\n        return shader;\n    }\n    ```\n- ##### 画图\n    为了绘制你的图形，你必须编译着色器代码，将它们添加至一个OpenGL ES Program对象中，然后执行链接。\n    在你的绘制对象的构造函数里做这些事情，这样上述步骤就只用执行一次。\n\n    > Note：编译OpenGL ES着色器及链接操作对于CPU周期和处理时间而言，消耗是巨大的，所以你应该避免重复执行这些事情。\n    > 如果在执行期间不知道着色器的内容，那么你应该在构建你的应用时，确保它们只被创建了一次，并且缓存以备后续使用。\n\n    ```java\n    public class Triangle() {\n        ...\n\n         private final int mProgram;\n\n        public Triangle() {\n            ...\n\n            int vertexShader = MyGLRenderer.loadShader(GLES20.GL_VERTEX_SHADER,\n                                                vertexShaderCode);\n            int fragmentShader = MyGLRenderer.loadShader(GLES20.GL_FRAGMENT_SHADER,\n                                                fragmentShaderCode);\n\n            // create empty OpenGL ES Program\n            mProgram = GLES20.glCreateProgram();\n\n            // add the vertex shader to program\n            GLES20.glAttachShader(mProgram, vertexShader);\n            // add the fragment shader to program\n            GLES20.glAttachShader(mProgram, fragmentShader);\n\n            // creates OpenGL ES program executables\n            GLES20.glLinkProgram(mProgram);\n        }\n    }\n    ```\n    绘制属性会根据图形而变化，就需要将变化逻辑一同写入绘制参数，\n    ```java\n    private int mPositionHandle;\n    private int mColorHandle;\n\n    private final int vertexCount = triangleCoords.length / COORDS_PER_VERTEX;\n    private final int vertexStride = COORDS_PER_VERTEX * 4; // 4 bytes per vertex\n\n    public void draw() {\n        // Add program to OpenGL ES environment\n        GLES20.glUseProgram(mProgram);\n\n        // get handle to vertex shader's vPosition member\n        mPositionHandle = GLES20.glGetAttribLocation(mProgram, \"vPosition\");\n\n        // Enable a handle to the triangle vertices\n        GLES20.glEnableVertexAttribArray(mPositionHandle);\n\n        // Prepare the triangle coordinate data\n        GLES20.glVertexAttribPointer(mPositionHandle, COORDS_PER_VERTEX,\n                                    GLES20.GL_FLOAT, false,\n                                    vertexStride, vertexBuffer);\n\n        // get handle to fragment shader's vColor member\n        mColorHandle = GLES20.glGetUniformLocation(mProgram, \"vColor\");\n\n        // Set color for drawing the triangle\n        GLES20.glUniform4fv(mColorHandle, 1, color, 0);\n\n        // Draw the triangle\n        GLES20.glDrawArrays(GLES20.GL_TRIANGLES, 0, vertexCount);\n\n        // Disable vertex array\n        GLES20.glDisableVertexAttribArray(mPositionHandle);\n    }\n    ```\n    如此只需要在渲染器的`onDrawFrame()`中调用上面的`onDraw()`方法即可。\n    ![绘制图形](第四篇、Android图像与动画/ogl-triangle.png)\n#### 3、运用投影和相机视角\n在OpenGL ES 环境中，利用投影和相机视角可以将图像更为逼真的显示。\n1. 投影(Projection)：此类变化基于GLSurfaceView的长宽。\n2. 相机视角(Camera View):此类变化基于OpenGL ES 的虚拟相机。\n\n- ##### 定义一个投影\n  投影变换的数据计算在GLSurfaceView.Render类中的onSurfaceChanged()中执行。\n```java\n// mMVPMatrix is an abbreviation for \"Model View Projection Matrix\"\nprivate final float[] mMVPMatrix = new float[16];\nprivate final float[] mProjectionMatrix = new float[16];\nprivate final float[] mViewMatrix = new float[16];\n\n@Override\npublic void onSurfaceChanged(GL10 unused, int width, int height) {\n    GLES20.glViewport(0, 0, width, height);\n\n    float ratio = (float) width / height;\n\n    // this projection matrix is applied to object coordinates\n    // in the onDrawFrame() method\n    Matrix.frustumM(mProjectionMatrix, 0, -ratio, ratio, -1, 1, 3, 7);\n}\n```\n> 若是绘图只是用投影，会让图像显得空旷，最好结合相机视角来绘制。\n\n- ##### 定义一个相机视角\n  使用`Matrix.setLookAtM()`来换算计算，再结合如上投影换算：\n```java\n@Override\npublic void onDrawFrame(GL10 unused) {\n    ...\n    // Set the camera position (View matrix)\n    Matrix.setLookAtM(mViewMatrix, 0, 0, 0, -3, 0f, 0f, 0f, 0f, 1.0f, 0.0f);\n\n    // Calculate the projection and view transformation\n    Matrix.multiplyMM(mMVPMatrix, 0, mProjectionMatrix, 0, mViewMatrix, 0);\n\n    // Draw shape\n    mTriangle.draw(mMVPMatrix);\n}\n```\n将上一节的三角形使用投影和视角绘制：\n```java\npublic class Triangle {\n    //为顶点添加渲染着色器，Matrix\n    private final String vertexShaderCode =\n        // This matrix member variable provides a hook to manipulate\n        // the coordinates of the objects that use this vertex shader\n        \"uniform mat4 uMVPMatrix;\" +\n        \"attribute vec4 vPosition;\" +\n        \"void main() {\" +\n        // the matrix must be included as a modifier of gl_Position\n        // Note that the uMVPMatrix factor *must be first* in order\n        // for the matrix multiplication product to be correct.\n        \"  gl_Position = uMVPMatrix * vPosition;\" +\n        \"}\";\n\n    // Use to access and set the view transformation\n    private int mMVPMatrixHandle;\n\n    ...\n}\n```\n修改`onDraw ()`方法\n```java\npublic void draw(float[] mvpMatrix) { // pass in the calculated transformation matrix\n    ...\n\n    // get handle to shape's transformation matrix\n    mMVPMatrixHandle = GLES20.glGetUniformLocation(mProgram, \"uMVPMatrix\");\n\n    // Pass the projection and view transformation to the shader\n    GLES20.glUniformMatrix4fv(mMVPMatrixHandle, 1, false, mvpMatrix, 0);\n\n    // Draw the triangle\n    GLES20.glDrawArrays(GLES20.GL_TRIANGLES, 0, vertexCount);\n\n    // Disable vertex array\n    GLES20.glDisableVertexAttribArray(mPositionHandle);\n}\n```\n效果如图：![视角绘图](第四篇、Android图像与动画/ogl-triangle-projected.png)\n#### 4、添加移动\nOpenGL 区别于Android的canvas和Drawable图形框架，在于其提供的特殊功能，如3D效果等。\n- ##### 旋转图像\n  在OpenGL ES2.0中新增一个变化矩阵，结合之前的投影和视角，来绘制图形移动。\n```java\nprivate float[] mRotationMatrix = new float[16];\npublic void onDrawFrame(GL10 gl) {\n    float[] scratch = new float[16];\n\n    ...\n\n    // Create a rotation transformation for the triangle\n    long time = SystemClock.uptimeMillis() % 4000L;\n    float angle = 0.090f * ((int) time);\n    Matrix.setRotateM(mRotationMatrix, 0, angle, 0, 0, -1.0f);\n\n    // Combine the rotation matrix with the projection and camera view\n    // Note that the mMVPMatrix factor *must be first* in order\n    // for the matrix multiplication product to be correct.\n    Matrix.multiplyMM(scratch, 0, mMVPMatrix, 0, mRotationMatrix, 0);\n\n    // Draw triangle\n    mTriangle.draw(scratch);\n}\n```\n> **Note:** 不要将`GLSurfaceView.RENDERMODE_WHEN_DIRTY`注释掉，否则就可能不会移动，也不会渲染。\n\n- ##### 启用连续渲染\n```java\npublic MyGLSurfaceView(Context context) {\n    ...\n    // Render the view only when there is a change in the drawing data.\n    // To allow the triangle to rotate automatically, this line is commented out:\n    //setRenderMode(GLSurfaceView.RENDERMODE_WHEN_DIRTY);\n}\n```\n#### 5、响应触摸事件\n炫酷的图形图像，也可以和用户有良好的交互体验。重写`GLSurfaceView`类的`onTouchEvent()`方法\n来响应触摸事件。\n- ##### 注册监听\n  在重写`onTouchEvent()`方法后，想要完成事件相应，就需要注册监听。\n```java\nprivate final float TOUCH_SCALE_FACTOR = 180.0f / 320;\nprivate float mPreviousX;\nprivate float mPreviousY;\n//复写onTouchEvent方法，本文用于响应MotionEvent.ACTION_MOVE事件\n@Override\npublic boolean onTouchEvent(MotionEvent e) {\n    // MotionEvent reports input details from the touch screen\n    // and other input controls. In this case, you are only\n    // interested in events where the touch position changed.\n\n    float x = e.getX();\n    float y = e.getY();\n\n    switch (e.getAction()) {\n        case MotionEvent.ACTION_MOVE:\n\n            float dx = x - mPreviousX;\n            float dy = y - mPreviousY;\n\n            // reverse direction of rotation above the mid-line\n            if (y > getHeight() / 2) {\n              dx = dx * -1 ;\n            }\n\n            // reverse direction of rotation to left of the mid-line\n            if (x < getWidth() / 2) {\n              dy = dy * -1 ;\n            }\n\n            mRenderer.setAngle(\n                    mRenderer.getAngle() +\n                    ((dx + dy) * TOUCH_SCALE_FACTOR));\n            requestRender();\n    }\n\n    mPreviousX = x;\n    mPreviousY = y;\n    return true;\n}\n```\n如上代码调用`requestRender()`来刷新绘制，通过`setRenderMode()`来提高效率，只有变化时候才绘制：\n```java\npublic MyGLSurfaceView(Context context) {\n    ...\n    // Render the view only when there is a change in the drawing data\n    setRenderMode(GLSurfaceView.RENDERMODE_WHEN_DIRTY);\n}\n```\n- ##### 公开变量旋转角度\n  旋转角度的变量需要public，包括get和set方法\n```java\npublic class MyGLRenderer implements GLSurfaceView.Renderer {\n    ...\n\n    public volatile float mAngle;\n\n    public float getAngle() {\n        return mAngle;\n    }\n\n    public void setAngle(float angle) {\n        mAngle = angle;\n    }\n}\n```\n然后在调用绘制图形的地方，填入角度值，启动旋转。\n```java\npublic void onDrawFrame(GL10 gl) {\n    ...\n    float[] scratch = new float[16];\n\n    // Create a rotation for the triangle\n    // long time = SystemClock.uptimeMillis() % 4000L;\n    // float angle = 0.090f * ((int) time);\n    Matrix.setRotateM(mRotationMatrix, 0, mAngle, 0, 0, -1.0f);\n\n    // Combine the rotation matrix with the projection and camera view\n    // Note that the mMVPMatrix factor *must be first* in order\n    // for the matrix multiplication product to be correct.\n    Matrix.multiplyMM(scratch, 0, mMVPMatrix, 0, mRotationMatrix, 0);\n\n    // Draw triangle\n    mTriangle.draw(scratch);\n}\n```\n滑动效果：![滑动效果](第四篇、Android图像与动画/ogl-triangle-touch.png)\n\n### 3、添加动画\n动画效果可以让我们的App更为炫酷，但是也要在适当的地方和时机使用它。本章主要介绍Android的一些动画效果实现。\n#### 1、View间渐变\n渐变动画通常用于View的切换，淡入淡出效果。[渐变动画](http://hukai.me/android-training-course-in-chinese/animations/anim_crossfade.mp4)\n- ##### 创建View\n  示例，一个进度圈和可滑动的view\n```xml\n<FrameLayout xmlns:android=\"/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n    <ScrollView xmlns:android=\"/apk/res/android\"\n        android:id=\"@+id/content\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\">\n\n        <TextView style=\"?android:textAppearanceMedium\"\n            android:lineSpacingMultiplier=\"1.2\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"@string/lorem_ipsum\"\n            android:padding=\"16dp\" />\n\n    </ScrollView>\n\n    <ProgressBar android:id=\"@+id/loading_spinner\"\n        style=\"?android:progressBarStyleLarge\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_gravity=\"center\" />\n\n</FrameLayout>\n```\n- ##### view设置动画\n  为上面的view设置动画效果，步骤如下：\n\n1. 设置view的成员变量，以备后用。\n2. 先设置淡入的View的visible为gone\n3. 将`config_shortAnimTime`系统属性暂存到成员变量。\n\n示例：\n```java\npublic class CrossfadeActivity extends Activity {\n\n    private View mContentView;\n    private View mLoadingView;\n    private int mShortAnimationDuration;\n\n    ...\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_crossfade);\n\n        mContentView = findViewById(R.id.content);\n        mLoadingView = findViewById(R.id.loading_spinner);\n\n        // Initially hide the content view.\n        mContentView.setVisibility(View.GONE);\n\n        // Retrieve and cache the system's default \"short\" animation time.\n        mShortAnimationDuration = getResources().getInteger(\n                android.R.integer.config_shortAnimTime);\n    }\n}\n```\n- ##### 渐变View\n  完成如上设置后，开始实现View的渐变效果：\n1. 将需要淡入的View的Visible改为VISIBLE，透明度alpha=0\n2. 将淡入的View，alpha从0--1，淡出的View，alpha从1--0\n3. 使用`Animator.AnimatorListener`中的`onAnimationEnd()`来设置淡出的view的visible为gone，即使alpha=0，但是也会占用布局资源，所以需要gone。\n```java\nprivate View mContentView;\nprivate View mLoadingView;\nprivate int mShortAnimationDuration;\n\n...\n\nprivate void crossfade() {\n\n    // Set the content view to 0% opacity but visible, so that it is visible\n    // (but fully transparent) during the animation.\n    mContentView.setAlpha(0f);\n    mContentView.setVisibility(View.VISIBLE);\n\n    // Animate the content view to 100% opacity, and clear any animation\n    // listener set on the view.\n    mContentView.animate()\n            .alpha(1f)\n            .setDuration(mShortAnimationDuration)\n            .setListener(null);\n\n    // Animate the loading view to 0% opacity. After the animation ends,\n    // set its visibility to GONE as an optimization step (it won't\n    // participate in layout passes, etc.)\n    mLoadingView.animate()\n            .alpha(0f)\n            .setDuration(mShortAnimationDuration)\n            .setListener(new AnimatorListenerAdapter() {\n                @Override\n                public void onAnimationEnd(Animator animation) {\n                    mLoadingView.setVisibility(View.GONE);\n                }\n            });\n}\n```\n#### 2、使用Viewpager实现屏幕滑动\n类似View的淡入淡出切换，而屏幕的切换是整个的界面转换，使用`supports library`的ViewPager来实现。\n[ViewPager](http://hukai.me/android-training-course-in-chinese/animations/anim_screenslide.mp4)\n- ##### 创建View\n```xml\n<!-- fragment_screen_slide_page.xml -->\n<ScrollView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:id=\"@+id/content\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\" >\n\n    <TextView style=\"?android:textAppearanceMedium\"\n        android:padding=\"16dp\"\n        android:lineSpacingMultiplier=\"1.2\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"@string/lorem_ipsum\" />\n</ScrollView>\n```\n如上定义一个fragment和text view\n- ##### 创建Fragment\n  创建一个Fragment对象实例来展示view布局。\n```java\nimport android.support.v4.app.Fragment;\n...\npublic class ScreenSlidePageFragment extends Fragment {\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n            Bundle savedInstanceState) {\n        ViewGroup rootView = (ViewGroup) inflater.inflate(\n                R.layout.fragment_screen_slide_page, container, false);\n\n        return rootView;\n    }\n}\n```\n- ##### 添加viewPager\n  ViewPager有内建的滑动手势，配合PagerAdapter来适配数据。需要创建一个包含ViewPager的布局\n```xml\n<!-- activity_screen_slide.xml -->\n<android.support.v4.view.ViewPager\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:id=\"@+id/pager\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\" />\n```\n接下来就是创建一个Activity来关联布局，实现逻辑：\n1. content View中包含上述布局文件\n2. 创建`FragmentStatePagerAdapter`的子类，实现`getItem()`方法，把ScreenSlidePageFragment实例作为新页面补充进来。\n   PagerAdapter还需要实现getCount()方法，它返回 Adapter将要创建页面的总数（例如5个）。\n3. 关联`ViewPager`和`PagerAdapter`\n4. 处理Back按钮，按下变为在虚拟的Fragment栈中回退。如果用户已经在第一个页面了，\n   则在Activity的回退栈（back stack）中回退。\n```java\nimport android.support.v4.app.Fragment;\nimport android.support.v4.app.FragmentManager;\n...\npublic class ScreenSlidePagerActivity extends FragmentActivity {\n    //屏幕页面数目\n    private static final int NUM_PAGES = 5;\n\n    //View Pager对象，用于处理页面切换的容器\n    private ViewPager mPager;\n\n    //页面数据适配器\n    private PagerAdapter mPagerAdapter;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_screen_slide);\n\n        // 初始化数据\n        mPager = (ViewPager) findViewById(R.id.pager);\n        mPagerAdapter = new ScreenSlidePagerAdapter(getSupportFragmentManager());\n        mPager.setAdapter(mPagerAdapter);\n    }\n    //处理返回按钮的点击事件\n    @Override\n    public void onBackPressed() {\n        if (mPager.getCurrentItem() == 0) {\n            //要是第一个页面，返回按钮就是退出\n            super.onBackPressed();\n        } else {\n            //不是第一个页面，返回按钮就是返回上一个页面\n            mPager.setCurrentItem(mPager.getCurrentItem() - 1);\n        }\n    }\n\n    //简单的适配器，用于加入几个页面\n    private class ScreenSlidePagerAdapter extends FragmentStatePagerAdapter {\n        public ScreenSlidePagerAdapter(FragmentManager fm) {\n            super(fm);\n        }\n\n        @Override\n        public Fragment getItem(int position) {\n            return new ScreenSlidePageFragment();\n        }\n\n        @Override\n        public int getCount() {\n            return NUM_PAGES;\n        }\n    }\n}\n```\nViewPager包含有默认的滑屏动画，若要自定义切换动画需要实现`viewpager.transformer`接口，并补充道Viewpager中\n，实现其方法`transformPage()`。该方法会在显示页面滑动时，于其相邻的两个页面间调用。重要的参数就是当前页面\n的位置position，可以根据页面位置来设置不同的动画效果。\n```java\nViewPager mPager = (ViewPager) findViewById(R.id.pager);\n...\nmPager.setPagerTransformer(true,new ZoomOutPagerTransformer());\n```\n- ##### ZoomOutPagerTransformer\n  效果是逐渐褪色的淡出模式[演示](http://hukai.me/android-training-course-in-chinese/animations/anim_page_transformer_zoomout.mp4)\n```java\npublic class ZoomOutPageTransformer implements ViewPager.PageTransformer {\n    private static final float MIN_SCALE = 0.85f;\n    private static final float MIN_ALPHA = 0.5f;\n\n    public void transformPage(View view, float position) {\n        int pageWidth = view.getWidth();\n        int pageHeight = view.getHeight();\n\n        if (position < -1) { // [-Infinity,-1)\n            // This page is way off-screen to the left.\n            view.setAlpha(0);\n\n        } else if (position <= 1) { // [-1,1]\n            // Modify the default slide transition to shrink the page as well\n            float scaleFactor = Math.max(MIN_SCALE, 1 - Math.abs(position));\n            float vertMargin = pageHeight * (1 - scaleFactor) / 2;\n            float horzMargin = pageWidth * (1 - scaleFactor) / 2;\n            if (position < 0) {\n                view.setTranslationX(horzMargin - vertMargin / 2);\n            } else {\n                view.setTranslationX(-horzMargin + vertMargin / 2);\n            }\n\n            // Scale the page down (between MIN_SCALE and 1)\n            view.setScaleX(scaleFactor);\n            view.setScaleY(scaleFactor);\n\n            // Fade the page relative to its size.\n            view.setAlpha(MIN_ALPHA +\n                    (scaleFactor - MIN_SCALE) /\n                    (1 - MIN_SCALE) * (1 - MIN_ALPHA));\n\n        } else { // (1,+Infinity]\n            // This page is way off-screen to the right.\n            view.setAlpha(0);\n        }\n    }\n}\n```\n- ##### Depth Pager Transformer\n  右滑动潜藏效果[video](http://hukai.me/android-training-course-in-chinese/animations/anim_page_transformer_depth.mp4)\n```java\npublic class DepthPageTransformer implements ViewPager.PageTransformer {\n    private static final float MIN_SCALE = 0.75f;\n\n    public void transformPage(View view, float position) {\n        int pageWidth = view.getWidth();\n\n        if (position < -1) { // [-Infinity,-1)\n            // This page is way off-screen to the left.\n            view.setAlpha(0);\n\n        } else if (position <= 0) { // [-1,0]\n            // Use the default slide transition when moving to the left page\n            view.setAlpha(1);\n            view.setTranslationX(0);\n            view.setScaleX(1);\n            view.setScaleY(1);\n\n        } else if (position <= 1) { // (0,1]\n            // Fade the page out.\n            view.setAlpha(1 - position);\n\n            // Counteract the default slide transition\n            view.setTranslationX(pageWidth * -position);\n\n            // Scale the page down (between MIN_SCALE and 1)\n            float scaleFactor = MIN_SCALE\n                    + (1 - MIN_SCALE) * (1 - Math.abs(position));\n            view.setScaleX(scaleFactor);\n            view.setScaleY(scaleFactor);\n\n        } else { // (1,+Infinity]\n            // This page is way off-screen to the right.\n            view.setAlpha(0);\n        }\n    }\n}\n```\n#### 3、实现Card翻转动画\n通过自定义Fragment实现Card翻转效果的view切换。[card](http://hukai.me/android-training-course-in-chinese/animations/anim_card_flip.mp4)\n- ##### 创建Animator\n  创建Card翻转动画，我们需要两个Animator。一个让正面的card的右侧向左翻转渐出，一个让背面的Card向右翻转渐入。我们还需要两个 Animator让背面的card的右侧向左翻转渐入，一个让向右翻转渐入。\n\n**card_flip_left_in.xml**\n```xml\n<set xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <!-- Before rotating, immediately set the alpha to 0. -->\n    <objectAnimator\n        android:valueFrom=\"1.0\"\n        android:valueTo=\"0.0\"\n        android:propertyName=\"alpha\"\n        android:duration=\"0\" />\n\n    <!-- Rotate. -->\n    <objectAnimator\n        android:valueFrom=\"-180\"\n        android:valueTo=\"0\"\n        android:propertyName=\"rotationY\"\n        android:interpolator=\"@android:interpolator/accelerate_decelerate\"\n        android:duration=\"@integer/card_flip_time_full\" />\n\n    <!-- Half-way through the rotation (see startOffset), set the alpha to 1. -->\n    <objectAnimator\n        android:valueFrom=\"0.0\"\n        android:valueTo=\"1.0\"\n        android:propertyName=\"alpha\"\n        android:startOffset=\"@integer/card_flip_time_half\"\n        android:duration=\"1\" />\n</set>\n```\n**card_flip_left_out.xml**\n```xml\n<set xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <!-- Rotate. -->\n    <objectAnimator\n        android:valueFrom=\"0\"\n        android:valueTo=\"180\"\n        android:propertyName=\"rotationY\"\n        android:interpolator=\"@android:interpolator/accelerate_decelerate\"\n        android:duration=\"@integer/card_flip_time_full\" />\n\n    <!-- Half-way through the rotation (see startOffset), set the alpha to 0. -->\n    <objectAnimator\n        android:valueFrom=\"1.0\"\n        android:valueTo=\"0.0\"\n        android:propertyName=\"alpha\"\n        android:startOffset=\"@integer/card_flip_time_half\"\n        android:duration=\"1\" />\n</set>\n```\n**card_flip_right_in.xml**\n```xml\n<set xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <!-- Before rotating, immediately set the alpha to 0. -->\n    <objectAnimator\n        android:valueFrom=\"1.0\"\n        android:valueTo=\"0.0\"\n        android:propertyName=\"alpha\"\n        android:duration=\"0\" />\n\n    <!-- Rotate. -->\n    <objectAnimator\n        android:valueFrom=\"180\"\n        android:valueTo=\"0\"\n        android:propertyName=\"rotationY\"\n        android:interpolator=\"@android:interpolator/accelerate_decelerate\"\n        android:duration=\"@integer/card_flip_time_full\" />\n\n    <!-- Half-way through the rotation (see startOffset), set the alpha to 1. -->\n    <objectAnimator\n        android:valueFrom=\"0.0\"\n        android:valueTo=\"1.0\"\n        android:propertyName=\"alpha\"\n        android:startOffset=\"@integer/card_flip_time_half\"\n        android:duration=\"1\" />\n</set>\n```\n**card_flip_right_out.xml**\n```xml\n<set xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <!-- Rotate. -->\n    <objectAnimator\n        android:valueFrom=\"0\"\n        android:valueTo=\"-180\"\n        android:propertyName=\"rotationY\"\n        android:interpolator=\"@android:interpolator/accelerate_decelerate\"\n        android:duration=\"@integer/card_flip_time_full\" />\n\n    <!-- Half-way through the rotation (see startOffset), set the alpha to 0. -->\n    <objectAnimator\n        android:valueFrom=\"1.0\"\n        android:valueTo=\"0.0\"\n        android:propertyName=\"alpha\"\n        android:startOffset=\"@integer/card_flip_time_half\"\n        android:duration=\"1\" />\n</set>\n```\n- ##### 创建View\n  card的每个面都是一个布局，需要在Fragment中关联展示\n```xml\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"vertical\"\n    android:background=\"#a6c\"\n    android:padding=\"16dp\"\n    android:gravity=\"bottom\">\n\n    <TextView android:id=\"@android:id/text1\"\n        style=\"?android:textAppearanceLarge\"\n        android:textStyle=\"bold\"\n        android:textColor=\"#fff\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"@string/card_back_title\" />\n\n    <TextView style=\"?android:textAppearanceSmall\"\n        android:textAllCaps=\"true\"\n        android:textColor=\"#80ffffff\"\n        android:textStyle=\"bold\"\n        android:lineSpacingMultiplier=\"1.2\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"@string/card_back_description\" />\n\n</LinearLayout>\n```\n另一面：\n```xml\n<ImageView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:src=\"@drawable/image1\"\n    android:scaleType=\"centerCrop\"\n    android:contentDescription=\"@string/description_image_1\" />\n```\n- ##### 创建Fragment\n  Card的正反面都是Fragment，需要创建并关联布局\n```java\npublic class CardFlipActivity extends Activity {\n    ...\n    /**\n     * A fragment representing the front of the card.\n     */\n    public class CardFrontFragment extends Fragment {\n        @Override\n        public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                Bundle savedInstanceState) {\n            return inflater.inflate(R.layout.fragment_card_front, container, false);\n        }\n    }\n\n    /**\n     * A fragment representing the back of the card.\n     */\n    public class CardBackFragment extends Fragment {\n        @Override\n        public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                Bundle savedInstanceState) {\n            return inflater.inflate(R.layout.fragment_card_back, container, false);\n        }\n    }\n}\n```\n- ##### 实现翻转Card动画\n  创建一个framelayout来用于activity展示fragment\n```xml\n<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:id=\"@+id/container\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\" />\n```\n在Activity中实现展示\n```java\npublic class CardFlipActivity extends Activity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_activity_card_flip);\n\n        if (savedInstanceState == null) {\n            getFragmentManager()\n                    .beginTransaction()\n                    .add(R.id.container, new CardFrontFragment())\n                    .commit();\n        }\n    }\n    ...\n}\n```\n如上默认展示了card的正面，需要适时创建card的背面，并实现翻转。\n\n1. 将Fragment转换设置我们刚做的自定义动画\n\n2. 用新Fragment替换当前显示的Fragment，并且应用之前创建的动画到该事件中。\n\n3. 添加之前显示的Fragment到Fragment的回退栈（back stack）中，所以当用户按下 Back 键时，Card会翻转回来。\n\n```java\nprivate void flipCard() {\n    if (mShowingBack) {\n        getFragmentManager().popBackStack();\n        return;\n    }\n\n    // 是否正在翻转\n\n    mShowingBack = true;\n\n    // 创建并执行一个事务，新增fragment并应用自定义动画，且将fragment加入回退栈\n\n    getFragmentManager()\n            .beginTransaction()\n\n            // 使用自定义动画\n            .setCustomAnimations(\n                    R.animator.card_flip_right_in, R.animator.card_flip_right_out,\n                    R.animator.card_flip_left_in, R.animator.card_flip_left_out)\n\n            // 翻转的fragment\n            .replace(R.id.container, new CardBackFragment())\n\n            // 新增事务到回退栈\n            .addToBackStack(null)\n\n            // 提交事务\n            .commit();\n}\n```\n#### 4、View的缩放\nView的动画缩放效果，常用语图片的浏览展示。[scale](http://hukai.me/android-training-course-in-chinese/animations/anim_zoom.mp4)\n- ##### 创建View\n  示例创建了大小两个版本的文件，\n```xml\n<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:id=\"@+id/container\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n    <LinearLayout android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"vertical\"\n        android:padding=\"16dp\">\n\n        <ImageButton\n            android:id=\"@+id/thumb_button_1\"\n            android:layout_width=\"100dp\"\n            android:layout_height=\"75dp\"\n            android:layout_marginRight=\"1dp\"\n            android:src=\"@drawable/thumb1\"\n            android:scaleType=\"centerCrop\"\n            android:contentDescription=\"@string/description_image_1\" />\n\n    </LinearLayout>\n\n    <!-- This initially-hidden ImageView will hold the expanded/zoomed version of\n         the images above. Without transformations applied, it takes up the entire\n         screen. To achieve the \"zoom\" animation, this view's bounds are animated\n         from the bounds of the thumbnail button above, to its final laid-out\n         bounds.\n         -->\n\n    <ImageView\n        android:id=\"@+id/expanded_image\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:visibility=\"invisible\"\n        android:contentDescription=\"@string/description_zoom_touch_close\" />\n\n</FrameLayout>\n```\n- ##### 设置缩放动画\n  监听点击事件，实现缩放效果\n```java\npublic class ZoomActivity extends FragmentActivity {\n    // Hold a reference to the current animator,\n    // so that it can be canceled mid-way.\n    private Animator mCurrentAnimator;\n\n    // The system \"short\" animation time duration, in milliseconds. This\n    // duration is ideal for subtle animations or animations that occur\n    // very frequently.\n    private int mShortAnimationDuration;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_zoom);\n\n        // Hook up clicks on the thumbnail views.\n\n        final View thumb1View = findViewById(R.id.thumb_button_1);\n        thumb1View.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                zoomImageFromThumb(thumb1View, R.drawable.image1);\n            }\n        });\n\n        // Retrieve and cache the system's default \"short\" animation time.\n        mShortAnimationDuration = getResources().getInteger(\n                android.R.integer.config_shortAnimTime);\n    }\n    ...\n}\n```\n- ##### 缩放View\n  缩放View的效果实现：\n1. 高清大图放在IamgeView中，用于放大后再显示。\n2. 计算image View的边界。\n3. 要同步改变四个边界，用`AnimatorSet`\n4. 缩小则是类似逆向如上操作。注意view的属性需要设置gone。\n```java\nprivate void zoomImageFromThumb(final View thumbView, int imageResId) {\n    // If there's an animation in progress, cancel it\n    // immediately and proceed with this one.\n    if (mCurrentAnimator != null) {\n        mCurrentAnimator.cancel();\n    }\n\n    // Load the high-resolution \"zoomed-in\" image.\n    final ImageView expandedImageView = (ImageView) findViewById(\n            R.id.expanded_image);\n    expandedImageView.setImageResource(imageResId);\n\n    // Calculate the starting and ending bounds for the zoomed-in image.\n    // This step involves lots of math. Yay, math.\n    final Rect startBounds = new Rect();\n    final Rect finalBounds = new Rect();\n    final Point globalOffset = new Point();\n\n    // The start bounds are the global visible rectangle of the thumbnail,\n    // and the final bounds are the global visible rectangle of the container\n    // view. Also set the container view's offset as the origin for the\n    // bounds, since that's the origin for the positioning animation\n    // properties (X, Y).\n    thumbView.getGlobalVisibleRect(startBounds);\n    findViewById(R.id.container)\n            .getGlobalVisibleRect(finalBounds, globalOffset);\n    startBounds.offset(-globalOffset.x, -globalOffset.y);\n    finalBounds.offset(-globalOffset.x, -globalOffset.y);\n\n    // Adjust the start bounds to be the same aspect ratio as the final\n    // bounds using the \"center crop\" technique. This prevents undesirable\n    // stretching during the animation. Also calculate the start scaling\n    // factor (the end scaling factor is always 1.0).\n    float startScale;\n    if ((float) finalBounds.width() / finalBounds.height()\n            > (float) startBounds.width() / startBounds.height()) {\n        // Extend start bounds horizontally\n        startScale = (float) startBounds.height() / finalBounds.height();\n        float startWidth = startScale * finalBounds.width();\n        float deltaWidth = (startWidth - startBounds.width()) / 2;\n        startBounds.left -= deltaWidth;\n        startBounds.right += deltaWidth;\n    } else {\n        // Extend start bounds vertically\n        startScale = (float) startBounds.width() / finalBounds.width();\n        float startHeight = startScale * finalBounds.height();\n        float deltaHeight = (startHeight - startBounds.height()) / 2;\n        startBounds.top -= deltaHeight;\n        startBounds.bottom += deltaHeight;\n    }\n\n    // Hide the thumbnail and show the zoomed-in view. When the animation\n    // begins, it will position the zoomed-in view in the place of the\n    // thumbnail.\n    thumbView.setAlpha(0f);\n    expandedImageView.setVisibility(View.VISIBLE);\n\n    // Set the pivot point for SCALE_X and SCALE_Y transformations\n    // to the top-left corner of the zoomed-in view (the default\n    // is the center of the view).\n    expandedImageView.setPivotX(0f);\n    expandedImageView.setPivotY(0f);\n\n    // Construct and run the parallel animation of the four translation and\n    // scale properties (X, Y, SCALE_X, and SCALE_Y).\n    AnimatorSet set = new AnimatorSet();\n    set\n            .play(ObjectAnimator.ofFloat(expandedImageView, View.X,\n                    startBounds.left, finalBounds.left))\n            .with(ObjectAnimator.ofFloat(expandedImageView, View.Y,\n                    startBounds.top, finalBounds.top))\n            .with(ObjectAnimator.ofFloat(expandedImageView, View.SCALE_X,\n            startScale, 1f)).with(ObjectAnimator.ofFloat(expandedImageView,\n                    View.SCALE_Y, startScale, 1f));\n    set.setDuration(mShortAnimationDuration);\n    set.setInterpolator(new DecelerateInterpolator());\n    set.addListener(new AnimatorListenerAdapter() {\n        @Override\n        public void onAnimationEnd(Animator animation) {\n            mCurrentAnimator = null;\n        }\n\n        @Override\n        public void onAnimationCancel(Animator animation) {\n            mCurrentAnimator = null;\n        }\n    });\n    set.start();\n    mCurrentAnimator = set;\n\n    // Upon clicking the zoomed-in image, it should zoom back down\n    // to the original bounds and show the thumbnail instead of\n    // the expanded image.\n    final float startScaleFinal = startScale;\n    expandedImageView.setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View view) {\n            if (mCurrentAnimator != null) {\n                mCurrentAnimator.cancel();\n            }\n\n            // Animate the four positioning/sizing properties in parallel,\n            // back to their original values.\n            AnimatorSet set = new AnimatorSet();\n            set.play(ObjectAnimator\n                        .ofFloat(expandedImageView, View.X, startBounds.left))\n                        .with(ObjectAnimator\n                                .ofFloat(expandedImageView,\n                                        View.Y,startBounds.top))\n                        .with(ObjectAnimator\n                                .ofFloat(expandedImageView,\n                                        View.SCALE_X, startScaleFinal))\n                        .with(ObjectAnimator\n                                .ofFloat(expandedImageView,\n                                        View.SCALE_Y, startScaleFinal));\n            set.setDuration(mShortAnimationDuration);\n            set.setInterpolator(new DecelerateInterpolator());\n            set.addListener(new AnimatorListenerAdapter() {\n                @Override\n                public void onAnimationEnd(Animator animation) {\n                    thumbView.setAlpha(1f);\n                    expandedImageView.setVisibility(View.GONE);\n                    mCurrentAnimator = null;\n                }\n\n                @Override\n                public void onAnimationCancel(Animator animation) {\n                    thumbView.setAlpha(1f);\n                    expandedImageView.setVisibility(View.GONE);\n                    mCurrentAnimator = null;\n                }\n            });\n            set.start();\n            mCurrentAnimator = set;\n        }\n    });\n}\n```\n#### 5、布局动画\n布局动画是一种预加载动画，可以通过创建Layout Transition ，setLayoutTransition（）实现。\n[layout](http://hukai.me/android-training-course-in-chinese/animations/anim_layout_changes.mp4)\n- ##### 创建布局\n  为想开启动画的布局设置`android:animateLayoutChanges`属性为`true`。\n```xml\n<LinearLayout android:id=\"@+id/container\"\n    android:animateLayoutChanges=\"true\"\n    ...\n/>\n```\n- ##### 从布局中增删项目\n  代码中动态修改布局项目，实现动画\n```java\nprivate ViewGroup mContainerView;\n...\nprivate void addItem() {\n    View newView;\n    ...\n    mContainerView.addView(newView, 0);\n}\n```","source":"_posts/第四篇、Android图像与动画.md","raw":"---\ntitle: \"Android图像与动画\"\ndate: 2017-03-27 16:57\nauthor: 冰路梦\ntag:\n    - Android\ncategories:\n    - Android\n---\n## 第四篇、Android图像与动画\n[TOC]\n### 第1章、高效显示Bitmap\n\n本节主要介绍加载处理Bitmap对象常用方法，以避免UI线程阻塞与OOM问题。由于Android设备\n\n- Android单个应用至少16M内存，不同分辨率屏幕的设备要求不同。`国内自定义ROM限制也有差异。`\n- Bitmap消耗内存，一张5M的高清照片，使用ARGB_8888方式加载Bitmap，则需要19M左右的内存。\n- Android应用一般加载多个Bitmap，预先加载以备显示。\n\n所以如上三条，需要我们对Bitmap做优化处理。\n\n#### 1、高效加载大图（Loading Large Bitmap Efficiently）\n\n本节介绍加载缩小的图片，来避免过多消耗内存，原始大小的图片和超过控件大小和设备分辨率的图片加载，在显示上并无意义，反而带来内存风险。\n\n- ##### 读取位图尺寸与类型（Read Bitmap Dimensions and Type）\n\n  `BitmapFactory`提供了不同类型的decode方法，配有`BitmapFactory.Options`选项来标记解码方式。\n\n  设置`inJustDecodeBounds=true`属性可以避免解码时候分配内存。其返回`null`的Bitmap，但是可以用于获取长宽和类型。\n\n  ```java\n  BitmapFactory.Options options = new BitmapFactory.Options();\n  options.inJustDecodeBounds = true;//不加载分配内存\n  BitmapFactory.decodeResource(getResource(),R.drawable.iclauncher,options);\n  //图像长宽\n  int imgWidth = options.outWidth;\n  int imgHeight = options.outHeight;\n  String imgType = options.outMimeType;//图像类型\n  ```\n\n  *一般需要在加载图片前判断图片大小，避免OOM，除非你确保不会OOM*\n\n- ##### 加载缩小版图片到内存（Load a Scale Down Version into Memory）\n\n  加载缩小版图片也需要考虑一些因素：\n\n  - 评估完整图片加载需耗内存。\n  - 加载图片可能涉及到的其他内存需求。\n  - 显示图片的控件尺寸。\n  - 设备屏幕的密度和大小。\n\n  BitmapFactory.Options中设置`inSampleSize`来确定缩放比。\n\n  ```java\n  /**\n   * 计算图像缩放比\n   */\n  public static int calculateInSampleSize(\n              BitmapFactory.Options options, int reqWidth, int reqHeight) {\n      // 获取图像的原始大小\n      final int height = options.outHeight;\n      final int width = options.outWidth;\n      int inSampleSize = 1;\n      if (height > reqHeight || width > reqWidth) {\n          final int halfHeight = height / 2;\n          final int halfWidth = width / 2;\n          //保持宽高大于请求的宽高，缩放比为计算值的2倍\n          while ((halfHeight / inSampleSize) > reqHeight\n                  && (halfWidth / inSampleSize) > reqWidth) {\n              inSampleSize *= 2;\n          }\n      }\n      return inSampleSize;\n  }\n  ```\n\n  ==*设置缩放比`inSampleSize`为2的倍数，是因为解码器对非2倍数会就近处理为2的倍数。*==\n\n  先设置`inJustDecodeBounds=true`来设置`inSampleSize`之后在设置`inJustDecodeBounds=false`加载缩放后的Bitmap\n\n  ```java\n  mImageView.setImageBitmap(decodeSampleBitmapFromResource(getResource(),R.drawable.iclauncher,100,100));//加载大小100长宽的图片\n  /*\n   * 根据控件大小，加载缩放图片\n   */\n  public static Bitmap decodeSampleBitmapFromResource(Resource res,int resId,int reqWidth,int reqHeight){\n    //先空加载图片，计算缩放比\n    final BitmapFactory.Options options = new BitmapFactory.Options();\n    options.inJustDecodeBounds = true;\n    BitmapFactory.decodeResource(res,resId,options);\n    options.inSampleSize = calculateInSampleSize(options,reqWidth,reqHeight);\n    //解码缩放后的图像\n    options.inJustDecodeBounds = false;\n    returen BitmapFactory.decodeResource(res,resId,options);\n  }\n  ```\n\n#### 2、非UI线程处理Bitmap\n\n上一节仅仅介绍了如何缩放加载图像，若是获取网络图像或者其他储存设备，则应避免在UI线程执行加载操作，避免ANR。\n\n- ##### 使用AsyncTask（Use a AsyncTask）\n\n  AsyncTask是Android提供的一个封装好的后台线程操作方式，并可以实现前后台信息传递。\n\n  ```java\n  class BitmapWorkerTask extends AsyncTask{\n    private final WeakReference imageViewReference;\n    private int data = 0;\n    public BitmapWorkerTask(ImageView imageView){\n      //使用弱引用，确保图像会被及时的GC回收。\n      imageViewReference = new WeakReference(imageView);\n    }\n    //后台解码图片\n    @override\n    protected Bitmap doInBackground(Integer... params){\n      data = params[0];\n      return decodeSampleBitmapFromResource(getResource(),data,100,100);\n    }\n    //完成解码后，加载图像到控件显示\n    //要判断引用对象是否还存在，控件是否存在等，避免空指针。\n    @override\n    protected void onPostExecute(Bitmap bitmap){\n      if(imageViewReference !=null && bitmap !=null){\n        final ImageView imageView = imageViewReference.get();\n        if(imageView!=null){\n          imageView.setImageBitmap(bitmap);\n        }\n      }\n    }\n  }\n  //创建一个任务task，执行异步加载\n  public void loadBitmap(int resId,ImageView imageView){\n    BitmapWorkerTask task = new BitmapWorkerTask(imageView);\n    task.execute(resId);//执行Task\n  }\n  ```\n\n- ##### 处理并发问题（Handle Concurrency）\n\n  List View和Grid View控件显示多个位图结合AsyncTask使用时会产生并发问题。每个item都执行task的话，启动顺序，任务顺序都很难保持一致性。为此可以使用Image View来保存最近使用的AsyncTask引用，创建一个专用的`Drawable`子类来存储任务引用，如`BitmapDrawable`,并提供占位图像:\n\n  ```java\n  static class AsyncDrawable extends BitmapDrawable{\n    private final WeakReference bitmapWorkerTaskReference;\n    public AsyncDrawable(Resource res,Bitmap bitmap,BitmapWorkerTask bitmapWorkerTask){\n      super(res,bitmap);\n      //初始化弱引用对象\n      bitmapWorkerTaskReference = new BitmapWorkerTaskReference(bitmapWorkerTask);\n    }\n    //对外公开task的引用。\n    public BitmapWorkerTask getBitmapWorkerTask(){\n      return bitmapWorkerTaskReference.get();\n    }\n  }\n  ```\n\n  在执行BitmapWorkerTask之前需要创建AsyncDrawable并绑定到ImageView上：\n\n  ```java\n  public void loadBitmap(int resId,ImageView imageView){\n    if(cancelPotentialWork(resId,imageView)){\n      final BitmapWorkerTask task = new BitmapWorkerTask(imageView);\n      final AsyncDrawable asyncDrawable = new \t\t\t\t\t\t\t   AsyncDrawable(getResource(),mPlaceHolderBitmap,task);\n      imageView.setImageDrawable(asyncDrawable);\n      task.execute(resId);\n    }\n  }\n  //该方法用于检测是否有已存在的任务在执行该Image View控件的请求。\n  public static boolean cancelPotentialWork(int data, ImageView imageView) {\n  \t//检索AsyncTask是否已经被分配到指定的ImageView控件。\n    final BitmapWorkerTask bitmapWorkerTask = getBitmapWorkerTask(imageView);\n      if (bitmapWorkerTask != null) {\n          final int bitmapData = bitmapWorkerTask.data;\n          if (bitmapData == 0 || bitmapData != data) {\n              //取消先前的任务\n              bitmapWorkerTask.cancel(true);\n          } else {\n              //同样的请求任务已经在执行\n              return false;\n          }\n      }\n      //没有符合当下请求的任务绑定在ImageView控件上，或者之前的取消了。\n      return true;\n  }\n  //获取控件相关的task\n  private static BitmapWorkerTask getBitmapWorkerTask(ImageView imageView) {\n     if (imageView != null) {\n         final Drawable drawable = imageView.getDrawable();\n         if (drawable instanceof AsyncDrawable) {\n             final AsyncDrawable asyncDrawable = (AsyncDrawable) drawable;\n           //获取AsyncDrawable中定义的绑定task引用\n             return asyncDrawable.getBitmapWorkerTask();\n         }\n      }\n      return null;\n  }\n  ```\n\n  完成异步task的绑定后，在`onPostExecute()`中更新view\n\n  ```java\n  class BitmapWorkerTask extends AsyncTask {\n      ...\n\n      @Override\n      protected void onPostExecute(Bitmap bitmap) {\n          if (isCancelled()) {\n              bitmap = null;\n          }\n  \t\t//更新View前，判断资源和控件的非空\n          if (imageViewReference != null && bitmap != null) {\n              final ImageView imageView = imageViewReference.get();\n              final BitmapWorkerTask bitmapWorkerTask =\n                      getBitmapWorkerTask(imageView);\n              if (this == bitmapWorkerTask && imageView != null) {\n                  imageView.setImageBitmap(bitmap);\n              }\n          }\n      }\n  }\n  ```\n\n  应用与listView和GridView等，循环利用子视图的控件，只要在设置ImageView的地方调用loadBitmap方法即可。如GridView的`getView()`中。\n\n#### 3、缓存Bitmap\n\n在List View或GridView控件场景中，可能需要大量图片展示，而且存在图片复用现象，此时就需要用到缓存，以提高效能和用户体验。\n\n- ##### 使用内存缓存（Use a Memory Cache）\n\n  使用内存缓存实现以_空间换时间_，提高速度。`LruCache`类用于缓存Bitmaps，其使用强引用`LinkedHashMap`保存最近引用对象，在缓存超出设置大小时候剔除最近最少使用的对象。\n\n  > **注意：**以前多使用`软引用`或`弱引用`但是现在并不推荐，由于Android版本的GC频率增高，引用效率也大为降低。\n\n  为LruCache设置合适的大小，考虑一下因素：\n\n  - 应用剩余可用内存大小\n  - 同时显示图像数量，以及预加载图片数量\n  - 设备屏幕尺寸与密度\n  - 图像尺寸、类型\n  - 图像被访问的频率高低\n  - 显示图像的质量和数量的平衡\n\n  以上因素都需要具体分析，如下创建一个Bitmap的LruCache的示例：\n\n  ```java\n  private LruCache<String, Bitmap> mMemoryCache;\n\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n      ...\n      // 获取应用VM最大可用内存\n      final int maxMemory = (int) (Runtime.getRuntime().maxMemory() / 1024);\n\n      // 使用可用内存的1/8来缓存\n      final int cacheSize = maxMemory / 8;\n  \t//建立LruCache缓存对象\n      mMemoryCache = new LruCache<String, Bitmap>(cacheSize) {\n          @Override\n          protected int sizeOf(String key, Bitmap bitmap) {\n              // 缓存以KB为单位计算，而非对象item个数\n              return bitmap.getByteCount() / 1024;\n          }\n      };\n      ...\n  }\n  //加入bitmap对象到lrucache\n  public void addBitmapToMemoryCache(String key, Bitmap bitmap) {\n      if (getBitmapFromMemCache(key) == null) {\n          mMemoryCache.put(key, bitmap);\n      }\n  }\n  //从lrucache获取bitmap缓存\n  public Bitmap getBitmapFromMemCache(String key) {\n      return mMemoryCache.get(key);\n  }\n  ```\n\n  > **Note:**在上面的例子中, 有1/8的内存空间被用作缓存。 这意味着在常见的设备上（hdpi），最少大概有4MB的缓存空间（32/8）。如果一个填满图片的GridView控件放置在800x480像素的手机屏幕上，大概会花费1.5MB的缓存空间（800x480x4 bytes），因此缓存的容量大概可以缓存2.5页的图片内容。\n\n  加入缓存的bitmap亦是已经优化过的图像：\n\n  ```java\n  class BitmapWorkerTask extends AsyncTask<Integer, Void, Bitmap> {\n      ...\n      //异步线程解码图像\n      @Override\n      protected Bitmap doInBackground(Integer... params) {\n        //缩放图像\n          final Bitmap bitmap = decodeSampledBitmapFromResource(\n                  getResources(), params[0], 100, 100));\n        //添加到lrucache缓存\n          addBitmapToMemoryCache(String.valueOf(params[0]), bitmap);\n          return bitmap;\n      }\n      ...\n  }\n  ```\n\n- ##### 使用磁盘缓存（Use a Disk Cache）\n\n  使用内存作为缓存虽然有较高的速度，但也可能因为应用被后台化，系统资源不足，亦或者过于大量的图像加载，而导致效果不佳，体验不好。因而可以使用磁盘缓存，需要异步处理，避免ANR。\n\n  > **Note:**如果图像过于频繁访问，可以使用`ContentProvider`更为合适。\n\n  如下示例`DiskLruCache`为Android源码基础上优化的：\n\n  ```java\n  private DiskLruCache mDiskLruCache;//DiskLruCache对象\n  private final Object mDiskCacheLock = new Object();//常量化同步锁\n  private boolean mDiskCacheStarting = true;//是否开启缓存\n  private static final int DISK_CACHE_SIZE = 1024 * 1024 * 10; // 10MB\n  private static final String DISK_CACHE_SUBDIR = \"thumbnails\";//缓存文件夹\n\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n      ...\n      // 初始化内存缓存\n      ...\n      // 后台线程初始化磁盘缓存\n      File cacheDir = getDiskCacheDir(this, DISK_CACHE_SUBDIR);//从磁盘加载出缓存文件\n      new InitDiskCacheTask().execute(cacheDir);//异步开始加载到缓存文件\n      ...\n  }\n  //内部类，初始化磁盘加载task\n  class InitDiskCacheTask extends AsyncTask<File, Void, Void> {\n      @Override\n      protected Void doInBackground(File... params) {\n          synchronized (mDiskCacheLock) {//同步锁\n              File cacheDir = params[0];//缓存文件\n              mDiskLruCache = DiskLruCache.open(cacheDir, DISK_CACHE_SIZE);\n              mDiskCacheStarting = false; //完成初始化磁盘加载\n              mDiskCacheLock.notifyAll(); //唤起其他休眠线程\n          }\n          return null;\n      }\n  }\n  //异步加载图片的task，\n  class BitmapWorkerTask extends AsyncTask<Integer, Void, Bitmap> {\n      ...\n      // 解码图像\n      @Override\n      protected Bitmap doInBackground(Integer... params) {\n          final String imageKey = String.valueOf(params[0]);\n\n          //后台线程检查磁盘缓存\n          Bitmap bitmap = getBitmapFromDiskCache(imageKey);\n\n          if (bitmap == null) { // 磁盘缓存没有所需图像\n              // 正常途径加载\n              final Bitmap bitmap = decodeSampledBitmapFromResource(\n                      getResources(), params[0], 100, 100));\n          }\n\n          //并将优化后的图像加入磁盘缓存\n          addBitmapToCache(imageKey, bitmap);\n\n          return bitmap;\n      }\n      ...\n  }\n  //加入磁盘缓存\n  public void addBitmapToCache(String key, Bitmap bitmap) {\n      // 先加入内存缓存\n      if (getBitmapFromMemCache(key) == null) {\n          mMemoryCache.put(key, bitmap);\n      }\n\n      // 然后加入到磁盘缓存\n      synchronized (mDiskCacheLock) {\n          if (mDiskLruCache != null && mDiskLruCache.get(key) == null) {\n              mDiskLruCache.put(key, bitmap);\n          }\n      }\n  }\n  //从磁盘缓存获取图像\n  public Bitmap getBitmapFromDiskCache(String key) {\n      synchronized (mDiskCacheLock) {//同步获取锁\n          // 等待后台线程获取磁盘缓存\n          while (mDiskCacheStarting) {\n              try {\n                  mDiskCacheLock.wait();\n              } catch (InterruptedException e) {}\n          }\n          if (mDiskLruCache != null) {\n              return mDiskLruCache.get(key);\n          }\n      }\n      return null;\n  }\n\n  // 为特定的app创建唯一的子文件夹，优先使用外部sd卡，若没有，就使用内部sd卡\n  public static File getDiskCacheDir(Context context, String uniqueName) {\n      // 检查是否有外部存储，否则用内部存储\n      final String cachePath =\n              Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState()) ||\n                      !isExternalStorageRemovable() ? getExternalCacheDir(context).getPath() :\n                              context.getCacheDir().getPath();\n\n      return new File(cachePath + File.separator + uniqueName);\n  }\n  ```\n\n  > **注意：**如上使用==同步锁==是为了防止在后台异步I/O操作时候，错误读取。\n\n  内存缓存检查可以在UI线程操作，而磁盘缓存需要在后台线程。\n\n- ##### 处理配置改变（Handle Configuration Changes）\n\n  Android的配置信息发生变化，Activity可能会随之变化、销毁重建。平滑恢复原有图像，创造良好用户体验，`setRetainInstance(true)`保留的一个`Fragement`实例可以将缓存重新附着与Activity上。\n\n  ```java\n  private LruCache<String, Bitmap> mMemoryCache;\n\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n      ...\n        //RetainFragment\n      RetainFragment retainFragment =\n              RetainFragment.findOrCreateRetainFragment(getFragmentManager());\n    //获取缓存对象  \n    mMemoryCache = retainFragment.mRetainedCache;\n      if (mMemoryCache == null) {\n          mMemoryCache = new LruCache<String, Bitmap>(cacheSize) {\n              ... // 初始化缓存\n          }\n          retainFragment.mRetainedCache = mMemoryCache;\n      }\n      ...\n  }\n  //自定义内部类Fragment，用于存储缓存对象？？\n  class RetainFragment extends Fragment {\n      private static final String TAG = \"RetainFragment\";\n      public LruCache<String, Bitmap> mRetainedCache;\n\n      public RetainFragment() {}\n\n      public static RetainFragment findOrCreateRetainFragment(FragmentManager fm) {\n          RetainFragment fragment = (RetainFragment) fm.findFragmentByTag(TAG);\n          if (fragment == null) {\n              fragment = new RetainFragment();\n              fm.beginTransaction().add(fragment, TAG).commit();\n          }\n          return fragment;\n      }\n\n      @Override\n      public void onCreate(Bundle savedInstanceState) {\n          super.onCreate(savedInstanceState);\n          setRetainInstance(true);\n      }\n  }\n  ```\n\n#### 4、管理Bitmap的内存\n\n关于Bitmap内存管理了解两点：1、Android2.3之后GC回收并发执行，内存不引用，会被立即回收。2、Android3.0以后bitmap引用和数据一同存放在`Dalvik堆`内存中。\n\n- ##### Android2.3以下版本的内存管理\n\n  推荐使用`recycle()`方法，低版本Android单线程GC。使用引用计数法：\n\n  ```java\n  private int mCacheRefCount=0;//引用计数\n  private int mDisplayRefCount = 0;//引用计数\n  ...\n  //通知drawable显示状态发生改变，drawable引用计数来决定引用状态和显示\n  public void setIsDisplayed(boolean isDisplayed) {\n      synchronized (this) {\n          if (isDisplayed) {\n              mDisplayRefCount++;\n              mHasBeenDisplayed = true;\n          } else {\n              mDisplayRefCount--;\n          }\n      }\n      // Check to see if recycle() can be called.\n      checkState();\n  }\n  // Notify the drawable that the cache state has changed.\n  // Keep a count to determine when the drawable is no longer being cached.\n  public void setIsCached(boolean isCached) {\n      synchronized (this) {\n          if (isCached) {\n              mCacheRefCount++;\n          } else {\n              mCacheRefCount--;\n          }\n      }\n      // Check to see if recycle() can be called.\n      checkState();\n  }\n\n  private synchronized void checkState() {\n      // If the drawable cache and display ref counts = 0, and this drawable\n      // has been displayed, then recycle.\n      if (mCacheRefCount <= 0 && mDisplayRefCount <= 0 && mHasBeenDisplayed\n              && hasValidBitmap()) {\n          getBitmap().recycle();\n      }\n  }\n  private synchronized boolean hasValidBitmap() {\n      Bitmap bitmap = getBitmap();\n      return bitmap != null && !bitmap.isRecycled();\n  }\n  ```\n\n- ##### Android3.0以上版本内存管理\n\n  API 11引入`BitmapFactory.Options.inBitmap`使Bitmap在加载时候可以重中已存在的，但是大小一样的位图（< API 19时候）。\n\n- 保存Bitmap以备复用\n\n  android3.0以上，bitmap从L如Cache移除时，Bitmap的软引用会被村房子啊Hashset中，以便`inBitmap`复用。\n\n  ```java\n  Set<SoftReference<Bitmap>> mReusableBitmaps;\n  private LruCache<String, BitmapDrawable> mMemoryCache;\n\n  // If you're running on Honeycomb or newer, create a\n  // synchronized HashSet of references to reusable bitmaps.\n  if (Utils.hasHoneycomb()) {\n      mReusableBitmaps =\n              Collections.synchronizedSet(new HashSet<SoftReference<Bitmap>>());\n  }\n\n  mMemoryCache = new LruCache<String, BitmapDrawable>(mCacheParams.memCacheSize) {\n\n      // Notify the removed entry that is no longer being cached.\n      @Override\n      protected void entryRemoved(boolean evicted, String key,\n              BitmapDrawable oldValue, BitmapDrawable newValue) {\n          if (RecyclingBitmapDrawable.class.isInstance(oldValue)) {\n              // The removed entry is a recycling drawable, so notify it\n              // that it has been removed from the memory cache.\n              ((RecyclingBitmapDrawable) oldValue).setIsCached(false);\n          } else {\n              // The removed entry is a standard BitmapDrawable.\n              if (Utils.hasHoneycomb()) {\n                  // We're running on Honeycomb or later, so add the bitmap\n                  // to a SoftReference set for possible use with inBitmap later.\n                  mReusableBitmaps.add\n                          (new SoftReference<Bitmap>(oldValue.getBitmap()));\n              }\n          }\n      }\n  ....\n  }\n  ```\n\n- ##### 使用已经存在的Bitmap\n\n  ```java\n  public static Bitmap decodeSampledBitmapFromFile(String filename,\n          int reqWidth, int reqHeight, ImageCache cache) {\n\n      final BitmapFactory.Options options = new BitmapFactory.Options();\n      ...\n      BitmapFactory.decodeFile(filename, options);\n      ...\n\n      // If we're running on Honeycomb or newer, try to use inBitmap.\n      if (Utils.hasHoneycomb()) {\n          addInBitmapOptions(options, cache);\n      }\n      ...\n      return BitmapFactory.decodeFile(filename, options);\n  }\n  //查找适合且可复用的bitmap，设置到inBitmap的属性值，\n  private static void addInBitmapOptions(BitmapFactory.Options options,\n          ImageCache cache) {\n      // inBitmap only works with mutable bitmaps, so force the decoder to\n      // return mutable bitmaps.\n      options.inMutable = true;\n\n      if (cache != null) {\n          // Try to find a bitmap to use for inBitmap.\n          Bitmap inBitmap = cache.getBitmapFromReusableSet(options);\n\n          if (inBitmap != null) {\n              // If a suitable bitmap has been found, set it as the value of\n              // inBitmap.\n              options.inBitmap = inBitmap;\n          }\n      }\n  }\n\n  // This method iterates through the reusable bitmaps, looking for one\n  // to use for inBitmap:\n  protected Bitmap getBitmapFromReusableSet(BitmapFactory.Options options) {\n          Bitmap bitmap = null;\n\n      if (mReusableBitmaps != null && !mReusableBitmaps.isEmpty()) {\n          synchronized (mReusableBitmaps) {\n              final Iterator<SoftReference<Bitmap>> iterator\n                      = mReusableBitmaps.iterator();\n              Bitmap item;\n\n              while (iterator.hasNext()) {\n                  item = iterator.next().get();\n\n                  if (null != item && item.isMutable()) {\n                      // Check to see it the item can be used for inBitmap.\n                      if (canUseForInBitmap(item, options)) {\n                          bitmap = item;\n\n                          // Remove from reusable set so it can't be used again.\n                          iterator.remove();\n                          break;\n                      }\n                  } else {\n                      // Remove from the set if the reference has been cleared.\n                      iterator.remove();\n                  }\n              }\n          }\n      }\n      return bitmap;\n  }\n  ```\n\n  判断Bitmap是否符合inBitmap的要求：\n\n  ```java\n  static boolean canUseForInBitmap(\n          Bitmap candidate, BitmapFactory.Options targetOptions) {\n\n      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n          // From Android 4.4 (KitKat) onward we can re-use if the byte size of\n          // the new bitmap is smaller than the reusable bitmap candidate\n          // allocation byte count.\n          int width = targetOptions.outWidth / targetOptions.inSampleSize;\n          int height = targetOptions.outHeight / targetOptions.inSampleSize;\n          int byteCount = width * height * getBytesPerPixel(candidate.getConfig());\n          return byteCount <= candidate.getAllocationByteCount();\n      }\n\n      // On earlier versions, the dimensions must match exactly and the inSampleSize must be 1\n      return candidate.getWidth() == targetOptions.outWidth\n              && candidate.getHeight() == targetOptions.outHeight\n              && targetOptions.inSampleSize == 1;\n  }\n\n  /**\n   * A helper function to return the byte usage per pixel of a bitmap based on its configuration.\n   */\n  static int getBytesPerPixel(Config config) {\n      if (config == Config.ARGB_8888) {\n          return 4;\n      } else if (config == Config.RGB_565) {\n          return 2;\n      } else if (config == Config.ARGB_4444) {\n          return 2;\n      } else if (config == Config.ALPHA_8) {\n          return 1;\n      }\n      return 1;\n  }\n  ```\n\n#### 5、在UI上显示Bitmap\n\n本节学习如何综合使用后台线程与缓存机制，将图像加载到ViewPager或Grid View控件上，并处理并发与配置改变的问题。\n\n- ##### 实现加载图片到View Pager\n\n  `Swipe View Pattern`是滑动显示的设计模型。可通过`PagerAdapter`与`ViewPager`控件实现该效果。而`FragmentStatePagerAdapter`更为合适，因为其能在Fragment状态改变时保存状态值。减少内存消耗。少量图片的话，`PagerAdapter与FragmentPagerAdapter`都可。\n\n  ```java\n  public class ImageDetailActivity extends FragmentActivity {\n      public static final String EXTRA_IMAGE = \"extra_image\";\n\n      private ImagePagerAdapter mAdapter;//adapter\n      private ViewPager mPager;//viewpager\n\n      // 用于传递给viewpager 的adapter的图片数据资源\n      public final static Integer[] imageResIds = new Integer[] {\n              R.drawable.sample_image_1, R.drawable.sample_image_2, R.drawable.sample_image_3,\n              R.drawable.sample_image_4, R.drawable.sample_image_5, R.drawable.sample_image_6,\n              R.drawable.sample_image_7, R.drawable.sample_image_8, R.drawable.sample_image_9};\n\n      @Override\n      public void onCreate(Bundle savedInstanceState) {\n          super.onCreate(savedInstanceState);\n          setContentView(R.layout.image_detail_pager); // 就一个viewpager\n  \t\t//初始化控件，并绑定适配器\n          mAdapter = new ImagePagerAdapter(getSupportFragmentManager(), imageResIds.length);\n          mPager = (ViewPager) findViewById(R.id.pager);\n          mPager.setAdapter(mAdapter);\n      }\n\n      public static class ImagePagerAdapter extends FragmentStatePagerAdapter {\n          private final int mSize;\n  \t\t//\n          public ImagePagerAdapter(FragmentManager fm, int size) {\n              super(fm);\n              mSize = size;\n          }\n\n          @Override\n          public int getCount() {\n              return mSize;\n          }\n  \t\t//返回fragment对象\n          @Override\n          public Fragment getItem(int position) {\n              return ImageDetailFragment.newInstance(position);\n          }\n      }\n  }\n  ```\n\n  Fragment里面包含Image View控件\n\n  ```java\n  public class ImageDetailFragment extends Fragment {\n      private static final String IMAGE_DATA_EXTRA = \"resId\";\n      private int mImageNum;//图像数目\n      private ImageView mImageView;//image view控件\n  \t//构造函数，接收图片数目参数\n      static ImageDetailFragment newInstance(int imageNum) {\n          final ImageDetailFragment f = new ImageDetailFragment();\n          final Bundle args = new Bundle();\n          args.putInt(IMAGE_DATA_EXTRA, imageNum);\n          f.setArguments(args);\n          return f;\n      }\n\n      // Empty constructor, required as per Fragment docs\n      public ImageDetailFragment() {}\n\n      @Override\n      public void onCreate(Bundle savedInstanceState) {\n          super.onCreate(savedInstanceState);\n          mImageNum = getArguments() != null ? getArguments().getInt(IMAGE_DATA_EXTRA) : -1;\n      }\n\n      @Override\n      public View onCreateView(LayoutInflater inflater, ViewGroup container,\n              Bundle savedInstanceState) {\n          // image_detail_fragment.xml contains just an ImageView\n          final View v = inflater.inflate(R.layout.image_detail_fragment, container, false);\n          mImageView = (ImageView) v.findViewById(R.id.imageView);\n          return v;\n      }\n\n      @Override\n      public void onActivityCreated(Bundle savedInstanceState) {\n          super.onActivityCreated(savedInstanceState);\n          final int resId = ImageDetailActivity.imageResIds[mImageNum];\n          mImageView.setImageResource(resId); // Load image into ImageView\n      }\n  }\n  ```\n\n  ==**如上方式，可能会阻塞UI线程**==，改用AsyncTask最好：\n\n  ```java\n  public class ImageDetailActivity extends FragmentActivity {\n      ...\n  \t//后台加载图片\n      public void loadBitmap(int resId, ImageView imageView) {\n          mImageView.setImageResource(R.drawable.image_placeholder);\n        //后台执行\n          BitmapWorkerTask task = new BitmapWorkerTask(mImageView);\n          task.execute(resId);\n      }\n\n      ... // include BitmapWorkerTask class\n  }\n\n  public class ImageDetailFragment extends Fragment {\n      ...\n\n      @Override\n      public void onActivityCreated(Bundle savedInstanceState) {\n          super.onActivityCreated(savedInstanceState);\n          if (ImageDetailActivity.class.isInstance(getActivity())) {\n              final int resId = ImageDetailActivity.imageResIds[mImageNum];\n              //调用上面的后台加载图片\n              ((ImageDetailActivity) getActivity()).loadBitmap(resId, mImageView);\n          }\n      }\n  }\n  ```\n\n  后台的操作可以更为合理，加载并缓存图像\n\n  ```java\n  public class ImageDetailActivity extends FragmentActivity {\n      ...\n      private LruCache mMemoryCache;\n      @Override\n      public void onCreate(Bundle savedInstanceState) {\n          ...\n          // initialize LruCache as per Use a Memory Cache section\n      }\n      public void loadBitmap(int resId, ImageView imageView) {\n          final String imageKey = String.valueOf(resId);\n\n          final Bitmap bitmap = mMemoryCache.get(imageKey);\n          if (bitmap != null) {\n              mImageView.setImageBitmap(bitmap);\n          } else {\n              mImageView.setImageResource(R.drawable.image_placeholder);\n              BitmapWorkerTask task = new BitmapWorkerTask(mImageView);\n              task.execute(resId);\n          }\n      }\n      ... // include updated BitmapWorkerTask from Use a Memory Cache section\n  }\n  ```\n\n- ##### 实现加载图片到GridView\n\n  如下场景，Fragment内置Grid View，item是Image View：\n\n  ```java\n  public class ImageGridFragment extends Fragment implements AdapterView.OnItemClickListener {\n      private ImageAdapter mAdapter;\n\n      //静态加载的图片资源，用于适配器\n      public final static Integer[] imageResIds = new Integer[] {\n              R.drawable.sample_image_1, R.drawable.sample_image_2, R.drawable.sample_image_3,\n              R.drawable.sample_image_4, R.drawable.sample_image_5, R.drawable.sample_image_6,\n              R.drawable.sample_image_7, R.drawable.sample_image_8, R.drawable.sample_image_9};\n\n      // Empty constructor as per Fragment docs\n      public ImageGridFragment() {}\n\n      @Override\n      public void onCreate(Bundle savedInstanceState) {\n          super.onCreate(savedInstanceState);\n          mAdapter = new ImageAdapter(getActivity());\n      }\n\n      @Override\n      public View onCreateView(\n              LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        //初始化控件，并绑定适配器，注册监听  \n        final View v = inflater.inflate(R.layout.image_grid_fragment, container, false);\n          final GridView mGridView = (GridView) v.findViewById(R.id.gridView);\n          mGridView.setAdapter(mAdapter);\n          mGridView.setOnItemClickListener(this);\n          return v;\n      }\n\n      @Override\n      public void onItemClick(AdapterView parent, View v, int position, long id) {\n          final Intent i = new Intent(getActivity(), ImageDetailActivity.class);\n          i.putExtra(ImageDetailActivity.EXTRA_IMAGE, position);\n          startActivity(i);\n      }\n\n      private class ImageAdapter extends BaseAdapter {\n          private final Context mContext;\n\n          public ImageAdapter(Context context) {\n              super();\n              mContext = context;\n          }\n\n          @Override\n          public int getCount() {\n              return imageResIds.length;\n          }\n\n          @Override\n          public Object getItem(int position) {\n              return imageResIds[position];\n          }\n\n          @Override\n          public long getItemId(int position) {\n              return position;\n          }\n\n          @Override\n          public View getView(int position, View convertView, ViewGroup container) {\n              ImageView imageView;\n              if (convertView == null) { // 判断是否是循环复用的item view，不是的话，需要初始化一些属性。\n                  imageView = new ImageView(mContext);\n                  imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);\n                  imageView.setLayoutParams(new GridView.LayoutParams(\n                          LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n              } else {\n                  imageView = (ImageView) convertView;\n              }\n          //请注意下面的代码，如此可能会耗时，阻塞UI\n          imageView.setImageResource(imageResIds[position]); // Load image into ImageView\n          return imageView;\n      }\n  }\n  ```\n\n  考虑UI的可能阻塞，以及GridView引起的并发问题，代码优化如下：\n\n  ```java\n  public class ImageGridFragment extends Fragment implements AdapterView.OnItemClickListener {\n      ...\n\n      private class ImageAdapter extends BaseAdapter {\n          ...\n\n          @Override\n          public View getView(int position, View convertView, ViewGroup container) {\n              ...\n              loadBitmap(imageResIds[position], imageView)\n              return imageView;\n          }\n      }\n  \t//异步加载图像\n      public void loadBitmap(int resId, ImageView imageView) {\n          if (cancelPotentialWork(resId, imageView)) {\n              final BitmapWorkerTask task = new BitmapWorkerTask(imageView);\n              final AsyncDrawable asyncDrawable =\n                      new AsyncDrawable(getResources(), mPlaceHolderBitmap, task);\n              imageView.setImageDrawable(asyncDrawable);\n              task.execute(resId);\n          }\n      }\n  \t//用于绑定到imageView的drawable\n      static class AsyncDrawable extends BitmapDrawable {\n          private final WeakReference bitmapWorkerTaskReference;\n\n          public AsyncDrawable(Resources res, Bitmap bitmap,\n                  BitmapWorkerTask bitmapWorkerTask) {\n              super(res, bitmap);\n              bitmapWorkerTaskReference =\n                  new WeakReference(bitmapWorkerTask);\n          }\n\n          public BitmapWorkerTask getBitmapWorkerTask() {\n              return bitmapWorkerTaskReference.get();\n          }\n      }\n  \t//判断imageview是否已经有加载图像的task\n      public static boolean cancelPotentialWork(int data, ImageView imageView) {\n          final BitmapWorkerTask bitmapWorkerTask = getBitmapWorkerTask(imageView);\n\n          if (bitmapWorkerTask != null) {\n              final int bitmapData = bitmapWorkerTask.data;\n              if (bitmapData != data) {\n                  // Cancel previous task\n                  bitmapWorkerTask.cancel(true);\n              } else {\n                  // The same work is already in progress\n                  return false;\n              }\n          }\n          // No task associated with the ImageView, or an existing task was cancelled\n          return true;\n      }\n  \t//获取图像加载task\n      private static BitmapWorkerTask getBitmapWorkerTask(ImageView imageView) {\n         if (imageView != null) {\n             final Drawable drawable = imageView.getDrawable();\n             if (drawable instanceof AsyncDrawable) {\n                 final AsyncDrawable asyncDrawable = (AsyncDrawable) drawable;\n                 return asyncDrawable.getBitmapWorkerTask();\n             }\n          }\n          return null;\n      }\n\n      ... // include updated BitmapWorkerTask class\n  ```\n\n### 2、使用OpenGL ES显示图像\n\nAndroid平台提供了OpenGL ES接口，帮助我们实现更为丰富的图像显示效果。本章记述OpenGL构建应用的基础知识，包括配置、绘制对象、移动图形以及响应事件。\n\n**注意，不要混用OpenGL ES 1.x版和2.x版本的接口，因为并不通用。**\n\n#### 1、建立OpenGL ES的环境\n\n在应用中使用OpenGL ES来绘制图像，需要给它一个容器。通常实现`GLSurfaceView`做容器和`GLSurfaceView.Renderer`类来控制绘制。`GLSurfaceView`一般用于全屏或者接近全屏的View绘制，若是小范围，可以用`TextureView`。亦或者自定义View继承SurfaceView，但是会费事。\n\n- ##### 在Manifest中声明使用OpenGL ES\n\n  ```xml\n  <uses-feature android.glEsVersion=\"0x00020000\" android.required=\"true\"/>\n  ```\n\n  如果使用图像纹理压缩，则必须在清单中声明支持的压缩格式：\n\n  ```xml\n  <supports-gl-texture android:name=\"GL_OES_compressed_ETC1_RGB8_texture\"/>\n  <supports-gl-texture android:name=\"GL_OES_compressed_paletted_texture\"/>\n  ...\n  ```\n\n  使用OpenGL ES的App可以Activity中使用GLSurfaceView布局。\n\n  ```java\n  //要求api>=8\n  public class OpenGLES20Activity extends Activity {\n\n      private GLSurfaceView mGLView;\n\n      @Override\n      public void onCreate(Bundle savedInstanceState) {\n          super.onCreate(savedInstanceState);\n  \t\t//创建GLSurfaceView对象，设置为Activity布局。\n          mGLView = new MyGLSurfaceView(this);\n          setContentView(mGLView);\n      }\n  }\n  ```\n- ##### 构建一个GLSurfaceView对象\n    GLSurfaceView是一个特殊的view，用于绘制OpenGL ES图像的一个容器。其内部类GLSurfaceView.Renderer用于控制绘制。\n    一般需要继承`GLSurfaceView`来用于自主控制各类触控事件。\n    ```java\n    class MyGLSurfaceView extends GLSurfaceView {\n\n        private final MyGLRenderer mRenderer;\n\n        public MyGLSurfaceView(Context context){\n            super(context);\n\n            // Create an OpenGL ES 2.0 context\n            setEGLContextClientVersion(2);\n\n            mRenderer = new MyGLRenderer();\n\n            // Set the Renderer for drawing on the GLSurfaceView\n            setRenderer(mRenderer);\n            // Render the view only when there is a change in the drawing data\n            //设置此属性的话，除非调用requestRender()，否则GLSurfaceView不会刷新。只当有图像变化才会刷新。\n            setRenderMode(GLSurfaceView.RENDERMODE_WHEN_DIRTY);\n        }\n    }\n    ```\n- ##### 构建一个渲染类\n    `GLSurfaceView.Renderer`被称为渲染器，控制图像绘制。Android可调用：\n\n    - onSurfaceCreated();调用一次，用于创建OpenGL ES环境\n    - onDrawFrame();每次重绘View时调用。\n    - onSurfaceChanged();View的几何形态变化时调用。\n\n    示例：\n    ```java\n    public class MyGLRenderer implements GLSurfaceView.Renderer {\n\n        public void onSurfaceCreated(GL10 unused, EGLConfig config) {\n            // 设置背景框架颜色，此处为黑色，ARGB值\n            GLES20.glClearColor(0.0f, 0.0f, 0.0f, 1.0f);\n        }\n\n        public void onDrawFrame(GL10 unused) {\n            // 重绘背景色\n            GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT);\n        }\n\n        public void onSurfaceChanged(GL10 unused, int width, int height) {\n            GLES20.glViewport(0, 0, width, height);\n        }\n    }\n    ```\n#### 2、定义shapes\n了解了OpenGL ES的基本概念后，便可以学习如何绘制基本图形。\n- 定义一个三角形\n    OpenGL ES允许我们使用三维空间坐标来绘制图形，通常会定义float坐标数组，为了高效此处使用了\n    ByteBuffer：\n    ```java\n    public class Triangle {\n\n        private FloatBuffer vertexBuffer;//浮点数组\n\n        // 数组中含有的坐标点数\n        static final int COORDS_PER_VERTEX = 3;\n        static float triangleCoords[] = {   //坐标点逆时针顺序\n                0.0f,  0.622008459f, 0.0f, // 顶点\n                -0.5f, -0.311004243f, 0.0f, // 左下角\n                0.5f, -0.311004243f, 0.0f  //右下角\n        };\n\n        //设置RGB，Alpha\n        float color[] = { 0.63671875f, 0.76953125f, 0.22265625f, 1.0f };\n\n        public Triangle() {\n            // initialize vertex byte buffer for shape coordinates\n            ByteBuffer bb = ByteBuffer.allocateDirect(\n                    // (number of coordinate values * 4 bytes per float)\n                    triangleCoords.length * 4);\n            // use the device hardware's native byte order\n            bb.order(ByteOrder.nativeOrder());\n\n            // create a floating point buffer from the ByteBuffer\n            vertexBuffer = bb.asFloatBuffer();\n            // add the coordinates to the FloatBuffer\n            vertexBuffer.put(triangleCoords);\n            // set the buffer to read the first coordinate\n            vertexBuffer.position(0);\n        }\n    }\n    ```\n    默认情况下，OpenGL ES会有一个[0,0,0]的三维坐标系。更多的需要参考OpenGL手册。\n- 定义一个矩形\n    如下示例演示通过定义两个三角形来实现一个矩形。\n    ![矩形](第四篇、Android图像与动画/ccw-square.png)\n      ```java\n      //绘制两个三角形，所以使用一个绘制列表来通知OpenGL如何绘制顶点。\n      public class Square {\n\n          private FloatBuffer vertexBuffer;\n          private ShortBuffer drawListBuffer;\n\n          // number of coordinates per vertex in this array\n          static final int COORDS_PER_VERTEX = 3;\n          static float squareCoords[] = {\n                  -0.5f,  0.5f, 0.0f,   // top left\n                  -0.5f, -0.5f, 0.0f,   // bottom left\n                  0.5f, -0.5f, 0.0f,   // bottom right\n                  0.5f,  0.5f, 0.0f }; // top right\n\n          private short drawOrder[] = { 0, 1, 2, 0, 2, 3 }; // order to draw vertices\n\n          public Square() {\n              // initialize vertex byte buffer for shape coordinates\n              ByteBuffer bb = ByteBuffer.allocateDirect(\n              // (# of coordinate values * 4 bytes per float)\n                      squareCoords.length * 4);\n              bb.order(ByteOrder.nativeOrder());\n              vertexBuffer = bb.asFloatBuffer();\n              vertexBuffer.put(squareCoords);\n              vertexBuffer.position(0);\n\n              // initialize byte buffer for the draw list\n              ByteBuffer dlb = ByteBuffer.allocateDirect(\n              // (# of coordinate values * 2 bytes per short)\n                      drawOrder.length * 2);\n              dlb.order(ByteOrder.nativeOrder());\n              drawListBuffer = dlb.asShortBuffer();\n              drawListBuffer.put(drawOrder);\n              drawListBuffer.position(0);\n          }\n      }\n      ```\n#### 3、绘制shapes\n\n如上小节只是介绍了如何定义一个shape图形，本节将介绍如何绘制出需要的图形。出于内存和效率考虑，\n除非加载的图形变化，一般都在`onSurfaceCreated()`中初始化shape图形。\n- ##### 初始化图形\n    ```java\n    public class MyGLRenderer implements GLSurfaceView.Renderer {\n\n        ...\n        private Triangle mTriangle;\n        private Square   mSquare;\n\n        public void onSurfaceCreated(GL10 unused, EGLConfig config) {\n            ...\n\n            // initialize a triangle\n            mTriangle = new Triangle();\n            // initialize a square\n            mSquare = new Square();\n        }\n        ...\n    }\n    ```\n\n    使用OpenGL ES 绘制一个定义好的图形，需要如下步骤：\n\n    - 顶点着色器（Vertex Shader）：用于渲染顶点的OpenGL ES 代码\n    - 片段着色器（Fragment Shader）：使用颜色和纹理渲染图形表面的OpenGL ES 代码\n    - 程式（Program）： OpenGL ES对象，包含各类着色器等。\n\n    示例:\n    ```java\n    private final String vertexShaderCode =\n        \"attribute vec4 vPosition;\" +\n        \"void main() {\" +\n        \"  gl_Position = vPosition;\" +\n        \"}\";\n\n    private final String fragmentShaderCode =\n        \"precision mediump float;\" +\n        \"uniform vec4 vColor;\" +\n        \"void main() {\" +\n        \"  gl_FragColor = vColor;\" +\n        \"}\";\n\n    ...\n    ```\n    着色器包含OpenGL Shading Language（GLSL）代码，需要先编译，\n    ```java\n    public static int loadShader(int type, String shaderCode){\n\n        // create a vertex shader type (GLES20.GL_VERTEX_SHADER)\n        // or a fragment shader type (GLES20.GL_FRAGMENT_SHADER)\n        int shader = GLES20.glCreateShader(type);\n\n        // add the source code to the shader and compile it\n        GLES20.glShaderSource(shader, shaderCode);\n        GLES20.glCompileShader(shader);\n\n        return shader;\n    }\n    ```\n- ##### 画图\n    为了绘制你的图形，你必须编译着色器代码，将它们添加至一个OpenGL ES Program对象中，然后执行链接。\n    在你的绘制对象的构造函数里做这些事情，这样上述步骤就只用执行一次。\n\n    > Note：编译OpenGL ES着色器及链接操作对于CPU周期和处理时间而言，消耗是巨大的，所以你应该避免重复执行这些事情。\n    > 如果在执行期间不知道着色器的内容，那么你应该在构建你的应用时，确保它们只被创建了一次，并且缓存以备后续使用。\n\n    ```java\n    public class Triangle() {\n        ...\n\n         private final int mProgram;\n\n        public Triangle() {\n            ...\n\n            int vertexShader = MyGLRenderer.loadShader(GLES20.GL_VERTEX_SHADER,\n                                                vertexShaderCode);\n            int fragmentShader = MyGLRenderer.loadShader(GLES20.GL_FRAGMENT_SHADER,\n                                                fragmentShaderCode);\n\n            // create empty OpenGL ES Program\n            mProgram = GLES20.glCreateProgram();\n\n            // add the vertex shader to program\n            GLES20.glAttachShader(mProgram, vertexShader);\n            // add the fragment shader to program\n            GLES20.glAttachShader(mProgram, fragmentShader);\n\n            // creates OpenGL ES program executables\n            GLES20.glLinkProgram(mProgram);\n        }\n    }\n    ```\n    绘制属性会根据图形而变化，就需要将变化逻辑一同写入绘制参数，\n    ```java\n    private int mPositionHandle;\n    private int mColorHandle;\n\n    private final int vertexCount = triangleCoords.length / COORDS_PER_VERTEX;\n    private final int vertexStride = COORDS_PER_VERTEX * 4; // 4 bytes per vertex\n\n    public void draw() {\n        // Add program to OpenGL ES environment\n        GLES20.glUseProgram(mProgram);\n\n        // get handle to vertex shader's vPosition member\n        mPositionHandle = GLES20.glGetAttribLocation(mProgram, \"vPosition\");\n\n        // Enable a handle to the triangle vertices\n        GLES20.glEnableVertexAttribArray(mPositionHandle);\n\n        // Prepare the triangle coordinate data\n        GLES20.glVertexAttribPointer(mPositionHandle, COORDS_PER_VERTEX,\n                                    GLES20.GL_FLOAT, false,\n                                    vertexStride, vertexBuffer);\n\n        // get handle to fragment shader's vColor member\n        mColorHandle = GLES20.glGetUniformLocation(mProgram, \"vColor\");\n\n        // Set color for drawing the triangle\n        GLES20.glUniform4fv(mColorHandle, 1, color, 0);\n\n        // Draw the triangle\n        GLES20.glDrawArrays(GLES20.GL_TRIANGLES, 0, vertexCount);\n\n        // Disable vertex array\n        GLES20.glDisableVertexAttribArray(mPositionHandle);\n    }\n    ```\n    如此只需要在渲染器的`onDrawFrame()`中调用上面的`onDraw()`方法即可。\n    ![绘制图形](第四篇、Android图像与动画/ogl-triangle.png)\n#### 3、运用投影和相机视角\n在OpenGL ES 环境中，利用投影和相机视角可以将图像更为逼真的显示。\n1. 投影(Projection)：此类变化基于GLSurfaceView的长宽。\n2. 相机视角(Camera View):此类变化基于OpenGL ES 的虚拟相机。\n\n- ##### 定义一个投影\n  投影变换的数据计算在GLSurfaceView.Render类中的onSurfaceChanged()中执行。\n```java\n// mMVPMatrix is an abbreviation for \"Model View Projection Matrix\"\nprivate final float[] mMVPMatrix = new float[16];\nprivate final float[] mProjectionMatrix = new float[16];\nprivate final float[] mViewMatrix = new float[16];\n\n@Override\npublic void onSurfaceChanged(GL10 unused, int width, int height) {\n    GLES20.glViewport(0, 0, width, height);\n\n    float ratio = (float) width / height;\n\n    // this projection matrix is applied to object coordinates\n    // in the onDrawFrame() method\n    Matrix.frustumM(mProjectionMatrix, 0, -ratio, ratio, -1, 1, 3, 7);\n}\n```\n> 若是绘图只是用投影，会让图像显得空旷，最好结合相机视角来绘制。\n\n- ##### 定义一个相机视角\n  使用`Matrix.setLookAtM()`来换算计算，再结合如上投影换算：\n```java\n@Override\npublic void onDrawFrame(GL10 unused) {\n    ...\n    // Set the camera position (View matrix)\n    Matrix.setLookAtM(mViewMatrix, 0, 0, 0, -3, 0f, 0f, 0f, 0f, 1.0f, 0.0f);\n\n    // Calculate the projection and view transformation\n    Matrix.multiplyMM(mMVPMatrix, 0, mProjectionMatrix, 0, mViewMatrix, 0);\n\n    // Draw shape\n    mTriangle.draw(mMVPMatrix);\n}\n```\n将上一节的三角形使用投影和视角绘制：\n```java\npublic class Triangle {\n    //为顶点添加渲染着色器，Matrix\n    private final String vertexShaderCode =\n        // This matrix member variable provides a hook to manipulate\n        // the coordinates of the objects that use this vertex shader\n        \"uniform mat4 uMVPMatrix;\" +\n        \"attribute vec4 vPosition;\" +\n        \"void main() {\" +\n        // the matrix must be included as a modifier of gl_Position\n        // Note that the uMVPMatrix factor *must be first* in order\n        // for the matrix multiplication product to be correct.\n        \"  gl_Position = uMVPMatrix * vPosition;\" +\n        \"}\";\n\n    // Use to access and set the view transformation\n    private int mMVPMatrixHandle;\n\n    ...\n}\n```\n修改`onDraw ()`方法\n```java\npublic void draw(float[] mvpMatrix) { // pass in the calculated transformation matrix\n    ...\n\n    // get handle to shape's transformation matrix\n    mMVPMatrixHandle = GLES20.glGetUniformLocation(mProgram, \"uMVPMatrix\");\n\n    // Pass the projection and view transformation to the shader\n    GLES20.glUniformMatrix4fv(mMVPMatrixHandle, 1, false, mvpMatrix, 0);\n\n    // Draw the triangle\n    GLES20.glDrawArrays(GLES20.GL_TRIANGLES, 0, vertexCount);\n\n    // Disable vertex array\n    GLES20.glDisableVertexAttribArray(mPositionHandle);\n}\n```\n效果如图：![视角绘图](第四篇、Android图像与动画/ogl-triangle-projected.png)\n#### 4、添加移动\nOpenGL 区别于Android的canvas和Drawable图形框架，在于其提供的特殊功能，如3D效果等。\n- ##### 旋转图像\n  在OpenGL ES2.0中新增一个变化矩阵，结合之前的投影和视角，来绘制图形移动。\n```java\nprivate float[] mRotationMatrix = new float[16];\npublic void onDrawFrame(GL10 gl) {\n    float[] scratch = new float[16];\n\n    ...\n\n    // Create a rotation transformation for the triangle\n    long time = SystemClock.uptimeMillis() % 4000L;\n    float angle = 0.090f * ((int) time);\n    Matrix.setRotateM(mRotationMatrix, 0, angle, 0, 0, -1.0f);\n\n    // Combine the rotation matrix with the projection and camera view\n    // Note that the mMVPMatrix factor *must be first* in order\n    // for the matrix multiplication product to be correct.\n    Matrix.multiplyMM(scratch, 0, mMVPMatrix, 0, mRotationMatrix, 0);\n\n    // Draw triangle\n    mTriangle.draw(scratch);\n}\n```\n> **Note:** 不要将`GLSurfaceView.RENDERMODE_WHEN_DIRTY`注释掉，否则就可能不会移动，也不会渲染。\n\n- ##### 启用连续渲染\n```java\npublic MyGLSurfaceView(Context context) {\n    ...\n    // Render the view only when there is a change in the drawing data.\n    // To allow the triangle to rotate automatically, this line is commented out:\n    //setRenderMode(GLSurfaceView.RENDERMODE_WHEN_DIRTY);\n}\n```\n#### 5、响应触摸事件\n炫酷的图形图像，也可以和用户有良好的交互体验。重写`GLSurfaceView`类的`onTouchEvent()`方法\n来响应触摸事件。\n- ##### 注册监听\n  在重写`onTouchEvent()`方法后，想要完成事件相应，就需要注册监听。\n```java\nprivate final float TOUCH_SCALE_FACTOR = 180.0f / 320;\nprivate float mPreviousX;\nprivate float mPreviousY;\n//复写onTouchEvent方法，本文用于响应MotionEvent.ACTION_MOVE事件\n@Override\npublic boolean onTouchEvent(MotionEvent e) {\n    // MotionEvent reports input details from the touch screen\n    // and other input controls. In this case, you are only\n    // interested in events where the touch position changed.\n\n    float x = e.getX();\n    float y = e.getY();\n\n    switch (e.getAction()) {\n        case MotionEvent.ACTION_MOVE:\n\n            float dx = x - mPreviousX;\n            float dy = y - mPreviousY;\n\n            // reverse direction of rotation above the mid-line\n            if (y > getHeight() / 2) {\n              dx = dx * -1 ;\n            }\n\n            // reverse direction of rotation to left of the mid-line\n            if (x < getWidth() / 2) {\n              dy = dy * -1 ;\n            }\n\n            mRenderer.setAngle(\n                    mRenderer.getAngle() +\n                    ((dx + dy) * TOUCH_SCALE_FACTOR));\n            requestRender();\n    }\n\n    mPreviousX = x;\n    mPreviousY = y;\n    return true;\n}\n```\n如上代码调用`requestRender()`来刷新绘制，通过`setRenderMode()`来提高效率，只有变化时候才绘制：\n```java\npublic MyGLSurfaceView(Context context) {\n    ...\n    // Render the view only when there is a change in the drawing data\n    setRenderMode(GLSurfaceView.RENDERMODE_WHEN_DIRTY);\n}\n```\n- ##### 公开变量旋转角度\n  旋转角度的变量需要public，包括get和set方法\n```java\npublic class MyGLRenderer implements GLSurfaceView.Renderer {\n    ...\n\n    public volatile float mAngle;\n\n    public float getAngle() {\n        return mAngle;\n    }\n\n    public void setAngle(float angle) {\n        mAngle = angle;\n    }\n}\n```\n然后在调用绘制图形的地方，填入角度值，启动旋转。\n```java\npublic void onDrawFrame(GL10 gl) {\n    ...\n    float[] scratch = new float[16];\n\n    // Create a rotation for the triangle\n    // long time = SystemClock.uptimeMillis() % 4000L;\n    // float angle = 0.090f * ((int) time);\n    Matrix.setRotateM(mRotationMatrix, 0, mAngle, 0, 0, -1.0f);\n\n    // Combine the rotation matrix with the projection and camera view\n    // Note that the mMVPMatrix factor *must be first* in order\n    // for the matrix multiplication product to be correct.\n    Matrix.multiplyMM(scratch, 0, mMVPMatrix, 0, mRotationMatrix, 0);\n\n    // Draw triangle\n    mTriangle.draw(scratch);\n}\n```\n滑动效果：![滑动效果](第四篇、Android图像与动画/ogl-triangle-touch.png)\n\n### 3、添加动画\n动画效果可以让我们的App更为炫酷，但是也要在适当的地方和时机使用它。本章主要介绍Android的一些动画效果实现。\n#### 1、View间渐变\n渐变动画通常用于View的切换，淡入淡出效果。[渐变动画](http://hukai.me/android-training-course-in-chinese/animations/anim_crossfade.mp4)\n- ##### 创建View\n  示例，一个进度圈和可滑动的view\n```xml\n<FrameLayout xmlns:android=\"/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n    <ScrollView xmlns:android=\"/apk/res/android\"\n        android:id=\"@+id/content\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\">\n\n        <TextView style=\"?android:textAppearanceMedium\"\n            android:lineSpacingMultiplier=\"1.2\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"@string/lorem_ipsum\"\n            android:padding=\"16dp\" />\n\n    </ScrollView>\n\n    <ProgressBar android:id=\"@+id/loading_spinner\"\n        style=\"?android:progressBarStyleLarge\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_gravity=\"center\" />\n\n</FrameLayout>\n```\n- ##### view设置动画\n  为上面的view设置动画效果，步骤如下：\n\n1. 设置view的成员变量，以备后用。\n2. 先设置淡入的View的visible为gone\n3. 将`config_shortAnimTime`系统属性暂存到成员变量。\n\n示例：\n```java\npublic class CrossfadeActivity extends Activity {\n\n    private View mContentView;\n    private View mLoadingView;\n    private int mShortAnimationDuration;\n\n    ...\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_crossfade);\n\n        mContentView = findViewById(R.id.content);\n        mLoadingView = findViewById(R.id.loading_spinner);\n\n        // Initially hide the content view.\n        mContentView.setVisibility(View.GONE);\n\n        // Retrieve and cache the system's default \"short\" animation time.\n        mShortAnimationDuration = getResources().getInteger(\n                android.R.integer.config_shortAnimTime);\n    }\n}\n```\n- ##### 渐变View\n  完成如上设置后，开始实现View的渐变效果：\n1. 将需要淡入的View的Visible改为VISIBLE，透明度alpha=0\n2. 将淡入的View，alpha从0--1，淡出的View，alpha从1--0\n3. 使用`Animator.AnimatorListener`中的`onAnimationEnd()`来设置淡出的view的visible为gone，即使alpha=0，但是也会占用布局资源，所以需要gone。\n```java\nprivate View mContentView;\nprivate View mLoadingView;\nprivate int mShortAnimationDuration;\n\n...\n\nprivate void crossfade() {\n\n    // Set the content view to 0% opacity but visible, so that it is visible\n    // (but fully transparent) during the animation.\n    mContentView.setAlpha(0f);\n    mContentView.setVisibility(View.VISIBLE);\n\n    // Animate the content view to 100% opacity, and clear any animation\n    // listener set on the view.\n    mContentView.animate()\n            .alpha(1f)\n            .setDuration(mShortAnimationDuration)\n            .setListener(null);\n\n    // Animate the loading view to 0% opacity. After the animation ends,\n    // set its visibility to GONE as an optimization step (it won't\n    // participate in layout passes, etc.)\n    mLoadingView.animate()\n            .alpha(0f)\n            .setDuration(mShortAnimationDuration)\n            .setListener(new AnimatorListenerAdapter() {\n                @Override\n                public void onAnimationEnd(Animator animation) {\n                    mLoadingView.setVisibility(View.GONE);\n                }\n            });\n}\n```\n#### 2、使用Viewpager实现屏幕滑动\n类似View的淡入淡出切换，而屏幕的切换是整个的界面转换，使用`supports library`的ViewPager来实现。\n[ViewPager](http://hukai.me/android-training-course-in-chinese/animations/anim_screenslide.mp4)\n- ##### 创建View\n```xml\n<!-- fragment_screen_slide_page.xml -->\n<ScrollView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:id=\"@+id/content\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\" >\n\n    <TextView style=\"?android:textAppearanceMedium\"\n        android:padding=\"16dp\"\n        android:lineSpacingMultiplier=\"1.2\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"@string/lorem_ipsum\" />\n</ScrollView>\n```\n如上定义一个fragment和text view\n- ##### 创建Fragment\n  创建一个Fragment对象实例来展示view布局。\n```java\nimport android.support.v4.app.Fragment;\n...\npublic class ScreenSlidePageFragment extends Fragment {\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n            Bundle savedInstanceState) {\n        ViewGroup rootView = (ViewGroup) inflater.inflate(\n                R.layout.fragment_screen_slide_page, container, false);\n\n        return rootView;\n    }\n}\n```\n- ##### 添加viewPager\n  ViewPager有内建的滑动手势，配合PagerAdapter来适配数据。需要创建一个包含ViewPager的布局\n```xml\n<!-- activity_screen_slide.xml -->\n<android.support.v4.view.ViewPager\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:id=\"@+id/pager\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\" />\n```\n接下来就是创建一个Activity来关联布局，实现逻辑：\n1. content View中包含上述布局文件\n2. 创建`FragmentStatePagerAdapter`的子类，实现`getItem()`方法，把ScreenSlidePageFragment实例作为新页面补充进来。\n   PagerAdapter还需要实现getCount()方法，它返回 Adapter将要创建页面的总数（例如5个）。\n3. 关联`ViewPager`和`PagerAdapter`\n4. 处理Back按钮，按下变为在虚拟的Fragment栈中回退。如果用户已经在第一个页面了，\n   则在Activity的回退栈（back stack）中回退。\n```java\nimport android.support.v4.app.Fragment;\nimport android.support.v4.app.FragmentManager;\n...\npublic class ScreenSlidePagerActivity extends FragmentActivity {\n    //屏幕页面数目\n    private static final int NUM_PAGES = 5;\n\n    //View Pager对象，用于处理页面切换的容器\n    private ViewPager mPager;\n\n    //页面数据适配器\n    private PagerAdapter mPagerAdapter;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_screen_slide);\n\n        // 初始化数据\n        mPager = (ViewPager) findViewById(R.id.pager);\n        mPagerAdapter = new ScreenSlidePagerAdapter(getSupportFragmentManager());\n        mPager.setAdapter(mPagerAdapter);\n    }\n    //处理返回按钮的点击事件\n    @Override\n    public void onBackPressed() {\n        if (mPager.getCurrentItem() == 0) {\n            //要是第一个页面，返回按钮就是退出\n            super.onBackPressed();\n        } else {\n            //不是第一个页面，返回按钮就是返回上一个页面\n            mPager.setCurrentItem(mPager.getCurrentItem() - 1);\n        }\n    }\n\n    //简单的适配器，用于加入几个页面\n    private class ScreenSlidePagerAdapter extends FragmentStatePagerAdapter {\n        public ScreenSlidePagerAdapter(FragmentManager fm) {\n            super(fm);\n        }\n\n        @Override\n        public Fragment getItem(int position) {\n            return new ScreenSlidePageFragment();\n        }\n\n        @Override\n        public int getCount() {\n            return NUM_PAGES;\n        }\n    }\n}\n```\nViewPager包含有默认的滑屏动画，若要自定义切换动画需要实现`viewpager.transformer`接口，并补充道Viewpager中\n，实现其方法`transformPage()`。该方法会在显示页面滑动时，于其相邻的两个页面间调用。重要的参数就是当前页面\n的位置position，可以根据页面位置来设置不同的动画效果。\n```java\nViewPager mPager = (ViewPager) findViewById(R.id.pager);\n...\nmPager.setPagerTransformer(true,new ZoomOutPagerTransformer());\n```\n- ##### ZoomOutPagerTransformer\n  效果是逐渐褪色的淡出模式[演示](http://hukai.me/android-training-course-in-chinese/animations/anim_page_transformer_zoomout.mp4)\n```java\npublic class ZoomOutPageTransformer implements ViewPager.PageTransformer {\n    private static final float MIN_SCALE = 0.85f;\n    private static final float MIN_ALPHA = 0.5f;\n\n    public void transformPage(View view, float position) {\n        int pageWidth = view.getWidth();\n        int pageHeight = view.getHeight();\n\n        if (position < -1) { // [-Infinity,-1)\n            // This page is way off-screen to the left.\n            view.setAlpha(0);\n\n        } else if (position <= 1) { // [-1,1]\n            // Modify the default slide transition to shrink the page as well\n            float scaleFactor = Math.max(MIN_SCALE, 1 - Math.abs(position));\n            float vertMargin = pageHeight * (1 - scaleFactor) / 2;\n            float horzMargin = pageWidth * (1 - scaleFactor) / 2;\n            if (position < 0) {\n                view.setTranslationX(horzMargin - vertMargin / 2);\n            } else {\n                view.setTranslationX(-horzMargin + vertMargin / 2);\n            }\n\n            // Scale the page down (between MIN_SCALE and 1)\n            view.setScaleX(scaleFactor);\n            view.setScaleY(scaleFactor);\n\n            // Fade the page relative to its size.\n            view.setAlpha(MIN_ALPHA +\n                    (scaleFactor - MIN_SCALE) /\n                    (1 - MIN_SCALE) * (1 - MIN_ALPHA));\n\n        } else { // (1,+Infinity]\n            // This page is way off-screen to the right.\n            view.setAlpha(0);\n        }\n    }\n}\n```\n- ##### Depth Pager Transformer\n  右滑动潜藏效果[video](http://hukai.me/android-training-course-in-chinese/animations/anim_page_transformer_depth.mp4)\n```java\npublic class DepthPageTransformer implements ViewPager.PageTransformer {\n    private static final float MIN_SCALE = 0.75f;\n\n    public void transformPage(View view, float position) {\n        int pageWidth = view.getWidth();\n\n        if (position < -1) { // [-Infinity,-1)\n            // This page is way off-screen to the left.\n            view.setAlpha(0);\n\n        } else if (position <= 0) { // [-1,0]\n            // Use the default slide transition when moving to the left page\n            view.setAlpha(1);\n            view.setTranslationX(0);\n            view.setScaleX(1);\n            view.setScaleY(1);\n\n        } else if (position <= 1) { // (0,1]\n            // Fade the page out.\n            view.setAlpha(1 - position);\n\n            // Counteract the default slide transition\n            view.setTranslationX(pageWidth * -position);\n\n            // Scale the page down (between MIN_SCALE and 1)\n            float scaleFactor = MIN_SCALE\n                    + (1 - MIN_SCALE) * (1 - Math.abs(position));\n            view.setScaleX(scaleFactor);\n            view.setScaleY(scaleFactor);\n\n        } else { // (1,+Infinity]\n            // This page is way off-screen to the right.\n            view.setAlpha(0);\n        }\n    }\n}\n```\n#### 3、实现Card翻转动画\n通过自定义Fragment实现Card翻转效果的view切换。[card](http://hukai.me/android-training-course-in-chinese/animations/anim_card_flip.mp4)\n- ##### 创建Animator\n  创建Card翻转动画，我们需要两个Animator。一个让正面的card的右侧向左翻转渐出，一个让背面的Card向右翻转渐入。我们还需要两个 Animator让背面的card的右侧向左翻转渐入，一个让向右翻转渐入。\n\n**card_flip_left_in.xml**\n```xml\n<set xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <!-- Before rotating, immediately set the alpha to 0. -->\n    <objectAnimator\n        android:valueFrom=\"1.0\"\n        android:valueTo=\"0.0\"\n        android:propertyName=\"alpha\"\n        android:duration=\"0\" />\n\n    <!-- Rotate. -->\n    <objectAnimator\n        android:valueFrom=\"-180\"\n        android:valueTo=\"0\"\n        android:propertyName=\"rotationY\"\n        android:interpolator=\"@android:interpolator/accelerate_decelerate\"\n        android:duration=\"@integer/card_flip_time_full\" />\n\n    <!-- Half-way through the rotation (see startOffset), set the alpha to 1. -->\n    <objectAnimator\n        android:valueFrom=\"0.0\"\n        android:valueTo=\"1.0\"\n        android:propertyName=\"alpha\"\n        android:startOffset=\"@integer/card_flip_time_half\"\n        android:duration=\"1\" />\n</set>\n```\n**card_flip_left_out.xml**\n```xml\n<set xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <!-- Rotate. -->\n    <objectAnimator\n        android:valueFrom=\"0\"\n        android:valueTo=\"180\"\n        android:propertyName=\"rotationY\"\n        android:interpolator=\"@android:interpolator/accelerate_decelerate\"\n        android:duration=\"@integer/card_flip_time_full\" />\n\n    <!-- Half-way through the rotation (see startOffset), set the alpha to 0. -->\n    <objectAnimator\n        android:valueFrom=\"1.0\"\n        android:valueTo=\"0.0\"\n        android:propertyName=\"alpha\"\n        android:startOffset=\"@integer/card_flip_time_half\"\n        android:duration=\"1\" />\n</set>\n```\n**card_flip_right_in.xml**\n```xml\n<set xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <!-- Before rotating, immediately set the alpha to 0. -->\n    <objectAnimator\n        android:valueFrom=\"1.0\"\n        android:valueTo=\"0.0\"\n        android:propertyName=\"alpha\"\n        android:duration=\"0\" />\n\n    <!-- Rotate. -->\n    <objectAnimator\n        android:valueFrom=\"180\"\n        android:valueTo=\"0\"\n        android:propertyName=\"rotationY\"\n        android:interpolator=\"@android:interpolator/accelerate_decelerate\"\n        android:duration=\"@integer/card_flip_time_full\" />\n\n    <!-- Half-way through the rotation (see startOffset), set the alpha to 1. -->\n    <objectAnimator\n        android:valueFrom=\"0.0\"\n        android:valueTo=\"1.0\"\n        android:propertyName=\"alpha\"\n        android:startOffset=\"@integer/card_flip_time_half\"\n        android:duration=\"1\" />\n</set>\n```\n**card_flip_right_out.xml**\n```xml\n<set xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <!-- Rotate. -->\n    <objectAnimator\n        android:valueFrom=\"0\"\n        android:valueTo=\"-180\"\n        android:propertyName=\"rotationY\"\n        android:interpolator=\"@android:interpolator/accelerate_decelerate\"\n        android:duration=\"@integer/card_flip_time_full\" />\n\n    <!-- Half-way through the rotation (see startOffset), set the alpha to 0. -->\n    <objectAnimator\n        android:valueFrom=\"1.0\"\n        android:valueTo=\"0.0\"\n        android:propertyName=\"alpha\"\n        android:startOffset=\"@integer/card_flip_time_half\"\n        android:duration=\"1\" />\n</set>\n```\n- ##### 创建View\n  card的每个面都是一个布局，需要在Fragment中关联展示\n```xml\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"vertical\"\n    android:background=\"#a6c\"\n    android:padding=\"16dp\"\n    android:gravity=\"bottom\">\n\n    <TextView android:id=\"@android:id/text1\"\n        style=\"?android:textAppearanceLarge\"\n        android:textStyle=\"bold\"\n        android:textColor=\"#fff\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"@string/card_back_title\" />\n\n    <TextView style=\"?android:textAppearanceSmall\"\n        android:textAllCaps=\"true\"\n        android:textColor=\"#80ffffff\"\n        android:textStyle=\"bold\"\n        android:lineSpacingMultiplier=\"1.2\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"@string/card_back_description\" />\n\n</LinearLayout>\n```\n另一面：\n```xml\n<ImageView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:src=\"@drawable/image1\"\n    android:scaleType=\"centerCrop\"\n    android:contentDescription=\"@string/description_image_1\" />\n```\n- ##### 创建Fragment\n  Card的正反面都是Fragment，需要创建并关联布局\n```java\npublic class CardFlipActivity extends Activity {\n    ...\n    /**\n     * A fragment representing the front of the card.\n     */\n    public class CardFrontFragment extends Fragment {\n        @Override\n        public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                Bundle savedInstanceState) {\n            return inflater.inflate(R.layout.fragment_card_front, container, false);\n        }\n    }\n\n    /**\n     * A fragment representing the back of the card.\n     */\n    public class CardBackFragment extends Fragment {\n        @Override\n        public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                Bundle savedInstanceState) {\n            return inflater.inflate(R.layout.fragment_card_back, container, false);\n        }\n    }\n}\n```\n- ##### 实现翻转Card动画\n  创建一个framelayout来用于activity展示fragment\n```xml\n<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:id=\"@+id/container\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\" />\n```\n在Activity中实现展示\n```java\npublic class CardFlipActivity extends Activity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_activity_card_flip);\n\n        if (savedInstanceState == null) {\n            getFragmentManager()\n                    .beginTransaction()\n                    .add(R.id.container, new CardFrontFragment())\n                    .commit();\n        }\n    }\n    ...\n}\n```\n如上默认展示了card的正面，需要适时创建card的背面，并实现翻转。\n\n1. 将Fragment转换设置我们刚做的自定义动画\n\n2. 用新Fragment替换当前显示的Fragment，并且应用之前创建的动画到该事件中。\n\n3. 添加之前显示的Fragment到Fragment的回退栈（back stack）中，所以当用户按下 Back 键时，Card会翻转回来。\n\n```java\nprivate void flipCard() {\n    if (mShowingBack) {\n        getFragmentManager().popBackStack();\n        return;\n    }\n\n    // 是否正在翻转\n\n    mShowingBack = true;\n\n    // 创建并执行一个事务，新增fragment并应用自定义动画，且将fragment加入回退栈\n\n    getFragmentManager()\n            .beginTransaction()\n\n            // 使用自定义动画\n            .setCustomAnimations(\n                    R.animator.card_flip_right_in, R.animator.card_flip_right_out,\n                    R.animator.card_flip_left_in, R.animator.card_flip_left_out)\n\n            // 翻转的fragment\n            .replace(R.id.container, new CardBackFragment())\n\n            // 新增事务到回退栈\n            .addToBackStack(null)\n\n            // 提交事务\n            .commit();\n}\n```\n#### 4、View的缩放\nView的动画缩放效果，常用语图片的浏览展示。[scale](http://hukai.me/android-training-course-in-chinese/animations/anim_zoom.mp4)\n- ##### 创建View\n  示例创建了大小两个版本的文件，\n```xml\n<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:id=\"@+id/container\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n    <LinearLayout android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"vertical\"\n        android:padding=\"16dp\">\n\n        <ImageButton\n            android:id=\"@+id/thumb_button_1\"\n            android:layout_width=\"100dp\"\n            android:layout_height=\"75dp\"\n            android:layout_marginRight=\"1dp\"\n            android:src=\"@drawable/thumb1\"\n            android:scaleType=\"centerCrop\"\n            android:contentDescription=\"@string/description_image_1\" />\n\n    </LinearLayout>\n\n    <!-- This initially-hidden ImageView will hold the expanded/zoomed version of\n         the images above. Without transformations applied, it takes up the entire\n         screen. To achieve the \"zoom\" animation, this view's bounds are animated\n         from the bounds of the thumbnail button above, to its final laid-out\n         bounds.\n         -->\n\n    <ImageView\n        android:id=\"@+id/expanded_image\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:visibility=\"invisible\"\n        android:contentDescription=\"@string/description_zoom_touch_close\" />\n\n</FrameLayout>\n```\n- ##### 设置缩放动画\n  监听点击事件，实现缩放效果\n```java\npublic class ZoomActivity extends FragmentActivity {\n    // Hold a reference to the current animator,\n    // so that it can be canceled mid-way.\n    private Animator mCurrentAnimator;\n\n    // The system \"short\" animation time duration, in milliseconds. This\n    // duration is ideal for subtle animations or animations that occur\n    // very frequently.\n    private int mShortAnimationDuration;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_zoom);\n\n        // Hook up clicks on the thumbnail views.\n\n        final View thumb1View = findViewById(R.id.thumb_button_1);\n        thumb1View.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                zoomImageFromThumb(thumb1View, R.drawable.image1);\n            }\n        });\n\n        // Retrieve and cache the system's default \"short\" animation time.\n        mShortAnimationDuration = getResources().getInteger(\n                android.R.integer.config_shortAnimTime);\n    }\n    ...\n}\n```\n- ##### 缩放View\n  缩放View的效果实现：\n1. 高清大图放在IamgeView中，用于放大后再显示。\n2. 计算image View的边界。\n3. 要同步改变四个边界，用`AnimatorSet`\n4. 缩小则是类似逆向如上操作。注意view的属性需要设置gone。\n```java\nprivate void zoomImageFromThumb(final View thumbView, int imageResId) {\n    // If there's an animation in progress, cancel it\n    // immediately and proceed with this one.\n    if (mCurrentAnimator != null) {\n        mCurrentAnimator.cancel();\n    }\n\n    // Load the high-resolution \"zoomed-in\" image.\n    final ImageView expandedImageView = (ImageView) findViewById(\n            R.id.expanded_image);\n    expandedImageView.setImageResource(imageResId);\n\n    // Calculate the starting and ending bounds for the zoomed-in image.\n    // This step involves lots of math. Yay, math.\n    final Rect startBounds = new Rect();\n    final Rect finalBounds = new Rect();\n    final Point globalOffset = new Point();\n\n    // The start bounds are the global visible rectangle of the thumbnail,\n    // and the final bounds are the global visible rectangle of the container\n    // view. Also set the container view's offset as the origin for the\n    // bounds, since that's the origin for the positioning animation\n    // properties (X, Y).\n    thumbView.getGlobalVisibleRect(startBounds);\n    findViewById(R.id.container)\n            .getGlobalVisibleRect(finalBounds, globalOffset);\n    startBounds.offset(-globalOffset.x, -globalOffset.y);\n    finalBounds.offset(-globalOffset.x, -globalOffset.y);\n\n    // Adjust the start bounds to be the same aspect ratio as the final\n    // bounds using the \"center crop\" technique. This prevents undesirable\n    // stretching during the animation. Also calculate the start scaling\n    // factor (the end scaling factor is always 1.0).\n    float startScale;\n    if ((float) finalBounds.width() / finalBounds.height()\n            > (float) startBounds.width() / startBounds.height()) {\n        // Extend start bounds horizontally\n        startScale = (float) startBounds.height() / finalBounds.height();\n        float startWidth = startScale * finalBounds.width();\n        float deltaWidth = (startWidth - startBounds.width()) / 2;\n        startBounds.left -= deltaWidth;\n        startBounds.right += deltaWidth;\n    } else {\n        // Extend start bounds vertically\n        startScale = (float) startBounds.width() / finalBounds.width();\n        float startHeight = startScale * finalBounds.height();\n        float deltaHeight = (startHeight - startBounds.height()) / 2;\n        startBounds.top -= deltaHeight;\n        startBounds.bottom += deltaHeight;\n    }\n\n    // Hide the thumbnail and show the zoomed-in view. When the animation\n    // begins, it will position the zoomed-in view in the place of the\n    // thumbnail.\n    thumbView.setAlpha(0f);\n    expandedImageView.setVisibility(View.VISIBLE);\n\n    // Set the pivot point for SCALE_X and SCALE_Y transformations\n    // to the top-left corner of the zoomed-in view (the default\n    // is the center of the view).\n    expandedImageView.setPivotX(0f);\n    expandedImageView.setPivotY(0f);\n\n    // Construct and run the parallel animation of the four translation and\n    // scale properties (X, Y, SCALE_X, and SCALE_Y).\n    AnimatorSet set = new AnimatorSet();\n    set\n            .play(ObjectAnimator.ofFloat(expandedImageView, View.X,\n                    startBounds.left, finalBounds.left))\n            .with(ObjectAnimator.ofFloat(expandedImageView, View.Y,\n                    startBounds.top, finalBounds.top))\n            .with(ObjectAnimator.ofFloat(expandedImageView, View.SCALE_X,\n            startScale, 1f)).with(ObjectAnimator.ofFloat(expandedImageView,\n                    View.SCALE_Y, startScale, 1f));\n    set.setDuration(mShortAnimationDuration);\n    set.setInterpolator(new DecelerateInterpolator());\n    set.addListener(new AnimatorListenerAdapter() {\n        @Override\n        public void onAnimationEnd(Animator animation) {\n            mCurrentAnimator = null;\n        }\n\n        @Override\n        public void onAnimationCancel(Animator animation) {\n            mCurrentAnimator = null;\n        }\n    });\n    set.start();\n    mCurrentAnimator = set;\n\n    // Upon clicking the zoomed-in image, it should zoom back down\n    // to the original bounds and show the thumbnail instead of\n    // the expanded image.\n    final float startScaleFinal = startScale;\n    expandedImageView.setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View view) {\n            if (mCurrentAnimator != null) {\n                mCurrentAnimator.cancel();\n            }\n\n            // Animate the four positioning/sizing properties in parallel,\n            // back to their original values.\n            AnimatorSet set = new AnimatorSet();\n            set.play(ObjectAnimator\n                        .ofFloat(expandedImageView, View.X, startBounds.left))\n                        .with(ObjectAnimator\n                                .ofFloat(expandedImageView,\n                                        View.Y,startBounds.top))\n                        .with(ObjectAnimator\n                                .ofFloat(expandedImageView,\n                                        View.SCALE_X, startScaleFinal))\n                        .with(ObjectAnimator\n                                .ofFloat(expandedImageView,\n                                        View.SCALE_Y, startScaleFinal));\n            set.setDuration(mShortAnimationDuration);\n            set.setInterpolator(new DecelerateInterpolator());\n            set.addListener(new AnimatorListenerAdapter() {\n                @Override\n                public void onAnimationEnd(Animator animation) {\n                    thumbView.setAlpha(1f);\n                    expandedImageView.setVisibility(View.GONE);\n                    mCurrentAnimator = null;\n                }\n\n                @Override\n                public void onAnimationCancel(Animator animation) {\n                    thumbView.setAlpha(1f);\n                    expandedImageView.setVisibility(View.GONE);\n                    mCurrentAnimator = null;\n                }\n            });\n            set.start();\n            mCurrentAnimator = set;\n        }\n    });\n}\n```\n#### 5、布局动画\n布局动画是一种预加载动画，可以通过创建Layout Transition ，setLayoutTransition（）实现。\n[layout](http://hukai.me/android-training-course-in-chinese/animations/anim_layout_changes.mp4)\n- ##### 创建布局\n  为想开启动画的布局设置`android:animateLayoutChanges`属性为`true`。\n```xml\n<LinearLayout android:id=\"@+id/container\"\n    android:animateLayoutChanges=\"true\"\n    ...\n/>\n```\n- ##### 从布局中增删项目\n  代码中动态修改布局项目，实现动画\n```java\nprivate ViewGroup mContainerView;\n...\nprivate void addItem() {\n    View newView;\n    ...\n    mContainerView.addView(newView, 0);\n}\n```","slug":"第四篇、Android图像与动画","published":1,"updated":"2017-03-28T10:16:48.523Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0xj1ngi001zscowzssntem1","content":"<h2 id=\"第四篇、Android图像与动画\"><a href=\"#第四篇、Android图像与动画\" class=\"headerlink\" title=\"第四篇、Android图像与动画\"></a>第四篇、Android图像与动画</h2><p>[TOC]</p>\n<h3 id=\"第1章、高效显示Bitmap\"><a href=\"#第1章、高效显示Bitmap\" class=\"headerlink\" title=\"第1章、高效显示Bitmap\"></a>第1章、高效显示Bitmap</h3><p>本节主要介绍加载处理Bitmap对象常用方法，以避免UI线程阻塞与OOM问题。由于Android设备</p>\n<ul>\n<li>Android单个应用至少16M内存，不同分辨率屏幕的设备要求不同。<code>国内自定义ROM限制也有差异。</code></li>\n<li>Bitmap消耗内存，一张5M的高清照片，使用ARGB_8888方式加载Bitmap，则需要19M左右的内存。</li>\n<li>Android应用一般加载多个Bitmap，预先加载以备显示。</li>\n</ul>\n<p>所以如上三条，需要我们对Bitmap做优化处理。</p>\n<h4 id=\"1、高效加载大图（Loading-Large-Bitmap-Efficiently）\"><a href=\"#1、高效加载大图（Loading-Large-Bitmap-Efficiently）\" class=\"headerlink\" title=\"1、高效加载大图（Loading Large Bitmap Efficiently）\"></a>1、高效加载大图（Loading Large Bitmap Efficiently）</h4><p>本节介绍加载缩小的图片，来避免过多消耗内存，原始大小的图片和超过控件大小和设备分辨率的图片加载，在显示上并无意义，反而带来内存风险。</p>\n<ul>\n<li><h5 id=\"读取位图尺寸与类型（Read-Bitmap-Dimensions-and-Type）\"><a href=\"#读取位图尺寸与类型（Read-Bitmap-Dimensions-and-Type）\" class=\"headerlink\" title=\"读取位图尺寸与类型（Read Bitmap Dimensions and Type）\"></a>读取位图尺寸与类型（Read Bitmap Dimensions and Type）</h5><p><code>BitmapFactory</code>提供了不同类型的decode方法，配有<code>BitmapFactory.Options</code>选项来标记解码方式。</p>\n<p>设置<code>inJustDecodeBounds=true</code>属性可以避免解码时候分配内存。其返回<code>null</code>的Bitmap，但是可以用于获取长宽和类型。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">BitmapFactory.Options options = <span class=\"keyword\">new</span> BitmapFactory.Options();</div><div class=\"line\">options.inJustDecodeBounds = <span class=\"keyword\">true</span>;<span class=\"comment\">//不加载分配内存</span></div><div class=\"line\">BitmapFactory.decodeResource(getResource(),R.drawable.iclauncher,options);</div><div class=\"line\"><span class=\"comment\">//图像长宽</span></div><div class=\"line\"><span class=\"keyword\">int</span> imgWidth = options.outWidth;</div><div class=\"line\"><span class=\"keyword\">int</span> imgHeight = options.outHeight;</div><div class=\"line\">String imgType = options.outMimeType;<span class=\"comment\">//图像类型</span></div></pre></td></tr></table></figure>\n<p><em>一般需要在加载图片前判断图片大小，避免OOM，除非你确保不会OOM</em></p>\n</li>\n<li><h5 id=\"加载缩小版图片到内存（Load-a-Scale-Down-Version-into-Memory）\"><a href=\"#加载缩小版图片到内存（Load-a-Scale-Down-Version-into-Memory）\" class=\"headerlink\" title=\"加载缩小版图片到内存（Load a Scale Down Version into Memory）\"></a>加载缩小版图片到内存（Load a Scale Down Version into Memory）</h5><p>加载缩小版图片也需要考虑一些因素：</p>\n<ul>\n<li>评估完整图片加载需耗内存。</li>\n<li>加载图片可能涉及到的其他内存需求。</li>\n<li>显示图片的控件尺寸。</li>\n<li>设备屏幕的密度和大小。</li>\n</ul>\n<p>BitmapFactory.Options中设置<code>inSampleSize</code>来确定缩放比。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 计算图像缩放比</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">calculateInSampleSize</span><span class=\"params\">(</span></span></div><div class=\"line\">            BitmapFactory.Options options, <span class=\"keyword\">int</span> reqWidth, <span class=\"keyword\">int</span> reqHeight) &#123;</div><div class=\"line\">    <span class=\"comment\">// 获取图像的原始大小</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> height = options.outHeight;</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> width = options.outWidth;</div><div class=\"line\">    <span class=\"keyword\">int</span> inSampleSize = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (height &gt; reqHeight || width &gt; reqWidth) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> halfHeight = height / <span class=\"number\">2</span>;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> halfWidth = width / <span class=\"number\">2</span>;</div><div class=\"line\">        <span class=\"comment\">//保持宽高大于请求的宽高，缩放比为计算值的2倍</span></div><div class=\"line\">        <span class=\"keyword\">while</span> ((halfHeight / inSampleSize) &gt; reqHeight</div><div class=\"line\">                &amp;&amp; (halfWidth / inSampleSize) &gt; reqWidth) &#123;</div><div class=\"line\">            inSampleSize *= <span class=\"number\">2</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> inSampleSize;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>==<em>设置缩放比<code>inSampleSize</code>为2的倍数，是因为解码器对非2倍数会就近处理为2的倍数。</em>==</p>\n<p>先设置<code>inJustDecodeBounds=true</code>来设置<code>inSampleSize</code>之后在设置<code>inJustDecodeBounds=false</code>加载缩放后的Bitmap</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">mImageView.setImageBitmap(decodeSampleBitmapFromResource(getResource(),R.drawable.iclauncher,<span class=\"number\">100</span>,<span class=\"number\">100</span>));<span class=\"comment\">//加载大小100长宽的图片</span></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> * 根据控件大小，加载缩放图片</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Bitmap <span class=\"title\">decodeSampleBitmapFromResource</span><span class=\"params\">(Resource res,<span class=\"keyword\">int</span> resId,<span class=\"keyword\">int</span> reqWidth,<span class=\"keyword\">int</span> reqHeight)</span></span>&#123;</div><div class=\"line\">  <span class=\"comment\">//先空加载图片，计算缩放比</span></div><div class=\"line\">  <span class=\"keyword\">final</span> BitmapFactory.Options options = <span class=\"keyword\">new</span> BitmapFactory.Options();</div><div class=\"line\">  options.inJustDecodeBounds = <span class=\"keyword\">true</span>;</div><div class=\"line\">  BitmapFactory.decodeResource(res,resId,options);</div><div class=\"line\">  options.inSampleSize = calculateInSampleSize(options,reqWidth,reqHeight);</div><div class=\"line\">  <span class=\"comment\">//解码缩放后的图像</span></div><div class=\"line\">  options.inJustDecodeBounds = <span class=\"keyword\">false</span>;</div><div class=\"line\">  returen BitmapFactory.decodeResource(res,resId,options);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"2、非UI线程处理Bitmap\"><a href=\"#2、非UI线程处理Bitmap\" class=\"headerlink\" title=\"2、非UI线程处理Bitmap\"></a>2、非UI线程处理Bitmap</h4><p>上一节仅仅介绍了如何缩放加载图像，若是获取网络图像或者其他储存设备，则应避免在UI线程执行加载操作，避免ANR。</p>\n<ul>\n<li><h5 id=\"使用AsyncTask（Use-a-AsyncTask）\"><a href=\"#使用AsyncTask（Use-a-AsyncTask）\" class=\"headerlink\" title=\"使用AsyncTask（Use a AsyncTask）\"></a>使用AsyncTask（Use a AsyncTask）</h5><p>AsyncTask是Android提供的一个封装好的后台线程操作方式，并可以实现前后台信息传递。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BitmapWorkerTask</span> <span class=\"keyword\">extends</span> <span class=\"title\">AsyncTask</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> WeakReference imageViewReference;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> data = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BitmapWorkerTask</span><span class=\"params\">(ImageView imageView)</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">//使用弱引用，确保图像会被及时的GC回收。</span></div><div class=\"line\">    imageViewReference = <span class=\"keyword\">new</span> WeakReference(imageView);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//后台解码图片</span></div><div class=\"line\">  <span class=\"meta\">@override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> Bitmap <span class=\"title\">doInBackground</span><span class=\"params\">(Integer... params)</span></span>&#123;</div><div class=\"line\">    data = params[<span class=\"number\">0</span>];</div><div class=\"line\">    <span class=\"keyword\">return</span> decodeSampleBitmapFromResource(getResource(),data,<span class=\"number\">100</span>,<span class=\"number\">100</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//完成解码后，加载图像到控件显示</span></div><div class=\"line\">  <span class=\"comment\">//要判断引用对象是否还存在，控件是否存在等，避免空指针。</span></div><div class=\"line\">  <span class=\"meta\">@override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onPostExecute</span><span class=\"params\">(Bitmap bitmap)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(imageViewReference !=<span class=\"keyword\">null</span> &amp;&amp; bitmap !=<span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">      <span class=\"keyword\">final</span> ImageView imageView = imageViewReference.get();</div><div class=\"line\">      <span class=\"keyword\">if</span>(imageView!=<span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">        imageView.setImageBitmap(bitmap);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//创建一个任务task，执行异步加载</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">loadBitmap</span><span class=\"params\">(<span class=\"keyword\">int</span> resId,ImageView imageView)</span></span>&#123;</div><div class=\"line\">  BitmapWorkerTask task = <span class=\"keyword\">new</span> BitmapWorkerTask(imageView);</div><div class=\"line\">  task.execute(resId);<span class=\"comment\">//执行Task</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"处理并发问题（Handle-Concurrency）\"><a href=\"#处理并发问题（Handle-Concurrency）\" class=\"headerlink\" title=\"处理并发问题（Handle Concurrency）\"></a>处理并发问题（Handle Concurrency）</h5><p>List View和Grid View控件显示多个位图结合AsyncTask使用时会产生并发问题。每个item都执行task的话，启动顺序，任务顺序都很难保持一致性。为此可以使用Image View来保存最近使用的AsyncTask引用，创建一个专用的<code>Drawable</code>子类来存储任务引用，如<code>BitmapDrawable</code>,并提供占位图像:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AsyncDrawable</span> <span class=\"keyword\">extends</span> <span class=\"title\">BitmapDrawable</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> WeakReference bitmapWorkerTaskReference;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AsyncDrawable</span><span class=\"params\">(Resource res,Bitmap bitmap,BitmapWorkerTask bitmapWorkerTask)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(res,bitmap);</div><div class=\"line\">    <span class=\"comment\">//初始化弱引用对象</span></div><div class=\"line\">    bitmapWorkerTaskReference = <span class=\"keyword\">new</span> BitmapWorkerTaskReference(bitmapWorkerTask);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//对外公开task的引用。</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> BitmapWorkerTask <span class=\"title\">getBitmapWorkerTask</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> bitmapWorkerTaskReference.get();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在执行BitmapWorkerTask之前需要创建AsyncDrawable并绑定到ImageView上：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">loadBitmap</span><span class=\"params\">(<span class=\"keyword\">int</span> resId,ImageView imageView)</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(cancelPotentialWork(resId,imageView))&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> BitmapWorkerTask task = <span class=\"keyword\">new</span> BitmapWorkerTask(imageView);</div><div class=\"line\">    <span class=\"keyword\">final</span> AsyncDrawable asyncDrawable = <span class=\"keyword\">new</span> \t\t\t\t\t\t\t   AsyncDrawable(getResource(),mPlaceHolderBitmap,task);</div><div class=\"line\">    imageView.setImageDrawable(asyncDrawable);</div><div class=\"line\">    task.execute(resId);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//该方法用于检测是否有已存在的任务在执行该Image View控件的请求。</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">cancelPotentialWork</span><span class=\"params\">(<span class=\"keyword\">int</span> data, ImageView imageView)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//检索AsyncTask是否已经被分配到指定的ImageView控件。</span></div><div class=\"line\">  <span class=\"keyword\">final</span> BitmapWorkerTask bitmapWorkerTask = getBitmapWorkerTask(imageView);</div><div class=\"line\">    <span class=\"keyword\">if</span> (bitmapWorkerTask != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> bitmapData = bitmapWorkerTask.data;</div><div class=\"line\">        <span class=\"keyword\">if</span> (bitmapData == <span class=\"number\">0</span> || bitmapData != data) &#123;</div><div class=\"line\">            <span class=\"comment\">//取消先前的任务</span></div><div class=\"line\">            bitmapWorkerTask.cancel(<span class=\"keyword\">true</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">//同样的请求任务已经在执行</span></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//没有符合当下请求的任务绑定在ImageView控件上，或者之前的取消了。</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//获取控件相关的task</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> BitmapWorkerTask <span class=\"title\">getBitmapWorkerTask</span><span class=\"params\">(ImageView imageView)</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">if</span> (imageView != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">       <span class=\"keyword\">final</span> Drawable drawable = imageView.getDrawable();</div><div class=\"line\">       <span class=\"keyword\">if</span> (drawable <span class=\"keyword\">instanceof</span> AsyncDrawable) &#123;</div><div class=\"line\">           <span class=\"keyword\">final</span> AsyncDrawable asyncDrawable = (AsyncDrawable) drawable;</div><div class=\"line\">         <span class=\"comment\">//获取AsyncDrawable中定义的绑定task引用</span></div><div class=\"line\">           <span class=\"keyword\">return</span> asyncDrawable.getBitmapWorkerTask();</div><div class=\"line\">       &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>完成异步task的绑定后，在<code>onPostExecute()</code>中更新view</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BitmapWorkerTask</span> <span class=\"keyword\">extends</span> <span class=\"title\">AsyncTask</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onPostExecute</span><span class=\"params\">(Bitmap bitmap)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (isCancelled()) &#123;</div><div class=\"line\">            bitmap = <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">\t\t<span class=\"comment\">//更新View前，判断资源和控件的非空</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (imageViewReference != <span class=\"keyword\">null</span> &amp;&amp; bitmap != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> ImageView imageView = imageViewReference.get();</div><div class=\"line\">            <span class=\"keyword\">final</span> BitmapWorkerTask bitmapWorkerTask =</div><div class=\"line\">                    getBitmapWorkerTask(imageView);</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == bitmapWorkerTask &amp;&amp; imageView != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                imageView.setImageBitmap(bitmap);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>应用与listView和GridView等，循环利用子视图的控件，只要在设置ImageView的地方调用loadBitmap方法即可。如GridView的<code>getView()</code>中。</p>\n</li>\n</ul>\n<h4 id=\"3、缓存Bitmap\"><a href=\"#3、缓存Bitmap\" class=\"headerlink\" title=\"3、缓存Bitmap\"></a>3、缓存Bitmap</h4><p>在List View或GridView控件场景中，可能需要大量图片展示，而且存在图片复用现象，此时就需要用到缓存，以提高效能和用户体验。</p>\n<ul>\n<li><h5 id=\"使用内存缓存（Use-a-Memory-Cache）\"><a href=\"#使用内存缓存（Use-a-Memory-Cache）\" class=\"headerlink\" title=\"使用内存缓存（Use a Memory Cache）\"></a>使用内存缓存（Use a Memory Cache）</h5><p>使用内存缓存实现以<em>空间换时间</em>，提高速度。<code>LruCache</code>类用于缓存Bitmaps，其使用强引用<code>LinkedHashMap</code>保存最近引用对象，在缓存超出设置大小时候剔除最近最少使用的对象。</p>\n<blockquote>\n<p><strong>注意：</strong>以前多使用<code>软引用</code>或<code>弱引用</code>但是现在并不推荐，由于Android版本的GC频率增高，引用效率也大为降低。</p>\n</blockquote>\n<p>为LruCache设置合适的大小，考虑一下因素：</p>\n<ul>\n<li>应用剩余可用内存大小</li>\n<li>同时显示图像数量，以及预加载图片数量</li>\n<li>设备屏幕尺寸与密度</li>\n<li>图像尺寸、类型</li>\n<li>图像被访问的频率高低</li>\n<li>显示图像的质量和数量的平衡</li>\n</ul>\n<p>以上因素都需要具体分析，如下创建一个Bitmap的LruCache的示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> LruCache&lt;String, Bitmap&gt; mMemoryCache;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// 获取应用VM最大可用内存</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> maxMemory = (<span class=\"keyword\">int</span>) (Runtime.getRuntime().maxMemory() / <span class=\"number\">1024</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 使用可用内存的1/8来缓存</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> cacheSize = maxMemory / <span class=\"number\">8</span>;</div><div class=\"line\">\t<span class=\"comment\">//建立LruCache缓存对象</span></div><div class=\"line\">    mMemoryCache = <span class=\"keyword\">new</span> LruCache&lt;String, Bitmap&gt;(cacheSize) &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> <span class=\"title\">sizeOf</span><span class=\"params\">(String key, Bitmap bitmap)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// 缓存以KB为单位计算，而非对象item个数</span></div><div class=\"line\">            <span class=\"keyword\">return</span> bitmap.getByteCount() / <span class=\"number\">1024</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//加入bitmap对象到lrucache</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addBitmapToMemoryCache</span><span class=\"params\">(String key, Bitmap bitmap)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (getBitmapFromMemCache(key) == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        mMemoryCache.put(key, bitmap);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//从lrucache获取bitmap缓存</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Bitmap <span class=\"title\">getBitmapFromMemCache</span><span class=\"params\">(String key)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> mMemoryCache.get(key);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>Note:</strong>在上面的例子中, 有1/8的内存空间被用作缓存。 这意味着在常见的设备上（hdpi），最少大概有4MB的缓存空间（32/8）。如果一个填满图片的GridView控件放置在800x480像素的手机屏幕上，大概会花费1.5MB的缓存空间（800x480x4 bytes），因此缓存的容量大概可以缓存2.5页的图片内容。</p>\n</blockquote>\n<p>加入缓存的bitmap亦是已经优化过的图像：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BitmapWorkerTask</span> <span class=\"keyword\">extends</span> <span class=\"title\">AsyncTask</span>&lt;<span class=\"title\">Integer</span>, <span class=\"title\">Void</span>, <span class=\"title\">Bitmap</span>&gt; </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">//异步线程解码图像</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Bitmap <span class=\"title\">doInBackground</span><span class=\"params\">(Integer... params)</span> </span>&#123;</div><div class=\"line\">      <span class=\"comment\">//缩放图像</span></div><div class=\"line\">        <span class=\"keyword\">final</span> Bitmap bitmap = decodeSampledBitmapFromResource(</div><div class=\"line\">                getResources(), params[<span class=\"number\">0</span>], <span class=\"number\">100</span>, <span class=\"number\">100</span>));</div><div class=\"line\">      <span class=\"comment\">//添加到lrucache缓存</span></div><div class=\"line\">        addBitmapToMemoryCache(String.valueOf(params[<span class=\"number\">0</span>]), bitmap);</div><div class=\"line\">        <span class=\"keyword\">return</span> bitmap;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"使用磁盘缓存（Use-a-Disk-Cache）\"><a href=\"#使用磁盘缓存（Use-a-Disk-Cache）\" class=\"headerlink\" title=\"使用磁盘缓存（Use a Disk Cache）\"></a>使用磁盘缓存（Use a Disk Cache）</h5><p>使用内存作为缓存虽然有较高的速度，但也可能因为应用被后台化，系统资源不足，亦或者过于大量的图像加载，而导致效果不佳，体验不好。因而可以使用磁盘缓存，需要异步处理，避免ANR。</p>\n<blockquote>\n<p><strong>Note:</strong>如果图像过于频繁访问，可以使用<code>ContentProvider</code>更为合适。</p>\n</blockquote>\n<p>如下示例<code>DiskLruCache</code>为Android源码基础上优化的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> DiskLruCache mDiskLruCache;<span class=\"comment\">//DiskLruCache对象</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Object mDiskCacheLock = <span class=\"keyword\">new</span> Object();<span class=\"comment\">//常量化同步锁</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> mDiskCacheStarting = <span class=\"keyword\">true</span>;<span class=\"comment\">//是否开启缓存</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DISK_CACHE_SIZE = <span class=\"number\">1024</span> * <span class=\"number\">1024</span> * <span class=\"number\">10</span>; <span class=\"comment\">// 10MB</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DISK_CACHE_SUBDIR = <span class=\"string\">\"thumbnails\"</span>;<span class=\"comment\">//缓存文件夹</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// 初始化内存缓存</span></div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// 后台线程初始化磁盘缓存</span></div><div class=\"line\">    File cacheDir = getDiskCacheDir(<span class=\"keyword\">this</span>, DISK_CACHE_SUBDIR);<span class=\"comment\">//从磁盘加载出缓存文件</span></div><div class=\"line\">    <span class=\"keyword\">new</span> InitDiskCacheTask().execute(cacheDir);<span class=\"comment\">//异步开始加载到缓存文件</span></div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//内部类，初始化磁盘加载task</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InitDiskCacheTask</span> <span class=\"keyword\">extends</span> <span class=\"title\">AsyncTask</span>&lt;<span class=\"title\">File</span>, <span class=\"title\">Void</span>, <span class=\"title\">Void</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Void <span class=\"title\">doInBackground</span><span class=\"params\">(File... params)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (mDiskCacheLock) &#123;<span class=\"comment\">//同步锁</span></div><div class=\"line\">            File cacheDir = params[<span class=\"number\">0</span>];<span class=\"comment\">//缓存文件</span></div><div class=\"line\">            mDiskLruCache = DiskLruCache.open(cacheDir, DISK_CACHE_SIZE);</div><div class=\"line\">            mDiskCacheStarting = <span class=\"keyword\">false</span>; <span class=\"comment\">//完成初始化磁盘加载</span></div><div class=\"line\">            mDiskCacheLock.notifyAll(); <span class=\"comment\">//唤起其他休眠线程</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//异步加载图片的task，</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BitmapWorkerTask</span> <span class=\"keyword\">extends</span> <span class=\"title\">AsyncTask</span>&lt;<span class=\"title\">Integer</span>, <span class=\"title\">Void</span>, <span class=\"title\">Bitmap</span>&gt; </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// 解码图像</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Bitmap <span class=\"title\">doInBackground</span><span class=\"params\">(Integer... params)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> String imageKey = String.valueOf(params[<span class=\"number\">0</span>]);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//后台线程检查磁盘缓存</span></div><div class=\"line\">        Bitmap bitmap = getBitmapFromDiskCache(imageKey);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (bitmap == <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">// 磁盘缓存没有所需图像</span></div><div class=\"line\">            <span class=\"comment\">// 正常途径加载</span></div><div class=\"line\">            <span class=\"keyword\">final</span> Bitmap bitmap = decodeSampledBitmapFromResource(</div><div class=\"line\">                    getResources(), params[<span class=\"number\">0</span>], <span class=\"number\">100</span>, <span class=\"number\">100</span>));</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//并将优化后的图像加入磁盘缓存</span></div><div class=\"line\">        addBitmapToCache(imageKey, bitmap);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> bitmap;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//加入磁盘缓存</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addBitmapToCache</span><span class=\"params\">(String key, Bitmap bitmap)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 先加入内存缓存</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (getBitmapFromMemCache(key) == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        mMemoryCache.put(key, bitmap);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 然后加入到磁盘缓存</span></div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (mDiskCacheLock) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mDiskLruCache != <span class=\"keyword\">null</span> &amp;&amp; mDiskLruCache.get(key) == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            mDiskLruCache.put(key, bitmap);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//从磁盘缓存获取图像</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Bitmap <span class=\"title\">getBitmapFromDiskCache</span><span class=\"params\">(String key)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (mDiskCacheLock) &#123;<span class=\"comment\">//同步获取锁</span></div><div class=\"line\">        <span class=\"comment\">// 等待后台线程获取磁盘缓存</span></div><div class=\"line\">        <span class=\"keyword\">while</span> (mDiskCacheStarting) &#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                mDiskCacheLock.wait();</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;&#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mDiskLruCache != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> mDiskLruCache.get(key);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 为特定的app创建唯一的子文件夹，优先使用外部sd卡，若没有，就使用内部sd卡</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> File <span class=\"title\">getDiskCacheDir</span><span class=\"params\">(Context context, String uniqueName)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 检查是否有外部存储，否则用内部存储</span></div><div class=\"line\">    <span class=\"keyword\">final</span> String cachePath =</div><div class=\"line\">            Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState()) ||</div><div class=\"line\">                    !isExternalStorageRemovable() ? getExternalCacheDir(context).getPath() :</div><div class=\"line\">                            context.getCacheDir().getPath();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> File(cachePath + File.separator + uniqueName);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>注意：</strong>如上使用==同步锁==是为了防止在后台异步I/O操作时候，错误读取。</p>\n</blockquote>\n<p>内存缓存检查可以在UI线程操作，而磁盘缓存需要在后台线程。</p>\n</li>\n<li><h5 id=\"处理配置改变（Handle-Configuration-Changes）\"><a href=\"#处理配置改变（Handle-Configuration-Changes）\" class=\"headerlink\" title=\"处理配置改变（Handle Configuration Changes）\"></a>处理配置改变（Handle Configuration Changes）</h5><p>Android的配置信息发生变化，Activity可能会随之变化、销毁重建。平滑恢复原有图像，创造良好用户体验，<code>setRetainInstance(true)</code>保留的一个<code>Fragement</code>实例可以将缓存重新附着与Activity上。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> LruCache&lt;String, Bitmap&gt; mMemoryCache;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">      <span class=\"comment\">//RetainFragment</span></div><div class=\"line\">    RetainFragment retainFragment =</div><div class=\"line\">            RetainFragment.findOrCreateRetainFragment(getFragmentManager());</div><div class=\"line\">  <span class=\"comment\">//获取缓存对象  </span></div><div class=\"line\">  mMemoryCache = retainFragment.mRetainedCache;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mMemoryCache == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        mMemoryCache = <span class=\"keyword\">new</span> LruCache&lt;String, Bitmap&gt;(cacheSize) &#123;</div><div class=\"line\">            ... <span class=\"comment\">// 初始化缓存</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        retainFragment.mRetainedCache = mMemoryCache;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//自定义内部类Fragment，用于存储缓存对象？？</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RetainFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"RetainFragment\"</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> LruCache&lt;String, Bitmap&gt; mRetainedCache;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RetainFragment</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> RetainFragment <span class=\"title\">findOrCreateRetainFragment</span><span class=\"params\">(FragmentManager fm)</span> </span>&#123;</div><div class=\"line\">        RetainFragment fragment = (RetainFragment) fm.findFragmentByTag(TAG);</div><div class=\"line\">        <span class=\"keyword\">if</span> (fragment == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            fragment = <span class=\"keyword\">new</span> RetainFragment();</div><div class=\"line\">            fm.beginTransaction().add(fragment, TAG).commit();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> fragment;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setRetainInstance(<span class=\"keyword\">true</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"4、管理Bitmap的内存\"><a href=\"#4、管理Bitmap的内存\" class=\"headerlink\" title=\"4、管理Bitmap的内存\"></a>4、管理Bitmap的内存</h4><p>关于Bitmap内存管理了解两点：1、Android2.3之后GC回收并发执行，内存不引用，会被立即回收。2、Android3.0以后bitmap引用和数据一同存放在<code>Dalvik堆</code>内存中。</p>\n<ul>\n<li><h5 id=\"Android2-3以下版本的内存管理\"><a href=\"#Android2-3以下版本的内存管理\" class=\"headerlink\" title=\"Android2.3以下版本的内存管理\"></a>Android2.3以下版本的内存管理</h5><p>推荐使用<code>recycle()</code>方法，低版本Android单线程GC。使用引用计数法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mCacheRefCount=<span class=\"number\">0</span>;<span class=\"comment\">//引用计数</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mDisplayRefCount = <span class=\"number\">0</span>;<span class=\"comment\">//引用计数</span></div><div class=\"line\">...</div><div class=\"line\"><span class=\"comment\">//通知drawable显示状态发生改变，drawable引用计数来决定引用状态和显示</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setIsDisplayed</span><span class=\"params\">(<span class=\"keyword\">boolean</span> isDisplayed)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (isDisplayed) &#123;</div><div class=\"line\">            mDisplayRefCount++;</div><div class=\"line\">            mHasBeenDisplayed = <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            mDisplayRefCount--;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// Check to see if recycle() can be called.</span></div><div class=\"line\">    checkState();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// Notify the drawable that the cache state has changed.</span></div><div class=\"line\"><span class=\"comment\">// Keep a count to determine when the drawable is no longer being cached.</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setIsCached</span><span class=\"params\">(<span class=\"keyword\">boolean</span> isCached)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (isCached) &#123;</div><div class=\"line\">            mCacheRefCount++;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            mCacheRefCount--;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// Check to see if recycle() can be called.</span></div><div class=\"line\">    checkState();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">checkState</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// If the drawable cache and display ref counts = 0, and this drawable</span></div><div class=\"line\">    <span class=\"comment\">// has been displayed, then recycle.</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (mCacheRefCount &lt;= <span class=\"number\">0</span> &amp;&amp; mDisplayRefCount &lt;= <span class=\"number\">0</span> &amp;&amp; mHasBeenDisplayed</div><div class=\"line\">            &amp;&amp; hasValidBitmap()) &#123;</div><div class=\"line\">        getBitmap().recycle();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasValidBitmap</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    Bitmap bitmap = getBitmap();</div><div class=\"line\">    <span class=\"keyword\">return</span> bitmap != <span class=\"keyword\">null</span> &amp;&amp; !bitmap.isRecycled();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"Android3-0以上版本内存管理\"><a href=\"#Android3-0以上版本内存管理\" class=\"headerlink\" title=\"Android3.0以上版本内存管理\"></a>Android3.0以上版本内存管理</h5><p>API 11引入<code>BitmapFactory.Options.inBitmap</code>使Bitmap在加载时候可以重中已存在的，但是大小一样的位图（&lt; API 19时候）。</p>\n</li>\n<li><p>保存Bitmap以备复用</p>\n<p>android3.0以上，bitmap从L如Cache移除时，Bitmap的软引用会被村房子啊Hashset中，以便<code>inBitmap</code>复用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">Set&lt;SoftReference&lt;Bitmap&gt;&gt; mReusableBitmaps;</div><div class=\"line\"><span class=\"keyword\">private</span> LruCache&lt;String, BitmapDrawable&gt; mMemoryCache;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// If you're running on Honeycomb or newer, create a</span></div><div class=\"line\"><span class=\"comment\">// synchronized HashSet of references to reusable bitmaps.</span></div><div class=\"line\"><span class=\"keyword\">if</span> (Utils.hasHoneycomb()) &#123;</div><div class=\"line\">    mReusableBitmaps =</div><div class=\"line\">            Collections.synchronizedSet(<span class=\"keyword\">new</span> HashSet&lt;SoftReference&lt;Bitmap&gt;&gt;());</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">mMemoryCache = <span class=\"keyword\">new</span> LruCache&lt;String, BitmapDrawable&gt;(mCacheParams.memCacheSize) &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Notify the removed entry that is no longer being cached.</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">entryRemoved</span><span class=\"params\">(<span class=\"keyword\">boolean</span> evicted, String key,</span></span></div><div class=\"line\">            BitmapDrawable oldValue, BitmapDrawable newValue) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (RecyclingBitmapDrawable.class.isInstance(oldValue)) &#123;</div><div class=\"line\">            <span class=\"comment\">// The removed entry is a recycling drawable, so notify it</span></div><div class=\"line\">            <span class=\"comment\">// that it has been removed from the memory cache.</span></div><div class=\"line\">            ((RecyclingBitmapDrawable) oldValue).setIsCached(<span class=\"keyword\">false</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// The removed entry is a standard BitmapDrawable.</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (Utils.hasHoneycomb()) &#123;</div><div class=\"line\">                <span class=\"comment\">// We're running on Honeycomb or later, so add the bitmap</span></div><div class=\"line\">                <span class=\"comment\">// to a SoftReference set for possible use with inBitmap later.</span></div><div class=\"line\">                mReusableBitmaps.add</div><div class=\"line\">                        (<span class=\"keyword\">new</span> SoftReference&lt;Bitmap&gt;(oldValue.getBitmap()));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">....</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"使用已经存在的Bitmap\"><a href=\"#使用已经存在的Bitmap\" class=\"headerlink\" title=\"使用已经存在的Bitmap\"></a>使用已经存在的Bitmap</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Bitmap <span class=\"title\">decodeSampledBitmapFromFile</span><span class=\"params\">(String filename,</span></span></div><div class=\"line\">        <span class=\"keyword\">int</span> reqWidth, <span class=\"keyword\">int</span> reqHeight, ImageCache cache) &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> BitmapFactory.Options options = <span class=\"keyword\">new</span> BitmapFactory.Options();</div><div class=\"line\">    ...</div><div class=\"line\">    BitmapFactory.decodeFile(filename, options);</div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// If we're running on Honeycomb or newer, try to use inBitmap.</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (Utils.hasHoneycomb()) &#123;</div><div class=\"line\">        addInBitmapOptions(options, cache);</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">return</span> BitmapFactory.decodeFile(filename, options);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//查找适合且可复用的bitmap，设置到inBitmap的属性值，</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">addInBitmapOptions</span><span class=\"params\">(BitmapFactory.Options options,</span></span></div><div class=\"line\">        ImageCache cache) &#123;</div><div class=\"line\">    <span class=\"comment\">// inBitmap only works with mutable bitmaps, so force the decoder to</span></div><div class=\"line\">    <span class=\"comment\">// return mutable bitmaps.</span></div><div class=\"line\">    options.inMutable = <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (cache != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// Try to find a bitmap to use for inBitmap.</span></div><div class=\"line\">        Bitmap inBitmap = cache.getBitmapFromReusableSet(options);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (inBitmap != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// If a suitable bitmap has been found, set it as the value of</span></div><div class=\"line\">            <span class=\"comment\">// inBitmap.</span></div><div class=\"line\">            options.inBitmap = inBitmap;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// This method iterates through the reusable bitmaps, looking for one</span></div><div class=\"line\"><span class=\"comment\">// to use for inBitmap:</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Bitmap <span class=\"title\">getBitmapFromReusableSet</span><span class=\"params\">(BitmapFactory.Options options)</span> </span>&#123;</div><div class=\"line\">        Bitmap bitmap = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (mReusableBitmaps != <span class=\"keyword\">null</span> &amp;&amp; !mReusableBitmaps.isEmpty()) &#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (mReusableBitmaps) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> Iterator&lt;SoftReference&lt;Bitmap&gt;&gt; iterator</div><div class=\"line\">                    = mReusableBitmaps.iterator();</div><div class=\"line\">            Bitmap item;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">while</span> (iterator.hasNext()) &#123;</div><div class=\"line\">                item = iterator.next().get();</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != item &amp;&amp; item.isMutable()) &#123;</div><div class=\"line\">                    <span class=\"comment\">// Check to see it the item can be used for inBitmap.</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (canUseForInBitmap(item, options)) &#123;</div><div class=\"line\">                        bitmap = item;</div><div class=\"line\"></div><div class=\"line\">                        <span class=\"comment\">// Remove from reusable set so it can't be used again.</span></div><div class=\"line\">                        iterator.remove();</div><div class=\"line\">                        <span class=\"keyword\">break</span>;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    <span class=\"comment\">// Remove from the set if the reference has been cleared.</span></div><div class=\"line\">                    iterator.remove();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> bitmap;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>判断Bitmap是否符合inBitmap的要求：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">canUseForInBitmap</span><span class=\"params\">(</span></span></div><div class=\"line\">        Bitmap candidate, BitmapFactory.Options targetOptions) &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</div><div class=\"line\">        <span class=\"comment\">// From Android 4.4 (KitKat) onward we can re-use if the byte size of</span></div><div class=\"line\">        <span class=\"comment\">// the new bitmap is smaller than the reusable bitmap candidate</span></div><div class=\"line\">        <span class=\"comment\">// allocation byte count.</span></div><div class=\"line\">        <span class=\"keyword\">int</span> width = targetOptions.outWidth / targetOptions.inSampleSize;</div><div class=\"line\">        <span class=\"keyword\">int</span> height = targetOptions.outHeight / targetOptions.inSampleSize;</div><div class=\"line\">        <span class=\"keyword\">int</span> byteCount = width * height * getBytesPerPixel(candidate.getConfig());</div><div class=\"line\">        <span class=\"keyword\">return</span> byteCount &lt;= candidate.getAllocationByteCount();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// On earlier versions, the dimensions must match exactly and the inSampleSize must be 1</span></div><div class=\"line\">    <span class=\"keyword\">return</span> candidate.getWidth() == targetOptions.outWidth</div><div class=\"line\">            &amp;&amp; candidate.getHeight() == targetOptions.outHeight</div><div class=\"line\">            &amp;&amp; targetOptions.inSampleSize == <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * A helper function to return the byte usage per pixel of a bitmap based on its configuration.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getBytesPerPixel</span><span class=\"params\">(Config config)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (config == Config.ARGB_8888) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">4</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (config == Config.RGB_565) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (config == Config.ARGB_4444) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (config == Config.ALPHA_8) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"5、在UI上显示Bitmap\"><a href=\"#5、在UI上显示Bitmap\" class=\"headerlink\" title=\"5、在UI上显示Bitmap\"></a>5、在UI上显示Bitmap</h4><p>本节学习如何综合使用后台线程与缓存机制，将图像加载到ViewPager或Grid View控件上，并处理并发与配置改变的问题。</p>\n<ul>\n<li><h5 id=\"实现加载图片到View-Pager\"><a href=\"#实现加载图片到View-Pager\" class=\"headerlink\" title=\"实现加载图片到View Pager\"></a>实现加载图片到View Pager</h5><p><code>Swipe View Pattern</code>是滑动显示的设计模型。可通过<code>PagerAdapter</code>与<code>ViewPager</code>控件实现该效果。而<code>FragmentStatePagerAdapter</code>更为合适，因为其能在Fragment状态改变时保存状态值。减少内存消耗。少量图片的话，<code>PagerAdapter与FragmentPagerAdapter</code>都可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageDetailActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">FragmentActivity</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String EXTRA_IMAGE = <span class=\"string\">\"extra_image\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> ImagePagerAdapter mAdapter;<span class=\"comment\">//adapter</span></div><div class=\"line\">    <span class=\"keyword\">private</span> ViewPager mPager;<span class=\"comment\">//viewpager</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 用于传递给viewpager 的adapter的图片数据资源</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Integer[] imageResIds = <span class=\"keyword\">new</span> Integer[] &#123;</div><div class=\"line\">            R.drawable.sample_image_1, R.drawable.sample_image_2, R.drawable.sample_image_3,</div><div class=\"line\">            R.drawable.sample_image_4, R.drawable.sample_image_5, R.drawable.sample_image_6,</div><div class=\"line\">            R.drawable.sample_image_7, R.drawable.sample_image_8, R.drawable.sample_image_9&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.image_detail_pager); <span class=\"comment\">// 就一个viewpager</span></div><div class=\"line\">\t\t<span class=\"comment\">//初始化控件，并绑定适配器</span></div><div class=\"line\">        mAdapter = <span class=\"keyword\">new</span> ImagePagerAdapter(getSupportFragmentManager(), imageResIds.length);</div><div class=\"line\">        mPager = (ViewPager) findViewById(R.id.pager);</div><div class=\"line\">        mPager.setAdapter(mAdapter);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImagePagerAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">FragmentStatePagerAdapter</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> mSize;</div><div class=\"line\">\t\t<span class=\"comment\">//</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ImagePagerAdapter</span><span class=\"params\">(FragmentManager fm, <span class=\"keyword\">int</span> size)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(fm);</div><div class=\"line\">            mSize = size;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getCount</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> mSize;</div><div class=\"line\">        &#125;</div><div class=\"line\">\t\t<span class=\"comment\">//返回fragment对象</span></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Fragment <span class=\"title\">getItem</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> ImageDetailFragment.newInstance(position);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Fragment里面包含Image View控件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageDetailFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String IMAGE_DATA_EXTRA = <span class=\"string\">\"resId\"</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mImageNum;<span class=\"comment\">//图像数目</span></div><div class=\"line\">    <span class=\"keyword\">private</span> ImageView mImageView;<span class=\"comment\">//image view控件</span></div><div class=\"line\">\t<span class=\"comment\">//构造函数，接收图片数目参数</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> ImageDetailFragment <span class=\"title\">newInstance</span><span class=\"params\">(<span class=\"keyword\">int</span> imageNum)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> ImageDetailFragment f = <span class=\"keyword\">new</span> ImageDetailFragment();</div><div class=\"line\">        <span class=\"keyword\">final</span> Bundle args = <span class=\"keyword\">new</span> Bundle();</div><div class=\"line\">        args.putInt(IMAGE_DATA_EXTRA, imageNum);</div><div class=\"line\">        f.setArguments(args);</div><div class=\"line\">        <span class=\"keyword\">return</span> f;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Empty constructor, required as per Fragment docs</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ImageDetailFragment</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        mImageNum = getArguments() != <span class=\"keyword\">null</span> ? getArguments().getInt(IMAGE_DATA_EXTRA) : -<span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, ViewGroup container,</span></span></div><div class=\"line\">            Bundle savedInstanceState) &#123;</div><div class=\"line\">        <span class=\"comment\">// image_detail_fragment.xml contains just an ImageView</span></div><div class=\"line\">        <span class=\"keyword\">final</span> View v = inflater.inflate(R.layout.image_detail_fragment, container, <span class=\"keyword\">false</span>);</div><div class=\"line\">        mImageView = (ImageView) v.findViewById(R.id.imageView);</div><div class=\"line\">        <span class=\"keyword\">return</span> v;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityCreated</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onActivityCreated(savedInstanceState);</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> resId = ImageDetailActivity.imageResIds[mImageNum];</div><div class=\"line\">        mImageView.setImageResource(resId); <span class=\"comment\">// Load image into ImageView</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>==<strong>如上方式，可能会阻塞UI线程</strong>==，改用AsyncTask最好：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageDetailActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">FragmentActivity</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">\t<span class=\"comment\">//后台加载图片</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">loadBitmap</span><span class=\"params\">(<span class=\"keyword\">int</span> resId, ImageView imageView)</span> </span>&#123;</div><div class=\"line\">        mImageView.setImageResource(R.drawable.image_placeholder);</div><div class=\"line\">      <span class=\"comment\">//后台执行</span></div><div class=\"line\">        BitmapWorkerTask task = <span class=\"keyword\">new</span> BitmapWorkerTask(mImageView);</div><div class=\"line\">        task.execute(resId);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    ... <span class=\"comment\">// include BitmapWorkerTask class</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageDetailFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityCreated</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onActivityCreated(savedInstanceState);</div><div class=\"line\">        <span class=\"keyword\">if</span> (ImageDetailActivity.class.isInstance(getActivity())) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> resId = ImageDetailActivity.imageResIds[mImageNum];</div><div class=\"line\">            <span class=\"comment\">//调用上面的后台加载图片</span></div><div class=\"line\">            ((ImageDetailActivity) getActivity()).loadBitmap(resId, mImageView);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>后台的操作可以更为合理，加载并缓存图像</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageDetailActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">FragmentActivity</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">private</span> LruCache mMemoryCache;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"comment\">// initialize LruCache as per Use a Memory Cache section</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">loadBitmap</span><span class=\"params\">(<span class=\"keyword\">int</span> resId, ImageView imageView)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> String imageKey = String.valueOf(resId);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> Bitmap bitmap = mMemoryCache.get(imageKey);</div><div class=\"line\">        <span class=\"keyword\">if</span> (bitmap != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            mImageView.setImageBitmap(bitmap);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            mImageView.setImageResource(R.drawable.image_placeholder);</div><div class=\"line\">            BitmapWorkerTask task = <span class=\"keyword\">new</span> BitmapWorkerTask(mImageView);</div><div class=\"line\">            task.execute(resId);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ... <span class=\"comment\">// include updated BitmapWorkerTask from Use a Memory Cache section</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"实现加载图片到GridView\"><a href=\"#实现加载图片到GridView\" class=\"headerlink\" title=\"实现加载图片到GridView\"></a>实现加载图片到GridView</h5><p>如下场景，Fragment内置Grid View，item是Image View：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageGridFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> <span class=\"keyword\">implements</span> <span class=\"title\">AdapterView</span>.<span class=\"title\">OnItemClickListener</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> ImageAdapter mAdapter;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//静态加载的图片资源，用于适配器</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Integer[] imageResIds = <span class=\"keyword\">new</span> Integer[] &#123;</div><div class=\"line\">            R.drawable.sample_image_1, R.drawable.sample_image_2, R.drawable.sample_image_3,</div><div class=\"line\">            R.drawable.sample_image_4, R.drawable.sample_image_5, R.drawable.sample_image_6,</div><div class=\"line\">            R.drawable.sample_image_7, R.drawable.sample_image_8, R.drawable.sample_image_9&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Empty constructor as per Fragment docs</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ImageGridFragment</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        mAdapter = <span class=\"keyword\">new</span> ImageAdapter(getActivity());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(</span></span></div><div class=\"line\">            LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) &#123;</div><div class=\"line\">      <span class=\"comment\">//初始化控件，并绑定适配器，注册监听  </span></div><div class=\"line\">      <span class=\"keyword\">final</span> View v = inflater.inflate(R.layout.image_grid_fragment, container, <span class=\"keyword\">false</span>);</div><div class=\"line\">        <span class=\"keyword\">final</span> GridView mGridView = (GridView) v.findViewById(R.id.gridView);</div><div class=\"line\">        mGridView.setAdapter(mAdapter);</div><div class=\"line\">        mGridView.setOnItemClickListener(<span class=\"keyword\">this</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> v;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onItemClick</span><span class=\"params\">(AdapterView parent, View v, <span class=\"keyword\">int</span> position, <span class=\"keyword\">long</span> id)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Intent i = <span class=\"keyword\">new</span> Intent(getActivity(), ImageDetailActivity.class);</div><div class=\"line\">        i.putExtra(ImageDetailActivity.EXTRA_IMAGE, position);</div><div class=\"line\">        startActivity(i);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseAdapter</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Context mContext;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ImageAdapter</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>();</div><div class=\"line\">            mContext = context;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getCount</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> imageResIds.length;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getItem</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> imageResIds[position];</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">getItemId</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> position;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">getView</span><span class=\"params\">(<span class=\"keyword\">int</span> position, View convertView, ViewGroup container)</span> </span>&#123;</div><div class=\"line\">            ImageView imageView;</div><div class=\"line\">            <span class=\"keyword\">if</span> (convertView == <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">// 判断是否是循环复用的item view，不是的话，需要初始化一些属性。</span></div><div class=\"line\">                imageView = <span class=\"keyword\">new</span> ImageView(mContext);</div><div class=\"line\">                imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);</div><div class=\"line\">                imageView.setLayoutParams(<span class=\"keyword\">new</span> GridView.LayoutParams(</div><div class=\"line\">                        LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                imageView = (ImageView) convertView;</div><div class=\"line\">            &#125;</div><div class=\"line\">        <span class=\"comment\">//请注意下面的代码，如此可能会耗时，阻塞UI</span></div><div class=\"line\">        imageView.setImageResource(imageResIds[position]); <span class=\"comment\">// Load image into ImageView</span></div><div class=\"line\">        <span class=\"keyword\">return</span> imageView;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>考虑UI的可能阻塞，以及GridView引起的并发问题，代码优化如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageGridFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> <span class=\"keyword\">implements</span> <span class=\"title\">AdapterView</span>.<span class=\"title\">OnItemClickListener</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseAdapter</span> </span>&#123;</div><div class=\"line\">        ...</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">getView</span><span class=\"params\">(<span class=\"keyword\">int</span> position, View convertView, ViewGroup container)</span> </span>&#123;</div><div class=\"line\">            ...</div><div class=\"line\">            loadBitmap(imageResIds[position], imageView)</div><div class=\"line\">            <span class=\"keyword\">return</span> imageView;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t<span class=\"comment\">//异步加载图像</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">loadBitmap</span><span class=\"params\">(<span class=\"keyword\">int</span> resId, ImageView imageView)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (cancelPotentialWork(resId, imageView)) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> BitmapWorkerTask task = <span class=\"keyword\">new</span> BitmapWorkerTask(imageView);</div><div class=\"line\">            <span class=\"keyword\">final</span> AsyncDrawable asyncDrawable =</div><div class=\"line\">                    <span class=\"keyword\">new</span> AsyncDrawable(getResources(), mPlaceHolderBitmap, task);</div><div class=\"line\">            imageView.setImageDrawable(asyncDrawable);</div><div class=\"line\">            task.execute(resId);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t<span class=\"comment\">//用于绑定到imageView的drawable</span></div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AsyncDrawable</span> <span class=\"keyword\">extends</span> <span class=\"title\">BitmapDrawable</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> WeakReference bitmapWorkerTaskReference;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AsyncDrawable</span><span class=\"params\">(Resources res, Bitmap bitmap,</span></span></div><div class=\"line\">                BitmapWorkerTask bitmapWorkerTask) &#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(res, bitmap);</div><div class=\"line\">            bitmapWorkerTaskReference =</div><div class=\"line\">                <span class=\"keyword\">new</span> WeakReference(bitmapWorkerTask);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> BitmapWorkerTask <span class=\"title\">getBitmapWorkerTask</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> bitmapWorkerTaskReference.get();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t<span class=\"comment\">//判断imageview是否已经有加载图像的task</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">cancelPotentialWork</span><span class=\"params\">(<span class=\"keyword\">int</span> data, ImageView imageView)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> BitmapWorkerTask bitmapWorkerTask = getBitmapWorkerTask(imageView);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (bitmapWorkerTask != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> bitmapData = bitmapWorkerTask.data;</div><div class=\"line\">            <span class=\"keyword\">if</span> (bitmapData != data) &#123;</div><div class=\"line\">                <span class=\"comment\">// Cancel previous task</span></div><div class=\"line\">                bitmapWorkerTask.cancel(<span class=\"keyword\">true</span>);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"comment\">// The same work is already in progress</span></div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// No task associated with the ImageView, or an existing task was cancelled</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t<span class=\"comment\">//获取图像加载task</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> BitmapWorkerTask <span class=\"title\">getBitmapWorkerTask</span><span class=\"params\">(ImageView imageView)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (imageView != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">final</span> Drawable drawable = imageView.getDrawable();</div><div class=\"line\">           <span class=\"keyword\">if</span> (drawable <span class=\"keyword\">instanceof</span> AsyncDrawable) &#123;</div><div class=\"line\">               <span class=\"keyword\">final</span> AsyncDrawable asyncDrawable = (AsyncDrawable) drawable;</div><div class=\"line\">               <span class=\"keyword\">return</span> asyncDrawable.getBitmapWorkerTask();</div><div class=\"line\">           &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    ... <span class=\"comment\">// include updated BitmapWorkerTask class</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"2、使用OpenGL-ES显示图像\"><a href=\"#2、使用OpenGL-ES显示图像\" class=\"headerlink\" title=\"2、使用OpenGL ES显示图像\"></a>2、使用OpenGL ES显示图像</h3><p>Android平台提供了OpenGL ES接口，帮助我们实现更为丰富的图像显示效果。本章记述OpenGL构建应用的基础知识，包括配置、绘制对象、移动图形以及响应事件。</p>\n<p><strong>注意，不要混用OpenGL ES 1.x版和2.x版本的接口，因为并不通用。</strong></p>\n<h4 id=\"1、建立OpenGL-ES的环境\"><a href=\"#1、建立OpenGL-ES的环境\" class=\"headerlink\" title=\"1、建立OpenGL ES的环境\"></a>1、建立OpenGL ES的环境</h4><p>在应用中使用OpenGL ES来绘制图像，需要给它一个容器。通常实现<code>GLSurfaceView</code>做容器和<code>GLSurfaceView.Renderer</code>类来控制绘制。<code>GLSurfaceView</code>一般用于全屏或者接近全屏的View绘制，若是小范围，可以用<code>TextureView</code>。亦或者自定义View继承SurfaceView，但是会费事。</p>\n<ul>\n<li><h5 id=\"在Manifest中声明使用OpenGL-ES\"><a href=\"#在Manifest中声明使用OpenGL-ES\" class=\"headerlink\" title=\"在Manifest中声明使用OpenGL ES\"></a>在Manifest中声明使用OpenGL ES</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-feature</span> <span class=\"attr\">android.glEsVersion</span>=<span class=\"string\">\"0x00020000\"</span> <span class=\"attr\">android.required</span>=<span class=\"string\">\"true\"</span>/&gt;</span></div></pre></td></tr></table></figure>\n<p>如果使用图像纹理压缩，则必须在清单中声明支持的压缩格式：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">supports-gl-texture</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"GL_OES_compressed_ETC1_RGB8_texture\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">supports-gl-texture</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"GL_OES_compressed_paletted_texture\"</span>/&gt;</span></div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>使用OpenGL ES的App可以Activity中使用GLSurfaceView布局。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//要求api&gt;=8</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OpenGLES20Activity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> GLSurfaceView mGLView;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">\t\t<span class=\"comment\">//创建GLSurfaceView对象，设置为Activity布局。</span></div><div class=\"line\">        mGLView = <span class=\"keyword\">new</span> MyGLSurfaceView(<span class=\"keyword\">this</span>);</div><div class=\"line\">        setContentView(mGLView);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"构建一个GLSurfaceView对象\"><a href=\"#构建一个GLSurfaceView对象\" class=\"headerlink\" title=\"构建一个GLSurfaceView对象\"></a>构建一个GLSurfaceView对象</h5><p>  GLSurfaceView是一个特殊的view，用于绘制OpenGL ES图像的一个容器。其内部类GLSurfaceView.Renderer用于控制绘制。<br>  一般需要继承<code>GLSurfaceView</code>来用于自主控制各类触控事件。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyGLSurfaceView</span> <span class=\"keyword\">extends</span> <span class=\"title\">GLSurfaceView</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> MyGLRenderer mRenderer;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyGLSurfaceView</span><span class=\"params\">(Context context)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Create an OpenGL ES 2.0 context</span></div><div class=\"line\">        setEGLContextClientVersion(<span class=\"number\">2</span>);</div><div class=\"line\"></div><div class=\"line\">        mRenderer = <span class=\"keyword\">new</span> MyGLRenderer();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Set the Renderer for drawing on the GLSurfaceView</span></div><div class=\"line\">        setRenderer(mRenderer);</div><div class=\"line\">        <span class=\"comment\">// Render the view only when there is a change in the drawing data</span></div><div class=\"line\">        <span class=\"comment\">//设置此属性的话，除非调用requestRender()，否则GLSurfaceView不会刷新。只当有图像变化才会刷新。</span></div><div class=\"line\">        setRenderMode(GLSurfaceView.RENDERMODE_WHEN_DIRTY);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"构建一个渲染类\"><a href=\"#构建一个渲染类\" class=\"headerlink\" title=\"构建一个渲染类\"></a>构建一个渲染类</h5><p>  <code>GLSurfaceView.Renderer</code>被称为渲染器，控制图像绘制。Android可调用：</p>\n<ul>\n<li>onSurfaceCreated();调用一次，用于创建OpenGL ES环境</li>\n<li>onDrawFrame();每次重绘View时调用。</li>\n<li><p>onSurfaceChanged();View的几何形态变化时调用。</p>\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyGLRenderer</span> <span class=\"keyword\">implements</span> <span class=\"title\">GLSurfaceView</span>.<span class=\"title\">Renderer</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSurfaceCreated</span><span class=\"params\">(GL10 unused, EGLConfig config)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 设置背景框架颜色，此处为黑色，ARGB值</span></div><div class=\"line\">        GLES20.glClearColor(<span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>, <span class=\"number\">1.0f</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDrawFrame</span><span class=\"params\">(GL10 unused)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 重绘背景色</span></div><div class=\"line\">        GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSurfaceChanged</span><span class=\"params\">(GL10 unused, <span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height)</span> </span>&#123;</div><div class=\"line\">        GLES20.glViewport(<span class=\"number\">0</span>, <span class=\"number\">0</span>, width, height);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2、定义shapes\"><a href=\"#2、定义shapes\" class=\"headerlink\" title=\"2、定义shapes\"></a>2、定义shapes</h4><p>了解了OpenGL ES的基本概念后，便可以学习如何绘制基本图形。</p>\n<ul>\n<li><p>定义一个三角形<br>  OpenGL ES允许我们使用三维空间坐标来绘制图形，通常会定义float坐标数组，为了高效此处使用了<br>  ByteBuffer：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Triangle</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> FloatBuffer vertexBuffer;<span class=\"comment\">//浮点数组</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 数组中含有的坐标点数</span></div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> COORDS_PER_VERTEX = <span class=\"number\">3</span>;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">float</span> triangleCoords[] = &#123;   <span class=\"comment\">//坐标点逆时针顺序</span></div><div class=\"line\">            <span class=\"number\">0.0f</span>,  <span class=\"number\">0.622008459f</span>, <span class=\"number\">0.0f</span>, <span class=\"comment\">// 顶点</span></div><div class=\"line\">            -<span class=\"number\">0.5f</span>, -<span class=\"number\">0.311004243f</span>, <span class=\"number\">0.0f</span>, <span class=\"comment\">// 左下角</span></div><div class=\"line\">            <span class=\"number\">0.5f</span>, -<span class=\"number\">0.311004243f</span>, <span class=\"number\">0.0f</span>  <span class=\"comment\">//右下角</span></div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//设置RGB，Alpha</span></div><div class=\"line\">    <span class=\"keyword\">float</span> color[] = &#123; <span class=\"number\">0.63671875f</span>, <span class=\"number\">0.76953125f</span>, <span class=\"number\">0.22265625f</span>, <span class=\"number\">1.0f</span> &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Triangle</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// initialize vertex byte buffer for shape coordinates</span></div><div class=\"line\">        ByteBuffer bb = ByteBuffer.allocateDirect(</div><div class=\"line\">                <span class=\"comment\">// (number of coordinate values * 4 bytes per float)</span></div><div class=\"line\">                triangleCoords.length * <span class=\"number\">4</span>);</div><div class=\"line\">        <span class=\"comment\">// use the device hardware's native byte order</span></div><div class=\"line\">        bb.order(ByteOrder.nativeOrder());</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// create a floating point buffer from the ByteBuffer</span></div><div class=\"line\">        vertexBuffer = bb.asFloatBuffer();</div><div class=\"line\">        <span class=\"comment\">// add the coordinates to the FloatBuffer</span></div><div class=\"line\">        vertexBuffer.put(triangleCoords);</div><div class=\"line\">        <span class=\"comment\">// set the buffer to read the first coordinate</span></div><div class=\"line\">        vertexBuffer.position(<span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  默认情况下，OpenGL ES会有一个[0,0,0]的三维坐标系。更多的需要参考OpenGL手册。</p>\n</li>\n<li>定义一个矩形<br>  如下示例演示通过定义两个三角形来实现一个矩形。<br>  <img src=\"/2017/03/27/第四篇、Android图像与动画/ccw-square.png\" alt=\"矩形\"><pre><code><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//绘制两个三角形，所以使用一个绘制列表来通知OpenGL如何绘制顶点。</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> FloatBuffer vertexBuffer;</div><div class=\"line\">    <span class=\"keyword\">private</span> ShortBuffer drawListBuffer;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// number of coordinates per vertex in this array</span></div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> COORDS_PER_VERTEX = <span class=\"number\">3</span>;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">float</span> squareCoords[] = &#123;</div><div class=\"line\">            -<span class=\"number\">0.5f</span>,  <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>,   <span class=\"comment\">// top left</span></div><div class=\"line\">            -<span class=\"number\">0.5f</span>, -<span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>,   <span class=\"comment\">// bottom left</span></div><div class=\"line\">            <span class=\"number\">0.5f</span>, -<span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>,   <span class=\"comment\">// bottom right</span></div><div class=\"line\">            <span class=\"number\">0.5f</span>,  <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span> &#125;; <span class=\"comment\">// top right</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">short</span> drawOrder[] = &#123; <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> &#125;; <span class=\"comment\">// order to draw vertices</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Square</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// initialize vertex byte buffer for shape coordinates</span></div><div class=\"line\">        ByteBuffer bb = ByteBuffer.allocateDirect(</div><div class=\"line\">        <span class=\"comment\">// (# of coordinate values * 4 bytes per float)</span></div><div class=\"line\">                squareCoords.length * <span class=\"number\">4</span>);</div><div class=\"line\">        bb.order(ByteOrder.nativeOrder());</div><div class=\"line\">        vertexBuffer = bb.asFloatBuffer();</div><div class=\"line\">        vertexBuffer.put(squareCoords);</div><div class=\"line\">        vertexBuffer.position(<span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// initialize byte buffer for the draw list</span></div><div class=\"line\">        ByteBuffer dlb = ByteBuffer.allocateDirect(</div><div class=\"line\">        <span class=\"comment\">// (# of coordinate values * 2 bytes per short)</span></div><div class=\"line\">                drawOrder.length * <span class=\"number\">2</span>);</div><div class=\"line\">        dlb.order(ByteOrder.nativeOrder());</div><div class=\"line\">        drawListBuffer = dlb.asShortBuffer();</div><div class=\"line\">        drawListBuffer.put(drawOrder);</div><div class=\"line\">        drawListBuffer.position(<span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</code></pre></li>\n</ul>\n<h4 id=\"3、绘制shapes\"><a href=\"#3、绘制shapes\" class=\"headerlink\" title=\"3、绘制shapes\"></a>3、绘制shapes</h4><p>如上小节只是介绍了如何定义一个shape图形，本节将介绍如何绘制出需要的图形。出于内存和效率考虑，<br>除非加载的图形变化，一般都在<code>onSurfaceCreated()</code>中初始化shape图形。</p>\n<ul>\n<li><h5 id=\"初始化图形\"><a href=\"#初始化图形\" class=\"headerlink\" title=\"初始化图形\"></a>初始化图形</h5>  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyGLRenderer</span> <span class=\"keyword\">implements</span> <span class=\"title\">GLSurfaceView</span>.<span class=\"title\">Renderer</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">private</span> Triangle mTriangle;</div><div class=\"line\">    <span class=\"keyword\">private</span> Square   mSquare;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSurfaceCreated</span><span class=\"params\">(GL10 unused, EGLConfig config)</span> </span>&#123;</div><div class=\"line\">        ...</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// initialize a triangle</span></div><div class=\"line\">        mTriangle = <span class=\"keyword\">new</span> Triangle();</div><div class=\"line\">        <span class=\"comment\">// initialize a square</span></div><div class=\"line\">        mSquare = <span class=\"keyword\">new</span> Square();</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  使用OpenGL ES 绘制一个定义好的图形，需要如下步骤：</p>\n<ul>\n<li>顶点着色器（Vertex Shader）：用于渲染顶点的OpenGL ES 代码</li>\n<li>片段着色器（Fragment Shader）：使用颜色和纹理渲染图形表面的OpenGL ES 代码</li>\n<li><p>程式（Program）： OpenGL ES对象，包含各类着色器等。</p>\n<p>示例:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String vertexShaderCode =</div><div class=\"line\">    <span class=\"string\">\"attribute vec4 vPosition;\"</span> +</div><div class=\"line\">    <span class=\"string\">\"void main() &#123;\"</span> +</div><div class=\"line\">    <span class=\"string\">\"  gl_Position = vPosition;\"</span> +</div><div class=\"line\">    <span class=\"string\">\"&#125;\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String fragmentShaderCode =</div><div class=\"line\">    <span class=\"string\">\"precision mediump float;\"</span> +</div><div class=\"line\">    <span class=\"string\">\"uniform vec4 vColor;\"</span> +</div><div class=\"line\">    <span class=\"string\">\"void main() &#123;\"</span> +</div><div class=\"line\">    <span class=\"string\">\"  gl_FragColor = vColor;\"</span> +</div><div class=\"line\">    <span class=\"string\">\"&#125;\"</span>;</div><div class=\"line\"></div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>着色器包含OpenGL Shading Language（GLSL）代码，需要先编译，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">loadShader</span><span class=\"params\">(<span class=\"keyword\">int</span> type, String shaderCode)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// create a vertex shader type (GLES20.GL_VERTEX_SHADER)</span></div><div class=\"line\">    <span class=\"comment\">// or a fragment shader type (GLES20.GL_FRAGMENT_SHADER)</span></div><div class=\"line\">    <span class=\"keyword\">int</span> shader = GLES20.glCreateShader(type);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// add the source code to the shader and compile it</span></div><div class=\"line\">    GLES20.glShaderSource(shader, shaderCode);</div><div class=\"line\">    GLES20.glCompileShader(shader);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> shader;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><h5 id=\"画图\"><a href=\"#画图\" class=\"headerlink\" title=\"画图\"></a>画图</h5><p>  为了绘制你的图形，你必须编译着色器代码，将它们添加至一个OpenGL ES Program对象中，然后执行链接。<br>  在你的绘制对象的构造函数里做这些事情，这样上述步骤就只用执行一次。</p>\n<blockquote>\n<p>Note：编译OpenGL ES着色器及链接操作对于CPU周期和处理时间而言，消耗是巨大的，所以你应该避免重复执行这些事情。<br>如果在执行期间不知道着色器的内容，那么你应该在构建你的应用时，确保它们只被创建了一次，并且缓存以备后续使用。</p>\n</blockquote>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> class <span class=\"title\">Triangle</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> mProgram;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Triangle</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        ...</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">int</span> vertexShader = MyGLRenderer.loadShader(GLES20.GL_VERTEX_SHADER,</div><div class=\"line\">                                            vertexShaderCode);</div><div class=\"line\">        <span class=\"keyword\">int</span> fragmentShader = MyGLRenderer.loadShader(GLES20.GL_FRAGMENT_SHADER,</div><div class=\"line\">                                            fragmentShaderCode);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// create empty OpenGL ES Program</span></div><div class=\"line\">        mProgram = GLES20.glCreateProgram();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// add the vertex shader to program</span></div><div class=\"line\">        GLES20.glAttachShader(mProgram, vertexShader);</div><div class=\"line\">        <span class=\"comment\">// add the fragment shader to program</span></div><div class=\"line\">        GLES20.glAttachShader(mProgram, fragmentShader);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// creates OpenGL ES program executables</span></div><div class=\"line\">        GLES20.glLinkProgram(mProgram);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  绘制属性会根据图形而变化，就需要将变化逻辑一同写入绘制参数，</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mPositionHandle;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mColorHandle;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> vertexCount = triangleCoords.length / COORDS_PER_VERTEX;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> vertexStride = COORDS_PER_VERTEX * <span class=\"number\">4</span>; <span class=\"comment\">// 4 bytes per vertex</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Add program to OpenGL ES environment</span></div><div class=\"line\">    GLES20.glUseProgram(mProgram);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// get handle to vertex shader's vPosition member</span></div><div class=\"line\">    mPositionHandle = GLES20.glGetAttribLocation(mProgram, <span class=\"string\">\"vPosition\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Enable a handle to the triangle vertices</span></div><div class=\"line\">    GLES20.glEnableVertexAttribArray(mPositionHandle);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Prepare the triangle coordinate data</span></div><div class=\"line\">    GLES20.glVertexAttribPointer(mPositionHandle, COORDS_PER_VERTEX,</div><div class=\"line\">                                GLES20.GL_FLOAT, <span class=\"keyword\">false</span>,</div><div class=\"line\">                                vertexStride, vertexBuffer);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// get handle to fragment shader's vColor member</span></div><div class=\"line\">    mColorHandle = GLES20.glGetUniformLocation(mProgram, <span class=\"string\">\"vColor\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Set color for drawing the triangle</span></div><div class=\"line\">    GLES20.glUniform4fv(mColorHandle, <span class=\"number\">1</span>, color, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Draw the triangle</span></div><div class=\"line\">    GLES20.glDrawArrays(GLES20.GL_TRIANGLES, <span class=\"number\">0</span>, vertexCount);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Disable vertex array</span></div><div class=\"line\">    GLES20.glDisableVertexAttribArray(mPositionHandle);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  如此只需要在渲染器的<code>onDrawFrame()</code>中调用上面的<code>onDraw()</code>方法即可。<br>  <img src=\"/2017/03/27/第四篇、Android图像与动画/ogl-triangle.png\" alt=\"绘制图形\"></p>\n<h4 id=\"3、运用投影和相机视角\"><a href=\"#3、运用投影和相机视角\" class=\"headerlink\" title=\"3、运用投影和相机视角\"></a>3、运用投影和相机视角</h4><p>在OpenGL ES 环境中，利用投影和相机视角可以将图像更为逼真的显示。</p>\n</li>\n</ul>\n<ol>\n<li>投影(Projection)：此类变化基于GLSurfaceView的长宽。</li>\n<li>相机视角(Camera View):此类变化基于OpenGL ES 的虚拟相机。</li>\n</ol>\n<ul>\n<li><h5 id=\"定义一个投影\"><a href=\"#定义一个投影\" class=\"headerlink\" title=\"定义一个投影\"></a>定义一个投影</h5>投影变换的数据计算在GLSurfaceView.Render类中的onSurfaceChanged()中执行。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// mMVPMatrix is an abbreviation for \"Model View Projection Matrix\"</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">float</span>[] mMVPMatrix = <span class=\"keyword\">new</span> <span class=\"keyword\">float</span>[<span class=\"number\">16</span>];</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">float</span>[] mProjectionMatrix = <span class=\"keyword\">new</span> <span class=\"keyword\">float</span>[<span class=\"number\">16</span>];</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">float</span>[] mViewMatrix = <span class=\"keyword\">new</span> <span class=\"keyword\">float</span>[<span class=\"number\">16</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSurfaceChanged</span><span class=\"params\">(GL10 unused, <span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height)</span> </span>&#123;</div><div class=\"line\">    GLES20.glViewport(<span class=\"number\">0</span>, <span class=\"number\">0</span>, width, height);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">float</span> ratio = (<span class=\"keyword\">float</span>) width / height;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// this projection matrix is applied to object coordinates</span></div><div class=\"line\">    <span class=\"comment\">// in the onDrawFrame() method</span></div><div class=\"line\">    Matrix.frustumM(mProjectionMatrix, <span class=\"number\">0</span>, -ratio, ratio, -<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">7</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>若是绘图只是用投影，会让图像显得空旷，最好结合相机视角来绘制。</p>\n</blockquote>\n<ul>\n<li><h5 id=\"定义一个相机视角\"><a href=\"#定义一个相机视角\" class=\"headerlink\" title=\"定义一个相机视角\"></a>定义一个相机视角</h5>使用<code>Matrix.setLookAtM()</code>来换算计算，再结合如上投影换算：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDrawFrame</span><span class=\"params\">(GL10 unused)</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// Set the camera position (View matrix)</span></div><div class=\"line\">    Matrix.setLookAtM(mViewMatrix, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, -<span class=\"number\">3</span>, <span class=\"number\">0f</span>, <span class=\"number\">0f</span>, <span class=\"number\">0f</span>, <span class=\"number\">0f</span>, <span class=\"number\">1.0f</span>, <span class=\"number\">0.0f</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Calculate the projection and view transformation</span></div><div class=\"line\">    Matrix.multiplyMM(mMVPMatrix, <span class=\"number\">0</span>, mProjectionMatrix, <span class=\"number\">0</span>, mViewMatrix, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Draw shape</span></div><div class=\"line\">    mTriangle.draw(mMVPMatrix);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>将上一节的三角形使用投影和视角绘制：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Triangle</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//为顶点添加渲染着色器，Matrix</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String vertexShaderCode =</div><div class=\"line\">        <span class=\"comment\">// This matrix member variable provides a hook to manipulate</span></div><div class=\"line\">        <span class=\"comment\">// the coordinates of the objects that use this vertex shader</span></div><div class=\"line\">        <span class=\"string\">\"uniform mat4 uMVPMatrix;\"</span> +</div><div class=\"line\">        <span class=\"string\">\"attribute vec4 vPosition;\"</span> +</div><div class=\"line\">        <span class=\"string\">\"void main() &#123;\"</span> +</div><div class=\"line\">        <span class=\"comment\">// the matrix must be included as a modifier of gl_Position</span></div><div class=\"line\">        <span class=\"comment\">// Note that the uMVPMatrix factor *must be first* in order</span></div><div class=\"line\">        <span class=\"comment\">// for the matrix multiplication product to be correct.</span></div><div class=\"line\">        <span class=\"string\">\"  gl_Position = uMVPMatrix * vPosition;\"</span> +</div><div class=\"line\">        <span class=\"string\">\"&#125;\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Use to access and set the view transformation</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mMVPMatrixHandle;</div><div class=\"line\"></div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>修改<code>onDraw ()</code>方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">(<span class=\"keyword\">float</span>[] mvpMatrix)</span> </span>&#123; <span class=\"comment\">// pass in the calculated transformation matrix</span></div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// get handle to shape's transformation matrix</span></div><div class=\"line\">    mMVPMatrixHandle = GLES20.glGetUniformLocation(mProgram, <span class=\"string\">\"uMVPMatrix\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Pass the projection and view transformation to the shader</span></div><div class=\"line\">    GLES20.glUniformMatrix4fv(mMVPMatrixHandle, <span class=\"number\">1</span>, <span class=\"keyword\">false</span>, mvpMatrix, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Draw the triangle</span></div><div class=\"line\">    GLES20.glDrawArrays(GLES20.GL_TRIANGLES, <span class=\"number\">0</span>, vertexCount);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Disable vertex array</span></div><div class=\"line\">    GLES20.glDisableVertexAttribArray(mPositionHandle);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>效果如图：<img src=\"/2017/03/27/第四篇、Android图像与动画/ogl-triangle-projected.png\" alt=\"视角绘图\"></p>\n<h4 id=\"4、添加移动\"><a href=\"#4、添加移动\" class=\"headerlink\" title=\"4、添加移动\"></a>4、添加移动</h4><p>OpenGL 区别于Android的canvas和Drawable图形框架，在于其提供的特殊功能，如3D效果等。</p>\n<ul>\n<li><h5 id=\"旋转图像\"><a href=\"#旋转图像\" class=\"headerlink\" title=\"旋转图像\"></a>旋转图像</h5>在OpenGL ES2.0中新增一个变化矩阵，结合之前的投影和视角，来绘制图形移动。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">float</span>[] mRotationMatrix = <span class=\"keyword\">new</span> <span class=\"keyword\">float</span>[<span class=\"number\">16</span>];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDrawFrame</span><span class=\"params\">(GL10 gl)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">float</span>[] scratch = <span class=\"keyword\">new</span> <span class=\"keyword\">float</span>[<span class=\"number\">16</span>];</div><div class=\"line\"></div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Create a rotation transformation for the triangle</span></div><div class=\"line\">    <span class=\"keyword\">long</span> time = SystemClock.uptimeMillis() % <span class=\"number\">4000L</span>;</div><div class=\"line\">    <span class=\"keyword\">float</span> angle = <span class=\"number\">0.090f</span> * ((<span class=\"keyword\">int</span>) time);</div><div class=\"line\">    Matrix.setRotateM(mRotationMatrix, <span class=\"number\">0</span>, angle, <span class=\"number\">0</span>, <span class=\"number\">0</span>, -<span class=\"number\">1.0f</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Combine the rotation matrix with the projection and camera view</span></div><div class=\"line\">    <span class=\"comment\">// Note that the mMVPMatrix factor *must be first* in order</span></div><div class=\"line\">    <span class=\"comment\">// for the matrix multiplication product to be correct.</span></div><div class=\"line\">    Matrix.multiplyMM(scratch, <span class=\"number\">0</span>, mMVPMatrix, <span class=\"number\">0</span>, mRotationMatrix, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Draw triangle</span></div><div class=\"line\">    mTriangle.draw(scratch);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p><strong>Note:</strong> 不要将<code>GLSurfaceView.RENDERMODE_WHEN_DIRTY</code>注释掉，否则就可能不会移动，也不会渲染。</p>\n</blockquote>\n<ul>\n<li><h5 id=\"启用连续渲染\"><a href=\"#启用连续渲染\" class=\"headerlink\" title=\"启用连续渲染\"></a>启用连续渲染</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyGLSurfaceView</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// Render the view only when there is a change in the drawing data.</span></div><div class=\"line\">    <span class=\"comment\">// To allow the triangle to rotate automatically, this line is commented out:</span></div><div class=\"line\">    <span class=\"comment\">//setRenderMode(GLSurfaceView.RENDERMODE_WHEN_DIRTY);</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"5、响应触摸事件\"><a href=\"#5、响应触摸事件\" class=\"headerlink\" title=\"5、响应触摸事件\"></a>5、响应触摸事件</h4><p>炫酷的图形图像，也可以和用户有良好的交互体验。重写<code>GLSurfaceView</code>类的<code>onTouchEvent()</code>方法<br>来响应触摸事件。</p>\n<ul>\n<li><h5 id=\"注册监听\"><a href=\"#注册监听\" class=\"headerlink\" title=\"注册监听\"></a>注册监听</h5>在重写<code>onTouchEvent()</code>方法后，想要完成事件相应，就需要注册监听。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> TOUCH_SCALE_FACTOR = <span class=\"number\">180.0f</span> / <span class=\"number\">320</span>;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">float</span> mPreviousX;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">float</span> mPreviousY;</div><div class=\"line\"><span class=\"comment\">//复写onTouchEvent方法，本文用于响应MotionEvent.ACTION_MOVE事件</span></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouchEvent</span><span class=\"params\">(MotionEvent e)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// MotionEvent reports input details from the touch screen</span></div><div class=\"line\">    <span class=\"comment\">// and other input controls. In this case, you are only</span></div><div class=\"line\">    <span class=\"comment\">// interested in events where the touch position changed.</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">float</span> x = e.getX();</div><div class=\"line\">    <span class=\"keyword\">float</span> y = e.getY();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">switch</span> (e.getAction()) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE:</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">float</span> dx = x - mPreviousX;</div><div class=\"line\">            <span class=\"keyword\">float</span> dy = y - mPreviousY;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// reverse direction of rotation above the mid-line</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (y &gt; getHeight() / <span class=\"number\">2</span>) &#123;</div><div class=\"line\">              dx = dx * -<span class=\"number\">1</span> ;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// reverse direction of rotation to left of the mid-line</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (x &lt; getWidth() / <span class=\"number\">2</span>) &#123;</div><div class=\"line\">              dy = dy * -<span class=\"number\">1</span> ;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            mRenderer.setAngle(</div><div class=\"line\">                    mRenderer.getAngle() +</div><div class=\"line\">                    ((dx + dy) * TOUCH_SCALE_FACTOR));</div><div class=\"line\">            requestRender();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    mPreviousX = x;</div><div class=\"line\">    mPreviousY = y;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>如上代码调用<code>requestRender()</code>来刷新绘制，通过<code>setRenderMode()</code>来提高效率，只有变化时候才绘制：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyGLSurfaceView</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// Render the view only when there is a change in the drawing data</span></div><div class=\"line\">    setRenderMode(GLSurfaceView.RENDERMODE_WHEN_DIRTY);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li><h5 id=\"公开变量旋转角度\"><a href=\"#公开变量旋转角度\" class=\"headerlink\" title=\"公开变量旋转角度\"></a>公开变量旋转角度</h5>旋转角度的变量需要public，包括get和set方法<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyGLRenderer</span> <span class=\"keyword\">implements</span> <span class=\"title\">GLSurfaceView</span>.<span class=\"title\">Renderer</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">float</span> mAngle;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">float</span> <span class=\"title\">getAngle</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mAngle;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAngle</span><span class=\"params\">(<span class=\"keyword\">float</span> angle)</span> </span>&#123;</div><div class=\"line\">        mAngle = angle;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>然后在调用绘制图形的地方，填入角度值，启动旋转。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDrawFrame</span><span class=\"params\">(GL10 gl)</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">float</span>[] scratch = <span class=\"keyword\">new</span> <span class=\"keyword\">float</span>[<span class=\"number\">16</span>];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Create a rotation for the triangle</span></div><div class=\"line\">    <span class=\"comment\">// long time = SystemClock.uptimeMillis() % 4000L;</span></div><div class=\"line\">    <span class=\"comment\">// float angle = 0.090f * ((int) time);</span></div><div class=\"line\">    Matrix.setRotateM(mRotationMatrix, <span class=\"number\">0</span>, mAngle, <span class=\"number\">0</span>, <span class=\"number\">0</span>, -<span class=\"number\">1.0f</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Combine the rotation matrix with the projection and camera view</span></div><div class=\"line\">    <span class=\"comment\">// Note that the mMVPMatrix factor *must be first* in order</span></div><div class=\"line\">    <span class=\"comment\">// for the matrix multiplication product to be correct.</span></div><div class=\"line\">    Matrix.multiplyMM(scratch, <span class=\"number\">0</span>, mMVPMatrix, <span class=\"number\">0</span>, mRotationMatrix, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Draw triangle</span></div><div class=\"line\">    mTriangle.draw(scratch);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>滑动效果：<img src=\"/2017/03/27/第四篇、Android图像与动画/ogl-triangle-touch.png\" alt=\"滑动效果\"></p>\n<h3 id=\"3、添加动画\"><a href=\"#3、添加动画\" class=\"headerlink\" title=\"3、添加动画\"></a>3、添加动画</h3><p>动画效果可以让我们的App更为炫酷，但是也要在适当的地方和时机使用它。本章主要介绍Android的一些动画效果实现。</p>\n<h4 id=\"1、View间渐变\"><a href=\"#1、View间渐变\" class=\"headerlink\" title=\"1、View间渐变\"></a>1、View间渐变</h4><p>渐变动画通常用于View的切换，淡入淡出效果。<a href=\"http://hukai.me/android-training-course-in-chinese/animations/anim_crossfade.mp4\" target=\"_blank\" rel=\"external\">渐变动画</a></p>\n<ul>\n<li><h5 id=\"创建View\"><a href=\"#创建View\" class=\"headerlink\" title=\"创建View\"></a>创建View</h5><p>示例，一个进度圈和可滑动的view</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">FrameLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ScrollView</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"/apk/res/android\"</span></span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span> <span class=\"attr\">style</span>=<span class=\"string\">\"?android:textAppearanceMedium\"</span></span></div><div class=\"line\">            <span class=\"attr\">android:lineSpacingMultiplier</span>=<span class=\"string\">\"1.2\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">            <span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/lorem_ipsum\"</span></div><div class=\"line\">            <span class=\"attr\">android:padding</span>=<span class=\"string\">\"16dp\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ScrollView</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ProgressBar</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/loading_spinner\"</span></span></div><div class=\"line\">        <span class=\"attr\">style</span>=<span class=\"string\">\"?android:progressBarStyleLarge\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">\"center\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">FrameLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"view设置动画\"><a href=\"#view设置动画\" class=\"headerlink\" title=\"view设置动画\"></a>view设置动画</h5><p>为上面的view设置动画效果，步骤如下：</p>\n</li>\n</ul>\n<ol>\n<li>设置view的成员变量，以备后用。</li>\n<li>先设置淡入的View的visible为gone</li>\n<li>将<code>config_shortAnimTime</code>系统属性暂存到成员变量。</li>\n</ol>\n<p>示例：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CrossfadeActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> View mContentView;</div><div class=\"line\">    <span class=\"keyword\">private</span> View mLoadingView;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mShortAnimationDuration;</div><div class=\"line\"></div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_crossfade);</div><div class=\"line\"></div><div class=\"line\">        mContentView = findViewById(R.id.content);</div><div class=\"line\">        mLoadingView = findViewById(R.id.loading_spinner);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Initially hide the content view.</span></div><div class=\"line\">        mContentView.setVisibility(View.GONE);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Retrieve and cache the system's default \"short\" animation time.</span></div><div class=\"line\">        mShortAnimationDuration = getResources().getInteger(</div><div class=\"line\">                android.R.integer.config_shortAnimTime);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li><h5 id=\"渐变View\"><a href=\"#渐变View\" class=\"headerlink\" title=\"渐变View\"></a>渐变View</h5>完成如上设置后，开始实现View的渐变效果：</li>\n</ul>\n<ol>\n<li>将需要淡入的View的Visible改为VISIBLE，透明度alpha=0</li>\n<li>将淡入的View，alpha从0–1，淡出的View，alpha从1–0</li>\n<li>使用<code>Animator.AnimatorListener</code>中的<code>onAnimationEnd()</code>来设置淡出的view的visible为gone，即使alpha=0，但是也会占用布局资源，所以需要gone。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> View mContentView;</div><div class=\"line\"><span class=\"keyword\">private</span> View mLoadingView;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mShortAnimationDuration;</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">crossfade</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Set the content view to 0% opacity but visible, so that it is visible</span></div><div class=\"line\">    <span class=\"comment\">// (but fully transparent) during the animation.</span></div><div class=\"line\">    mContentView.setAlpha(<span class=\"number\">0f</span>);</div><div class=\"line\">    mContentView.setVisibility(View.VISIBLE);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Animate the content view to 100% opacity, and clear any animation</span></div><div class=\"line\">    <span class=\"comment\">// listener set on the view.</span></div><div class=\"line\">    mContentView.animate()</div><div class=\"line\">            .alpha(<span class=\"number\">1f</span>)</div><div class=\"line\">            .setDuration(mShortAnimationDuration)</div><div class=\"line\">            .setListener(<span class=\"keyword\">null</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Animate the loading view to 0% opacity. After the animation ends,</span></div><div class=\"line\">    <span class=\"comment\">// set its visibility to GONE as an optimization step (it won't</span></div><div class=\"line\">    <span class=\"comment\">// participate in layout passes, etc.)</span></div><div class=\"line\">    mLoadingView.animate()</div><div class=\"line\">            .alpha(<span class=\"number\">0f</span>)</div><div class=\"line\">            .setDuration(mShortAnimationDuration)</div><div class=\"line\">            .setListener(<span class=\"keyword\">new</span> AnimatorListenerAdapter() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationEnd</span><span class=\"params\">(Animator animation)</span> </span>&#123;</div><div class=\"line\">                    mLoadingView.setVisibility(View.GONE);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"2、使用Viewpager实现屏幕滑动\"><a href=\"#2、使用Viewpager实现屏幕滑动\" class=\"headerlink\" title=\"2、使用Viewpager实现屏幕滑动\"></a>2、使用Viewpager实现屏幕滑动</h4><p>类似View的淡入淡出切换，而屏幕的切换是整个的界面转换，使用<code>supports library</code>的ViewPager来实现。<br><a href=\"http://hukai.me/android-training-course-in-chinese/animations/anim_screenslide.mp4\" target=\"_blank\" rel=\"external\">ViewPager</a></p>\n<ul>\n<li><h5 id=\"创建View-1\"><a href=\"#创建View-1\" class=\"headerlink\" title=\"创建View\"></a>创建View</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- fragment_screen_slide_page.xml --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ScrollView</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/content\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span> &gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span> <span class=\"attr\">style</span>=<span class=\"string\">\"?android:textAppearanceMedium\"</span></span></div><div class=\"line\">        <span class=\"attr\">android:padding</span>=<span class=\"string\">\"16dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:lineSpacingMultiplier</span>=<span class=\"string\">\"1.2\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/lorem_ipsum\"</span> /&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ScrollView</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>如上定义一个fragment和text view</p>\n<ul>\n<li><h5 id=\"创建Fragment\"><a href=\"#创建Fragment\" class=\"headerlink\" title=\"创建Fragment\"></a>创建Fragment</h5><p>创建一个Fragment对象实例来展示view布局。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.app.Fragment;</div><div class=\"line\">...</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScreenSlidePageFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, ViewGroup container,</span></span></div><div class=\"line\">            Bundle savedInstanceState) &#123;</div><div class=\"line\">        ViewGroup rootView = (ViewGroup) inflater.inflate(</div><div class=\"line\">                R.layout.fragment_screen_slide_page, container, <span class=\"keyword\">false</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> rootView;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"添加viewPager\"><a href=\"#添加viewPager\" class=\"headerlink\" title=\"添加viewPager\"></a>添加viewPager</h5><p>ViewPager有内建的滑动手势，配合PagerAdapter来适配数据。需要创建一个包含ViewPager的布局</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- activity_screen_slide.xml --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.v4.view.ViewPager</span></span></div><div class=\"line\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/pager\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span> /&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>接下来就是创建一个Activity来关联布局，实现逻辑：</p>\n<ol>\n<li>content View中包含上述布局文件</li>\n<li>创建<code>FragmentStatePagerAdapter</code>的子类，实现<code>getItem()</code>方法，把ScreenSlidePageFragment实例作为新页面补充进来。<br>PagerAdapter还需要实现getCount()方法，它返回 Adapter将要创建页面的总数（例如5个）。</li>\n<li>关联<code>ViewPager</code>和<code>PagerAdapter</code></li>\n<li>处理Back按钮，按下变为在虚拟的Fragment栈中回退。如果用户已经在第一个页面了，<br>则在Activity的回退栈（back stack）中回退。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.app.Fragment;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.app.FragmentManager;</div><div class=\"line\">...</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScreenSlidePagerActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">FragmentActivity</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//屏幕页面数目</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> NUM_PAGES = <span class=\"number\">5</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//View Pager对象，用于处理页面切换的容器</span></div><div class=\"line\">    <span class=\"keyword\">private</span> ViewPager mPager;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//页面数据适配器</span></div><div class=\"line\">    <span class=\"keyword\">private</span> PagerAdapter mPagerAdapter;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_screen_slide);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 初始化数据</span></div><div class=\"line\">        mPager = (ViewPager) findViewById(R.id.pager);</div><div class=\"line\">        mPagerAdapter = <span class=\"keyword\">new</span> ScreenSlidePagerAdapter(getSupportFragmentManager());</div><div class=\"line\">        mPager.setAdapter(mPagerAdapter);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//处理返回按钮的点击事件</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onBackPressed</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mPager.getCurrentItem() == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">//要是第一个页面，返回按钮就是退出</span></div><div class=\"line\">            <span class=\"keyword\">super</span>.onBackPressed();</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">//不是第一个页面，返回按钮就是返回上一个页面</span></div><div class=\"line\">            mPager.setCurrentItem(mPager.getCurrentItem() - <span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//简单的适配器，用于加入几个页面</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScreenSlidePagerAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">FragmentStatePagerAdapter</span> </span>&#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ScreenSlidePagerAdapter</span><span class=\"params\">(FragmentManager fm)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(fm);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Fragment <span class=\"title\">getItem</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ScreenSlidePageFragment();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getCount</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> NUM_PAGES;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>ViewPager包含有默认的滑屏动画，若要自定义切换动画需要实现<code>viewpager.transformer</code>接口，并补充道Viewpager中<br>，实现其方法<code>transformPage()</code>。该方法会在显示页面滑动时，于其相邻的两个页面间调用。重要的参数就是当前页面<br>的位置position，可以根据页面位置来设置不同的动画效果。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ViewPager mPager = (ViewPager) findViewById(R.id.pager);</div><div class=\"line\">...</div><div class=\"line\">mPager.setPagerTransformer(<span class=\"keyword\">true</span>,<span class=\"keyword\">new</span> ZoomOutPagerTransformer());</div></pre></td></tr></table></figure></p>\n<ul>\n<li><h5 id=\"ZoomOutPagerTransformer\"><a href=\"#ZoomOutPagerTransformer\" class=\"headerlink\" title=\"ZoomOutPagerTransformer\"></a>ZoomOutPagerTransformer</h5><p>效果是逐渐褪色的淡出模式<a href=\"http://hukai.me/android-training-course-in-chinese/animations/anim_page_transformer_zoomout.mp4\" target=\"_blank\" rel=\"external\">演示</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ZoomOutPageTransformer</span> <span class=\"keyword\">implements</span> <span class=\"title\">ViewPager</span>.<span class=\"title\">PageTransformer</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> MIN_SCALE = <span class=\"number\">0.85f</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> MIN_ALPHA = <span class=\"number\">0.5f</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">transformPage</span><span class=\"params\">(View view, <span class=\"keyword\">float</span> position)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> pageWidth = view.getWidth();</div><div class=\"line\">        <span class=\"keyword\">int</span> pageHeight = view.getHeight();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (position &lt; -<span class=\"number\">1</span>) &#123; <span class=\"comment\">// [-Infinity,-1)</span></div><div class=\"line\">            <span class=\"comment\">// This page is way off-screen to the left.</span></div><div class=\"line\">            view.setAlpha(<span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (position &lt;= <span class=\"number\">1</span>) &#123; <span class=\"comment\">// [-1,1]</span></div><div class=\"line\">            <span class=\"comment\">// Modify the default slide transition to shrink the page as well</span></div><div class=\"line\">            <span class=\"keyword\">float</span> scaleFactor = Math.max(MIN_SCALE, <span class=\"number\">1</span> - Math.abs(position));</div><div class=\"line\">            <span class=\"keyword\">float</span> vertMargin = pageHeight * (<span class=\"number\">1</span> - scaleFactor) / <span class=\"number\">2</span>;</div><div class=\"line\">            <span class=\"keyword\">float</span> horzMargin = pageWidth * (<span class=\"number\">1</span> - scaleFactor) / <span class=\"number\">2</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (position &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                view.setTranslationX(horzMargin - vertMargin / <span class=\"number\">2</span>);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                view.setTranslationX(-horzMargin + vertMargin / <span class=\"number\">2</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// Scale the page down (between MIN_SCALE and 1)</span></div><div class=\"line\">            view.setScaleX(scaleFactor);</div><div class=\"line\">            view.setScaleY(scaleFactor);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// Fade the page relative to its size.</span></div><div class=\"line\">            view.setAlpha(MIN_ALPHA +</div><div class=\"line\">                    (scaleFactor - MIN_SCALE) /</div><div class=\"line\">                    (<span class=\"number\">1</span> - MIN_SCALE) * (<span class=\"number\">1</span> - MIN_ALPHA));</div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// (1,+Infinity]</span></div><div class=\"line\">            <span class=\"comment\">// This page is way off-screen to the right.</span></div><div class=\"line\">            view.setAlpha(<span class=\"number\">0</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"Depth-Pager-Transformer\"><a href=\"#Depth-Pager-Transformer\" class=\"headerlink\" title=\"Depth Pager Transformer\"></a>Depth Pager Transformer</h5><p>右滑动潜藏效果<a href=\"http://hukai.me/android-training-course-in-chinese/animations/anim_page_transformer_depth.mp4\" target=\"_blank\" rel=\"external\">video</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DepthPageTransformer</span> <span class=\"keyword\">implements</span> <span class=\"title\">ViewPager</span>.<span class=\"title\">PageTransformer</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> MIN_SCALE = <span class=\"number\">0.75f</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">transformPage</span><span class=\"params\">(View view, <span class=\"keyword\">float</span> position)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> pageWidth = view.getWidth();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (position &lt; -<span class=\"number\">1</span>) &#123; <span class=\"comment\">// [-Infinity,-1)</span></div><div class=\"line\">            <span class=\"comment\">// This page is way off-screen to the left.</span></div><div class=\"line\">            view.setAlpha(<span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (position &lt;= <span class=\"number\">0</span>) &#123; <span class=\"comment\">// [-1,0]</span></div><div class=\"line\">            <span class=\"comment\">// Use the default slide transition when moving to the left page</span></div><div class=\"line\">            view.setAlpha(<span class=\"number\">1</span>);</div><div class=\"line\">            view.setTranslationX(<span class=\"number\">0</span>);</div><div class=\"line\">            view.setScaleX(<span class=\"number\">1</span>);</div><div class=\"line\">            view.setScaleY(<span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (position &lt;= <span class=\"number\">1</span>) &#123; <span class=\"comment\">// (0,1]</span></div><div class=\"line\">            <span class=\"comment\">// Fade the page out.</span></div><div class=\"line\">            view.setAlpha(<span class=\"number\">1</span> - position);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// Counteract the default slide transition</span></div><div class=\"line\">            view.setTranslationX(pageWidth * -position);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// Scale the page down (between MIN_SCALE and 1)</span></div><div class=\"line\">            <span class=\"keyword\">float</span> scaleFactor = MIN_SCALE</div><div class=\"line\">                    + (<span class=\"number\">1</span> - MIN_SCALE) * (<span class=\"number\">1</span> - Math.abs(position));</div><div class=\"line\">            view.setScaleX(scaleFactor);</div><div class=\"line\">            view.setScaleY(scaleFactor);</div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// (1,+Infinity]</span></div><div class=\"line\">            <span class=\"comment\">// This page is way off-screen to the right.</span></div><div class=\"line\">            view.setAlpha(<span class=\"number\">0</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"3、实现Card翻转动画\"><a href=\"#3、实现Card翻转动画\" class=\"headerlink\" title=\"3、实现Card翻转动画\"></a>3、实现Card翻转动画</h4><p>通过自定义Fragment实现Card翻转效果的view切换。<a href=\"http://hukai.me/android-training-course-in-chinese/animations/anim_card_flip.mp4\" target=\"_blank\" rel=\"external\">card</a></p>\n<ul>\n<li><h5 id=\"创建Animator\"><a href=\"#创建Animator\" class=\"headerlink\" title=\"创建Animator\"></a>创建Animator</h5>创建Card翻转动画，我们需要两个Animator。一个让正面的card的右侧向左翻转渐出，一个让背面的Card向右翻转渐入。我们还需要两个 Animator让背面的card的右侧向左翻转渐入，一个让向右翻转渐入。</li>\n</ul>\n<p><strong>card_flip_left_in.xml</strong><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">set</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Before rotating, immediately set the alpha to 0. --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">objectAnimator</span></span></div><div class=\"line\">        <span class=\"attr\">android:valueFrom</span>=<span class=\"string\">\"1.0\"</span></div><div class=\"line\">        <span class=\"attr\">android:valueTo</span>=<span class=\"string\">\"0.0\"</span></div><div class=\"line\">        <span class=\"attr\">android:propertyName</span>=<span class=\"string\">\"alpha\"</span></div><div class=\"line\">        <span class=\"attr\">android:duration</span>=<span class=\"string\">\"0\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Rotate. --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">objectAnimator</span></span></div><div class=\"line\">        <span class=\"attr\">android:valueFrom</span>=<span class=\"string\">\"-180\"</span></div><div class=\"line\">        <span class=\"attr\">android:valueTo</span>=<span class=\"string\">\"0\"</span></div><div class=\"line\">        <span class=\"attr\">android:propertyName</span>=<span class=\"string\">\"rotationY\"</span></div><div class=\"line\">        <span class=\"attr\">android:interpolator</span>=<span class=\"string\">\"@android:interpolator/accelerate_decelerate\"</span></div><div class=\"line\">        <span class=\"attr\">android:duration</span>=<span class=\"string\">\"@integer/card_flip_time_full\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Half-way through the rotation (see startOffset), set the alpha to 1. --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">objectAnimator</span></span></div><div class=\"line\">        <span class=\"attr\">android:valueFrom</span>=<span class=\"string\">\"0.0\"</span></div><div class=\"line\">        <span class=\"attr\">android:valueTo</span>=<span class=\"string\">\"1.0\"</span></div><div class=\"line\">        <span class=\"attr\">android:propertyName</span>=<span class=\"string\">\"alpha\"</span></div><div class=\"line\">        <span class=\"attr\">android:startOffset</span>=<span class=\"string\">\"@integer/card_flip_time_half\"</span></div><div class=\"line\">        <span class=\"attr\">android:duration</span>=<span class=\"string\">\"1\"</span> /&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">set</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><strong>card_flip_left_out.xml</strong><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">set</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Rotate. --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">objectAnimator</span></span></div><div class=\"line\">        <span class=\"attr\">android:valueFrom</span>=<span class=\"string\">\"0\"</span></div><div class=\"line\">        <span class=\"attr\">android:valueTo</span>=<span class=\"string\">\"180\"</span></div><div class=\"line\">        <span class=\"attr\">android:propertyName</span>=<span class=\"string\">\"rotationY\"</span></div><div class=\"line\">        <span class=\"attr\">android:interpolator</span>=<span class=\"string\">\"@android:interpolator/accelerate_decelerate\"</span></div><div class=\"line\">        <span class=\"attr\">android:duration</span>=<span class=\"string\">\"@integer/card_flip_time_full\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Half-way through the rotation (see startOffset), set the alpha to 0. --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">objectAnimator</span></span></div><div class=\"line\">        <span class=\"attr\">android:valueFrom</span>=<span class=\"string\">\"1.0\"</span></div><div class=\"line\">        <span class=\"attr\">android:valueTo</span>=<span class=\"string\">\"0.0\"</span></div><div class=\"line\">        <span class=\"attr\">android:propertyName</span>=<span class=\"string\">\"alpha\"</span></div><div class=\"line\">        <span class=\"attr\">android:startOffset</span>=<span class=\"string\">\"@integer/card_flip_time_half\"</span></div><div class=\"line\">        <span class=\"attr\">android:duration</span>=<span class=\"string\">\"1\"</span> /&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">set</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><strong>card_flip_right_in.xml</strong><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">set</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Before rotating, immediately set the alpha to 0. --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">objectAnimator</span></span></div><div class=\"line\">        <span class=\"attr\">android:valueFrom</span>=<span class=\"string\">\"1.0\"</span></div><div class=\"line\">        <span class=\"attr\">android:valueTo</span>=<span class=\"string\">\"0.0\"</span></div><div class=\"line\">        <span class=\"attr\">android:propertyName</span>=<span class=\"string\">\"alpha\"</span></div><div class=\"line\">        <span class=\"attr\">android:duration</span>=<span class=\"string\">\"0\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Rotate. --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">objectAnimator</span></span></div><div class=\"line\">        <span class=\"attr\">android:valueFrom</span>=<span class=\"string\">\"180\"</span></div><div class=\"line\">        <span class=\"attr\">android:valueTo</span>=<span class=\"string\">\"0\"</span></div><div class=\"line\">        <span class=\"attr\">android:propertyName</span>=<span class=\"string\">\"rotationY\"</span></div><div class=\"line\">        <span class=\"attr\">android:interpolator</span>=<span class=\"string\">\"@android:interpolator/accelerate_decelerate\"</span></div><div class=\"line\">        <span class=\"attr\">android:duration</span>=<span class=\"string\">\"@integer/card_flip_time_full\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Half-way through the rotation (see startOffset), set the alpha to 1. --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">objectAnimator</span></span></div><div class=\"line\">        <span class=\"attr\">android:valueFrom</span>=<span class=\"string\">\"0.0\"</span></div><div class=\"line\">        <span class=\"attr\">android:valueTo</span>=<span class=\"string\">\"1.0\"</span></div><div class=\"line\">        <span class=\"attr\">android:propertyName</span>=<span class=\"string\">\"alpha\"</span></div><div class=\"line\">        <span class=\"attr\">android:startOffset</span>=<span class=\"string\">\"@integer/card_flip_time_half\"</span></div><div class=\"line\">        <span class=\"attr\">android:duration</span>=<span class=\"string\">\"1\"</span> /&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">set</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><strong>card_flip_right_out.xml</strong><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">set</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Rotate. --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">objectAnimator</span></span></div><div class=\"line\">        <span class=\"attr\">android:valueFrom</span>=<span class=\"string\">\"0\"</span></div><div class=\"line\">        <span class=\"attr\">android:valueTo</span>=<span class=\"string\">\"-180\"</span></div><div class=\"line\">        <span class=\"attr\">android:propertyName</span>=<span class=\"string\">\"rotationY\"</span></div><div class=\"line\">        <span class=\"attr\">android:interpolator</span>=<span class=\"string\">\"@android:interpolator/accelerate_decelerate\"</span></div><div class=\"line\">        <span class=\"attr\">android:duration</span>=<span class=\"string\">\"@integer/card_flip_time_full\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Half-way through the rotation (see startOffset), set the alpha to 0. --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">objectAnimator</span></span></div><div class=\"line\">        <span class=\"attr\">android:valueFrom</span>=<span class=\"string\">\"1.0\"</span></div><div class=\"line\">        <span class=\"attr\">android:valueTo</span>=<span class=\"string\">\"0.0\"</span></div><div class=\"line\">        <span class=\"attr\">android:propertyName</span>=<span class=\"string\">\"alpha\"</span></div><div class=\"line\">        <span class=\"attr\">android:startOffset</span>=<span class=\"string\">\"@integer/card_flip_time_half\"</span></div><div class=\"line\">        <span class=\"attr\">android:duration</span>=<span class=\"string\">\"1\"</span> /&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">set</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<ul>\n<li><h5 id=\"创建View-2\"><a href=\"#创建View-2\" class=\"headerlink\" title=\"创建View\"></a>创建View</h5>card的每个面都是一个布局，需要在Fragment中关联展示<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></div><div class=\"line\">    <span class=\"attr\">android:background</span>=<span class=\"string\">\"#a6c\"</span></div><div class=\"line\">    <span class=\"attr\">android:padding</span>=<span class=\"string\">\"16dp\"</span></div><div class=\"line\">    <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"bottom\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@android:id/text1\"</span></span></div><div class=\"line\">        <span class=\"attr\">style</span>=<span class=\"string\">\"?android:textAppearanceLarge\"</span></div><div class=\"line\">        <span class=\"attr\">android:textStyle</span>=<span class=\"string\">\"bold\"</span></div><div class=\"line\">        <span class=\"attr\">android:textColor</span>=<span class=\"string\">\"#fff\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/card_back_title\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span> <span class=\"attr\">style</span>=<span class=\"string\">\"?android:textAppearanceSmall\"</span></span></div><div class=\"line\">        <span class=\"attr\">android:textAllCaps</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">        <span class=\"attr\">android:textColor</span>=<span class=\"string\">\"#80ffffff\"</span></div><div class=\"line\">        <span class=\"attr\">android:textStyle</span>=<span class=\"string\">\"bold\"</span></div><div class=\"line\">        <span class=\"attr\">android:lineSpacingMultiplier</span>=<span class=\"string\">\"1.2\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/card_back_description\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>另一面：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ImageView</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:src</span>=<span class=\"string\">\"@drawable/image1\"</span></div><div class=\"line\">    <span class=\"attr\">android:scaleType</span>=<span class=\"string\">\"centerCrop\"</span></div><div class=\"line\">    <span class=\"attr\">android:contentDescription</span>=<span class=\"string\">\"@string/description_image_1\"</span> /&gt;</div></pre></td></tr></table></figure></p>\n<ul>\n<li><h5 id=\"创建Fragment-1\"><a href=\"#创建Fragment-1\" class=\"headerlink\" title=\"创建Fragment\"></a>创建Fragment</h5><p>Card的正反面都是Fragment，需要创建并关联布局</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CardFlipActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * A fragment representing the front of the card.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CardFrontFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, ViewGroup container,</span></span></div><div class=\"line\">                Bundle savedInstanceState) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> inflater.inflate(R.layout.fragment_card_front, container, <span class=\"keyword\">false</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * A fragment representing the back of the card.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CardBackFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, ViewGroup container,</span></span></div><div class=\"line\">                Bundle savedInstanceState) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> inflater.inflate(R.layout.fragment_card_back, container, <span class=\"keyword\">false</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"实现翻转Card动画\"><a href=\"#实现翻转Card动画\" class=\"headerlink\" title=\"实现翻转Card动画\"></a>实现翻转Card动画</h5><p>创建一个framelayout来用于activity展示fragment</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">FrameLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/container\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span> /&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>在Activity中实现展示<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CardFlipActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_activity_card_flip);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (savedInstanceState == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            getFragmentManager()</div><div class=\"line\">                    .beginTransaction()</div><div class=\"line\">                    .add(R.id.container, <span class=\"keyword\">new</span> CardFrontFragment())</div><div class=\"line\">                    .commit();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如上默认展示了card的正面，需要适时创建card的背面，并实现翻转。</p>\n<ol>\n<li><p>将Fragment转换设置我们刚做的自定义动画</p>\n</li>\n<li><p>用新Fragment替换当前显示的Fragment，并且应用之前创建的动画到该事件中。</p>\n</li>\n<li><p>添加之前显示的Fragment到Fragment的回退栈（back stack）中，所以当用户按下 Back 键时，Card会翻转回来。</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">flipCard</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mShowingBack) &#123;</div><div class=\"line\">        getFragmentManager().popBackStack();</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 是否正在翻转</span></div><div class=\"line\"></div><div class=\"line\">    mShowingBack = <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 创建并执行一个事务，新增fragment并应用自定义动画，且将fragment加入回退栈</span></div><div class=\"line\"></div><div class=\"line\">    getFragmentManager()</div><div class=\"line\">            .beginTransaction()</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 使用自定义动画</span></div><div class=\"line\">            .setCustomAnimations(</div><div class=\"line\">                    R.animator.card_flip_right_in, R.animator.card_flip_right_out,</div><div class=\"line\">                    R.animator.card_flip_left_in, R.animator.card_flip_left_out)</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 翻转的fragment</span></div><div class=\"line\">            .replace(R.id.container, <span class=\"keyword\">new</span> CardBackFragment())</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 新增事务到回退栈</span></div><div class=\"line\">            .addToBackStack(<span class=\"keyword\">null</span>)</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 提交事务</span></div><div class=\"line\">            .commit();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"4、View的缩放\"><a href=\"#4、View的缩放\" class=\"headerlink\" title=\"4、View的缩放\"></a>4、View的缩放</h4><p>View的动画缩放效果，常用语图片的浏览展示。<a href=\"http://hukai.me/android-training-course-in-chinese/animations/anim_zoom.mp4\" target=\"_blank\" rel=\"external\">scale</a></p>\n<ul>\n<li><h5 id=\"创建View-3\"><a href=\"#创建View-3\" class=\"headerlink\" title=\"创建View\"></a>创建View</h5><p>示例创建了大小两个版本的文件，</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">FrameLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/container\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></div><div class=\"line\">        <span class=\"attr\">android:padding</span>=<span class=\"string\">\"16dp\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ImageButton</span></span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/thumb_button_1\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"100dp\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"75dp\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_marginRight</span>=<span class=\"string\">\"1dp\"</span></div><div class=\"line\">            <span class=\"attr\">android:src</span>=<span class=\"string\">\"@drawable/thumb1\"</span></div><div class=\"line\">            <span class=\"attr\">android:scaleType</span>=<span class=\"string\">\"centerCrop\"</span></div><div class=\"line\">            <span class=\"attr\">android:contentDescription</span>=<span class=\"string\">\"@string/description_image_1\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- This initially-hidden ImageView will hold the expanded/zoomed version of</span></div><div class=\"line\">         the images above. Without transformations applied, it takes up the entire</div><div class=\"line\">         screen. To achieve the \"zoom\" animation, this view's bounds are animated</div><div class=\"line\">         from the bounds of the thumbnail button above, to its final laid-out</div><div class=\"line\">         bounds.</div><div class=\"line\">         --&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ImageView</span></span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/expanded_image\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:visibility</span>=<span class=\"string\">\"invisible\"</span></div><div class=\"line\">        <span class=\"attr\">android:contentDescription</span>=<span class=\"string\">\"@string/description_zoom_touch_close\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">FrameLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"设置缩放动画\"><a href=\"#设置缩放动画\" class=\"headerlink\" title=\"设置缩放动画\"></a>设置缩放动画</h5><p>监听点击事件，实现缩放效果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ZoomActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">FragmentActivity</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Hold a reference to the current animator,</span></div><div class=\"line\">    <span class=\"comment\">// so that it can be canceled mid-way.</span></div><div class=\"line\">    <span class=\"keyword\">private</span> Animator mCurrentAnimator;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// The system \"short\" animation time duration, in milliseconds. This</span></div><div class=\"line\">    <span class=\"comment\">// duration is ideal for subtle animations or animations that occur</span></div><div class=\"line\">    <span class=\"comment\">// very frequently.</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mShortAnimationDuration;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_zoom);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Hook up clicks on the thumbnail views.</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> View thumb1View = findViewById(R.id.thumb_button_1);</div><div class=\"line\">        thumb1View.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">                zoomImageFromThumb(thumb1View, R.drawable.image1);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Retrieve and cache the system's default \"short\" animation time.</span></div><div class=\"line\">        mShortAnimationDuration = getResources().getInteger(</div><div class=\"line\">                android.R.integer.config_shortAnimTime);</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"缩放View\"><a href=\"#缩放View\" class=\"headerlink\" title=\"缩放View\"></a>缩放View</h5><p>缩放View的效果实现：</p>\n</li>\n</ul>\n<ol>\n<li>高清大图放在IamgeView中，用于放大后再显示。</li>\n<li>计算image View的边界。</li>\n<li>要同步改变四个边界，用<code>AnimatorSet</code></li>\n<li>缩小则是类似逆向如上操作。注意view的属性需要设置gone。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">zoomImageFromThumb</span><span class=\"params\">(<span class=\"keyword\">final</span> View thumbView, <span class=\"keyword\">int</span> imageResId)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// If there's an animation in progress, cancel it</span></div><div class=\"line\">    <span class=\"comment\">// immediately and proceed with this one.</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (mCurrentAnimator != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        mCurrentAnimator.cancel();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Load the high-resolution \"zoomed-in\" image.</span></div><div class=\"line\">    <span class=\"keyword\">final</span> ImageView expandedImageView = (ImageView) findViewById(</div><div class=\"line\">            R.id.expanded_image);</div><div class=\"line\">    expandedImageView.setImageResource(imageResId);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Calculate the starting and ending bounds for the zoomed-in image.</span></div><div class=\"line\">    <span class=\"comment\">// This step involves lots of math. Yay, math.</span></div><div class=\"line\">    <span class=\"keyword\">final</span> Rect startBounds = <span class=\"keyword\">new</span> Rect();</div><div class=\"line\">    <span class=\"keyword\">final</span> Rect finalBounds = <span class=\"keyword\">new</span> Rect();</div><div class=\"line\">    <span class=\"keyword\">final</span> Point globalOffset = <span class=\"keyword\">new</span> Point();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// The start bounds are the global visible rectangle of the thumbnail,</span></div><div class=\"line\">    <span class=\"comment\">// and the final bounds are the global visible rectangle of the container</span></div><div class=\"line\">    <span class=\"comment\">// view. Also set the container view's offset as the origin for the</span></div><div class=\"line\">    <span class=\"comment\">// bounds, since that's the origin for the positioning animation</span></div><div class=\"line\">    <span class=\"comment\">// properties (X, Y).</span></div><div class=\"line\">    thumbView.getGlobalVisibleRect(startBounds);</div><div class=\"line\">    findViewById(R.id.container)</div><div class=\"line\">            .getGlobalVisibleRect(finalBounds, globalOffset);</div><div class=\"line\">    startBounds.offset(-globalOffset.x, -globalOffset.y);</div><div class=\"line\">    finalBounds.offset(-globalOffset.x, -globalOffset.y);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Adjust the start bounds to be the same aspect ratio as the final</span></div><div class=\"line\">    <span class=\"comment\">// bounds using the \"center crop\" technique. This prevents undesirable</span></div><div class=\"line\">    <span class=\"comment\">// stretching during the animation. Also calculate the start scaling</span></div><div class=\"line\">    <span class=\"comment\">// factor (the end scaling factor is always 1.0).</span></div><div class=\"line\">    <span class=\"keyword\">float</span> startScale;</div><div class=\"line\">    <span class=\"keyword\">if</span> ((<span class=\"keyword\">float</span>) finalBounds.width() / finalBounds.height()</div><div class=\"line\">            &gt; (<span class=\"keyword\">float</span>) startBounds.width() / startBounds.height()) &#123;</div><div class=\"line\">        <span class=\"comment\">// Extend start bounds horizontally</span></div><div class=\"line\">        startScale = (<span class=\"keyword\">float</span>) startBounds.height() / finalBounds.height();</div><div class=\"line\">        <span class=\"keyword\">float</span> startWidth = startScale * finalBounds.width();</div><div class=\"line\">        <span class=\"keyword\">float</span> deltaWidth = (startWidth - startBounds.width()) / <span class=\"number\">2</span>;</div><div class=\"line\">        startBounds.left -= deltaWidth;</div><div class=\"line\">        startBounds.right += deltaWidth;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// Extend start bounds vertically</span></div><div class=\"line\">        startScale = (<span class=\"keyword\">float</span>) startBounds.width() / finalBounds.width();</div><div class=\"line\">        <span class=\"keyword\">float</span> startHeight = startScale * finalBounds.height();</div><div class=\"line\">        <span class=\"keyword\">float</span> deltaHeight = (startHeight - startBounds.height()) / <span class=\"number\">2</span>;</div><div class=\"line\">        startBounds.top -= deltaHeight;</div><div class=\"line\">        startBounds.bottom += deltaHeight;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Hide the thumbnail and show the zoomed-in view. When the animation</span></div><div class=\"line\">    <span class=\"comment\">// begins, it will position the zoomed-in view in the place of the</span></div><div class=\"line\">    <span class=\"comment\">// thumbnail.</span></div><div class=\"line\">    thumbView.setAlpha(<span class=\"number\">0f</span>);</div><div class=\"line\">    expandedImageView.setVisibility(View.VISIBLE);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Set the pivot point for SCALE_X and SCALE_Y transformations</span></div><div class=\"line\">    <span class=\"comment\">// to the top-left corner of the zoomed-in view (the default</span></div><div class=\"line\">    <span class=\"comment\">// is the center of the view).</span></div><div class=\"line\">    expandedImageView.setPivotX(<span class=\"number\">0f</span>);</div><div class=\"line\">    expandedImageView.setPivotY(<span class=\"number\">0f</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Construct and run the parallel animation of the four translation and</span></div><div class=\"line\">    <span class=\"comment\">// scale properties (X, Y, SCALE_X, and SCALE_Y).</span></div><div class=\"line\">    AnimatorSet set = <span class=\"keyword\">new</span> AnimatorSet();</div><div class=\"line\">    set</div><div class=\"line\">            .play(ObjectAnimator.ofFloat(expandedImageView, View.X,</div><div class=\"line\">                    startBounds.left, finalBounds.left))</div><div class=\"line\">            .with(ObjectAnimator.ofFloat(expandedImageView, View.Y,</div><div class=\"line\">                    startBounds.top, finalBounds.top))</div><div class=\"line\">            .with(ObjectAnimator.ofFloat(expandedImageView, View.SCALE_X,</div><div class=\"line\">            startScale, <span class=\"number\">1f</span>)).with(ObjectAnimator.ofFloat(expandedImageView,</div><div class=\"line\">                    View.SCALE_Y, startScale, <span class=\"number\">1f</span>));</div><div class=\"line\">    set.setDuration(mShortAnimationDuration);</div><div class=\"line\">    set.setInterpolator(<span class=\"keyword\">new</span> DecelerateInterpolator());</div><div class=\"line\">    set.addListener(<span class=\"keyword\">new</span> AnimatorListenerAdapter() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationEnd</span><span class=\"params\">(Animator animation)</span> </span>&#123;</div><div class=\"line\">            mCurrentAnimator = <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationCancel</span><span class=\"params\">(Animator animation)</span> </span>&#123;</div><div class=\"line\">            mCurrentAnimator = <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    set.start();</div><div class=\"line\">    mCurrentAnimator = set;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Upon clicking the zoomed-in image, it should zoom back down</span></div><div class=\"line\">    <span class=\"comment\">// to the original bounds and show the thumbnail instead of</span></div><div class=\"line\">    <span class=\"comment\">// the expanded image.</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> startScaleFinal = startScale;</div><div class=\"line\">    expandedImageView.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (mCurrentAnimator != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                mCurrentAnimator.cancel();</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// Animate the four positioning/sizing properties in parallel,</span></div><div class=\"line\">            <span class=\"comment\">// back to their original values.</span></div><div class=\"line\">            AnimatorSet set = <span class=\"keyword\">new</span> AnimatorSet();</div><div class=\"line\">            set.play(ObjectAnimator</div><div class=\"line\">                        .ofFloat(expandedImageView, View.X, startBounds.left))</div><div class=\"line\">                        .with(ObjectAnimator</div><div class=\"line\">                                .ofFloat(expandedImageView,</div><div class=\"line\">                                        View.Y,startBounds.top))</div><div class=\"line\">                        .with(ObjectAnimator</div><div class=\"line\">                                .ofFloat(expandedImageView,</div><div class=\"line\">                                        View.SCALE_X, startScaleFinal))</div><div class=\"line\">                        .with(ObjectAnimator</div><div class=\"line\">                                .ofFloat(expandedImageView,</div><div class=\"line\">                                        View.SCALE_Y, startScaleFinal));</div><div class=\"line\">            set.setDuration(mShortAnimationDuration);</div><div class=\"line\">            set.setInterpolator(<span class=\"keyword\">new</span> DecelerateInterpolator());</div><div class=\"line\">            set.addListener(<span class=\"keyword\">new</span> AnimatorListenerAdapter() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationEnd</span><span class=\"params\">(Animator animation)</span> </span>&#123;</div><div class=\"line\">                    thumbView.setAlpha(<span class=\"number\">1f</span>);</div><div class=\"line\">                    expandedImageView.setVisibility(View.GONE);</div><div class=\"line\">                    mCurrentAnimator = <span class=\"keyword\">null</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationCancel</span><span class=\"params\">(Animator animation)</span> </span>&#123;</div><div class=\"line\">                    thumbView.setAlpha(<span class=\"number\">1f</span>);</div><div class=\"line\">                    expandedImageView.setVisibility(View.GONE);</div><div class=\"line\">                    mCurrentAnimator = <span class=\"keyword\">null</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">            set.start();</div><div class=\"line\">            mCurrentAnimator = set;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"5、布局动画\"><a href=\"#5、布局动画\" class=\"headerlink\" title=\"5、布局动画\"></a>5、布局动画</h4><p>布局动画是一种预加载动画，可以通过创建Layout Transition ，setLayoutTransition（）实现。<br><a href=\"http://hukai.me/android-training-course-in-chinese/animations/anim_layout_changes.mp4\" target=\"_blank\" rel=\"external\">layout</a></p>\n<ul>\n<li><h5 id=\"创建布局\"><a href=\"#创建布局\" class=\"headerlink\" title=\"创建布局\"></a>创建布局</h5><p>为想开启动画的布局设置<code>android:animateLayoutChanges</code>属性为<code>true</code>。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/container\"</span></span></div><div class=\"line\">    <span class=\"attr\">android:animateLayoutChanges</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">    <span class=\"attr\">...</span></div><div class=\"line\">/&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"从布局中增删项目\"><a href=\"#从布局中增删项目\" class=\"headerlink\" title=\"从布局中增删项目\"></a>从布局中增删项目</h5><p>代码中动态修改布局项目，实现动画</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> ViewGroup mContainerView;</div><div class=\"line\">...</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">addItem</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    View newView;</div><div class=\"line\">    ...</div><div class=\"line\">    mContainerView.addView(newView, <span class=\"number\">0</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"第四篇、Android图像与动画\"><a href=\"#第四篇、Android图像与动画\" class=\"headerlink\" title=\"第四篇、Android图像与动画\"></a>第四篇、Android图像与动画</h2><p>[TOC]</p>\n<h3 id=\"第1章、高效显示Bitmap\"><a href=\"#第1章、高效显示Bitmap\" class=\"headerlink\" title=\"第1章、高效显示Bitmap\"></a>第1章、高效显示Bitmap</h3><p>本节主要介绍加载处理Bitmap对象常用方法，以避免UI线程阻塞与OOM问题。由于Android设备</p>\n<ul>\n<li>Android单个应用至少16M内存，不同分辨率屏幕的设备要求不同。<code>国内自定义ROM限制也有差异。</code></li>\n<li>Bitmap消耗内存，一张5M的高清照片，使用ARGB_8888方式加载Bitmap，则需要19M左右的内存。</li>\n<li>Android应用一般加载多个Bitmap，预先加载以备显示。</li>\n</ul>\n<p>所以如上三条，需要我们对Bitmap做优化处理。</p>\n<h4 id=\"1、高效加载大图（Loading-Large-Bitmap-Efficiently）\"><a href=\"#1、高效加载大图（Loading-Large-Bitmap-Efficiently）\" class=\"headerlink\" title=\"1、高效加载大图（Loading Large Bitmap Efficiently）\"></a>1、高效加载大图（Loading Large Bitmap Efficiently）</h4><p>本节介绍加载缩小的图片，来避免过多消耗内存，原始大小的图片和超过控件大小和设备分辨率的图片加载，在显示上并无意义，反而带来内存风险。</p>\n<ul>\n<li><h5 id=\"读取位图尺寸与类型（Read-Bitmap-Dimensions-and-Type）\"><a href=\"#读取位图尺寸与类型（Read-Bitmap-Dimensions-and-Type）\" class=\"headerlink\" title=\"读取位图尺寸与类型（Read Bitmap Dimensions and Type）\"></a>读取位图尺寸与类型（Read Bitmap Dimensions and Type）</h5><p><code>BitmapFactory</code>提供了不同类型的decode方法，配有<code>BitmapFactory.Options</code>选项来标记解码方式。</p>\n<p>设置<code>inJustDecodeBounds=true</code>属性可以避免解码时候分配内存。其返回<code>null</code>的Bitmap，但是可以用于获取长宽和类型。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">BitmapFactory.Options options = <span class=\"keyword\">new</span> BitmapFactory.Options();</div><div class=\"line\">options.inJustDecodeBounds = <span class=\"keyword\">true</span>;<span class=\"comment\">//不加载分配内存</span></div><div class=\"line\">BitmapFactory.decodeResource(getResource(),R.drawable.iclauncher,options);</div><div class=\"line\"><span class=\"comment\">//图像长宽</span></div><div class=\"line\"><span class=\"keyword\">int</span> imgWidth = options.outWidth;</div><div class=\"line\"><span class=\"keyword\">int</span> imgHeight = options.outHeight;</div><div class=\"line\">String imgType = options.outMimeType;<span class=\"comment\">//图像类型</span></div></pre></td></tr></table></figure>\n<p><em>一般需要在加载图片前判断图片大小，避免OOM，除非你确保不会OOM</em></p>\n</li>\n<li><h5 id=\"加载缩小版图片到内存（Load-a-Scale-Down-Version-into-Memory）\"><a href=\"#加载缩小版图片到内存（Load-a-Scale-Down-Version-into-Memory）\" class=\"headerlink\" title=\"加载缩小版图片到内存（Load a Scale Down Version into Memory）\"></a>加载缩小版图片到内存（Load a Scale Down Version into Memory）</h5><p>加载缩小版图片也需要考虑一些因素：</p>\n<ul>\n<li>评估完整图片加载需耗内存。</li>\n<li>加载图片可能涉及到的其他内存需求。</li>\n<li>显示图片的控件尺寸。</li>\n<li>设备屏幕的密度和大小。</li>\n</ul>\n<p>BitmapFactory.Options中设置<code>inSampleSize</code>来确定缩放比。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 计算图像缩放比</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">calculateInSampleSize</span><span class=\"params\">(</span></span></div><div class=\"line\">            BitmapFactory.Options options, <span class=\"keyword\">int</span> reqWidth, <span class=\"keyword\">int</span> reqHeight) &#123;</div><div class=\"line\">    <span class=\"comment\">// 获取图像的原始大小</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> height = options.outHeight;</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> width = options.outWidth;</div><div class=\"line\">    <span class=\"keyword\">int</span> inSampleSize = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (height &gt; reqHeight || width &gt; reqWidth) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> halfHeight = height / <span class=\"number\">2</span>;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> halfWidth = width / <span class=\"number\">2</span>;</div><div class=\"line\">        <span class=\"comment\">//保持宽高大于请求的宽高，缩放比为计算值的2倍</span></div><div class=\"line\">        <span class=\"keyword\">while</span> ((halfHeight / inSampleSize) &gt; reqHeight</div><div class=\"line\">                &amp;&amp; (halfWidth / inSampleSize) &gt; reqWidth) &#123;</div><div class=\"line\">            inSampleSize *= <span class=\"number\">2</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> inSampleSize;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>==<em>设置缩放比<code>inSampleSize</code>为2的倍数，是因为解码器对非2倍数会就近处理为2的倍数。</em>==</p>\n<p>先设置<code>inJustDecodeBounds=true</code>来设置<code>inSampleSize</code>之后在设置<code>inJustDecodeBounds=false</code>加载缩放后的Bitmap</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">mImageView.setImageBitmap(decodeSampleBitmapFromResource(getResource(),R.drawable.iclauncher,<span class=\"number\">100</span>,<span class=\"number\">100</span>));<span class=\"comment\">//加载大小100长宽的图片</span></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> * 根据控件大小，加载缩放图片</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Bitmap <span class=\"title\">decodeSampleBitmapFromResource</span><span class=\"params\">(Resource res,<span class=\"keyword\">int</span> resId,<span class=\"keyword\">int</span> reqWidth,<span class=\"keyword\">int</span> reqHeight)</span></span>&#123;</div><div class=\"line\">  <span class=\"comment\">//先空加载图片，计算缩放比</span></div><div class=\"line\">  <span class=\"keyword\">final</span> BitmapFactory.Options options = <span class=\"keyword\">new</span> BitmapFactory.Options();</div><div class=\"line\">  options.inJustDecodeBounds = <span class=\"keyword\">true</span>;</div><div class=\"line\">  BitmapFactory.decodeResource(res,resId,options);</div><div class=\"line\">  options.inSampleSize = calculateInSampleSize(options,reqWidth,reqHeight);</div><div class=\"line\">  <span class=\"comment\">//解码缩放后的图像</span></div><div class=\"line\">  options.inJustDecodeBounds = <span class=\"keyword\">false</span>;</div><div class=\"line\">  returen BitmapFactory.decodeResource(res,resId,options);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"2、非UI线程处理Bitmap\"><a href=\"#2、非UI线程处理Bitmap\" class=\"headerlink\" title=\"2、非UI线程处理Bitmap\"></a>2、非UI线程处理Bitmap</h4><p>上一节仅仅介绍了如何缩放加载图像，若是获取网络图像或者其他储存设备，则应避免在UI线程执行加载操作，避免ANR。</p>\n<ul>\n<li><h5 id=\"使用AsyncTask（Use-a-AsyncTask）\"><a href=\"#使用AsyncTask（Use-a-AsyncTask）\" class=\"headerlink\" title=\"使用AsyncTask（Use a AsyncTask）\"></a>使用AsyncTask（Use a AsyncTask）</h5><p>AsyncTask是Android提供的一个封装好的后台线程操作方式，并可以实现前后台信息传递。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BitmapWorkerTask</span> <span class=\"keyword\">extends</span> <span class=\"title\">AsyncTask</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> WeakReference imageViewReference;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> data = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BitmapWorkerTask</span><span class=\"params\">(ImageView imageView)</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">//使用弱引用，确保图像会被及时的GC回收。</span></div><div class=\"line\">    imageViewReference = <span class=\"keyword\">new</span> WeakReference(imageView);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//后台解码图片</span></div><div class=\"line\">  <span class=\"meta\">@override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> Bitmap <span class=\"title\">doInBackground</span><span class=\"params\">(Integer... params)</span></span>&#123;</div><div class=\"line\">    data = params[<span class=\"number\">0</span>];</div><div class=\"line\">    <span class=\"keyword\">return</span> decodeSampleBitmapFromResource(getResource(),data,<span class=\"number\">100</span>,<span class=\"number\">100</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//完成解码后，加载图像到控件显示</span></div><div class=\"line\">  <span class=\"comment\">//要判断引用对象是否还存在，控件是否存在等，避免空指针。</span></div><div class=\"line\">  <span class=\"meta\">@override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onPostExecute</span><span class=\"params\">(Bitmap bitmap)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(imageViewReference !=<span class=\"keyword\">null</span> &amp;&amp; bitmap !=<span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">      <span class=\"keyword\">final</span> ImageView imageView = imageViewReference.get();</div><div class=\"line\">      <span class=\"keyword\">if</span>(imageView!=<span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">        imageView.setImageBitmap(bitmap);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//创建一个任务task，执行异步加载</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">loadBitmap</span><span class=\"params\">(<span class=\"keyword\">int</span> resId,ImageView imageView)</span></span>&#123;</div><div class=\"line\">  BitmapWorkerTask task = <span class=\"keyword\">new</span> BitmapWorkerTask(imageView);</div><div class=\"line\">  task.execute(resId);<span class=\"comment\">//执行Task</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"处理并发问题（Handle-Concurrency）\"><a href=\"#处理并发问题（Handle-Concurrency）\" class=\"headerlink\" title=\"处理并发问题（Handle Concurrency）\"></a>处理并发问题（Handle Concurrency）</h5><p>List View和Grid View控件显示多个位图结合AsyncTask使用时会产生并发问题。每个item都执行task的话，启动顺序，任务顺序都很难保持一致性。为此可以使用Image View来保存最近使用的AsyncTask引用，创建一个专用的<code>Drawable</code>子类来存储任务引用，如<code>BitmapDrawable</code>,并提供占位图像:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AsyncDrawable</span> <span class=\"keyword\">extends</span> <span class=\"title\">BitmapDrawable</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> WeakReference bitmapWorkerTaskReference;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AsyncDrawable</span><span class=\"params\">(Resource res,Bitmap bitmap,BitmapWorkerTask bitmapWorkerTask)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(res,bitmap);</div><div class=\"line\">    <span class=\"comment\">//初始化弱引用对象</span></div><div class=\"line\">    bitmapWorkerTaskReference = <span class=\"keyword\">new</span> BitmapWorkerTaskReference(bitmapWorkerTask);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//对外公开task的引用。</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> BitmapWorkerTask <span class=\"title\">getBitmapWorkerTask</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> bitmapWorkerTaskReference.get();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在执行BitmapWorkerTask之前需要创建AsyncDrawable并绑定到ImageView上：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">loadBitmap</span><span class=\"params\">(<span class=\"keyword\">int</span> resId,ImageView imageView)</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(cancelPotentialWork(resId,imageView))&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> BitmapWorkerTask task = <span class=\"keyword\">new</span> BitmapWorkerTask(imageView);</div><div class=\"line\">    <span class=\"keyword\">final</span> AsyncDrawable asyncDrawable = <span class=\"keyword\">new</span> \t\t\t\t\t\t\t   AsyncDrawable(getResource(),mPlaceHolderBitmap,task);</div><div class=\"line\">    imageView.setImageDrawable(asyncDrawable);</div><div class=\"line\">    task.execute(resId);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//该方法用于检测是否有已存在的任务在执行该Image View控件的请求。</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">cancelPotentialWork</span><span class=\"params\">(<span class=\"keyword\">int</span> data, ImageView imageView)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//检索AsyncTask是否已经被分配到指定的ImageView控件。</span></div><div class=\"line\">  <span class=\"keyword\">final</span> BitmapWorkerTask bitmapWorkerTask = getBitmapWorkerTask(imageView);</div><div class=\"line\">    <span class=\"keyword\">if</span> (bitmapWorkerTask != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> bitmapData = bitmapWorkerTask.data;</div><div class=\"line\">        <span class=\"keyword\">if</span> (bitmapData == <span class=\"number\">0</span> || bitmapData != data) &#123;</div><div class=\"line\">            <span class=\"comment\">//取消先前的任务</span></div><div class=\"line\">            bitmapWorkerTask.cancel(<span class=\"keyword\">true</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">//同样的请求任务已经在执行</span></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//没有符合当下请求的任务绑定在ImageView控件上，或者之前的取消了。</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//获取控件相关的task</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> BitmapWorkerTask <span class=\"title\">getBitmapWorkerTask</span><span class=\"params\">(ImageView imageView)</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">if</span> (imageView != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">       <span class=\"keyword\">final</span> Drawable drawable = imageView.getDrawable();</div><div class=\"line\">       <span class=\"keyword\">if</span> (drawable <span class=\"keyword\">instanceof</span> AsyncDrawable) &#123;</div><div class=\"line\">           <span class=\"keyword\">final</span> AsyncDrawable asyncDrawable = (AsyncDrawable) drawable;</div><div class=\"line\">         <span class=\"comment\">//获取AsyncDrawable中定义的绑定task引用</span></div><div class=\"line\">           <span class=\"keyword\">return</span> asyncDrawable.getBitmapWorkerTask();</div><div class=\"line\">       &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>完成异步task的绑定后，在<code>onPostExecute()</code>中更新view</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BitmapWorkerTask</span> <span class=\"keyword\">extends</span> <span class=\"title\">AsyncTask</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onPostExecute</span><span class=\"params\">(Bitmap bitmap)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (isCancelled()) &#123;</div><div class=\"line\">            bitmap = <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">\t\t<span class=\"comment\">//更新View前，判断资源和控件的非空</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (imageViewReference != <span class=\"keyword\">null</span> &amp;&amp; bitmap != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> ImageView imageView = imageViewReference.get();</div><div class=\"line\">            <span class=\"keyword\">final</span> BitmapWorkerTask bitmapWorkerTask =</div><div class=\"line\">                    getBitmapWorkerTask(imageView);</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == bitmapWorkerTask &amp;&amp; imageView != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                imageView.setImageBitmap(bitmap);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>应用与listView和GridView等，循环利用子视图的控件，只要在设置ImageView的地方调用loadBitmap方法即可。如GridView的<code>getView()</code>中。</p>\n</li>\n</ul>\n<h4 id=\"3、缓存Bitmap\"><a href=\"#3、缓存Bitmap\" class=\"headerlink\" title=\"3、缓存Bitmap\"></a>3、缓存Bitmap</h4><p>在List View或GridView控件场景中，可能需要大量图片展示，而且存在图片复用现象，此时就需要用到缓存，以提高效能和用户体验。</p>\n<ul>\n<li><h5 id=\"使用内存缓存（Use-a-Memory-Cache）\"><a href=\"#使用内存缓存（Use-a-Memory-Cache）\" class=\"headerlink\" title=\"使用内存缓存（Use a Memory Cache）\"></a>使用内存缓存（Use a Memory Cache）</h5><p>使用内存缓存实现以<em>空间换时间</em>，提高速度。<code>LruCache</code>类用于缓存Bitmaps，其使用强引用<code>LinkedHashMap</code>保存最近引用对象，在缓存超出设置大小时候剔除最近最少使用的对象。</p>\n<blockquote>\n<p><strong>注意：</strong>以前多使用<code>软引用</code>或<code>弱引用</code>但是现在并不推荐，由于Android版本的GC频率增高，引用效率也大为降低。</p>\n</blockquote>\n<p>为LruCache设置合适的大小，考虑一下因素：</p>\n<ul>\n<li>应用剩余可用内存大小</li>\n<li>同时显示图像数量，以及预加载图片数量</li>\n<li>设备屏幕尺寸与密度</li>\n<li>图像尺寸、类型</li>\n<li>图像被访问的频率高低</li>\n<li>显示图像的质量和数量的平衡</li>\n</ul>\n<p>以上因素都需要具体分析，如下创建一个Bitmap的LruCache的示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> LruCache&lt;String, Bitmap&gt; mMemoryCache;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// 获取应用VM最大可用内存</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> maxMemory = (<span class=\"keyword\">int</span>) (Runtime.getRuntime().maxMemory() / <span class=\"number\">1024</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 使用可用内存的1/8来缓存</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> cacheSize = maxMemory / <span class=\"number\">8</span>;</div><div class=\"line\">\t<span class=\"comment\">//建立LruCache缓存对象</span></div><div class=\"line\">    mMemoryCache = <span class=\"keyword\">new</span> LruCache&lt;String, Bitmap&gt;(cacheSize) &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> <span class=\"title\">sizeOf</span><span class=\"params\">(String key, Bitmap bitmap)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// 缓存以KB为单位计算，而非对象item个数</span></div><div class=\"line\">            <span class=\"keyword\">return</span> bitmap.getByteCount() / <span class=\"number\">1024</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//加入bitmap对象到lrucache</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addBitmapToMemoryCache</span><span class=\"params\">(String key, Bitmap bitmap)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (getBitmapFromMemCache(key) == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        mMemoryCache.put(key, bitmap);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//从lrucache获取bitmap缓存</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Bitmap <span class=\"title\">getBitmapFromMemCache</span><span class=\"params\">(String key)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> mMemoryCache.get(key);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>Note:</strong>在上面的例子中, 有1/8的内存空间被用作缓存。 这意味着在常见的设备上（hdpi），最少大概有4MB的缓存空间（32/8）。如果一个填满图片的GridView控件放置在800x480像素的手机屏幕上，大概会花费1.5MB的缓存空间（800x480x4 bytes），因此缓存的容量大概可以缓存2.5页的图片内容。</p>\n</blockquote>\n<p>加入缓存的bitmap亦是已经优化过的图像：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BitmapWorkerTask</span> <span class=\"keyword\">extends</span> <span class=\"title\">AsyncTask</span>&lt;<span class=\"title\">Integer</span>, <span class=\"title\">Void</span>, <span class=\"title\">Bitmap</span>&gt; </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">//异步线程解码图像</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Bitmap <span class=\"title\">doInBackground</span><span class=\"params\">(Integer... params)</span> </span>&#123;</div><div class=\"line\">      <span class=\"comment\">//缩放图像</span></div><div class=\"line\">        <span class=\"keyword\">final</span> Bitmap bitmap = decodeSampledBitmapFromResource(</div><div class=\"line\">                getResources(), params[<span class=\"number\">0</span>], <span class=\"number\">100</span>, <span class=\"number\">100</span>));</div><div class=\"line\">      <span class=\"comment\">//添加到lrucache缓存</span></div><div class=\"line\">        addBitmapToMemoryCache(String.valueOf(params[<span class=\"number\">0</span>]), bitmap);</div><div class=\"line\">        <span class=\"keyword\">return</span> bitmap;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"使用磁盘缓存（Use-a-Disk-Cache）\"><a href=\"#使用磁盘缓存（Use-a-Disk-Cache）\" class=\"headerlink\" title=\"使用磁盘缓存（Use a Disk Cache）\"></a>使用磁盘缓存（Use a Disk Cache）</h5><p>使用内存作为缓存虽然有较高的速度，但也可能因为应用被后台化，系统资源不足，亦或者过于大量的图像加载，而导致效果不佳，体验不好。因而可以使用磁盘缓存，需要异步处理，避免ANR。</p>\n<blockquote>\n<p><strong>Note:</strong>如果图像过于频繁访问，可以使用<code>ContentProvider</code>更为合适。</p>\n</blockquote>\n<p>如下示例<code>DiskLruCache</code>为Android源码基础上优化的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> DiskLruCache mDiskLruCache;<span class=\"comment\">//DiskLruCache对象</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Object mDiskCacheLock = <span class=\"keyword\">new</span> Object();<span class=\"comment\">//常量化同步锁</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> mDiskCacheStarting = <span class=\"keyword\">true</span>;<span class=\"comment\">//是否开启缓存</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DISK_CACHE_SIZE = <span class=\"number\">1024</span> * <span class=\"number\">1024</span> * <span class=\"number\">10</span>; <span class=\"comment\">// 10MB</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DISK_CACHE_SUBDIR = <span class=\"string\">\"thumbnails\"</span>;<span class=\"comment\">//缓存文件夹</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// 初始化内存缓存</span></div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// 后台线程初始化磁盘缓存</span></div><div class=\"line\">    File cacheDir = getDiskCacheDir(<span class=\"keyword\">this</span>, DISK_CACHE_SUBDIR);<span class=\"comment\">//从磁盘加载出缓存文件</span></div><div class=\"line\">    <span class=\"keyword\">new</span> InitDiskCacheTask().execute(cacheDir);<span class=\"comment\">//异步开始加载到缓存文件</span></div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//内部类，初始化磁盘加载task</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InitDiskCacheTask</span> <span class=\"keyword\">extends</span> <span class=\"title\">AsyncTask</span>&lt;<span class=\"title\">File</span>, <span class=\"title\">Void</span>, <span class=\"title\">Void</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Void <span class=\"title\">doInBackground</span><span class=\"params\">(File... params)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (mDiskCacheLock) &#123;<span class=\"comment\">//同步锁</span></div><div class=\"line\">            File cacheDir = params[<span class=\"number\">0</span>];<span class=\"comment\">//缓存文件</span></div><div class=\"line\">            mDiskLruCache = DiskLruCache.open(cacheDir, DISK_CACHE_SIZE);</div><div class=\"line\">            mDiskCacheStarting = <span class=\"keyword\">false</span>; <span class=\"comment\">//完成初始化磁盘加载</span></div><div class=\"line\">            mDiskCacheLock.notifyAll(); <span class=\"comment\">//唤起其他休眠线程</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//异步加载图片的task，</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BitmapWorkerTask</span> <span class=\"keyword\">extends</span> <span class=\"title\">AsyncTask</span>&lt;<span class=\"title\">Integer</span>, <span class=\"title\">Void</span>, <span class=\"title\">Bitmap</span>&gt; </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// 解码图像</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Bitmap <span class=\"title\">doInBackground</span><span class=\"params\">(Integer... params)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> String imageKey = String.valueOf(params[<span class=\"number\">0</span>]);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//后台线程检查磁盘缓存</span></div><div class=\"line\">        Bitmap bitmap = getBitmapFromDiskCache(imageKey);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (bitmap == <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">// 磁盘缓存没有所需图像</span></div><div class=\"line\">            <span class=\"comment\">// 正常途径加载</span></div><div class=\"line\">            <span class=\"keyword\">final</span> Bitmap bitmap = decodeSampledBitmapFromResource(</div><div class=\"line\">                    getResources(), params[<span class=\"number\">0</span>], <span class=\"number\">100</span>, <span class=\"number\">100</span>));</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//并将优化后的图像加入磁盘缓存</span></div><div class=\"line\">        addBitmapToCache(imageKey, bitmap);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> bitmap;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//加入磁盘缓存</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addBitmapToCache</span><span class=\"params\">(String key, Bitmap bitmap)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 先加入内存缓存</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (getBitmapFromMemCache(key) == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        mMemoryCache.put(key, bitmap);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 然后加入到磁盘缓存</span></div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (mDiskCacheLock) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mDiskLruCache != <span class=\"keyword\">null</span> &amp;&amp; mDiskLruCache.get(key) == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            mDiskLruCache.put(key, bitmap);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//从磁盘缓存获取图像</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Bitmap <span class=\"title\">getBitmapFromDiskCache</span><span class=\"params\">(String key)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (mDiskCacheLock) &#123;<span class=\"comment\">//同步获取锁</span></div><div class=\"line\">        <span class=\"comment\">// 等待后台线程获取磁盘缓存</span></div><div class=\"line\">        <span class=\"keyword\">while</span> (mDiskCacheStarting) &#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                mDiskCacheLock.wait();</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;&#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mDiskLruCache != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> mDiskLruCache.get(key);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 为特定的app创建唯一的子文件夹，优先使用外部sd卡，若没有，就使用内部sd卡</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> File <span class=\"title\">getDiskCacheDir</span><span class=\"params\">(Context context, String uniqueName)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 检查是否有外部存储，否则用内部存储</span></div><div class=\"line\">    <span class=\"keyword\">final</span> String cachePath =</div><div class=\"line\">            Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState()) ||</div><div class=\"line\">                    !isExternalStorageRemovable() ? getExternalCacheDir(context).getPath() :</div><div class=\"line\">                            context.getCacheDir().getPath();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> File(cachePath + File.separator + uniqueName);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>注意：</strong>如上使用==同步锁==是为了防止在后台异步I/O操作时候，错误读取。</p>\n</blockquote>\n<p>内存缓存检查可以在UI线程操作，而磁盘缓存需要在后台线程。</p>\n</li>\n<li><h5 id=\"处理配置改变（Handle-Configuration-Changes）\"><a href=\"#处理配置改变（Handle-Configuration-Changes）\" class=\"headerlink\" title=\"处理配置改变（Handle Configuration Changes）\"></a>处理配置改变（Handle Configuration Changes）</h5><p>Android的配置信息发生变化，Activity可能会随之变化、销毁重建。平滑恢复原有图像，创造良好用户体验，<code>setRetainInstance(true)</code>保留的一个<code>Fragement</code>实例可以将缓存重新附着与Activity上。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> LruCache&lt;String, Bitmap&gt; mMemoryCache;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">      <span class=\"comment\">//RetainFragment</span></div><div class=\"line\">    RetainFragment retainFragment =</div><div class=\"line\">            RetainFragment.findOrCreateRetainFragment(getFragmentManager());</div><div class=\"line\">  <span class=\"comment\">//获取缓存对象  </span></div><div class=\"line\">  mMemoryCache = retainFragment.mRetainedCache;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mMemoryCache == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        mMemoryCache = <span class=\"keyword\">new</span> LruCache&lt;String, Bitmap&gt;(cacheSize) &#123;</div><div class=\"line\">            ... <span class=\"comment\">// 初始化缓存</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        retainFragment.mRetainedCache = mMemoryCache;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//自定义内部类Fragment，用于存储缓存对象？？</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RetainFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"RetainFragment\"</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> LruCache&lt;String, Bitmap&gt; mRetainedCache;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RetainFragment</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> RetainFragment <span class=\"title\">findOrCreateRetainFragment</span><span class=\"params\">(FragmentManager fm)</span> </span>&#123;</div><div class=\"line\">        RetainFragment fragment = (RetainFragment) fm.findFragmentByTag(TAG);</div><div class=\"line\">        <span class=\"keyword\">if</span> (fragment == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            fragment = <span class=\"keyword\">new</span> RetainFragment();</div><div class=\"line\">            fm.beginTransaction().add(fragment, TAG).commit();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> fragment;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setRetainInstance(<span class=\"keyword\">true</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"4、管理Bitmap的内存\"><a href=\"#4、管理Bitmap的内存\" class=\"headerlink\" title=\"4、管理Bitmap的内存\"></a>4、管理Bitmap的内存</h4><p>关于Bitmap内存管理了解两点：1、Android2.3之后GC回收并发执行，内存不引用，会被立即回收。2、Android3.0以后bitmap引用和数据一同存放在<code>Dalvik堆</code>内存中。</p>\n<ul>\n<li><h5 id=\"Android2-3以下版本的内存管理\"><a href=\"#Android2-3以下版本的内存管理\" class=\"headerlink\" title=\"Android2.3以下版本的内存管理\"></a>Android2.3以下版本的内存管理</h5><p>推荐使用<code>recycle()</code>方法，低版本Android单线程GC。使用引用计数法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mCacheRefCount=<span class=\"number\">0</span>;<span class=\"comment\">//引用计数</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mDisplayRefCount = <span class=\"number\">0</span>;<span class=\"comment\">//引用计数</span></div><div class=\"line\">...</div><div class=\"line\"><span class=\"comment\">//通知drawable显示状态发生改变，drawable引用计数来决定引用状态和显示</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setIsDisplayed</span><span class=\"params\">(<span class=\"keyword\">boolean</span> isDisplayed)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (isDisplayed) &#123;</div><div class=\"line\">            mDisplayRefCount++;</div><div class=\"line\">            mHasBeenDisplayed = <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            mDisplayRefCount--;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// Check to see if recycle() can be called.</span></div><div class=\"line\">    checkState();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// Notify the drawable that the cache state has changed.</span></div><div class=\"line\"><span class=\"comment\">// Keep a count to determine when the drawable is no longer being cached.</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setIsCached</span><span class=\"params\">(<span class=\"keyword\">boolean</span> isCached)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (isCached) &#123;</div><div class=\"line\">            mCacheRefCount++;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            mCacheRefCount--;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// Check to see if recycle() can be called.</span></div><div class=\"line\">    checkState();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">checkState</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// If the drawable cache and display ref counts = 0, and this drawable</span></div><div class=\"line\">    <span class=\"comment\">// has been displayed, then recycle.</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (mCacheRefCount &lt;= <span class=\"number\">0</span> &amp;&amp; mDisplayRefCount &lt;= <span class=\"number\">0</span> &amp;&amp; mHasBeenDisplayed</div><div class=\"line\">            &amp;&amp; hasValidBitmap()) &#123;</div><div class=\"line\">        getBitmap().recycle();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasValidBitmap</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    Bitmap bitmap = getBitmap();</div><div class=\"line\">    <span class=\"keyword\">return</span> bitmap != <span class=\"keyword\">null</span> &amp;&amp; !bitmap.isRecycled();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"Android3-0以上版本内存管理\"><a href=\"#Android3-0以上版本内存管理\" class=\"headerlink\" title=\"Android3.0以上版本内存管理\"></a>Android3.0以上版本内存管理</h5><p>API 11引入<code>BitmapFactory.Options.inBitmap</code>使Bitmap在加载时候可以重中已存在的，但是大小一样的位图（&lt; API 19时候）。</p>\n</li>\n<li><p>保存Bitmap以备复用</p>\n<p>android3.0以上，bitmap从L如Cache移除时，Bitmap的软引用会被村房子啊Hashset中，以便<code>inBitmap</code>复用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">Set&lt;SoftReference&lt;Bitmap&gt;&gt; mReusableBitmaps;</div><div class=\"line\"><span class=\"keyword\">private</span> LruCache&lt;String, BitmapDrawable&gt; mMemoryCache;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// If you're running on Honeycomb or newer, create a</span></div><div class=\"line\"><span class=\"comment\">// synchronized HashSet of references to reusable bitmaps.</span></div><div class=\"line\"><span class=\"keyword\">if</span> (Utils.hasHoneycomb()) &#123;</div><div class=\"line\">    mReusableBitmaps =</div><div class=\"line\">            Collections.synchronizedSet(<span class=\"keyword\">new</span> HashSet&lt;SoftReference&lt;Bitmap&gt;&gt;());</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">mMemoryCache = <span class=\"keyword\">new</span> LruCache&lt;String, BitmapDrawable&gt;(mCacheParams.memCacheSize) &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Notify the removed entry that is no longer being cached.</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">entryRemoved</span><span class=\"params\">(<span class=\"keyword\">boolean</span> evicted, String key,</span></span></div><div class=\"line\">            BitmapDrawable oldValue, BitmapDrawable newValue) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (RecyclingBitmapDrawable.class.isInstance(oldValue)) &#123;</div><div class=\"line\">            <span class=\"comment\">// The removed entry is a recycling drawable, so notify it</span></div><div class=\"line\">            <span class=\"comment\">// that it has been removed from the memory cache.</span></div><div class=\"line\">            ((RecyclingBitmapDrawable) oldValue).setIsCached(<span class=\"keyword\">false</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// The removed entry is a standard BitmapDrawable.</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (Utils.hasHoneycomb()) &#123;</div><div class=\"line\">                <span class=\"comment\">// We're running on Honeycomb or later, so add the bitmap</span></div><div class=\"line\">                <span class=\"comment\">// to a SoftReference set for possible use with inBitmap later.</span></div><div class=\"line\">                mReusableBitmaps.add</div><div class=\"line\">                        (<span class=\"keyword\">new</span> SoftReference&lt;Bitmap&gt;(oldValue.getBitmap()));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">....</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"使用已经存在的Bitmap\"><a href=\"#使用已经存在的Bitmap\" class=\"headerlink\" title=\"使用已经存在的Bitmap\"></a>使用已经存在的Bitmap</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Bitmap <span class=\"title\">decodeSampledBitmapFromFile</span><span class=\"params\">(String filename,</span></span></div><div class=\"line\">        <span class=\"keyword\">int</span> reqWidth, <span class=\"keyword\">int</span> reqHeight, ImageCache cache) &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> BitmapFactory.Options options = <span class=\"keyword\">new</span> BitmapFactory.Options();</div><div class=\"line\">    ...</div><div class=\"line\">    BitmapFactory.decodeFile(filename, options);</div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// If we're running on Honeycomb or newer, try to use inBitmap.</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (Utils.hasHoneycomb()) &#123;</div><div class=\"line\">        addInBitmapOptions(options, cache);</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">return</span> BitmapFactory.decodeFile(filename, options);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//查找适合且可复用的bitmap，设置到inBitmap的属性值，</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">addInBitmapOptions</span><span class=\"params\">(BitmapFactory.Options options,</span></span></div><div class=\"line\">        ImageCache cache) &#123;</div><div class=\"line\">    <span class=\"comment\">// inBitmap only works with mutable bitmaps, so force the decoder to</span></div><div class=\"line\">    <span class=\"comment\">// return mutable bitmaps.</span></div><div class=\"line\">    options.inMutable = <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (cache != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// Try to find a bitmap to use for inBitmap.</span></div><div class=\"line\">        Bitmap inBitmap = cache.getBitmapFromReusableSet(options);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (inBitmap != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// If a suitable bitmap has been found, set it as the value of</span></div><div class=\"line\">            <span class=\"comment\">// inBitmap.</span></div><div class=\"line\">            options.inBitmap = inBitmap;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// This method iterates through the reusable bitmaps, looking for one</span></div><div class=\"line\"><span class=\"comment\">// to use for inBitmap:</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Bitmap <span class=\"title\">getBitmapFromReusableSet</span><span class=\"params\">(BitmapFactory.Options options)</span> </span>&#123;</div><div class=\"line\">        Bitmap bitmap = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (mReusableBitmaps != <span class=\"keyword\">null</span> &amp;&amp; !mReusableBitmaps.isEmpty()) &#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (mReusableBitmaps) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> Iterator&lt;SoftReference&lt;Bitmap&gt;&gt; iterator</div><div class=\"line\">                    = mReusableBitmaps.iterator();</div><div class=\"line\">            Bitmap item;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">while</span> (iterator.hasNext()) &#123;</div><div class=\"line\">                item = iterator.next().get();</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != item &amp;&amp; item.isMutable()) &#123;</div><div class=\"line\">                    <span class=\"comment\">// Check to see it the item can be used for inBitmap.</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (canUseForInBitmap(item, options)) &#123;</div><div class=\"line\">                        bitmap = item;</div><div class=\"line\"></div><div class=\"line\">                        <span class=\"comment\">// Remove from reusable set so it can't be used again.</span></div><div class=\"line\">                        iterator.remove();</div><div class=\"line\">                        <span class=\"keyword\">break</span>;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    <span class=\"comment\">// Remove from the set if the reference has been cleared.</span></div><div class=\"line\">                    iterator.remove();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> bitmap;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>判断Bitmap是否符合inBitmap的要求：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">canUseForInBitmap</span><span class=\"params\">(</span></span></div><div class=\"line\">        Bitmap candidate, BitmapFactory.Options targetOptions) &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</div><div class=\"line\">        <span class=\"comment\">// From Android 4.4 (KitKat) onward we can re-use if the byte size of</span></div><div class=\"line\">        <span class=\"comment\">// the new bitmap is smaller than the reusable bitmap candidate</span></div><div class=\"line\">        <span class=\"comment\">// allocation byte count.</span></div><div class=\"line\">        <span class=\"keyword\">int</span> width = targetOptions.outWidth / targetOptions.inSampleSize;</div><div class=\"line\">        <span class=\"keyword\">int</span> height = targetOptions.outHeight / targetOptions.inSampleSize;</div><div class=\"line\">        <span class=\"keyword\">int</span> byteCount = width * height * getBytesPerPixel(candidate.getConfig());</div><div class=\"line\">        <span class=\"keyword\">return</span> byteCount &lt;= candidate.getAllocationByteCount();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// On earlier versions, the dimensions must match exactly and the inSampleSize must be 1</span></div><div class=\"line\">    <span class=\"keyword\">return</span> candidate.getWidth() == targetOptions.outWidth</div><div class=\"line\">            &amp;&amp; candidate.getHeight() == targetOptions.outHeight</div><div class=\"line\">            &amp;&amp; targetOptions.inSampleSize == <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * A helper function to return the byte usage per pixel of a bitmap based on its configuration.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getBytesPerPixel</span><span class=\"params\">(Config config)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (config == Config.ARGB_8888) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">4</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (config == Config.RGB_565) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (config == Config.ARGB_4444) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (config == Config.ALPHA_8) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"5、在UI上显示Bitmap\"><a href=\"#5、在UI上显示Bitmap\" class=\"headerlink\" title=\"5、在UI上显示Bitmap\"></a>5、在UI上显示Bitmap</h4><p>本节学习如何综合使用后台线程与缓存机制，将图像加载到ViewPager或Grid View控件上，并处理并发与配置改变的问题。</p>\n<ul>\n<li><h5 id=\"实现加载图片到View-Pager\"><a href=\"#实现加载图片到View-Pager\" class=\"headerlink\" title=\"实现加载图片到View Pager\"></a>实现加载图片到View Pager</h5><p><code>Swipe View Pattern</code>是滑动显示的设计模型。可通过<code>PagerAdapter</code>与<code>ViewPager</code>控件实现该效果。而<code>FragmentStatePagerAdapter</code>更为合适，因为其能在Fragment状态改变时保存状态值。减少内存消耗。少量图片的话，<code>PagerAdapter与FragmentPagerAdapter</code>都可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageDetailActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">FragmentActivity</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String EXTRA_IMAGE = <span class=\"string\">\"extra_image\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> ImagePagerAdapter mAdapter;<span class=\"comment\">//adapter</span></div><div class=\"line\">    <span class=\"keyword\">private</span> ViewPager mPager;<span class=\"comment\">//viewpager</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 用于传递给viewpager 的adapter的图片数据资源</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Integer[] imageResIds = <span class=\"keyword\">new</span> Integer[] &#123;</div><div class=\"line\">            R.drawable.sample_image_1, R.drawable.sample_image_2, R.drawable.sample_image_3,</div><div class=\"line\">            R.drawable.sample_image_4, R.drawable.sample_image_5, R.drawable.sample_image_6,</div><div class=\"line\">            R.drawable.sample_image_7, R.drawable.sample_image_8, R.drawable.sample_image_9&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.image_detail_pager); <span class=\"comment\">// 就一个viewpager</span></div><div class=\"line\">\t\t<span class=\"comment\">//初始化控件，并绑定适配器</span></div><div class=\"line\">        mAdapter = <span class=\"keyword\">new</span> ImagePagerAdapter(getSupportFragmentManager(), imageResIds.length);</div><div class=\"line\">        mPager = (ViewPager) findViewById(R.id.pager);</div><div class=\"line\">        mPager.setAdapter(mAdapter);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImagePagerAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">FragmentStatePagerAdapter</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> mSize;</div><div class=\"line\">\t\t<span class=\"comment\">//</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ImagePagerAdapter</span><span class=\"params\">(FragmentManager fm, <span class=\"keyword\">int</span> size)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(fm);</div><div class=\"line\">            mSize = size;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getCount</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> mSize;</div><div class=\"line\">        &#125;</div><div class=\"line\">\t\t<span class=\"comment\">//返回fragment对象</span></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Fragment <span class=\"title\">getItem</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> ImageDetailFragment.newInstance(position);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Fragment里面包含Image View控件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageDetailFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String IMAGE_DATA_EXTRA = <span class=\"string\">\"resId\"</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mImageNum;<span class=\"comment\">//图像数目</span></div><div class=\"line\">    <span class=\"keyword\">private</span> ImageView mImageView;<span class=\"comment\">//image view控件</span></div><div class=\"line\">\t<span class=\"comment\">//构造函数，接收图片数目参数</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> ImageDetailFragment <span class=\"title\">newInstance</span><span class=\"params\">(<span class=\"keyword\">int</span> imageNum)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> ImageDetailFragment f = <span class=\"keyword\">new</span> ImageDetailFragment();</div><div class=\"line\">        <span class=\"keyword\">final</span> Bundle args = <span class=\"keyword\">new</span> Bundle();</div><div class=\"line\">        args.putInt(IMAGE_DATA_EXTRA, imageNum);</div><div class=\"line\">        f.setArguments(args);</div><div class=\"line\">        <span class=\"keyword\">return</span> f;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Empty constructor, required as per Fragment docs</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ImageDetailFragment</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        mImageNum = getArguments() != <span class=\"keyword\">null</span> ? getArguments().getInt(IMAGE_DATA_EXTRA) : -<span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, ViewGroup container,</span></span></div><div class=\"line\">            Bundle savedInstanceState) &#123;</div><div class=\"line\">        <span class=\"comment\">// image_detail_fragment.xml contains just an ImageView</span></div><div class=\"line\">        <span class=\"keyword\">final</span> View v = inflater.inflate(R.layout.image_detail_fragment, container, <span class=\"keyword\">false</span>);</div><div class=\"line\">        mImageView = (ImageView) v.findViewById(R.id.imageView);</div><div class=\"line\">        <span class=\"keyword\">return</span> v;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityCreated</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onActivityCreated(savedInstanceState);</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> resId = ImageDetailActivity.imageResIds[mImageNum];</div><div class=\"line\">        mImageView.setImageResource(resId); <span class=\"comment\">// Load image into ImageView</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>==<strong>如上方式，可能会阻塞UI线程</strong>==，改用AsyncTask最好：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageDetailActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">FragmentActivity</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">\t<span class=\"comment\">//后台加载图片</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">loadBitmap</span><span class=\"params\">(<span class=\"keyword\">int</span> resId, ImageView imageView)</span> </span>&#123;</div><div class=\"line\">        mImageView.setImageResource(R.drawable.image_placeholder);</div><div class=\"line\">      <span class=\"comment\">//后台执行</span></div><div class=\"line\">        BitmapWorkerTask task = <span class=\"keyword\">new</span> BitmapWorkerTask(mImageView);</div><div class=\"line\">        task.execute(resId);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    ... <span class=\"comment\">// include BitmapWorkerTask class</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageDetailFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityCreated</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onActivityCreated(savedInstanceState);</div><div class=\"line\">        <span class=\"keyword\">if</span> (ImageDetailActivity.class.isInstance(getActivity())) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> resId = ImageDetailActivity.imageResIds[mImageNum];</div><div class=\"line\">            <span class=\"comment\">//调用上面的后台加载图片</span></div><div class=\"line\">            ((ImageDetailActivity) getActivity()).loadBitmap(resId, mImageView);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>后台的操作可以更为合理，加载并缓存图像</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageDetailActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">FragmentActivity</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">private</span> LruCache mMemoryCache;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"comment\">// initialize LruCache as per Use a Memory Cache section</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">loadBitmap</span><span class=\"params\">(<span class=\"keyword\">int</span> resId, ImageView imageView)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> String imageKey = String.valueOf(resId);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> Bitmap bitmap = mMemoryCache.get(imageKey);</div><div class=\"line\">        <span class=\"keyword\">if</span> (bitmap != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            mImageView.setImageBitmap(bitmap);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            mImageView.setImageResource(R.drawable.image_placeholder);</div><div class=\"line\">            BitmapWorkerTask task = <span class=\"keyword\">new</span> BitmapWorkerTask(mImageView);</div><div class=\"line\">            task.execute(resId);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ... <span class=\"comment\">// include updated BitmapWorkerTask from Use a Memory Cache section</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"实现加载图片到GridView\"><a href=\"#实现加载图片到GridView\" class=\"headerlink\" title=\"实现加载图片到GridView\"></a>实现加载图片到GridView</h5><p>如下场景，Fragment内置Grid View，item是Image View：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageGridFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> <span class=\"keyword\">implements</span> <span class=\"title\">AdapterView</span>.<span class=\"title\">OnItemClickListener</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> ImageAdapter mAdapter;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//静态加载的图片资源，用于适配器</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Integer[] imageResIds = <span class=\"keyword\">new</span> Integer[] &#123;</div><div class=\"line\">            R.drawable.sample_image_1, R.drawable.sample_image_2, R.drawable.sample_image_3,</div><div class=\"line\">            R.drawable.sample_image_4, R.drawable.sample_image_5, R.drawable.sample_image_6,</div><div class=\"line\">            R.drawable.sample_image_7, R.drawable.sample_image_8, R.drawable.sample_image_9&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Empty constructor as per Fragment docs</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ImageGridFragment</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        mAdapter = <span class=\"keyword\">new</span> ImageAdapter(getActivity());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(</span></span></div><div class=\"line\">            LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) &#123;</div><div class=\"line\">      <span class=\"comment\">//初始化控件，并绑定适配器，注册监听  </span></div><div class=\"line\">      <span class=\"keyword\">final</span> View v = inflater.inflate(R.layout.image_grid_fragment, container, <span class=\"keyword\">false</span>);</div><div class=\"line\">        <span class=\"keyword\">final</span> GridView mGridView = (GridView) v.findViewById(R.id.gridView);</div><div class=\"line\">        mGridView.setAdapter(mAdapter);</div><div class=\"line\">        mGridView.setOnItemClickListener(<span class=\"keyword\">this</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> v;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onItemClick</span><span class=\"params\">(AdapterView parent, View v, <span class=\"keyword\">int</span> position, <span class=\"keyword\">long</span> id)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Intent i = <span class=\"keyword\">new</span> Intent(getActivity(), ImageDetailActivity.class);</div><div class=\"line\">        i.putExtra(ImageDetailActivity.EXTRA_IMAGE, position);</div><div class=\"line\">        startActivity(i);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseAdapter</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Context mContext;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ImageAdapter</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>();</div><div class=\"line\">            mContext = context;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getCount</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> imageResIds.length;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getItem</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> imageResIds[position];</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">getItemId</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> position;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">getView</span><span class=\"params\">(<span class=\"keyword\">int</span> position, View convertView, ViewGroup container)</span> </span>&#123;</div><div class=\"line\">            ImageView imageView;</div><div class=\"line\">            <span class=\"keyword\">if</span> (convertView == <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">// 判断是否是循环复用的item view，不是的话，需要初始化一些属性。</span></div><div class=\"line\">                imageView = <span class=\"keyword\">new</span> ImageView(mContext);</div><div class=\"line\">                imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);</div><div class=\"line\">                imageView.setLayoutParams(<span class=\"keyword\">new</span> GridView.LayoutParams(</div><div class=\"line\">                        LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                imageView = (ImageView) convertView;</div><div class=\"line\">            &#125;</div><div class=\"line\">        <span class=\"comment\">//请注意下面的代码，如此可能会耗时，阻塞UI</span></div><div class=\"line\">        imageView.setImageResource(imageResIds[position]); <span class=\"comment\">// Load image into ImageView</span></div><div class=\"line\">        <span class=\"keyword\">return</span> imageView;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>考虑UI的可能阻塞，以及GridView引起的并发问题，代码优化如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageGridFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> <span class=\"keyword\">implements</span> <span class=\"title\">AdapterView</span>.<span class=\"title\">OnItemClickListener</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseAdapter</span> </span>&#123;</div><div class=\"line\">        ...</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">getView</span><span class=\"params\">(<span class=\"keyword\">int</span> position, View convertView, ViewGroup container)</span> </span>&#123;</div><div class=\"line\">            ...</div><div class=\"line\">            loadBitmap(imageResIds[position], imageView)</div><div class=\"line\">            <span class=\"keyword\">return</span> imageView;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t<span class=\"comment\">//异步加载图像</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">loadBitmap</span><span class=\"params\">(<span class=\"keyword\">int</span> resId, ImageView imageView)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (cancelPotentialWork(resId, imageView)) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> BitmapWorkerTask task = <span class=\"keyword\">new</span> BitmapWorkerTask(imageView);</div><div class=\"line\">            <span class=\"keyword\">final</span> AsyncDrawable asyncDrawable =</div><div class=\"line\">                    <span class=\"keyword\">new</span> AsyncDrawable(getResources(), mPlaceHolderBitmap, task);</div><div class=\"line\">            imageView.setImageDrawable(asyncDrawable);</div><div class=\"line\">            task.execute(resId);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t<span class=\"comment\">//用于绑定到imageView的drawable</span></div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AsyncDrawable</span> <span class=\"keyword\">extends</span> <span class=\"title\">BitmapDrawable</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> WeakReference bitmapWorkerTaskReference;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AsyncDrawable</span><span class=\"params\">(Resources res, Bitmap bitmap,</span></span></div><div class=\"line\">                BitmapWorkerTask bitmapWorkerTask) &#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(res, bitmap);</div><div class=\"line\">            bitmapWorkerTaskReference =</div><div class=\"line\">                <span class=\"keyword\">new</span> WeakReference(bitmapWorkerTask);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> BitmapWorkerTask <span class=\"title\">getBitmapWorkerTask</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> bitmapWorkerTaskReference.get();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t<span class=\"comment\">//判断imageview是否已经有加载图像的task</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">cancelPotentialWork</span><span class=\"params\">(<span class=\"keyword\">int</span> data, ImageView imageView)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> BitmapWorkerTask bitmapWorkerTask = getBitmapWorkerTask(imageView);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (bitmapWorkerTask != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> bitmapData = bitmapWorkerTask.data;</div><div class=\"line\">            <span class=\"keyword\">if</span> (bitmapData != data) &#123;</div><div class=\"line\">                <span class=\"comment\">// Cancel previous task</span></div><div class=\"line\">                bitmapWorkerTask.cancel(<span class=\"keyword\">true</span>);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"comment\">// The same work is already in progress</span></div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// No task associated with the ImageView, or an existing task was cancelled</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t<span class=\"comment\">//获取图像加载task</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> BitmapWorkerTask <span class=\"title\">getBitmapWorkerTask</span><span class=\"params\">(ImageView imageView)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (imageView != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">final</span> Drawable drawable = imageView.getDrawable();</div><div class=\"line\">           <span class=\"keyword\">if</span> (drawable <span class=\"keyword\">instanceof</span> AsyncDrawable) &#123;</div><div class=\"line\">               <span class=\"keyword\">final</span> AsyncDrawable asyncDrawable = (AsyncDrawable) drawable;</div><div class=\"line\">               <span class=\"keyword\">return</span> asyncDrawable.getBitmapWorkerTask();</div><div class=\"line\">           &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    ... <span class=\"comment\">// include updated BitmapWorkerTask class</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"2、使用OpenGL-ES显示图像\"><a href=\"#2、使用OpenGL-ES显示图像\" class=\"headerlink\" title=\"2、使用OpenGL ES显示图像\"></a>2、使用OpenGL ES显示图像</h3><p>Android平台提供了OpenGL ES接口，帮助我们实现更为丰富的图像显示效果。本章记述OpenGL构建应用的基础知识，包括配置、绘制对象、移动图形以及响应事件。</p>\n<p><strong>注意，不要混用OpenGL ES 1.x版和2.x版本的接口，因为并不通用。</strong></p>\n<h4 id=\"1、建立OpenGL-ES的环境\"><a href=\"#1、建立OpenGL-ES的环境\" class=\"headerlink\" title=\"1、建立OpenGL ES的环境\"></a>1、建立OpenGL ES的环境</h4><p>在应用中使用OpenGL ES来绘制图像，需要给它一个容器。通常实现<code>GLSurfaceView</code>做容器和<code>GLSurfaceView.Renderer</code>类来控制绘制。<code>GLSurfaceView</code>一般用于全屏或者接近全屏的View绘制，若是小范围，可以用<code>TextureView</code>。亦或者自定义View继承SurfaceView，但是会费事。</p>\n<ul>\n<li><h5 id=\"在Manifest中声明使用OpenGL-ES\"><a href=\"#在Manifest中声明使用OpenGL-ES\" class=\"headerlink\" title=\"在Manifest中声明使用OpenGL ES\"></a>在Manifest中声明使用OpenGL ES</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-feature</span> <span class=\"attr\">android.glEsVersion</span>=<span class=\"string\">\"0x00020000\"</span> <span class=\"attr\">android.required</span>=<span class=\"string\">\"true\"</span>/&gt;</span></div></pre></td></tr></table></figure>\n<p>如果使用图像纹理压缩，则必须在清单中声明支持的压缩格式：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">supports-gl-texture</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"GL_OES_compressed_ETC1_RGB8_texture\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">supports-gl-texture</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"GL_OES_compressed_paletted_texture\"</span>/&gt;</span></div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>使用OpenGL ES的App可以Activity中使用GLSurfaceView布局。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//要求api&gt;=8</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OpenGLES20Activity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> GLSurfaceView mGLView;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">\t\t<span class=\"comment\">//创建GLSurfaceView对象，设置为Activity布局。</span></div><div class=\"line\">        mGLView = <span class=\"keyword\">new</span> MyGLSurfaceView(<span class=\"keyword\">this</span>);</div><div class=\"line\">        setContentView(mGLView);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"构建一个GLSurfaceView对象\"><a href=\"#构建一个GLSurfaceView对象\" class=\"headerlink\" title=\"构建一个GLSurfaceView对象\"></a>构建一个GLSurfaceView对象</h5><p>  GLSurfaceView是一个特殊的view，用于绘制OpenGL ES图像的一个容器。其内部类GLSurfaceView.Renderer用于控制绘制。<br>  一般需要继承<code>GLSurfaceView</code>来用于自主控制各类触控事件。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyGLSurfaceView</span> <span class=\"keyword\">extends</span> <span class=\"title\">GLSurfaceView</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> MyGLRenderer mRenderer;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyGLSurfaceView</span><span class=\"params\">(Context context)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Create an OpenGL ES 2.0 context</span></div><div class=\"line\">        setEGLContextClientVersion(<span class=\"number\">2</span>);</div><div class=\"line\"></div><div class=\"line\">        mRenderer = <span class=\"keyword\">new</span> MyGLRenderer();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Set the Renderer for drawing on the GLSurfaceView</span></div><div class=\"line\">        setRenderer(mRenderer);</div><div class=\"line\">        <span class=\"comment\">// Render the view only when there is a change in the drawing data</span></div><div class=\"line\">        <span class=\"comment\">//设置此属性的话，除非调用requestRender()，否则GLSurfaceView不会刷新。只当有图像变化才会刷新。</span></div><div class=\"line\">        setRenderMode(GLSurfaceView.RENDERMODE_WHEN_DIRTY);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"构建一个渲染类\"><a href=\"#构建一个渲染类\" class=\"headerlink\" title=\"构建一个渲染类\"></a>构建一个渲染类</h5><p>  <code>GLSurfaceView.Renderer</code>被称为渲染器，控制图像绘制。Android可调用：</p>\n<ul>\n<li>onSurfaceCreated();调用一次，用于创建OpenGL ES环境</li>\n<li>onDrawFrame();每次重绘View时调用。</li>\n<li><p>onSurfaceChanged();View的几何形态变化时调用。</p>\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyGLRenderer</span> <span class=\"keyword\">implements</span> <span class=\"title\">GLSurfaceView</span>.<span class=\"title\">Renderer</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSurfaceCreated</span><span class=\"params\">(GL10 unused, EGLConfig config)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 设置背景框架颜色，此处为黑色，ARGB值</span></div><div class=\"line\">        GLES20.glClearColor(<span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>, <span class=\"number\">1.0f</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDrawFrame</span><span class=\"params\">(GL10 unused)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 重绘背景色</span></div><div class=\"line\">        GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSurfaceChanged</span><span class=\"params\">(GL10 unused, <span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height)</span> </span>&#123;</div><div class=\"line\">        GLES20.glViewport(<span class=\"number\">0</span>, <span class=\"number\">0</span>, width, height);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2、定义shapes\"><a href=\"#2、定义shapes\" class=\"headerlink\" title=\"2、定义shapes\"></a>2、定义shapes</h4><p>了解了OpenGL ES的基本概念后，便可以学习如何绘制基本图形。</p>\n<ul>\n<li><p>定义一个三角形<br>  OpenGL ES允许我们使用三维空间坐标来绘制图形，通常会定义float坐标数组，为了高效此处使用了<br>  ByteBuffer：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Triangle</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> FloatBuffer vertexBuffer;<span class=\"comment\">//浮点数组</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 数组中含有的坐标点数</span></div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> COORDS_PER_VERTEX = <span class=\"number\">3</span>;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">float</span> triangleCoords[] = &#123;   <span class=\"comment\">//坐标点逆时针顺序</span></div><div class=\"line\">            <span class=\"number\">0.0f</span>,  <span class=\"number\">0.622008459f</span>, <span class=\"number\">0.0f</span>, <span class=\"comment\">// 顶点</span></div><div class=\"line\">            -<span class=\"number\">0.5f</span>, -<span class=\"number\">0.311004243f</span>, <span class=\"number\">0.0f</span>, <span class=\"comment\">// 左下角</span></div><div class=\"line\">            <span class=\"number\">0.5f</span>, -<span class=\"number\">0.311004243f</span>, <span class=\"number\">0.0f</span>  <span class=\"comment\">//右下角</span></div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//设置RGB，Alpha</span></div><div class=\"line\">    <span class=\"keyword\">float</span> color[] = &#123; <span class=\"number\">0.63671875f</span>, <span class=\"number\">0.76953125f</span>, <span class=\"number\">0.22265625f</span>, <span class=\"number\">1.0f</span> &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Triangle</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// initialize vertex byte buffer for shape coordinates</span></div><div class=\"line\">        ByteBuffer bb = ByteBuffer.allocateDirect(</div><div class=\"line\">                <span class=\"comment\">// (number of coordinate values * 4 bytes per float)</span></div><div class=\"line\">                triangleCoords.length * <span class=\"number\">4</span>);</div><div class=\"line\">        <span class=\"comment\">// use the device hardware's native byte order</span></div><div class=\"line\">        bb.order(ByteOrder.nativeOrder());</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// create a floating point buffer from the ByteBuffer</span></div><div class=\"line\">        vertexBuffer = bb.asFloatBuffer();</div><div class=\"line\">        <span class=\"comment\">// add the coordinates to the FloatBuffer</span></div><div class=\"line\">        vertexBuffer.put(triangleCoords);</div><div class=\"line\">        <span class=\"comment\">// set the buffer to read the first coordinate</span></div><div class=\"line\">        vertexBuffer.position(<span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  默认情况下，OpenGL ES会有一个[0,0,0]的三维坐标系。更多的需要参考OpenGL手册。</p>\n</li>\n<li>定义一个矩形<br>  如下示例演示通过定义两个三角形来实现一个矩形。<br>  <img src=\"/2017/03/27/第四篇、Android图像与动画/ccw-square.png\" alt=\"矩形\"><pre><code><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//绘制两个三角形，所以使用一个绘制列表来通知OpenGL如何绘制顶点。</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> FloatBuffer vertexBuffer;</div><div class=\"line\">    <span class=\"keyword\">private</span> ShortBuffer drawListBuffer;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// number of coordinates per vertex in this array</span></div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> COORDS_PER_VERTEX = <span class=\"number\">3</span>;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">float</span> squareCoords[] = &#123;</div><div class=\"line\">            -<span class=\"number\">0.5f</span>,  <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>,   <span class=\"comment\">// top left</span></div><div class=\"line\">            -<span class=\"number\">0.5f</span>, -<span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>,   <span class=\"comment\">// bottom left</span></div><div class=\"line\">            <span class=\"number\">0.5f</span>, -<span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>,   <span class=\"comment\">// bottom right</span></div><div class=\"line\">            <span class=\"number\">0.5f</span>,  <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span> &#125;; <span class=\"comment\">// top right</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">short</span> drawOrder[] = &#123; <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> &#125;; <span class=\"comment\">// order to draw vertices</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Square</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// initialize vertex byte buffer for shape coordinates</span></div><div class=\"line\">        ByteBuffer bb = ByteBuffer.allocateDirect(</div><div class=\"line\">        <span class=\"comment\">// (# of coordinate values * 4 bytes per float)</span></div><div class=\"line\">                squareCoords.length * <span class=\"number\">4</span>);</div><div class=\"line\">        bb.order(ByteOrder.nativeOrder());</div><div class=\"line\">        vertexBuffer = bb.asFloatBuffer();</div><div class=\"line\">        vertexBuffer.put(squareCoords);</div><div class=\"line\">        vertexBuffer.position(<span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// initialize byte buffer for the draw list</span></div><div class=\"line\">        ByteBuffer dlb = ByteBuffer.allocateDirect(</div><div class=\"line\">        <span class=\"comment\">// (# of coordinate values * 2 bytes per short)</span></div><div class=\"line\">                drawOrder.length * <span class=\"number\">2</span>);</div><div class=\"line\">        dlb.order(ByteOrder.nativeOrder());</div><div class=\"line\">        drawListBuffer = dlb.asShortBuffer();</div><div class=\"line\">        drawListBuffer.put(drawOrder);</div><div class=\"line\">        drawListBuffer.position(<span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</code></pre></li>\n</ul>\n<h4 id=\"3、绘制shapes\"><a href=\"#3、绘制shapes\" class=\"headerlink\" title=\"3、绘制shapes\"></a>3、绘制shapes</h4><p>如上小节只是介绍了如何定义一个shape图形，本节将介绍如何绘制出需要的图形。出于内存和效率考虑，<br>除非加载的图形变化，一般都在<code>onSurfaceCreated()</code>中初始化shape图形。</p>\n<ul>\n<li><h5 id=\"初始化图形\"><a href=\"#初始化图形\" class=\"headerlink\" title=\"初始化图形\"></a>初始化图形</h5>  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyGLRenderer</span> <span class=\"keyword\">implements</span> <span class=\"title\">GLSurfaceView</span>.<span class=\"title\">Renderer</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">private</span> Triangle mTriangle;</div><div class=\"line\">    <span class=\"keyword\">private</span> Square   mSquare;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSurfaceCreated</span><span class=\"params\">(GL10 unused, EGLConfig config)</span> </span>&#123;</div><div class=\"line\">        ...</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// initialize a triangle</span></div><div class=\"line\">        mTriangle = <span class=\"keyword\">new</span> Triangle();</div><div class=\"line\">        <span class=\"comment\">// initialize a square</span></div><div class=\"line\">        mSquare = <span class=\"keyword\">new</span> Square();</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  使用OpenGL ES 绘制一个定义好的图形，需要如下步骤：</p>\n<ul>\n<li>顶点着色器（Vertex Shader）：用于渲染顶点的OpenGL ES 代码</li>\n<li>片段着色器（Fragment Shader）：使用颜色和纹理渲染图形表面的OpenGL ES 代码</li>\n<li><p>程式（Program）： OpenGL ES对象，包含各类着色器等。</p>\n<p>示例:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String vertexShaderCode =</div><div class=\"line\">    <span class=\"string\">\"attribute vec4 vPosition;\"</span> +</div><div class=\"line\">    <span class=\"string\">\"void main() &#123;\"</span> +</div><div class=\"line\">    <span class=\"string\">\"  gl_Position = vPosition;\"</span> +</div><div class=\"line\">    <span class=\"string\">\"&#125;\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String fragmentShaderCode =</div><div class=\"line\">    <span class=\"string\">\"precision mediump float;\"</span> +</div><div class=\"line\">    <span class=\"string\">\"uniform vec4 vColor;\"</span> +</div><div class=\"line\">    <span class=\"string\">\"void main() &#123;\"</span> +</div><div class=\"line\">    <span class=\"string\">\"  gl_FragColor = vColor;\"</span> +</div><div class=\"line\">    <span class=\"string\">\"&#125;\"</span>;</div><div class=\"line\"></div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>着色器包含OpenGL Shading Language（GLSL）代码，需要先编译，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">loadShader</span><span class=\"params\">(<span class=\"keyword\">int</span> type, String shaderCode)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// create a vertex shader type (GLES20.GL_VERTEX_SHADER)</span></div><div class=\"line\">    <span class=\"comment\">// or a fragment shader type (GLES20.GL_FRAGMENT_SHADER)</span></div><div class=\"line\">    <span class=\"keyword\">int</span> shader = GLES20.glCreateShader(type);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// add the source code to the shader and compile it</span></div><div class=\"line\">    GLES20.glShaderSource(shader, shaderCode);</div><div class=\"line\">    GLES20.glCompileShader(shader);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> shader;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><h5 id=\"画图\"><a href=\"#画图\" class=\"headerlink\" title=\"画图\"></a>画图</h5><p>  为了绘制你的图形，你必须编译着色器代码，将它们添加至一个OpenGL ES Program对象中，然后执行链接。<br>  在你的绘制对象的构造函数里做这些事情，这样上述步骤就只用执行一次。</p>\n<blockquote>\n<p>Note：编译OpenGL ES着色器及链接操作对于CPU周期和处理时间而言，消耗是巨大的，所以你应该避免重复执行这些事情。<br>如果在执行期间不知道着色器的内容，那么你应该在构建你的应用时，确保它们只被创建了一次，并且缓存以备后续使用。</p>\n</blockquote>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> class <span class=\"title\">Triangle</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> mProgram;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Triangle</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        ...</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">int</span> vertexShader = MyGLRenderer.loadShader(GLES20.GL_VERTEX_SHADER,</div><div class=\"line\">                                            vertexShaderCode);</div><div class=\"line\">        <span class=\"keyword\">int</span> fragmentShader = MyGLRenderer.loadShader(GLES20.GL_FRAGMENT_SHADER,</div><div class=\"line\">                                            fragmentShaderCode);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// create empty OpenGL ES Program</span></div><div class=\"line\">        mProgram = GLES20.glCreateProgram();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// add the vertex shader to program</span></div><div class=\"line\">        GLES20.glAttachShader(mProgram, vertexShader);</div><div class=\"line\">        <span class=\"comment\">// add the fragment shader to program</span></div><div class=\"line\">        GLES20.glAttachShader(mProgram, fragmentShader);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// creates OpenGL ES program executables</span></div><div class=\"line\">        GLES20.glLinkProgram(mProgram);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  绘制属性会根据图形而变化，就需要将变化逻辑一同写入绘制参数，</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mPositionHandle;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mColorHandle;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> vertexCount = triangleCoords.length / COORDS_PER_VERTEX;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> vertexStride = COORDS_PER_VERTEX * <span class=\"number\">4</span>; <span class=\"comment\">// 4 bytes per vertex</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Add program to OpenGL ES environment</span></div><div class=\"line\">    GLES20.glUseProgram(mProgram);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// get handle to vertex shader's vPosition member</span></div><div class=\"line\">    mPositionHandle = GLES20.glGetAttribLocation(mProgram, <span class=\"string\">\"vPosition\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Enable a handle to the triangle vertices</span></div><div class=\"line\">    GLES20.glEnableVertexAttribArray(mPositionHandle);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Prepare the triangle coordinate data</span></div><div class=\"line\">    GLES20.glVertexAttribPointer(mPositionHandle, COORDS_PER_VERTEX,</div><div class=\"line\">                                GLES20.GL_FLOAT, <span class=\"keyword\">false</span>,</div><div class=\"line\">                                vertexStride, vertexBuffer);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// get handle to fragment shader's vColor member</span></div><div class=\"line\">    mColorHandle = GLES20.glGetUniformLocation(mProgram, <span class=\"string\">\"vColor\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Set color for drawing the triangle</span></div><div class=\"line\">    GLES20.glUniform4fv(mColorHandle, <span class=\"number\">1</span>, color, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Draw the triangle</span></div><div class=\"line\">    GLES20.glDrawArrays(GLES20.GL_TRIANGLES, <span class=\"number\">0</span>, vertexCount);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Disable vertex array</span></div><div class=\"line\">    GLES20.glDisableVertexAttribArray(mPositionHandle);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  如此只需要在渲染器的<code>onDrawFrame()</code>中调用上面的<code>onDraw()</code>方法即可。<br>  <img src=\"/2017/03/27/第四篇、Android图像与动画/ogl-triangle.png\" alt=\"绘制图形\"></p>\n<h4 id=\"3、运用投影和相机视角\"><a href=\"#3、运用投影和相机视角\" class=\"headerlink\" title=\"3、运用投影和相机视角\"></a>3、运用投影和相机视角</h4><p>在OpenGL ES 环境中，利用投影和相机视角可以将图像更为逼真的显示。</p>\n</li>\n</ul>\n<ol>\n<li>投影(Projection)：此类变化基于GLSurfaceView的长宽。</li>\n<li>相机视角(Camera View):此类变化基于OpenGL ES 的虚拟相机。</li>\n</ol>\n<ul>\n<li><h5 id=\"定义一个投影\"><a href=\"#定义一个投影\" class=\"headerlink\" title=\"定义一个投影\"></a>定义一个投影</h5>投影变换的数据计算在GLSurfaceView.Render类中的onSurfaceChanged()中执行。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// mMVPMatrix is an abbreviation for \"Model View Projection Matrix\"</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">float</span>[] mMVPMatrix = <span class=\"keyword\">new</span> <span class=\"keyword\">float</span>[<span class=\"number\">16</span>];</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">float</span>[] mProjectionMatrix = <span class=\"keyword\">new</span> <span class=\"keyword\">float</span>[<span class=\"number\">16</span>];</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">float</span>[] mViewMatrix = <span class=\"keyword\">new</span> <span class=\"keyword\">float</span>[<span class=\"number\">16</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSurfaceChanged</span><span class=\"params\">(GL10 unused, <span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height)</span> </span>&#123;</div><div class=\"line\">    GLES20.glViewport(<span class=\"number\">0</span>, <span class=\"number\">0</span>, width, height);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">float</span> ratio = (<span class=\"keyword\">float</span>) width / height;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// this projection matrix is applied to object coordinates</span></div><div class=\"line\">    <span class=\"comment\">// in the onDrawFrame() method</span></div><div class=\"line\">    Matrix.frustumM(mProjectionMatrix, <span class=\"number\">0</span>, -ratio, ratio, -<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">7</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>若是绘图只是用投影，会让图像显得空旷，最好结合相机视角来绘制。</p>\n</blockquote>\n<ul>\n<li><h5 id=\"定义一个相机视角\"><a href=\"#定义一个相机视角\" class=\"headerlink\" title=\"定义一个相机视角\"></a>定义一个相机视角</h5>使用<code>Matrix.setLookAtM()</code>来换算计算，再结合如上投影换算：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDrawFrame</span><span class=\"params\">(GL10 unused)</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// Set the camera position (View matrix)</span></div><div class=\"line\">    Matrix.setLookAtM(mViewMatrix, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, -<span class=\"number\">3</span>, <span class=\"number\">0f</span>, <span class=\"number\">0f</span>, <span class=\"number\">0f</span>, <span class=\"number\">0f</span>, <span class=\"number\">1.0f</span>, <span class=\"number\">0.0f</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Calculate the projection and view transformation</span></div><div class=\"line\">    Matrix.multiplyMM(mMVPMatrix, <span class=\"number\">0</span>, mProjectionMatrix, <span class=\"number\">0</span>, mViewMatrix, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Draw shape</span></div><div class=\"line\">    mTriangle.draw(mMVPMatrix);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>将上一节的三角形使用投影和视角绘制：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Triangle</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//为顶点添加渲染着色器，Matrix</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String vertexShaderCode =</div><div class=\"line\">        <span class=\"comment\">// This matrix member variable provides a hook to manipulate</span></div><div class=\"line\">        <span class=\"comment\">// the coordinates of the objects that use this vertex shader</span></div><div class=\"line\">        <span class=\"string\">\"uniform mat4 uMVPMatrix;\"</span> +</div><div class=\"line\">        <span class=\"string\">\"attribute vec4 vPosition;\"</span> +</div><div class=\"line\">        <span class=\"string\">\"void main() &#123;\"</span> +</div><div class=\"line\">        <span class=\"comment\">// the matrix must be included as a modifier of gl_Position</span></div><div class=\"line\">        <span class=\"comment\">// Note that the uMVPMatrix factor *must be first* in order</span></div><div class=\"line\">        <span class=\"comment\">// for the matrix multiplication product to be correct.</span></div><div class=\"line\">        <span class=\"string\">\"  gl_Position = uMVPMatrix * vPosition;\"</span> +</div><div class=\"line\">        <span class=\"string\">\"&#125;\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Use to access and set the view transformation</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mMVPMatrixHandle;</div><div class=\"line\"></div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>修改<code>onDraw ()</code>方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">(<span class=\"keyword\">float</span>[] mvpMatrix)</span> </span>&#123; <span class=\"comment\">// pass in the calculated transformation matrix</span></div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// get handle to shape's transformation matrix</span></div><div class=\"line\">    mMVPMatrixHandle = GLES20.glGetUniformLocation(mProgram, <span class=\"string\">\"uMVPMatrix\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Pass the projection and view transformation to the shader</span></div><div class=\"line\">    GLES20.glUniformMatrix4fv(mMVPMatrixHandle, <span class=\"number\">1</span>, <span class=\"keyword\">false</span>, mvpMatrix, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Draw the triangle</span></div><div class=\"line\">    GLES20.glDrawArrays(GLES20.GL_TRIANGLES, <span class=\"number\">0</span>, vertexCount);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Disable vertex array</span></div><div class=\"line\">    GLES20.glDisableVertexAttribArray(mPositionHandle);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>效果如图：<img src=\"/2017/03/27/第四篇、Android图像与动画/ogl-triangle-projected.png\" alt=\"视角绘图\"></p>\n<h4 id=\"4、添加移动\"><a href=\"#4、添加移动\" class=\"headerlink\" title=\"4、添加移动\"></a>4、添加移动</h4><p>OpenGL 区别于Android的canvas和Drawable图形框架，在于其提供的特殊功能，如3D效果等。</p>\n<ul>\n<li><h5 id=\"旋转图像\"><a href=\"#旋转图像\" class=\"headerlink\" title=\"旋转图像\"></a>旋转图像</h5>在OpenGL ES2.0中新增一个变化矩阵，结合之前的投影和视角，来绘制图形移动。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">float</span>[] mRotationMatrix = <span class=\"keyword\">new</span> <span class=\"keyword\">float</span>[<span class=\"number\">16</span>];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDrawFrame</span><span class=\"params\">(GL10 gl)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">float</span>[] scratch = <span class=\"keyword\">new</span> <span class=\"keyword\">float</span>[<span class=\"number\">16</span>];</div><div class=\"line\"></div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Create a rotation transformation for the triangle</span></div><div class=\"line\">    <span class=\"keyword\">long</span> time = SystemClock.uptimeMillis() % <span class=\"number\">4000L</span>;</div><div class=\"line\">    <span class=\"keyword\">float</span> angle = <span class=\"number\">0.090f</span> * ((<span class=\"keyword\">int</span>) time);</div><div class=\"line\">    Matrix.setRotateM(mRotationMatrix, <span class=\"number\">0</span>, angle, <span class=\"number\">0</span>, <span class=\"number\">0</span>, -<span class=\"number\">1.0f</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Combine the rotation matrix with the projection and camera view</span></div><div class=\"line\">    <span class=\"comment\">// Note that the mMVPMatrix factor *must be first* in order</span></div><div class=\"line\">    <span class=\"comment\">// for the matrix multiplication product to be correct.</span></div><div class=\"line\">    Matrix.multiplyMM(scratch, <span class=\"number\">0</span>, mMVPMatrix, <span class=\"number\">0</span>, mRotationMatrix, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Draw triangle</span></div><div class=\"line\">    mTriangle.draw(scratch);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p><strong>Note:</strong> 不要将<code>GLSurfaceView.RENDERMODE_WHEN_DIRTY</code>注释掉，否则就可能不会移动，也不会渲染。</p>\n</blockquote>\n<ul>\n<li><h5 id=\"启用连续渲染\"><a href=\"#启用连续渲染\" class=\"headerlink\" title=\"启用连续渲染\"></a>启用连续渲染</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyGLSurfaceView</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// Render the view only when there is a change in the drawing data.</span></div><div class=\"line\">    <span class=\"comment\">// To allow the triangle to rotate automatically, this line is commented out:</span></div><div class=\"line\">    <span class=\"comment\">//setRenderMode(GLSurfaceView.RENDERMODE_WHEN_DIRTY);</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"5、响应触摸事件\"><a href=\"#5、响应触摸事件\" class=\"headerlink\" title=\"5、响应触摸事件\"></a>5、响应触摸事件</h4><p>炫酷的图形图像，也可以和用户有良好的交互体验。重写<code>GLSurfaceView</code>类的<code>onTouchEvent()</code>方法<br>来响应触摸事件。</p>\n<ul>\n<li><h5 id=\"注册监听\"><a href=\"#注册监听\" class=\"headerlink\" title=\"注册监听\"></a>注册监听</h5>在重写<code>onTouchEvent()</code>方法后，想要完成事件相应，就需要注册监听。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> TOUCH_SCALE_FACTOR = <span class=\"number\">180.0f</span> / <span class=\"number\">320</span>;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">float</span> mPreviousX;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">float</span> mPreviousY;</div><div class=\"line\"><span class=\"comment\">//复写onTouchEvent方法，本文用于响应MotionEvent.ACTION_MOVE事件</span></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouchEvent</span><span class=\"params\">(MotionEvent e)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// MotionEvent reports input details from the touch screen</span></div><div class=\"line\">    <span class=\"comment\">// and other input controls. In this case, you are only</span></div><div class=\"line\">    <span class=\"comment\">// interested in events where the touch position changed.</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">float</span> x = e.getX();</div><div class=\"line\">    <span class=\"keyword\">float</span> y = e.getY();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">switch</span> (e.getAction()) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE:</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">float</span> dx = x - mPreviousX;</div><div class=\"line\">            <span class=\"keyword\">float</span> dy = y - mPreviousY;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// reverse direction of rotation above the mid-line</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (y &gt; getHeight() / <span class=\"number\">2</span>) &#123;</div><div class=\"line\">              dx = dx * -<span class=\"number\">1</span> ;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// reverse direction of rotation to left of the mid-line</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (x &lt; getWidth() / <span class=\"number\">2</span>) &#123;</div><div class=\"line\">              dy = dy * -<span class=\"number\">1</span> ;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            mRenderer.setAngle(</div><div class=\"line\">                    mRenderer.getAngle() +</div><div class=\"line\">                    ((dx + dy) * TOUCH_SCALE_FACTOR));</div><div class=\"line\">            requestRender();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    mPreviousX = x;</div><div class=\"line\">    mPreviousY = y;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>如上代码调用<code>requestRender()</code>来刷新绘制，通过<code>setRenderMode()</code>来提高效率，只有变化时候才绘制：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyGLSurfaceView</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// Render the view only when there is a change in the drawing data</span></div><div class=\"line\">    setRenderMode(GLSurfaceView.RENDERMODE_WHEN_DIRTY);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li><h5 id=\"公开变量旋转角度\"><a href=\"#公开变量旋转角度\" class=\"headerlink\" title=\"公开变量旋转角度\"></a>公开变量旋转角度</h5>旋转角度的变量需要public，包括get和set方法<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyGLRenderer</span> <span class=\"keyword\">implements</span> <span class=\"title\">GLSurfaceView</span>.<span class=\"title\">Renderer</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">float</span> mAngle;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">float</span> <span class=\"title\">getAngle</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mAngle;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAngle</span><span class=\"params\">(<span class=\"keyword\">float</span> angle)</span> </span>&#123;</div><div class=\"line\">        mAngle = angle;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>然后在调用绘制图形的地方，填入角度值，启动旋转。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDrawFrame</span><span class=\"params\">(GL10 gl)</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">float</span>[] scratch = <span class=\"keyword\">new</span> <span class=\"keyword\">float</span>[<span class=\"number\">16</span>];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Create a rotation for the triangle</span></div><div class=\"line\">    <span class=\"comment\">// long time = SystemClock.uptimeMillis() % 4000L;</span></div><div class=\"line\">    <span class=\"comment\">// float angle = 0.090f * ((int) time);</span></div><div class=\"line\">    Matrix.setRotateM(mRotationMatrix, <span class=\"number\">0</span>, mAngle, <span class=\"number\">0</span>, <span class=\"number\">0</span>, -<span class=\"number\">1.0f</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Combine the rotation matrix with the projection and camera view</span></div><div class=\"line\">    <span class=\"comment\">// Note that the mMVPMatrix factor *must be first* in order</span></div><div class=\"line\">    <span class=\"comment\">// for the matrix multiplication product to be correct.</span></div><div class=\"line\">    Matrix.multiplyMM(scratch, <span class=\"number\">0</span>, mMVPMatrix, <span class=\"number\">0</span>, mRotationMatrix, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Draw triangle</span></div><div class=\"line\">    mTriangle.draw(scratch);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>滑动效果：<img src=\"/2017/03/27/第四篇、Android图像与动画/ogl-triangle-touch.png\" alt=\"滑动效果\"></p>\n<h3 id=\"3、添加动画\"><a href=\"#3、添加动画\" class=\"headerlink\" title=\"3、添加动画\"></a>3、添加动画</h3><p>动画效果可以让我们的App更为炫酷，但是也要在适当的地方和时机使用它。本章主要介绍Android的一些动画效果实现。</p>\n<h4 id=\"1、View间渐变\"><a href=\"#1、View间渐变\" class=\"headerlink\" title=\"1、View间渐变\"></a>1、View间渐变</h4><p>渐变动画通常用于View的切换，淡入淡出效果。<a href=\"http://hukai.me/android-training-course-in-chinese/animations/anim_crossfade.mp4\">渐变动画</a></p>\n<ul>\n<li><h5 id=\"创建View\"><a href=\"#创建View\" class=\"headerlink\" title=\"创建View\"></a>创建View</h5><p>示例，一个进度圈和可滑动的view</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">FrameLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ScrollView</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"/apk/res/android\"</span></span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span> <span class=\"attr\">style</span>=<span class=\"string\">\"?android:textAppearanceMedium\"</span></span></div><div class=\"line\">            <span class=\"attr\">android:lineSpacingMultiplier</span>=<span class=\"string\">\"1.2\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">            <span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/lorem_ipsum\"</span></div><div class=\"line\">            <span class=\"attr\">android:padding</span>=<span class=\"string\">\"16dp\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ScrollView</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ProgressBar</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/loading_spinner\"</span></span></div><div class=\"line\">        <span class=\"attr\">style</span>=<span class=\"string\">\"?android:progressBarStyleLarge\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">\"center\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">FrameLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"view设置动画\"><a href=\"#view设置动画\" class=\"headerlink\" title=\"view设置动画\"></a>view设置动画</h5><p>为上面的view设置动画效果，步骤如下：</p>\n</li>\n</ul>\n<ol>\n<li>设置view的成员变量，以备后用。</li>\n<li>先设置淡入的View的visible为gone</li>\n<li>将<code>config_shortAnimTime</code>系统属性暂存到成员变量。</li>\n</ol>\n<p>示例：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CrossfadeActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> View mContentView;</div><div class=\"line\">    <span class=\"keyword\">private</span> View mLoadingView;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mShortAnimationDuration;</div><div class=\"line\"></div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_crossfade);</div><div class=\"line\"></div><div class=\"line\">        mContentView = findViewById(R.id.content);</div><div class=\"line\">        mLoadingView = findViewById(R.id.loading_spinner);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Initially hide the content view.</span></div><div class=\"line\">        mContentView.setVisibility(View.GONE);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Retrieve and cache the system's default \"short\" animation time.</span></div><div class=\"line\">        mShortAnimationDuration = getResources().getInteger(</div><div class=\"line\">                android.R.integer.config_shortAnimTime);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li><h5 id=\"渐变View\"><a href=\"#渐变View\" class=\"headerlink\" title=\"渐变View\"></a>渐变View</h5>完成如上设置后，开始实现View的渐变效果：</li>\n</ul>\n<ol>\n<li>将需要淡入的View的Visible改为VISIBLE，透明度alpha=0</li>\n<li>将淡入的View，alpha从0–1，淡出的View，alpha从1–0</li>\n<li>使用<code>Animator.AnimatorListener</code>中的<code>onAnimationEnd()</code>来设置淡出的view的visible为gone，即使alpha=0，但是也会占用布局资源，所以需要gone。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> View mContentView;</div><div class=\"line\"><span class=\"keyword\">private</span> View mLoadingView;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mShortAnimationDuration;</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">crossfade</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Set the content view to 0% opacity but visible, so that it is visible</span></div><div class=\"line\">    <span class=\"comment\">// (but fully transparent) during the animation.</span></div><div class=\"line\">    mContentView.setAlpha(<span class=\"number\">0f</span>);</div><div class=\"line\">    mContentView.setVisibility(View.VISIBLE);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Animate the content view to 100% opacity, and clear any animation</span></div><div class=\"line\">    <span class=\"comment\">// listener set on the view.</span></div><div class=\"line\">    mContentView.animate()</div><div class=\"line\">            .alpha(<span class=\"number\">1f</span>)</div><div class=\"line\">            .setDuration(mShortAnimationDuration)</div><div class=\"line\">            .setListener(<span class=\"keyword\">null</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Animate the loading view to 0% opacity. After the animation ends,</span></div><div class=\"line\">    <span class=\"comment\">// set its visibility to GONE as an optimization step (it won't</span></div><div class=\"line\">    <span class=\"comment\">// participate in layout passes, etc.)</span></div><div class=\"line\">    mLoadingView.animate()</div><div class=\"line\">            .alpha(<span class=\"number\">0f</span>)</div><div class=\"line\">            .setDuration(mShortAnimationDuration)</div><div class=\"line\">            .setListener(<span class=\"keyword\">new</span> AnimatorListenerAdapter() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationEnd</span><span class=\"params\">(Animator animation)</span> </span>&#123;</div><div class=\"line\">                    mLoadingView.setVisibility(View.GONE);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"2、使用Viewpager实现屏幕滑动\"><a href=\"#2、使用Viewpager实现屏幕滑动\" class=\"headerlink\" title=\"2、使用Viewpager实现屏幕滑动\"></a>2、使用Viewpager实现屏幕滑动</h4><p>类似View的淡入淡出切换，而屏幕的切换是整个的界面转换，使用<code>supports library</code>的ViewPager来实现。<br><a href=\"http://hukai.me/android-training-course-in-chinese/animations/anim_screenslide.mp4\">ViewPager</a></p>\n<ul>\n<li><h5 id=\"创建View-1\"><a href=\"#创建View-1\" class=\"headerlink\" title=\"创建View\"></a>创建View</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- fragment_screen_slide_page.xml --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ScrollView</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/content\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span> &gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span> <span class=\"attr\">style</span>=<span class=\"string\">\"?android:textAppearanceMedium\"</span></span></div><div class=\"line\">        <span class=\"attr\">android:padding</span>=<span class=\"string\">\"16dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:lineSpacingMultiplier</span>=<span class=\"string\">\"1.2\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/lorem_ipsum\"</span> /&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ScrollView</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>如上定义一个fragment和text view</p>\n<ul>\n<li><h5 id=\"创建Fragment\"><a href=\"#创建Fragment\" class=\"headerlink\" title=\"创建Fragment\"></a>创建Fragment</h5><p>创建一个Fragment对象实例来展示view布局。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.app.Fragment;</div><div class=\"line\">...</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScreenSlidePageFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, ViewGroup container,</span></span></div><div class=\"line\">            Bundle savedInstanceState) &#123;</div><div class=\"line\">        ViewGroup rootView = (ViewGroup) inflater.inflate(</div><div class=\"line\">                R.layout.fragment_screen_slide_page, container, <span class=\"keyword\">false</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> rootView;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"添加viewPager\"><a href=\"#添加viewPager\" class=\"headerlink\" title=\"添加viewPager\"></a>添加viewPager</h5><p>ViewPager有内建的滑动手势，配合PagerAdapter来适配数据。需要创建一个包含ViewPager的布局</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- activity_screen_slide.xml --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.v4.view.ViewPager</span></span></div><div class=\"line\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/pager\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span> /&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>接下来就是创建一个Activity来关联布局，实现逻辑：</p>\n<ol>\n<li>content View中包含上述布局文件</li>\n<li>创建<code>FragmentStatePagerAdapter</code>的子类，实现<code>getItem()</code>方法，把ScreenSlidePageFragment实例作为新页面补充进来。<br>PagerAdapter还需要实现getCount()方法，它返回 Adapter将要创建页面的总数（例如5个）。</li>\n<li>关联<code>ViewPager</code>和<code>PagerAdapter</code></li>\n<li>处理Back按钮，按下变为在虚拟的Fragment栈中回退。如果用户已经在第一个页面了，<br>则在Activity的回退栈（back stack）中回退。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.app.Fragment;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.app.FragmentManager;</div><div class=\"line\">...</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScreenSlidePagerActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">FragmentActivity</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//屏幕页面数目</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> NUM_PAGES = <span class=\"number\">5</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//View Pager对象，用于处理页面切换的容器</span></div><div class=\"line\">    <span class=\"keyword\">private</span> ViewPager mPager;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//页面数据适配器</span></div><div class=\"line\">    <span class=\"keyword\">private</span> PagerAdapter mPagerAdapter;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_screen_slide);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 初始化数据</span></div><div class=\"line\">        mPager = (ViewPager) findViewById(R.id.pager);</div><div class=\"line\">        mPagerAdapter = <span class=\"keyword\">new</span> ScreenSlidePagerAdapter(getSupportFragmentManager());</div><div class=\"line\">        mPager.setAdapter(mPagerAdapter);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//处理返回按钮的点击事件</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onBackPressed</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mPager.getCurrentItem() == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">//要是第一个页面，返回按钮就是退出</span></div><div class=\"line\">            <span class=\"keyword\">super</span>.onBackPressed();</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">//不是第一个页面，返回按钮就是返回上一个页面</span></div><div class=\"line\">            mPager.setCurrentItem(mPager.getCurrentItem() - <span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//简单的适配器，用于加入几个页面</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScreenSlidePagerAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">FragmentStatePagerAdapter</span> </span>&#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ScreenSlidePagerAdapter</span><span class=\"params\">(FragmentManager fm)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(fm);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Fragment <span class=\"title\">getItem</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ScreenSlidePageFragment();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getCount</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> NUM_PAGES;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>ViewPager包含有默认的滑屏动画，若要自定义切换动画需要实现<code>viewpager.transformer</code>接口，并补充道Viewpager中<br>，实现其方法<code>transformPage()</code>。该方法会在显示页面滑动时，于其相邻的两个页面间调用。重要的参数就是当前页面<br>的位置position，可以根据页面位置来设置不同的动画效果。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ViewPager mPager = (ViewPager) findViewById(R.id.pager);</div><div class=\"line\">...</div><div class=\"line\">mPager.setPagerTransformer(<span class=\"keyword\">true</span>,<span class=\"keyword\">new</span> ZoomOutPagerTransformer());</div></pre></td></tr></table></figure></p>\n<ul>\n<li><h5 id=\"ZoomOutPagerTransformer\"><a href=\"#ZoomOutPagerTransformer\" class=\"headerlink\" title=\"ZoomOutPagerTransformer\"></a>ZoomOutPagerTransformer</h5><p>效果是逐渐褪色的淡出模式<a href=\"http://hukai.me/android-training-course-in-chinese/animations/anim_page_transformer_zoomout.mp4\">演示</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ZoomOutPageTransformer</span> <span class=\"keyword\">implements</span> <span class=\"title\">ViewPager</span>.<span class=\"title\">PageTransformer</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> MIN_SCALE = <span class=\"number\">0.85f</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> MIN_ALPHA = <span class=\"number\">0.5f</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">transformPage</span><span class=\"params\">(View view, <span class=\"keyword\">float</span> position)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> pageWidth = view.getWidth();</div><div class=\"line\">        <span class=\"keyword\">int</span> pageHeight = view.getHeight();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (position &lt; -<span class=\"number\">1</span>) &#123; <span class=\"comment\">// [-Infinity,-1)</span></div><div class=\"line\">            <span class=\"comment\">// This page is way off-screen to the left.</span></div><div class=\"line\">            view.setAlpha(<span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (position &lt;= <span class=\"number\">1</span>) &#123; <span class=\"comment\">// [-1,1]</span></div><div class=\"line\">            <span class=\"comment\">// Modify the default slide transition to shrink the page as well</span></div><div class=\"line\">            <span class=\"keyword\">float</span> scaleFactor = Math.max(MIN_SCALE, <span class=\"number\">1</span> - Math.abs(position));</div><div class=\"line\">            <span class=\"keyword\">float</span> vertMargin = pageHeight * (<span class=\"number\">1</span> - scaleFactor) / <span class=\"number\">2</span>;</div><div class=\"line\">            <span class=\"keyword\">float</span> horzMargin = pageWidth * (<span class=\"number\">1</span> - scaleFactor) / <span class=\"number\">2</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (position &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                view.setTranslationX(horzMargin - vertMargin / <span class=\"number\">2</span>);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                view.setTranslationX(-horzMargin + vertMargin / <span class=\"number\">2</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// Scale the page down (between MIN_SCALE and 1)</span></div><div class=\"line\">            view.setScaleX(scaleFactor);</div><div class=\"line\">            view.setScaleY(scaleFactor);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// Fade the page relative to its size.</span></div><div class=\"line\">            view.setAlpha(MIN_ALPHA +</div><div class=\"line\">                    (scaleFactor - MIN_SCALE) /</div><div class=\"line\">                    (<span class=\"number\">1</span> - MIN_SCALE) * (<span class=\"number\">1</span> - MIN_ALPHA));</div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// (1,+Infinity]</span></div><div class=\"line\">            <span class=\"comment\">// This page is way off-screen to the right.</span></div><div class=\"line\">            view.setAlpha(<span class=\"number\">0</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"Depth-Pager-Transformer\"><a href=\"#Depth-Pager-Transformer\" class=\"headerlink\" title=\"Depth Pager Transformer\"></a>Depth Pager Transformer</h5><p>右滑动潜藏效果<a href=\"http://hukai.me/android-training-course-in-chinese/animations/anim_page_transformer_depth.mp4\">video</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DepthPageTransformer</span> <span class=\"keyword\">implements</span> <span class=\"title\">ViewPager</span>.<span class=\"title\">PageTransformer</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> MIN_SCALE = <span class=\"number\">0.75f</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">transformPage</span><span class=\"params\">(View view, <span class=\"keyword\">float</span> position)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> pageWidth = view.getWidth();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (position &lt; -<span class=\"number\">1</span>) &#123; <span class=\"comment\">// [-Infinity,-1)</span></div><div class=\"line\">            <span class=\"comment\">// This page is way off-screen to the left.</span></div><div class=\"line\">            view.setAlpha(<span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (position &lt;= <span class=\"number\">0</span>) &#123; <span class=\"comment\">// [-1,0]</span></div><div class=\"line\">            <span class=\"comment\">// Use the default slide transition when moving to the left page</span></div><div class=\"line\">            view.setAlpha(<span class=\"number\">1</span>);</div><div class=\"line\">            view.setTranslationX(<span class=\"number\">0</span>);</div><div class=\"line\">            view.setScaleX(<span class=\"number\">1</span>);</div><div class=\"line\">            view.setScaleY(<span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (position &lt;= <span class=\"number\">1</span>) &#123; <span class=\"comment\">// (0,1]</span></div><div class=\"line\">            <span class=\"comment\">// Fade the page out.</span></div><div class=\"line\">            view.setAlpha(<span class=\"number\">1</span> - position);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// Counteract the default slide transition</span></div><div class=\"line\">            view.setTranslationX(pageWidth * -position);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// Scale the page down (between MIN_SCALE and 1)</span></div><div class=\"line\">            <span class=\"keyword\">float</span> scaleFactor = MIN_SCALE</div><div class=\"line\">                    + (<span class=\"number\">1</span> - MIN_SCALE) * (<span class=\"number\">1</span> - Math.abs(position));</div><div class=\"line\">            view.setScaleX(scaleFactor);</div><div class=\"line\">            view.setScaleY(scaleFactor);</div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// (1,+Infinity]</span></div><div class=\"line\">            <span class=\"comment\">// This page is way off-screen to the right.</span></div><div class=\"line\">            view.setAlpha(<span class=\"number\">0</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"3、实现Card翻转动画\"><a href=\"#3、实现Card翻转动画\" class=\"headerlink\" title=\"3、实现Card翻转动画\"></a>3、实现Card翻转动画</h4><p>通过自定义Fragment实现Card翻转效果的view切换。<a href=\"http://hukai.me/android-training-course-in-chinese/animations/anim_card_flip.mp4\">card</a></p>\n<ul>\n<li><h5 id=\"创建Animator\"><a href=\"#创建Animator\" class=\"headerlink\" title=\"创建Animator\"></a>创建Animator</h5>创建Card翻转动画，我们需要两个Animator。一个让正面的card的右侧向左翻转渐出，一个让背面的Card向右翻转渐入。我们还需要两个 Animator让背面的card的右侧向左翻转渐入，一个让向右翻转渐入。</li>\n</ul>\n<p><strong>card_flip_left_in.xml</strong><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">set</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Before rotating, immediately set the alpha to 0. --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">objectAnimator</span></span></div><div class=\"line\">        <span class=\"attr\">android:valueFrom</span>=<span class=\"string\">\"1.0\"</span></div><div class=\"line\">        <span class=\"attr\">android:valueTo</span>=<span class=\"string\">\"0.0\"</span></div><div class=\"line\">        <span class=\"attr\">android:propertyName</span>=<span class=\"string\">\"alpha\"</span></div><div class=\"line\">        <span class=\"attr\">android:duration</span>=<span class=\"string\">\"0\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Rotate. --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">objectAnimator</span></span></div><div class=\"line\">        <span class=\"attr\">android:valueFrom</span>=<span class=\"string\">\"-180\"</span></div><div class=\"line\">        <span class=\"attr\">android:valueTo</span>=<span class=\"string\">\"0\"</span></div><div class=\"line\">        <span class=\"attr\">android:propertyName</span>=<span class=\"string\">\"rotationY\"</span></div><div class=\"line\">        <span class=\"attr\">android:interpolator</span>=<span class=\"string\">\"@android:interpolator/accelerate_decelerate\"</span></div><div class=\"line\">        <span class=\"attr\">android:duration</span>=<span class=\"string\">\"@integer/card_flip_time_full\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Half-way through the rotation (see startOffset), set the alpha to 1. --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">objectAnimator</span></span></div><div class=\"line\">        <span class=\"attr\">android:valueFrom</span>=<span class=\"string\">\"0.0\"</span></div><div class=\"line\">        <span class=\"attr\">android:valueTo</span>=<span class=\"string\">\"1.0\"</span></div><div class=\"line\">        <span class=\"attr\">android:propertyName</span>=<span class=\"string\">\"alpha\"</span></div><div class=\"line\">        <span class=\"attr\">android:startOffset</span>=<span class=\"string\">\"@integer/card_flip_time_half\"</span></div><div class=\"line\">        <span class=\"attr\">android:duration</span>=<span class=\"string\">\"1\"</span> /&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">set</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><strong>card_flip_left_out.xml</strong><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">set</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Rotate. --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">objectAnimator</span></span></div><div class=\"line\">        <span class=\"attr\">android:valueFrom</span>=<span class=\"string\">\"0\"</span></div><div class=\"line\">        <span class=\"attr\">android:valueTo</span>=<span class=\"string\">\"180\"</span></div><div class=\"line\">        <span class=\"attr\">android:propertyName</span>=<span class=\"string\">\"rotationY\"</span></div><div class=\"line\">        <span class=\"attr\">android:interpolator</span>=<span class=\"string\">\"@android:interpolator/accelerate_decelerate\"</span></div><div class=\"line\">        <span class=\"attr\">android:duration</span>=<span class=\"string\">\"@integer/card_flip_time_full\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Half-way through the rotation (see startOffset), set the alpha to 0. --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">objectAnimator</span></span></div><div class=\"line\">        <span class=\"attr\">android:valueFrom</span>=<span class=\"string\">\"1.0\"</span></div><div class=\"line\">        <span class=\"attr\">android:valueTo</span>=<span class=\"string\">\"0.0\"</span></div><div class=\"line\">        <span class=\"attr\">android:propertyName</span>=<span class=\"string\">\"alpha\"</span></div><div class=\"line\">        <span class=\"attr\">android:startOffset</span>=<span class=\"string\">\"@integer/card_flip_time_half\"</span></div><div class=\"line\">        <span class=\"attr\">android:duration</span>=<span class=\"string\">\"1\"</span> /&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">set</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><strong>card_flip_right_in.xml</strong><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">set</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Before rotating, immediately set the alpha to 0. --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">objectAnimator</span></span></div><div class=\"line\">        <span class=\"attr\">android:valueFrom</span>=<span class=\"string\">\"1.0\"</span></div><div class=\"line\">        <span class=\"attr\">android:valueTo</span>=<span class=\"string\">\"0.0\"</span></div><div class=\"line\">        <span class=\"attr\">android:propertyName</span>=<span class=\"string\">\"alpha\"</span></div><div class=\"line\">        <span class=\"attr\">android:duration</span>=<span class=\"string\">\"0\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Rotate. --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">objectAnimator</span></span></div><div class=\"line\">        <span class=\"attr\">android:valueFrom</span>=<span class=\"string\">\"180\"</span></div><div class=\"line\">        <span class=\"attr\">android:valueTo</span>=<span class=\"string\">\"0\"</span></div><div class=\"line\">        <span class=\"attr\">android:propertyName</span>=<span class=\"string\">\"rotationY\"</span></div><div class=\"line\">        <span class=\"attr\">android:interpolator</span>=<span class=\"string\">\"@android:interpolator/accelerate_decelerate\"</span></div><div class=\"line\">        <span class=\"attr\">android:duration</span>=<span class=\"string\">\"@integer/card_flip_time_full\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Half-way through the rotation (see startOffset), set the alpha to 1. --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">objectAnimator</span></span></div><div class=\"line\">        <span class=\"attr\">android:valueFrom</span>=<span class=\"string\">\"0.0\"</span></div><div class=\"line\">        <span class=\"attr\">android:valueTo</span>=<span class=\"string\">\"1.0\"</span></div><div class=\"line\">        <span class=\"attr\">android:propertyName</span>=<span class=\"string\">\"alpha\"</span></div><div class=\"line\">        <span class=\"attr\">android:startOffset</span>=<span class=\"string\">\"@integer/card_flip_time_half\"</span></div><div class=\"line\">        <span class=\"attr\">android:duration</span>=<span class=\"string\">\"1\"</span> /&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">set</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><strong>card_flip_right_out.xml</strong><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">set</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Rotate. --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">objectAnimator</span></span></div><div class=\"line\">        <span class=\"attr\">android:valueFrom</span>=<span class=\"string\">\"0\"</span></div><div class=\"line\">        <span class=\"attr\">android:valueTo</span>=<span class=\"string\">\"-180\"</span></div><div class=\"line\">        <span class=\"attr\">android:propertyName</span>=<span class=\"string\">\"rotationY\"</span></div><div class=\"line\">        <span class=\"attr\">android:interpolator</span>=<span class=\"string\">\"@android:interpolator/accelerate_decelerate\"</span></div><div class=\"line\">        <span class=\"attr\">android:duration</span>=<span class=\"string\">\"@integer/card_flip_time_full\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Half-way through the rotation (see startOffset), set the alpha to 0. --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">objectAnimator</span></span></div><div class=\"line\">        <span class=\"attr\">android:valueFrom</span>=<span class=\"string\">\"1.0\"</span></div><div class=\"line\">        <span class=\"attr\">android:valueTo</span>=<span class=\"string\">\"0.0\"</span></div><div class=\"line\">        <span class=\"attr\">android:propertyName</span>=<span class=\"string\">\"alpha\"</span></div><div class=\"line\">        <span class=\"attr\">android:startOffset</span>=<span class=\"string\">\"@integer/card_flip_time_half\"</span></div><div class=\"line\">        <span class=\"attr\">android:duration</span>=<span class=\"string\">\"1\"</span> /&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">set</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<ul>\n<li><h5 id=\"创建View-2\"><a href=\"#创建View-2\" class=\"headerlink\" title=\"创建View\"></a>创建View</h5>card的每个面都是一个布局，需要在Fragment中关联展示<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></div><div class=\"line\">    <span class=\"attr\">android:background</span>=<span class=\"string\">\"#a6c\"</span></div><div class=\"line\">    <span class=\"attr\">android:padding</span>=<span class=\"string\">\"16dp\"</span></div><div class=\"line\">    <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"bottom\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@android:id/text1\"</span></span></div><div class=\"line\">        <span class=\"attr\">style</span>=<span class=\"string\">\"?android:textAppearanceLarge\"</span></div><div class=\"line\">        <span class=\"attr\">android:textStyle</span>=<span class=\"string\">\"bold\"</span></div><div class=\"line\">        <span class=\"attr\">android:textColor</span>=<span class=\"string\">\"#fff\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/card_back_title\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span> <span class=\"attr\">style</span>=<span class=\"string\">\"?android:textAppearanceSmall\"</span></span></div><div class=\"line\">        <span class=\"attr\">android:textAllCaps</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">        <span class=\"attr\">android:textColor</span>=<span class=\"string\">\"#80ffffff\"</span></div><div class=\"line\">        <span class=\"attr\">android:textStyle</span>=<span class=\"string\">\"bold\"</span></div><div class=\"line\">        <span class=\"attr\">android:lineSpacingMultiplier</span>=<span class=\"string\">\"1.2\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/card_back_description\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>另一面：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ImageView</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:src</span>=<span class=\"string\">\"@drawable/image1\"</span></div><div class=\"line\">    <span class=\"attr\">android:scaleType</span>=<span class=\"string\">\"centerCrop\"</span></div><div class=\"line\">    <span class=\"attr\">android:contentDescription</span>=<span class=\"string\">\"@string/description_image_1\"</span> /&gt;</div></pre></td></tr></table></figure></p>\n<ul>\n<li><h5 id=\"创建Fragment-1\"><a href=\"#创建Fragment-1\" class=\"headerlink\" title=\"创建Fragment\"></a>创建Fragment</h5><p>Card的正反面都是Fragment，需要创建并关联布局</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CardFlipActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * A fragment representing the front of the card.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CardFrontFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, ViewGroup container,</span></span></div><div class=\"line\">                Bundle savedInstanceState) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> inflater.inflate(R.layout.fragment_card_front, container, <span class=\"keyword\">false</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * A fragment representing the back of the card.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CardBackFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, ViewGroup container,</span></span></div><div class=\"line\">                Bundle savedInstanceState) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> inflater.inflate(R.layout.fragment_card_back, container, <span class=\"keyword\">false</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"实现翻转Card动画\"><a href=\"#实现翻转Card动画\" class=\"headerlink\" title=\"实现翻转Card动画\"></a>实现翻转Card动画</h5><p>创建一个framelayout来用于activity展示fragment</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">FrameLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/container\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span> /&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>在Activity中实现展示<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CardFlipActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_activity_card_flip);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (savedInstanceState == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            getFragmentManager()</div><div class=\"line\">                    .beginTransaction()</div><div class=\"line\">                    .add(R.id.container, <span class=\"keyword\">new</span> CardFrontFragment())</div><div class=\"line\">                    .commit();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如上默认展示了card的正面，需要适时创建card的背面，并实现翻转。</p>\n<ol>\n<li><p>将Fragment转换设置我们刚做的自定义动画</p>\n</li>\n<li><p>用新Fragment替换当前显示的Fragment，并且应用之前创建的动画到该事件中。</p>\n</li>\n<li><p>添加之前显示的Fragment到Fragment的回退栈（back stack）中，所以当用户按下 Back 键时，Card会翻转回来。</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">flipCard</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mShowingBack) &#123;</div><div class=\"line\">        getFragmentManager().popBackStack();</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 是否正在翻转</span></div><div class=\"line\"></div><div class=\"line\">    mShowingBack = <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 创建并执行一个事务，新增fragment并应用自定义动画，且将fragment加入回退栈</span></div><div class=\"line\"></div><div class=\"line\">    getFragmentManager()</div><div class=\"line\">            .beginTransaction()</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 使用自定义动画</span></div><div class=\"line\">            .setCustomAnimations(</div><div class=\"line\">                    R.animator.card_flip_right_in, R.animator.card_flip_right_out,</div><div class=\"line\">                    R.animator.card_flip_left_in, R.animator.card_flip_left_out)</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 翻转的fragment</span></div><div class=\"line\">            .replace(R.id.container, <span class=\"keyword\">new</span> CardBackFragment())</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 新增事务到回退栈</span></div><div class=\"line\">            .addToBackStack(<span class=\"keyword\">null</span>)</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 提交事务</span></div><div class=\"line\">            .commit();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"4、View的缩放\"><a href=\"#4、View的缩放\" class=\"headerlink\" title=\"4、View的缩放\"></a>4、View的缩放</h4><p>View的动画缩放效果，常用语图片的浏览展示。<a href=\"http://hukai.me/android-training-course-in-chinese/animations/anim_zoom.mp4\">scale</a></p>\n<ul>\n<li><h5 id=\"创建View-3\"><a href=\"#创建View-3\" class=\"headerlink\" title=\"创建View\"></a>创建View</h5><p>示例创建了大小两个版本的文件，</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">FrameLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/container\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></div><div class=\"line\">        <span class=\"attr\">android:padding</span>=<span class=\"string\">\"16dp\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ImageButton</span></span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/thumb_button_1\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"100dp\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"75dp\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_marginRight</span>=<span class=\"string\">\"1dp\"</span></div><div class=\"line\">            <span class=\"attr\">android:src</span>=<span class=\"string\">\"@drawable/thumb1\"</span></div><div class=\"line\">            <span class=\"attr\">android:scaleType</span>=<span class=\"string\">\"centerCrop\"</span></div><div class=\"line\">            <span class=\"attr\">android:contentDescription</span>=<span class=\"string\">\"@string/description_image_1\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- This initially-hidden ImageView will hold the expanded/zoomed version of</span></div><div class=\"line\">         the images above. Without transformations applied, it takes up the entire</div><div class=\"line\">         screen. To achieve the \"zoom\" animation, this view's bounds are animated</div><div class=\"line\">         from the bounds of the thumbnail button above, to its final laid-out</div><div class=\"line\">         bounds.</div><div class=\"line\">         --&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ImageView</span></span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/expanded_image\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:visibility</span>=<span class=\"string\">\"invisible\"</span></div><div class=\"line\">        <span class=\"attr\">android:contentDescription</span>=<span class=\"string\">\"@string/description_zoom_touch_close\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">FrameLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"设置缩放动画\"><a href=\"#设置缩放动画\" class=\"headerlink\" title=\"设置缩放动画\"></a>设置缩放动画</h5><p>监听点击事件，实现缩放效果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ZoomActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">FragmentActivity</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Hold a reference to the current animator,</span></div><div class=\"line\">    <span class=\"comment\">// so that it can be canceled mid-way.</span></div><div class=\"line\">    <span class=\"keyword\">private</span> Animator mCurrentAnimator;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// The system \"short\" animation time duration, in milliseconds. This</span></div><div class=\"line\">    <span class=\"comment\">// duration is ideal for subtle animations or animations that occur</span></div><div class=\"line\">    <span class=\"comment\">// very frequently.</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mShortAnimationDuration;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_zoom);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Hook up clicks on the thumbnail views.</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> View thumb1View = findViewById(R.id.thumb_button_1);</div><div class=\"line\">        thumb1View.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">                zoomImageFromThumb(thumb1View, R.drawable.image1);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Retrieve and cache the system's default \"short\" animation time.</span></div><div class=\"line\">        mShortAnimationDuration = getResources().getInteger(</div><div class=\"line\">                android.R.integer.config_shortAnimTime);</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"缩放View\"><a href=\"#缩放View\" class=\"headerlink\" title=\"缩放View\"></a>缩放View</h5><p>缩放View的效果实现：</p>\n</li>\n</ul>\n<ol>\n<li>高清大图放在IamgeView中，用于放大后再显示。</li>\n<li>计算image View的边界。</li>\n<li>要同步改变四个边界，用<code>AnimatorSet</code></li>\n<li>缩小则是类似逆向如上操作。注意view的属性需要设置gone。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">zoomImageFromThumb</span><span class=\"params\">(<span class=\"keyword\">final</span> View thumbView, <span class=\"keyword\">int</span> imageResId)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// If there's an animation in progress, cancel it</span></div><div class=\"line\">    <span class=\"comment\">// immediately and proceed with this one.</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (mCurrentAnimator != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        mCurrentAnimator.cancel();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Load the high-resolution \"zoomed-in\" image.</span></div><div class=\"line\">    <span class=\"keyword\">final</span> ImageView expandedImageView = (ImageView) findViewById(</div><div class=\"line\">            R.id.expanded_image);</div><div class=\"line\">    expandedImageView.setImageResource(imageResId);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Calculate the starting and ending bounds for the zoomed-in image.</span></div><div class=\"line\">    <span class=\"comment\">// This step involves lots of math. Yay, math.</span></div><div class=\"line\">    <span class=\"keyword\">final</span> Rect startBounds = <span class=\"keyword\">new</span> Rect();</div><div class=\"line\">    <span class=\"keyword\">final</span> Rect finalBounds = <span class=\"keyword\">new</span> Rect();</div><div class=\"line\">    <span class=\"keyword\">final</span> Point globalOffset = <span class=\"keyword\">new</span> Point();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// The start bounds are the global visible rectangle of the thumbnail,</span></div><div class=\"line\">    <span class=\"comment\">// and the final bounds are the global visible rectangle of the container</span></div><div class=\"line\">    <span class=\"comment\">// view. Also set the container view's offset as the origin for the</span></div><div class=\"line\">    <span class=\"comment\">// bounds, since that's the origin for the positioning animation</span></div><div class=\"line\">    <span class=\"comment\">// properties (X, Y).</span></div><div class=\"line\">    thumbView.getGlobalVisibleRect(startBounds);</div><div class=\"line\">    findViewById(R.id.container)</div><div class=\"line\">            .getGlobalVisibleRect(finalBounds, globalOffset);</div><div class=\"line\">    startBounds.offset(-globalOffset.x, -globalOffset.y);</div><div class=\"line\">    finalBounds.offset(-globalOffset.x, -globalOffset.y);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Adjust the start bounds to be the same aspect ratio as the final</span></div><div class=\"line\">    <span class=\"comment\">// bounds using the \"center crop\" technique. This prevents undesirable</span></div><div class=\"line\">    <span class=\"comment\">// stretching during the animation. Also calculate the start scaling</span></div><div class=\"line\">    <span class=\"comment\">// factor (the end scaling factor is always 1.0).</span></div><div class=\"line\">    <span class=\"keyword\">float</span> startScale;</div><div class=\"line\">    <span class=\"keyword\">if</span> ((<span class=\"keyword\">float</span>) finalBounds.width() / finalBounds.height()</div><div class=\"line\">            &gt; (<span class=\"keyword\">float</span>) startBounds.width() / startBounds.height()) &#123;</div><div class=\"line\">        <span class=\"comment\">// Extend start bounds horizontally</span></div><div class=\"line\">        startScale = (<span class=\"keyword\">float</span>) startBounds.height() / finalBounds.height();</div><div class=\"line\">        <span class=\"keyword\">float</span> startWidth = startScale * finalBounds.width();</div><div class=\"line\">        <span class=\"keyword\">float</span> deltaWidth = (startWidth - startBounds.width()) / <span class=\"number\">2</span>;</div><div class=\"line\">        startBounds.left -= deltaWidth;</div><div class=\"line\">        startBounds.right += deltaWidth;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// Extend start bounds vertically</span></div><div class=\"line\">        startScale = (<span class=\"keyword\">float</span>) startBounds.width() / finalBounds.width();</div><div class=\"line\">        <span class=\"keyword\">float</span> startHeight = startScale * finalBounds.height();</div><div class=\"line\">        <span class=\"keyword\">float</span> deltaHeight = (startHeight - startBounds.height()) / <span class=\"number\">2</span>;</div><div class=\"line\">        startBounds.top -= deltaHeight;</div><div class=\"line\">        startBounds.bottom += deltaHeight;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Hide the thumbnail and show the zoomed-in view. When the animation</span></div><div class=\"line\">    <span class=\"comment\">// begins, it will position the zoomed-in view in the place of the</span></div><div class=\"line\">    <span class=\"comment\">// thumbnail.</span></div><div class=\"line\">    thumbView.setAlpha(<span class=\"number\">0f</span>);</div><div class=\"line\">    expandedImageView.setVisibility(View.VISIBLE);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Set the pivot point for SCALE_X and SCALE_Y transformations</span></div><div class=\"line\">    <span class=\"comment\">// to the top-left corner of the zoomed-in view (the default</span></div><div class=\"line\">    <span class=\"comment\">// is the center of the view).</span></div><div class=\"line\">    expandedImageView.setPivotX(<span class=\"number\">0f</span>);</div><div class=\"line\">    expandedImageView.setPivotY(<span class=\"number\">0f</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Construct and run the parallel animation of the four translation and</span></div><div class=\"line\">    <span class=\"comment\">// scale properties (X, Y, SCALE_X, and SCALE_Y).</span></div><div class=\"line\">    AnimatorSet set = <span class=\"keyword\">new</span> AnimatorSet();</div><div class=\"line\">    set</div><div class=\"line\">            .play(ObjectAnimator.ofFloat(expandedImageView, View.X,</div><div class=\"line\">                    startBounds.left, finalBounds.left))</div><div class=\"line\">            .with(ObjectAnimator.ofFloat(expandedImageView, View.Y,</div><div class=\"line\">                    startBounds.top, finalBounds.top))</div><div class=\"line\">            .with(ObjectAnimator.ofFloat(expandedImageView, View.SCALE_X,</div><div class=\"line\">            startScale, <span class=\"number\">1f</span>)).with(ObjectAnimator.ofFloat(expandedImageView,</div><div class=\"line\">                    View.SCALE_Y, startScale, <span class=\"number\">1f</span>));</div><div class=\"line\">    set.setDuration(mShortAnimationDuration);</div><div class=\"line\">    set.setInterpolator(<span class=\"keyword\">new</span> DecelerateInterpolator());</div><div class=\"line\">    set.addListener(<span class=\"keyword\">new</span> AnimatorListenerAdapter() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationEnd</span><span class=\"params\">(Animator animation)</span> </span>&#123;</div><div class=\"line\">            mCurrentAnimator = <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationCancel</span><span class=\"params\">(Animator animation)</span> </span>&#123;</div><div class=\"line\">            mCurrentAnimator = <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    set.start();</div><div class=\"line\">    mCurrentAnimator = set;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Upon clicking the zoomed-in image, it should zoom back down</span></div><div class=\"line\">    <span class=\"comment\">// to the original bounds and show the thumbnail instead of</span></div><div class=\"line\">    <span class=\"comment\">// the expanded image.</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> startScaleFinal = startScale;</div><div class=\"line\">    expandedImageView.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (mCurrentAnimator != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                mCurrentAnimator.cancel();</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// Animate the four positioning/sizing properties in parallel,</span></div><div class=\"line\">            <span class=\"comment\">// back to their original values.</span></div><div class=\"line\">            AnimatorSet set = <span class=\"keyword\">new</span> AnimatorSet();</div><div class=\"line\">            set.play(ObjectAnimator</div><div class=\"line\">                        .ofFloat(expandedImageView, View.X, startBounds.left))</div><div class=\"line\">                        .with(ObjectAnimator</div><div class=\"line\">                                .ofFloat(expandedImageView,</div><div class=\"line\">                                        View.Y,startBounds.top))</div><div class=\"line\">                        .with(ObjectAnimator</div><div class=\"line\">                                .ofFloat(expandedImageView,</div><div class=\"line\">                                        View.SCALE_X, startScaleFinal))</div><div class=\"line\">                        .with(ObjectAnimator</div><div class=\"line\">                                .ofFloat(expandedImageView,</div><div class=\"line\">                                        View.SCALE_Y, startScaleFinal));</div><div class=\"line\">            set.setDuration(mShortAnimationDuration);</div><div class=\"line\">            set.setInterpolator(<span class=\"keyword\">new</span> DecelerateInterpolator());</div><div class=\"line\">            set.addListener(<span class=\"keyword\">new</span> AnimatorListenerAdapter() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationEnd</span><span class=\"params\">(Animator animation)</span> </span>&#123;</div><div class=\"line\">                    thumbView.setAlpha(<span class=\"number\">1f</span>);</div><div class=\"line\">                    expandedImageView.setVisibility(View.GONE);</div><div class=\"line\">                    mCurrentAnimator = <span class=\"keyword\">null</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationCancel</span><span class=\"params\">(Animator animation)</span> </span>&#123;</div><div class=\"line\">                    thumbView.setAlpha(<span class=\"number\">1f</span>);</div><div class=\"line\">                    expandedImageView.setVisibility(View.GONE);</div><div class=\"line\">                    mCurrentAnimator = <span class=\"keyword\">null</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">            set.start();</div><div class=\"line\">            mCurrentAnimator = set;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"5、布局动画\"><a href=\"#5、布局动画\" class=\"headerlink\" title=\"5、布局动画\"></a>5、布局动画</h4><p>布局动画是一种预加载动画，可以通过创建Layout Transition ，setLayoutTransition（）实现。<br><a href=\"http://hukai.me/android-training-course-in-chinese/animations/anim_layout_changes.mp4\">layout</a></p>\n<ul>\n<li><h5 id=\"创建布局\"><a href=\"#创建布局\" class=\"headerlink\" title=\"创建布局\"></a>创建布局</h5><p>为想开启动画的布局设置<code>android:animateLayoutChanges</code>属性为<code>true</code>。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/container\"</span></span></div><div class=\"line\">    <span class=\"attr\">android:animateLayoutChanges</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">    <span class=\"attr\">...</span></div><div class=\"line\">/&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"从布局中增删项目\"><a href=\"#从布局中增删项目\" class=\"headerlink\" title=\"从布局中增删项目\"></a>从布局中增删项目</h5><p>代码中动态修改布局项目，实现动画</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> ViewGroup mContainerView;</div><div class=\"line\">...</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">addItem</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    View newView;</div><div class=\"line\">    ...</div><div class=\"line\">    mContainerView.addView(newView, <span class=\"number\">0</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></li>\n</ul>\n"}],"PostAsset":[{"_id":"source/_posts/windows系统安装/安装完成.png","slug":"安装完成.png","post":"cj0xj1nfj000uscowl4z8splt","modified":1,"renderable":0},{"_id":"source/_posts/第一篇、Android入门基础/basic-lifecycle.png","post":"cj0xj1nfo000yscowo10iqe73","slug":"basic-lifecycle.png","modified":1,"renderable":1},{"_id":"source/_posts/windowsPE系统制作/pe.png","post":"cj0xj1nfe000sscowpb7iyqey","slug":"pe.png","modified":1,"renderable":1},{"_id":"source/_posts/windowsPE系统制作/upan.png","post":"cj0xj1nfe000sscowpb7iyqey","slug":"upan.png","modified":1,"renderable":1},{"_id":"source/_posts/windowsPE系统制作/view.png","slug":"view.png","post":"cj0xj1nfe000sscowpb7iyqey","modified":1,"renderable":0},{"_id":"source/_posts/windowsPE系统制作/zhizuo.png","post":"cj0xj1nfe000sscowpb7iyqey","slug":"zhizuo.png","modified":1,"renderable":1},{"_id":"source/_posts/windowsPE系统制作/zhizuo2.png","post":"cj0xj1nfe000sscowpb7iyqey","slug":"zhizuo2.png","modified":1,"renderable":1},{"_id":"source/_posts/windows系统安装/msdn.png","post":"cj0xj1nfj000uscowl4z8splt","slug":"msdn.png","modified":1,"renderable":1},{"_id":"source/_posts/windows系统安装/onekey.png","post":"cj0xj1nfj000uscowl4z8splt","slug":"onekey.png","modified":1,"renderable":1},{"_id":"source/_posts/windows系统安装/pe.png","post":"cj0xj1nfj000uscowl4z8splt","slug":"pe.png","modified":1,"renderable":1},{"_id":"source/_posts/windows系统安装/ultralISO.png","post":"cj0xj1nfj000uscowl4z8splt","slug":"ultralISO.png","modified":1,"renderable":1},{"_id":"source/_posts/windows系统安装/写入.png","post":"cj0xj1nfj000uscowl4z8splt","slug":"写入.png","modified":1,"renderable":1},{"_id":"source/_posts/windows系统安装/刻录.png","post":"cj0xj1nfj000uscowl4z8splt","slug":"刻录.png","modified":1,"renderable":1},{"_id":"source/_posts/windows系统安装/安装.png","post":"cj0xj1nfj000uscowl4z8splt","slug":"安装.png","modified":1,"renderable":1},{"_id":"source/_posts/windows系统安装/安装语言.png","post":"cj0xj1nfj000uscowl4z8splt","slug":"安装语言.png","modified":1,"renderable":1},{"_id":"source/_posts/windows系统安装/引导.png","post":"cj0xj1nfj000uscowl4z8splt","slug":"引导.png","modified":1,"renderable":1},{"_id":"source/_posts/windows系统安装/校验.png","post":"cj0xj1nfj000uscowl4z8splt","slug":"校验.png","modified":1,"renderable":1},{"_id":"source/_posts/windows系统安装/选择分区.png","post":"cj0xj1nfj000uscowl4z8splt","slug":"选择分区.png","modified":1,"renderable":1},{"_id":"source/_posts/windows系统安装/镜像.png","post":"cj0xj1nfj000uscowl4z8splt","slug":"镜像.png","modified":1,"renderable":1},{"_id":"source/_posts/windows系统安装/镜像2.png","post":"cj0xj1nfj000uscowl4z8splt","slug":"镜像2.png","modified":1,"renderable":1},{"_id":"source/_posts/第四篇、Android图像与动画/ccw-square.png","post":"cj0xj1ngi001zscowzssntem1","slug":"ccw-square.png","modified":1,"renderable":1},{"_id":"source/_posts/第四篇、Android图像与动画/ogl-triangle-projected.png","post":"cj0xj1ngi001zscowzssntem1","slug":"ogl-triangle-projected.png","modified":1,"renderable":1},{"_id":"source/_posts/第四篇、Android图像与动画/ogl-triangle-touch.png","post":"cj0xj1ngi001zscowzssntem1","slug":"ogl-triangle-touch.png","modified":1,"renderable":1},{"_id":"source/_posts/第四篇、Android图像与动画/ogl-triangle.png","post":"cj0xj1ngi001zscowzssntem1","slug":"ogl-triangle.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cj0xj1net0009scow2m3u5qym","category_id":"cj0xj1nen0005scowiqojs978","_id":"cj0xj1nez000fscow64sgegad"},{"post_id":"cj0xj1ne50001scow6tdd9i33","category_id":"cj0xj1nen0005scowiqojs978","_id":"cj0xj1nf6000kscow7lvavxjl"},{"post_id":"cj0xj1neb0003scowpd0tnets","category_id":"cj0xj1nen0005scowiqojs978","_id":"cj0xj1nfa000nscowtn7vv6a8"},{"post_id":"cj0xj1neq0007scowmx3o9o3y","category_id":"cj0xj1nen0005scowiqojs978","_id":"cj0xj1nfj000tscow9akmjstu"},{"post_id":"cj0xj1nev000ascowbw4wioa7","category_id":"cj0xj1nfc000pscowarojnrkf","_id":"cj0xj1nfo000zscowz0vb9h0u"},{"post_id":"cj0xj1ney000escow98fpx9vd","category_id":"cj0xj1nfm000vscow2ssqnr72","_id":"cj0xj1nfs0015scowcmwtbalt"},{"post_id":"cj0xj1nfo000yscowo10iqe73","category_id":"cj0xj1nen0005scowiqojs978","_id":"cj0xj1nft0019scowgyi2lwf8"},{"post_id":"cj0xj1nfp0012scowahfavuol","category_id":"cj0xj1nen0005scowiqojs978","_id":"cj0xj1nfu001bscowy70s09xc"},{"post_id":"cj0xj1nf0000hscow7th7jdnm","category_id":"cj0xj1nfm000vscow2ssqnr72","_id":"cj0xj1nfw001fscowtj8asgdn"},{"post_id":"cj0xj1nfr0014scow34io01au","category_id":"cj0xj1nen0005scowiqojs978","_id":"cj0xj1nfw001hscowevwrr19k"},{"post_id":"cj0xj1nf7000mscowxgxt5mu8","category_id":"cj0xj1nfc000pscowarojnrkf","_id":"cj0xj1nfx001lscowcyfv6nfo"},{"post_id":"cj0xj1nfe000sscowpb7iyqey","category_id":"cj0xj1nfu001dscowtmcvpybk","_id":"cj0xj1nfy001oscowb7bjbu6e"},{"post_id":"cj0xj1nfj000uscowl4z8splt","category_id":"cj0xj1nfu001dscowtmcvpybk","_id":"cj0xj1nfz001sscowl2f1qo29"},{"post_id":"cj0xj1nfn000xscowr8gx1ayi","category_id":"cj0xj1nfy001pscowwl87ygas","_id":"cj0xj1ng0001vscowf4gqjdlk"},{"post_id":"cj0xj1ngh001yscowrmuxuu05","category_id":"cj0xj1nfc000pscowarojnrkf","_id":"cj0xj1ngk0021scowwqynkcq3"},{"post_id":"cj0xj1ngi001zscowzssntem1","category_id":"cj0xj1nen0005scowiqojs978","_id":"cj0xj1ngo0023scowovavg8p5"}],"PostTag":[{"post_id":"cj0xj1net0009scow2m3u5qym","tag_id":"cj0xj1nep0006scowdjyiy0qm","_id":"cj0xj1nex000dscows4nx6p42"},{"post_id":"cj0xj1ne50001scow6tdd9i33","tag_id":"cj0xj1nep0006scowdjyiy0qm","_id":"cj0xj1nf0000gscow3nqq0dqp"},{"post_id":"cj0xj1neb0003scowpd0tnets","tag_id":"cj0xj1nep0006scowdjyiy0qm","_id":"cj0xj1nf6000lscowks9hztjx"},{"post_id":"cj0xj1neq0007scowmx3o9o3y","tag_id":"cj0xj1nep0006scowdjyiy0qm","_id":"cj0xj1nfe000rscowshgzu6pa"},{"post_id":"cj0xj1nev000ascowbw4wioa7","tag_id":"cj0xj1nfc000qscownupvcdxp","_id":"cj0xj1nfq0013scowwcdl82en"},{"post_id":"cj0xj1nev000ascowbw4wioa7","tag_id":"cj0xj1nfm000wscowpci0g98l","_id":"cj0xj1nfs0016scowwja89v4n"},{"post_id":"cj0xj1nfo000yscowo10iqe73","tag_id":"cj0xj1nep0006scowdjyiy0qm","_id":"cj0xj1nft001ascow9yk5kce7"},{"post_id":"cj0xj1nfp0012scowahfavuol","tag_id":"cj0xj1nep0006scowdjyiy0qm","_id":"cj0xj1nfu001cscowk5s796i0"},{"post_id":"cj0xj1ney000escow98fpx9vd","tag_id":"cj0xj1nfp0011scow3b7t17aa","_id":"cj0xj1nfw001gscowpv2zwbyo"},{"post_id":"cj0xj1nfr0014scow34io01au","tag_id":"cj0xj1nep0006scowdjyiy0qm","_id":"cj0xj1nfw001iscowmfbcju2u"},{"post_id":"cj0xj1nf0000hscow7th7jdnm","tag_id":"cj0xj1nfp0011scow3b7t17aa","_id":"cj0xj1nfx001mscow6l2mthbb"},{"post_id":"cj0xj1nf7000mscowxgxt5mu8","tag_id":"cj0xj1nfc000qscownupvcdxp","_id":"cj0xj1nfy001nscow8c40qzgd"},{"post_id":"cj0xj1nfe000sscowpb7iyqey","tag_id":"cj0xj1nfx001kscowhsygxnd9","_id":"cj0xj1nfz001rscowtom5pro1"},{"post_id":"cj0xj1nfj000uscowl4z8splt","tag_id":"cj0xj1nfx001kscowhsygxnd9","_id":"cj0xj1nfz001uscowz7idqh64"},{"post_id":"cj0xj1nfn000xscowr8gx1ayi","tag_id":"cj0xj1nfx001kscowhsygxnd9","_id":"cj0xj1ng2001wscowpcp4xg1a"},{"post_id":"cj0xj1nfn000xscowr8gx1ayi","tag_id":"cj0xj1nfc000qscownupvcdxp","_id":"cj0xj1ng2001xscowl3redqct"},{"post_id":"cj0xj1ngh001yscowrmuxuu05","tag_id":"cj0xj1nfc000qscownupvcdxp","_id":"cj0xj1ngk0020scow6s673hs2"},{"post_id":"cj0xj1ngi001zscowzssntem1","tag_id":"cj0xj1nep0006scowdjyiy0qm","_id":"cj0xj1ngk0022scowu7fd278i"}],"Tag":[{"name":"Android","_id":"cj0xj1nep0006scowdjyiy0qm"},{"name":"Linux","_id":"cj0xj1nfc000qscownupvcdxp"},{"name":"Git","_id":"cj0xj1nfm000wscowpci0g98l"},{"name":"Markdown","_id":"cj0xj1nfp0011scow3b7t17aa"},{"name":"Windows","_id":"cj0xj1nfx001kscowhsygxnd9"}]}}