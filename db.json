{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":0},{"_id":"source/img/home-bg.jpg","path":"img/home-bg.jpg","modified":0,"renderable":0},{"_id":"source/img/icon_wechat.png","path":"img/icon_wechat.png","modified":0,"renderable":0},{"_id":"source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":0},{"_id":"source/img/favicon_1.ico","path":"img/favicon_1.ico","modified":0,"renderable":0},{"_id":"source/img/contact-bg.jpg","path":"img/contact-bg.jpg","modified":0,"renderable":0},{"_id":"source/img/404-bg.jpg","path":"img/404-bg.jpg","modified":0,"renderable":0},{"_id":"themes/pure/source/css/hux-blog.css","path":"css/hux-blog.css","modified":0,"renderable":1},{"_id":"themes/pure/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":0,"renderable":1},{"_id":"themes/pure/source/css/hux-blog.min.css","path":"css/hux-blog.min.css","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/1.ttf","path":"fonts/1.ttf","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":0,"renderable":1},{"_id":"themes/pure/source/js/hux-blog.js","path":"js/hux-blog.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/hux-blog.min.js","path":"js/hux-blog.min.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/jquery.nav.js","path":"js/jquery.nav.js","modified":0,"renderable":1},{"_id":"themes/pure/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/pure/source/js/bootstrap.js","path":"js/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":0,"renderable":1},{"_id":"source/img/about-bg.jpg","path":"img/about-bg.jpg","modified":0,"renderable":0},{"_id":"themes/pure/source/css/bootstrap.css","path":"css/bootstrap.css","modified":0,"renderable":1},{"_id":"themes/pure/source/js/jquery.js","path":"js/jquery.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":0},{"_id":"source/img/tag-bg.jpg","path":"img/tag-bg.jpg","modified":0,"renderable":0},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0}],"Cache":[{"_id":"source/_除了post文件夹外，其他用_开头或隐藏的文件夹都会被忽略。MD和HTML会被解析放到public中，其他文件copy过去.txt","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490667675576},{"_id":"themes/pure/README.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1485083874000},{"_id":"source/404.md","hash":"fd184e653d1c97d76de37268e6d7f7c4afacee7e","modified":1490689359650},{"_id":"themes/pure/_config.yml","hash":"5d235aa7716657282795ee86d9c9db2374197a66","modified":1490753253452},{"_id":"themes/pure/LICENSE","hash":"2b209f06bebeb2a8c2b7e187e436f3e1e1fbc8a7","modified":1485083874000},{"_id":"source/_posts/Android 通用流行框架简介.md","hash":"5be25a3077e228e35db32fd3141f9e2b9e6f5b4d","modified":1491964881087},{"_id":"source/_posts/AndroidStudio使用CMake编译jni的C-C++文件.md","hash":"3b9dcf7cc1d78cc32756e930b67573c77efe55c1","modified":1490950709220},{"_id":"source/_posts/Android开源控件搜集--Button.md","hash":"f6b995cbf8e4903f3a51426a9014a9ddf6d5e957","modified":1490694014951},{"_id":"source/_posts/Android学习笔记第五篇--网络连接与云服务.md","hash":"a14a7381ca9176bb12f6c6de2373aba9c431a12a","modified":1490694050673},{"_id":"source/_posts/Android开源控件搜集--ProgressBar.md","hash":"30a1d8c117a41205e2485edc4f88d11dc6380b38","modified":1490694026666},{"_id":"source/_posts/Android系统源码编译-unsupported-reloc-43-和-make-update-api问题.md","hash":"bc6e6afcdeab18141ee419d23a383fa82d7db1e6","modified":1491811761912},{"_id":"source/_posts/Android动态服务SPI的实现.md","hash":"afb2447bb28a33c62f24878ea8b07b0849596800","modified":1491898761472},{"_id":"source/_posts/C++学习笔记.md","hash":"39432eff21d204118d2408361a1460c1e4412e5a","modified":1490949247179},{"_id":"source/_posts/Android开源控件搜集--TextView.md","hash":"8c348e3de4aeb8183c221daa253e41f035ee2d84","modified":1490694037127},{"_id":"source/_posts/Centos网络设置.md","hash":"f1770eb6565ff54c0fbcde95839cbb438f946fe7","modified":1490950558762},{"_id":"source/_posts/C语言学习笔记--基础语法三.md","hash":"802d6a4554464f774c4db621c4a68fd9cb2f6d74","modified":1490949388531},{"_id":"source/_posts/Execution failed for task.md","hash":"2a5c75da92b625ba2aa2c54c2cdef6ad0e3e9396","modified":1490948587623},{"_id":"source/_posts/C语言学习笔记--基础语法二.md","hash":"dd3068e96fd2218fb9395ace4fc0315f08304283","modified":1490949444741},{"_id":"source/_posts/C语言学习笔记--基础语法四.md","hash":"c1a44f92a756d9d18a72d726cfa1148c0bc1f735","modified":1490949338123},{"_id":"source/_posts/C语言学习笔记--基础语法一.md","hash":"cdc7c18b91c451620ca1f98281eb5c558f4d7f2c","modified":1490949485195},{"_id":"source/_posts/GitHub-IOS-Libraries-Top-100-简介.md","hash":"1a2b0065db10edd9fddf8248e187010c5b6a0edc","modified":1491909034105},{"_id":"source/_posts/Git学习笔记.md","hash":"84d23695f6cddc670d8ae00892ffa40b4558552e","modified":1490928953287},{"_id":"source/_posts/Hexo学习笔记.md","hash":"8b4d617004a2a3cf3441b5e30e0d9c54f16a8f62","modified":1490949877669},{"_id":"source/_posts/Github上fork同步.md","hash":"e837817b1c8892a4523f9f86fd91e240b734a840","modified":1490949858845},{"_id":"source/_posts/Linux下adb的使用及adb devices no permissions问题的解决.md","hash":"e612a2e57d074a2206a099902b1fc9e5bdf4057d","modified":1491537344035},{"_id":"source/_posts/Linux中文相关设置.md","hash":"3c23a37692c37ca2f38a65c45e07beaa9d5e3207","modified":1490947430537},{"_id":"source/_posts/Markdown基本语法.md","hash":"29fe40193f69f02d0c126e54df7c0d1eb6a26eec","modified":1490943218241},{"_id":"source/_posts/Linux桌面版安装及开发环境配置.md","hash":"bd28aee84e7bea8a4fe27fc998ed17f1e975528e","modified":1490947564130},{"_id":"source/_posts/Linux出现require CD-ROM问题.md","hash":"14e423223fedb3edd5634a51f453e89dfa7ca7a4","modified":1490949889798},{"_id":"source/_posts/RK3288爬坑笔记.md","hash":"3cd540979d9d8f68bf449ba5f8c679fb544f4039","modified":1490949914853},{"_id":"source/_posts/Markdown语法简要.md","hash":"7d486f43bc09ade090c4ad8bf2ec4af9fc75e8d6","modified":1490929044996},{"_id":"source/_posts/UML类图学习笔记.md","hash":"eb3e1c92533ba897f3ba00eac8323bd246c8f0e8","modified":1490949161924},{"_id":"source/_posts/VMtools安装与虚拟机文件共享.md","hash":"3943e454d561296402797c973a61e02feccea39b","modified":1490947228189},{"_id":"source/_posts/hello-world.md","hash":"dc0f15f0c7f91fedb505d7c05f5a9e202ccb4126","modified":1490950210316},{"_id":"source/_posts/Shell学习笔记.md","hash":"2e64652071443b4902ebbfc89c78a1e2d223f635","modified":1490929866079},{"_id":"source/_posts/windows系统安装.md","hash":"dcc2ce8984db59fc233ed7f15c9e3dbe2632772c","modified":1490940203285},{"_id":"source/_posts/windowsPE系统制作.md","hash":"baf817b562f809377ec53e475e2f46eabe89da75","modified":1490940167637},{"_id":"source/_posts/个人开发工具集.md","hash":"a22bddd1e55155bc86090864c120260241f33edc","modified":1490947270017},{"_id":"source/_posts/图片缓存LruCache和DiskLruCache使用.md","hash":"8b8c157b122e861bb0ccab69739da5650706477e","modified":1490950430356},{"_id":"source/_posts/斐波那契数列.md","hash":"ab28cae063be0dfd5486bafea2591ccb65481801","modified":1490949964527},{"_id":"source/_posts/xUtils3简要说明.md","hash":"0462d9c59db805d5d1aad815baebd2e1eab187c1","modified":1490950585907},{"_id":"source/_posts/第一篇、Android入门基础.md","hash":"cd82d88f6b566dd778d8767f0328c8ddd7fdf4da","modified":1490696088552},{"_id":"source/_posts/正则表达式学习笔记.md","hash":"d80a26663470d981152ffeb74c7e5df7ba00f623","modified":1490951149395},{"_id":"source/_posts/第三篇、Android多媒体.md","hash":"9e476e400928f01b5274f2a7ff3f5ff3b0edad26","modified":1490694147486},{"_id":"source/_posts/第二篇、Android分享操作.md","hash":"54c3f110ec653d8fa6c134bbdfafad6b31c931cf","modified":1490694135071},{"_id":"source/_posts/经典欧美动画电影.md","hash":"ab23792310ddc29c535d730d03c4df61bb192df1","modified":1492510003465},{"_id":"source/about/index.md","hash":"82cd2dc5e0d4e6dca9ea505f78ebb4109bca4997","modified":1490756050425},{"_id":"source/_posts/局域网文件与打印共享.md","hash":"7e95e3e6d5152dd17bbe64a8fe9627ea2dec1a89","modified":1490947300840},{"_id":"source/img/avatar.jpg","hash":"0bcf9b357a386069eb7b48eec2f3b154d6df360f","modified":1490687917061},{"_id":"source/_posts/GitHub-Android-Libraries-Top-100-简介 - 副本.md","hash":"ceb8e84396bc966cc7dac363e1cab4f457de83bd","modified":1491904475808},{"_id":"source/img/home-bg.jpg","hash":"06a9131503e86f23ce2d8e9e188d30279dd5a96f","modified":1490688877694},{"_id":"source/img/icon_wechat.png","hash":"b30f5f7b7ab5c74ced0cc6f1ff56558e4e3156fc","modified":1490689300197},{"_id":"source/archives/index.md","hash":"6efd1c0fa4e9ec85c1a7f9e9cb99da4a33018d7b","modified":1490689387977},{"_id":"source/tags/index.md","hash":"0bc541f4c6a0f21bec67b6717ee86226f0eddf39","modified":1485083874000},{"_id":"themes/pure/languages/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1485083874000},{"_id":"themes/pure/languages/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1485083874000},{"_id":"themes/pure/languages/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1485083874000},{"_id":"themes/pure/languages/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1485083874000},{"_id":"themes/pure/languages/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1485083874000},{"_id":"themes/pure/languages/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1485083874000},{"_id":"themes/pure/languages/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1485083874000},{"_id":"themes/pure/languages/zh-TW.yml","hash":"0ea4f7c2d293bc354b911c6c02d1dc85cea72395","modified":1490686245364},{"_id":"themes/pure/languages/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1485083874000},{"_id":"themes/pure/layout/404.ejs","hash":"a4d73541a53e56b7dd46249c6d27cb59f4d97422","modified":1485083874000},{"_id":"themes/pure/layout/archive.ejs","hash":"6c3ed5d914379319efe835a4aa505abbc616c328","modified":1485083874000},{"_id":"themes/pure/layout/index.ejs","hash":"70ac58c46625300a70791e210daf446afa6d1cd4","modified":1485083874000},{"_id":"themes/pure/layout/keynote.ejs","hash":"f5689862281e34dbe8402b0e72f632902e53e88b","modified":1485083874000},{"_id":"themes/pure/layout/about.ejs","hash":"7f56c71383ef6c156b56d79b3984e07cc466606a","modified":1485083874000},{"_id":"themes/pure/layout/page.ejs","hash":"3fde0787e883274563f9de5aaeb8130b667e132a","modified":1485083874000},{"_id":"themes/pure/layout/post.ejs","hash":"fd68124c3de2bbe7d870cecadcf684df7cf82519","modified":1485083874000},{"_id":"source/_posts/Python学习笔记.md","hash":"1b7a2d2528a2e06c6b71c909c6b3f07ca34422d5","modified":1490929353619},{"_id":"themes/pure/layout/archives.ejs","hash":"f0046e58cc1dd876133be2bf927aed2b1821cb3e","modified":1485083874000},{"_id":"source/_posts/第四篇、Android图像与动画.md","hash":"bc4bdaa091841a06c1ad54aaf9c68e84f4ab8329","modified":1490696208523},{"_id":"source/img/favicon.ico","hash":"8d4787473ec83114b7c2ea1ef5686ffd996c1a59","modified":1490688544980},{"_id":"source/img/favicon_1.ico","hash":"d9e1b4ecbbc3964d86cd36ab079cb1227a1d3074","modified":1490688568601},{"_id":"source/img/contact-bg.jpg","hash":"b1b891a515c31ba22bafc032a29dc6f2111e0b90","modified":1490689044928},{"_id":"themes/pure/layout/tags.ejs","hash":"a51bf2828af20939d702de1fdae067439a1153c0","modified":1485083874000},{"_id":"themes/pure/layout/layout.ejs","hash":"b44ca6367e9ea5576fefc6955b345e6bab59f6ef","modified":1490753259035},{"_id":"source/_posts/Android 通用流行框架简介/Android通用流行框架.png","hash":"e592841621610c7509ade59a26ccd36c19172960","modified":1491903505470},{"_id":"source/_posts/AndroidStudio使用CMake编译jni的C-C++文件/config.jpg","hash":"22400dff514f48e94acfbc4c70ccf51f54040502","modified":1490949645805},{"_id":"source/_posts/Centos网络设置/p2.jpg","hash":"258d8a4bf985b5d3e4809674edd04d7b8f28ecdc","modified":1490949721636},{"_id":"source/_posts/Github上fork同步/clone.png","hash":"0eeffff1bdc66e4a1045c4df1a6a5758123cf2fa","modified":1490949827676},{"_id":"source/_posts/AndroidStudio使用CMake编译jni的C-C++文件/create.jpg","hash":"5769e115e23fa2f6e6acfc53ff4ec005023349c9","modified":1490949612116},{"_id":"source/_posts/Centos网络设置/p1.png","hash":"08b4a5fdd4e7c6e0a0a9220238ef0b91f9817059","modified":1490949715284},{"_id":"source/_posts/Android动态服务SPI的实现/spi.png","hash":"2ca176325e26c92f4ec9c85c287edd162a401c22","modified":1491898360266},{"_id":"source/_posts/windowsPE系统制作/pe.png","hash":"62868b634b9e492054affd35509ce185290fc557","modified":1490932812912},{"_id":"source/_posts/windowsPE系统制作/upan.png","hash":"d115eb40bd3f3ce2e3d60e5a0044c7d9631fcf86","modified":1490932917820},{"_id":"source/_posts/windows系统安装/onekey.png","hash":"96c026a1ef8cc24fd4715bc70cd6df58714dd42d","modified":1490930636628},{"_id":"source/_posts/windows系统安装/pe.png","hash":"1b027729407e3d24e50cf74c2771dc73594dbe3a","modified":1490930656528},{"_id":"source/_posts/Github上fork同步/update.png","hash":"16f16e097ff52fa51997c99c3276dec7a04e63c7","modified":1490949843829},{"_id":"source/_posts/windows系统安装/刻录.png","hash":"5de1c7ed4f91e0e130e7d7d629727fb9249ca558","modified":1490930267722},{"_id":"source/_posts/windows系统安装/安装.png","hash":"de53f97a58d8a24d48d0188cf17211c8e5959c25","modified":1490930482773},{"_id":"source/_posts/windows系统安装/镜像.png","hash":"c47b57c613aa8dad1be97fc87a741ee4fe0b9643","modified":1490930376977},{"_id":"source/_posts/windows系统安装/校验.png","hash":"fb5ea8898ed471dd2b467d9eb893c2978a2bfc19","modified":1490930304336},{"_id":"source/_posts/windows系统安装/镜像2.png","hash":"d109394821ca430e282fec12f7ff3c31b1580eec","modified":1490930405553},{"_id":"source/_posts/局域网文件与打印共享/net.png","hash":"66a70dd877e4a68e9079295f73b338b361983cf8","modified":1490946975808},{"_id":"source/_posts/第四篇、Android图像与动画/ccw-square.png","hash":"fa1e037486d69915f97393ffedf085d19f3714d3","modified":1479202750027},{"_id":"source/_posts/第四篇、Android图像与动画/ogl-triangle-projected.png","hash":"654ec2464db38f25bd49dd50999117355358e13b","modified":1479266124692},{"_id":"source/img/404-bg.jpg","hash":"327d2ef9c17768cb6df8b41dd265765162cfa3e2","modified":1490687204118},{"_id":"source/_posts/第四篇、Android图像与动画/ogl-triangle-touch.png","hash":"40f7278e4d4c8c2d9cd8ead21c093e55080c9532","modified":1479267639820},{"_id":"themes/pure/layout/_partial/footer.ejs","hash":"dde5ca3d7c9625b92bd39190efc08ce1f341cc3b","modified":1492771292109},{"_id":"themes/pure/layout/_partial/pagination.ejs","hash":"557d6bb069a1d48af49ae912994653f44b32a570","modified":1485083874000},{"_id":"themes/pure/layout/_partial/nav.ejs","hash":"4c905166c960852e9b9a3c9d5c680091e37b481f","modified":1485083874000},{"_id":"themes/pure/source/css/hux-blog.css","hash":"c1b0a32ad8075ac09d99fb4d64a9fbc84163abf8","modified":1485083874000},{"_id":"themes/pure/layout/_partial/head.ejs","hash":"883afeaffa084d96f8a04fae901c751a6ce2a1fa","modified":1490707848786},{"_id":"themes/pure/source/css/highlight.styl","hash":"e842080e6d580f0f70a7df71fbde3c4e49463c19","modified":1485083874000},{"_id":"themes/pure/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1485083874000},{"_id":"themes/pure/source/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1485083874000},{"_id":"themes/pure/source/fonts/1.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1485083874000},{"_id":"themes/pure/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1485083874000},{"_id":"themes/pure/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1485083874000},{"_id":"source/_posts/第四篇、Android图像与动画/ogl-triangle.png","hash":"294a33bdc1c360199d8c5f5f56286395309b46c7","modified":1479264372471},{"_id":"themes/pure/source/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1485083874000},{"_id":"themes/pure/source/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1485083874000},{"_id":"themes/pure/source/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1485083874000},{"_id":"themes/pure/source/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1485083874000},{"_id":"source/_posts/windowsPE系统制作/zhizuo2.png","hash":"f86fd5b179c1a19258cfab2c27ef3114bc3f6a0b","modified":1490932969149},{"_id":"source/_posts/windows系统安装/msdn.png","hash":"f45cf62180fd53489b09edacf90acf722e138b75","modified":1490930025013},{"_id":"source/_posts/windows系统安装/写入.png","hash":"6f0d5b02decb5babd7ff5a61753d0fafc6599e51","modified":1490930333965},{"_id":"source/_posts/第一篇、Android入门基础/basic-lifecycle.png","hash":"6efc2f3fdc2dca6dc4b36ec2622506d5ea4764e4","modified":1476965486366},{"_id":"source/_posts/windows系统安装/ultralISO.png","hash":"e7ba6e18714a1a0df082b1878ae2648025bfaa27","modified":1490930217382},{"_id":"themes/pure/source/css/bootstrap.min.css","hash":"973e37a8502921d56bc02bb55321f45b072b6f71","modified":1485083874000},{"_id":"themes/pure/source/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1485083874000},{"_id":"source/_posts/windowsPE系统制作/zhizuo.png","hash":"6407496fc53a4af4202d1f89cf085f14fbe89886","modified":1490932942680},{"_id":"source/_posts/windows系统安装/安装语言.png","hash":"08f38d1f66a3bf2438e4aa12c06fef79ff014392","modified":1490930428384},{"_id":"themes/pure/source/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1485083874000},{"_id":"themes/pure/source/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1485083874000},{"_id":"source/img/about-bg.jpg","hash":"20962523d5eb9084b8bea72051037c304d603379","modified":1490687410475},{"_id":"source/_posts/windows系统安装/引导.png","hash":"13a5c1aa292afef9ae235a7e75b6d5e9e42e0304","modified":1490930358618},{"_id":"themes/pure/source/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1485083874000},{"_id":"source/_posts/windows系统安装/安装完成.png","hash":"1b354cfa2a158909872110831590ae1056808bf2","modified":1490930611920},{"_id":"themes/pure/source/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1485083874000},{"_id":"source/_posts/windows系统安装/选择分区.png","hash":"22828b087f4a49a6eba8a8abe767ddfdadcd0f32","modified":1490930457016},{"_id":"source/_posts/windowsPE系统制作/view.png","hash":"89660dde4a30990bf86e0997dbca4f2f764052b3","modified":1490932989282},{"_id":"themes/pure/source/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1485083874000},{"_id":"source/img/avatar.png","hash":"0e761214a345c7e02a34c23132f2a47108be2d50","modified":1490688466970},{"_id":"source/img/tag-bg.jpg","hash":"d992a00393a7156bc29e4f4f8fd38f4cc0886ea8","modified":1490689123537},{"_id":"public/404.html","hash":"2ad06a23c3f16a0cd3af4b4892648e8b5af31941","modified":1492771422210},{"_id":"public/i_dont_wanna_use_default_archives/index.html","hash":"954ee476dc206cd7c7ad2beeaa31bae59c48865d","modified":1492771422455},{"_id":"public/i_dont_wanna_use_default_archives/page/2/index.html","hash":"e4b8aa24af4d283256dae4e252da57799725c340","modified":1492771422584},{"_id":"public/i_dont_wanna_use_default_archives/2015/index.html","hash":"f759e9a5d4f2e27d450e0337dfed8538d9fcf839","modified":1492771422584},{"_id":"public/i_dont_wanna_use_default_archives/2015/12/index.html","hash":"a4978141204be9103ec428ad5e2fd9e5f96788d1","modified":1492771422584},{"_id":"public/i_dont_wanna_use_default_archives/page/4/index.html","hash":"66ba0df3ee4ae5a594f76e4e15d084203a12e85f","modified":1492771422583},{"_id":"public/i_dont_wanna_use_default_archives/page/3/index.html","hash":"40e4818cf9b05570783dd3dabf501033db90e37d","modified":1492771422567},{"_id":"public/i_dont_wanna_use_default_archives/page/5/index.html","hash":"514244e1cd70fa8b355d7192af8ffd7a9050a245","modified":1492771422584},{"_id":"public/i_dont_wanna_use_default_archives/2016/index.html","hash":"f9d95b2a0b5e9296a005254f2152d1109b8571c0","modified":1492771422595},{"_id":"public/i_dont_wanna_use_default_archives/2016/page/2/index.html","hash":"8f020ef123686e406266da0cea2239dfcb0ae941","modified":1492771422595},{"_id":"public/i_dont_wanna_use_default_archives/2016/08/index.html","hash":"e0adb409e3b2333774ee4ad3926b45d0ed94f99d","modified":1492771422595},{"_id":"public/i_dont_wanna_use_default_archives/2016/06/index.html","hash":"565db2856f68ce01c2090662fe0cc2fceaa71b33","modified":1492771422595},{"_id":"public/i_dont_wanna_use_default_archives/2016/10/index.html","hash":"433c87f93bf5ca8b40f80042dbe2383b256dc4fa","modified":1492771422595},{"_id":"public/i_dont_wanna_use_default_archives/2016/09/index.html","hash":"95f1a8eb0f8c10d4ed9ce73636d70a3fe64d4626","modified":1492771422595},{"_id":"public/archives/index.html","hash":"f867fdb0975bbdd85bdb35c929ee720d6725cfdf","modified":1492771422584},{"_id":"public/2017/04/11/Android 通用流行框架简介/index.html","hash":"a632618a66d89e45a73b0399eecc488be4d6ada1","modified":1492771422584},{"_id":"public/2017/04/11/GitHub-IOS-Libraries-Top-100-简介/index.html","hash":"423ac18acca576cddb2ebccb7089d85a01dddf79","modified":1492771422585},{"_id":"public/2017/04/11/Android动态服务SPI的实现/index.html","hash":"8b37f9837e0cd7efaa03e3af305912c7397f3359","modified":1492771422585},{"_id":"public/2017/04/07/Linux下adb的使用及adb devices no permissions问题的解决/index.html","hash":"dd8d13958c9ed5ac87ede04767d643070ff1436d","modified":1492771422585},{"_id":"public/2017/03/27/Android学习笔记第五篇--网络连接与云服务/index.html","hash":"b5d46ac79a9c99109935c731c2d0e049b17b9dec","modified":1492771422585},{"_id":"public/2017/03/27/Android开源控件搜集--TextView/index.html","hash":"45cd1595a08bc8f162612a1072bf921a898b8b76","modified":1492771422585},{"_id":"public/2017/04/11/GitHub-Android-Libraries-Top-100-简介 - 副本/index.html","hash":"c080363aa23622b186ce313740093cce5b74296c","modified":1492771422584},{"_id":"public/2017/03/27/第二篇、Android分享操作/index.html","hash":"9360bcdfcb964cbfa9508041e0e2af394886c6fb","modified":1492771422585},{"_id":"public/2017/03/27/Android开源控件搜集--ProgressBar/index.html","hash":"6b74ed946621e1f6166a56b80631351eb8ea39e9","modified":1492771422585},{"_id":"public/2017/03/27/第一篇、Android入门基础/index.html","hash":"38c6857d95a971d9aadfc09434577b5ce9e524ee","modified":1492771422585},{"_id":"public/tags/index.html","hash":"a6846ec54a8d7c2efb4f16b8720f491ff9112e01","modified":1492771422600},{"_id":"public/2017/03/27/第四篇、Android图像与动画/index.html","hash":"847b51c839453dc1d4b8a00c43a904759110c32e","modified":1492771422585},{"_id":"public/2017/03/27/第三篇、Android多媒体/index.html","hash":"ef3b6149b11664630542bf6eb98d2dc2e0f5e245","modified":1492771422585},{"_id":"public/2017/03/27/Android开源控件搜集--Button/index.html","hash":"fe1473ad3455562dd0a4440934596f1ac6d01b5d","modified":1492771422585},{"_id":"public/2017/03/21/Hexo学习笔记/index.html","hash":"a58e5b6c8f0b86381beb1f0562cc10227963373a","modified":1492771422586},{"_id":"public/2017/03/02/Github上fork同步/index.html","hash":"c825d08b63069fcd939b7a85d1dc203d4d3fbf16","modified":1492771422586},{"_id":"public/2017/03/27/hello-world/index.html","hash":"c41d773c2486949ad89fb10e8df605fe36ad551f","modified":1492771422586},{"_id":"public/2017/03/21/图片缓存LruCache和DiskLruCache使用/index.html","hash":"6de8ec2b0ed71cbb35aaf3c72c3925c29be7066a","modified":1492771422586},{"_id":"public/2017/04/10/Android系统源码编译-unsupported-reloc-43-和-make-update-api问题/index.html","hash":"4499478f3880431107d309fcfeb2b5b7718a5109","modified":1492771422586},{"_id":"public/2017/01/22/AndroidStudio使用CMake编译jni的C-C++文件/index.html","hash":"0451aeb24e4b17d2e8982d8f514453b0cfe23cbe","modified":1492771422586},{"_id":"public/2017/02/22/Execution failed for task/index.html","hash":"cd642d70c5caed1d1505d78aac9340484ed8090b","modified":1492771422586},{"_id":"public/2017/01/11/RK3288爬坑笔记/index.html","hash":"3256a3ae2633a885a8c8a3e5df942ee2e2a6960a","modified":1492771422586},{"_id":"public/2016/12/30/UML类图学习笔记/index.html","hash":"d0327c20981983f6b34027992d768c461ae4df6a","modified":1492771422586},{"_id":"public/2017/01/21/xUtils3简要说明/index.html","hash":"9c40d0136bc7210a333ea5b8e5284e295b018873","modified":1492771422586},{"_id":"public/2016/12/20/C++学习笔记/index.html","hash":"48c0ee4446bdf597061fe81b746e41142e06f57d","modified":1492771422587},{"_id":"public/2017/01/09/Linux出现require CD-ROM问题/index.html","hash":"5868ab8d5561ce4b2b84dc927540f9f6aafa220b","modified":1492771422586},{"_id":"public/2016/12/19/C语言学习笔记--基础语法四/index.html","hash":"9c77b703f3310471aff62673cf95f9f4e25e3e0c","modified":1492771422587},{"_id":"public/2016/12/18/C语言学习笔记--基础语法三/index.html","hash":"5d83437aab74fa9b4e969ef0bbd538060ff26e7d","modified":1492771422587},{"_id":"public/2016/12/17/C语言学习笔记--基础语法二/index.html","hash":"50dbcd18bee3e1790847eb77c8ebe79e1765ea09","modified":1492771422587},{"_id":"public/2016/11/21/正则表达式学习笔记/index.html","hash":"e93c66218523a1d668e139e7e7355cd1008365c1","modified":1492771422587},{"_id":"public/2016/12/15/C语言学习笔记--基础语法一/index.html","hash":"d08233043c1281c16ceedbc370ff6c1cb4839f36","modified":1492771422587},{"_id":"public/2016/11/03/Centos网络设置/index.html","hash":"3fe44678589d0e5c9ce2115b57c090415d4b92d6","modified":1492771422588},{"_id":"public/2016/11/18/Shell学习笔记/index.html","hash":"988531f94fdda51a8a1df017e4b81ff006571396","modified":1492771422587},{"_id":"public/2016/10/27/Markdown语法简要/index.html","hash":"e37bae7f0a65f31088bb3630e7aa098ebb0962cb","modified":1492771422588},{"_id":"public/2016/11/03/Python学习笔记/index.html","hash":"2a7efd6077f18b066cdbb538d9f67647296c7da8","modified":1492771422588},{"_id":"public/2016/11/18/Git学习笔记/index.html","hash":"2c976ef6844b33c2481867af51fc8bb4252d4d5c","modified":1492771422588},{"_id":"public/2016/09/26/Markdown基本语法/index.html","hash":"c946fae51fec190c760549d03bd3fdd58b179eb4","modified":1492771422588},{"_id":"public/2016/10/24/Linux桌面版安装及开发环境配置/index.html","hash":"4f811556cb9787657025f1a04f8a1e603264bd7d","modified":1492771422589},{"_id":"public/2016/08/15/局域网文件与打印共享/index.html","hash":"c6b9e6b9ef459fbb7815dc90d2f4b1bc517711f3","modified":1492771422588},{"_id":"public/2016/08/15/VMtools安装与虚拟机文件共享/index.html","hash":"967555723085ba04e7ebda0753fa2b03e6dde65a","modified":1492771422589},{"_id":"public/2015/12/06/windowsPE系统制作/index.html","hash":"d1e220db2af97dab35f67c5bb7636a293501e780","modified":1492771422589},{"_id":"public/2015/12/06/windows系统安装/index.html","hash":"c925593498b87d12b43dea24ff596789d153a2b1","modified":1492771422589},{"_id":"public/2016/11/17/斐波那契数列/index.html","hash":"e005a7ef6d89744f935a52f5f48b77c23d0ea29c","modified":1492771422588},{"_id":"public/2016/08/22/Linux中文相关设置/index.html","hash":"429861dfd9bd2e8872dbde17b47e31b80c5649a4","modified":1492771422588},{"_id":"public/2016/06/05/个人开发工具集/index.html","hash":"f34fcb4e5a4e484dbdb64fd10351e048dd53ff79","modified":1492771422589},{"_id":"public/about/index.html","hash":"747bfc4ef3de64db93b93dd6620ccaf7bf34db86","modified":1492771422589},{"_id":"public/i_dont_wanna_use_default_archives/2016/11/index.html","hash":"6b7ef36a1f947ef87ff0e80d4b8cb6787e4b1158","modified":1492771422595},{"_id":"public/i_dont_wanna_use_default_archives/2017/index.html","hash":"e86cfbedfba46629b0c318307455f2a64dc85f2c","modified":1492771422595},{"_id":"public/i_dont_wanna_use_default_archives/2017/01/index.html","hash":"5a6af7faad7d41c60de06f07f5aa13818489ad27","modified":1492771422595},{"_id":"public/i_dont_wanna_use_default_archives/2016/12/index.html","hash":"cc756f94e076626470a4d5417200995d20d9ff72","modified":1492771422595},{"_id":"public/i_dont_wanna_use_default_archives/2017/page/2/index.html","hash":"d4092254080fe2b359cdd6cd0240cc63d82f9b62","modified":1492771422595},{"_id":"public/i_dont_wanna_use_default_archives/2017/page/3/index.html","hash":"82be3981721b20fb85578707e78382749218a505","modified":1492771422595},{"_id":"public/i_dont_wanna_use_default_archives/2017/02/index.html","hash":"42eea556c1fb7b91bad2f63e5bd8f71dcf7a36e6","modified":1492771422595},{"_id":"public/i_dont_wanna_use_default_archives/2017/04/index.html","hash":"15b002eca86897024b6e4821566d9d715cae8c98","modified":1492771422597},{"_id":"public/i_dont_wanna_use_default_archives/2017/03/page/2/index.html","hash":"093c7eed8c32fec6cf8dbc8c25e55d63a52f90c0","modified":1492771422597},{"_id":"public/i_dont_wanna_use_default_archives/2017/03/index.html","hash":"288222ceb14da51d583edc5bffdbd6e11fd97a42","modified":1492771422596},{"_id":"public/categories/Android/page/2/index.html","hash":"98d69b06304cbb59be10645631a73244b91c5c4b","modified":1492771422597},{"_id":"public/categories/Android/index.html","hash":"2f0ab3dd688b75150af14c39f99fa52b493cee33","modified":1492771422597},{"_id":"public/categories/编程相关/index.html","hash":"d93eaa71b6d7697c35d01ad61236857183ba6906","modified":1492771422598},{"_id":"public/categories/编程相关/page/2/index.html","hash":"f0e0748eedb43e475348c0b7ecafa0b76f15e317","modified":1492771422598},{"_id":"public/categories/IOS/index.html","hash":"b0b07aa25b3cb2e68ab9c76c780faf6a4e6577ca","modified":1492771422598},{"_id":"public/categories/Linux/index.html","hash":"cbc93e08e7107d8124c614c1c918f2584da7b25c","modified":1492771422598},{"_id":"public/categories/Windows/index.html","hash":"db61fec4e063d4275b11074fb85da17d297e4474","modified":1492771422598},{"_id":"public/categories/网络相关/index.html","hash":"d47a84312bc7f1dd55bac50215ec2f9e7e8ccc12","modified":1492771422598},{"_id":"public/categories/Tools/index.html","hash":"4e8725bcd4cb919f94c8e1ac4bc3c3674958c82f","modified":1492771422598},{"_id":"public/categories/系统相关/index.html","hash":"b1e39887397821c33be2dedf886248e117e11393","modified":1492771422598},{"_id":"public/categories/算法相关/index.html","hash":"19e6b0ad9da4f83906479fc27aceda77abaf0f3f","modified":1492771422598},{"_id":"public/tags/Android/index.html","hash":"df60a2a7ef470b808294a0d9f95d663fe3cf90fb","modified":1492771422598},{"_id":"public/tags/框架/index.html","hash":"b542cd60947d5dee0297bda5ab3c213a5a695a2d","modified":1492771422598},{"_id":"public/tags/Android/page/2/index.html","hash":"03ff007c4941a4b5d3000ca2791c839aa438159b","modified":1492771422598},{"_id":"public/tags/Android-Studio/index.html","hash":"5a75c4d6d6dc22ba87de6b50e4e133be9d5f8dc8","modified":1492771422598},{"_id":"public/tags/C/index.html","hash":"50289cdfdc644a270d278a2a951b3d1dfe388915","modified":1492771422598},{"_id":"public/tags/JNI/index.html","hash":"81fbb747f241e6d3b2672229f4a52b88a6fee9df","modified":1492771422598},{"_id":"public/tags/make/index.html","hash":"6d37548b7f4417a0f46a26d70fd1eaef98ffd6a7","modified":1492771422598},{"_id":"public/tags/Linux/index.html","hash":"fdd4c033dff3b52fca6046ab1181b81184e92a18","modified":1492771422598},{"_id":"public/tags/Service/index.html","hash":"6164d2647011b27fbe6a669444e766847eebd904","modified":1492771422598},{"_id":"public/tags/Centos/index.html","hash":"313fd612410acb94c9245e5d53d8dc608e2d0f8d","modified":1492771422598},{"_id":"public/tags/网络设置/index.html","hash":"1dc00f8bb213903895110a3aff3fcfa517463b0f","modified":1492771422598},{"_id":"public/tags/Git/index.html","hash":"2061dfe5125d8b44ef4022d0ed7bc8f58e4765a3","modified":1492771422598},{"_id":"public/tags/博客/index.html","hash":"e5ba15c52c7d6eb98770fe40ba2f5be8cf82f1f0","modified":1492771422599},{"_id":"public/tags/github/index.html","hash":"122ae8dfb672a7e0c1486b090a62bae2b7623ef1","modified":1492771422598},{"_id":"public/tags/IOS/index.html","hash":"000dbb4b150dc6d9ea47593dfa299a25190a5887","modified":1492771422598},{"_id":"public/tags/Hexo/index.html","hash":"131a648d976c695d8dc5004292b17411fa7bf611","modified":1492771422599},{"_id":"public/tags/adb/index.html","hash":"8afe4aaca2890723d48b8fb6e32f5921faa0d69c","modified":1492771422599},{"_id":"public/tags/中文/index.html","hash":"260c690240864f217c1704160ad78d3f3090a68d","modified":1492771422599},{"_id":"public/tags/CD-ROM/index.html","hash":"edaf3606a3b895ba4cf5a99c6b1544b9e6ccff9d","modified":1492771422599},{"_id":"public/tags/开发环境/index.html","hash":"fc6b149aa755dd5f85657d7b6708d5c5dcf542cd","modified":1492771422599},{"_id":"public/tags/Markdown/index.html","hash":"a7602de6bf60b1e4c62463bc6b29e6e9a10dccef","modified":1492771422599},{"_id":"public/tags/xUtils/index.html","hash":"06314f6fac442b3487bb5efd3b79cb9685eaee83","modified":1492771422599},{"_id":"public/tags/RK3288/index.html","hash":"8f03b0b1c7395151fa7d4f9b3545eec8a7b4e3fa","modified":1492771422599},{"_id":"public/tags/UML/index.html","hash":"9fade5c68ff648d767d79f263fd1d032f4f229f2","modified":1492771422599},{"_id":"public/tags/vmtools/index.html","hash":"a60708240e4af4ead45023fa270aa21dafa4fe1b","modified":1492771422599},{"_id":"public/tags/Windows/index.html","hash":"7b47d57fd4a2811317e6f125dc03f300055a2cd9","modified":1492771422599},{"_id":"public/tags/虚拟机/index.html","hash":"063602f93feca03a0bd8c39cbae7a85726f2b8d1","modified":1492771422599},{"_id":"public/tags/斐波那契/index.html","hash":"053bc10e050a9d98bc258a7056a5d5e28e1d517b","modified":1492771422599},{"_id":"public/tags/兔子/index.html","hash":"2e55e7213b0002b7b9f28834f9b0eec81bd06aa9","modified":1492771422599},{"_id":"public/tags/算法/index.html","hash":"50545c1c7cc60688159fa888dbad338bd58ae7fd","modified":1492771422599},{"_id":"public/tags/Lrucache/index.html","hash":"c8f82e4276f7390d7ea855f94cbf508faee1e3c4","modified":1492771422599},{"_id":"public/tags/正则表达式/index.html","hash":"e6f08a592d1d09ab7e63b4b446357ad220ab0c50","modified":1492771422599},{"_id":"public/tags/regular/index.html","hash":"64966e0e9e112e8e78f0528a22c7c336a326b256","modified":1492771422599},{"_id":"public/tags/文件共享/index.html","hash":"c5f8d22fe69481a91c44d045ccc5f0907d829a9b","modified":1492771422600},{"_id":"public/tags/局域网/index.html","hash":"922aae7f43e05a6ebdd84423758ef664f4b149c2","modified":1492771422599},{"_id":"public/2017/04/18/经典欧美动画电影/index.html","hash":"3ae3fd4c688222274c8d5983aecf1b9e6720f809","modified":1492771422585},{"_id":"public/index.html","hash":"8a281b1e1e5bbfdfb9aad39c489fd039271366ed","modified":1492771422600},{"_id":"public/page/2/index.html","hash":"0b8ec12d920fef3853d6f9b736917b1f830caac2","modified":1492771422600},{"_id":"public/page/3/index.html","hash":"5489178be0e40d1eaa0ba14800eafe1436840051","modified":1492771422600},{"_id":"public/page/4/index.html","hash":"01324a9f08b244738b8e4b398e61ec15daff2e1d","modified":1492771422600},{"_id":"public/page/5/index.html","hash":"d8b328f763b616968b76d2ca4204b6072474d734","modified":1492771422600},{"_id":"public/categories/休闲/index.html","hash":"bb4e2611812c70b620c54ece3c0b713a4111ddb8","modified":1492771422598},{"_id":"public/tags/电影/index.html","hash":"fb45f2ec335315a1e754a52fc459da9a309c1ca8","modified":1492771422599},{"_id":"public/tags/动画/index.html","hash":"ec61a7f72940e2ed23c5ce40a00ad7888eac478e","modified":1492771422599},{"_id":"public/img/avatar.jpg","hash":"0bcf9b357a386069eb7b48eec2f3b154d6df360f","modified":1492510015215},{"_id":"public/img/home-bg.jpg","hash":"06a9131503e86f23ce2d8e9e188d30279dd5a96f","modified":1492510015215},{"_id":"public/img/icon_wechat.png","hash":"b30f5f7b7ab5c74ced0cc6f1ff56558e4e3156fc","modified":1492510015215},{"_id":"public/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1492510015216},{"_id":"public/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1492510015216},{"_id":"public/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1492510015216},{"_id":"public/fonts/1.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1492510015216},{"_id":"public/2016/08/15/局域网文件与打印共享/net.png","hash":"66a70dd877e4a68e9079295f73b338b361983cf8","modified":1492510015217},{"_id":"public/2017/01/22/AndroidStudio使用CMake编译jni的C-C++文件/config.jpg","hash":"22400dff514f48e94acfbc4c70ccf51f54040502","modified":1492510015217},{"_id":"public/2016/11/03/Centos网络设置/p1.png","hash":"08b4a5fdd4e7c6e0a0a9220238ef0b91f9817059","modified":1492510015217},{"_id":"public/2016/11/03/Centos网络设置/p2.jpg","hash":"258d8a4bf985b5d3e4809674edd04d7b8f28ecdc","modified":1492510015217},{"_id":"public/2017/01/22/AndroidStudio使用CMake编译jni的C-C++文件/create.jpg","hash":"5769e115e23fa2f6e6acfc53ff4ec005023349c9","modified":1492510015217},{"_id":"public/2017/03/02/Github上fork同步/clone.png","hash":"0eeffff1bdc66e4a1045c4df1a6a5758123cf2fa","modified":1492510015217},{"_id":"public/2017/03/02/Github上fork同步/update.png","hash":"16f16e097ff52fa51997c99c3276dec7a04e63c7","modified":1492510015217},{"_id":"public/2015/12/06/windowsPE系统制作/pe.png","hash":"62868b634b9e492054affd35509ce185290fc557","modified":1492510015217},{"_id":"public/2015/12/06/windowsPE系统制作/upan.png","hash":"d115eb40bd3f3ce2e3d60e5a0044c7d9631fcf86","modified":1492510015217},{"_id":"public/2015/12/06/windows系统安装/onekey.png","hash":"96c026a1ef8cc24fd4715bc70cd6df58714dd42d","modified":1492510015217},{"_id":"public/2015/12/06/windows系统安装/pe.png","hash":"1b027729407e3d24e50cf74c2771dc73594dbe3a","modified":1492510015218},{"_id":"public/2015/12/06/windows系统安装/刻录.png","hash":"5de1c7ed4f91e0e130e7d7d629727fb9249ca558","modified":1492510015218},{"_id":"public/2015/12/06/windows系统安装/安装.png","hash":"de53f97a58d8a24d48d0188cf17211c8e5959c25","modified":1492510015218},{"_id":"public/2015/12/06/windows系统安装/校验.png","hash":"fb5ea8898ed471dd2b467d9eb893c2978a2bfc19","modified":1492510015218},{"_id":"public/2015/12/06/windows系统安装/镜像.png","hash":"c47b57c613aa8dad1be97fc87a741ee4fe0b9643","modified":1492510015218},{"_id":"public/2015/12/06/windows系统安装/镜像2.png","hash":"d109394821ca430e282fec12f7ff3c31b1580eec","modified":1492510015218},{"_id":"public/2017/04/11/Android动态服务SPI的实现/spi.png","hash":"2ca176325e26c92f4ec9c85c287edd162a401c22","modified":1492510015218},{"_id":"public/2017/03/27/第四篇、Android图像与动画/ccw-square.png","hash":"fa1e037486d69915f97393ffedf085d19f3714d3","modified":1492510015218},{"_id":"public/2017/03/27/第四篇、Android图像与动画/ogl-triangle-touch.png","hash":"40f7278e4d4c8c2d9cd8ead21c093e55080c9532","modified":1492510015218},{"_id":"public/2017/03/27/第四篇、Android图像与动画/ogl-triangle.png","hash":"294a33bdc1c360199d8c5f5f56286395309b46c7","modified":1492510015218},{"_id":"public/2017/03/27/第四篇、Android图像与动画/ogl-triangle-projected.png","hash":"654ec2464db38f25bd49dd50999117355358e13b","modified":1492510015218},{"_id":"public/2017/04/11/Android 通用流行框架简介/Android通用流行框架.png","hash":"e592841621610c7509ade59a26ccd36c19172960","modified":1492510015218},{"_id":"public/img/favicon.ico","hash":"8d4787473ec83114b7c2ea1ef5686ffd996c1a59","modified":1492510017542},{"_id":"public/img/favicon_1.ico","hash":"d9e1b4ecbbc3964d86cd36ab079cb1227a1d3074","modified":1492510017542},{"_id":"public/img/contact-bg.jpg","hash":"b1b891a515c31ba22bafc032a29dc6f2111e0b90","modified":1492510017544},{"_id":"public/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1492510017544},{"_id":"public/2015/12/06/windowsPE系统制作/zhizuo2.png","hash":"f86fd5b179c1a19258cfab2c27ef3114bc3f6a0b","modified":1492510017544},{"_id":"public/2015/12/06/windows系统安装/msdn.png","hash":"f45cf62180fd53489b09edacf90acf722e138b75","modified":1492510017544},{"_id":"public/2015/12/06/windows系统安装/ultralISO.png","hash":"e7ba6e18714a1a0df082b1878ae2648025bfaa27","modified":1492510017544},{"_id":"public/2015/12/06/windows系统安装/写入.png","hash":"6f0d5b02decb5babd7ff5a61753d0fafc6599e51","modified":1492510017545},{"_id":"public/2017/03/27/第一篇、Android入门基础/basic-lifecycle.png","hash":"6efc2f3fdc2dca6dc4b36ec2622506d5ea4764e4","modified":1492510017545},{"_id":"public/css/highlight.css","hash":"8bc5e670b028eda8097f58bdc85269c5124c2951","modified":1492510017555},{"_id":"public/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1492510017555},{"_id":"public/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1492510017555},{"_id":"public/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1492510017555},{"_id":"public/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1492510017555},{"_id":"public/css/hux-blog.css","hash":"c1b0a32ad8075ac09d99fb4d64a9fbc84163abf8","modified":1492510017555},{"_id":"public/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1492510017555},{"_id":"public/css/bootstrap.min.css","hash":"973e37a8502921d56bc02bb55321f45b072b6f71","modified":1492510017555},{"_id":"public/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1492510017555},{"_id":"public/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1492510017555},{"_id":"public/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1492510017555},{"_id":"public/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1492510017555},{"_id":"public/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1492510017555},{"_id":"public/img/404-bg.jpg","hash":"327d2ef9c17768cb6df8b41dd265765162cfa3e2","modified":1492510017556},{"_id":"public/2015/12/06/windows系统安装/选择分区.png","hash":"22828b087f4a49a6eba8a8abe767ddfdadcd0f32","modified":1492510017556},{"_id":"public/2015/12/06/windowsPE系统制作/zhizuo.png","hash":"6407496fc53a4af4202d1f89cf085f14fbe89886","modified":1492510017556},{"_id":"public/2015/12/06/windows系统安装/安装语言.png","hash":"08f38d1f66a3bf2438e4aa12c06fef79ff014392","modified":1492510017556},{"_id":"public/2015/12/06/windows系统安装/引导.png","hash":"13a5c1aa292afef9ae235a7e75b6d5e9e42e0304","modified":1492510017556},{"_id":"public/2015/12/06/windows系统安装/安装完成.png","hash":"1b354cfa2a158909872110831590ae1056808bf2","modified":1492510017565},{"_id":"public/img/about-bg.jpg","hash":"20962523d5eb9084b8bea72051037c304d603379","modified":1492510017573},{"_id":"public/2015/12/06/windowsPE系统制作/view.png","hash":"89660dde4a30990bf86e0997dbca4f2f764052b3","modified":1492510017575},{"_id":"public/img/avatar.png","hash":"0e761214a345c7e02a34c23132f2a47108be2d50","modified":1492510017576},{"_id":"public/img/tag-bg.jpg","hash":"d992a00393a7156bc29e4f4f8fd38f4cc0886ea8","modified":1492510017579},{"_id":"source/CNAME","hash":"2228f98c8f8536e25d99a7eef66b159134bc736b","modified":1492680330594},{"_id":"public/CNAME","hash":"2228f98c8f8536e25d99a7eef66b159134bc736b","modified":1492680353512}],"Category":[{"name":"Android","_id":"cj1ndxcbx000588ow1adzii6d"},{"name":"编程相关","_id":"cj1ndxcca000b88ow1hon3loy"},{"name":"Linux","_id":"cj1ndxcco000w88owwo5ktt9i"},{"name":"IOS","_id":"cj1ndxcd2001g88owol87gczf"},{"name":"网络相关","_id":"cj1ndxcd8001p88ow0fyt80nj"},{"name":"系统相关","_id":"cj1ndxcdq002j88owogg718tw"},{"name":"Windows","_id":"cj1ndxcdt002s88owlzd9235t"},{"name":"Tools","_id":"cj1ndxce0003a88owvukrtg7h"},{"name":"算法相关","_id":"cj1ndxce2003h88oww8tfyg3n"},{"name":"休闲","_id":"cj1ndxce9003y88owxkhpi2ks"}],"Data":[],"Page":[{"layout":"404","description":"黄色的树林里分出两条路，而你却选择了人际更少的一条，从此决定了你一生的道路......","header-img":"img/404-bg.jpg","_content":"","source":"404.md","raw":"---\nlayout: 404\ndescription: \"黄色的树林里分出两条路，而你却选择了人际更少的一条，从此决定了你一生的道路......\"\nheader-img: \"img/404-bg.jpg\"\n---\n","date":"2017-03-31T06:24:23.134Z","updated":"2017-03-28T08:22:39.650Z","path":"404.html","title":"","comments":1,"_id":"cj1ndxca8000088owtmcik6dg","content":"","excerpt":"","more":""},{"layout":"about","title":"About Author","date":"2017-03-27T08:25:27.000Z","description":"冰路梦,梦境你我心灵...","header-img":"img/about-bg.jpg","comments":1,"_content":"\n冰路梦\n\n> 用冰雪晶莹的心灵，感悟人生，寻找那一片属于自己的梦......\n\n\n\n\n\n","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"About Author\"\ndate: 2017-03-27 16:25:27\ndescription: \"冰路梦,梦境你我心灵...\"\nheader-img: \"img/about-bg.jpg\"\ncomments: true\n---\n\n冰路梦\n\n> 用冰雪晶莹的心灵，感悟人生，寻找那一片属于自己的梦......\n\n\n\n\n\n","updated":"2017-03-29T02:54:10.425Z","path":"about/index.html","_id":"cj1ndxcbr000288owjm57wlv4","content":"<p>冰路梦</p>\n<blockquote>\n<p>用冰雪晶莹的心灵，感悟人生，寻找那一片属于自己的梦……</p>\n</blockquote>\n","excerpt":"","more":"<p>冰路梦</p>\n<blockquote>\n<p>用冰雪晶莹的心灵，感悟人生，寻找那一片属于自己的梦……</p>\n</blockquote>\n"},{"layout":"archives","title":"Archives","description":"思维的空间，需要归纳梳理","header-img":"img/tag-bg.jpg","_content":"","source":"archives/index.md","raw":"---\nlayout: \"archives\"\ntitle: \"Archives\"\ndescription: \"思维的空间，需要归纳梳理\"\nheader-img: \"img/tag-bg.jpg\"\n---\n","date":"2017-03-31T06:24:23.134Z","updated":"2017-03-28T08:23:07.977Z","path":"archives/index.html","comments":1,"_id":"cj1ndxcbt000488owg4auchsb","content":"","excerpt":"","more":""},{"layout":"tags","title":"Tags","description":"Hey, this is Tags.","header-img":"img/tag-bg.jpg","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"Tags\"\ndescription: \"Hey, this is Tags.\"\nheader-img: \"img/tag-bg.jpg\"\n---\n","date":"2017-03-31T06:24:23.136Z","updated":"2017-01-22T11:17:54.000Z","path":"tags/index.html","comments":1,"_id":"cj1ndxcc2000888owgedzcqbn","content":"","excerpt":"","more":""}],"Post":[{"title":"Android 通用流行框架简介","date":"2017-04-11T09:59:25.000Z","_content":"\n##  Android 通用流行框架简介\n\n![Android 框架](./Android 通用流行框架简介/Android通用流行框架.png)\n\n### 缓存\n\n| 名称           | 描述               |\n| ------------ | ---------------- |\n| DiskLruCache | Java实现基于LRU的磁盘缓存 |\n\n### 图片加载\n\n| 名称                             | 描述                 |\n| ------------------------------ | ------------------ |\n| Android Universal Image Loader | 一个强大的加载，缓存，展示图片的库  |\n| Picasso                        | 一个强大的图片下载与缓存的库     |\n| Fresco                         | 一个用于管理图像和他们使用的内存的库 |\n| Glide                          | 一个图片加载和缓存的库        |\n\n### 图像处理\n\n| 名称                      | 描述                   |\n| ----------------------- | -------------------- |\n| Picasso-transformations | 一个为Picasso提供多种图片变换的库 |\n| Glide-transformations   | 一个为Glide提供多种图片变换的库   |\n| Android-gpuimage        | 基于OpenGL的Android过滤器  |\n\n### 网络请求\n\n| 名称                 | 描述                                       |\n| ------------------ | ---------------------------------------- |\n| Android Async HTTP | Android异步HTTP库                           |\n| AndroidAsync       | 异步Socket，HTTP(客户端+服务器)，WebSocket，和socket.io库。基于NIO而不是线程。 |\n| OkHttp             | 一个Http与Http/2的客户端                        |\n| Retrofit           | 类型安全的Http客户端                             |\n| Volley             | Google推出的Android异步网络请求框架和图片加载框架          |\n\n### 网络解析\n\n| 名称        | 描述                                       |\n| --------- | ---------------------------------------- |\n| Gson      | 一个Java序列化/反序列化库，可以将JSON和java对象互相转换       |\n| Jackson   | Jackson可以轻松地将Java对象转换成json对象和xml文档，同样也可以将json、xml转换成Java对象 |\n| Fastjson  | Java上一个快速的JSON解析器/生成器                    |\n| HtmlPaser | 一种用来解析单个独立html或嵌套html的方式                 |\n| Jsoup     | 一个以最好的DOM，CSS和jQuery解析html的库             |\n\n### 数据库\n| 名称            | 描述                                      |\n| ------------- | --------------------------------------- |\n| OrmLite       | JDBC和Android的轻量级ORM java包               |\n| Sugar         | 用超级简单的方法处理Android数据库                    |\n| GreenDAO      | 一种轻快地将对象映射到SQLite数据库的ORM解决方案            |\n| ActiveAndroid | 以活动记录方式为Android SQLite提供持久化             |\n| SQLBrite      | SQLiteOpenHelper 和ContentResolver的轻量级包装 |\n| Realm         | 移动数据库：一个SQLite和ORM的替换品                  |\n\n### 注入工具\n\n| 名称                | 描述                       |\n| ----------------- | ------------------------ |\n| ButterKnife       | 将Android视图和回调方法绑定到字段和方法上 |\n| Dagger2           | 一个Android和java快速依赖注射器。   |\n| AndroidAnotations | 快速安卓开发。易于维护              |\n| RoboGuice         | Android平台的Google Guice   |\n\n### 图表\n\n| 名称             | 描述                   |\n| -------------- | -------------------- |\n| WilliamChart   | 创建图表的Android库        |\n| HelloCharts    | 兼容到API8的Android图表库   |\n| MPAndroidChart | 一个强大的Android图表视图/图形库 |\n\n### 事务\n\n| 名称                         | 描述                      |\n| -------------------------- | ----------------------- |\n| Tape                       | 一个轻快的，事务性的，基于文件的FIFO的库  |\n| Android Priority Job Queue | 一个专门为Android轻松调度任务的工作队列 |\n\n### 事件总线\n| 名称       | 描述                           |\n| -------- | ---------------------------- |\n| EventBus | 安卓优化的事件总线，简化了活动、片段、线程、服务等的通信 |\n| Otto     | 一个基于Guava的增强的事件总线            |\n\n### 响应式编程\n\n| 名称          | 描述                                      |\n| ----------- | --------------------------------------- |\n| RxJava      | JVM上的响应式扩展                              |\n| RxJavaJoins | 为RxJava提供Joins操作                        |\n| RxAndroid   | Android上的响应式扩展，在RxJava基础上添加了Android线程调度 |\n| RxBinding   | 提供用RxJava绑定Android UI的API               |\n| Agera       | Android上的响应式编程                          |\n\n### 日志log\n\n| 名称     | 描述                   |\n| ------ | -------------------- |\n| Logger | 简单，漂亮，强大的Android日志工具 |\n| Hugo   | 在调试版本上注解的触发方法进行日志记录  |\n| Timber | 一个小的，可扩展的日志工具        |\n\n### 测试\n\n| 名称          | 描述                   |\n| ----------- | -------------------- |\n| Mockito     | Java编写的Mocking单元测试框架 |\n| Robotium    | Android UI 测试        |\n| Robolectric | Android单元测试框架        |\n\nAndroid自带很多测试工具：JUnit，Monkeyrunner，UiAutomator，Espresso等\n\n### 调试\n\n| 名称     | 描述                                   |\n| ------ | ------------------------------------ |\n| Stetho | 调试Android应用的桥梁，使得可以利用Chrome开发者工具进行调试 |\n\n### 内存\n\n| 名称         | 描述              |\n| ---------- | --------------- |\n| LeakCanary | 内存泄漏检测工具        |\n| ACRA       | Android应用程序崩溃报告 |","source":"_posts/Android 通用流行框架简介.md","raw":"---\ntitle: Android 通用流行框架简介\ndate: 2017-04-11 17:59:25\ntags:\n    - Android\n    - 框架\ncategories:\n    - Android\n---\n\n##  Android 通用流行框架简介\n\n![Android 框架](./Android 通用流行框架简介/Android通用流行框架.png)\n\n### 缓存\n\n| 名称           | 描述               |\n| ------------ | ---------------- |\n| DiskLruCache | Java实现基于LRU的磁盘缓存 |\n\n### 图片加载\n\n| 名称                             | 描述                 |\n| ------------------------------ | ------------------ |\n| Android Universal Image Loader | 一个强大的加载，缓存，展示图片的库  |\n| Picasso                        | 一个强大的图片下载与缓存的库     |\n| Fresco                         | 一个用于管理图像和他们使用的内存的库 |\n| Glide                          | 一个图片加载和缓存的库        |\n\n### 图像处理\n\n| 名称                      | 描述                   |\n| ----------------------- | -------------------- |\n| Picasso-transformations | 一个为Picasso提供多种图片变换的库 |\n| Glide-transformations   | 一个为Glide提供多种图片变换的库   |\n| Android-gpuimage        | 基于OpenGL的Android过滤器  |\n\n### 网络请求\n\n| 名称                 | 描述                                       |\n| ------------------ | ---------------------------------------- |\n| Android Async HTTP | Android异步HTTP库                           |\n| AndroidAsync       | 异步Socket，HTTP(客户端+服务器)，WebSocket，和socket.io库。基于NIO而不是线程。 |\n| OkHttp             | 一个Http与Http/2的客户端                        |\n| Retrofit           | 类型安全的Http客户端                             |\n| Volley             | Google推出的Android异步网络请求框架和图片加载框架          |\n\n### 网络解析\n\n| 名称        | 描述                                       |\n| --------- | ---------------------------------------- |\n| Gson      | 一个Java序列化/反序列化库，可以将JSON和java对象互相转换       |\n| Jackson   | Jackson可以轻松地将Java对象转换成json对象和xml文档，同样也可以将json、xml转换成Java对象 |\n| Fastjson  | Java上一个快速的JSON解析器/生成器                    |\n| HtmlPaser | 一种用来解析单个独立html或嵌套html的方式                 |\n| Jsoup     | 一个以最好的DOM，CSS和jQuery解析html的库             |\n\n### 数据库\n| 名称            | 描述                                      |\n| ------------- | --------------------------------------- |\n| OrmLite       | JDBC和Android的轻量级ORM java包               |\n| Sugar         | 用超级简单的方法处理Android数据库                    |\n| GreenDAO      | 一种轻快地将对象映射到SQLite数据库的ORM解决方案            |\n| ActiveAndroid | 以活动记录方式为Android SQLite提供持久化             |\n| SQLBrite      | SQLiteOpenHelper 和ContentResolver的轻量级包装 |\n| Realm         | 移动数据库：一个SQLite和ORM的替换品                  |\n\n### 注入工具\n\n| 名称                | 描述                       |\n| ----------------- | ------------------------ |\n| ButterKnife       | 将Android视图和回调方法绑定到字段和方法上 |\n| Dagger2           | 一个Android和java快速依赖注射器。   |\n| AndroidAnotations | 快速安卓开发。易于维护              |\n| RoboGuice         | Android平台的Google Guice   |\n\n### 图表\n\n| 名称             | 描述                   |\n| -------------- | -------------------- |\n| WilliamChart   | 创建图表的Android库        |\n| HelloCharts    | 兼容到API8的Android图表库   |\n| MPAndroidChart | 一个强大的Android图表视图/图形库 |\n\n### 事务\n\n| 名称                         | 描述                      |\n| -------------------------- | ----------------------- |\n| Tape                       | 一个轻快的，事务性的，基于文件的FIFO的库  |\n| Android Priority Job Queue | 一个专门为Android轻松调度任务的工作队列 |\n\n### 事件总线\n| 名称       | 描述                           |\n| -------- | ---------------------------- |\n| EventBus | 安卓优化的事件总线，简化了活动、片段、线程、服务等的通信 |\n| Otto     | 一个基于Guava的增强的事件总线            |\n\n### 响应式编程\n\n| 名称          | 描述                                      |\n| ----------- | --------------------------------------- |\n| RxJava      | JVM上的响应式扩展                              |\n| RxJavaJoins | 为RxJava提供Joins操作                        |\n| RxAndroid   | Android上的响应式扩展，在RxJava基础上添加了Android线程调度 |\n| RxBinding   | 提供用RxJava绑定Android UI的API               |\n| Agera       | Android上的响应式编程                          |\n\n### 日志log\n\n| 名称     | 描述                   |\n| ------ | -------------------- |\n| Logger | 简单，漂亮，强大的Android日志工具 |\n| Hugo   | 在调试版本上注解的触发方法进行日志记录  |\n| Timber | 一个小的，可扩展的日志工具        |\n\n### 测试\n\n| 名称          | 描述                   |\n| ----------- | -------------------- |\n| Mockito     | Java编写的Mocking单元测试框架 |\n| Robotium    | Android UI 测试        |\n| Robolectric | Android单元测试框架        |\n\nAndroid自带很多测试工具：JUnit，Monkeyrunner，UiAutomator，Espresso等\n\n### 调试\n\n| 名称     | 描述                                   |\n| ------ | ------------------------------------ |\n| Stetho | 调试Android应用的桥梁，使得可以利用Chrome开发者工具进行调试 |\n\n### 内存\n\n| 名称         | 描述              |\n| ---------- | --------------- |\n| LeakCanary | 内存泄漏检测工具        |\n| ACRA       | Android应用程序崩溃报告 |","slug":"Android 通用流行框架简介","published":1,"updated":"2017-04-12T02:41:21.087Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ndxcbl000188owv9tltkds","content":"<h2 id=\"Android-通用流行框架简介\"><a href=\"#Android-通用流行框架简介\" class=\"headerlink\" title=\"Android 通用流行框架简介\"></a>Android 通用流行框架简介</h2><p><img src=\"/2017/04/11/Android 通用流行框架简介/Android通用流行框架.png\" alt=\"Android 框架\"></p>\n<h3 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h3><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DiskLruCache</td>\n<td>Java实现基于LRU的磁盘缓存</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"图片加载\"><a href=\"#图片加载\" class=\"headerlink\" title=\"图片加载\"></a>图片加载</h3><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Android Universal Image Loader</td>\n<td>一个强大的加载，缓存，展示图片的库</td>\n</tr>\n<tr>\n<td>Picasso</td>\n<td>一个强大的图片下载与缓存的库</td>\n</tr>\n<tr>\n<td>Fresco</td>\n<td>一个用于管理图像和他们使用的内存的库</td>\n</tr>\n<tr>\n<td>Glide</td>\n<td>一个图片加载和缓存的库</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"图像处理\"><a href=\"#图像处理\" class=\"headerlink\" title=\"图像处理\"></a>图像处理</h3><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Picasso-transformations</td>\n<td>一个为Picasso提供多种图片变换的库</td>\n</tr>\n<tr>\n<td>Glide-transformations</td>\n<td>一个为Glide提供多种图片变换的库</td>\n</tr>\n<tr>\n<td>Android-gpuimage</td>\n<td>基于OpenGL的Android过滤器</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"网络请求\"><a href=\"#网络请求\" class=\"headerlink\" title=\"网络请求\"></a>网络请求</h3><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Android Async HTTP</td>\n<td>Android异步HTTP库</td>\n</tr>\n<tr>\n<td>AndroidAsync</td>\n<td>异步Socket，HTTP(客户端+服务器)，WebSocket，和socket.io库。基于NIO而不是线程。</td>\n</tr>\n<tr>\n<td>OkHttp</td>\n<td>一个Http与Http/2的客户端</td>\n</tr>\n<tr>\n<td>Retrofit</td>\n<td>类型安全的Http客户端</td>\n</tr>\n<tr>\n<td>Volley</td>\n<td>Google推出的Android异步网络请求框架和图片加载框架</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"网络解析\"><a href=\"#网络解析\" class=\"headerlink\" title=\"网络解析\"></a>网络解析</h3><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Gson</td>\n<td>一个Java序列化/反序列化库，可以将JSON和java对象互相转换</td>\n</tr>\n<tr>\n<td>Jackson</td>\n<td>Jackson可以轻松地将Java对象转换成json对象和xml文档，同样也可以将json、xml转换成Java对象</td>\n</tr>\n<tr>\n<td>Fastjson</td>\n<td>Java上一个快速的JSON解析器/生成器</td>\n</tr>\n<tr>\n<td>HtmlPaser</td>\n<td>一种用来解析单个独立html或嵌套html的方式</td>\n</tr>\n<tr>\n<td>Jsoup</td>\n<td>一个以最好的DOM，CSS和jQuery解析html的库</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h3><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>OrmLite</td>\n<td>JDBC和Android的轻量级ORM java包</td>\n</tr>\n<tr>\n<td>Sugar</td>\n<td>用超级简单的方法处理Android数据库</td>\n</tr>\n<tr>\n<td>GreenDAO</td>\n<td>一种轻快地将对象映射到SQLite数据库的ORM解决方案</td>\n</tr>\n<tr>\n<td>ActiveAndroid</td>\n<td>以活动记录方式为Android SQLite提供持久化</td>\n</tr>\n<tr>\n<td>SQLBrite</td>\n<td>SQLiteOpenHelper 和ContentResolver的轻量级包装</td>\n</tr>\n<tr>\n<td>Realm</td>\n<td>移动数据库：一个SQLite和ORM的替换品</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"注入工具\"><a href=\"#注入工具\" class=\"headerlink\" title=\"注入工具\"></a>注入工具</h3><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ButterKnife</td>\n<td>将Android视图和回调方法绑定到字段和方法上</td>\n</tr>\n<tr>\n<td>Dagger2</td>\n<td>一个Android和java快速依赖注射器。</td>\n</tr>\n<tr>\n<td>AndroidAnotations</td>\n<td>快速安卓开发。易于维护</td>\n</tr>\n<tr>\n<td>RoboGuice</td>\n<td>Android平台的Google Guice</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"图表\"><a href=\"#图表\" class=\"headerlink\" title=\"图表\"></a>图表</h3><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>WilliamChart</td>\n<td>创建图表的Android库</td>\n</tr>\n<tr>\n<td>HelloCharts</td>\n<td>兼容到API8的Android图表库</td>\n</tr>\n<tr>\n<td>MPAndroidChart</td>\n<td>一个强大的Android图表视图/图形库</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h3><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Tape</td>\n<td>一个轻快的，事务性的，基于文件的FIFO的库</td>\n</tr>\n<tr>\n<td>Android Priority Job Queue</td>\n<td>一个专门为Android轻松调度任务的工作队列</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"事件总线\"><a href=\"#事件总线\" class=\"headerlink\" title=\"事件总线\"></a>事件总线</h3><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>EventBus</td>\n<td>安卓优化的事件总线，简化了活动、片段、线程、服务等的通信</td>\n</tr>\n<tr>\n<td>Otto</td>\n<td>一个基于Guava的增强的事件总线</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"响应式编程\"><a href=\"#响应式编程\" class=\"headerlink\" title=\"响应式编程\"></a>响应式编程</h3><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>RxJava</td>\n<td>JVM上的响应式扩展</td>\n</tr>\n<tr>\n<td>RxJavaJoins</td>\n<td>为RxJava提供Joins操作</td>\n</tr>\n<tr>\n<td>RxAndroid</td>\n<td>Android上的响应式扩展，在RxJava基础上添加了Android线程调度</td>\n</tr>\n<tr>\n<td>RxBinding</td>\n<td>提供用RxJava绑定Android UI的API</td>\n</tr>\n<tr>\n<td>Agera</td>\n<td>Android上的响应式编程</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"日志log\"><a href=\"#日志log\" class=\"headerlink\" title=\"日志log\"></a>日志log</h3><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Logger</td>\n<td>简单，漂亮，强大的Android日志工具</td>\n</tr>\n<tr>\n<td>Hugo</td>\n<td>在调试版本上注解的触发方法进行日志记录</td>\n</tr>\n<tr>\n<td>Timber</td>\n<td>一个小的，可扩展的日志工具</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Mockito</td>\n<td>Java编写的Mocking单元测试框架</td>\n</tr>\n<tr>\n<td>Robotium</td>\n<td>Android UI 测试</td>\n</tr>\n<tr>\n<td>Robolectric</td>\n<td>Android单元测试框架</td>\n</tr>\n</tbody>\n</table>\n<p>Android自带很多测试工具：JUnit，Monkeyrunner，UiAutomator，Espresso等</p>\n<h3 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h3><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Stetho</td>\n<td>调试Android应用的桥梁，使得可以利用Chrome开发者工具进行调试</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"内存\"><a href=\"#内存\" class=\"headerlink\" title=\"内存\"></a>内存</h3><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>LeakCanary</td>\n<td>内存泄漏检测工具</td>\n</tr>\n<tr>\n<td>ACRA</td>\n<td>Android应用程序崩溃报告</td>\n</tr>\n</tbody>\n</table>\n","excerpt":"","more":"<h2 id=\"Android-通用流行框架简介\"><a href=\"#Android-通用流行框架简介\" class=\"headerlink\" title=\"Android 通用流行框架简介\"></a>Android 通用流行框架简介</h2><p><img src=\"/2017/04/11/Android 通用流行框架简介/Android通用流行框架.png\" alt=\"Android 框架\"></p>\n<h3 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h3><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DiskLruCache</td>\n<td>Java实现基于LRU的磁盘缓存</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"图片加载\"><a href=\"#图片加载\" class=\"headerlink\" title=\"图片加载\"></a>图片加载</h3><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Android Universal Image Loader</td>\n<td>一个强大的加载，缓存，展示图片的库</td>\n</tr>\n<tr>\n<td>Picasso</td>\n<td>一个强大的图片下载与缓存的库</td>\n</tr>\n<tr>\n<td>Fresco</td>\n<td>一个用于管理图像和他们使用的内存的库</td>\n</tr>\n<tr>\n<td>Glide</td>\n<td>一个图片加载和缓存的库</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"图像处理\"><a href=\"#图像处理\" class=\"headerlink\" title=\"图像处理\"></a>图像处理</h3><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Picasso-transformations</td>\n<td>一个为Picasso提供多种图片变换的库</td>\n</tr>\n<tr>\n<td>Glide-transformations</td>\n<td>一个为Glide提供多种图片变换的库</td>\n</tr>\n<tr>\n<td>Android-gpuimage</td>\n<td>基于OpenGL的Android过滤器</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"网络请求\"><a href=\"#网络请求\" class=\"headerlink\" title=\"网络请求\"></a>网络请求</h3><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Android Async HTTP</td>\n<td>Android异步HTTP库</td>\n</tr>\n<tr>\n<td>AndroidAsync</td>\n<td>异步Socket，HTTP(客户端+服务器)，WebSocket，和socket.io库。基于NIO而不是线程。</td>\n</tr>\n<tr>\n<td>OkHttp</td>\n<td>一个Http与Http/2的客户端</td>\n</tr>\n<tr>\n<td>Retrofit</td>\n<td>类型安全的Http客户端</td>\n</tr>\n<tr>\n<td>Volley</td>\n<td>Google推出的Android异步网络请求框架和图片加载框架</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"网络解析\"><a href=\"#网络解析\" class=\"headerlink\" title=\"网络解析\"></a>网络解析</h3><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Gson</td>\n<td>一个Java序列化/反序列化库，可以将JSON和java对象互相转换</td>\n</tr>\n<tr>\n<td>Jackson</td>\n<td>Jackson可以轻松地将Java对象转换成json对象和xml文档，同样也可以将json、xml转换成Java对象</td>\n</tr>\n<tr>\n<td>Fastjson</td>\n<td>Java上一个快速的JSON解析器/生成器</td>\n</tr>\n<tr>\n<td>HtmlPaser</td>\n<td>一种用来解析单个独立html或嵌套html的方式</td>\n</tr>\n<tr>\n<td>Jsoup</td>\n<td>一个以最好的DOM，CSS和jQuery解析html的库</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h3><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>OrmLite</td>\n<td>JDBC和Android的轻量级ORM java包</td>\n</tr>\n<tr>\n<td>Sugar</td>\n<td>用超级简单的方法处理Android数据库</td>\n</tr>\n<tr>\n<td>GreenDAO</td>\n<td>一种轻快地将对象映射到SQLite数据库的ORM解决方案</td>\n</tr>\n<tr>\n<td>ActiveAndroid</td>\n<td>以活动记录方式为Android SQLite提供持久化</td>\n</tr>\n<tr>\n<td>SQLBrite</td>\n<td>SQLiteOpenHelper 和ContentResolver的轻量级包装</td>\n</tr>\n<tr>\n<td>Realm</td>\n<td>移动数据库：一个SQLite和ORM的替换品</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"注入工具\"><a href=\"#注入工具\" class=\"headerlink\" title=\"注入工具\"></a>注入工具</h3><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ButterKnife</td>\n<td>将Android视图和回调方法绑定到字段和方法上</td>\n</tr>\n<tr>\n<td>Dagger2</td>\n<td>一个Android和java快速依赖注射器。</td>\n</tr>\n<tr>\n<td>AndroidAnotations</td>\n<td>快速安卓开发。易于维护</td>\n</tr>\n<tr>\n<td>RoboGuice</td>\n<td>Android平台的Google Guice</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"图表\"><a href=\"#图表\" class=\"headerlink\" title=\"图表\"></a>图表</h3><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>WilliamChart</td>\n<td>创建图表的Android库</td>\n</tr>\n<tr>\n<td>HelloCharts</td>\n<td>兼容到API8的Android图表库</td>\n</tr>\n<tr>\n<td>MPAndroidChart</td>\n<td>一个强大的Android图表视图/图形库</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h3><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Tape</td>\n<td>一个轻快的，事务性的，基于文件的FIFO的库</td>\n</tr>\n<tr>\n<td>Android Priority Job Queue</td>\n<td>一个专门为Android轻松调度任务的工作队列</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"事件总线\"><a href=\"#事件总线\" class=\"headerlink\" title=\"事件总线\"></a>事件总线</h3><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>EventBus</td>\n<td>安卓优化的事件总线，简化了活动、片段、线程、服务等的通信</td>\n</tr>\n<tr>\n<td>Otto</td>\n<td>一个基于Guava的增强的事件总线</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"响应式编程\"><a href=\"#响应式编程\" class=\"headerlink\" title=\"响应式编程\"></a>响应式编程</h3><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>RxJava</td>\n<td>JVM上的响应式扩展</td>\n</tr>\n<tr>\n<td>RxJavaJoins</td>\n<td>为RxJava提供Joins操作</td>\n</tr>\n<tr>\n<td>RxAndroid</td>\n<td>Android上的响应式扩展，在RxJava基础上添加了Android线程调度</td>\n</tr>\n<tr>\n<td>RxBinding</td>\n<td>提供用RxJava绑定Android UI的API</td>\n</tr>\n<tr>\n<td>Agera</td>\n<td>Android上的响应式编程</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"日志log\"><a href=\"#日志log\" class=\"headerlink\" title=\"日志log\"></a>日志log</h3><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Logger</td>\n<td>简单，漂亮，强大的Android日志工具</td>\n</tr>\n<tr>\n<td>Hugo</td>\n<td>在调试版本上注解的触发方法进行日志记录</td>\n</tr>\n<tr>\n<td>Timber</td>\n<td>一个小的，可扩展的日志工具</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Mockito</td>\n<td>Java编写的Mocking单元测试框架</td>\n</tr>\n<tr>\n<td>Robotium</td>\n<td>Android UI 测试</td>\n</tr>\n<tr>\n<td>Robolectric</td>\n<td>Android单元测试框架</td>\n</tr>\n</tbody>\n</table>\n<p>Android自带很多测试工具：JUnit，Monkeyrunner，UiAutomator，Espresso等</p>\n<h3 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h3><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Stetho</td>\n<td>调试Android应用的桥梁，使得可以利用Chrome开发者工具进行调试</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"内存\"><a href=\"#内存\" class=\"headerlink\" title=\"内存\"></a>内存</h3><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>LeakCanary</td>\n<td>内存泄漏检测工具</td>\n</tr>\n<tr>\n<td>ACRA</td>\n<td>Android应用程序崩溃报告</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"AndroidStudio使用CMake编译jni的C/C++文件","date":"2017-01-22T07:36:00.000Z","_content":"\nAndroid开发主流工具已变成AndroidStudio，新版AS已经支持CMake编译工具，可以用于编译C/C++文件，增强了Android调用jni代码的便捷性。相比于之前繁杂的ndk配置方式，cmake较为简单方便。\n##1、添加CMake支持\n首先使用的AndroidStudio必须是2.2以上版本，在settings--Appearance&Behavior--System Settings--AndroidSDK中，确保下载安装了CMake、LLDB、NDK等必要组件。\n使用CMake编译C/C++文件，有两种添加模式：\n\n- 新建项目，在创建项目名称，配置包名时，勾选包含C/C++代码，如图![jni](AndroidStudio使用CMake编译jni的C-C++文件/create.jpg).\n- 在已有的项目中添加C/C++代码文件，只需要在app.gradle文件中配置如下代码\n```java\ndefaultConfig{\n//配置Cmake运行参数,在defaultconfig节点下配置\n        externalNativeBuild {\n            cmake {\n                cppFlags \"-frtti -fexceptions\"\n            }\n        }  \n}\n //关联CMake的程序清单文件,path 指向cmake文件路径，此处为项目工程根目录下。\n    externalNativeBuild {\n        cmake {\n            path \"CMakeLists.txt\"\n        }\n    }\n```\n![app.gradle](AndroidStudio使用CMake编译jni的C-C++文件/config.jpg)\nCMakeLists.txt文件如下\n```cmake\n# Sets the minimum version of CMake required to build the native\n# library. You should either keep the default value or only pass a\n# value of 3.4.0 or lower.\n\ncmake_minimum_required(VERSION 3.4.1)\n\n# Creates and names a library, sets it as either STATIC\n# or SHARED, and provides the relative paths to its source code.\n# You can define multiple libraries, and CMake builds it for you.\n# Gradle automatically packages shared libraries with your APK.\n\nadd_library( # Sets the name of the library.AndroidStudio开始支持Cmake了，ndk感觉挺费劲的，这个是不是好玩点，，这里是要生成的库的文件名 libtest.so\n             test\n\n             # Sets the library as a shared library.\n             SHARED\n\n             # Provides a relative path to your source file(s).\n             # Associated headers in the same location as their source\n             # file are automatically included.对应的C文件的目录位置\n             src/main/cpp/Test.c)\n\n# Searches for a specified prebuilt library and stores the path as a\n# variable. Because system libraries are included in the search path by\n# default, you only need to specify the name of the public NDK library\n# you want to add. CMake verifies that the library exists before\n# completing its build.\n\nfind_library( # Sets the name of the path variable.\n              log-lib\n\n              # Specifies the name of the NDK library that\n              # you want CMake to locate.\n              log )\n\n# Specifies libraries CMake should link to your target library. You\n# can link multiple libraries, such as libraries you define in the\n# build script, prebuilt third-party libraries, or system libraries.\n\ntarget_link_libraries( # Specifies the target library.指定依赖库\n                       test\n\n                       # Links the target library to the log library\n                       # included in the NDK.关联日志记录库文件，在ndk目录中\n                       ${log-lib} )\n```\n如上文件中，主要注意add_library中配置你要生成so文件的名称，以及C/C++文件的路径；而target_link_libraries中指定依赖库的文件名。\n如此clean project 然后make，就可以生成so文件，被Android上层java调用。类似如下：\n```java\n\tprivate native static void open(String path);\n\tpublic native void close();\n\t//加载lib库的so文件，要看请lib下面生成的so文件的名字，libtest.so\n\tstatic {\n\t\tSystem.loadLibrary(\"test\");\n\t}\n```\n\n##2、最近项目一点零碎知识点\n- 多屏幕适配效果优化\n```xml\n//在AndroidManifest.xml的application节点下，配置\n<supports-screens\n        android:anyDensity=\"true\"\n        android:largeScreens=\"true\"\n        android:normalScreens=\"true\"\n        android:smallScreens=\"true\"\n        android:xlargeScreens=\"true\" />\n```\n- Activity快速导航返回到主Activity\n  使用`android:parentActivityName`属性\n```xml\n//在activity节点下，配置属性\n<activity android:parentActivityName=\".activity.WelcomeActivity\"\n          .../>\n```\n然后该配置属性的Activity，就可以在back按钮或者其他按钮事件处理中：\n```java\n//NavUtils是android support包里面的工具类\nIntent intent = NavUtils.getParentActivityIntent(this);\n        NavUtils.navigateUpTo(this, intent);\n```\n- EditText不自动获取屏幕焦点\n```xml\n//在需要屏蔽焦点自动获取的EditText的上一级布局文件中，配置属性\nandroid:focusableInTouchMode=\"true\"\n```\n- `progress name`属性，在AndroidManifest.xml 中Activitiy或者service的节点属性配置progress name，如果不一致，可能会引起签名打包失败，无法安装apk。\n\n本人技术小白，笔记仅供个人学习记录之中，若能有益于各位网友，也算荣幸。若有问题，肯请指出，莫要责怪。","source":"_posts/AndroidStudio使用CMake编译jni的C-C++文件.md","raw":"---\ntitle: \"AndroidStudio使用CMake编译jni的C/C++文件\"\ndate: 2017-01-22 15:36\ntags:\n    - Android Studio\n    - C++\n    - JNI\ncategories:\n    - 编程相关\n---\n\nAndroid开发主流工具已变成AndroidStudio，新版AS已经支持CMake编译工具，可以用于编译C/C++文件，增强了Android调用jni代码的便捷性。相比于之前繁杂的ndk配置方式，cmake较为简单方便。\n##1、添加CMake支持\n首先使用的AndroidStudio必须是2.2以上版本，在settings--Appearance&Behavior--System Settings--AndroidSDK中，确保下载安装了CMake、LLDB、NDK等必要组件。\n使用CMake编译C/C++文件，有两种添加模式：\n\n- 新建项目，在创建项目名称，配置包名时，勾选包含C/C++代码，如图![jni](AndroidStudio使用CMake编译jni的C-C++文件/create.jpg).\n- 在已有的项目中添加C/C++代码文件，只需要在app.gradle文件中配置如下代码\n```java\ndefaultConfig{\n//配置Cmake运行参数,在defaultconfig节点下配置\n        externalNativeBuild {\n            cmake {\n                cppFlags \"-frtti -fexceptions\"\n            }\n        }  \n}\n //关联CMake的程序清单文件,path 指向cmake文件路径，此处为项目工程根目录下。\n    externalNativeBuild {\n        cmake {\n            path \"CMakeLists.txt\"\n        }\n    }\n```\n![app.gradle](AndroidStudio使用CMake编译jni的C-C++文件/config.jpg)\nCMakeLists.txt文件如下\n```cmake\n# Sets the minimum version of CMake required to build the native\n# library. You should either keep the default value or only pass a\n# value of 3.4.0 or lower.\n\ncmake_minimum_required(VERSION 3.4.1)\n\n# Creates and names a library, sets it as either STATIC\n# or SHARED, and provides the relative paths to its source code.\n# You can define multiple libraries, and CMake builds it for you.\n# Gradle automatically packages shared libraries with your APK.\n\nadd_library( # Sets the name of the library.AndroidStudio开始支持Cmake了，ndk感觉挺费劲的，这个是不是好玩点，，这里是要生成的库的文件名 libtest.so\n             test\n\n             # Sets the library as a shared library.\n             SHARED\n\n             # Provides a relative path to your source file(s).\n             # Associated headers in the same location as their source\n             # file are automatically included.对应的C文件的目录位置\n             src/main/cpp/Test.c)\n\n# Searches for a specified prebuilt library and stores the path as a\n# variable. Because system libraries are included in the search path by\n# default, you only need to specify the name of the public NDK library\n# you want to add. CMake verifies that the library exists before\n# completing its build.\n\nfind_library( # Sets the name of the path variable.\n              log-lib\n\n              # Specifies the name of the NDK library that\n              # you want CMake to locate.\n              log )\n\n# Specifies libraries CMake should link to your target library. You\n# can link multiple libraries, such as libraries you define in the\n# build script, prebuilt third-party libraries, or system libraries.\n\ntarget_link_libraries( # Specifies the target library.指定依赖库\n                       test\n\n                       # Links the target library to the log library\n                       # included in the NDK.关联日志记录库文件，在ndk目录中\n                       ${log-lib} )\n```\n如上文件中，主要注意add_library中配置你要生成so文件的名称，以及C/C++文件的路径；而target_link_libraries中指定依赖库的文件名。\n如此clean project 然后make，就可以生成so文件，被Android上层java调用。类似如下：\n```java\n\tprivate native static void open(String path);\n\tpublic native void close();\n\t//加载lib库的so文件，要看请lib下面生成的so文件的名字，libtest.so\n\tstatic {\n\t\tSystem.loadLibrary(\"test\");\n\t}\n```\n\n##2、最近项目一点零碎知识点\n- 多屏幕适配效果优化\n```xml\n//在AndroidManifest.xml的application节点下，配置\n<supports-screens\n        android:anyDensity=\"true\"\n        android:largeScreens=\"true\"\n        android:normalScreens=\"true\"\n        android:smallScreens=\"true\"\n        android:xlargeScreens=\"true\" />\n```\n- Activity快速导航返回到主Activity\n  使用`android:parentActivityName`属性\n```xml\n//在activity节点下，配置属性\n<activity android:parentActivityName=\".activity.WelcomeActivity\"\n          .../>\n```\n然后该配置属性的Activity，就可以在back按钮或者其他按钮事件处理中：\n```java\n//NavUtils是android support包里面的工具类\nIntent intent = NavUtils.getParentActivityIntent(this);\n        NavUtils.navigateUpTo(this, intent);\n```\n- EditText不自动获取屏幕焦点\n```xml\n//在需要屏蔽焦点自动获取的EditText的上一级布局文件中，配置属性\nandroid:focusableInTouchMode=\"true\"\n```\n- `progress name`属性，在AndroidManifest.xml 中Activitiy或者service的节点属性配置progress name，如果不一致，可能会引起签名打包失败，无法安装apk。\n\n本人技术小白，笔记仅供个人学习记录之中，若能有益于各位网友，也算荣幸。若有问题，肯请指出，莫要责怪。","slug":"AndroidStudio使用CMake编译jni的C-C++文件","published":1,"updated":"2017-03-31T08:58:29.220Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ndxcbs000388ow4pi1semb","content":"<p>Android开发主流工具已变成AndroidStudio，新版AS已经支持CMake编译工具，可以用于编译C/C++文件，增强了Android调用jni代码的便捷性。相比于之前繁杂的ndk配置方式，cmake较为简单方便。</p>\n<p>##1、添加CMake支持<br>首先使用的AndroidStudio必须是2.2以上版本，在settings–Appearance&amp;Behavior–System Settings–AndroidSDK中，确保下载安装了CMake、LLDB、NDK等必要组件。<br>使用CMake编译C/C++文件，有两种添加模式：</p>\n<ul>\n<li>新建项目，在创建项目名称，配置包名时，勾选包含C/C++代码，如图<img src=\"/2017/01/22/AndroidStudio使用CMake编译jni的C-C++文件/create.jpg\" alt=\"jni\">.</li>\n<li>在已有的项目中添加C/C++代码文件，只需要在app.gradle文件中配置如下代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">defaultConfig&#123;</div><div class=\"line\"><span class=\"comment\">//配置Cmake运行参数,在defaultconfig节点下配置</span></div><div class=\"line\">        externalNativeBuild &#123;</div><div class=\"line\">            cmake &#123;</div><div class=\"line\">                cppFlags <span class=\"string\">\"-frtti -fexceptions\"</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;  </div><div class=\"line\">&#125;</div><div class=\"line\"> <span class=\"comment\">//关联CMake的程序清单文件,path 指向cmake文件路径，此处为项目工程根目录下。</span></div><div class=\"line\">    externalNativeBuild &#123;</div><div class=\"line\">        cmake &#123;</div><div class=\"line\">            path <span class=\"string\">\"CMakeLists.txt\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"/2017/01/22/AndroidStudio使用CMake编译jni的C-C++文件/config.jpg\" alt=\"app.gradle\"><br>CMakeLists.txt文件如下<br><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Sets the minimum version of CMake required to build the native</span></div><div class=\"line\"><span class=\"comment\"># library. You should either keep the default value or only pass a</span></div><div class=\"line\"><span class=\"comment\"># value of 3.4.0 or lower.</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">3.4</span>.<span class=\"number\">1</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Creates and names a library, sets it as either STATIC</span></div><div class=\"line\"><span class=\"comment\"># or SHARED, and provides the relative paths to its source code.</span></div><div class=\"line\"><span class=\"comment\"># You can define multiple libraries, and CMake builds it for you.</span></div><div class=\"line\"><span class=\"comment\"># Gradle automatically packages shared libraries with your APK.</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">add_library</span>( <span class=\"comment\"># Sets the name of the library.AndroidStudio开始支持Cmake了，ndk感觉挺费劲的，这个是不是好玩点，，这里是要生成的库的文件名 libtest.so</span></div><div class=\"line\">             test</div><div class=\"line\"></div><div class=\"line\">             <span class=\"comment\"># Sets the library as a shared library.</span></div><div class=\"line\">             SHARED</div><div class=\"line\"></div><div class=\"line\">             <span class=\"comment\"># Provides a relative path to your source file(s).</span></div><div class=\"line\">             <span class=\"comment\"># Associated headers in the same location as their source</span></div><div class=\"line\">             <span class=\"comment\"># file are automatically included.对应的C文件的目录位置</span></div><div class=\"line\">             src/main/cpp/Test.c)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Searches for a specified prebuilt library and stores the path as a</span></div><div class=\"line\"><span class=\"comment\"># variable. Because system libraries are included in the search path by</span></div><div class=\"line\"><span class=\"comment\"># default, you only need to specify the name of the public NDK library</span></div><div class=\"line\"><span class=\"comment\"># you want to add. CMake verifies that the library exists before</span></div><div class=\"line\"><span class=\"comment\"># completing its build.</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">find_library</span>( <span class=\"comment\"># Sets the name of the path variable.</span></div><div class=\"line\">              log-lib</div><div class=\"line\"></div><div class=\"line\">              <span class=\"comment\"># Specifies the name of the NDK library that</span></div><div class=\"line\">              <span class=\"comment\"># you want CMake to locate.</span></div><div class=\"line\">              log )</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Specifies libraries CMake should link to your target library. You</span></div><div class=\"line\"><span class=\"comment\"># can link multiple libraries, such as libraries you define in the</span></div><div class=\"line\"><span class=\"comment\"># build script, prebuilt third-party libraries, or system libraries.</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">target_link_libraries</span>( <span class=\"comment\"># Specifies the target library.指定依赖库</span></div><div class=\"line\">                       test</div><div class=\"line\"></div><div class=\"line\">                       <span class=\"comment\"># Links the target library to the log library</span></div><div class=\"line\">                       <span class=\"comment\"># included in the NDK.关联日志记录库文件，在ndk目录中</span></div><div class=\"line\">                       <span class=\"variable\">$&#123;log-lib&#125;</span> )</div></pre></td></tr></table></figure></p>\n<p>如上文件中，主要注意add_library中配置你要生成so文件的名称，以及C/C++文件的路径；而target_link_libraries中指定依赖库的文件名。<br>如此clean project 然后make，就可以生成so文件，被Android上层java调用。类似如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">native</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">open</span><span class=\"params\">(String path)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span></span>;</div><div class=\"line\"><span class=\"comment\">//加载lib库的so文件，要看请lib下面生成的so文件的名字，libtest.so</span></div><div class=\"line\"><span class=\"keyword\">static</span> &#123;</div><div class=\"line\">\tSystem.loadLibrary(<span class=\"string\">\"test\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>##2、最近项目一点零碎知识点</p>\n<ul>\n<li><p>多屏幕适配效果优化</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">//在AndroidManifest.xml的application节点下，配置</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">supports-screens</span></span></div><div class=\"line\">        <span class=\"attr\">android:anyDensity</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">        <span class=\"attr\">android:largeScreens</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">        <span class=\"attr\">android:normalScreens</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">        <span class=\"attr\">android:smallScreens</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">        <span class=\"attr\">android:xlargeScreens</span>=<span class=\"string\">\"true\"</span> /&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Activity快速导航返回到主Activity<br>使用<code>android:parentActivityName</code>属性</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">//在activity节点下，配置属性</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span> <span class=\"attr\">android:parentActivityName</span>=<span class=\"string\">\".activity.WelcomeActivity\"</span></span></div><div class=\"line\">          <span class=\"attr\">...</span>/&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>然后该配置属性的Activity，就可以在back按钮或者其他按钮事件处理中：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//NavUtils是android support包里面的工具类</span></div><div class=\"line\">Intent intent = NavUtils.getParentActivityIntent(<span class=\"keyword\">this</span>);</div><div class=\"line\">        NavUtils.navigateUpTo(<span class=\"keyword\">this</span>, intent);</div></pre></td></tr></table></figure></p>\n<ul>\n<li><p>EditText不自动获取屏幕焦点</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">//在需要屏蔽焦点自动获取的EditText的上一级布局文件中，配置属性</div><div class=\"line\">android:focusableInTouchMode=\"true\"</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>progress name</code>属性，在AndroidManifest.xml 中Activitiy或者service的节点属性配置progress name，如果不一致，可能会引起签名打包失败，无法安装apk。</p>\n</li>\n</ul>\n<p>本人技术小白，笔记仅供个人学习记录之中，若能有益于各位网友，也算荣幸。若有问题，肯请指出，莫要责怪。</p>\n","excerpt":"","more":"<p>Android开发主流工具已变成AndroidStudio，新版AS已经支持CMake编译工具，可以用于编译C/C++文件，增强了Android调用jni代码的便捷性。相比于之前繁杂的ndk配置方式，cmake较为简单方便。</p>\n<p>##1、添加CMake支持<br>首先使用的AndroidStudio必须是2.2以上版本，在settings–Appearance&amp;Behavior–System Settings–AndroidSDK中，确保下载安装了CMake、LLDB、NDK等必要组件。<br>使用CMake编译C/C++文件，有两种添加模式：</p>\n<ul>\n<li>新建项目，在创建项目名称，配置包名时，勾选包含C/C++代码，如图<img src=\"/2017/01/22/AndroidStudio使用CMake编译jni的C-C++文件/create.jpg\" alt=\"jni\">.</li>\n<li>在已有的项目中添加C/C++代码文件，只需要在app.gradle文件中配置如下代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">defaultConfig&#123;</div><div class=\"line\"><span class=\"comment\">//配置Cmake运行参数,在defaultconfig节点下配置</span></div><div class=\"line\">        externalNativeBuild &#123;</div><div class=\"line\">            cmake &#123;</div><div class=\"line\">                cppFlags <span class=\"string\">\"-frtti -fexceptions\"</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;  </div><div class=\"line\">&#125;</div><div class=\"line\"> <span class=\"comment\">//关联CMake的程序清单文件,path 指向cmake文件路径，此处为项目工程根目录下。</span></div><div class=\"line\">    externalNativeBuild &#123;</div><div class=\"line\">        cmake &#123;</div><div class=\"line\">            path <span class=\"string\">\"CMakeLists.txt\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"/2017/01/22/AndroidStudio使用CMake编译jni的C-C++文件/config.jpg\" alt=\"app.gradle\"><br>CMakeLists.txt文件如下<br><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Sets the minimum version of CMake required to build the native</span></div><div class=\"line\"><span class=\"comment\"># library. You should either keep the default value or only pass a</span></div><div class=\"line\"><span class=\"comment\"># value of 3.4.0 or lower.</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">3.4</span>.<span class=\"number\">1</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Creates and names a library, sets it as either STATIC</span></div><div class=\"line\"><span class=\"comment\"># or SHARED, and provides the relative paths to its source code.</span></div><div class=\"line\"><span class=\"comment\"># You can define multiple libraries, and CMake builds it for you.</span></div><div class=\"line\"><span class=\"comment\"># Gradle automatically packages shared libraries with your APK.</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">add_library</span>( <span class=\"comment\"># Sets the name of the library.AndroidStudio开始支持Cmake了，ndk感觉挺费劲的，这个是不是好玩点，，这里是要生成的库的文件名 libtest.so</span></div><div class=\"line\">             test</div><div class=\"line\"></div><div class=\"line\">             <span class=\"comment\"># Sets the library as a shared library.</span></div><div class=\"line\">             SHARED</div><div class=\"line\"></div><div class=\"line\">             <span class=\"comment\"># Provides a relative path to your source file(s).</span></div><div class=\"line\">             <span class=\"comment\"># Associated headers in the same location as their source</span></div><div class=\"line\">             <span class=\"comment\"># file are automatically included.对应的C文件的目录位置</span></div><div class=\"line\">             src/main/cpp/Test.c)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Searches for a specified prebuilt library and stores the path as a</span></div><div class=\"line\"><span class=\"comment\"># variable. Because system libraries are included in the search path by</span></div><div class=\"line\"><span class=\"comment\"># default, you only need to specify the name of the public NDK library</span></div><div class=\"line\"><span class=\"comment\"># you want to add. CMake verifies that the library exists before</span></div><div class=\"line\"><span class=\"comment\"># completing its build.</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">find_library</span>( <span class=\"comment\"># Sets the name of the path variable.</span></div><div class=\"line\">              log-lib</div><div class=\"line\"></div><div class=\"line\">              <span class=\"comment\"># Specifies the name of the NDK library that</span></div><div class=\"line\">              <span class=\"comment\"># you want CMake to locate.</span></div><div class=\"line\">              log )</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Specifies libraries CMake should link to your target library. You</span></div><div class=\"line\"><span class=\"comment\"># can link multiple libraries, such as libraries you define in the</span></div><div class=\"line\"><span class=\"comment\"># build script, prebuilt third-party libraries, or system libraries.</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">target_link_libraries</span>( <span class=\"comment\"># Specifies the target library.指定依赖库</span></div><div class=\"line\">                       test</div><div class=\"line\"></div><div class=\"line\">                       <span class=\"comment\"># Links the target library to the log library</span></div><div class=\"line\">                       <span class=\"comment\"># included in the NDK.关联日志记录库文件，在ndk目录中</span></div><div class=\"line\">                       <span class=\"variable\">$&#123;log-lib&#125;</span> )</div></pre></td></tr></table></figure></p>\n<p>如上文件中，主要注意add_library中配置你要生成so文件的名称，以及C/C++文件的路径；而target_link_libraries中指定依赖库的文件名。<br>如此clean project 然后make，就可以生成so文件，被Android上层java调用。类似如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">native</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">open</span><span class=\"params\">(String path)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span></span>;</div><div class=\"line\"><span class=\"comment\">//加载lib库的so文件，要看请lib下面生成的so文件的名字，libtest.so</span></div><div class=\"line\"><span class=\"keyword\">static</span> &#123;</div><div class=\"line\">\tSystem.loadLibrary(<span class=\"string\">\"test\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>##2、最近项目一点零碎知识点</p>\n<ul>\n<li><p>多屏幕适配效果优化</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">//在AndroidManifest.xml的application节点下，配置</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">supports-screens</span></span></div><div class=\"line\">        <span class=\"attr\">android:anyDensity</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">        <span class=\"attr\">android:largeScreens</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">        <span class=\"attr\">android:normalScreens</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">        <span class=\"attr\">android:smallScreens</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">        <span class=\"attr\">android:xlargeScreens</span>=<span class=\"string\">\"true\"</span> /&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Activity快速导航返回到主Activity<br>使用<code>android:parentActivityName</code>属性</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">//在activity节点下，配置属性</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span> <span class=\"attr\">android:parentActivityName</span>=<span class=\"string\">\".activity.WelcomeActivity\"</span></span></div><div class=\"line\">          <span class=\"attr\">...</span>/&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>然后该配置属性的Activity，就可以在back按钮或者其他按钮事件处理中：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//NavUtils是android support包里面的工具类</span></div><div class=\"line\">Intent intent = NavUtils.getParentActivityIntent(<span class=\"keyword\">this</span>);</div><div class=\"line\">        NavUtils.navigateUpTo(<span class=\"keyword\">this</span>, intent);</div></pre></td></tr></table></figure></p>\n<ul>\n<li><p>EditText不自动获取屏幕焦点</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">//在需要屏蔽焦点自动获取的EditText的上一级布局文件中，配置属性</div><div class=\"line\">android:focusableInTouchMode=\"true\"</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>progress name</code>属性，在AndroidManifest.xml 中Activitiy或者service的节点属性配置progress name，如果不一致，可能会引起签名打包失败，无法安装apk。</p>\n</li>\n</ul>\n<p>本人技术小白，笔记仅供个人学习记录之中，若能有益于各位网友，也算荣幸。若有问题，肯请指出，莫要责怪。</p>\n"},{"title":"Android开源控件搜集----Button","date":"2017-03-27T08:57:00.000Z","author":"冰路梦","_content":"# Android开源控件搜集--Button\n\n**Note：**本篇博客长期维护更新，欢迎各位网友共同合作，共享知识与技术。\n\n本篇博客主要搜集个人任务比较优秀的Android开源控件，大多来自github，并附上链接，自己学习之余，亦希望于大家有所帮助。\n\nAndroid的控件还算比较多，官方和第三方自定义优秀控件数不胜数，搜集难免不全，逐步更新丰富吧。\n\n## Button\n\nButton可以说是Android中仅次于Text View的，比较重要的一个控件，下面主要是搜集一些第三方优化效果的Button,其中有的也算是菜单Menu，或者progressbar，以后再修改分类吧。\n\n1. FloatingActionButton \n\n   悬浮式的actionbutton，效果：\n\n   ![floatingbutton](https://github.com/futuresimple/android-floating-action-button/raw/master/screenshots/menu.gif)\n\n   github:https://github.com/futuresimple/android-floating-action-button\n\n2. floatingButton\n\n   类似上面，这是一个可以监视滑动事件的floatingButton，效果：\n\n   ![button](https://github.com/makovkastar/FloatingActionButton/raw/master/art/demo.gif)\n\n   github:https://github.com/makovkastar/FloatingActionButton\n\n3. circularProgressbutton\n\n   带有圆形进度的button，效果：\n\n   ![button](https://github.com/dmytrodanylyk/circular-progress-button/raw/master/screenshots/intro.gif)\n\n   github:https://github.com/dmytrodanylyk/circular-progress-button\n\n4. FloatingButton\n\n   这个真是个全面的悬浮按钮button，效果：\n\n   ![button](https://github.com/Clans/FloatingActionButton/raw/master/screenshots/menu_custom_opened.png)\n\n   ![button](https://github.com/Clans/FloatingActionButton/raw/master/screenshots/progress_background.png)\n\n   github:https://github.com/Clans/FloatingActionButton\n\n5. SwitchButton\n\n   包含各式各样的开关button，效果：\n\n   ![switch](https://github.com/kyleduo/SwitchButton/raw/master/preview/demo_140.jpg)\n\n   github:https://github.com/kyleduo/SwitchButton\n\n6. ProcessButton\n\n   带有进度加载的Button，效果：\n\n   ![button](https://github.com/dmytrodanylyk/android-process-button/raw/master/screenshots/sample1_small2.gif)\n\n   github:https://github.com/dmytrodanylyk/android-process-button\n\n7. ShineButton\n\n   点赞的Button，效果：\n\n   ![button](https://github.com/ChadCSong/ShineButton/raw/master/demo_shine_others.gif)\n\n   github:https://github.com/ChadCSong/ShineButton\n\n8. ToggleButton\n\n   类似IOS开关效果的button，效果：\n\n   ![button](https://github.com/zcweng/ToggleButton/raw/master/ToggleButtonSample/21879.gif)\n\n   github:https://github.com/zcweng/ToggleButton\n\n9. FlatButton\n\n   扁平风格的可变色button，效果：\n\n   ![button](https://raw.githubusercontent.com/hoang8f/android-flat-button/master/screenshot/screenshot.gif)\n\n   github:https://github.com/hoang8f/android-flat-button\n\n10. RapidFloatingButton\n\n  好多floatingbutton啊，这个也是大同小异，效果：\n\n  ![button](https://raw.githubusercontent.com/wangjiegulu/RapidFloatingActionButton/master/screenshot/rfab_card_view.gif)\n\n  github:https://github.com/wangjiegulu/RapidFloatingActionButton\n\n11. ArrowDoanloadButton\n\n    准确的说这个是progressbutton更合适，效果：\n\n    ![button](https://github.com/fenjuly/ArrowDownloadButton/raw/master/screenshots/arrowdownloadbutton.gif)\n\n    github:https://github.com/fenjuly/ArrowDownloadButton\n\n12. fab\n\n    可以说是拥有不同效果的floatingbutton，效果：\n\n    ![button](https://github.com/Scalified/fab/raw/master/demo/animation_fade_in_fade_out.gif)\n\n    github:https://github.com/Scalified/fab\n\n13. FloatingNavButton\n\n    悬浮式的导航菜单按钮button，效果：\n\n    ![button](https://raw.githubusercontent.com/andremion/Floating-Navigation-View/master/art/sample.gif)\n\n    github:https://github.com/andremion/Floating-Navigation-View\n\n14. FabButton\n\n    都是floating了，效果：\n\n    ![button](https://github.com/ckurtm/FabButton/raw/master/example.gif?raw=true)\n\n    github:https://github.com/ckurtm/FabButton\n\n15. JellyToggleButton\n\n    花样繁多的togglebutton，效果：\n\n    ![button](https://github.com/Nightonke/JellyToggleButton/raw/master/img/JellyToggleButton4.gif?raw=true)\n\n    github:https://github.com/Nightonke/JellyToggleButton\n\n16. fab\n\n    又是一个fab，效果：\n\n    ![button](https://github.com/konifar/fab-transformation/raw/master/art/transform_to_toolbar.gif)\n\n    github:https://github.com/konifar/fab-transformation\n\n17. morphingButton\n\n    进度变形的button，效果：\n\n    ![button](https://github.com/dmytrodanylyk/android-morphing-button/raw/master/screenshots/intro1.gif)\n\n    github:https://github.com/dmytrodanylyk/android-morphing-button\n\n18. gooeyMenu\n\n    粘性泡泡效果的菜单button，效果：\n\n    ![button](https://github.com/anshulagarwal2k/GooeyMenu/raw/master/gooeyeffect.gif)\n\n    github:https://github.com/anshulagarwal2k/GooeyMenu\n\n19. SatelliteMenu\n\n    卫星菜单button，效果：\n\n    ![button](https://camo.githubusercontent.com/69c60ccfcc45203014ad793da924d2ca10ef0a65/687474703a2f2f692e696d6775722e636f6d2f3049676b6b74642e706e67)\n\n    github:https://github.com/siyamed/android-satellite-menu\n\n20. TagGroup\n\n    tag标签，效果：\n\n    ![button](https://camo.githubusercontent.com/8adbb5c44c656151cb108ada6d1383e2c6af38b7/687474703a2f2f7777342e73696e61696d672e636e2f6c617267652f62636532646561396a7731657362736279397635666a323075303077386a78782e6a7067)\n\n    github:https://github.com/2dxgujun/AndroidTagGroup/\n\n21. ArcMenu\n\n    环形菜单button，效果：\n\n    ![button](https://camo.githubusercontent.com/7c3d707678e6aa187cdf2ee3ac701d77fba92f48/68747470733a2f2f646c2e64726f70626f782e636f6d2f752f31313336393638372f70726576696577312e706e67)\n\n    github:https://github.com/daCapricorn/ArcMenu\n\n22. StateButton\n\n    包含多种select效果的button，效果：\n\n    ![button](https://github.com/niniloveyou/StateButton/raw/master/stateButton.gif)\n\n    github:https://github.com/niniloveyou/StateButton\n\n23. AllAnagleButton\n\n    综合卫星菜单和环形菜单的一个button，效果：\n\n    ![button](https://github.com/uin3566/AllAngleExpandableButton/raw/master/screenshot/demo.gif)\n\n    github:https://github.com/uin3566/AllAngleExpandableButton\n\n24. ShareButton\n\n    简单含有分享模块的button，效果：\n\n    ![button](https://github.com/kayan1990/ShareButton/raw/master/ShareButton/gif/sharebutton.gif)\n\n    github:https://github.com/kayan1990/ShareButton\n\n25. faceOffButton\n\n    一个修改带有笑脸的togglebutton，效果：\n\n    ![button](https://github.com/Nightonke/FaceOffToggleButton/raw/master/img/Animation.gif?raw=true)\n\n    github:https://github.com/Nightonke/FaceOffToggleButton\n\n26. undoBar\n\n    带有撤销功能的button，效果：\n\n    ![button](https://camo.githubusercontent.com/a32255c0a1f5abe56607d46bb9782b8f338fd9e3/68747470733a2f2f7261772e6769746875622e636f6d2f6a656e7a7a2f416e64726f69642d556e646f4261722f6d61737465722f6173736574732f53637265656e73686f74352e706e67)\n\n    github:https://github.com/jenzz/Android-UndoBar\n\n27. BootstrapButton\n\n    具有字形效果的button，效果：\n\n    ![button](https://camo.githubusercontent.com/51755d59ed6fd53158a0d84696e6d184c3a6f4d5/68747470733a2f2f7261772e6769746875622e636f6d2f426561726465642d48656e2f416e64726f69642d426f6f7473747261702f6d61737465722f696d616765732f626f6f7473747261705f627574746f6e2e706e67)\n\n    github:https://github.com/Bearded-Hen/Android-Bootstrap\n\n28. LiquidButton\n\n    又是一个加载的button，效果：\n\n    ![button](https://camo.githubusercontent.com/6e51af802823444540390be079ecad75ef60019e/68747470733a2f2f6431337961637572716a676172612e636c6f756466726f6e742e6e65742f75736572732f3333303137342f73637265656e73686f74732f323639353630302f636f6d705f322e676966)\n\n    github:https://github.com/yoruriko/LiquidButton\n\n29. MagicButton\n\n    简单的变形button，效果：\n\n    ![button](https://github.com/daniel-martins-IR/MagicButton/raw/master/app/src/main/res/drawable/giphy.gif)\n\n    github:https://github.com/daniel-martins-ir/MagicButton\n\n30. RingButton\n\n    可以一分为二的button，各自有各自的图标和点击事件，效果：\n\n    ![button](https://github.com/yankai-victor/RingButton/raw/master/image/Screenshot.png)\n\n    github:https://github.com/yankai-victor/RingButton\n\n31. ​","source":"_posts/Android开源控件搜集--Button.md","raw":"---\ntitle: \"Android开源控件搜集----Button\"\ndate: 2017-03-27 16:57\nauthor: 冰路梦\ntag:\n    - Android\ncategories:\n    - Android\n---\n# Android开源控件搜集--Button\n\n**Note：**本篇博客长期维护更新，欢迎各位网友共同合作，共享知识与技术。\n\n本篇博客主要搜集个人任务比较优秀的Android开源控件，大多来自github，并附上链接，自己学习之余，亦希望于大家有所帮助。\n\nAndroid的控件还算比较多，官方和第三方自定义优秀控件数不胜数，搜集难免不全，逐步更新丰富吧。\n\n## Button\n\nButton可以说是Android中仅次于Text View的，比较重要的一个控件，下面主要是搜集一些第三方优化效果的Button,其中有的也算是菜单Menu，或者progressbar，以后再修改分类吧。\n\n1. FloatingActionButton \n\n   悬浮式的actionbutton，效果：\n\n   ![floatingbutton](https://github.com/futuresimple/android-floating-action-button/raw/master/screenshots/menu.gif)\n\n   github:https://github.com/futuresimple/android-floating-action-button\n\n2. floatingButton\n\n   类似上面，这是一个可以监视滑动事件的floatingButton，效果：\n\n   ![button](https://github.com/makovkastar/FloatingActionButton/raw/master/art/demo.gif)\n\n   github:https://github.com/makovkastar/FloatingActionButton\n\n3. circularProgressbutton\n\n   带有圆形进度的button，效果：\n\n   ![button](https://github.com/dmytrodanylyk/circular-progress-button/raw/master/screenshots/intro.gif)\n\n   github:https://github.com/dmytrodanylyk/circular-progress-button\n\n4. FloatingButton\n\n   这个真是个全面的悬浮按钮button，效果：\n\n   ![button](https://github.com/Clans/FloatingActionButton/raw/master/screenshots/menu_custom_opened.png)\n\n   ![button](https://github.com/Clans/FloatingActionButton/raw/master/screenshots/progress_background.png)\n\n   github:https://github.com/Clans/FloatingActionButton\n\n5. SwitchButton\n\n   包含各式各样的开关button，效果：\n\n   ![switch](https://github.com/kyleduo/SwitchButton/raw/master/preview/demo_140.jpg)\n\n   github:https://github.com/kyleduo/SwitchButton\n\n6. ProcessButton\n\n   带有进度加载的Button，效果：\n\n   ![button](https://github.com/dmytrodanylyk/android-process-button/raw/master/screenshots/sample1_small2.gif)\n\n   github:https://github.com/dmytrodanylyk/android-process-button\n\n7. ShineButton\n\n   点赞的Button，效果：\n\n   ![button](https://github.com/ChadCSong/ShineButton/raw/master/demo_shine_others.gif)\n\n   github:https://github.com/ChadCSong/ShineButton\n\n8. ToggleButton\n\n   类似IOS开关效果的button，效果：\n\n   ![button](https://github.com/zcweng/ToggleButton/raw/master/ToggleButtonSample/21879.gif)\n\n   github:https://github.com/zcweng/ToggleButton\n\n9. FlatButton\n\n   扁平风格的可变色button，效果：\n\n   ![button](https://raw.githubusercontent.com/hoang8f/android-flat-button/master/screenshot/screenshot.gif)\n\n   github:https://github.com/hoang8f/android-flat-button\n\n10. RapidFloatingButton\n\n  好多floatingbutton啊，这个也是大同小异，效果：\n\n  ![button](https://raw.githubusercontent.com/wangjiegulu/RapidFloatingActionButton/master/screenshot/rfab_card_view.gif)\n\n  github:https://github.com/wangjiegulu/RapidFloatingActionButton\n\n11. ArrowDoanloadButton\n\n    准确的说这个是progressbutton更合适，效果：\n\n    ![button](https://github.com/fenjuly/ArrowDownloadButton/raw/master/screenshots/arrowdownloadbutton.gif)\n\n    github:https://github.com/fenjuly/ArrowDownloadButton\n\n12. fab\n\n    可以说是拥有不同效果的floatingbutton，效果：\n\n    ![button](https://github.com/Scalified/fab/raw/master/demo/animation_fade_in_fade_out.gif)\n\n    github:https://github.com/Scalified/fab\n\n13. FloatingNavButton\n\n    悬浮式的导航菜单按钮button，效果：\n\n    ![button](https://raw.githubusercontent.com/andremion/Floating-Navigation-View/master/art/sample.gif)\n\n    github:https://github.com/andremion/Floating-Navigation-View\n\n14. FabButton\n\n    都是floating了，效果：\n\n    ![button](https://github.com/ckurtm/FabButton/raw/master/example.gif?raw=true)\n\n    github:https://github.com/ckurtm/FabButton\n\n15. JellyToggleButton\n\n    花样繁多的togglebutton，效果：\n\n    ![button](https://github.com/Nightonke/JellyToggleButton/raw/master/img/JellyToggleButton4.gif?raw=true)\n\n    github:https://github.com/Nightonke/JellyToggleButton\n\n16. fab\n\n    又是一个fab，效果：\n\n    ![button](https://github.com/konifar/fab-transformation/raw/master/art/transform_to_toolbar.gif)\n\n    github:https://github.com/konifar/fab-transformation\n\n17. morphingButton\n\n    进度变形的button，效果：\n\n    ![button](https://github.com/dmytrodanylyk/android-morphing-button/raw/master/screenshots/intro1.gif)\n\n    github:https://github.com/dmytrodanylyk/android-morphing-button\n\n18. gooeyMenu\n\n    粘性泡泡效果的菜单button，效果：\n\n    ![button](https://github.com/anshulagarwal2k/GooeyMenu/raw/master/gooeyeffect.gif)\n\n    github:https://github.com/anshulagarwal2k/GooeyMenu\n\n19. SatelliteMenu\n\n    卫星菜单button，效果：\n\n    ![button](https://camo.githubusercontent.com/69c60ccfcc45203014ad793da924d2ca10ef0a65/687474703a2f2f692e696d6775722e636f6d2f3049676b6b74642e706e67)\n\n    github:https://github.com/siyamed/android-satellite-menu\n\n20. TagGroup\n\n    tag标签，效果：\n\n    ![button](https://camo.githubusercontent.com/8adbb5c44c656151cb108ada6d1383e2c6af38b7/687474703a2f2f7777342e73696e61696d672e636e2f6c617267652f62636532646561396a7731657362736279397635666a323075303077386a78782e6a7067)\n\n    github:https://github.com/2dxgujun/AndroidTagGroup/\n\n21. ArcMenu\n\n    环形菜单button，效果：\n\n    ![button](https://camo.githubusercontent.com/7c3d707678e6aa187cdf2ee3ac701d77fba92f48/68747470733a2f2f646c2e64726f70626f782e636f6d2f752f31313336393638372f70726576696577312e706e67)\n\n    github:https://github.com/daCapricorn/ArcMenu\n\n22. StateButton\n\n    包含多种select效果的button，效果：\n\n    ![button](https://github.com/niniloveyou/StateButton/raw/master/stateButton.gif)\n\n    github:https://github.com/niniloveyou/StateButton\n\n23. AllAnagleButton\n\n    综合卫星菜单和环形菜单的一个button，效果：\n\n    ![button](https://github.com/uin3566/AllAngleExpandableButton/raw/master/screenshot/demo.gif)\n\n    github:https://github.com/uin3566/AllAngleExpandableButton\n\n24. ShareButton\n\n    简单含有分享模块的button，效果：\n\n    ![button](https://github.com/kayan1990/ShareButton/raw/master/ShareButton/gif/sharebutton.gif)\n\n    github:https://github.com/kayan1990/ShareButton\n\n25. faceOffButton\n\n    一个修改带有笑脸的togglebutton，效果：\n\n    ![button](https://github.com/Nightonke/FaceOffToggleButton/raw/master/img/Animation.gif?raw=true)\n\n    github:https://github.com/Nightonke/FaceOffToggleButton\n\n26. undoBar\n\n    带有撤销功能的button，效果：\n\n    ![button](https://camo.githubusercontent.com/a32255c0a1f5abe56607d46bb9782b8f338fd9e3/68747470733a2f2f7261772e6769746875622e636f6d2f6a656e7a7a2f416e64726f69642d556e646f4261722f6d61737465722f6173736574732f53637265656e73686f74352e706e67)\n\n    github:https://github.com/jenzz/Android-UndoBar\n\n27. BootstrapButton\n\n    具有字形效果的button，效果：\n\n    ![button](https://camo.githubusercontent.com/51755d59ed6fd53158a0d84696e6d184c3a6f4d5/68747470733a2f2f7261772e6769746875622e636f6d2f426561726465642d48656e2f416e64726f69642d426f6f7473747261702f6d61737465722f696d616765732f626f6f7473747261705f627574746f6e2e706e67)\n\n    github:https://github.com/Bearded-Hen/Android-Bootstrap\n\n28. LiquidButton\n\n    又是一个加载的button，效果：\n\n    ![button](https://camo.githubusercontent.com/6e51af802823444540390be079ecad75ef60019e/68747470733a2f2f6431337961637572716a676172612e636c6f756466726f6e742e6e65742f75736572732f3333303137342f73637265656e73686f74732f323639353630302f636f6d705f322e676966)\n\n    github:https://github.com/yoruriko/LiquidButton\n\n29. MagicButton\n\n    简单的变形button，效果：\n\n    ![button](https://github.com/daniel-martins-IR/MagicButton/raw/master/app/src/main/res/drawable/giphy.gif)\n\n    github:https://github.com/daniel-martins-ir/MagicButton\n\n30. RingButton\n\n    可以一分为二的button，各自有各自的图标和点击事件，效果：\n\n    ![button](https://github.com/yankai-victor/RingButton/raw/master/image/Screenshot.png)\n\n    github:https://github.com/yankai-victor/RingButton\n\n31. ​","slug":"Android开源控件搜集--Button","published":1,"updated":"2017-03-28T09:40:14.951Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ndxcc0000788owtcuto0gx","content":"<h1 id=\"Android开源控件搜集–Button\"><a href=\"#Android开源控件搜集–Button\" class=\"headerlink\" title=\"Android开源控件搜集–Button\"></a>Android开源控件搜集–Button</h1><p><strong>Note：</strong>本篇博客长期维护更新，欢迎各位网友共同合作，共享知识与技术。</p>\n<p>本篇博客主要搜集个人任务比较优秀的Android开源控件，大多来自github，并附上链接，自己学习之余，亦希望于大家有所帮助。</p>\n<p>Android的控件还算比较多，官方和第三方自定义优秀控件数不胜数，搜集难免不全，逐步更新丰富吧。</p>\n<h2 id=\"Button\"><a href=\"#Button\" class=\"headerlink\" title=\"Button\"></a>Button</h2><p>Button可以说是Android中仅次于Text View的，比较重要的一个控件，下面主要是搜集一些第三方优化效果的Button,其中有的也算是菜单Menu，或者progressbar，以后再修改分类吧。</p>\n<ol>\n<li><p>FloatingActionButton </p>\n<p>悬浮式的actionbutton，效果：</p>\n<p><img src=\"https://github.com/futuresimple/android-floating-action-button/raw/master/screenshots/menu.gif\" alt=\"floatingbutton\"></p>\n<p>github:<a href=\"https://github.com/futuresimple/android-floating-action-button\" target=\"_blank\" rel=\"external\">https://github.com/futuresimple/android-floating-action-button</a></p>\n</li>\n<li><p>floatingButton</p>\n<p>类似上面，这是一个可以监视滑动事件的floatingButton，效果：</p>\n<p><img src=\"https://github.com/makovkastar/FloatingActionButton/raw/master/art/demo.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/makovkastar/FloatingActionButton\" target=\"_blank\" rel=\"external\">https://github.com/makovkastar/FloatingActionButton</a></p>\n</li>\n<li><p>circularProgressbutton</p>\n<p>带有圆形进度的button，效果：</p>\n<p><img src=\"https://github.com/dmytrodanylyk/circular-progress-button/raw/master/screenshots/intro.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/dmytrodanylyk/circular-progress-button\" target=\"_blank\" rel=\"external\">https://github.com/dmytrodanylyk/circular-progress-button</a></p>\n</li>\n<li><p>FloatingButton</p>\n<p>这个真是个全面的悬浮按钮button，效果：</p>\n<p><img src=\"https://github.com/Clans/FloatingActionButton/raw/master/screenshots/menu_custom_opened.png\" alt=\"button\"></p>\n<p><img src=\"https://github.com/Clans/FloatingActionButton/raw/master/screenshots/progress_background.png\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/Clans/FloatingActionButton\" target=\"_blank\" rel=\"external\">https://github.com/Clans/FloatingActionButton</a></p>\n</li>\n<li><p>SwitchButton</p>\n<p>包含各式各样的开关button，效果：</p>\n<p><img src=\"https://github.com/kyleduo/SwitchButton/raw/master/preview/demo_140.jpg\" alt=\"switch\"></p>\n<p>github:<a href=\"https://github.com/kyleduo/SwitchButton\" target=\"_blank\" rel=\"external\">https://github.com/kyleduo/SwitchButton</a></p>\n</li>\n<li><p>ProcessButton</p>\n<p>带有进度加载的Button，效果：</p>\n<p><img src=\"https://github.com/dmytrodanylyk/android-process-button/raw/master/screenshots/sample1_small2.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/dmytrodanylyk/android-process-button\" target=\"_blank\" rel=\"external\">https://github.com/dmytrodanylyk/android-process-button</a></p>\n</li>\n<li><p>ShineButton</p>\n<p>点赞的Button，效果：</p>\n<p><img src=\"https://github.com/ChadCSong/ShineButton/raw/master/demo_shine_others.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/ChadCSong/ShineButton\" target=\"_blank\" rel=\"external\">https://github.com/ChadCSong/ShineButton</a></p>\n</li>\n<li><p>ToggleButton</p>\n<p>类似IOS开关效果的button，效果：</p>\n<p><img src=\"https://github.com/zcweng/ToggleButton/raw/master/ToggleButtonSample/21879.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/zcweng/ToggleButton\" target=\"_blank\" rel=\"external\">https://github.com/zcweng/ToggleButton</a></p>\n</li>\n<li><p>FlatButton</p>\n<p>扁平风格的可变色button，效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/hoang8f/android-flat-button/master/screenshot/screenshot.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/hoang8f/android-flat-button\" target=\"_blank\" rel=\"external\">https://github.com/hoang8f/android-flat-button</a></p>\n</li>\n<li><p>RapidFloatingButton</p>\n<p>好多floatingbutton啊，这个也是大同小异，效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/wangjiegulu/RapidFloatingActionButton/master/screenshot/rfab_card_view.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/wangjiegulu/RapidFloatingActionButton\" target=\"_blank\" rel=\"external\">https://github.com/wangjiegulu/RapidFloatingActionButton</a></p>\n</li>\n<li><p>ArrowDoanloadButton</p>\n<p>准确的说这个是progressbutton更合适，效果：</p>\n<p><img src=\"https://github.com/fenjuly/ArrowDownloadButton/raw/master/screenshots/arrowdownloadbutton.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/fenjuly/ArrowDownloadButton\" target=\"_blank\" rel=\"external\">https://github.com/fenjuly/ArrowDownloadButton</a></p>\n</li>\n<li><p>fab</p>\n<p>可以说是拥有不同效果的floatingbutton，效果：</p>\n<p><img src=\"https://github.com/Scalified/fab/raw/master/demo/animation_fade_in_fade_out.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/Scalified/fab\" target=\"_blank\" rel=\"external\">https://github.com/Scalified/fab</a></p>\n</li>\n<li><p>FloatingNavButton</p>\n<p>悬浮式的导航菜单按钮button，效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/andremion/Floating-Navigation-View/master/art/sample.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/andremion/Floating-Navigation-View\" target=\"_blank\" rel=\"external\">https://github.com/andremion/Floating-Navigation-View</a></p>\n</li>\n<li><p>FabButton</p>\n<p>都是floating了，效果：</p>\n<p><img src=\"https://github.com/ckurtm/FabButton/raw/master/example.gif?raw=true\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/ckurtm/FabButton\" target=\"_blank\" rel=\"external\">https://github.com/ckurtm/FabButton</a></p>\n</li>\n<li><p>JellyToggleButton</p>\n<p>花样繁多的togglebutton，效果：</p>\n<p><img src=\"https://github.com/Nightonke/JellyToggleButton/raw/master/img/JellyToggleButton4.gif?raw=true\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/Nightonke/JellyToggleButton\" target=\"_blank\" rel=\"external\">https://github.com/Nightonke/JellyToggleButton</a></p>\n</li>\n<li><p>fab</p>\n<p>又是一个fab，效果：</p>\n<p><img src=\"https://github.com/konifar/fab-transformation/raw/master/art/transform_to_toolbar.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/konifar/fab-transformation\" target=\"_blank\" rel=\"external\">https://github.com/konifar/fab-transformation</a></p>\n</li>\n<li><p>morphingButton</p>\n<p>进度变形的button，效果：</p>\n<p><img src=\"https://github.com/dmytrodanylyk/android-morphing-button/raw/master/screenshots/intro1.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/dmytrodanylyk/android-morphing-button\" target=\"_blank\" rel=\"external\">https://github.com/dmytrodanylyk/android-morphing-button</a></p>\n</li>\n<li><p>gooeyMenu</p>\n<p>粘性泡泡效果的菜单button，效果：</p>\n<p><img src=\"https://github.com/anshulagarwal2k/GooeyMenu/raw/master/gooeyeffect.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/anshulagarwal2k/GooeyMenu\" target=\"_blank\" rel=\"external\">https://github.com/anshulagarwal2k/GooeyMenu</a></p>\n</li>\n<li><p>SatelliteMenu</p>\n<p>卫星菜单button，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/69c60ccfcc45203014ad793da924d2ca10ef0a65/687474703a2f2f692e696d6775722e636f6d2f3049676b6b74642e706e67\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/siyamed/android-satellite-menu\" target=\"_blank\" rel=\"external\">https://github.com/siyamed/android-satellite-menu</a></p>\n</li>\n<li><p>TagGroup</p>\n<p>tag标签，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/8adbb5c44c656151cb108ada6d1383e2c6af38b7/687474703a2f2f7777342e73696e61696d672e636e2f6c617267652f62636532646561396a7731657362736279397635666a323075303077386a78782e6a7067\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/2dxgujun/AndroidTagGroup/\" target=\"_blank\" rel=\"external\">https://github.com/2dxgujun/AndroidTagGroup/</a></p>\n</li>\n<li><p>ArcMenu</p>\n<p>环形菜单button，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/7c3d707678e6aa187cdf2ee3ac701d77fba92f48/68747470733a2f2f646c2e64726f70626f782e636f6d2f752f31313336393638372f70726576696577312e706e67\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/daCapricorn/ArcMenu\" target=\"_blank\" rel=\"external\">https://github.com/daCapricorn/ArcMenu</a></p>\n</li>\n<li><p>StateButton</p>\n<p>包含多种select效果的button，效果：</p>\n<p><img src=\"https://github.com/niniloveyou/StateButton/raw/master/stateButton.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/niniloveyou/StateButton\" target=\"_blank\" rel=\"external\">https://github.com/niniloveyou/StateButton</a></p>\n</li>\n<li><p>AllAnagleButton</p>\n<p>综合卫星菜单和环形菜单的一个button，效果：</p>\n<p><img src=\"https://github.com/uin3566/AllAngleExpandableButton/raw/master/screenshot/demo.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/uin3566/AllAngleExpandableButton\" target=\"_blank\" rel=\"external\">https://github.com/uin3566/AllAngleExpandableButton</a></p>\n</li>\n<li><p>ShareButton</p>\n<p>简单含有分享模块的button，效果：</p>\n<p><img src=\"https://github.com/kayan1990/ShareButton/raw/master/ShareButton/gif/sharebutton.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/kayan1990/ShareButton\" target=\"_blank\" rel=\"external\">https://github.com/kayan1990/ShareButton</a></p>\n</li>\n<li><p>faceOffButton</p>\n<p>一个修改带有笑脸的togglebutton，效果：</p>\n<p><img src=\"https://github.com/Nightonke/FaceOffToggleButton/raw/master/img/Animation.gif?raw=true\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/Nightonke/FaceOffToggleButton\" target=\"_blank\" rel=\"external\">https://github.com/Nightonke/FaceOffToggleButton</a></p>\n</li>\n<li><p>undoBar</p>\n<p>带有撤销功能的button，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/a32255c0a1f5abe56607d46bb9782b8f338fd9e3/68747470733a2f2f7261772e6769746875622e636f6d2f6a656e7a7a2f416e64726f69642d556e646f4261722f6d61737465722f6173736574732f53637265656e73686f74352e706e67\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/jenzz/Android-UndoBar\" target=\"_blank\" rel=\"external\">https://github.com/jenzz/Android-UndoBar</a></p>\n</li>\n<li><p>BootstrapButton</p>\n<p>具有字形效果的button，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/51755d59ed6fd53158a0d84696e6d184c3a6f4d5/68747470733a2f2f7261772e6769746875622e636f6d2f426561726465642d48656e2f416e64726f69642d426f6f7473747261702f6d61737465722f696d616765732f626f6f7473747261705f627574746f6e2e706e67\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/Bearded-Hen/Android-Bootstrap\" target=\"_blank\" rel=\"external\">https://github.com/Bearded-Hen/Android-Bootstrap</a></p>\n</li>\n<li><p>LiquidButton</p>\n<p>又是一个加载的button，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/6e51af802823444540390be079ecad75ef60019e/68747470733a2f2f6431337961637572716a676172612e636c6f756466726f6e742e6e65742f75736572732f3333303137342f73637265656e73686f74732f323639353630302f636f6d705f322e676966\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/yoruriko/LiquidButton\" target=\"_blank\" rel=\"external\">https://github.com/yoruriko/LiquidButton</a></p>\n</li>\n<li><p>MagicButton</p>\n<p>简单的变形button，效果：</p>\n<p><img src=\"https://github.com/daniel-martins-IR/MagicButton/raw/master/app/src/main/res/drawable/giphy.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/daniel-martins-ir/MagicButton\" target=\"_blank\" rel=\"external\">https://github.com/daniel-martins-ir/MagicButton</a></p>\n</li>\n<li><p>RingButton</p>\n<p>可以一分为二的button，各自有各自的图标和点击事件，效果：</p>\n<p><img src=\"https://github.com/yankai-victor/RingButton/raw/master/image/Screenshot.png\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/yankai-victor/RingButton\" target=\"_blank\" rel=\"external\">https://github.com/yankai-victor/RingButton</a></p>\n</li>\n<li><p>​</p>\n</li>\n</ol>\n","excerpt":"","more":"<h1 id=\"Android开源控件搜集–Button\"><a href=\"#Android开源控件搜集–Button\" class=\"headerlink\" title=\"Android开源控件搜集–Button\"></a>Android开源控件搜集–Button</h1><p><strong>Note：</strong>本篇博客长期维护更新，欢迎各位网友共同合作，共享知识与技术。</p>\n<p>本篇博客主要搜集个人任务比较优秀的Android开源控件，大多来自github，并附上链接，自己学习之余，亦希望于大家有所帮助。</p>\n<p>Android的控件还算比较多，官方和第三方自定义优秀控件数不胜数，搜集难免不全，逐步更新丰富吧。</p>\n<h2 id=\"Button\"><a href=\"#Button\" class=\"headerlink\" title=\"Button\"></a>Button</h2><p>Button可以说是Android中仅次于Text View的，比较重要的一个控件，下面主要是搜集一些第三方优化效果的Button,其中有的也算是菜单Menu，或者progressbar，以后再修改分类吧。</p>\n<ol>\n<li><p>FloatingActionButton </p>\n<p>悬浮式的actionbutton，效果：</p>\n<p><img src=\"https://github.com/futuresimple/android-floating-action-button/raw/master/screenshots/menu.gif\" alt=\"floatingbutton\"></p>\n<p>github:<a href=\"https://github.com/futuresimple/android-floating-action-button\">https://github.com/futuresimple/android-floating-action-button</a></p>\n</li>\n<li><p>floatingButton</p>\n<p>类似上面，这是一个可以监视滑动事件的floatingButton，效果：</p>\n<p><img src=\"https://github.com/makovkastar/FloatingActionButton/raw/master/art/demo.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/makovkastar/FloatingActionButton\">https://github.com/makovkastar/FloatingActionButton</a></p>\n</li>\n<li><p>circularProgressbutton</p>\n<p>带有圆形进度的button，效果：</p>\n<p><img src=\"https://github.com/dmytrodanylyk/circular-progress-button/raw/master/screenshots/intro.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/dmytrodanylyk/circular-progress-button\">https://github.com/dmytrodanylyk/circular-progress-button</a></p>\n</li>\n<li><p>FloatingButton</p>\n<p>这个真是个全面的悬浮按钮button，效果：</p>\n<p><img src=\"https://github.com/Clans/FloatingActionButton/raw/master/screenshots/menu_custom_opened.png\" alt=\"button\"></p>\n<p><img src=\"https://github.com/Clans/FloatingActionButton/raw/master/screenshots/progress_background.png\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/Clans/FloatingActionButton\">https://github.com/Clans/FloatingActionButton</a></p>\n</li>\n<li><p>SwitchButton</p>\n<p>包含各式各样的开关button，效果：</p>\n<p><img src=\"https://github.com/kyleduo/SwitchButton/raw/master/preview/demo_140.jpg\" alt=\"switch\"></p>\n<p>github:<a href=\"https://github.com/kyleduo/SwitchButton\">https://github.com/kyleduo/SwitchButton</a></p>\n</li>\n<li><p>ProcessButton</p>\n<p>带有进度加载的Button，效果：</p>\n<p><img src=\"https://github.com/dmytrodanylyk/android-process-button/raw/master/screenshots/sample1_small2.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/dmytrodanylyk/android-process-button\">https://github.com/dmytrodanylyk/android-process-button</a></p>\n</li>\n<li><p>ShineButton</p>\n<p>点赞的Button，效果：</p>\n<p><img src=\"https://github.com/ChadCSong/ShineButton/raw/master/demo_shine_others.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/ChadCSong/ShineButton\">https://github.com/ChadCSong/ShineButton</a></p>\n</li>\n<li><p>ToggleButton</p>\n<p>类似IOS开关效果的button，效果：</p>\n<p><img src=\"https://github.com/zcweng/ToggleButton/raw/master/ToggleButtonSample/21879.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/zcweng/ToggleButton\">https://github.com/zcweng/ToggleButton</a></p>\n</li>\n<li><p>FlatButton</p>\n<p>扁平风格的可变色button，效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/hoang8f/android-flat-button/master/screenshot/screenshot.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/hoang8f/android-flat-button\">https://github.com/hoang8f/android-flat-button</a></p>\n</li>\n<li><p>RapidFloatingButton</p>\n<p>好多floatingbutton啊，这个也是大同小异，效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/wangjiegulu/RapidFloatingActionButton/master/screenshot/rfab_card_view.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/wangjiegulu/RapidFloatingActionButton\">https://github.com/wangjiegulu/RapidFloatingActionButton</a></p>\n</li>\n<li><p>ArrowDoanloadButton</p>\n<p>准确的说这个是progressbutton更合适，效果：</p>\n<p><img src=\"https://github.com/fenjuly/ArrowDownloadButton/raw/master/screenshots/arrowdownloadbutton.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/fenjuly/ArrowDownloadButton\">https://github.com/fenjuly/ArrowDownloadButton</a></p>\n</li>\n<li><p>fab</p>\n<p>可以说是拥有不同效果的floatingbutton，效果：</p>\n<p><img src=\"https://github.com/Scalified/fab/raw/master/demo/animation_fade_in_fade_out.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/Scalified/fab\">https://github.com/Scalified/fab</a></p>\n</li>\n<li><p>FloatingNavButton</p>\n<p>悬浮式的导航菜单按钮button，效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/andremion/Floating-Navigation-View/master/art/sample.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/andremion/Floating-Navigation-View\">https://github.com/andremion/Floating-Navigation-View</a></p>\n</li>\n<li><p>FabButton</p>\n<p>都是floating了，效果：</p>\n<p><img src=\"https://github.com/ckurtm/FabButton/raw/master/example.gif?raw=true\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/ckurtm/FabButton\">https://github.com/ckurtm/FabButton</a></p>\n</li>\n<li><p>JellyToggleButton</p>\n<p>花样繁多的togglebutton，效果：</p>\n<p><img src=\"https://github.com/Nightonke/JellyToggleButton/raw/master/img/JellyToggleButton4.gif?raw=true\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/Nightonke/JellyToggleButton\">https://github.com/Nightonke/JellyToggleButton</a></p>\n</li>\n<li><p>fab</p>\n<p>又是一个fab，效果：</p>\n<p><img src=\"https://github.com/konifar/fab-transformation/raw/master/art/transform_to_toolbar.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/konifar/fab-transformation\">https://github.com/konifar/fab-transformation</a></p>\n</li>\n<li><p>morphingButton</p>\n<p>进度变形的button，效果：</p>\n<p><img src=\"https://github.com/dmytrodanylyk/android-morphing-button/raw/master/screenshots/intro1.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/dmytrodanylyk/android-morphing-button\">https://github.com/dmytrodanylyk/android-morphing-button</a></p>\n</li>\n<li><p>gooeyMenu</p>\n<p>粘性泡泡效果的菜单button，效果：</p>\n<p><img src=\"https://github.com/anshulagarwal2k/GooeyMenu/raw/master/gooeyeffect.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/anshulagarwal2k/GooeyMenu\">https://github.com/anshulagarwal2k/GooeyMenu</a></p>\n</li>\n<li><p>SatelliteMenu</p>\n<p>卫星菜单button，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/69c60ccfcc45203014ad793da924d2ca10ef0a65/687474703a2f2f692e696d6775722e636f6d2f3049676b6b74642e706e67\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/siyamed/android-satellite-menu\">https://github.com/siyamed/android-satellite-menu</a></p>\n</li>\n<li><p>TagGroup</p>\n<p>tag标签，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/8adbb5c44c656151cb108ada6d1383e2c6af38b7/687474703a2f2f7777342e73696e61696d672e636e2f6c617267652f62636532646561396a7731657362736279397635666a323075303077386a78782e6a7067\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/2dxgujun/AndroidTagGroup/\">https://github.com/2dxgujun/AndroidTagGroup/</a></p>\n</li>\n<li><p>ArcMenu</p>\n<p>环形菜单button，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/7c3d707678e6aa187cdf2ee3ac701d77fba92f48/68747470733a2f2f646c2e64726f70626f782e636f6d2f752f31313336393638372f70726576696577312e706e67\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/daCapricorn/ArcMenu\">https://github.com/daCapricorn/ArcMenu</a></p>\n</li>\n<li><p>StateButton</p>\n<p>包含多种select效果的button，效果：</p>\n<p><img src=\"https://github.com/niniloveyou/StateButton/raw/master/stateButton.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/niniloveyou/StateButton\">https://github.com/niniloveyou/StateButton</a></p>\n</li>\n<li><p>AllAnagleButton</p>\n<p>综合卫星菜单和环形菜单的一个button，效果：</p>\n<p><img src=\"https://github.com/uin3566/AllAngleExpandableButton/raw/master/screenshot/demo.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/uin3566/AllAngleExpandableButton\">https://github.com/uin3566/AllAngleExpandableButton</a></p>\n</li>\n<li><p>ShareButton</p>\n<p>简单含有分享模块的button，效果：</p>\n<p><img src=\"https://github.com/kayan1990/ShareButton/raw/master/ShareButton/gif/sharebutton.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/kayan1990/ShareButton\">https://github.com/kayan1990/ShareButton</a></p>\n</li>\n<li><p>faceOffButton</p>\n<p>一个修改带有笑脸的togglebutton，效果：</p>\n<p><img src=\"https://github.com/Nightonke/FaceOffToggleButton/raw/master/img/Animation.gif?raw=true\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/Nightonke/FaceOffToggleButton\">https://github.com/Nightonke/FaceOffToggleButton</a></p>\n</li>\n<li><p>undoBar</p>\n<p>带有撤销功能的button，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/a32255c0a1f5abe56607d46bb9782b8f338fd9e3/68747470733a2f2f7261772e6769746875622e636f6d2f6a656e7a7a2f416e64726f69642d556e646f4261722f6d61737465722f6173736574732f53637265656e73686f74352e706e67\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/jenzz/Android-UndoBar\">https://github.com/jenzz/Android-UndoBar</a></p>\n</li>\n<li><p>BootstrapButton</p>\n<p>具有字形效果的button，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/51755d59ed6fd53158a0d84696e6d184c3a6f4d5/68747470733a2f2f7261772e6769746875622e636f6d2f426561726465642d48656e2f416e64726f69642d426f6f7473747261702f6d61737465722f696d616765732f626f6f7473747261705f627574746f6e2e706e67\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/Bearded-Hen/Android-Bootstrap\">https://github.com/Bearded-Hen/Android-Bootstrap</a></p>\n</li>\n<li><p>LiquidButton</p>\n<p>又是一个加载的button，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/6e51af802823444540390be079ecad75ef60019e/68747470733a2f2f6431337961637572716a676172612e636c6f756466726f6e742e6e65742f75736572732f3333303137342f73637265656e73686f74732f323639353630302f636f6d705f322e676966\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/yoruriko/LiquidButton\">https://github.com/yoruriko/LiquidButton</a></p>\n</li>\n<li><p>MagicButton</p>\n<p>简单的变形button，效果：</p>\n<p><img src=\"https://github.com/daniel-martins-IR/MagicButton/raw/master/app/src/main/res/drawable/giphy.gif\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/daniel-martins-ir/MagicButton\">https://github.com/daniel-martins-ir/MagicButton</a></p>\n</li>\n<li><p>RingButton</p>\n<p>可以一分为二的button，各自有各自的图标和点击事件，效果：</p>\n<p><img src=\"https://github.com/yankai-victor/RingButton/raw/master/image/Screenshot.png\" alt=\"button\"></p>\n<p>github:<a href=\"https://github.com/yankai-victor/RingButton\">https://github.com/yankai-victor/RingButton</a></p>\n</li>\n<li><p>​</p>\n</li>\n</ol>\n"},{"title":"Android网络连接与云服务","date":"2017-03-27T08:57:00.000Z","author":"冰路梦","_content":"# Android学习笔记第五篇--网络连接与云服务\n\n## 第一章、无线连接设备\n\n​\t除了能够在云端通讯，Android的无线API也允许在同一局域网内的设备通讯，**甚至没有连接网络，而是物理具体相近，也可以相互通讯。**Network Service Discovery 简称NSD可以允许应用相互通讯发现附近设备。\n\n​\t本节主要介绍Android应用发现与连接其他设备的API。主要介绍NSD的API和点对点无线(the Wi-Fi Peer-to-Peer)API。\n\n### 1、使用网络服务发现(NSD)\n\n添加NSD服务到App中，可以使用户辨识在局域网内支持app请求的设备。有助于更好的实现文件共享、联机游戏等服务需求。\n\n- 注册NSD服务\n\n  > **Note:**注册NSD服务为非必选项，若是不关注本地网络的广播，则可以不用注册。\n\n  在局域网内注册自身服务首先要创建`NsdServiceInfo`对象。\n\n  ```java\n  public void registerService(int port){\n    //创建并初始化NSD对象\n    NsdServiceInfo serviceInfo = new NsdServiceInfo();\n    //服务名称要保证唯一性\n    serviceInfo.serServiceName(\"NsdChat\");\n    //指定协议和传输层，如指定打印服务\"_ipp._tcp\"\n    serviceInfo.setServiceType(\"_http._tcp.\");\n    serviceInfo.setPort(port);\n    .....\n  }\n  ```\n\n  如上创建了一个NSD服务，并设置了名称、服务类型。其中服务类型制定的是应用使用的协议和传输层。语法是`_<protocol>._<transportlayer>`。\n\n  > **Note:**互联网编号分配机构(International Assigned Numbers Authority)提供用于服务发现协议，如NSD和Bonjour等。\n\n  服务端口号应避免硬代码，以便于可以动态更改端口号，并更新通知。\n\n  ```java\n  public void initializeServerSocket(){\n    //初始化一个server socket，指定下面的端口\n    mServiceSocket = new ServerSocket(0);\n    //存储选择的端口号\n    mLocalPort = mServerSocket.getLocalPort();\n    ......\n  }\n  ```\n\n  至此已经创建了`NsdServiceInfo`对象，接着要实现`RegistrationListener`接口，实现注册功能。\n\n  ```java\n  public void initializeRegistrationListener(){\n    mRegistrationListener = new NsdManager.RegistrationListener(){\n      @Override\n      public void onServiceRegistered(NsdServiceInfo nsdServiceInfo){\n        //需要更新已经保存的注册服务名称，因为它需要唯一性，若是命名冲突，Android会自动解决冲突，此处就需要更新获取。\n        mServiceName = nsdServiceInfo.getServiceName();\n      }\n      @Override\n      public void onRegistrationFailed(NsdServiceInfo serviceInfo,int errorCode){\n       //注册失败时候，在此处可以记录日志 \n      }\n      @Override\n      public void onServiceUnregistered(NsdServiceInfo arg0){\n        //注销服务，只有通过NsdManager来注销才会调用这里。\n      }\n      \n      @Override\n      public void onUnregistrationFailed(NsdService serviceInfo,int errorCode){\n       //注销失败，记录日志 \n      }\n    };\n  }\n  ```\n\n  因为`registerService()`方法是异步的，在注册服务之后的操作，需要在`onServiceRegistered()`方法中进行。\n\n  ```java\n  public void registerService(int port){\n    NsdServiceInfo serviceInfo = new NsdServiceInfo();\n    serviceInfo.setServiceName(\"NsdChat\");\n    serviceInfo.setServiceType(\"_http._tcp.\");\n    serviceInfo.setPort(Port);\n    \n    mNsdManager = Context.getSystemService(Context.NSD_SERVICE);\n    mNsdManager.registerService(serviceInfo,NsdManager.PROTOCOL_DNS_SD,mRegistrationListener);\n  }\n  ```\n\n- 发现网络中的服务\n\n  发现网络服务需要两步：\n\n  - 注册网络监听器\n  - 调用`discoverServices()`异步API\n\n  1、创建`NsdManager.DiscoveryListener`接口的实现类。\n\n  ```java\n  public void initializeDiscoveryListener(){\n    //实例化网络发现监听器\n    mDiscoverListener = new NsdManager.DiscoveryListener(){\n      //发现服务时候调用该方法\n      @Override\n      public void onDiscoveryStarted(String regType){\n        Log.d(TAG,\"Service discovery started\");\n      }\n      @Override\n          public void onServiceFound(NsdServiceInfo service) {\n              // A service was found!  Do something with it.\n              Log.d(TAG, \"Service discovery success\" + service);\n              if (!service.getServiceType().equals(SERVICE_TYPE)) {\n                  // Service type is the string containing the protocol and\n                  // transport layer for this service.\n                  Log.d(TAG, \"Unknown Service Type: \" + service.getServiceType());\n              } else if (service.getServiceName().equals(mServiceName)) {\n                  // The name of the service tells the user what they'd be\n                  // connecting to. It could be \"Bob's Chat App\".\n                  Log.d(TAG, \"Same machine: \" + mServiceName);\n              } else if (service.getServiceName().contains(\"NsdChat\")){\n                  mNsdManager.resolveService(service, mResolveListener);\n              }\n          }\n\n          @Override\n          public void onServiceLost(NsdServiceInfo service) {\n              // When the network service is no longer available.\n              // Internal bookkeeping code goes here.\n              Log.e(TAG, \"service lost\" + service);\n          }\n\n          @Override\n          public void onDiscoveryStopped(String serviceType) {\n              Log.i(TAG, \"Discovery stopped: \" + serviceType);\n          }\n\n          @Override\n          public void onStartDiscoveryFailed(String serviceType, int errorCode) {\n              Log.e(TAG, \"Discovery failed: Error code:\" + errorCode);\n              mNsdManager.stopServiceDiscovery(this);\n          }\n\n          @Override\n          public void onStopDiscoveryFailed(String serviceType, int errorCode) {\n              Log.e(TAG, \"Discovery failed: Error code:\" + errorCode);\n              mNsdManager.stopServiceDiscovery(this);\n          }\n      };\n    }\n  }\n  ```\n\n  `NSD API`通过使用该接口中的方法，可以对网络服务状态进行监控。设置好监听器后，调用`discoverService()`函数：\n\n  ```java\n  mNsdManager.discoveryService(SERVICE_TYPE,NsdManager.PROTOCOL_DNS_SD,mDiscoveryListener);\n  ```\n\n- 连接到网络上的服务\n\n  发现网络上的可接入服务时，首先调用resolveService()方法，来确定服务连接信息。实现`NsdManage.ResolveListener`对象并将其传入`resolveService()`方法，并使用该对象获得`NsdSerServiceInfo`。\n\n  ```java\n  public void initializeResolveListener(){\n    mResolveListener = new NsdManager.ResolveListener(){\n      @Override\n          public void onResolveFailed(NsdServiceInfo serviceInfo, int errorCode) {\n              // Called when the resolve fails.  Use the error code to debug.\n              Log.e(TAG, \"Resolve failed\" + errorCode);\n          }\n\n          @Override\n          public void onServiceResolved(NsdServiceInfo serviceInfo) {\n              Log.e(TAG, \"Resolve Succeeded. \" + serviceInfo);\n\n              if (serviceInfo.getServiceName().equals(mServiceName)) {\n                  Log.d(TAG, \"Same IP.\");\n                  return;\n              }\n              mService = serviceInfo;\n              int port = mService.getPort();\n              InetAddress host = mService.getHost();\n          }\n    };\n  }\n  ```\n\n  至此完成服务接入，即可实现本地与之通讯。\n\n- 程序退出注销服务\n\n  使用NSD服务是比较消耗资源的，而且重复链接会导致问题，所以需要在app生命周期内的合适阶段开启、关闭服务。\n\n  ```java\n  //Activity\n  \t@Override\n      protected void onPause() {\n          if (mNsdHelper != null) {\n              mNsdHelper.tearDown();\n          }\n          super.onPause();\n      }\n\n      @Override\n      protected void onResume() {\n          super.onResume();\n          if (mNsdHelper != null) {\n              mNsdHelper.registerService(mConnection.getLocalPort());\n              mNsdHelper.discoverServices();\n          }\n      }\n\n      @Override\n      protected void onDestroy() {\n          mNsdHelper.tearDown();\n          mConnection.tearDown();\n          super.onDestroy();\n      }\n\n      // NsdHelper's tearDown method\n          public void tearDown() {\n          mNsdManager.unregisterService(mRegistrationListener);\n          mNsdManager.stopServiceDiscovery(mDiscoveryListener);\n      }\n  ```\n\n### 2、使用WiFi建立P2P连接\n\nWiFi点对点(P2P)API允许应用程序在无需连接到网络和热点的情况下连接到附近的设备。相比于蓝牙技术，其具有加大的连接范围。\n\n- 配置应用权限\n\n  使用Wi-Fi P2P技术需要添加`CHANGE_WIFI_STATE`,`ACCESS_WIFI_STATE`以及`INTERNET`三种权限，因为虽然Wi-Fi P2P技术可以不用访问互联网，但是它使用的是`Java socket`的标准，所以需要`INTERNET`权限。\n\n  ```xml\n  <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n            package=\"com.example.android.nsdchat\"\n            ...\n  \t<uses-permission\n          android:required=\"true\"\n          android:name=\"android.permission.ACCESS_WIFI_STATE\"/>\n  \t<uses-permission\n          android:required=\"true\"\n          android:name=\"android.permission.CHANGE_WIFI_STATE\"/>\n      <uses-permission\n          android:required=\"true\"\n          android:name=\"android.permission.INTERNET\"/>\n      ...\n  ```\n\n- 设置广播接收器和P2P管理器\n\n  使用WiFi P2P时，需要侦听事件发生时的broadcast intent。需要`IntentFilter`\n\n  - `WIFI_P2P_STATE_CHANGED_ACTION`指示Wi-Fi P2P是否开启\n  - `WIFI_P2P_PEERS_CHANGED_ACTION`代表对等列表节点发生了变化。\n  - `WIFI_P2P_CONNECTION_CHANGED_ACTION`表明Wi-Fi P2P连接状态发生了变化。\n  - `WIFI_P2P_THIS_DEVICE_CHANGED_ACTION`指示设备详细配置发生了变化。\n\n  ```java\n  private final IntentFilter intentFilter = new IntentFilter();\n  ...\n  @Override\n  public void onCreate(Bundle savedInstanceState) {\n      super.onCreate(savedInstanceState);\n      setContentView(R.layout.main);\n\n      //  Indicates a change in the Wi-Fi P2P status.\n      intentFilter.addAction(WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION);\n\n      // Indicates a change in the list of available peers.\n      intentFilter.addAction(WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION);\n\n      // Indicates the state of Wi-Fi P2P connectivity has changed.\n      intentFilter.addAction(WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION);\n\n      // Indicates this device's details have changed.\n      intentFilter.addAction(WifiP2pManager.WIFI_P2P_THIS_DEVICE_CHANGED_ACTION);\n\n      ...\n  }\n  ```\n\n  在`onCreate()`方法的最后，需要获得`WifiP2pManager`的实例，并调用他的`initailize()`方法，以获得`WifiP2pManager.Channel`对象.\n\n  ```java\n  Channel mChannel;\n  @Override\n  public void onCreate(Bundle savedInstanceState){\n    ...\n      mManager = (WifiP2pManager)getSystemService(Context.WIFI_P2P_SERVICE);\n  \tmChannel = mManager.initialize(this,getMainLooper(),null);\n  }\n  ```\n\n  然后创建广播接收着，监听上述不同的P2P状态变化。\n\n  ```java\n  @Override\n      public void onReceive(Context context, Intent intent) {\n          String action = intent.getAction();\n          if (WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION.equals(action)) {\n              // Determine if Wifi P2P mode is enabled or not, alert\n              // the Activity.\n              int state = intent.getIntExtra(WifiP2pManager.EXTRA_WIFI_STATE, -1);\n              if (state == WifiP2pManager.WIFI_P2P_STATE_ENABLED) {\n                  activity.setIsWifiP2pEnabled(true);\n              } else {\n                  activity.setIsWifiP2pEnabled(false);\n              }\n          } else if (WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION.equals(action)) {\n\n              // The peer list has changed!  We should probably do something about\n              // that.\n\n          } else if (WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION.equals(action)) {\n\n              // Connection state changed!  We should probably do something about\n              // that.\n\n          } else if (WifiP2pManager.WIFI_P2P_THIS_DEVICE_CHANGED_ACTION.equals(action)) {\n              DeviceListFragment fragment = (DeviceListFragment) activity.getFragmentManager()\n                      .findFragmentById(R.id.frag_list);\n              fragment.updateThisDevice((WifiP2pDevice) intent.getParcelableExtra(\n                      WifiP2pManager.EXTRA_WIFI_P2P_DEVICE));\n\n          }\n      }\n  ```\n\n  并在Activity启动时，注册广播，添加过滤器。Activity暂停或者关闭时候，注销广播。\n\n  ```java\n   //在Activity启动后注册广播\n      @Override\n      public void onResume() {\n          super.onResume();\n          receiver = new WiFiDirectBroadcastReceiver(mManager, mChannel, this);\n          registerReceiver(receiver, intentFilter);\n      }\n  //Activity关闭前，注销广播。\n      @Override\n      public void onPause() {\n          super.onPause();\n          unregisterReceiver(receiver);\n      }\n  ```\n\n- 初始化对等节点发现(Peer Discovery)\n\n  调用`discoveryPeers()`开始搜寻附近设备，需要传入参数\n\n  - 上面得到的`WifiP2pManager.Channel`对象。\n  - 对`WifiP2pManager.ActionListener`接口的实现，确定发现成功与失败时候的事件处理。\n\n  ```java\n  mManager.discoverPeers(mChannel, new WifiP2pManager.ActionListener() {\n\n          @Override\n          public void onSuccess() {\n              // Code for when the discovery initiation is successful goes here.\n              // No services have actually been discovered yet, so this method\n              // can often be left blank.  Code for peer discovery goes in the\n              // onReceive method, detailed below.\n          }\n\n          @Override\n          public void onFailure(int reasonCode) {\n              // Code for when the discovery initiation fails goes here.\n              // Alert the user that something went wrong.\n          }\n  });\n  ```\n\n  **注意：**如上仅仅完成了对匹配设备的发现扫描的初始化，`WifiP2pManager.ActionListener`中国年的方法会通知应用初始化是否正确等消息。\n\n- 获取对等节点列表\n\n  完成初始化后，扫描会得到匹配的附近设备列表信息。需要实现`WifiP2pManager.PeerListener`接口。\n\n  ```java\n  private List peers = new ArrayList();//匹配到的设备信息列表。\n      ...\n\n      private PeerListListener peerListListener = new PeerListListener() {\n          @Override\n          public void onPeersAvailable(WifiP2pDeviceList peerList) {\n\n              // Out with the old, in with the new.\n              peers.clear();\n              peers.addAll(peerList.getDeviceList());\n\n              // If an AdapterView is backed by this data, notify it\n              // of the change.  For instance, if you have a ListView of available\n              // peers, trigger an update.\n              ((WiFiPeerListAdapter) getListAdapter()).notifyDataSetChanged();\n              if (peers.size() == 0) {\n                  Log.d(WiFiDirectActivity.TAG, \"No devices found\");\n                  return;\n              }\n          }\n      }\n  ```\n\n  如上获得的匹配列表，我们需要将它传递给广播接收者做进一步处理。\n\n  ```java\n  public void onReceive(Context context,Intent intent){\n    ...\n  \telse if (WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION.equals(action)) {\n          // Request available peers from the wifi p2p manager. This is an\n          // asynchronous call and the calling activity is notified with a\n          // callback on PeerListListener.onPeersAvailable()\n          if (mManager != null) {\n              mManager.requestPeers(mChannel, peerListListener);\n          }\n          Log.d(WiFiDirectActivity.TAG, \"P2P peers changed\");\n      }...\n  }\n  ```\n\n- 连接一个对等节点\n\n  发现到附近可用设备，则可以进一步的连接它，需要创建一个新的WifiP2pConfig对象，并将连接信息从设备WifiP2pDevice拷贝到其中，调用connect()方法。\n\n  ```java\n      @Override\n      public void connect() {\n          // Picking the first device found on the network.\n          WifiP2pDevice device = peers.get(0);\n\n          WifiP2pConfig config = new WifiP2pConfig();\n          config.deviceAddress = device.deviceAddress;\n          config.wps.setup = WpsInfo.PBC;\n  \t\t//ActionListener仅实现通知初始化成功与否\n          mManager.connect(mChannel, config, new ActionListener() {\n\n              @Override\n              public void onSuccess() {\n                  // WiFiDirectBroadcastReceiver will notify us. Ignore for now.\n              }\n\n              @Override\n              public void onFailure(int reason) {\n                  Toast.makeText(WiFiDirectActivity.this, \"Connect failed. Retry.\",\n                          Toast.LENGTH_SHORT).show();\n              }\n          });\n      }\n  ```\n\n  使用`WifiP2pManager.ConnectionInfoListener`接口，`onConnectionInfoAvailable()`来确定连接状态。\n\n  ```java\n      @Override\n      public void onConnectionInfoAvailable(final WifiP2pInfo info) {\n\n          // InetAddress from WifiP2pInfo struct.\n          InetAddress groupOwnerAddress = info.groupOwnerAddress.getHostAddress());\n\n          // After the group negotiation, we can determine the group owner.\n          if (info.groupFormed && info.isGroupOwner) {\n              // Do whatever tasks are specific to the group owner.\n              // One common case is creating a server thread and accepting\n              // incoming connections.\n          } else if (info.groupFormed) {\n              // The other device acts as the client. In this case,\n              // you'll want to create a client thread that connects to the group\n              // owner.\n          }\n      }\n  ```\n\n  完善广播接收者的代码,监听到连接广播信号时候，请求连接。\n\n  ```java\n   ...\n          } else if (WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION.equals(action)) {\n\n              if (mManager == null) {\n                  return;\n              }\n\n              NetworkInfo networkInfo = (NetworkInfo) intent\n                      .getParcelableExtra(WifiP2pManager.EXTRA_NETWORK_INFO);\n\n              if (networkInfo.isConnected()) {\n\n                  // We are connected with the other device, request connection\n                  // info to find group owner IP\n\n                  mManager.requestConnectionInfo(mChannel, connectionListener);\n              }\n              ...\n  ```\n\n### 3、使用WiFi P2P服务\n\n第一节讲述了`NSD`服务用于局域网之间的连接通讯，本节的WiFi P2P有点类似，但是并不相同。\n\n- 配置Manifest\n\n  需要网络权限以及wifi相关权限。如上节所讲的三个权限，配置在Android manifest清单文件中。\n\n  ```xml\n  <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      package=\"com.example.android.nsdchat\"\n      ...\n\n      <uses-permission\n          android:required=\"true\"\n          android:name=\"android.permission.ACCESS_WIFI_STATE\"/>\n      <uses-permission\n          android:required=\"true\"\n          android:name=\"android.permission.CHANGE_WIFI_STATE\"/>\n      <uses-permission\n          android:required=\"true\"\n          android:name=\"android.permission.INTERNET\"/>\n      ...\n  ```\n\n- 添加本地服务\n\n  需要在服务框架中注册该服务，才能对外提供。\n\n  - 新建`WifiP2pServiceInfo`对象\n  - 加入相应的服务详细信息\n  - 调用`addLocalService()`来注册为本地服务。\n\n  ```java\n  private void startRegistration() {\n          //  Create a string map containing information about your service.\n          Map record = new HashMap();\n          record.put(\"listenport\", String.valueOf(SERVER_PORT));\n          record.put(\"buddyname\", \"John Doe\" + (int) (Math.random() * 1000));\n          record.put(\"available\", \"visible\");\n\n          // Service information.  Pass it an instance name, service type\n          // _protocol._transportlayer , and the map containing\n          // information other devices will want once they connect to this one.\n          WifiP2pDnsSdServiceInfo serviceInfo =\n                  WifiP2pDnsSdServiceInfo.newInstance(\"_test\", \"_presence._tcp\", record);\n\n          // Add the local service, sending the service info, network channel,\n          // and listener that will be used to indicate success or failure of\n          // the request.\n          mManager.addLocalService(channel, serviceInfo, new ActionListener() {\n              @Override\n              public void onSuccess() {\n                  // Command successful! Code isn't necessarily needed here,\n                  // Unless you want to update the UI or add logging statements.\n              }\n\n              @Override\n              public void onFailure(int arg0) {\n                  // Command failed.  Check for P2P_UNSUPPORTED, ERROR, or BUSY\n              }\n          });\n  }\n  ```\n\n- 发现附近的服务\n\n  新建一个`WifiP2pManager.DnsSdTxtRecordListener`实例来监听实时收到到记录。记录到的周边设备服务信息会拷贝到外部数据机构中，以供使用。\n\n  ```java\n  final HashMap<String, String> buddies = new HashMap<String, String>();\n  ...\n  private void discoverService() {\n      DnsSdTxtRecordListener txtListener = new DnsSdTxtRecordListener() {\n          @Override\n          /* Callback includes:\n           * fullDomain: full domain name: e.g \"printer._ipp._tcp.local.\"\n           * record: TXT record dta as a map of key/value pairs.\n           * device: The device running the advertised service.\n           */\n\n          public void onDnsSdTxtRecordAvailable(\n                  String fullDomain, Map record, WifiP2pDevice device) {\n                  Log.d(TAG, \"DnsSdTxtRecord available -\" + record.toString());\n                  buddies.put(device.deviceAddress, record.get(\"buddyname\"));\n              }\n          };\n      ...\n  }\n  ```\n\n  然后创建`WifiP2pManager.DnsSdServiceResponseListener`对象，来响应服务请求。上述两个listener匹配构建后，调用`setDnsResponseListener()`将它们加入`WifiP2pManager`。\n\n  ```java\n  private void discoverService() {\n  ...\n\n      DnsSdServiceResponseListener servListener = new DnsSdServiceResponseListener() {\n          @Override\n          public void onDnsSdServiceAvailable(String instanceName, String registrationType,\n                  WifiP2pDevice resourceType) {\n\n                  // Update the device name with the human-friendly version from\n                  // the DnsTxtRecord, assuming one arrived.\n                  resourceType.deviceName = buddies\n                          .containsKey(resourceType.deviceAddress) ? buddies\n                          .get(resourceType.deviceAddress) : resourceType.deviceName;\n\n                  // Add to the custom adapter defined specifically for showing\n                  // wifi devices.\n                  WiFiDirectServicesList fragment = (WiFiDirectServicesList) getFragmentManager()\n                          .findFragmentById(R.id.frag_peerlist);\n                  WiFiDevicesAdapter adapter = ((WiFiDevicesAdapter) fragment\n                          .getListAdapter());\n\n                  adapter.add(resourceType);\n                  adapter.notifyDataSetChanged();\n                  Log.d(TAG, \"onBonjourServiceAvailable \" + instanceName);\n          }\n      };\n\n      mManager.setDnsSdResponseListeners(channel, servListener, txtListener);\n      ...\n  }\n  ```\n\n  调用`addServiceRequest()`创建服务请求,它需要一个listener来通知创建成功与否。\n\n  ```java\n   serviceRequest = WifiP2pDnsSdServiceRequest.newInstance();\n          mManager.addServiceRequest(channel,\n                  serviceRequest,\n                  new ActionListener() {\n                      @Override\n                      public void onSuccess() {\n                          // Success!\n                      }\n\n                      @Override\n                      public void onFailure(int code) {\n                          // Command failed.  Check for P2P_UNSUPPORTED, ERROR, or BUSY\n                      }\n                  });\n  ```\n\n  最后是调用`discoverService()`\n\n  ```java\n  mManager.discoverServices(channel, new ActionListener() {\n\n              @Override\n              public void onSuccess() {\n                  // Success!\n              }\n\n              @Override\n              public void onFailure(int code) {\n                  // Command failed.  Check for P2P_UNSUPPORTED, ERROR, or BUSY\n                  if (code == WifiP2pManager.P2P_UNSUPPORTED) {\n                      Log.d(TAG, \"P2P isn't supported on this device.\");\n                  else if(...)\n                      ...\n              }\n          });\n  ```\n\n  顺利的话，可以实现匹配连接的效果，常见错误代码：\n\n  - P2P_UNSUPPORTED 当前设备不支持\n  - BUSY 系统繁忙\n  - ERROR 内部错误","source":"_posts/Android学习笔记第五篇--网络连接与云服务.md","raw":"---\ntitle: \"Android网络连接与云服务\"\ndate: 2017-03-27 16:57\nauthor: 冰路梦\ntag:\n    - Android\ncategories:\n    - Android\n---\n# Android学习笔记第五篇--网络连接与云服务\n\n## 第一章、无线连接设备\n\n​\t除了能够在云端通讯，Android的无线API也允许在同一局域网内的设备通讯，**甚至没有连接网络，而是物理具体相近，也可以相互通讯。**Network Service Discovery 简称NSD可以允许应用相互通讯发现附近设备。\n\n​\t本节主要介绍Android应用发现与连接其他设备的API。主要介绍NSD的API和点对点无线(the Wi-Fi Peer-to-Peer)API。\n\n### 1、使用网络服务发现(NSD)\n\n添加NSD服务到App中，可以使用户辨识在局域网内支持app请求的设备。有助于更好的实现文件共享、联机游戏等服务需求。\n\n- 注册NSD服务\n\n  > **Note:**注册NSD服务为非必选项，若是不关注本地网络的广播，则可以不用注册。\n\n  在局域网内注册自身服务首先要创建`NsdServiceInfo`对象。\n\n  ```java\n  public void registerService(int port){\n    //创建并初始化NSD对象\n    NsdServiceInfo serviceInfo = new NsdServiceInfo();\n    //服务名称要保证唯一性\n    serviceInfo.serServiceName(\"NsdChat\");\n    //指定协议和传输层，如指定打印服务\"_ipp._tcp\"\n    serviceInfo.setServiceType(\"_http._tcp.\");\n    serviceInfo.setPort(port);\n    .....\n  }\n  ```\n\n  如上创建了一个NSD服务，并设置了名称、服务类型。其中服务类型制定的是应用使用的协议和传输层。语法是`_<protocol>._<transportlayer>`。\n\n  > **Note:**互联网编号分配机构(International Assigned Numbers Authority)提供用于服务发现协议，如NSD和Bonjour等。\n\n  服务端口号应避免硬代码，以便于可以动态更改端口号，并更新通知。\n\n  ```java\n  public void initializeServerSocket(){\n    //初始化一个server socket，指定下面的端口\n    mServiceSocket = new ServerSocket(0);\n    //存储选择的端口号\n    mLocalPort = mServerSocket.getLocalPort();\n    ......\n  }\n  ```\n\n  至此已经创建了`NsdServiceInfo`对象，接着要实现`RegistrationListener`接口，实现注册功能。\n\n  ```java\n  public void initializeRegistrationListener(){\n    mRegistrationListener = new NsdManager.RegistrationListener(){\n      @Override\n      public void onServiceRegistered(NsdServiceInfo nsdServiceInfo){\n        //需要更新已经保存的注册服务名称，因为它需要唯一性，若是命名冲突，Android会自动解决冲突，此处就需要更新获取。\n        mServiceName = nsdServiceInfo.getServiceName();\n      }\n      @Override\n      public void onRegistrationFailed(NsdServiceInfo serviceInfo,int errorCode){\n       //注册失败时候，在此处可以记录日志 \n      }\n      @Override\n      public void onServiceUnregistered(NsdServiceInfo arg0){\n        //注销服务，只有通过NsdManager来注销才会调用这里。\n      }\n      \n      @Override\n      public void onUnregistrationFailed(NsdService serviceInfo,int errorCode){\n       //注销失败，记录日志 \n      }\n    };\n  }\n  ```\n\n  因为`registerService()`方法是异步的，在注册服务之后的操作，需要在`onServiceRegistered()`方法中进行。\n\n  ```java\n  public void registerService(int port){\n    NsdServiceInfo serviceInfo = new NsdServiceInfo();\n    serviceInfo.setServiceName(\"NsdChat\");\n    serviceInfo.setServiceType(\"_http._tcp.\");\n    serviceInfo.setPort(Port);\n    \n    mNsdManager = Context.getSystemService(Context.NSD_SERVICE);\n    mNsdManager.registerService(serviceInfo,NsdManager.PROTOCOL_DNS_SD,mRegistrationListener);\n  }\n  ```\n\n- 发现网络中的服务\n\n  发现网络服务需要两步：\n\n  - 注册网络监听器\n  - 调用`discoverServices()`异步API\n\n  1、创建`NsdManager.DiscoveryListener`接口的实现类。\n\n  ```java\n  public void initializeDiscoveryListener(){\n    //实例化网络发现监听器\n    mDiscoverListener = new NsdManager.DiscoveryListener(){\n      //发现服务时候调用该方法\n      @Override\n      public void onDiscoveryStarted(String regType){\n        Log.d(TAG,\"Service discovery started\");\n      }\n      @Override\n          public void onServiceFound(NsdServiceInfo service) {\n              // A service was found!  Do something with it.\n              Log.d(TAG, \"Service discovery success\" + service);\n              if (!service.getServiceType().equals(SERVICE_TYPE)) {\n                  // Service type is the string containing the protocol and\n                  // transport layer for this service.\n                  Log.d(TAG, \"Unknown Service Type: \" + service.getServiceType());\n              } else if (service.getServiceName().equals(mServiceName)) {\n                  // The name of the service tells the user what they'd be\n                  // connecting to. It could be \"Bob's Chat App\".\n                  Log.d(TAG, \"Same machine: \" + mServiceName);\n              } else if (service.getServiceName().contains(\"NsdChat\")){\n                  mNsdManager.resolveService(service, mResolveListener);\n              }\n          }\n\n          @Override\n          public void onServiceLost(NsdServiceInfo service) {\n              // When the network service is no longer available.\n              // Internal bookkeeping code goes here.\n              Log.e(TAG, \"service lost\" + service);\n          }\n\n          @Override\n          public void onDiscoveryStopped(String serviceType) {\n              Log.i(TAG, \"Discovery stopped: \" + serviceType);\n          }\n\n          @Override\n          public void onStartDiscoveryFailed(String serviceType, int errorCode) {\n              Log.e(TAG, \"Discovery failed: Error code:\" + errorCode);\n              mNsdManager.stopServiceDiscovery(this);\n          }\n\n          @Override\n          public void onStopDiscoveryFailed(String serviceType, int errorCode) {\n              Log.e(TAG, \"Discovery failed: Error code:\" + errorCode);\n              mNsdManager.stopServiceDiscovery(this);\n          }\n      };\n    }\n  }\n  ```\n\n  `NSD API`通过使用该接口中的方法，可以对网络服务状态进行监控。设置好监听器后，调用`discoverService()`函数：\n\n  ```java\n  mNsdManager.discoveryService(SERVICE_TYPE,NsdManager.PROTOCOL_DNS_SD,mDiscoveryListener);\n  ```\n\n- 连接到网络上的服务\n\n  发现网络上的可接入服务时，首先调用resolveService()方法，来确定服务连接信息。实现`NsdManage.ResolveListener`对象并将其传入`resolveService()`方法，并使用该对象获得`NsdSerServiceInfo`。\n\n  ```java\n  public void initializeResolveListener(){\n    mResolveListener = new NsdManager.ResolveListener(){\n      @Override\n          public void onResolveFailed(NsdServiceInfo serviceInfo, int errorCode) {\n              // Called when the resolve fails.  Use the error code to debug.\n              Log.e(TAG, \"Resolve failed\" + errorCode);\n          }\n\n          @Override\n          public void onServiceResolved(NsdServiceInfo serviceInfo) {\n              Log.e(TAG, \"Resolve Succeeded. \" + serviceInfo);\n\n              if (serviceInfo.getServiceName().equals(mServiceName)) {\n                  Log.d(TAG, \"Same IP.\");\n                  return;\n              }\n              mService = serviceInfo;\n              int port = mService.getPort();\n              InetAddress host = mService.getHost();\n          }\n    };\n  }\n  ```\n\n  至此完成服务接入，即可实现本地与之通讯。\n\n- 程序退出注销服务\n\n  使用NSD服务是比较消耗资源的，而且重复链接会导致问题，所以需要在app生命周期内的合适阶段开启、关闭服务。\n\n  ```java\n  //Activity\n  \t@Override\n      protected void onPause() {\n          if (mNsdHelper != null) {\n              mNsdHelper.tearDown();\n          }\n          super.onPause();\n      }\n\n      @Override\n      protected void onResume() {\n          super.onResume();\n          if (mNsdHelper != null) {\n              mNsdHelper.registerService(mConnection.getLocalPort());\n              mNsdHelper.discoverServices();\n          }\n      }\n\n      @Override\n      protected void onDestroy() {\n          mNsdHelper.tearDown();\n          mConnection.tearDown();\n          super.onDestroy();\n      }\n\n      // NsdHelper's tearDown method\n          public void tearDown() {\n          mNsdManager.unregisterService(mRegistrationListener);\n          mNsdManager.stopServiceDiscovery(mDiscoveryListener);\n      }\n  ```\n\n### 2、使用WiFi建立P2P连接\n\nWiFi点对点(P2P)API允许应用程序在无需连接到网络和热点的情况下连接到附近的设备。相比于蓝牙技术，其具有加大的连接范围。\n\n- 配置应用权限\n\n  使用Wi-Fi P2P技术需要添加`CHANGE_WIFI_STATE`,`ACCESS_WIFI_STATE`以及`INTERNET`三种权限，因为虽然Wi-Fi P2P技术可以不用访问互联网，但是它使用的是`Java socket`的标准，所以需要`INTERNET`权限。\n\n  ```xml\n  <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n            package=\"com.example.android.nsdchat\"\n            ...\n  \t<uses-permission\n          android:required=\"true\"\n          android:name=\"android.permission.ACCESS_WIFI_STATE\"/>\n  \t<uses-permission\n          android:required=\"true\"\n          android:name=\"android.permission.CHANGE_WIFI_STATE\"/>\n      <uses-permission\n          android:required=\"true\"\n          android:name=\"android.permission.INTERNET\"/>\n      ...\n  ```\n\n- 设置广播接收器和P2P管理器\n\n  使用WiFi P2P时，需要侦听事件发生时的broadcast intent。需要`IntentFilter`\n\n  - `WIFI_P2P_STATE_CHANGED_ACTION`指示Wi-Fi P2P是否开启\n  - `WIFI_P2P_PEERS_CHANGED_ACTION`代表对等列表节点发生了变化。\n  - `WIFI_P2P_CONNECTION_CHANGED_ACTION`表明Wi-Fi P2P连接状态发生了变化。\n  - `WIFI_P2P_THIS_DEVICE_CHANGED_ACTION`指示设备详细配置发生了变化。\n\n  ```java\n  private final IntentFilter intentFilter = new IntentFilter();\n  ...\n  @Override\n  public void onCreate(Bundle savedInstanceState) {\n      super.onCreate(savedInstanceState);\n      setContentView(R.layout.main);\n\n      //  Indicates a change in the Wi-Fi P2P status.\n      intentFilter.addAction(WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION);\n\n      // Indicates a change in the list of available peers.\n      intentFilter.addAction(WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION);\n\n      // Indicates the state of Wi-Fi P2P connectivity has changed.\n      intentFilter.addAction(WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION);\n\n      // Indicates this device's details have changed.\n      intentFilter.addAction(WifiP2pManager.WIFI_P2P_THIS_DEVICE_CHANGED_ACTION);\n\n      ...\n  }\n  ```\n\n  在`onCreate()`方法的最后，需要获得`WifiP2pManager`的实例，并调用他的`initailize()`方法，以获得`WifiP2pManager.Channel`对象.\n\n  ```java\n  Channel mChannel;\n  @Override\n  public void onCreate(Bundle savedInstanceState){\n    ...\n      mManager = (WifiP2pManager)getSystemService(Context.WIFI_P2P_SERVICE);\n  \tmChannel = mManager.initialize(this,getMainLooper(),null);\n  }\n  ```\n\n  然后创建广播接收着，监听上述不同的P2P状态变化。\n\n  ```java\n  @Override\n      public void onReceive(Context context, Intent intent) {\n          String action = intent.getAction();\n          if (WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION.equals(action)) {\n              // Determine if Wifi P2P mode is enabled or not, alert\n              // the Activity.\n              int state = intent.getIntExtra(WifiP2pManager.EXTRA_WIFI_STATE, -1);\n              if (state == WifiP2pManager.WIFI_P2P_STATE_ENABLED) {\n                  activity.setIsWifiP2pEnabled(true);\n              } else {\n                  activity.setIsWifiP2pEnabled(false);\n              }\n          } else if (WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION.equals(action)) {\n\n              // The peer list has changed!  We should probably do something about\n              // that.\n\n          } else if (WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION.equals(action)) {\n\n              // Connection state changed!  We should probably do something about\n              // that.\n\n          } else if (WifiP2pManager.WIFI_P2P_THIS_DEVICE_CHANGED_ACTION.equals(action)) {\n              DeviceListFragment fragment = (DeviceListFragment) activity.getFragmentManager()\n                      .findFragmentById(R.id.frag_list);\n              fragment.updateThisDevice((WifiP2pDevice) intent.getParcelableExtra(\n                      WifiP2pManager.EXTRA_WIFI_P2P_DEVICE));\n\n          }\n      }\n  ```\n\n  并在Activity启动时，注册广播，添加过滤器。Activity暂停或者关闭时候，注销广播。\n\n  ```java\n   //在Activity启动后注册广播\n      @Override\n      public void onResume() {\n          super.onResume();\n          receiver = new WiFiDirectBroadcastReceiver(mManager, mChannel, this);\n          registerReceiver(receiver, intentFilter);\n      }\n  //Activity关闭前，注销广播。\n      @Override\n      public void onPause() {\n          super.onPause();\n          unregisterReceiver(receiver);\n      }\n  ```\n\n- 初始化对等节点发现(Peer Discovery)\n\n  调用`discoveryPeers()`开始搜寻附近设备，需要传入参数\n\n  - 上面得到的`WifiP2pManager.Channel`对象。\n  - 对`WifiP2pManager.ActionListener`接口的实现，确定发现成功与失败时候的事件处理。\n\n  ```java\n  mManager.discoverPeers(mChannel, new WifiP2pManager.ActionListener() {\n\n          @Override\n          public void onSuccess() {\n              // Code for when the discovery initiation is successful goes here.\n              // No services have actually been discovered yet, so this method\n              // can often be left blank.  Code for peer discovery goes in the\n              // onReceive method, detailed below.\n          }\n\n          @Override\n          public void onFailure(int reasonCode) {\n              // Code for when the discovery initiation fails goes here.\n              // Alert the user that something went wrong.\n          }\n  });\n  ```\n\n  **注意：**如上仅仅完成了对匹配设备的发现扫描的初始化，`WifiP2pManager.ActionListener`中国年的方法会通知应用初始化是否正确等消息。\n\n- 获取对等节点列表\n\n  完成初始化后，扫描会得到匹配的附近设备列表信息。需要实现`WifiP2pManager.PeerListener`接口。\n\n  ```java\n  private List peers = new ArrayList();//匹配到的设备信息列表。\n      ...\n\n      private PeerListListener peerListListener = new PeerListListener() {\n          @Override\n          public void onPeersAvailable(WifiP2pDeviceList peerList) {\n\n              // Out with the old, in with the new.\n              peers.clear();\n              peers.addAll(peerList.getDeviceList());\n\n              // If an AdapterView is backed by this data, notify it\n              // of the change.  For instance, if you have a ListView of available\n              // peers, trigger an update.\n              ((WiFiPeerListAdapter) getListAdapter()).notifyDataSetChanged();\n              if (peers.size() == 0) {\n                  Log.d(WiFiDirectActivity.TAG, \"No devices found\");\n                  return;\n              }\n          }\n      }\n  ```\n\n  如上获得的匹配列表，我们需要将它传递给广播接收者做进一步处理。\n\n  ```java\n  public void onReceive(Context context,Intent intent){\n    ...\n  \telse if (WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION.equals(action)) {\n          // Request available peers from the wifi p2p manager. This is an\n          // asynchronous call and the calling activity is notified with a\n          // callback on PeerListListener.onPeersAvailable()\n          if (mManager != null) {\n              mManager.requestPeers(mChannel, peerListListener);\n          }\n          Log.d(WiFiDirectActivity.TAG, \"P2P peers changed\");\n      }...\n  }\n  ```\n\n- 连接一个对等节点\n\n  发现到附近可用设备，则可以进一步的连接它，需要创建一个新的WifiP2pConfig对象，并将连接信息从设备WifiP2pDevice拷贝到其中，调用connect()方法。\n\n  ```java\n      @Override\n      public void connect() {\n          // Picking the first device found on the network.\n          WifiP2pDevice device = peers.get(0);\n\n          WifiP2pConfig config = new WifiP2pConfig();\n          config.deviceAddress = device.deviceAddress;\n          config.wps.setup = WpsInfo.PBC;\n  \t\t//ActionListener仅实现通知初始化成功与否\n          mManager.connect(mChannel, config, new ActionListener() {\n\n              @Override\n              public void onSuccess() {\n                  // WiFiDirectBroadcastReceiver will notify us. Ignore for now.\n              }\n\n              @Override\n              public void onFailure(int reason) {\n                  Toast.makeText(WiFiDirectActivity.this, \"Connect failed. Retry.\",\n                          Toast.LENGTH_SHORT).show();\n              }\n          });\n      }\n  ```\n\n  使用`WifiP2pManager.ConnectionInfoListener`接口，`onConnectionInfoAvailable()`来确定连接状态。\n\n  ```java\n      @Override\n      public void onConnectionInfoAvailable(final WifiP2pInfo info) {\n\n          // InetAddress from WifiP2pInfo struct.\n          InetAddress groupOwnerAddress = info.groupOwnerAddress.getHostAddress());\n\n          // After the group negotiation, we can determine the group owner.\n          if (info.groupFormed && info.isGroupOwner) {\n              // Do whatever tasks are specific to the group owner.\n              // One common case is creating a server thread and accepting\n              // incoming connections.\n          } else if (info.groupFormed) {\n              // The other device acts as the client. In this case,\n              // you'll want to create a client thread that connects to the group\n              // owner.\n          }\n      }\n  ```\n\n  完善广播接收者的代码,监听到连接广播信号时候，请求连接。\n\n  ```java\n   ...\n          } else if (WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION.equals(action)) {\n\n              if (mManager == null) {\n                  return;\n              }\n\n              NetworkInfo networkInfo = (NetworkInfo) intent\n                      .getParcelableExtra(WifiP2pManager.EXTRA_NETWORK_INFO);\n\n              if (networkInfo.isConnected()) {\n\n                  // We are connected with the other device, request connection\n                  // info to find group owner IP\n\n                  mManager.requestConnectionInfo(mChannel, connectionListener);\n              }\n              ...\n  ```\n\n### 3、使用WiFi P2P服务\n\n第一节讲述了`NSD`服务用于局域网之间的连接通讯，本节的WiFi P2P有点类似，但是并不相同。\n\n- 配置Manifest\n\n  需要网络权限以及wifi相关权限。如上节所讲的三个权限，配置在Android manifest清单文件中。\n\n  ```xml\n  <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      package=\"com.example.android.nsdchat\"\n      ...\n\n      <uses-permission\n          android:required=\"true\"\n          android:name=\"android.permission.ACCESS_WIFI_STATE\"/>\n      <uses-permission\n          android:required=\"true\"\n          android:name=\"android.permission.CHANGE_WIFI_STATE\"/>\n      <uses-permission\n          android:required=\"true\"\n          android:name=\"android.permission.INTERNET\"/>\n      ...\n  ```\n\n- 添加本地服务\n\n  需要在服务框架中注册该服务，才能对外提供。\n\n  - 新建`WifiP2pServiceInfo`对象\n  - 加入相应的服务详细信息\n  - 调用`addLocalService()`来注册为本地服务。\n\n  ```java\n  private void startRegistration() {\n          //  Create a string map containing information about your service.\n          Map record = new HashMap();\n          record.put(\"listenport\", String.valueOf(SERVER_PORT));\n          record.put(\"buddyname\", \"John Doe\" + (int) (Math.random() * 1000));\n          record.put(\"available\", \"visible\");\n\n          // Service information.  Pass it an instance name, service type\n          // _protocol._transportlayer , and the map containing\n          // information other devices will want once they connect to this one.\n          WifiP2pDnsSdServiceInfo serviceInfo =\n                  WifiP2pDnsSdServiceInfo.newInstance(\"_test\", \"_presence._tcp\", record);\n\n          // Add the local service, sending the service info, network channel,\n          // and listener that will be used to indicate success or failure of\n          // the request.\n          mManager.addLocalService(channel, serviceInfo, new ActionListener() {\n              @Override\n              public void onSuccess() {\n                  // Command successful! Code isn't necessarily needed here,\n                  // Unless you want to update the UI or add logging statements.\n              }\n\n              @Override\n              public void onFailure(int arg0) {\n                  // Command failed.  Check for P2P_UNSUPPORTED, ERROR, or BUSY\n              }\n          });\n  }\n  ```\n\n- 发现附近的服务\n\n  新建一个`WifiP2pManager.DnsSdTxtRecordListener`实例来监听实时收到到记录。记录到的周边设备服务信息会拷贝到外部数据机构中，以供使用。\n\n  ```java\n  final HashMap<String, String> buddies = new HashMap<String, String>();\n  ...\n  private void discoverService() {\n      DnsSdTxtRecordListener txtListener = new DnsSdTxtRecordListener() {\n          @Override\n          /* Callback includes:\n           * fullDomain: full domain name: e.g \"printer._ipp._tcp.local.\"\n           * record: TXT record dta as a map of key/value pairs.\n           * device: The device running the advertised service.\n           */\n\n          public void onDnsSdTxtRecordAvailable(\n                  String fullDomain, Map record, WifiP2pDevice device) {\n                  Log.d(TAG, \"DnsSdTxtRecord available -\" + record.toString());\n                  buddies.put(device.deviceAddress, record.get(\"buddyname\"));\n              }\n          };\n      ...\n  }\n  ```\n\n  然后创建`WifiP2pManager.DnsSdServiceResponseListener`对象，来响应服务请求。上述两个listener匹配构建后，调用`setDnsResponseListener()`将它们加入`WifiP2pManager`。\n\n  ```java\n  private void discoverService() {\n  ...\n\n      DnsSdServiceResponseListener servListener = new DnsSdServiceResponseListener() {\n          @Override\n          public void onDnsSdServiceAvailable(String instanceName, String registrationType,\n                  WifiP2pDevice resourceType) {\n\n                  // Update the device name with the human-friendly version from\n                  // the DnsTxtRecord, assuming one arrived.\n                  resourceType.deviceName = buddies\n                          .containsKey(resourceType.deviceAddress) ? buddies\n                          .get(resourceType.deviceAddress) : resourceType.deviceName;\n\n                  // Add to the custom adapter defined specifically for showing\n                  // wifi devices.\n                  WiFiDirectServicesList fragment = (WiFiDirectServicesList) getFragmentManager()\n                          .findFragmentById(R.id.frag_peerlist);\n                  WiFiDevicesAdapter adapter = ((WiFiDevicesAdapter) fragment\n                          .getListAdapter());\n\n                  adapter.add(resourceType);\n                  adapter.notifyDataSetChanged();\n                  Log.d(TAG, \"onBonjourServiceAvailable \" + instanceName);\n          }\n      };\n\n      mManager.setDnsSdResponseListeners(channel, servListener, txtListener);\n      ...\n  }\n  ```\n\n  调用`addServiceRequest()`创建服务请求,它需要一个listener来通知创建成功与否。\n\n  ```java\n   serviceRequest = WifiP2pDnsSdServiceRequest.newInstance();\n          mManager.addServiceRequest(channel,\n                  serviceRequest,\n                  new ActionListener() {\n                      @Override\n                      public void onSuccess() {\n                          // Success!\n                      }\n\n                      @Override\n                      public void onFailure(int code) {\n                          // Command failed.  Check for P2P_UNSUPPORTED, ERROR, or BUSY\n                      }\n                  });\n  ```\n\n  最后是调用`discoverService()`\n\n  ```java\n  mManager.discoverServices(channel, new ActionListener() {\n\n              @Override\n              public void onSuccess() {\n                  // Success!\n              }\n\n              @Override\n              public void onFailure(int code) {\n                  // Command failed.  Check for P2P_UNSUPPORTED, ERROR, or BUSY\n                  if (code == WifiP2pManager.P2P_UNSUPPORTED) {\n                      Log.d(TAG, \"P2P isn't supported on this device.\");\n                  else if(...)\n                      ...\n              }\n          });\n  ```\n\n  顺利的话，可以实现匹配连接的效果，常见错误代码：\n\n  - P2P_UNSUPPORTED 当前设备不支持\n  - BUSY 系统繁忙\n  - ERROR 内部错误","slug":"Android学习笔记第五篇--网络连接与云服务","published":1,"updated":"2017-03-28T09:40:50.673Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ndxcc4000988owlisn97r2","content":"<h1 id=\"Android学习笔记第五篇–网络连接与云服务\"><a href=\"#Android学习笔记第五篇–网络连接与云服务\" class=\"headerlink\" title=\"Android学习笔记第五篇–网络连接与云服务\"></a>Android学习笔记第五篇–网络连接与云服务</h1><h2 id=\"第一章、无线连接设备\"><a href=\"#第一章、无线连接设备\" class=\"headerlink\" title=\"第一章、无线连接设备\"></a>第一章、无线连接设备</h2><p>​    除了能够在云端通讯，Android的无线API也允许在同一局域网内的设备通讯，<strong>甚至没有连接网络，而是物理具体相近，也可以相互通讯。</strong>Network Service Discovery 简称NSD可以允许应用相互通讯发现附近设备。</p>\n<p>​    本节主要介绍Android应用发现与连接其他设备的API。主要介绍NSD的API和点对点无线(the Wi-Fi Peer-to-Peer)API。</p>\n<h3 id=\"1、使用网络服务发现-NSD\"><a href=\"#1、使用网络服务发现-NSD\" class=\"headerlink\" title=\"1、使用网络服务发现(NSD)\"></a>1、使用网络服务发现(NSD)</h3><p>添加NSD服务到App中，可以使用户辨识在局域网内支持app请求的设备。有助于更好的实现文件共享、联机游戏等服务需求。</p>\n<ul>\n<li><p>注册NSD服务</p>\n<blockquote>\n<p><strong>Note:</strong>注册NSD服务为非必选项，若是不关注本地网络的广播，则可以不用注册。</p>\n</blockquote>\n<p>在局域网内注册自身服务首先要创建<code>NsdServiceInfo</code>对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerService</span><span class=\"params\">(<span class=\"keyword\">int</span> port)</span></span>&#123;</div><div class=\"line\">  <span class=\"comment\">//创建并初始化NSD对象</span></div><div class=\"line\">  NsdServiceInfo serviceInfo = <span class=\"keyword\">new</span> NsdServiceInfo();</div><div class=\"line\">  <span class=\"comment\">//服务名称要保证唯一性</span></div><div class=\"line\">  serviceInfo.serServiceName(<span class=\"string\">\"NsdChat\"</span>);</div><div class=\"line\">  <span class=\"comment\">//指定协议和传输层，如指定打印服务\"_ipp._tcp\"</span></div><div class=\"line\">  serviceInfo.setServiceType(<span class=\"string\">\"_http._tcp.\"</span>);</div><div class=\"line\">  serviceInfo.setPort(port);</div><div class=\"line\">  .....</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如上创建了一个NSD服务，并设置了名称、服务类型。其中服务类型制定的是应用使用的协议和传输层。语法是<code>_&lt;protocol&gt;._&lt;transportlayer&gt;</code>。</p>\n<blockquote>\n<p><strong>Note:</strong>互联网编号分配机构(International Assigned Numbers Authority)提供用于服务发现协议，如NSD和Bonjour等。</p>\n</blockquote>\n<p>服务端口号应避免硬代码，以便于可以动态更改端口号，并更新通知。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initializeServerSocket</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"comment\">//初始化一个server socket，指定下面的端口</span></div><div class=\"line\">  mServiceSocket = <span class=\"keyword\">new</span> ServerSocket(<span class=\"number\">0</span>);</div><div class=\"line\">  <span class=\"comment\">//存储选择的端口号</span></div><div class=\"line\">  mLocalPort = mServerSocket.getLocalPort();</div><div class=\"line\">  ......</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>至此已经创建了<code>NsdServiceInfo</code>对象，接着要实现<code>RegistrationListener</code>接口，实现注册功能。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initializeRegistrationListener</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  mRegistrationListener = <span class=\"keyword\">new</span> NsdManager.RegistrationListener()&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceRegistered</span><span class=\"params\">(NsdServiceInfo nsdServiceInfo)</span></span>&#123;</div><div class=\"line\">      <span class=\"comment\">//需要更新已经保存的注册服务名称，因为它需要唯一性，若是命名冲突，Android会自动解决冲突，此处就需要更新获取。</span></div><div class=\"line\">      mServiceName = nsdServiceInfo.getServiceName();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onRegistrationFailed</span><span class=\"params\">(NsdServiceInfo serviceInfo,<span class=\"keyword\">int</span> errorCode)</span></span>&#123;</div><div class=\"line\">     <span class=\"comment\">//注册失败时候，在此处可以记录日志 </span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceUnregistered</span><span class=\"params\">(NsdServiceInfo arg0)</span></span>&#123;</div><div class=\"line\">      <span class=\"comment\">//注销服务，只有通过NsdManager来注销才会调用这里。</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onUnregistrationFailed</span><span class=\"params\">(NsdService serviceInfo,<span class=\"keyword\">int</span> errorCode)</span></span>&#123;</div><div class=\"line\">     <span class=\"comment\">//注销失败，记录日志 </span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>因为<code>registerService()</code>方法是异步的，在注册服务之后的操作，需要在<code>onServiceRegistered()</code>方法中进行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerService</span><span class=\"params\">(<span class=\"keyword\">int</span> port)</span></span>&#123;</div><div class=\"line\">  NsdServiceInfo serviceInfo = <span class=\"keyword\">new</span> NsdServiceInfo();</div><div class=\"line\">  serviceInfo.setServiceName(<span class=\"string\">\"NsdChat\"</span>);</div><div class=\"line\">  serviceInfo.setServiceType(<span class=\"string\">\"_http._tcp.\"</span>);</div><div class=\"line\">  serviceInfo.setPort(Port);</div><div class=\"line\">  </div><div class=\"line\">  mNsdManager = Context.getSystemService(Context.NSD_SERVICE);</div><div class=\"line\">  mNsdManager.registerService(serviceInfo,NsdManager.PROTOCOL_DNS_SD,mRegistrationListener);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>发现网络中的服务</p>\n<p>发现网络服务需要两步：</p>\n<ul>\n<li>注册网络监听器</li>\n<li>调用<code>discoverServices()</code>异步API</li>\n</ul>\n<p>1、创建<code>NsdManager.DiscoveryListener</code>接口的实现类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initializeDiscoveryListener</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"comment\">//实例化网络发现监听器</span></div><div class=\"line\">  mDiscoverListener = <span class=\"keyword\">new</span> NsdManager.DiscoveryListener()&#123;</div><div class=\"line\">    <span class=\"comment\">//发现服务时候调用该方法</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDiscoveryStarted</span><span class=\"params\">(String regType)</span></span>&#123;</div><div class=\"line\">      Log.d(TAG,<span class=\"string\">\"Service discovery started\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceFound</span><span class=\"params\">(NsdServiceInfo service)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// A service was found!  Do something with it.</span></div><div class=\"line\">            Log.d(TAG, <span class=\"string\">\"Service discovery success\"</span> + service);</div><div class=\"line\">            <span class=\"keyword\">if</span> (!service.getServiceType().equals(SERVICE_TYPE)) &#123;</div><div class=\"line\">                <span class=\"comment\">// Service type is the string containing the protocol and</span></div><div class=\"line\">                <span class=\"comment\">// transport layer for this service.</span></div><div class=\"line\">                Log.d(TAG, <span class=\"string\">\"Unknown Service Type: \"</span> + service.getServiceType());</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (service.getServiceName().equals(mServiceName)) &#123;</div><div class=\"line\">                <span class=\"comment\">// The name of the service tells the user what they'd be</span></div><div class=\"line\">                <span class=\"comment\">// connecting to. It could be \"Bob's Chat App\".</span></div><div class=\"line\">                Log.d(TAG, <span class=\"string\">\"Same machine: \"</span> + mServiceName);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (service.getServiceName().contains(<span class=\"string\">\"NsdChat\"</span>))&#123;</div><div class=\"line\">                mNsdManager.resolveService(service, mResolveListener);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceLost</span><span class=\"params\">(NsdServiceInfo service)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// When the network service is no longer available.</span></div><div class=\"line\">            <span class=\"comment\">// Internal bookkeeping code goes here.</span></div><div class=\"line\">            Log.e(TAG, <span class=\"string\">\"service lost\"</span> + service);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDiscoveryStopped</span><span class=\"params\">(String serviceType)</span> </span>&#123;</div><div class=\"line\">            Log.i(TAG, <span class=\"string\">\"Discovery stopped: \"</span> + serviceType);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStartDiscoveryFailed</span><span class=\"params\">(String serviceType, <span class=\"keyword\">int</span> errorCode)</span> </span>&#123;</div><div class=\"line\">            Log.e(TAG, <span class=\"string\">\"Discovery failed: Error code:\"</span> + errorCode);</div><div class=\"line\">            mNsdManager.stopServiceDiscovery(<span class=\"keyword\">this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStopDiscoveryFailed</span><span class=\"params\">(String serviceType, <span class=\"keyword\">int</span> errorCode)</span> </span>&#123;</div><div class=\"line\">            Log.e(TAG, <span class=\"string\">\"Discovery failed: Error code:\"</span> + errorCode);</div><div class=\"line\">            mNsdManager.stopServiceDiscovery(<span class=\"keyword\">this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>NSD API</code>通过使用该接口中的方法，可以对网络服务状态进行监控。设置好监听器后，调用<code>discoverService()</code>函数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mNsdManager.discoveryService(SERVICE_TYPE,NsdManager.PROTOCOL_DNS_SD,mDiscoveryListener);</div></pre></td></tr></table></figure>\n</li>\n<li><p>连接到网络上的服务</p>\n<p>发现网络上的可接入服务时，首先调用resolveService()方法，来确定服务连接信息。实现<code>NsdManage.ResolveListener</code>对象并将其传入<code>resolveService()</code>方法，并使用该对象获得<code>NsdSerServiceInfo</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initializeResolveListener</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  mResolveListener = <span class=\"keyword\">new</span> NsdManager.ResolveListener()&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResolveFailed</span><span class=\"params\">(NsdServiceInfo serviceInfo, <span class=\"keyword\">int</span> errorCode)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// Called when the resolve fails.  Use the error code to debug.</span></div><div class=\"line\">            Log.e(TAG, <span class=\"string\">\"Resolve failed\"</span> + errorCode);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceResolved</span><span class=\"params\">(NsdServiceInfo serviceInfo)</span> </span>&#123;</div><div class=\"line\">            Log.e(TAG, <span class=\"string\">\"Resolve Succeeded. \"</span> + serviceInfo);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (serviceInfo.getServiceName().equals(mServiceName)) &#123;</div><div class=\"line\">                Log.d(TAG, <span class=\"string\">\"Same IP.\"</span>);</div><div class=\"line\">                <span class=\"keyword\">return</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            mService = serviceInfo;</div><div class=\"line\">            <span class=\"keyword\">int</span> port = mService.getPort();</div><div class=\"line\">            InetAddress host = mService.getHost();</div><div class=\"line\">        &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>至此完成服务接入，即可实现本地与之通讯。</p>\n</li>\n<li><p>程序退出注销服务</p>\n<p>使用NSD服务是比较消耗资源的，而且重复链接会导致问题，所以需要在app生命周期内的合适阶段开启、关闭服务。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Activity</span></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onPause</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mNsdHelper != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            mNsdHelper.tearDown();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onPause();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onResume</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onResume();</div><div class=\"line\">        <span class=\"keyword\">if</span> (mNsdHelper != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            mNsdHelper.registerService(mConnection.getLocalPort());</div><div class=\"line\">            mNsdHelper.discoverServices();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mNsdHelper.tearDown();</div><div class=\"line\">        mConnection.tearDown();</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// NsdHelper's tearDown method</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">tearDown</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mNsdManager.unregisterService(mRegistrationListener);</div><div class=\"line\">        mNsdManager.stopServiceDiscovery(mDiscoveryListener);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"2、使用WiFi建立P2P连接\"><a href=\"#2、使用WiFi建立P2P连接\" class=\"headerlink\" title=\"2、使用WiFi建立P2P连接\"></a>2、使用WiFi建立P2P连接</h3><p>WiFi点对点(P2P)API允许应用程序在无需连接到网络和热点的情况下连接到附近的设备。相比于蓝牙技术，其具有加大的连接范围。</p>\n<ul>\n<li><p>配置应用权限</p>\n<p>使用Wi-Fi P2P技术需要添加<code>CHANGE_WIFI_STATE</code>,<code>ACCESS_WIFI_STATE</code>以及<code>INTERNET</code>三种权限，因为虽然Wi-Fi P2P技术可以不用访问互联网，但是它使用的是<code>Java socket</code>的标准，所以需要<code>INTERNET</code>权限。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"</div><div class=\"line\">          package=\"com.example.android.nsdchat\"</div><div class=\"line\">          ...</div><div class=\"line\">\t&lt;uses-permission</div><div class=\"line\">        android:required=\"true\"</div><div class=\"line\">        android:name=\"android.permission.ACCESS_WIFI_STATE\"/&gt;</div><div class=\"line\">\t&lt;uses-permission</div><div class=\"line\">        android:required=\"true\"</div><div class=\"line\">        android:name=\"android.permission.CHANGE_WIFI_STATE\"/&gt;</div><div class=\"line\">    &lt;uses-permission</div><div class=\"line\">        android:required=\"true\"</div><div class=\"line\">        android:name=\"android.permission.INTERNET\"/&gt;</div><div class=\"line\">    ...</div></pre></td></tr></table></figure>\n</li>\n<li><p>设置广播接收器和P2P管理器</p>\n<p>使用WiFi P2P时，需要侦听事件发生时的broadcast intent。需要<code>IntentFilter</code></p>\n<ul>\n<li><code>WIFI_P2P_STATE_CHANGED_ACTION</code>指示Wi-Fi P2P是否开启</li>\n<li><code>WIFI_P2P_PEERS_CHANGED_ACTION</code>代表对等列表节点发生了变化。</li>\n<li><code>WIFI_P2P_CONNECTION_CHANGED_ACTION</code>表明Wi-Fi P2P连接状态发生了变化。</li>\n<li><code>WIFI_P2P_THIS_DEVICE_CHANGED_ACTION</code>指示设备详细配置发生了变化。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> IntentFilter intentFilter = <span class=\"keyword\">new</span> IntentFilter();</div><div class=\"line\">...</div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">    setContentView(R.layout.main);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//  Indicates a change in the Wi-Fi P2P status.</span></div><div class=\"line\">    intentFilter.addAction(WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Indicates a change in the list of available peers.</span></div><div class=\"line\">    intentFilter.addAction(WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Indicates the state of Wi-Fi P2P connectivity has changed.</span></div><div class=\"line\">    intentFilter.addAction(WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Indicates this device's details have changed.</span></div><div class=\"line\">    intentFilter.addAction(WifiP2pManager.WIFI_P2P_THIS_DEVICE_CHANGED_ACTION);</div><div class=\"line\"></div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在<code>onCreate()</code>方法的最后，需要获得<code>WifiP2pManager</code>的实例，并调用他的<code>initailize()</code>方法，以获得<code>WifiP2pManager.Channel</code>对象.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Channel mChannel;</div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span></span>&#123;</div><div class=\"line\">  ...</div><div class=\"line\">    mManager = (WifiP2pManager)getSystemService(Context.WIFI_P2P_SERVICE);</div><div class=\"line\">\tmChannel = mManager.initialize(<span class=\"keyword\">this</span>,getMainLooper(),<span class=\"keyword\">null</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后创建广播接收着，监听上述不同的P2P状态变化。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceive</span><span class=\"params\">(Context context, Intent intent)</span> </span>&#123;</div><div class=\"line\">        String action = intent.getAction();</div><div class=\"line\">        <span class=\"keyword\">if</span> (WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION.equals(action)) &#123;</div><div class=\"line\">            <span class=\"comment\">// Determine if Wifi P2P mode is enabled or not, alert</span></div><div class=\"line\">            <span class=\"comment\">// the Activity.</span></div><div class=\"line\">            <span class=\"keyword\">int</span> state = intent.getIntExtra(WifiP2pManager.EXTRA_WIFI_STATE, -<span class=\"number\">1</span>);</div><div class=\"line\">            <span class=\"keyword\">if</span> (state == WifiP2pManager.WIFI_P2P_STATE_ENABLED) &#123;</div><div class=\"line\">                activity.setIsWifiP2pEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                activity.setIsWifiP2pEnabled(<span class=\"keyword\">false</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION.equals(action)) &#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// The peer list has changed!  We should probably do something about</span></div><div class=\"line\">            <span class=\"comment\">// that.</span></div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION.equals(action)) &#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// Connection state changed!  We should probably do something about</span></div><div class=\"line\">            <span class=\"comment\">// that.</span></div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (WifiP2pManager.WIFI_P2P_THIS_DEVICE_CHANGED_ACTION.equals(action)) &#123;</div><div class=\"line\">            DeviceListFragment fragment = (DeviceListFragment) activity.getFragmentManager()</div><div class=\"line\">                    .findFragmentById(R.id.frag_list);</div><div class=\"line\">            fragment.updateThisDevice((WifiP2pDevice) intent.getParcelableExtra(</div><div class=\"line\">                    WifiP2pManager.EXTRA_WIFI_P2P_DEVICE));</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>并在Activity启动时，注册广播，添加过滤器。Activity暂停或者关闭时候，注销广播。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"comment\">//在Activity启动后注册广播</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResume</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onResume();</div><div class=\"line\">        receiver = <span class=\"keyword\">new</span> WiFiDirectBroadcastReceiver(mManager, mChannel, <span class=\"keyword\">this</span>);</div><div class=\"line\">        registerReceiver(receiver, intentFilter);</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"comment\">//Activity关闭前，注销广播。</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPause</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onPause();</div><div class=\"line\">        unregisterReceiver(receiver);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>初始化对等节点发现(Peer Discovery)</p>\n<p>调用<code>discoveryPeers()</code>开始搜寻附近设备，需要传入参数</p>\n<ul>\n<li>上面得到的<code>WifiP2pManager.Channel</code>对象。</li>\n<li>对<code>WifiP2pManager.ActionListener</code>接口的实现，确定发现成功与失败时候的事件处理。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">mManager.discoverPeers(mChannel, <span class=\"keyword\">new</span> WifiP2pManager.ActionListener() &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSuccess</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// Code for when the discovery initiation is successful goes here.</span></div><div class=\"line\">            <span class=\"comment\">// No services have actually been discovered yet, so this method</span></div><div class=\"line\">            <span class=\"comment\">// can often be left blank.  Code for peer discovery goes in the</span></div><div class=\"line\">            <span class=\"comment\">// onReceive method, detailed below.</span></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(<span class=\"keyword\">int</span> reasonCode)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// Code for when the discovery initiation fails goes here.</span></div><div class=\"line\">            <span class=\"comment\">// Alert the user that something went wrong.</span></div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><strong>注意：</strong>如上仅仅完成了对匹配设备的发现扫描的初始化，<code>WifiP2pManager.ActionListener</code>中国年的方法会通知应用初始化是否正确等消息。</p>\n</li>\n<li><p>获取对等节点列表</p>\n<p>完成初始化后，扫描会得到匹配的附近设备列表信息。需要实现<code>WifiP2pManager.PeerListener</code>接口。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> List peers = <span class=\"keyword\">new</span> ArrayList();<span class=\"comment\">//匹配到的设备信息列表。</span></div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> PeerListListener peerListListener = <span class=\"keyword\">new</span> PeerListListener() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPeersAvailable</span><span class=\"params\">(WifiP2pDeviceList peerList)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// Out with the old, in with the new.</span></div><div class=\"line\">            peers.clear();</div><div class=\"line\">            peers.addAll(peerList.getDeviceList());</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// If an AdapterView is backed by this data, notify it</span></div><div class=\"line\">            <span class=\"comment\">// of the change.  For instance, if you have a ListView of available</span></div><div class=\"line\">            <span class=\"comment\">// peers, trigger an update.</span></div><div class=\"line\">            ((WiFiPeerListAdapter) getListAdapter()).notifyDataSetChanged();</div><div class=\"line\">            <span class=\"keyword\">if</span> (peers.size() == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                Log.d(WiFiDirectActivity.TAG, <span class=\"string\">\"No devices found\"</span>);</div><div class=\"line\">                <span class=\"keyword\">return</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>如上获得的匹配列表，我们需要将它传递给广播接收者做进一步处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceive</span><span class=\"params\">(Context context,Intent intent)</span></span>&#123;</div><div class=\"line\">  ...</div><div class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION.equals(action)) &#123;</div><div class=\"line\">        <span class=\"comment\">// Request available peers from the wifi p2p manager. This is an</span></div><div class=\"line\">        <span class=\"comment\">// asynchronous call and the calling activity is notified with a</span></div><div class=\"line\">        <span class=\"comment\">// callback on PeerListListener.onPeersAvailable()</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (mManager != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            mManager.requestPeers(mChannel, peerListListener);</div><div class=\"line\">        &#125;</div><div class=\"line\">        Log.d(WiFiDirectActivity.TAG, <span class=\"string\">\"P2P peers changed\"</span>);</div><div class=\"line\">    &#125;...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>连接一个对等节点</p>\n<p>发现到附近可用设备，则可以进一步的连接它，需要创建一个新的WifiP2pConfig对象，并将连接信息从设备WifiP2pDevice拷贝到其中，调用connect()方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">connect</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// Picking the first device found on the network.</span></div><div class=\"line\">      WifiP2pDevice device = peers.get(<span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">      WifiP2pConfig config = <span class=\"keyword\">new</span> WifiP2pConfig();</div><div class=\"line\">      config.deviceAddress = device.deviceAddress;</div><div class=\"line\">      config.wps.setup = WpsInfo.PBC;</div><div class=\"line\"><span class=\"comment\">//ActionListener仅实现通知初始化成功与否</span></div><div class=\"line\">      mManager.connect(mChannel, config, <span class=\"keyword\">new</span> ActionListener() &#123;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"meta\">@Override</span></div><div class=\"line\">          <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSuccess</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">              <span class=\"comment\">// WiFiDirectBroadcastReceiver will notify us. Ignore for now.</span></div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"meta\">@Override</span></div><div class=\"line\">          <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(<span class=\"keyword\">int</span> reason)</span> </span>&#123;</div><div class=\"line\">              Toast.makeText(WiFiDirectActivity.<span class=\"keyword\">this</span>, <span class=\"string\">\"Connect failed. Retry.\"</span>,</div><div class=\"line\">                      Toast.LENGTH_SHORT).show();</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>使用<code>WifiP2pManager.ConnectionInfoListener</code>接口，<code>onConnectionInfoAvailable()</code>来确定连接状态。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onConnectionInfoAvailable</span><span class=\"params\">(<span class=\"keyword\">final</span> WifiP2pInfo info)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// InetAddress from WifiP2pInfo struct.</span></div><div class=\"line\">    InetAddress groupOwnerAddress = info.groupOwnerAddress.getHostAddress());</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// After the group negotiation, we can determine the group owner.</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (info.groupFormed &amp;&amp; info.isGroupOwner) &#123;</div><div class=\"line\">        <span class=\"comment\">// Do whatever tasks are specific to the group owner.</span></div><div class=\"line\">        <span class=\"comment\">// One common case is creating a server thread and accepting</span></div><div class=\"line\">        <span class=\"comment\">// incoming connections.</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (info.groupFormed) &#123;</div><div class=\"line\">        <span class=\"comment\">// The other device acts as the client. In this case,</span></div><div class=\"line\">        <span class=\"comment\">// you'll want to create a client thread that connects to the group</span></div><div class=\"line\">        <span class=\"comment\">// owner.</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>完善广播接收者的代码,监听到连接广播信号时候，请求连接。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION.equals(action)) &#123;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"keyword\">if</span> (mManager == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">               <span class=\"keyword\">return</span>;</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           NetworkInfo networkInfo = (NetworkInfo) intent</div><div class=\"line\">                   .getParcelableExtra(WifiP2pManager.EXTRA_NETWORK_INFO);</div><div class=\"line\"></div><div class=\"line\">           <span class=\"keyword\">if</span> (networkInfo.isConnected()) &#123;</div><div class=\"line\"></div><div class=\"line\">               <span class=\"comment\">// We are connected with the other device, request connection</span></div><div class=\"line\">               <span class=\"comment\">// info to find group owner IP</span></div><div class=\"line\"></div><div class=\"line\">               mManager.requestConnectionInfo(mChannel, connectionListener);</div><div class=\"line\">           &#125;</div><div class=\"line\">           ...</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"3、使用WiFi-P2P服务\"><a href=\"#3、使用WiFi-P2P服务\" class=\"headerlink\" title=\"3、使用WiFi P2P服务\"></a>3、使用WiFi P2P服务</h3><p>第一节讲述了<code>NSD</code>服务用于局域网之间的连接通讯，本节的WiFi P2P有点类似，但是并不相同。</p>\n<ul>\n<li><p>配置Manifest</p>\n<p>需要网络权限以及wifi相关权限。如上节所讲的三个权限，配置在Android manifest清单文件中。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"</div><div class=\"line\">    package=\"com.example.android.nsdchat\"</div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    &lt;uses-permission</div><div class=\"line\">        android:required=\"true\"</div><div class=\"line\">        android:name=\"android.permission.ACCESS_WIFI_STATE\"/&gt;</div><div class=\"line\">    &lt;uses-permission</div><div class=\"line\">        android:required=\"true\"</div><div class=\"line\">        android:name=\"android.permission.CHANGE_WIFI_STATE\"/&gt;</div><div class=\"line\">    &lt;uses-permission</div><div class=\"line\">        android:required=\"true\"</div><div class=\"line\">        android:name=\"android.permission.INTERNET\"/&gt;</div><div class=\"line\">    ...</div></pre></td></tr></table></figure>\n</li>\n<li><p>添加本地服务</p>\n<p>需要在服务框架中注册该服务，才能对外提供。</p>\n<ul>\n<li>新建<code>WifiP2pServiceInfo</code>对象</li>\n<li>加入相应的服务详细信息</li>\n<li>调用<code>addLocalService()</code>来注册为本地服务。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">startRegistration</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//  Create a string map containing information about your service.</span></div><div class=\"line\">        Map record = <span class=\"keyword\">new</span> HashMap();</div><div class=\"line\">        record.put(<span class=\"string\">\"listenport\"</span>, String.valueOf(SERVER_PORT));</div><div class=\"line\">        record.put(<span class=\"string\">\"buddyname\"</span>, <span class=\"string\">\"John Doe\"</span> + (<span class=\"keyword\">int</span>) (Math.random() * <span class=\"number\">1000</span>));</div><div class=\"line\">        record.put(<span class=\"string\">\"available\"</span>, <span class=\"string\">\"visible\"</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Service information.  Pass it an instance name, service type</span></div><div class=\"line\">        <span class=\"comment\">// _protocol._transportlayer , and the map containing</span></div><div class=\"line\">        <span class=\"comment\">// information other devices will want once they connect to this one.</span></div><div class=\"line\">        WifiP2pDnsSdServiceInfo serviceInfo =</div><div class=\"line\">                WifiP2pDnsSdServiceInfo.newInstance(<span class=\"string\">\"_test\"</span>, <span class=\"string\">\"_presence._tcp\"</span>, record);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Add the local service, sending the service info, network channel,</span></div><div class=\"line\">        <span class=\"comment\">// and listener that will be used to indicate success or failure of</span></div><div class=\"line\">        <span class=\"comment\">// the request.</span></div><div class=\"line\">        mManager.addLocalService(channel, serviceInfo, <span class=\"keyword\">new</span> ActionListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSuccess</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                <span class=\"comment\">// Command successful! Code isn't necessarily needed here,</span></div><div class=\"line\">                <span class=\"comment\">// Unless you want to update the UI or add logging statements.</span></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(<span class=\"keyword\">int</span> arg0)</span> </span>&#123;</div><div class=\"line\">                <span class=\"comment\">// Command failed.  Check for P2P_UNSUPPORTED, ERROR, or BUSY</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>发现附近的服务</p>\n<p>新建一个<code>WifiP2pManager.DnsSdTxtRecordListener</code>实例来监听实时收到到记录。记录到的周边设备服务信息会拷贝到外部数据机构中，以供使用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> HashMap&lt;String, String&gt; buddies = <span class=\"keyword\">new</span> HashMap&lt;String, String&gt;();</div><div class=\"line\">...</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">discoverService</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    DnsSdTxtRecordListener txtListener = <span class=\"keyword\">new</span> DnsSdTxtRecordListener() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"comment\">/* Callback includes:</span></div><div class=\"line\">         * fullDomain: full domain name: e.g \"printer._ipp._tcp.local.\"</div><div class=\"line\">         * record: TXT record dta as a map of key/value pairs.</div><div class=\"line\">         * device: The device running the advertised service.</div><div class=\"line\">         */</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDnsSdTxtRecordAvailable</span><span class=\"params\">(</span></span></div><div class=\"line\">                String fullDomain, Map record, WifiP2pDevice device) &#123;</div><div class=\"line\">                Log.d(TAG, <span class=\"string\">\"DnsSdTxtRecord available -\"</span> + record.toString());</div><div class=\"line\">                buddies.put(device.deviceAddress, record.get(<span class=\"string\">\"buddyname\"</span>));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后创建<code>WifiP2pManager.DnsSdServiceResponseListener</code>对象，来响应服务请求。上述两个listener匹配构建后，调用<code>setDnsResponseListener()</code>将它们加入<code>WifiP2pManager</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">discoverService</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\">    DnsSdServiceResponseListener servListener = <span class=\"keyword\">new</span> DnsSdServiceResponseListener() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDnsSdServiceAvailable</span><span class=\"params\">(String instanceName, String registrationType,</span></span></div><div class=\"line\">                WifiP2pDevice resourceType) &#123;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// Update the device name with the human-friendly version from</span></div><div class=\"line\">                <span class=\"comment\">// the DnsTxtRecord, assuming one arrived.</span></div><div class=\"line\">                resourceType.deviceName = buddies</div><div class=\"line\">                        .containsKey(resourceType.deviceAddress) ? buddies</div><div class=\"line\">                        .get(resourceType.deviceAddress) : resourceType.deviceName;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// Add to the custom adapter defined specifically for showing</span></div><div class=\"line\">                <span class=\"comment\">// wifi devices.</span></div><div class=\"line\">                WiFiDirectServicesList fragment = (WiFiDirectServicesList) getFragmentManager()</div><div class=\"line\">                        .findFragmentById(R.id.frag_peerlist);</div><div class=\"line\">                WiFiDevicesAdapter adapter = ((WiFiDevicesAdapter) fragment</div><div class=\"line\">                        .getListAdapter());</div><div class=\"line\"></div><div class=\"line\">                adapter.add(resourceType);</div><div class=\"line\">                adapter.notifyDataSetChanged();</div><div class=\"line\">                Log.d(TAG, <span class=\"string\">\"onBonjourServiceAvailable \"</span> + instanceName);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    mManager.setDnsSdResponseListeners(channel, servListener, txtListener);</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>调用<code>addServiceRequest()</code>创建服务请求,它需要一个listener来通知创建成功与否。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">serviceRequest = WifiP2pDnsSdServiceRequest.newInstance();</div><div class=\"line\">       mManager.addServiceRequest(channel,</div><div class=\"line\">               serviceRequest,</div><div class=\"line\">               <span class=\"keyword\">new</span> ActionListener() &#123;</div><div class=\"line\">                   <span class=\"meta\">@Override</span></div><div class=\"line\">                   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSuccess</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                       <span class=\"comment\">// Success!</span></div><div class=\"line\">                   &#125;</div><div class=\"line\"></div><div class=\"line\">                   <span class=\"meta\">@Override</span></div><div class=\"line\">                   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(<span class=\"keyword\">int</span> code)</span> </span>&#123;</div><div class=\"line\">                       <span class=\"comment\">// Command failed.  Check for P2P_UNSUPPORTED, ERROR, or BUSY</span></div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125;);</div></pre></td></tr></table></figure>\n<p>最后是调用<code>discoverService()</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">mManager.discoverServices(channel, <span class=\"keyword\">new</span> ActionListener() &#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSuccess</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                <span class=\"comment\">// Success!</span></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(<span class=\"keyword\">int</span> code)</span> </span>&#123;</div><div class=\"line\">                <span class=\"comment\">// Command failed.  Check for P2P_UNSUPPORTED, ERROR, or BUSY</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (code == WifiP2pManager.P2P_UNSUPPORTED) &#123;</div><div class=\"line\">                    Log.d(TAG, <span class=\"string\">\"P2P isn't supported on this device.\"</span>);</div><div class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(...)</div><div class=\"line\">                    ...</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div></pre></td></tr></table></figure>\n<p>顺利的话，可以实现匹配连接的效果，常见错误代码：</p>\n<ul>\n<li>P2P_UNSUPPORTED 当前设备不支持</li>\n<li>BUSY 系统繁忙</li>\n<li>ERROR 内部错误</li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"Android学习笔记第五篇–网络连接与云服务\"><a href=\"#Android学习笔记第五篇–网络连接与云服务\" class=\"headerlink\" title=\"Android学习笔记第五篇–网络连接与云服务\"></a>Android学习笔记第五篇–网络连接与云服务</h1><h2 id=\"第一章、无线连接设备\"><a href=\"#第一章、无线连接设备\" class=\"headerlink\" title=\"第一章、无线连接设备\"></a>第一章、无线连接设备</h2><p>​    除了能够在云端通讯，Android的无线API也允许在同一局域网内的设备通讯，<strong>甚至没有连接网络，而是物理具体相近，也可以相互通讯。</strong>Network Service Discovery 简称NSD可以允许应用相互通讯发现附近设备。</p>\n<p>​    本节主要介绍Android应用发现与连接其他设备的API。主要介绍NSD的API和点对点无线(the Wi-Fi Peer-to-Peer)API。</p>\n<h3 id=\"1、使用网络服务发现-NSD\"><a href=\"#1、使用网络服务发现-NSD\" class=\"headerlink\" title=\"1、使用网络服务发现(NSD)\"></a>1、使用网络服务发现(NSD)</h3><p>添加NSD服务到App中，可以使用户辨识在局域网内支持app请求的设备。有助于更好的实现文件共享、联机游戏等服务需求。</p>\n<ul>\n<li><p>注册NSD服务</p>\n<blockquote>\n<p><strong>Note:</strong>注册NSD服务为非必选项，若是不关注本地网络的广播，则可以不用注册。</p>\n</blockquote>\n<p>在局域网内注册自身服务首先要创建<code>NsdServiceInfo</code>对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerService</span><span class=\"params\">(<span class=\"keyword\">int</span> port)</span></span>&#123;</div><div class=\"line\">  <span class=\"comment\">//创建并初始化NSD对象</span></div><div class=\"line\">  NsdServiceInfo serviceInfo = <span class=\"keyword\">new</span> NsdServiceInfo();</div><div class=\"line\">  <span class=\"comment\">//服务名称要保证唯一性</span></div><div class=\"line\">  serviceInfo.serServiceName(<span class=\"string\">\"NsdChat\"</span>);</div><div class=\"line\">  <span class=\"comment\">//指定协议和传输层，如指定打印服务\"_ipp._tcp\"</span></div><div class=\"line\">  serviceInfo.setServiceType(<span class=\"string\">\"_http._tcp.\"</span>);</div><div class=\"line\">  serviceInfo.setPort(port);</div><div class=\"line\">  .....</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如上创建了一个NSD服务，并设置了名称、服务类型。其中服务类型制定的是应用使用的协议和传输层。语法是<code>_&lt;protocol&gt;._&lt;transportlayer&gt;</code>。</p>\n<blockquote>\n<p><strong>Note:</strong>互联网编号分配机构(International Assigned Numbers Authority)提供用于服务发现协议，如NSD和Bonjour等。</p>\n</blockquote>\n<p>服务端口号应避免硬代码，以便于可以动态更改端口号，并更新通知。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initializeServerSocket</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"comment\">//初始化一个server socket，指定下面的端口</span></div><div class=\"line\">  mServiceSocket = <span class=\"keyword\">new</span> ServerSocket(<span class=\"number\">0</span>);</div><div class=\"line\">  <span class=\"comment\">//存储选择的端口号</span></div><div class=\"line\">  mLocalPort = mServerSocket.getLocalPort();</div><div class=\"line\">  ......</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>至此已经创建了<code>NsdServiceInfo</code>对象，接着要实现<code>RegistrationListener</code>接口，实现注册功能。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initializeRegistrationListener</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  mRegistrationListener = <span class=\"keyword\">new</span> NsdManager.RegistrationListener()&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceRegistered</span><span class=\"params\">(NsdServiceInfo nsdServiceInfo)</span></span>&#123;</div><div class=\"line\">      <span class=\"comment\">//需要更新已经保存的注册服务名称，因为它需要唯一性，若是命名冲突，Android会自动解决冲突，此处就需要更新获取。</span></div><div class=\"line\">      mServiceName = nsdServiceInfo.getServiceName();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onRegistrationFailed</span><span class=\"params\">(NsdServiceInfo serviceInfo,<span class=\"keyword\">int</span> errorCode)</span></span>&#123;</div><div class=\"line\">     <span class=\"comment\">//注册失败时候，在此处可以记录日志 </span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceUnregistered</span><span class=\"params\">(NsdServiceInfo arg0)</span></span>&#123;</div><div class=\"line\">      <span class=\"comment\">//注销服务，只有通过NsdManager来注销才会调用这里。</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onUnregistrationFailed</span><span class=\"params\">(NsdService serviceInfo,<span class=\"keyword\">int</span> errorCode)</span></span>&#123;</div><div class=\"line\">     <span class=\"comment\">//注销失败，记录日志 </span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>因为<code>registerService()</code>方法是异步的，在注册服务之后的操作，需要在<code>onServiceRegistered()</code>方法中进行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerService</span><span class=\"params\">(<span class=\"keyword\">int</span> port)</span></span>&#123;</div><div class=\"line\">  NsdServiceInfo serviceInfo = <span class=\"keyword\">new</span> NsdServiceInfo();</div><div class=\"line\">  serviceInfo.setServiceName(<span class=\"string\">\"NsdChat\"</span>);</div><div class=\"line\">  serviceInfo.setServiceType(<span class=\"string\">\"_http._tcp.\"</span>);</div><div class=\"line\">  serviceInfo.setPort(Port);</div><div class=\"line\">  </div><div class=\"line\">  mNsdManager = Context.getSystemService(Context.NSD_SERVICE);</div><div class=\"line\">  mNsdManager.registerService(serviceInfo,NsdManager.PROTOCOL_DNS_SD,mRegistrationListener);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>发现网络中的服务</p>\n<p>发现网络服务需要两步：</p>\n<ul>\n<li>注册网络监听器</li>\n<li>调用<code>discoverServices()</code>异步API</li>\n</ul>\n<p>1、创建<code>NsdManager.DiscoveryListener</code>接口的实现类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initializeDiscoveryListener</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"comment\">//实例化网络发现监听器</span></div><div class=\"line\">  mDiscoverListener = <span class=\"keyword\">new</span> NsdManager.DiscoveryListener()&#123;</div><div class=\"line\">    <span class=\"comment\">//发现服务时候调用该方法</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDiscoveryStarted</span><span class=\"params\">(String regType)</span></span>&#123;</div><div class=\"line\">      Log.d(TAG,<span class=\"string\">\"Service discovery started\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceFound</span><span class=\"params\">(NsdServiceInfo service)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// A service was found!  Do something with it.</span></div><div class=\"line\">            Log.d(TAG, <span class=\"string\">\"Service discovery success\"</span> + service);</div><div class=\"line\">            <span class=\"keyword\">if</span> (!service.getServiceType().equals(SERVICE_TYPE)) &#123;</div><div class=\"line\">                <span class=\"comment\">// Service type is the string containing the protocol and</span></div><div class=\"line\">                <span class=\"comment\">// transport layer for this service.</span></div><div class=\"line\">                Log.d(TAG, <span class=\"string\">\"Unknown Service Type: \"</span> + service.getServiceType());</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (service.getServiceName().equals(mServiceName)) &#123;</div><div class=\"line\">                <span class=\"comment\">// The name of the service tells the user what they'd be</span></div><div class=\"line\">                <span class=\"comment\">// connecting to. It could be \"Bob's Chat App\".</span></div><div class=\"line\">                Log.d(TAG, <span class=\"string\">\"Same machine: \"</span> + mServiceName);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (service.getServiceName().contains(<span class=\"string\">\"NsdChat\"</span>))&#123;</div><div class=\"line\">                mNsdManager.resolveService(service, mResolveListener);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceLost</span><span class=\"params\">(NsdServiceInfo service)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// When the network service is no longer available.</span></div><div class=\"line\">            <span class=\"comment\">// Internal bookkeeping code goes here.</span></div><div class=\"line\">            Log.e(TAG, <span class=\"string\">\"service lost\"</span> + service);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDiscoveryStopped</span><span class=\"params\">(String serviceType)</span> </span>&#123;</div><div class=\"line\">            Log.i(TAG, <span class=\"string\">\"Discovery stopped: \"</span> + serviceType);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStartDiscoveryFailed</span><span class=\"params\">(String serviceType, <span class=\"keyword\">int</span> errorCode)</span> </span>&#123;</div><div class=\"line\">            Log.e(TAG, <span class=\"string\">\"Discovery failed: Error code:\"</span> + errorCode);</div><div class=\"line\">            mNsdManager.stopServiceDiscovery(<span class=\"keyword\">this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStopDiscoveryFailed</span><span class=\"params\">(String serviceType, <span class=\"keyword\">int</span> errorCode)</span> </span>&#123;</div><div class=\"line\">            Log.e(TAG, <span class=\"string\">\"Discovery failed: Error code:\"</span> + errorCode);</div><div class=\"line\">            mNsdManager.stopServiceDiscovery(<span class=\"keyword\">this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>NSD API</code>通过使用该接口中的方法，可以对网络服务状态进行监控。设置好监听器后，调用<code>discoverService()</code>函数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mNsdManager.discoveryService(SERVICE_TYPE,NsdManager.PROTOCOL_DNS_SD,mDiscoveryListener);</div></pre></td></tr></table></figure>\n</li>\n<li><p>连接到网络上的服务</p>\n<p>发现网络上的可接入服务时，首先调用resolveService()方法，来确定服务连接信息。实现<code>NsdManage.ResolveListener</code>对象并将其传入<code>resolveService()</code>方法，并使用该对象获得<code>NsdSerServiceInfo</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initializeResolveListener</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  mResolveListener = <span class=\"keyword\">new</span> NsdManager.ResolveListener()&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResolveFailed</span><span class=\"params\">(NsdServiceInfo serviceInfo, <span class=\"keyword\">int</span> errorCode)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// Called when the resolve fails.  Use the error code to debug.</span></div><div class=\"line\">            Log.e(TAG, <span class=\"string\">\"Resolve failed\"</span> + errorCode);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceResolved</span><span class=\"params\">(NsdServiceInfo serviceInfo)</span> </span>&#123;</div><div class=\"line\">            Log.e(TAG, <span class=\"string\">\"Resolve Succeeded. \"</span> + serviceInfo);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (serviceInfo.getServiceName().equals(mServiceName)) &#123;</div><div class=\"line\">                Log.d(TAG, <span class=\"string\">\"Same IP.\"</span>);</div><div class=\"line\">                <span class=\"keyword\">return</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            mService = serviceInfo;</div><div class=\"line\">            <span class=\"keyword\">int</span> port = mService.getPort();</div><div class=\"line\">            InetAddress host = mService.getHost();</div><div class=\"line\">        &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>至此完成服务接入，即可实现本地与之通讯。</p>\n</li>\n<li><p>程序退出注销服务</p>\n<p>使用NSD服务是比较消耗资源的，而且重复链接会导致问题，所以需要在app生命周期内的合适阶段开启、关闭服务。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Activity</span></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onPause</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mNsdHelper != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            mNsdHelper.tearDown();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onPause();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onResume</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onResume();</div><div class=\"line\">        <span class=\"keyword\">if</span> (mNsdHelper != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            mNsdHelper.registerService(mConnection.getLocalPort());</div><div class=\"line\">            mNsdHelper.discoverServices();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mNsdHelper.tearDown();</div><div class=\"line\">        mConnection.tearDown();</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// NsdHelper's tearDown method</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">tearDown</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mNsdManager.unregisterService(mRegistrationListener);</div><div class=\"line\">        mNsdManager.stopServiceDiscovery(mDiscoveryListener);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"2、使用WiFi建立P2P连接\"><a href=\"#2、使用WiFi建立P2P连接\" class=\"headerlink\" title=\"2、使用WiFi建立P2P连接\"></a>2、使用WiFi建立P2P连接</h3><p>WiFi点对点(P2P)API允许应用程序在无需连接到网络和热点的情况下连接到附近的设备。相比于蓝牙技术，其具有加大的连接范围。</p>\n<ul>\n<li><p>配置应用权限</p>\n<p>使用Wi-Fi P2P技术需要添加<code>CHANGE_WIFI_STATE</code>,<code>ACCESS_WIFI_STATE</code>以及<code>INTERNET</code>三种权限，因为虽然Wi-Fi P2P技术可以不用访问互联网，但是它使用的是<code>Java socket</code>的标准，所以需要<code>INTERNET</code>权限。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"</div><div class=\"line\">          package=\"com.example.android.nsdchat\"</div><div class=\"line\">          ...</div><div class=\"line\">\t&lt;uses-permission</div><div class=\"line\">        android:required=\"true\"</div><div class=\"line\">        android:name=\"android.permission.ACCESS_WIFI_STATE\"/&gt;</div><div class=\"line\">\t&lt;uses-permission</div><div class=\"line\">        android:required=\"true\"</div><div class=\"line\">        android:name=\"android.permission.CHANGE_WIFI_STATE\"/&gt;</div><div class=\"line\">    &lt;uses-permission</div><div class=\"line\">        android:required=\"true\"</div><div class=\"line\">        android:name=\"android.permission.INTERNET\"/&gt;</div><div class=\"line\">    ...</div></pre></td></tr></table></figure>\n</li>\n<li><p>设置广播接收器和P2P管理器</p>\n<p>使用WiFi P2P时，需要侦听事件发生时的broadcast intent。需要<code>IntentFilter</code></p>\n<ul>\n<li><code>WIFI_P2P_STATE_CHANGED_ACTION</code>指示Wi-Fi P2P是否开启</li>\n<li><code>WIFI_P2P_PEERS_CHANGED_ACTION</code>代表对等列表节点发生了变化。</li>\n<li><code>WIFI_P2P_CONNECTION_CHANGED_ACTION</code>表明Wi-Fi P2P连接状态发生了变化。</li>\n<li><code>WIFI_P2P_THIS_DEVICE_CHANGED_ACTION</code>指示设备详细配置发生了变化。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> IntentFilter intentFilter = <span class=\"keyword\">new</span> IntentFilter();</div><div class=\"line\">...</div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">    setContentView(R.layout.main);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//  Indicates a change in the Wi-Fi P2P status.</span></div><div class=\"line\">    intentFilter.addAction(WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Indicates a change in the list of available peers.</span></div><div class=\"line\">    intentFilter.addAction(WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Indicates the state of Wi-Fi P2P connectivity has changed.</span></div><div class=\"line\">    intentFilter.addAction(WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Indicates this device's details have changed.</span></div><div class=\"line\">    intentFilter.addAction(WifiP2pManager.WIFI_P2P_THIS_DEVICE_CHANGED_ACTION);</div><div class=\"line\"></div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在<code>onCreate()</code>方法的最后，需要获得<code>WifiP2pManager</code>的实例，并调用他的<code>initailize()</code>方法，以获得<code>WifiP2pManager.Channel</code>对象.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Channel mChannel;</div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span></span>&#123;</div><div class=\"line\">  ...</div><div class=\"line\">    mManager = (WifiP2pManager)getSystemService(Context.WIFI_P2P_SERVICE);</div><div class=\"line\">\tmChannel = mManager.initialize(<span class=\"keyword\">this</span>,getMainLooper(),<span class=\"keyword\">null</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后创建广播接收着，监听上述不同的P2P状态变化。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceive</span><span class=\"params\">(Context context, Intent intent)</span> </span>&#123;</div><div class=\"line\">        String action = intent.getAction();</div><div class=\"line\">        <span class=\"keyword\">if</span> (WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION.equals(action)) &#123;</div><div class=\"line\">            <span class=\"comment\">// Determine if Wifi P2P mode is enabled or not, alert</span></div><div class=\"line\">            <span class=\"comment\">// the Activity.</span></div><div class=\"line\">            <span class=\"keyword\">int</span> state = intent.getIntExtra(WifiP2pManager.EXTRA_WIFI_STATE, -<span class=\"number\">1</span>);</div><div class=\"line\">            <span class=\"keyword\">if</span> (state == WifiP2pManager.WIFI_P2P_STATE_ENABLED) &#123;</div><div class=\"line\">                activity.setIsWifiP2pEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                activity.setIsWifiP2pEnabled(<span class=\"keyword\">false</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION.equals(action)) &#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// The peer list has changed!  We should probably do something about</span></div><div class=\"line\">            <span class=\"comment\">// that.</span></div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION.equals(action)) &#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// Connection state changed!  We should probably do something about</span></div><div class=\"line\">            <span class=\"comment\">// that.</span></div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (WifiP2pManager.WIFI_P2P_THIS_DEVICE_CHANGED_ACTION.equals(action)) &#123;</div><div class=\"line\">            DeviceListFragment fragment = (DeviceListFragment) activity.getFragmentManager()</div><div class=\"line\">                    .findFragmentById(R.id.frag_list);</div><div class=\"line\">            fragment.updateThisDevice((WifiP2pDevice) intent.getParcelableExtra(</div><div class=\"line\">                    WifiP2pManager.EXTRA_WIFI_P2P_DEVICE));</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>并在Activity启动时，注册广播，添加过滤器。Activity暂停或者关闭时候，注销广播。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"comment\">//在Activity启动后注册广播</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResume</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onResume();</div><div class=\"line\">        receiver = <span class=\"keyword\">new</span> WiFiDirectBroadcastReceiver(mManager, mChannel, <span class=\"keyword\">this</span>);</div><div class=\"line\">        registerReceiver(receiver, intentFilter);</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"comment\">//Activity关闭前，注销广播。</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPause</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onPause();</div><div class=\"line\">        unregisterReceiver(receiver);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>初始化对等节点发现(Peer Discovery)</p>\n<p>调用<code>discoveryPeers()</code>开始搜寻附近设备，需要传入参数</p>\n<ul>\n<li>上面得到的<code>WifiP2pManager.Channel</code>对象。</li>\n<li>对<code>WifiP2pManager.ActionListener</code>接口的实现，确定发现成功与失败时候的事件处理。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">mManager.discoverPeers(mChannel, <span class=\"keyword\">new</span> WifiP2pManager.ActionListener() &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSuccess</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// Code for when the discovery initiation is successful goes here.</span></div><div class=\"line\">            <span class=\"comment\">// No services have actually been discovered yet, so this method</span></div><div class=\"line\">            <span class=\"comment\">// can often be left blank.  Code for peer discovery goes in the</span></div><div class=\"line\">            <span class=\"comment\">// onReceive method, detailed below.</span></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(<span class=\"keyword\">int</span> reasonCode)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// Code for when the discovery initiation fails goes here.</span></div><div class=\"line\">            <span class=\"comment\">// Alert the user that something went wrong.</span></div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><strong>注意：</strong>如上仅仅完成了对匹配设备的发现扫描的初始化，<code>WifiP2pManager.ActionListener</code>中国年的方法会通知应用初始化是否正确等消息。</p>\n</li>\n<li><p>获取对等节点列表</p>\n<p>完成初始化后，扫描会得到匹配的附近设备列表信息。需要实现<code>WifiP2pManager.PeerListener</code>接口。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> List peers = <span class=\"keyword\">new</span> ArrayList();<span class=\"comment\">//匹配到的设备信息列表。</span></div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> PeerListListener peerListListener = <span class=\"keyword\">new</span> PeerListListener() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPeersAvailable</span><span class=\"params\">(WifiP2pDeviceList peerList)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// Out with the old, in with the new.</span></div><div class=\"line\">            peers.clear();</div><div class=\"line\">            peers.addAll(peerList.getDeviceList());</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// If an AdapterView is backed by this data, notify it</span></div><div class=\"line\">            <span class=\"comment\">// of the change.  For instance, if you have a ListView of available</span></div><div class=\"line\">            <span class=\"comment\">// peers, trigger an update.</span></div><div class=\"line\">            ((WiFiPeerListAdapter) getListAdapter()).notifyDataSetChanged();</div><div class=\"line\">            <span class=\"keyword\">if</span> (peers.size() == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                Log.d(WiFiDirectActivity.TAG, <span class=\"string\">\"No devices found\"</span>);</div><div class=\"line\">                <span class=\"keyword\">return</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>如上获得的匹配列表，我们需要将它传递给广播接收者做进一步处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceive</span><span class=\"params\">(Context context,Intent intent)</span></span>&#123;</div><div class=\"line\">  ...</div><div class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION.equals(action)) &#123;</div><div class=\"line\">        <span class=\"comment\">// Request available peers from the wifi p2p manager. This is an</span></div><div class=\"line\">        <span class=\"comment\">// asynchronous call and the calling activity is notified with a</span></div><div class=\"line\">        <span class=\"comment\">// callback on PeerListListener.onPeersAvailable()</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (mManager != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            mManager.requestPeers(mChannel, peerListListener);</div><div class=\"line\">        &#125;</div><div class=\"line\">        Log.d(WiFiDirectActivity.TAG, <span class=\"string\">\"P2P peers changed\"</span>);</div><div class=\"line\">    &#125;...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>连接一个对等节点</p>\n<p>发现到附近可用设备，则可以进一步的连接它，需要创建一个新的WifiP2pConfig对象，并将连接信息从设备WifiP2pDevice拷贝到其中，调用connect()方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">connect</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// Picking the first device found on the network.</span></div><div class=\"line\">      WifiP2pDevice device = peers.get(<span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">      WifiP2pConfig config = <span class=\"keyword\">new</span> WifiP2pConfig();</div><div class=\"line\">      config.deviceAddress = device.deviceAddress;</div><div class=\"line\">      config.wps.setup = WpsInfo.PBC;</div><div class=\"line\"><span class=\"comment\">//ActionListener仅实现通知初始化成功与否</span></div><div class=\"line\">      mManager.connect(mChannel, config, <span class=\"keyword\">new</span> ActionListener() &#123;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"meta\">@Override</span></div><div class=\"line\">          <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSuccess</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">              <span class=\"comment\">// WiFiDirectBroadcastReceiver will notify us. Ignore for now.</span></div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"meta\">@Override</span></div><div class=\"line\">          <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(<span class=\"keyword\">int</span> reason)</span> </span>&#123;</div><div class=\"line\">              Toast.makeText(WiFiDirectActivity.<span class=\"keyword\">this</span>, <span class=\"string\">\"Connect failed. Retry.\"</span>,</div><div class=\"line\">                      Toast.LENGTH_SHORT).show();</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>使用<code>WifiP2pManager.ConnectionInfoListener</code>接口，<code>onConnectionInfoAvailable()</code>来确定连接状态。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onConnectionInfoAvailable</span><span class=\"params\">(<span class=\"keyword\">final</span> WifiP2pInfo info)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// InetAddress from WifiP2pInfo struct.</span></div><div class=\"line\">    InetAddress groupOwnerAddress = info.groupOwnerAddress.getHostAddress());</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// After the group negotiation, we can determine the group owner.</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (info.groupFormed &amp;&amp; info.isGroupOwner) &#123;</div><div class=\"line\">        <span class=\"comment\">// Do whatever tasks are specific to the group owner.</span></div><div class=\"line\">        <span class=\"comment\">// One common case is creating a server thread and accepting</span></div><div class=\"line\">        <span class=\"comment\">// incoming connections.</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (info.groupFormed) &#123;</div><div class=\"line\">        <span class=\"comment\">// The other device acts as the client. In this case,</span></div><div class=\"line\">        <span class=\"comment\">// you'll want to create a client thread that connects to the group</span></div><div class=\"line\">        <span class=\"comment\">// owner.</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>完善广播接收者的代码,监听到连接广播信号时候，请求连接。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION.equals(action)) &#123;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"keyword\">if</span> (mManager == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">               <span class=\"keyword\">return</span>;</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           NetworkInfo networkInfo = (NetworkInfo) intent</div><div class=\"line\">                   .getParcelableExtra(WifiP2pManager.EXTRA_NETWORK_INFO);</div><div class=\"line\"></div><div class=\"line\">           <span class=\"keyword\">if</span> (networkInfo.isConnected()) &#123;</div><div class=\"line\"></div><div class=\"line\">               <span class=\"comment\">// We are connected with the other device, request connection</span></div><div class=\"line\">               <span class=\"comment\">// info to find group owner IP</span></div><div class=\"line\"></div><div class=\"line\">               mManager.requestConnectionInfo(mChannel, connectionListener);</div><div class=\"line\">           &#125;</div><div class=\"line\">           ...</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"3、使用WiFi-P2P服务\"><a href=\"#3、使用WiFi-P2P服务\" class=\"headerlink\" title=\"3、使用WiFi P2P服务\"></a>3、使用WiFi P2P服务</h3><p>第一节讲述了<code>NSD</code>服务用于局域网之间的连接通讯，本节的WiFi P2P有点类似，但是并不相同。</p>\n<ul>\n<li><p>配置Manifest</p>\n<p>需要网络权限以及wifi相关权限。如上节所讲的三个权限，配置在Android manifest清单文件中。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"</div><div class=\"line\">    package=\"com.example.android.nsdchat\"</div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    &lt;uses-permission</div><div class=\"line\">        android:required=\"true\"</div><div class=\"line\">        android:name=\"android.permission.ACCESS_WIFI_STATE\"/&gt;</div><div class=\"line\">    &lt;uses-permission</div><div class=\"line\">        android:required=\"true\"</div><div class=\"line\">        android:name=\"android.permission.CHANGE_WIFI_STATE\"/&gt;</div><div class=\"line\">    &lt;uses-permission</div><div class=\"line\">        android:required=\"true\"</div><div class=\"line\">        android:name=\"android.permission.INTERNET\"/&gt;</div><div class=\"line\">    ...</div></pre></td></tr></table></figure>\n</li>\n<li><p>添加本地服务</p>\n<p>需要在服务框架中注册该服务，才能对外提供。</p>\n<ul>\n<li>新建<code>WifiP2pServiceInfo</code>对象</li>\n<li>加入相应的服务详细信息</li>\n<li>调用<code>addLocalService()</code>来注册为本地服务。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">startRegistration</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//  Create a string map containing information about your service.</span></div><div class=\"line\">        Map record = <span class=\"keyword\">new</span> HashMap();</div><div class=\"line\">        record.put(<span class=\"string\">\"listenport\"</span>, String.valueOf(SERVER_PORT));</div><div class=\"line\">        record.put(<span class=\"string\">\"buddyname\"</span>, <span class=\"string\">\"John Doe\"</span> + (<span class=\"keyword\">int</span>) (Math.random() * <span class=\"number\">1000</span>));</div><div class=\"line\">        record.put(<span class=\"string\">\"available\"</span>, <span class=\"string\">\"visible\"</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Service information.  Pass it an instance name, service type</span></div><div class=\"line\">        <span class=\"comment\">// _protocol._transportlayer , and the map containing</span></div><div class=\"line\">        <span class=\"comment\">// information other devices will want once they connect to this one.</span></div><div class=\"line\">        WifiP2pDnsSdServiceInfo serviceInfo =</div><div class=\"line\">                WifiP2pDnsSdServiceInfo.newInstance(<span class=\"string\">\"_test\"</span>, <span class=\"string\">\"_presence._tcp\"</span>, record);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Add the local service, sending the service info, network channel,</span></div><div class=\"line\">        <span class=\"comment\">// and listener that will be used to indicate success or failure of</span></div><div class=\"line\">        <span class=\"comment\">// the request.</span></div><div class=\"line\">        mManager.addLocalService(channel, serviceInfo, <span class=\"keyword\">new</span> ActionListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSuccess</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                <span class=\"comment\">// Command successful! Code isn't necessarily needed here,</span></div><div class=\"line\">                <span class=\"comment\">// Unless you want to update the UI or add logging statements.</span></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(<span class=\"keyword\">int</span> arg0)</span> </span>&#123;</div><div class=\"line\">                <span class=\"comment\">// Command failed.  Check for P2P_UNSUPPORTED, ERROR, or BUSY</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>发现附近的服务</p>\n<p>新建一个<code>WifiP2pManager.DnsSdTxtRecordListener</code>实例来监听实时收到到记录。记录到的周边设备服务信息会拷贝到外部数据机构中，以供使用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> HashMap&lt;String, String&gt; buddies = <span class=\"keyword\">new</span> HashMap&lt;String, String&gt;();</div><div class=\"line\">...</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">discoverService</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    DnsSdTxtRecordListener txtListener = <span class=\"keyword\">new</span> DnsSdTxtRecordListener() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"comment\">/* Callback includes:</span></div><div class=\"line\">         * fullDomain: full domain name: e.g \"printer._ipp._tcp.local.\"</div><div class=\"line\">         * record: TXT record dta as a map of key/value pairs.</div><div class=\"line\">         * device: The device running the advertised service.</div><div class=\"line\">         */</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDnsSdTxtRecordAvailable</span><span class=\"params\">(</span></span></div><div class=\"line\">                String fullDomain, Map record, WifiP2pDevice device) &#123;</div><div class=\"line\">                Log.d(TAG, <span class=\"string\">\"DnsSdTxtRecord available -\"</span> + record.toString());</div><div class=\"line\">                buddies.put(device.deviceAddress, record.get(<span class=\"string\">\"buddyname\"</span>));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后创建<code>WifiP2pManager.DnsSdServiceResponseListener</code>对象，来响应服务请求。上述两个listener匹配构建后，调用<code>setDnsResponseListener()</code>将它们加入<code>WifiP2pManager</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">discoverService</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\">    DnsSdServiceResponseListener servListener = <span class=\"keyword\">new</span> DnsSdServiceResponseListener() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDnsSdServiceAvailable</span><span class=\"params\">(String instanceName, String registrationType,</span></span></div><div class=\"line\">                WifiP2pDevice resourceType) &#123;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// Update the device name with the human-friendly version from</span></div><div class=\"line\">                <span class=\"comment\">// the DnsTxtRecord, assuming one arrived.</span></div><div class=\"line\">                resourceType.deviceName = buddies</div><div class=\"line\">                        .containsKey(resourceType.deviceAddress) ? buddies</div><div class=\"line\">                        .get(resourceType.deviceAddress) : resourceType.deviceName;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// Add to the custom adapter defined specifically for showing</span></div><div class=\"line\">                <span class=\"comment\">// wifi devices.</span></div><div class=\"line\">                WiFiDirectServicesList fragment = (WiFiDirectServicesList) getFragmentManager()</div><div class=\"line\">                        .findFragmentById(R.id.frag_peerlist);</div><div class=\"line\">                WiFiDevicesAdapter adapter = ((WiFiDevicesAdapter) fragment</div><div class=\"line\">                        .getListAdapter());</div><div class=\"line\"></div><div class=\"line\">                adapter.add(resourceType);</div><div class=\"line\">                adapter.notifyDataSetChanged();</div><div class=\"line\">                Log.d(TAG, <span class=\"string\">\"onBonjourServiceAvailable \"</span> + instanceName);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    mManager.setDnsSdResponseListeners(channel, servListener, txtListener);</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>调用<code>addServiceRequest()</code>创建服务请求,它需要一个listener来通知创建成功与否。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">serviceRequest = WifiP2pDnsSdServiceRequest.newInstance();</div><div class=\"line\">       mManager.addServiceRequest(channel,</div><div class=\"line\">               serviceRequest,</div><div class=\"line\">               <span class=\"keyword\">new</span> ActionListener() &#123;</div><div class=\"line\">                   <span class=\"meta\">@Override</span></div><div class=\"line\">                   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSuccess</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                       <span class=\"comment\">// Success!</span></div><div class=\"line\">                   &#125;</div><div class=\"line\"></div><div class=\"line\">                   <span class=\"meta\">@Override</span></div><div class=\"line\">                   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(<span class=\"keyword\">int</span> code)</span> </span>&#123;</div><div class=\"line\">                       <span class=\"comment\">// Command failed.  Check for P2P_UNSUPPORTED, ERROR, or BUSY</span></div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125;);</div></pre></td></tr></table></figure>\n<p>最后是调用<code>discoverService()</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">mManager.discoverServices(channel, <span class=\"keyword\">new</span> ActionListener() &#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSuccess</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                <span class=\"comment\">// Success!</span></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(<span class=\"keyword\">int</span> code)</span> </span>&#123;</div><div class=\"line\">                <span class=\"comment\">// Command failed.  Check for P2P_UNSUPPORTED, ERROR, or BUSY</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (code == WifiP2pManager.P2P_UNSUPPORTED) &#123;</div><div class=\"line\">                    Log.d(TAG, <span class=\"string\">\"P2P isn't supported on this device.\"</span>);</div><div class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(...)</div><div class=\"line\">                    ...</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div></pre></td></tr></table></figure>\n<p>顺利的话，可以实现匹配连接的效果，常见错误代码：</p>\n<ul>\n<li>P2P_UNSUPPORTED 当前设备不支持</li>\n<li>BUSY 系统繁忙</li>\n<li>ERROR 内部错误</li>\n</ul>\n</li>\n</ul>\n"},{"title":"Android开源控件搜集----ProgressBar","date":"2017-03-27T08:57:00.000Z","author":"冰路梦","_content":"# Android开源控件搜集--ProgressBar\n\n**Note：**本篇博客长期维护更新，欢迎各位网友共同合作，共享知识与技术。\n\n本篇博客主要搜集个人任务比较优秀的Android开源控件，大多来自github，并附上链接，自己学习之余，亦希望于大家有所帮助。\n\nAndroid的控件还算比较多，官方和第三方自定义优秀控件数不胜数，搜集难免不全，逐步更新丰富吧。\n\n## ProgressBar\n\n1. SmoothProgressBar\n\n   炫酷的水平进度条，效果：\n\n   ![progress](https://github.com/castorflex/SmoothProgressBar/raw/master/screenshots/SPB_sample.gif)\n\n   github:https://github.com/castorflex/SmoothProgressBar\n\n2. NumberProgressBar\n\n   漂亮纤细的进度条，带数字，效果：\n\n   ![progress](https://camo.githubusercontent.com/0c92568af7ec4e04e2e1503acdd2ca99854ab0b5/687474703a2f2f7777332e73696e61696d672e636e2f6d773639302f36313064633033346a77316566797264386e376937673230637a30326d7135662e676966)\n\n   github:https://github.com/daimajia/NumberProgressBar\n\n3. LoadingImage\n\n   各种漂亮效果的加载动画，效果：\n\n   ![progress](https://raw.githubusercontent.com/dinuscxj/LoadingDrawable/master/Preview/ShapeChangeDrawable.gif)\n\n   ![progress](https://raw.githubusercontent.com/dinuscxj/LoadingDrawable/master/Preview/CircleJumpDrawable.gif)\n\n   github:https://github.com/dinuscxj/LoadingDrawable\n\n4. ProgressWheel\n\n   一个wheel形的进度条，效果：\n\n   ![progress](https://github.com/Todd-Davies/ProgressWheel/raw/master/sample_image.png)\n\n   github:https://github.com/Todd-Davies/ProgressWheel\n\n5. CircleProgress\n\n   几种不同的环形进度，效果：\n\n   ![progress](https://raw.githubusercontent.com/lzyzsd/CircleProgress/master/demos/circle_progress.gif)\n\n   github:https://github.com/lzyzsd/CircleProgress\n\n6. materialish-progress\n\n   一个可以在android2.3上实现material效果的progress，效果：\n\n   ![progress](https://github.com/pnikosis/materialish-progress/raw/master/spinningwheel.gif)\n\n   github:https://github.com/pnikosis/materialish-progress\n\n7. AndroidFillableLoaders\n\n   炫酷图像的加载progress，效果：\n\n   ![progress](https://github.com/JorgeCastilloPrz/AndroidFillableLoaders/raw/master/art/demoWaves.gif)\n\n   github:https://github.com/JorgeCastilloPrz/AndroidFillableLoaders\n\n8. RoundCornerProgressBar\n\n   带有圆角和图标的进度条，效果：\n\n   ![progress](https://raw.githubusercontent.com/akexorcist/Android-RoundCornerProgressBar/master/image/screenshot_01.png)\n\n   github:https://github.com/akexorcist/Android-RoundCornerProgressBar\n\n9. GoogleProgressBar\n\n   Google应用的进度条,效果：\n\n   ![progress](https://raw.githubusercontent.com/jpardogo/GoogleProgressBar/dev/art/GoogleDices.gif)\n\n   ![progress](https://raw.githubusercontent.com/jpardogo/GoogleProgressBar/master/art/GoogleProgressBar.gif)\n\n   github:https://github.com/jpardogo/GoogleProgressBar\n\n10. MaterialProgressBar\n\n  实现material design风格的progress，效果：\n\n  ![progress](https://github.com/DreaminginCodeZH/MaterialProgressBar/raw/master/screenshot/android_4_4_4.png)\n\n  github:https://github.com/DreaminginCodeZH/MaterialProgressBar\n\n11. WaveView\n\n    水波波浪效果的progress，效果：\n\n    ![progress](https://camo.githubusercontent.com/60722e9d4f2d2daa78a8650cb27a32adea82bdd4/68747470733a2f2f7261772e6769746875622e636f6d2f6a6f686e3939302f57617665566965772f6d61737465722f73637265656e73686f7425323661706b2f73637265656e73686f742e676966)\n\n    github:https://github.com/john990/WaveView\n\n12. MaterialLoadingProgressBar\n\n    一个比较时代感的Material progress，效果：\n\n    ![progress](https://github.com/lsjwzh/MaterialLoadingProgressBar/raw/master/screen.gif)\n\n    github:https://github.com/lsjwzh/MaterialLoadingProgressBar\n\n13. MusicPlayerView\n\n    一个用于音乐播放进度的progress，效果：\n\n    ![progress](https://raw.githubusercontent.com/iammert/MusicPlayerView/master/art/art2.gif)\n\n    github:https://github.com/iammert/MusicPlayerView\n\n14. SquareProgressBar\n\n    一个方形的进度progress，效果：\n\n    ![progress](https://camo.githubusercontent.com/3ddc0a0d9ed3c39f806f1459d49e46e87be81e29/68747470733a2f2f6d61766868772d626e313330362e66696c65732e316472762e636f6d2f793270386e736e3035354b30583172663935725743634375686f6b583451453542313953506f686c74513735386174513948635632694b334b5f773830325765673668794d70624c507770574745476f62385f7a5f62725651536e4c572d50664e43773274554e6132672d5930786b344279344c6a4a316e564f7445394a7a6a5737535f6251716c4833796668657a793847646a744d4b717a6e5832486a74463834363163456536394b532d6f512f636f7665725f6769746875622e706e67)\n\n    github:https://github.com/mrwonderman/android-square-progressbar\n\n15. Download Progress\n\n    下载显示进度progress，效果：\n\n    ![progress](https://github.com/panwrona/DownloadProgressBar/raw/master/success.gif)\n\n    github:https://github.com/panwrona/DownloadProgressBar\n\n16. HoloCircularProgressBar\n\n    Holo风格的进度progress，效果：\n\n    ![progress](https://camo.githubusercontent.com/1df9a18184ed40918d7135d5db345fe1070137a7/68747470733a2f2f7261772e6769746875622e636f6d2f7061737373792f616e64726f69642d486f6c6f43697263756c617250726f67726573734261722f6d61737465722f7261772f73637265656e73686f74312e706e67)\n\n    github:https://github.com/passsy/android-HoloCircularProgressBar\n\n17. ArcProgressStackView\n\n    多层圆环进度progress，效果：\n\n    ![progress](https://camo.githubusercontent.com/611d22202564ed670837756695c1d712f23c26ce/68747470733a2f2f64726976652e676f6f676c652e636f6d2f75633f6578706f72743d646f776e6c6f61642669643d304278504f5f55655337775363546a6c564e6b6c6855485a69625645)\n\n    github:https://github.com/DevLight-Mobile-Agency/ArcProgressStackView\n\n18. LoadingBalls\n\n    类似android 5.1的开机加载进度，效果：\n\n    ![progress](https://github.com/glomadrian/loading-balls/raw/master/art/1.gif)\n\n    github:https://github.com/glomadrian/loading-balls\n\n19. FABProgressCircle\n\n    一个fab按钮进度progress，效果：\n\n    ![progress](https://github.com/JorgeCastilloPrz/FABProgressCircle/raw/master/art/fabprogresscircle.gif)\n\n20. CircularProgressDrawable\n\n    环形的进度图画，效果：\n\n    ![progress](https://github.com/Sefford/CircularProgressDrawable/raw/master/overshoot.gif)\n\n    github:https://github.com/Sefford/CircularProgressDrawable\n\n21. CircleProgress\n\n    折叠滚动的圆形进度，效果：\n\n    ![progress](https://github.com/Fichardu/CircleProgress/raw/master/art/progress.gif)\n\n    github:https://github.com/Fichardu/CircleProgress\n\n22. CircleProgressView\n\n    圆环形的进度条，效果：\n\n    ![progress](https://raw.githubusercontent.com/jakob-grabner/Circle-Progress-View/master/media/demo.gif)\n\n    github:https://github.com/jakob-grabner/Circle-Progress-View\n\n23. DilatingDotsProgressBar\n\n    跑马的个式的进度progress，效果：\n\n    ![progress](https://github.com/JustZak/DilatingDotsProgressBar/raw/demo/example/src/main/assets/dotdemo.gif?raw=true)\n\n    github:https://github.com/JustZak/DilatingDotsProgressBar\n\n24. CircleMusicProgressbar\n\n    类似上面的那个音乐播放进度，这个更漂亮些吧，效果：\n\n    ![progress](https://raw.githubusercontent.com/aliab/circular-music-progressbar/master/art/splash.jpg)\n\n    github:https://github.com/aliab/circular-music-progressbar\n\n25. SpotsProgressDialog\n\n    割草机效果的progress，效果：\n\n    ![progress](https://camo.githubusercontent.com/d8108413298d70047f52cff9ac05603a5fd51988/687474703a2f2f332e62702e626c6f6773706f742e636f6d2f2d6c3155765657694d5341672f564c61355a6657346444492f41414141414141414e54632f7273576f755f71623042632f733332302f593648615453772e676966)\n\n    github:https://github.com/d-max/spots-dialog\n\n26. DashedcircularProgress\n\n    类似安全卫士里面电量进度的progress，效果：\n\n    ![progress](https://github.com/glomadrian/dashed-circular-progress/raw/master/art/sample.gif)\n\n    github:https://github.com/glomadrian/dashed-circular-progress\n\n27. ColorArcProgressBar\n\n    仪表盘效果的进度progress，效果：\n\n    ![progress](https://raw.githubusercontent.com/Shinelw/ColorArcProgressBar/master/Demo.gif)\n\n    github:https://github.com/Shinelw/ColorArcProgressBar\n\n28. MagicProgressWidget\n\n    也是简单的进度progress，效果：\n\n    ![progress](https://github.com/lingochamp/MagicProgressWidget/raw/master/art/demo.gif)\n\n    github:https://github.com/lingochamp/MagicProgressWidget\n\n29. RingProgress\n\n    类似上面提到的一个，这也是圆环形的进度progress，效果：\n\n    ![progress](https://github.com/ldoublem/RingProgress/raw/master/shot/shot3.gif)\n\n    github:https://github.com/ldoublem/RingProgress\n\n30. ElasticDownload\n\n    实现晾衣绳效果的progress，效果：\n\n    ![progress](https://raw.githubusercontent.com/Tibolte/ElasticDownload/master/success.gif)\n\n    github:https://github.com/Tibolte/ElasticDownload\n\n31. Loading\n\n    翻页效果的progress，效果：\n\n    ![progress](https://github.com/yankai-victor/Loading/raw/master/images/BookLoading.gif)\n\n    github:https://github.com/yankai-victor/Loading\n\n32. AnimatedCircleLoadingView\n\n    漂亮的粘性水滴progress，效果：\n\n    ![progress](https://github.com/jlmd/AnimatedCircleLoadingView/raw/master/art/indeterminate_ok.gif)\n\n    github:https://github.com/jlmd/AnimatedCircleLoadingView\n\n33. AVLoading\n\n    花样繁多的progress，效果：\n\n    ![progress](https://github.com/81813780/AVLoadingIndicatorView/raw/master/screenshots/avi.gif)\n\n    github:https://github.com/81813780/AVLoadingIndicatorView\n\n34. CatLoadingView\n\n    一个狗狗加载progress，作者说是猫，呵呵，效果：\n\n    ![progress](https://camo.githubusercontent.com/762015246e027b7d46df51faa51fd669e44f974b/687474703a2f2f7777342e73696e61696d672e636e2f6d773639302f61363935616364656a7731663268626d66787a6b3567323038753061326173732e676966)\n\n    github:https://github.com/Rogero0o/CatLoadingView\n\n35. WaveLoadingView\n\n    水波波浪形progress，效果：\n\n    ![progress](https://github.com/wasabeef/awesome-android-ui/blob/master/art/WaveLoadingView.jpg?raw=true)\n\n    github:https://github.com/tangqi92/WaveLoadingView\n\n36. MetaballLoading\n\n    黏性泡泡的progress，效果：\n\n    ![progress](https://github.com/dodola/MetaballLoading/raw/master/metaball.gif)\n\n    github:https://github.com/dodola/MetaballLoading\n\n37. CircularFillableLoaders\n\n    似乎有过一个类似的progress，效果：\n\n    ![progress](https://github.com/lopspower/CircularFillableLoaders/raw/master/preview/preview.gif)\n\n    github:https://github.com/lopspower/CircularFillableLoaders\n\n38. LoadingAnimation\n\n    绚丽的加载progress，效果：\n\n    ![progress](https://github.com/guohuanwen/AndroidLoadingAnimation/raw/master/screenshots/taiji1.gif)\n\n    github:https://github.com/guohuanwen/AndroidLoadingAnimation\n\n39. SpinKit\n\n    多种加载progress，效果：\n\n    ![progress](https://raw.githubusercontent.com/ybq/AndroidSpinKit/master/art/screen.gif)\n\n    github:https://github.com/ybq/Android-SpinKit\n\n40. LoadingView\n\n    另一拨loading，效果：\n\n    ![progress](https://github.com/ldoublem/LoadingView/raw/master/screen/%E6%95%88%E6%9E%9C.gif)\n\n    github:https://github.com/ldoublem/LoadingView\n\n41. ShapeLoadingView\n\n    带有阴影效果的progress，效果：\n\n    ![progress](https://camo.githubusercontent.com/575b98a56c5546043ec045d044429590e4a623fe/687474703a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f3136363836362d376434313538646532636534306139612e676966)\n\n    github:https://github.com/zzz40500/android-shapeLoadingView\n\n42. RoadRunner\n\n    可以自定义path路径的progress，效果：\n\n    ![progress](https://github.com/glomadrian/RoadRunner/raw/master/art/roadRunner.gif)\n\n    github:https://github.com/glomadrian/RoadRunner\n\n43. BezierLoadingView\n\n    贝塞尔粘性泡泡progress，效果：\n\n    ![progress](https://camo.githubusercontent.com/13cbed7a494b18b10fdd13be2c636a823e7547f5/687474703a2f2f69342e6275696d672e636f6d2f636464356134613866303233333635302e676966)\n\n    github:https://github.com/JeasonWong/BezierLoadingView\n\n44. StackLoadingView\n\n    stack风格progress，效果：\n\n    ![progress](https://raw.githubusercontent.com/jeasonwong/SlackLoadingView/master/screenshots/slack.gif)\n\n    github:https://github.com/JeasonWong/SlackLoadingView\n\n45. FAB-Loading\n\n    变脸progress，效果：\n\n    ![progress](https://raw.githubusercontent.com/smasoumi/FAB-Loading/master/images/marvel_loader.gif)\n\n    github:https://github.com/SaeedMasoumi/FAB-Loading","source":"_posts/Android开源控件搜集--ProgressBar.md","raw":"---\ntitle: \"Android开源控件搜集----ProgressBar\"\ndate: 2017-03-27 16:57\nauthor: 冰路梦\ntag:\n    - Android\ncategories:\n    - Android\n---\n# Android开源控件搜集--ProgressBar\n\n**Note：**本篇博客长期维护更新，欢迎各位网友共同合作，共享知识与技术。\n\n本篇博客主要搜集个人任务比较优秀的Android开源控件，大多来自github，并附上链接，自己学习之余，亦希望于大家有所帮助。\n\nAndroid的控件还算比较多，官方和第三方自定义优秀控件数不胜数，搜集难免不全，逐步更新丰富吧。\n\n## ProgressBar\n\n1. SmoothProgressBar\n\n   炫酷的水平进度条，效果：\n\n   ![progress](https://github.com/castorflex/SmoothProgressBar/raw/master/screenshots/SPB_sample.gif)\n\n   github:https://github.com/castorflex/SmoothProgressBar\n\n2. NumberProgressBar\n\n   漂亮纤细的进度条，带数字，效果：\n\n   ![progress](https://camo.githubusercontent.com/0c92568af7ec4e04e2e1503acdd2ca99854ab0b5/687474703a2f2f7777332e73696e61696d672e636e2f6d773639302f36313064633033346a77316566797264386e376937673230637a30326d7135662e676966)\n\n   github:https://github.com/daimajia/NumberProgressBar\n\n3. LoadingImage\n\n   各种漂亮效果的加载动画，效果：\n\n   ![progress](https://raw.githubusercontent.com/dinuscxj/LoadingDrawable/master/Preview/ShapeChangeDrawable.gif)\n\n   ![progress](https://raw.githubusercontent.com/dinuscxj/LoadingDrawable/master/Preview/CircleJumpDrawable.gif)\n\n   github:https://github.com/dinuscxj/LoadingDrawable\n\n4. ProgressWheel\n\n   一个wheel形的进度条，效果：\n\n   ![progress](https://github.com/Todd-Davies/ProgressWheel/raw/master/sample_image.png)\n\n   github:https://github.com/Todd-Davies/ProgressWheel\n\n5. CircleProgress\n\n   几种不同的环形进度，效果：\n\n   ![progress](https://raw.githubusercontent.com/lzyzsd/CircleProgress/master/demos/circle_progress.gif)\n\n   github:https://github.com/lzyzsd/CircleProgress\n\n6. materialish-progress\n\n   一个可以在android2.3上实现material效果的progress，效果：\n\n   ![progress](https://github.com/pnikosis/materialish-progress/raw/master/spinningwheel.gif)\n\n   github:https://github.com/pnikosis/materialish-progress\n\n7. AndroidFillableLoaders\n\n   炫酷图像的加载progress，效果：\n\n   ![progress](https://github.com/JorgeCastilloPrz/AndroidFillableLoaders/raw/master/art/demoWaves.gif)\n\n   github:https://github.com/JorgeCastilloPrz/AndroidFillableLoaders\n\n8. RoundCornerProgressBar\n\n   带有圆角和图标的进度条，效果：\n\n   ![progress](https://raw.githubusercontent.com/akexorcist/Android-RoundCornerProgressBar/master/image/screenshot_01.png)\n\n   github:https://github.com/akexorcist/Android-RoundCornerProgressBar\n\n9. GoogleProgressBar\n\n   Google应用的进度条,效果：\n\n   ![progress](https://raw.githubusercontent.com/jpardogo/GoogleProgressBar/dev/art/GoogleDices.gif)\n\n   ![progress](https://raw.githubusercontent.com/jpardogo/GoogleProgressBar/master/art/GoogleProgressBar.gif)\n\n   github:https://github.com/jpardogo/GoogleProgressBar\n\n10. MaterialProgressBar\n\n  实现material design风格的progress，效果：\n\n  ![progress](https://github.com/DreaminginCodeZH/MaterialProgressBar/raw/master/screenshot/android_4_4_4.png)\n\n  github:https://github.com/DreaminginCodeZH/MaterialProgressBar\n\n11. WaveView\n\n    水波波浪效果的progress，效果：\n\n    ![progress](https://camo.githubusercontent.com/60722e9d4f2d2daa78a8650cb27a32adea82bdd4/68747470733a2f2f7261772e6769746875622e636f6d2f6a6f686e3939302f57617665566965772f6d61737465722f73637265656e73686f7425323661706b2f73637265656e73686f742e676966)\n\n    github:https://github.com/john990/WaveView\n\n12. MaterialLoadingProgressBar\n\n    一个比较时代感的Material progress，效果：\n\n    ![progress](https://github.com/lsjwzh/MaterialLoadingProgressBar/raw/master/screen.gif)\n\n    github:https://github.com/lsjwzh/MaterialLoadingProgressBar\n\n13. MusicPlayerView\n\n    一个用于音乐播放进度的progress，效果：\n\n    ![progress](https://raw.githubusercontent.com/iammert/MusicPlayerView/master/art/art2.gif)\n\n    github:https://github.com/iammert/MusicPlayerView\n\n14. SquareProgressBar\n\n    一个方形的进度progress，效果：\n\n    ![progress](https://camo.githubusercontent.com/3ddc0a0d9ed3c39f806f1459d49e46e87be81e29/68747470733a2f2f6d61766868772d626e313330362e66696c65732e316472762e636f6d2f793270386e736e3035354b30583172663935725743634375686f6b583451453542313953506f686c74513735386174513948635632694b334b5f773830325765673668794d70624c507770574745476f62385f7a5f62725651536e4c572d50664e43773274554e6132672d5930786b344279344c6a4a316e564f7445394a7a6a5737535f6251716c4833796668657a793847646a744d4b717a6e5832486a74463834363163456536394b532d6f512f636f7665725f6769746875622e706e67)\n\n    github:https://github.com/mrwonderman/android-square-progressbar\n\n15. Download Progress\n\n    下载显示进度progress，效果：\n\n    ![progress](https://github.com/panwrona/DownloadProgressBar/raw/master/success.gif)\n\n    github:https://github.com/panwrona/DownloadProgressBar\n\n16. HoloCircularProgressBar\n\n    Holo风格的进度progress，效果：\n\n    ![progress](https://camo.githubusercontent.com/1df9a18184ed40918d7135d5db345fe1070137a7/68747470733a2f2f7261772e6769746875622e636f6d2f7061737373792f616e64726f69642d486f6c6f43697263756c617250726f67726573734261722f6d61737465722f7261772f73637265656e73686f74312e706e67)\n\n    github:https://github.com/passsy/android-HoloCircularProgressBar\n\n17. ArcProgressStackView\n\n    多层圆环进度progress，效果：\n\n    ![progress](https://camo.githubusercontent.com/611d22202564ed670837756695c1d712f23c26ce/68747470733a2f2f64726976652e676f6f676c652e636f6d2f75633f6578706f72743d646f776e6c6f61642669643d304278504f5f55655337775363546a6c564e6b6c6855485a69625645)\n\n    github:https://github.com/DevLight-Mobile-Agency/ArcProgressStackView\n\n18. LoadingBalls\n\n    类似android 5.1的开机加载进度，效果：\n\n    ![progress](https://github.com/glomadrian/loading-balls/raw/master/art/1.gif)\n\n    github:https://github.com/glomadrian/loading-balls\n\n19. FABProgressCircle\n\n    一个fab按钮进度progress，效果：\n\n    ![progress](https://github.com/JorgeCastilloPrz/FABProgressCircle/raw/master/art/fabprogresscircle.gif)\n\n20. CircularProgressDrawable\n\n    环形的进度图画，效果：\n\n    ![progress](https://github.com/Sefford/CircularProgressDrawable/raw/master/overshoot.gif)\n\n    github:https://github.com/Sefford/CircularProgressDrawable\n\n21. CircleProgress\n\n    折叠滚动的圆形进度，效果：\n\n    ![progress](https://github.com/Fichardu/CircleProgress/raw/master/art/progress.gif)\n\n    github:https://github.com/Fichardu/CircleProgress\n\n22. CircleProgressView\n\n    圆环形的进度条，效果：\n\n    ![progress](https://raw.githubusercontent.com/jakob-grabner/Circle-Progress-View/master/media/demo.gif)\n\n    github:https://github.com/jakob-grabner/Circle-Progress-View\n\n23. DilatingDotsProgressBar\n\n    跑马的个式的进度progress，效果：\n\n    ![progress](https://github.com/JustZak/DilatingDotsProgressBar/raw/demo/example/src/main/assets/dotdemo.gif?raw=true)\n\n    github:https://github.com/JustZak/DilatingDotsProgressBar\n\n24. CircleMusicProgressbar\n\n    类似上面的那个音乐播放进度，这个更漂亮些吧，效果：\n\n    ![progress](https://raw.githubusercontent.com/aliab/circular-music-progressbar/master/art/splash.jpg)\n\n    github:https://github.com/aliab/circular-music-progressbar\n\n25. SpotsProgressDialog\n\n    割草机效果的progress，效果：\n\n    ![progress](https://camo.githubusercontent.com/d8108413298d70047f52cff9ac05603a5fd51988/687474703a2f2f332e62702e626c6f6773706f742e636f6d2f2d6c3155765657694d5341672f564c61355a6657346444492f41414141414141414e54632f7273576f755f71623042632f733332302f593648615453772e676966)\n\n    github:https://github.com/d-max/spots-dialog\n\n26. DashedcircularProgress\n\n    类似安全卫士里面电量进度的progress，效果：\n\n    ![progress](https://github.com/glomadrian/dashed-circular-progress/raw/master/art/sample.gif)\n\n    github:https://github.com/glomadrian/dashed-circular-progress\n\n27. ColorArcProgressBar\n\n    仪表盘效果的进度progress，效果：\n\n    ![progress](https://raw.githubusercontent.com/Shinelw/ColorArcProgressBar/master/Demo.gif)\n\n    github:https://github.com/Shinelw/ColorArcProgressBar\n\n28. MagicProgressWidget\n\n    也是简单的进度progress，效果：\n\n    ![progress](https://github.com/lingochamp/MagicProgressWidget/raw/master/art/demo.gif)\n\n    github:https://github.com/lingochamp/MagicProgressWidget\n\n29. RingProgress\n\n    类似上面提到的一个，这也是圆环形的进度progress，效果：\n\n    ![progress](https://github.com/ldoublem/RingProgress/raw/master/shot/shot3.gif)\n\n    github:https://github.com/ldoublem/RingProgress\n\n30. ElasticDownload\n\n    实现晾衣绳效果的progress，效果：\n\n    ![progress](https://raw.githubusercontent.com/Tibolte/ElasticDownload/master/success.gif)\n\n    github:https://github.com/Tibolte/ElasticDownload\n\n31. Loading\n\n    翻页效果的progress，效果：\n\n    ![progress](https://github.com/yankai-victor/Loading/raw/master/images/BookLoading.gif)\n\n    github:https://github.com/yankai-victor/Loading\n\n32. AnimatedCircleLoadingView\n\n    漂亮的粘性水滴progress，效果：\n\n    ![progress](https://github.com/jlmd/AnimatedCircleLoadingView/raw/master/art/indeterminate_ok.gif)\n\n    github:https://github.com/jlmd/AnimatedCircleLoadingView\n\n33. AVLoading\n\n    花样繁多的progress，效果：\n\n    ![progress](https://github.com/81813780/AVLoadingIndicatorView/raw/master/screenshots/avi.gif)\n\n    github:https://github.com/81813780/AVLoadingIndicatorView\n\n34. CatLoadingView\n\n    一个狗狗加载progress，作者说是猫，呵呵，效果：\n\n    ![progress](https://camo.githubusercontent.com/762015246e027b7d46df51faa51fd669e44f974b/687474703a2f2f7777342e73696e61696d672e636e2f6d773639302f61363935616364656a7731663268626d66787a6b3567323038753061326173732e676966)\n\n    github:https://github.com/Rogero0o/CatLoadingView\n\n35. WaveLoadingView\n\n    水波波浪形progress，效果：\n\n    ![progress](https://github.com/wasabeef/awesome-android-ui/blob/master/art/WaveLoadingView.jpg?raw=true)\n\n    github:https://github.com/tangqi92/WaveLoadingView\n\n36. MetaballLoading\n\n    黏性泡泡的progress，效果：\n\n    ![progress](https://github.com/dodola/MetaballLoading/raw/master/metaball.gif)\n\n    github:https://github.com/dodola/MetaballLoading\n\n37. CircularFillableLoaders\n\n    似乎有过一个类似的progress，效果：\n\n    ![progress](https://github.com/lopspower/CircularFillableLoaders/raw/master/preview/preview.gif)\n\n    github:https://github.com/lopspower/CircularFillableLoaders\n\n38. LoadingAnimation\n\n    绚丽的加载progress，效果：\n\n    ![progress](https://github.com/guohuanwen/AndroidLoadingAnimation/raw/master/screenshots/taiji1.gif)\n\n    github:https://github.com/guohuanwen/AndroidLoadingAnimation\n\n39. SpinKit\n\n    多种加载progress，效果：\n\n    ![progress](https://raw.githubusercontent.com/ybq/AndroidSpinKit/master/art/screen.gif)\n\n    github:https://github.com/ybq/Android-SpinKit\n\n40. LoadingView\n\n    另一拨loading，效果：\n\n    ![progress](https://github.com/ldoublem/LoadingView/raw/master/screen/%E6%95%88%E6%9E%9C.gif)\n\n    github:https://github.com/ldoublem/LoadingView\n\n41. ShapeLoadingView\n\n    带有阴影效果的progress，效果：\n\n    ![progress](https://camo.githubusercontent.com/575b98a56c5546043ec045d044429590e4a623fe/687474703a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f3136363836362d376434313538646532636534306139612e676966)\n\n    github:https://github.com/zzz40500/android-shapeLoadingView\n\n42. RoadRunner\n\n    可以自定义path路径的progress，效果：\n\n    ![progress](https://github.com/glomadrian/RoadRunner/raw/master/art/roadRunner.gif)\n\n    github:https://github.com/glomadrian/RoadRunner\n\n43. BezierLoadingView\n\n    贝塞尔粘性泡泡progress，效果：\n\n    ![progress](https://camo.githubusercontent.com/13cbed7a494b18b10fdd13be2c636a823e7547f5/687474703a2f2f69342e6275696d672e636f6d2f636464356134613866303233333635302e676966)\n\n    github:https://github.com/JeasonWong/BezierLoadingView\n\n44. StackLoadingView\n\n    stack风格progress，效果：\n\n    ![progress](https://raw.githubusercontent.com/jeasonwong/SlackLoadingView/master/screenshots/slack.gif)\n\n    github:https://github.com/JeasonWong/SlackLoadingView\n\n45. FAB-Loading\n\n    变脸progress，效果：\n\n    ![progress](https://raw.githubusercontent.com/smasoumi/FAB-Loading/master/images/marvel_loader.gif)\n\n    github:https://github.com/SaeedMasoumi/FAB-Loading","slug":"Android开源控件搜集--ProgressBar","published":1,"updated":"2017-03-28T09:40:26.666Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ndxcc8000a88ownc06z0r0","content":"<h1 id=\"Android开源控件搜集–ProgressBar\"><a href=\"#Android开源控件搜集–ProgressBar\" class=\"headerlink\" title=\"Android开源控件搜集–ProgressBar\"></a>Android开源控件搜集–ProgressBar</h1><p><strong>Note：</strong>本篇博客长期维护更新，欢迎各位网友共同合作，共享知识与技术。</p>\n<p>本篇博客主要搜集个人任务比较优秀的Android开源控件，大多来自github，并附上链接，自己学习之余，亦希望于大家有所帮助。</p>\n<p>Android的控件还算比较多，官方和第三方自定义优秀控件数不胜数，搜集难免不全，逐步更新丰富吧。</p>\n<h2 id=\"ProgressBar\"><a href=\"#ProgressBar\" class=\"headerlink\" title=\"ProgressBar\"></a>ProgressBar</h2><ol>\n<li><p>SmoothProgressBar</p>\n<p>炫酷的水平进度条，效果：</p>\n<p><img src=\"https://github.com/castorflex/SmoothProgressBar/raw/master/screenshots/SPB_sample.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/castorflex/SmoothProgressBar\" target=\"_blank\" rel=\"external\">https://github.com/castorflex/SmoothProgressBar</a></p>\n</li>\n<li><p>NumberProgressBar</p>\n<p>漂亮纤细的进度条，带数字，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/0c92568af7ec4e04e2e1503acdd2ca99854ab0b5/687474703a2f2f7777332e73696e61696d672e636e2f6d773639302f36313064633033346a77316566797264386e376937673230637a30326d7135662e676966\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/daimajia/NumberProgressBar\" target=\"_blank\" rel=\"external\">https://github.com/daimajia/NumberProgressBar</a></p>\n</li>\n<li><p>LoadingImage</p>\n<p>各种漂亮效果的加载动画，效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/dinuscxj/LoadingDrawable/master/Preview/ShapeChangeDrawable.gif\" alt=\"progress\"></p>\n<p><img src=\"https://raw.githubusercontent.com/dinuscxj/LoadingDrawable/master/Preview/CircleJumpDrawable.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/dinuscxj/LoadingDrawable\" target=\"_blank\" rel=\"external\">https://github.com/dinuscxj/LoadingDrawable</a></p>\n</li>\n<li><p>ProgressWheel</p>\n<p>一个wheel形的进度条，效果：</p>\n<p><img src=\"https://github.com/Todd-Davies/ProgressWheel/raw/master/sample_image.png\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/Todd-Davies/ProgressWheel\" target=\"_blank\" rel=\"external\">https://github.com/Todd-Davies/ProgressWheel</a></p>\n</li>\n<li><p>CircleProgress</p>\n<p>几种不同的环形进度，效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/lzyzsd/CircleProgress/master/demos/circle_progress.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/lzyzsd/CircleProgress\" target=\"_blank\" rel=\"external\">https://github.com/lzyzsd/CircleProgress</a></p>\n</li>\n<li><p>materialish-progress</p>\n<p>一个可以在android2.3上实现material效果的progress，效果：</p>\n<p><img src=\"https://github.com/pnikosis/materialish-progress/raw/master/spinningwheel.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/pnikosis/materialish-progress\" target=\"_blank\" rel=\"external\">https://github.com/pnikosis/materialish-progress</a></p>\n</li>\n<li><p>AndroidFillableLoaders</p>\n<p>炫酷图像的加载progress，效果：</p>\n<p><img src=\"https://github.com/JorgeCastilloPrz/AndroidFillableLoaders/raw/master/art/demoWaves.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/JorgeCastilloPrz/AndroidFillableLoaders\" target=\"_blank\" rel=\"external\">https://github.com/JorgeCastilloPrz/AndroidFillableLoaders</a></p>\n</li>\n<li><p>RoundCornerProgressBar</p>\n<p>带有圆角和图标的进度条，效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/akexorcist/Android-RoundCornerProgressBar/master/image/screenshot_01.png\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/akexorcist/Android-RoundCornerProgressBar\" target=\"_blank\" rel=\"external\">https://github.com/akexorcist/Android-RoundCornerProgressBar</a></p>\n</li>\n<li><p>GoogleProgressBar</p>\n<p>Google应用的进度条,效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/jpardogo/GoogleProgressBar/dev/art/GoogleDices.gif\" alt=\"progress\"></p>\n<p><img src=\"https://raw.githubusercontent.com/jpardogo/GoogleProgressBar/master/art/GoogleProgressBar.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/jpardogo/GoogleProgressBar\" target=\"_blank\" rel=\"external\">https://github.com/jpardogo/GoogleProgressBar</a></p>\n</li>\n<li><p>MaterialProgressBar</p>\n<p>实现material design风格的progress，效果：</p>\n<p><img src=\"https://github.com/DreaminginCodeZH/MaterialProgressBar/raw/master/screenshot/android_4_4_4.png\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/DreaminginCodeZH/MaterialProgressBar\" target=\"_blank\" rel=\"external\">https://github.com/DreaminginCodeZH/MaterialProgressBar</a></p>\n</li>\n<li><p>WaveView</p>\n<p>水波波浪效果的progress，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/60722e9d4f2d2daa78a8650cb27a32adea82bdd4/68747470733a2f2f7261772e6769746875622e636f6d2f6a6f686e3939302f57617665566965772f6d61737465722f73637265656e73686f7425323661706b2f73637265656e73686f742e676966\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/john990/WaveView\" target=\"_blank\" rel=\"external\">https://github.com/john990/WaveView</a></p>\n</li>\n<li><p>MaterialLoadingProgressBar</p>\n<p>一个比较时代感的Material progress，效果：</p>\n<p><img src=\"https://github.com/lsjwzh/MaterialLoadingProgressBar/raw/master/screen.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/lsjwzh/MaterialLoadingProgressBar\" target=\"_blank\" rel=\"external\">https://github.com/lsjwzh/MaterialLoadingProgressBar</a></p>\n</li>\n<li><p>MusicPlayerView</p>\n<p>一个用于音乐播放进度的progress，效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/iammert/MusicPlayerView/master/art/art2.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/iammert/MusicPlayerView\" target=\"_blank\" rel=\"external\">https://github.com/iammert/MusicPlayerView</a></p>\n</li>\n<li><p>SquareProgressBar</p>\n<p>一个方形的进度progress，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/3ddc0a0d9ed3c39f806f1459d49e46e87be81e29/68747470733a2f2f6d61766868772d626e313330362e66696c65732e316472762e636f6d2f793270386e736e3035354b30583172663935725743634375686f6b583451453542313953506f686c74513735386174513948635632694b334b5f773830325765673668794d70624c507770574745476f62385f7a5f62725651536e4c572d50664e43773274554e6132672d5930786b344279344c6a4a316e564f7445394a7a6a5737535f6251716c4833796668657a793847646a744d4b717a6e5832486a74463834363163456536394b532d6f512f636f7665725f6769746875622e706e67\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/mrwonderman/android-square-progressbar\" target=\"_blank\" rel=\"external\">https://github.com/mrwonderman/android-square-progressbar</a></p>\n</li>\n<li><p>Download Progress</p>\n<p>下载显示进度progress，效果：</p>\n<p><img src=\"https://github.com/panwrona/DownloadProgressBar/raw/master/success.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/panwrona/DownloadProgressBar\" target=\"_blank\" rel=\"external\">https://github.com/panwrona/DownloadProgressBar</a></p>\n</li>\n<li><p>HoloCircularProgressBar</p>\n<p>Holo风格的进度progress，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/1df9a18184ed40918d7135d5db345fe1070137a7/68747470733a2f2f7261772e6769746875622e636f6d2f7061737373792f616e64726f69642d486f6c6f43697263756c617250726f67726573734261722f6d61737465722f7261772f73637265656e73686f74312e706e67\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/passsy/android-HoloCircularProgressBar\" target=\"_blank\" rel=\"external\">https://github.com/passsy/android-HoloCircularProgressBar</a></p>\n</li>\n<li><p>ArcProgressStackView</p>\n<p>多层圆环进度progress，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/611d22202564ed670837756695c1d712f23c26ce/68747470733a2f2f64726976652e676f6f676c652e636f6d2f75633f6578706f72743d646f776e6c6f61642669643d304278504f5f55655337775363546a6c564e6b6c6855485a69625645\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/DevLight-Mobile-Agency/ArcProgressStackView\" target=\"_blank\" rel=\"external\">https://github.com/DevLight-Mobile-Agency/ArcProgressStackView</a></p>\n</li>\n<li><p>LoadingBalls</p>\n<p>类似android 5.1的开机加载进度，效果：</p>\n<p><img src=\"https://github.com/glomadrian/loading-balls/raw/master/art/1.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/glomadrian/loading-balls\" target=\"_blank\" rel=\"external\">https://github.com/glomadrian/loading-balls</a></p>\n</li>\n<li><p>FABProgressCircle</p>\n<p>一个fab按钮进度progress，效果：</p>\n<p><img src=\"https://github.com/JorgeCastilloPrz/FABProgressCircle/raw/master/art/fabprogresscircle.gif\" alt=\"progress\"></p>\n</li>\n<li><p>CircularProgressDrawable</p>\n<p>环形的进度图画，效果：</p>\n<p><img src=\"https://github.com/Sefford/CircularProgressDrawable/raw/master/overshoot.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/Sefford/CircularProgressDrawable\" target=\"_blank\" rel=\"external\">https://github.com/Sefford/CircularProgressDrawable</a></p>\n</li>\n<li><p>CircleProgress</p>\n<p>折叠滚动的圆形进度，效果：</p>\n<p><img src=\"https://github.com/Fichardu/CircleProgress/raw/master/art/progress.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/Fichardu/CircleProgress\" target=\"_blank\" rel=\"external\">https://github.com/Fichardu/CircleProgress</a></p>\n</li>\n<li><p>CircleProgressView</p>\n<p>圆环形的进度条，效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/jakob-grabner/Circle-Progress-View/master/media/demo.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/jakob-grabner/Circle-Progress-View\" target=\"_blank\" rel=\"external\">https://github.com/jakob-grabner/Circle-Progress-View</a></p>\n</li>\n<li><p>DilatingDotsProgressBar</p>\n<p>跑马的个式的进度progress，效果：</p>\n<p><img src=\"https://github.com/JustZak/DilatingDotsProgressBar/raw/demo/example/src/main/assets/dotdemo.gif?raw=true\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/JustZak/DilatingDotsProgressBar\" target=\"_blank\" rel=\"external\">https://github.com/JustZak/DilatingDotsProgressBar</a></p>\n</li>\n<li><p>CircleMusicProgressbar</p>\n<p>类似上面的那个音乐播放进度，这个更漂亮些吧，效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/aliab/circular-music-progressbar/master/art/splash.jpg\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/aliab/circular-music-progressbar\" target=\"_blank\" rel=\"external\">https://github.com/aliab/circular-music-progressbar</a></p>\n</li>\n<li><p>SpotsProgressDialog</p>\n<p>割草机效果的progress，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/d8108413298d70047f52cff9ac05603a5fd51988/687474703a2f2f332e62702e626c6f6773706f742e636f6d2f2d6c3155765657694d5341672f564c61355a6657346444492f41414141414141414e54632f7273576f755f71623042632f733332302f593648615453772e676966\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/d-max/spots-dialog\" target=\"_blank\" rel=\"external\">https://github.com/d-max/spots-dialog</a></p>\n</li>\n<li><p>DashedcircularProgress</p>\n<p>类似安全卫士里面电量进度的progress，效果：</p>\n<p><img src=\"https://github.com/glomadrian/dashed-circular-progress/raw/master/art/sample.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/glomadrian/dashed-circular-progress\" target=\"_blank\" rel=\"external\">https://github.com/glomadrian/dashed-circular-progress</a></p>\n</li>\n<li><p>ColorArcProgressBar</p>\n<p>仪表盘效果的进度progress，效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/Shinelw/ColorArcProgressBar/master/Demo.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/Shinelw/ColorArcProgressBar\" target=\"_blank\" rel=\"external\">https://github.com/Shinelw/ColorArcProgressBar</a></p>\n</li>\n<li><p>MagicProgressWidget</p>\n<p>也是简单的进度progress，效果：</p>\n<p><img src=\"https://github.com/lingochamp/MagicProgressWidget/raw/master/art/demo.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/lingochamp/MagicProgressWidget\" target=\"_blank\" rel=\"external\">https://github.com/lingochamp/MagicProgressWidget</a></p>\n</li>\n<li><p>RingProgress</p>\n<p>类似上面提到的一个，这也是圆环形的进度progress，效果：</p>\n<p><img src=\"https://github.com/ldoublem/RingProgress/raw/master/shot/shot3.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/ldoublem/RingProgress\" target=\"_blank\" rel=\"external\">https://github.com/ldoublem/RingProgress</a></p>\n</li>\n<li><p>ElasticDownload</p>\n<p>实现晾衣绳效果的progress，效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/Tibolte/ElasticDownload/master/success.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/Tibolte/ElasticDownload\" target=\"_blank\" rel=\"external\">https://github.com/Tibolte/ElasticDownload</a></p>\n</li>\n<li><p>Loading</p>\n<p>翻页效果的progress，效果：</p>\n<p><img src=\"https://github.com/yankai-victor/Loading/raw/master/images/BookLoading.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/yankai-victor/Loading\" target=\"_blank\" rel=\"external\">https://github.com/yankai-victor/Loading</a></p>\n</li>\n<li><p>AnimatedCircleLoadingView</p>\n<p>漂亮的粘性水滴progress，效果：</p>\n<p><img src=\"https://github.com/jlmd/AnimatedCircleLoadingView/raw/master/art/indeterminate_ok.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/jlmd/AnimatedCircleLoadingView\" target=\"_blank\" rel=\"external\">https://github.com/jlmd/AnimatedCircleLoadingView</a></p>\n</li>\n<li><p>AVLoading</p>\n<p>花样繁多的progress，效果：</p>\n<p><img src=\"https://github.com/81813780/AVLoadingIndicatorView/raw/master/screenshots/avi.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/81813780/AVLoadingIndicatorView\" target=\"_blank\" rel=\"external\">https://github.com/81813780/AVLoadingIndicatorView</a></p>\n</li>\n<li><p>CatLoadingView</p>\n<p>一个狗狗加载progress，作者说是猫，呵呵，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/762015246e027b7d46df51faa51fd669e44f974b/687474703a2f2f7777342e73696e61696d672e636e2f6d773639302f61363935616364656a7731663268626d66787a6b3567323038753061326173732e676966\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/Rogero0o/CatLoadingView\" target=\"_blank\" rel=\"external\">https://github.com/Rogero0o/CatLoadingView</a></p>\n</li>\n<li><p>WaveLoadingView</p>\n<p>水波波浪形progress，效果：</p>\n<p><img src=\"https://github.com/wasabeef/awesome-android-ui/blob/master/art/WaveLoadingView.jpg?raw=true\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/tangqi92/WaveLoadingView\" target=\"_blank\" rel=\"external\">https://github.com/tangqi92/WaveLoadingView</a></p>\n</li>\n<li><p>MetaballLoading</p>\n<p>黏性泡泡的progress，效果：</p>\n<p><img src=\"https://github.com/dodola/MetaballLoading/raw/master/metaball.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/dodola/MetaballLoading\" target=\"_blank\" rel=\"external\">https://github.com/dodola/MetaballLoading</a></p>\n</li>\n<li><p>CircularFillableLoaders</p>\n<p>似乎有过一个类似的progress，效果：</p>\n<p><img src=\"https://github.com/lopspower/CircularFillableLoaders/raw/master/preview/preview.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/lopspower/CircularFillableLoaders\" target=\"_blank\" rel=\"external\">https://github.com/lopspower/CircularFillableLoaders</a></p>\n</li>\n<li><p>LoadingAnimation</p>\n<p>绚丽的加载progress，效果：</p>\n<p><img src=\"https://github.com/guohuanwen/AndroidLoadingAnimation/raw/master/screenshots/taiji1.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/guohuanwen/AndroidLoadingAnimation\" target=\"_blank\" rel=\"external\">https://github.com/guohuanwen/AndroidLoadingAnimation</a></p>\n</li>\n<li><p>SpinKit</p>\n<p>多种加载progress，效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/ybq/AndroidSpinKit/master/art/screen.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/ybq/Android-SpinKit\" target=\"_blank\" rel=\"external\">https://github.com/ybq/Android-SpinKit</a></p>\n</li>\n<li><p>LoadingView</p>\n<p>另一拨loading，效果：</p>\n<p><img src=\"https://github.com/ldoublem/LoadingView/raw/master/screen/%E6%95%88%E6%9E%9C.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/ldoublem/LoadingView\" target=\"_blank\" rel=\"external\">https://github.com/ldoublem/LoadingView</a></p>\n</li>\n<li><p>ShapeLoadingView</p>\n<p>带有阴影效果的progress，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/575b98a56c5546043ec045d044429590e4a623fe/687474703a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f3136363836362d376434313538646532636534306139612e676966\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/zzz40500/android-shapeLoadingView\" target=\"_blank\" rel=\"external\">https://github.com/zzz40500/android-shapeLoadingView</a></p>\n</li>\n<li><p>RoadRunner</p>\n<p>可以自定义path路径的progress，效果：</p>\n<p><img src=\"https://github.com/glomadrian/RoadRunner/raw/master/art/roadRunner.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/glomadrian/RoadRunner\" target=\"_blank\" rel=\"external\">https://github.com/glomadrian/RoadRunner</a></p>\n</li>\n<li><p>BezierLoadingView</p>\n<p>贝塞尔粘性泡泡progress，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/13cbed7a494b18b10fdd13be2c636a823e7547f5/687474703a2f2f69342e6275696d672e636f6d2f636464356134613866303233333635302e676966\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/JeasonWong/BezierLoadingView\" target=\"_blank\" rel=\"external\">https://github.com/JeasonWong/BezierLoadingView</a></p>\n</li>\n<li><p>StackLoadingView</p>\n<p>stack风格progress，效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/jeasonwong/SlackLoadingView/master/screenshots/slack.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/JeasonWong/SlackLoadingView\" target=\"_blank\" rel=\"external\">https://github.com/JeasonWong/SlackLoadingView</a></p>\n</li>\n<li><p>FAB-Loading</p>\n<p>变脸progress，效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/smasoumi/FAB-Loading/master/images/marvel_loader.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/SaeedMasoumi/FAB-Loading\" target=\"_blank\" rel=\"external\">https://github.com/SaeedMasoumi/FAB-Loading</a></p>\n</li>\n</ol>\n","excerpt":"","more":"<h1 id=\"Android开源控件搜集–ProgressBar\"><a href=\"#Android开源控件搜集–ProgressBar\" class=\"headerlink\" title=\"Android开源控件搜集–ProgressBar\"></a>Android开源控件搜集–ProgressBar</h1><p><strong>Note：</strong>本篇博客长期维护更新，欢迎各位网友共同合作，共享知识与技术。</p>\n<p>本篇博客主要搜集个人任务比较优秀的Android开源控件，大多来自github，并附上链接，自己学习之余，亦希望于大家有所帮助。</p>\n<p>Android的控件还算比较多，官方和第三方自定义优秀控件数不胜数，搜集难免不全，逐步更新丰富吧。</p>\n<h2 id=\"ProgressBar\"><a href=\"#ProgressBar\" class=\"headerlink\" title=\"ProgressBar\"></a>ProgressBar</h2><ol>\n<li><p>SmoothProgressBar</p>\n<p>炫酷的水平进度条，效果：</p>\n<p><img src=\"https://github.com/castorflex/SmoothProgressBar/raw/master/screenshots/SPB_sample.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/castorflex/SmoothProgressBar\">https://github.com/castorflex/SmoothProgressBar</a></p>\n</li>\n<li><p>NumberProgressBar</p>\n<p>漂亮纤细的进度条，带数字，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/0c92568af7ec4e04e2e1503acdd2ca99854ab0b5/687474703a2f2f7777332e73696e61696d672e636e2f6d773639302f36313064633033346a77316566797264386e376937673230637a30326d7135662e676966\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/daimajia/NumberProgressBar\">https://github.com/daimajia/NumberProgressBar</a></p>\n</li>\n<li><p>LoadingImage</p>\n<p>各种漂亮效果的加载动画，效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/dinuscxj/LoadingDrawable/master/Preview/ShapeChangeDrawable.gif\" alt=\"progress\"></p>\n<p><img src=\"https://raw.githubusercontent.com/dinuscxj/LoadingDrawable/master/Preview/CircleJumpDrawable.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/dinuscxj/LoadingDrawable\">https://github.com/dinuscxj/LoadingDrawable</a></p>\n</li>\n<li><p>ProgressWheel</p>\n<p>一个wheel形的进度条，效果：</p>\n<p><img src=\"https://github.com/Todd-Davies/ProgressWheel/raw/master/sample_image.png\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/Todd-Davies/ProgressWheel\">https://github.com/Todd-Davies/ProgressWheel</a></p>\n</li>\n<li><p>CircleProgress</p>\n<p>几种不同的环形进度，效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/lzyzsd/CircleProgress/master/demos/circle_progress.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/lzyzsd/CircleProgress\">https://github.com/lzyzsd/CircleProgress</a></p>\n</li>\n<li><p>materialish-progress</p>\n<p>一个可以在android2.3上实现material效果的progress，效果：</p>\n<p><img src=\"https://github.com/pnikosis/materialish-progress/raw/master/spinningwheel.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/pnikosis/materialish-progress\">https://github.com/pnikosis/materialish-progress</a></p>\n</li>\n<li><p>AndroidFillableLoaders</p>\n<p>炫酷图像的加载progress，效果：</p>\n<p><img src=\"https://github.com/JorgeCastilloPrz/AndroidFillableLoaders/raw/master/art/demoWaves.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/JorgeCastilloPrz/AndroidFillableLoaders\">https://github.com/JorgeCastilloPrz/AndroidFillableLoaders</a></p>\n</li>\n<li><p>RoundCornerProgressBar</p>\n<p>带有圆角和图标的进度条，效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/akexorcist/Android-RoundCornerProgressBar/master/image/screenshot_01.png\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/akexorcist/Android-RoundCornerProgressBar\">https://github.com/akexorcist/Android-RoundCornerProgressBar</a></p>\n</li>\n<li><p>GoogleProgressBar</p>\n<p>Google应用的进度条,效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/jpardogo/GoogleProgressBar/dev/art/GoogleDices.gif\" alt=\"progress\"></p>\n<p><img src=\"https://raw.githubusercontent.com/jpardogo/GoogleProgressBar/master/art/GoogleProgressBar.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/jpardogo/GoogleProgressBar\">https://github.com/jpardogo/GoogleProgressBar</a></p>\n</li>\n<li><p>MaterialProgressBar</p>\n<p>实现material design风格的progress，效果：</p>\n<p><img src=\"https://github.com/DreaminginCodeZH/MaterialProgressBar/raw/master/screenshot/android_4_4_4.png\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/DreaminginCodeZH/MaterialProgressBar\">https://github.com/DreaminginCodeZH/MaterialProgressBar</a></p>\n</li>\n<li><p>WaveView</p>\n<p>水波波浪效果的progress，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/60722e9d4f2d2daa78a8650cb27a32adea82bdd4/68747470733a2f2f7261772e6769746875622e636f6d2f6a6f686e3939302f57617665566965772f6d61737465722f73637265656e73686f7425323661706b2f73637265656e73686f742e676966\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/john990/WaveView\">https://github.com/john990/WaveView</a></p>\n</li>\n<li><p>MaterialLoadingProgressBar</p>\n<p>一个比较时代感的Material progress，效果：</p>\n<p><img src=\"https://github.com/lsjwzh/MaterialLoadingProgressBar/raw/master/screen.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/lsjwzh/MaterialLoadingProgressBar\">https://github.com/lsjwzh/MaterialLoadingProgressBar</a></p>\n</li>\n<li><p>MusicPlayerView</p>\n<p>一个用于音乐播放进度的progress，效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/iammert/MusicPlayerView/master/art/art2.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/iammert/MusicPlayerView\">https://github.com/iammert/MusicPlayerView</a></p>\n</li>\n<li><p>SquareProgressBar</p>\n<p>一个方形的进度progress，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/3ddc0a0d9ed3c39f806f1459d49e46e87be81e29/68747470733a2f2f6d61766868772d626e313330362e66696c65732e316472762e636f6d2f793270386e736e3035354b30583172663935725743634375686f6b583451453542313953506f686c74513735386174513948635632694b334b5f773830325765673668794d70624c507770574745476f62385f7a5f62725651536e4c572d50664e43773274554e6132672d5930786b344279344c6a4a316e564f7445394a7a6a5737535f6251716c4833796668657a793847646a744d4b717a6e5832486a74463834363163456536394b532d6f512f636f7665725f6769746875622e706e67\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/mrwonderman/android-square-progressbar\">https://github.com/mrwonderman/android-square-progressbar</a></p>\n</li>\n<li><p>Download Progress</p>\n<p>下载显示进度progress，效果：</p>\n<p><img src=\"https://github.com/panwrona/DownloadProgressBar/raw/master/success.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/panwrona/DownloadProgressBar\">https://github.com/panwrona/DownloadProgressBar</a></p>\n</li>\n<li><p>HoloCircularProgressBar</p>\n<p>Holo风格的进度progress，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/1df9a18184ed40918d7135d5db345fe1070137a7/68747470733a2f2f7261772e6769746875622e636f6d2f7061737373792f616e64726f69642d486f6c6f43697263756c617250726f67726573734261722f6d61737465722f7261772f73637265656e73686f74312e706e67\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/passsy/android-HoloCircularProgressBar\">https://github.com/passsy/android-HoloCircularProgressBar</a></p>\n</li>\n<li><p>ArcProgressStackView</p>\n<p>多层圆环进度progress，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/611d22202564ed670837756695c1d712f23c26ce/68747470733a2f2f64726976652e676f6f676c652e636f6d2f75633f6578706f72743d646f776e6c6f61642669643d304278504f5f55655337775363546a6c564e6b6c6855485a69625645\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/DevLight-Mobile-Agency/ArcProgressStackView\">https://github.com/DevLight-Mobile-Agency/ArcProgressStackView</a></p>\n</li>\n<li><p>LoadingBalls</p>\n<p>类似android 5.1的开机加载进度，效果：</p>\n<p><img src=\"https://github.com/glomadrian/loading-balls/raw/master/art/1.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/glomadrian/loading-balls\">https://github.com/glomadrian/loading-balls</a></p>\n</li>\n<li><p>FABProgressCircle</p>\n<p>一个fab按钮进度progress，效果：</p>\n<p><img src=\"https://github.com/JorgeCastilloPrz/FABProgressCircle/raw/master/art/fabprogresscircle.gif\" alt=\"progress\"></p>\n</li>\n<li><p>CircularProgressDrawable</p>\n<p>环形的进度图画，效果：</p>\n<p><img src=\"https://github.com/Sefford/CircularProgressDrawable/raw/master/overshoot.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/Sefford/CircularProgressDrawable\">https://github.com/Sefford/CircularProgressDrawable</a></p>\n</li>\n<li><p>CircleProgress</p>\n<p>折叠滚动的圆形进度，效果：</p>\n<p><img src=\"https://github.com/Fichardu/CircleProgress/raw/master/art/progress.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/Fichardu/CircleProgress\">https://github.com/Fichardu/CircleProgress</a></p>\n</li>\n<li><p>CircleProgressView</p>\n<p>圆环形的进度条，效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/jakob-grabner/Circle-Progress-View/master/media/demo.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/jakob-grabner/Circle-Progress-View\">https://github.com/jakob-grabner/Circle-Progress-View</a></p>\n</li>\n<li><p>DilatingDotsProgressBar</p>\n<p>跑马的个式的进度progress，效果：</p>\n<p><img src=\"https://github.com/JustZak/DilatingDotsProgressBar/raw/demo/example/src/main/assets/dotdemo.gif?raw=true\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/JustZak/DilatingDotsProgressBar\">https://github.com/JustZak/DilatingDotsProgressBar</a></p>\n</li>\n<li><p>CircleMusicProgressbar</p>\n<p>类似上面的那个音乐播放进度，这个更漂亮些吧，效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/aliab/circular-music-progressbar/master/art/splash.jpg\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/aliab/circular-music-progressbar\">https://github.com/aliab/circular-music-progressbar</a></p>\n</li>\n<li><p>SpotsProgressDialog</p>\n<p>割草机效果的progress，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/d8108413298d70047f52cff9ac05603a5fd51988/687474703a2f2f332e62702e626c6f6773706f742e636f6d2f2d6c3155765657694d5341672f564c61355a6657346444492f41414141414141414e54632f7273576f755f71623042632f733332302f593648615453772e676966\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/d-max/spots-dialog\">https://github.com/d-max/spots-dialog</a></p>\n</li>\n<li><p>DashedcircularProgress</p>\n<p>类似安全卫士里面电量进度的progress，效果：</p>\n<p><img src=\"https://github.com/glomadrian/dashed-circular-progress/raw/master/art/sample.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/glomadrian/dashed-circular-progress\">https://github.com/glomadrian/dashed-circular-progress</a></p>\n</li>\n<li><p>ColorArcProgressBar</p>\n<p>仪表盘效果的进度progress，效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/Shinelw/ColorArcProgressBar/master/Demo.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/Shinelw/ColorArcProgressBar\">https://github.com/Shinelw/ColorArcProgressBar</a></p>\n</li>\n<li><p>MagicProgressWidget</p>\n<p>也是简单的进度progress，效果：</p>\n<p><img src=\"https://github.com/lingochamp/MagicProgressWidget/raw/master/art/demo.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/lingochamp/MagicProgressWidget\">https://github.com/lingochamp/MagicProgressWidget</a></p>\n</li>\n<li><p>RingProgress</p>\n<p>类似上面提到的一个，这也是圆环形的进度progress，效果：</p>\n<p><img src=\"https://github.com/ldoublem/RingProgress/raw/master/shot/shot3.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/ldoublem/RingProgress\">https://github.com/ldoublem/RingProgress</a></p>\n</li>\n<li><p>ElasticDownload</p>\n<p>实现晾衣绳效果的progress，效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/Tibolte/ElasticDownload/master/success.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/Tibolte/ElasticDownload\">https://github.com/Tibolte/ElasticDownload</a></p>\n</li>\n<li><p>Loading</p>\n<p>翻页效果的progress，效果：</p>\n<p><img src=\"https://github.com/yankai-victor/Loading/raw/master/images/BookLoading.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/yankai-victor/Loading\">https://github.com/yankai-victor/Loading</a></p>\n</li>\n<li><p>AnimatedCircleLoadingView</p>\n<p>漂亮的粘性水滴progress，效果：</p>\n<p><img src=\"https://github.com/jlmd/AnimatedCircleLoadingView/raw/master/art/indeterminate_ok.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/jlmd/AnimatedCircleLoadingView\">https://github.com/jlmd/AnimatedCircleLoadingView</a></p>\n</li>\n<li><p>AVLoading</p>\n<p>花样繁多的progress，效果：</p>\n<p><img src=\"https://github.com/81813780/AVLoadingIndicatorView/raw/master/screenshots/avi.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/81813780/AVLoadingIndicatorView\">https://github.com/81813780/AVLoadingIndicatorView</a></p>\n</li>\n<li><p>CatLoadingView</p>\n<p>一个狗狗加载progress，作者说是猫，呵呵，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/762015246e027b7d46df51faa51fd669e44f974b/687474703a2f2f7777342e73696e61696d672e636e2f6d773639302f61363935616364656a7731663268626d66787a6b3567323038753061326173732e676966\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/Rogero0o/CatLoadingView\">https://github.com/Rogero0o/CatLoadingView</a></p>\n</li>\n<li><p>WaveLoadingView</p>\n<p>水波波浪形progress，效果：</p>\n<p><img src=\"https://github.com/wasabeef/awesome-android-ui/blob/master/art/WaveLoadingView.jpg?raw=true\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/tangqi92/WaveLoadingView\">https://github.com/tangqi92/WaveLoadingView</a></p>\n</li>\n<li><p>MetaballLoading</p>\n<p>黏性泡泡的progress，效果：</p>\n<p><img src=\"https://github.com/dodola/MetaballLoading/raw/master/metaball.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/dodola/MetaballLoading\">https://github.com/dodola/MetaballLoading</a></p>\n</li>\n<li><p>CircularFillableLoaders</p>\n<p>似乎有过一个类似的progress，效果：</p>\n<p><img src=\"https://github.com/lopspower/CircularFillableLoaders/raw/master/preview/preview.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/lopspower/CircularFillableLoaders\">https://github.com/lopspower/CircularFillableLoaders</a></p>\n</li>\n<li><p>LoadingAnimation</p>\n<p>绚丽的加载progress，效果：</p>\n<p><img src=\"https://github.com/guohuanwen/AndroidLoadingAnimation/raw/master/screenshots/taiji1.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/guohuanwen/AndroidLoadingAnimation\">https://github.com/guohuanwen/AndroidLoadingAnimation</a></p>\n</li>\n<li><p>SpinKit</p>\n<p>多种加载progress，效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/ybq/AndroidSpinKit/master/art/screen.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/ybq/Android-SpinKit\">https://github.com/ybq/Android-SpinKit</a></p>\n</li>\n<li><p>LoadingView</p>\n<p>另一拨loading，效果：</p>\n<p><img src=\"https://github.com/ldoublem/LoadingView/raw/master/screen/%E6%95%88%E6%9E%9C.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/ldoublem/LoadingView\">https://github.com/ldoublem/LoadingView</a></p>\n</li>\n<li><p>ShapeLoadingView</p>\n<p>带有阴影效果的progress，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/575b98a56c5546043ec045d044429590e4a623fe/687474703a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f3136363836362d376434313538646532636534306139612e676966\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/zzz40500/android-shapeLoadingView\">https://github.com/zzz40500/android-shapeLoadingView</a></p>\n</li>\n<li><p>RoadRunner</p>\n<p>可以自定义path路径的progress，效果：</p>\n<p><img src=\"https://github.com/glomadrian/RoadRunner/raw/master/art/roadRunner.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/glomadrian/RoadRunner\">https://github.com/glomadrian/RoadRunner</a></p>\n</li>\n<li><p>BezierLoadingView</p>\n<p>贝塞尔粘性泡泡progress，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/13cbed7a494b18b10fdd13be2c636a823e7547f5/687474703a2f2f69342e6275696d672e636f6d2f636464356134613866303233333635302e676966\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/JeasonWong/BezierLoadingView\">https://github.com/JeasonWong/BezierLoadingView</a></p>\n</li>\n<li><p>StackLoadingView</p>\n<p>stack风格progress，效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/jeasonwong/SlackLoadingView/master/screenshots/slack.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/JeasonWong/SlackLoadingView\">https://github.com/JeasonWong/SlackLoadingView</a></p>\n</li>\n<li><p>FAB-Loading</p>\n<p>变脸progress，效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/smasoumi/FAB-Loading/master/images/marvel_loader.gif\" alt=\"progress\"></p>\n<p>github:<a href=\"https://github.com/SaeedMasoumi/FAB-Loading\">https://github.com/SaeedMasoumi/FAB-Loading</a></p>\n</li>\n</ol>\n"},{"title":"Android系统源码编译 unsupported reloc 43 和 make update-api问题","date":"2017-04-10T08:08:00.000Z","_content":"## Android系统源码编译 unsupported reloc 43 和 make update-api\n\n最近初次接触到Android系统源码的编译工作，公司内使用的开发板是RK3288平台的。众所周知，Android是一个开源、开放的系统平台，国内的众多所谓的智能系统好多都是基于Android平台裁剪定制而来的。\n\n无可厚非，Android的开放性却也带来的一些副作用，各类修改版的Android系统在使用和开发过程中，就会出现各种不同的适配问题，最让开发者头疼。\n\n#### 1、Android源码编译环境\n\n根据google官方的要求，推荐使用ubuntu系统平台、openJDK作为java环境，然后添加相关依赖，基本上都可以配置成功。此处提供两个参考文章:\n\n- [Android 系统源码编译环境配置](http://blog.csdn.net/binglumeng/article/details/54342462)\n- [Google 官方文档](https://source.android.com/source/requirements)\n\n#### 2、unsupported reloc 43\n\n在编译RK3288系统源码时候，使用`sudo ./mk.sh -s`不久，便会出现`failed`提示编译失败；分析问题需要注意的事项：\n\n- 要使用对应与Android平台的相应openjdk，比如4.4的要使用openjdk6，而5.1的就需要openjdk7.\n\n- 再看一下当前使用的jdk是否是需要的版本，也许安装了多个版本的jdk\n\n  ```sh\n  sudo update-alternatives --config java  //选择序号回车即可  \n  sudo update-alternatives --config javac  //选择序号回车即可  \n  sudo update-alternatives --config javap  //选择序号回车即可  \n  ```\n\n- 修改HOST_x86_common.mk\n\n  ```sh\n  cd SourcePath/build/core/clang/\n  sudo vim ./HOST_x86_common.mk\n  # 在如下文档中添加 -B$($(clang_2nd_arch_prefix)HOST_TOOLCHAIN_FOR_CLANG)/x86_64-linux/bin \\\n\n  ifeq ($(HOST_OS),darwin)\n  # nothing required here yet\n  endif\n\n  ifeq ($(HOST_OS),linux)\n  CLANG_CONFIG_x86_LINUX_HOST_EXTRA_ASFLAGS := \\\n    --gcc-toolchain=$($(clang_2nd_arch_prefix)HOST_TOOLCHAIN_FOR_CLANG) \\\n    --sysroot=$($(clang_2nd_arch_prefix)HOST_TOOLCHAIN_FOR_CLANG)/sysroot \\\n    -B$($(clang_2nd_arch_prefix)HOST_TOOLCHAIN_FOR_CLANG)/x86_64-linux/bin \\\n    -no-integrated-as\n\n  CLANG_CONFIG_x86_LINUX_HOST_EXTRA_CFLAGS := \\\n    --gcc-toolchain=$($(clang_2nd_arch_prefix)HOST_TOOLCHAIN_FOR_CLANG) \\\n    -no-integrated-as\n  ```\n\n  对于Android7.0以下的，需要保留`-no-integrated-as`这句指令。\n\n**注：**一般情况修改如上`HOST_x86_common.mk`文件即可解决此问题，有时候又不行，那么可以在修改以下两个文件：\n\n- Android.common_build.mk\n\n  ```sh\n  # 找到Android.common_build.mk文件，搜索到 ifneq ($(WITHOUT_HOST_CLANG,true))这句话\n  cd SourcePath/art/build/\n  sudo vim Android.common_build.mk\n  ## 修改 ifneq ($(WITHOUT_HOST_CLANG,true))中的true 为false\n  # Host.\n  ART_HOST_CLANG := false\n  ifneq ($(WITHOUT_HOST_CLANG),false)\n    # By default, host builds use clang for better warnings.\n    ART_HOST_CLANG := true\n  endif\n  ```\n\n- 替换`ld`文件\n\n  ```sh\n  # 替换源码中的ld文件为Ubuntu系统本身的ld.gold\n  sudo cp usr/bin/ld.gold SourcePath/prebuilts/gcc/linux-x86/host/x86-linux-glibc2.11-4.6/x86_64-linux/bin/ld\n  ```\n\n  **注意：以上用`SourcePath`代之你的源码所在的根目录**\n\n如此在编译时候，又会报出`failed,javadoc @hide`之类的错误，提示要么`@hide`添加好多注解，要么就`make update-api`，若是提示`javadoc`文件比较少的话，可以逐一添加`@hide`注解，但是太多的话，我选择了`make update-api`命令。\n\n若是不先处理掉`unsupported reloc 43`这个错误，那么`javadoc`这个错误，怎么也处理不好，至少我遇到的情况是这样的。\n\n希望这点小小笔记，记录个人编译过程踩过的坑的同时，能够帮助其他朋友免去这个坑的困扰。","source":"_posts/Android系统源码编译-unsupported-reloc-43-和-make-update-api问题.md","raw":"---\ntitle: Android系统源码编译 unsupported reloc 43 和 make update-api问题\ndate: 2017-04-10 16:08\ntags:\n    - Linux\n    - Android\n    - make\ncategories:\n    - Android\n---\n## Android系统源码编译 unsupported reloc 43 和 make update-api\n\n最近初次接触到Android系统源码的编译工作，公司内使用的开发板是RK3288平台的。众所周知，Android是一个开源、开放的系统平台，国内的众多所谓的智能系统好多都是基于Android平台裁剪定制而来的。\n\n无可厚非，Android的开放性却也带来的一些副作用，各类修改版的Android系统在使用和开发过程中，就会出现各种不同的适配问题，最让开发者头疼。\n\n#### 1、Android源码编译环境\n\n根据google官方的要求，推荐使用ubuntu系统平台、openJDK作为java环境，然后添加相关依赖，基本上都可以配置成功。此处提供两个参考文章:\n\n- [Android 系统源码编译环境配置](http://blog.csdn.net/binglumeng/article/details/54342462)\n- [Google 官方文档](https://source.android.com/source/requirements)\n\n#### 2、unsupported reloc 43\n\n在编译RK3288系统源码时候，使用`sudo ./mk.sh -s`不久，便会出现`failed`提示编译失败；分析问题需要注意的事项：\n\n- 要使用对应与Android平台的相应openjdk，比如4.4的要使用openjdk6，而5.1的就需要openjdk7.\n\n- 再看一下当前使用的jdk是否是需要的版本，也许安装了多个版本的jdk\n\n  ```sh\n  sudo update-alternatives --config java  //选择序号回车即可  \n  sudo update-alternatives --config javac  //选择序号回车即可  \n  sudo update-alternatives --config javap  //选择序号回车即可  \n  ```\n\n- 修改HOST_x86_common.mk\n\n  ```sh\n  cd SourcePath/build/core/clang/\n  sudo vim ./HOST_x86_common.mk\n  # 在如下文档中添加 -B$($(clang_2nd_arch_prefix)HOST_TOOLCHAIN_FOR_CLANG)/x86_64-linux/bin \\\n\n  ifeq ($(HOST_OS),darwin)\n  # nothing required here yet\n  endif\n\n  ifeq ($(HOST_OS),linux)\n  CLANG_CONFIG_x86_LINUX_HOST_EXTRA_ASFLAGS := \\\n    --gcc-toolchain=$($(clang_2nd_arch_prefix)HOST_TOOLCHAIN_FOR_CLANG) \\\n    --sysroot=$($(clang_2nd_arch_prefix)HOST_TOOLCHAIN_FOR_CLANG)/sysroot \\\n    -B$($(clang_2nd_arch_prefix)HOST_TOOLCHAIN_FOR_CLANG)/x86_64-linux/bin \\\n    -no-integrated-as\n\n  CLANG_CONFIG_x86_LINUX_HOST_EXTRA_CFLAGS := \\\n    --gcc-toolchain=$($(clang_2nd_arch_prefix)HOST_TOOLCHAIN_FOR_CLANG) \\\n    -no-integrated-as\n  ```\n\n  对于Android7.0以下的，需要保留`-no-integrated-as`这句指令。\n\n**注：**一般情况修改如上`HOST_x86_common.mk`文件即可解决此问题，有时候又不行，那么可以在修改以下两个文件：\n\n- Android.common_build.mk\n\n  ```sh\n  # 找到Android.common_build.mk文件，搜索到 ifneq ($(WITHOUT_HOST_CLANG,true))这句话\n  cd SourcePath/art/build/\n  sudo vim Android.common_build.mk\n  ## 修改 ifneq ($(WITHOUT_HOST_CLANG,true))中的true 为false\n  # Host.\n  ART_HOST_CLANG := false\n  ifneq ($(WITHOUT_HOST_CLANG),false)\n    # By default, host builds use clang for better warnings.\n    ART_HOST_CLANG := true\n  endif\n  ```\n\n- 替换`ld`文件\n\n  ```sh\n  # 替换源码中的ld文件为Ubuntu系统本身的ld.gold\n  sudo cp usr/bin/ld.gold SourcePath/prebuilts/gcc/linux-x86/host/x86-linux-glibc2.11-4.6/x86_64-linux/bin/ld\n  ```\n\n  **注意：以上用`SourcePath`代之你的源码所在的根目录**\n\n如此在编译时候，又会报出`failed,javadoc @hide`之类的错误，提示要么`@hide`添加好多注解，要么就`make update-api`，若是提示`javadoc`文件比较少的话，可以逐一添加`@hide`注解，但是太多的话，我选择了`make update-api`命令。\n\n若是不先处理掉`unsupported reloc 43`这个错误，那么`javadoc`这个错误，怎么也处理不好，至少我遇到的情况是这样的。\n\n希望这点小小笔记，记录个人编译过程踩过的坑的同时，能够帮助其他朋友免去这个坑的困扰。","slug":"Android系统源码编译-unsupported-reloc-43-和-make-update-api问题","published":1,"updated":"2017-04-10T08:09:21.912Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ndxcce000e88owvixugmzw","content":"<h2 id=\"Android系统源码编译-unsupported-reloc-43-和-make-update-api\"><a href=\"#Android系统源码编译-unsupported-reloc-43-和-make-update-api\" class=\"headerlink\" title=\"Android系统源码编译 unsupported reloc 43 和 make update-api\"></a>Android系统源码编译 unsupported reloc 43 和 make update-api</h2><p>最近初次接触到Android系统源码的编译工作，公司内使用的开发板是RK3288平台的。众所周知，Android是一个开源、开放的系统平台，国内的众多所谓的智能系统好多都是基于Android平台裁剪定制而来的。</p>\n<p>无可厚非，Android的开放性却也带来的一些副作用，各类修改版的Android系统在使用和开发过程中，就会出现各种不同的适配问题，最让开发者头疼。</p>\n<h4 id=\"1、Android源码编译环境\"><a href=\"#1、Android源码编译环境\" class=\"headerlink\" title=\"1、Android源码编译环境\"></a>1、Android源码编译环境</h4><p>根据google官方的要求，推荐使用ubuntu系统平台、openJDK作为java环境，然后添加相关依赖，基本上都可以配置成功。此处提供两个参考文章:</p>\n<ul>\n<li><a href=\"http://blog.csdn.net/binglumeng/article/details/54342462\" target=\"_blank\" rel=\"external\">Android 系统源码编译环境配置</a></li>\n<li><a href=\"https://source.android.com/source/requirements\" target=\"_blank\" rel=\"external\">Google 官方文档</a></li>\n</ul>\n<h4 id=\"2、unsupported-reloc-43\"><a href=\"#2、unsupported-reloc-43\" class=\"headerlink\" title=\"2、unsupported reloc 43\"></a>2、unsupported reloc 43</h4><p>在编译RK3288系统源码时候，使用<code>sudo ./mk.sh -s</code>不久，便会出现<code>failed</code>提示编译失败；分析问题需要注意的事项：</p>\n<ul>\n<li><p>要使用对应与Android平台的相应openjdk，比如4.4的要使用openjdk6，而5.1的就需要openjdk7.</p>\n</li>\n<li><p>再看一下当前使用的jdk是否是需要的版本，也许安装了多个版本的jdk</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo update-alternatives --config java  //选择序号回车即可  </div><div class=\"line\">sudo update-alternatives --config javac  //选择序号回车即可  </div><div class=\"line\">sudo update-alternatives --config javap  //选择序号回车即可</div></pre></td></tr></table></figure>\n</li>\n<li><p>修改HOST_x86_common.mk</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> SourcePath/build/core/clang/</div><div class=\"line\">sudo vim ./HOST_x86_common.mk</div><div class=\"line\"><span class=\"comment\"># 在如下文档中添加 -B$($(clang_2nd_arch_prefix)HOST_TOOLCHAIN_FOR_CLANG)/x86_64-linux/bin \\</span></div><div class=\"line\"></div><div class=\"line\">ifeq ($(HOST_OS),darwin)</div><div class=\"line\"><span class=\"comment\"># nothing required here yet</span></div><div class=\"line\">endif</div><div class=\"line\"></div><div class=\"line\">ifeq ($(HOST_OS),linux)</div><div class=\"line\">CLANG_CONFIG_x86_LINUX_HOST_EXTRA_ASFLAGS := \\</div><div class=\"line\">  --gcc-toolchain=$($(clang_2nd_arch_prefix)HOST_TOOLCHAIN_FOR_CLANG) \\</div><div class=\"line\">  --sysroot=$($(clang_2nd_arch_prefix)HOST_TOOLCHAIN_FOR_CLANG)/sysroot \\</div><div class=\"line\">  -B$($(clang_2nd_arch_prefix)HOST_TOOLCHAIN_FOR_CLANG)/x86_64-linux/bin \\</div><div class=\"line\">  -no-integrated-as</div><div class=\"line\"></div><div class=\"line\">CLANG_CONFIG_x86_LINUX_HOST_EXTRA_CFLAGS := \\</div><div class=\"line\">  --gcc-toolchain=$($(clang_2nd_arch_prefix)HOST_TOOLCHAIN_FOR_CLANG) \\</div><div class=\"line\">  -no-integrated-as</div></pre></td></tr></table></figure>\n<p>对于Android7.0以下的，需要保留<code>-no-integrated-as</code>这句指令。</p>\n</li>\n</ul>\n<p><strong>注：</strong>一般情况修改如上<code>HOST_x86_common.mk</code>文件即可解决此问题，有时候又不行，那么可以在修改以下两个文件：</p>\n<ul>\n<li><p>Android.common_build.mk</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 找到Android.common_build.mk文件，搜索到 ifneq ($(WITHOUT_HOST_CLANG,true))这句话</span></div><div class=\"line\"><span class=\"built_in\">cd</span> SourcePath/art/build/</div><div class=\"line\">sudo vim Android.common_build.mk</div><div class=\"line\"><span class=\"comment\">## 修改 ifneq ($(WITHOUT_HOST_CLANG,true))中的true 为false</span></div><div class=\"line\"><span class=\"comment\"># Host.</span></div><div class=\"line\">ART_HOST_CLANG := <span class=\"literal\">false</span></div><div class=\"line\">ifneq ($(WITHOUT_HOST_CLANG),<span class=\"literal\">false</span>)</div><div class=\"line\">  <span class=\"comment\"># By default, host builds use clang for better warnings.</span></div><div class=\"line\">  ART_HOST_CLANG := <span class=\"literal\">true</span></div><div class=\"line\">endif</div></pre></td></tr></table></figure>\n</li>\n<li><p>替换<code>ld</code>文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 替换源码中的ld文件为Ubuntu系统本身的ld.gold</span></div><div class=\"line\">sudo cp usr/bin/ld.gold SourcePath/prebuilts/gcc/linux-x86/host/x86-linux-glibc2.11-4.6/x86_64-linux/bin/ld</div></pre></td></tr></table></figure>\n<p><strong>注意：以上用<code>SourcePath</code>代之你的源码所在的根目录</strong></p>\n</li>\n</ul>\n<p>如此在编译时候，又会报出<code>failed,javadoc @hide</code>之类的错误，提示要么<code>@hide</code>添加好多注解，要么就<code>make update-api</code>，若是提示<code>javadoc</code>文件比较少的话，可以逐一添加<code>@hide</code>注解，但是太多的话，我选择了<code>make update-api</code>命令。</p>\n<p>若是不先处理掉<code>unsupported reloc 43</code>这个错误，那么<code>javadoc</code>这个错误，怎么也处理不好，至少我遇到的情况是这样的。</p>\n<p>希望这点小小笔记，记录个人编译过程踩过的坑的同时，能够帮助其他朋友免去这个坑的困扰。</p>\n","excerpt":"","more":"<h2 id=\"Android系统源码编译-unsupported-reloc-43-和-make-update-api\"><a href=\"#Android系统源码编译-unsupported-reloc-43-和-make-update-api\" class=\"headerlink\" title=\"Android系统源码编译 unsupported reloc 43 和 make update-api\"></a>Android系统源码编译 unsupported reloc 43 和 make update-api</h2><p>最近初次接触到Android系统源码的编译工作，公司内使用的开发板是RK3288平台的。众所周知，Android是一个开源、开放的系统平台，国内的众多所谓的智能系统好多都是基于Android平台裁剪定制而来的。</p>\n<p>无可厚非，Android的开放性却也带来的一些副作用，各类修改版的Android系统在使用和开发过程中，就会出现各种不同的适配问题，最让开发者头疼。</p>\n<h4 id=\"1、Android源码编译环境\"><a href=\"#1、Android源码编译环境\" class=\"headerlink\" title=\"1、Android源码编译环境\"></a>1、Android源码编译环境</h4><p>根据google官方的要求，推荐使用ubuntu系统平台、openJDK作为java环境，然后添加相关依赖，基本上都可以配置成功。此处提供两个参考文章:</p>\n<ul>\n<li><a href=\"http://blog.csdn.net/binglumeng/article/details/54342462\">Android 系统源码编译环境配置</a></li>\n<li><a href=\"https://source.android.com/source/requirements\">Google 官方文档</a></li>\n</ul>\n<h4 id=\"2、unsupported-reloc-43\"><a href=\"#2、unsupported-reloc-43\" class=\"headerlink\" title=\"2、unsupported reloc 43\"></a>2、unsupported reloc 43</h4><p>在编译RK3288系统源码时候，使用<code>sudo ./mk.sh -s</code>不久，便会出现<code>failed</code>提示编译失败；分析问题需要注意的事项：</p>\n<ul>\n<li><p>要使用对应与Android平台的相应openjdk，比如4.4的要使用openjdk6，而5.1的就需要openjdk7.</p>\n</li>\n<li><p>再看一下当前使用的jdk是否是需要的版本，也许安装了多个版本的jdk</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo update-alternatives --config java  //选择序号回车即可  </div><div class=\"line\">sudo update-alternatives --config javac  //选择序号回车即可  </div><div class=\"line\">sudo update-alternatives --config javap  //选择序号回车即可</div></pre></td></tr></table></figure>\n</li>\n<li><p>修改HOST_x86_common.mk</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> SourcePath/build/core/clang/</div><div class=\"line\">sudo vim ./HOST_x86_common.mk</div><div class=\"line\"><span class=\"comment\"># 在如下文档中添加 -B$($(clang_2nd_arch_prefix)HOST_TOOLCHAIN_FOR_CLANG)/x86_64-linux/bin \\</span></div><div class=\"line\"></div><div class=\"line\">ifeq ($(HOST_OS),darwin)</div><div class=\"line\"><span class=\"comment\"># nothing required here yet</span></div><div class=\"line\">endif</div><div class=\"line\"></div><div class=\"line\">ifeq ($(HOST_OS),linux)</div><div class=\"line\">CLANG_CONFIG_x86_LINUX_HOST_EXTRA_ASFLAGS := \\</div><div class=\"line\">  --gcc-toolchain=$($(clang_2nd_arch_prefix)HOST_TOOLCHAIN_FOR_CLANG) \\</div><div class=\"line\">  --sysroot=$($(clang_2nd_arch_prefix)HOST_TOOLCHAIN_FOR_CLANG)/sysroot \\</div><div class=\"line\">  -B$($(clang_2nd_arch_prefix)HOST_TOOLCHAIN_FOR_CLANG)/x86_64-linux/bin \\</div><div class=\"line\">  -no-integrated-as</div><div class=\"line\"></div><div class=\"line\">CLANG_CONFIG_x86_LINUX_HOST_EXTRA_CFLAGS := \\</div><div class=\"line\">  --gcc-toolchain=$($(clang_2nd_arch_prefix)HOST_TOOLCHAIN_FOR_CLANG) \\</div><div class=\"line\">  -no-integrated-as</div></pre></td></tr></table></figure>\n<p>对于Android7.0以下的，需要保留<code>-no-integrated-as</code>这句指令。</p>\n</li>\n</ul>\n<p><strong>注：</strong>一般情况修改如上<code>HOST_x86_common.mk</code>文件即可解决此问题，有时候又不行，那么可以在修改以下两个文件：</p>\n<ul>\n<li><p>Android.common_build.mk</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 找到Android.common_build.mk文件，搜索到 ifneq ($(WITHOUT_HOST_CLANG,true))这句话</span></div><div class=\"line\"><span class=\"built_in\">cd</span> SourcePath/art/build/</div><div class=\"line\">sudo vim Android.common_build.mk</div><div class=\"line\"><span class=\"comment\">## 修改 ifneq ($(WITHOUT_HOST_CLANG,true))中的true 为false</span></div><div class=\"line\"><span class=\"comment\"># Host.</span></div><div class=\"line\">ART_HOST_CLANG := <span class=\"literal\">false</span></div><div class=\"line\">ifneq ($(WITHOUT_HOST_CLANG),<span class=\"literal\">false</span>)</div><div class=\"line\">  <span class=\"comment\"># By default, host builds use clang for better warnings.</span></div><div class=\"line\">  ART_HOST_CLANG := <span class=\"literal\">true</span></div><div class=\"line\">endif</div></pre></td></tr></table></figure>\n</li>\n<li><p>替换<code>ld</code>文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 替换源码中的ld文件为Ubuntu系统本身的ld.gold</span></div><div class=\"line\">sudo cp usr/bin/ld.gold SourcePath/prebuilts/gcc/linux-x86/host/x86-linux-glibc2.11-4.6/x86_64-linux/bin/ld</div></pre></td></tr></table></figure>\n<p><strong>注意：以上用<code>SourcePath</code>代之你的源码所在的根目录</strong></p>\n</li>\n</ul>\n<p>如此在编译时候，又会报出<code>failed,javadoc @hide</code>之类的错误，提示要么<code>@hide</code>添加好多注解，要么就<code>make update-api</code>，若是提示<code>javadoc</code>文件比较少的话，可以逐一添加<code>@hide</code>注解，但是太多的话，我选择了<code>make update-api</code>命令。</p>\n<p>若是不先处理掉<code>unsupported reloc 43</code>这个错误，那么<code>javadoc</code>这个错误，怎么也处理不好，至少我遇到的情况是这样的。</p>\n<p>希望这点小小笔记，记录个人编译过程踩过的坑的同时，能够帮助其他朋友免去这个坑的困扰。</p>\n"},{"title":"Android动态服务SPI的实现","date":"2017-04-11T07:49:54.000Z","_content":"\n## Android 动态服务SPI的实现\n\n> 声明：此处所谓的SPI是指Service Provider Interfaces，属于Java中动态加载Service的一项技术。\n>\n> 而非硬件编程中的SPI，那是Serial Peripheral Interface。\n\n本文参照了[元亨利贞o](http://www.jianshu.com/p/10533e5e4410)这位博主的博客，表示感谢。\n\n#### 一、概念\n\nSPI即`Service Provider Interfaces`。Java的接口可以有多种实现方式，为便于代码灵活，有事需要动态加载实现类。这就是SPI机制. SPI机制非常简单, 步骤如下:\n\n1. 定义接口和接口的实现类\n\n2. 创建resources/META-INF/services目录\n\n3. 在上述Service目录下，创建一个以接口名(类的全名) 命名的文件, 其内容是实现类的类名 (类的全名)。\n\n   > 在services目录下创建的文件是`com.binglumeng.spidemo.IAnimal` 文件中的内容为Animal接口的实现类, 可能是`com.binglumeng.spidemo.Dog`\n\n4. 在java代码中使用ServcieLoader来动态加载并调用内部方法.\n\n#### 二、Android中使用SPI\n\nAndroid上使用SPI的步骤和Java中是一样的. 下面给出实例:\n\n- (1) 创建spi接口, 如下:\n\n```java\npackage com.binglumeng.spidemo;\n\npublic interface IAnimal {\n    void run();\n}\n```\n\n- (2) 实现spi接口, 如下:\n\n```java\npackage com.binglumeng.spidemo;\n\nimport android.util.Log;\n\nimport com.binglumeng.spidemo.IAnimal;\n\npublic class Dog implements IAnimal {\n\n    @Override\n    public void run() {\n        Log.i(\"test\", this.getClass().getName() + \" == Dog run !\");\n    }\n\n}\n```\n\n- (3) 创建目录`resources/META-INF/services`目录\n\n- (4) 创建以接口命名的文件(`com.binglumeng.spidemo.IAnimal`), 内容为接口的实现类. 下面是spi的描述文件:\n\n  ![spi](./Android动态服务SPI的实现/spi.png)\n\n- (5) 使用ServiceLoader动态查找接口的实现并使用.\n  下面是在Activity中查找接口的实现, 并调用接口的方法, 代码如下:\n\n```java\npackage com.binglumeng.spidemo;\n\nimport android.os.Bundle;\nimport android.support.v7.app.AppCompatActivity;\nimport android.view.View;\n\nimport java.util.Iterator;\nimport java.util.ServiceLoader;\n\n/**\n * Serial Peripheral Interface 这才是标准的SPI总线\n * 而此处所谓的SpiDemo只是Service Provider Interfaces的动态加载service的演示。\n * 步骤：\n * 1、定义接口和接口实现类\n * 2、创建resources/META-INF/services目录\n * 3、在services目录下创建接口全类名的文件，并且其内容为接口实现类的全类名\n * 4、在java代码中使用ServcieLoader来动态加载并调用内部方法。\n */\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n    }\n\n    /**\n     * Button的onClick属性\n     *\n     * @param view\n     */\n    public void showSPI(View view) {\n        //通过ServiceLoader来动态加载Service,其中load有几个方法重载，可以尝试\n        ServiceLoader<ImageLoader> serviceLoader = ServiceLoader.load(ImageLoader.class, ImageLoader.class.getClassLoader());\n     \n        Iterator<ImageLoader> it = serviceLoader.iterator();\n        if (it.hasNext()) {\n            it.next().displayImage();\n        }\n    }\n}\n```\n\n点击按钮会输出下面信息:\n\n```java\ncom.binglumeng.spidemo.Dog == Dog run !\n```\n\n ｡◕‿◕｡ .......","source":"_posts/Android动态服务SPI的实现.md","raw":"---\ntitle: Android动态服务SPI的实现\ndate: 2017-04-11 15:49:54\ntags:\n    - Android\n    - Service\ncategories:\n    - Android\n---\n\n## Android 动态服务SPI的实现\n\n> 声明：此处所谓的SPI是指Service Provider Interfaces，属于Java中动态加载Service的一项技术。\n>\n> 而非硬件编程中的SPI，那是Serial Peripheral Interface。\n\n本文参照了[元亨利贞o](http://www.jianshu.com/p/10533e5e4410)这位博主的博客，表示感谢。\n\n#### 一、概念\n\nSPI即`Service Provider Interfaces`。Java的接口可以有多种实现方式，为便于代码灵活，有事需要动态加载实现类。这就是SPI机制. SPI机制非常简单, 步骤如下:\n\n1. 定义接口和接口的实现类\n\n2. 创建resources/META-INF/services目录\n\n3. 在上述Service目录下，创建一个以接口名(类的全名) 命名的文件, 其内容是实现类的类名 (类的全名)。\n\n   > 在services目录下创建的文件是`com.binglumeng.spidemo.IAnimal` 文件中的内容为Animal接口的实现类, 可能是`com.binglumeng.spidemo.Dog`\n\n4. 在java代码中使用ServcieLoader来动态加载并调用内部方法.\n\n#### 二、Android中使用SPI\n\nAndroid上使用SPI的步骤和Java中是一样的. 下面给出实例:\n\n- (1) 创建spi接口, 如下:\n\n```java\npackage com.binglumeng.spidemo;\n\npublic interface IAnimal {\n    void run();\n}\n```\n\n- (2) 实现spi接口, 如下:\n\n```java\npackage com.binglumeng.spidemo;\n\nimport android.util.Log;\n\nimport com.binglumeng.spidemo.IAnimal;\n\npublic class Dog implements IAnimal {\n\n    @Override\n    public void run() {\n        Log.i(\"test\", this.getClass().getName() + \" == Dog run !\");\n    }\n\n}\n```\n\n- (3) 创建目录`resources/META-INF/services`目录\n\n- (4) 创建以接口命名的文件(`com.binglumeng.spidemo.IAnimal`), 内容为接口的实现类. 下面是spi的描述文件:\n\n  ![spi](./Android动态服务SPI的实现/spi.png)\n\n- (5) 使用ServiceLoader动态查找接口的实现并使用.\n  下面是在Activity中查找接口的实现, 并调用接口的方法, 代码如下:\n\n```java\npackage com.binglumeng.spidemo;\n\nimport android.os.Bundle;\nimport android.support.v7.app.AppCompatActivity;\nimport android.view.View;\n\nimport java.util.Iterator;\nimport java.util.ServiceLoader;\n\n/**\n * Serial Peripheral Interface 这才是标准的SPI总线\n * 而此处所谓的SpiDemo只是Service Provider Interfaces的动态加载service的演示。\n * 步骤：\n * 1、定义接口和接口实现类\n * 2、创建resources/META-INF/services目录\n * 3、在services目录下创建接口全类名的文件，并且其内容为接口实现类的全类名\n * 4、在java代码中使用ServcieLoader来动态加载并调用内部方法。\n */\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n    }\n\n    /**\n     * Button的onClick属性\n     *\n     * @param view\n     */\n    public void showSPI(View view) {\n        //通过ServiceLoader来动态加载Service,其中load有几个方法重载，可以尝试\n        ServiceLoader<ImageLoader> serviceLoader = ServiceLoader.load(ImageLoader.class, ImageLoader.class.getClassLoader());\n     \n        Iterator<ImageLoader> it = serviceLoader.iterator();\n        if (it.hasNext()) {\n            it.next().displayImage();\n        }\n    }\n}\n```\n\n点击按钮会输出下面信息:\n\n```java\ncom.binglumeng.spidemo.Dog == Dog run !\n```\n\n ｡◕‿◕｡ .......","slug":"Android动态服务SPI的实现","published":1,"updated":"2017-04-11T08:19:21.472Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ndxccf000h88owkmmjjcoq","content":"<h2 id=\"Android-动态服务SPI的实现\"><a href=\"#Android-动态服务SPI的实现\" class=\"headerlink\" title=\"Android 动态服务SPI的实现\"></a>Android 动态服务SPI的实现</h2><blockquote>\n<p>声明：此处所谓的SPI是指Service Provider Interfaces，属于Java中动态加载Service的一项技术。</p>\n<p>而非硬件编程中的SPI，那是Serial Peripheral Interface。</p>\n</blockquote>\n<p>本文参照了<a href=\"http://www.jianshu.com/p/10533e5e4410\" target=\"_blank\" rel=\"external\">元亨利贞o</a>这位博主的博客，表示感谢。</p>\n<h4 id=\"一、概念\"><a href=\"#一、概念\" class=\"headerlink\" title=\"一、概念\"></a>一、概念</h4><p>SPI即<code>Service Provider Interfaces</code>。Java的接口可以有多种实现方式，为便于代码灵活，有事需要动态加载实现类。这就是SPI机制. SPI机制非常简单, 步骤如下:</p>\n<ol>\n<li><p>定义接口和接口的实现类</p>\n</li>\n<li><p>创建resources/META-INF/services目录</p>\n</li>\n<li><p>在上述Service目录下，创建一个以接口名(类的全名) 命名的文件, 其内容是实现类的类名 (类的全名)。</p>\n<blockquote>\n<p>在services目录下创建的文件是<code>com.binglumeng.spidemo.IAnimal</code> 文件中的内容为Animal接口的实现类, 可能是<code>com.binglumeng.spidemo.Dog</code></p>\n</blockquote>\n</li>\n<li><p>在java代码中使用ServcieLoader来动态加载并调用内部方法.</p>\n</li>\n</ol>\n<h4 id=\"二、Android中使用SPI\"><a href=\"#二、Android中使用SPI\" class=\"headerlink\" title=\"二、Android中使用SPI\"></a>二、Android中使用SPI</h4><p>Android上使用SPI的步骤和Java中是一样的. 下面给出实例:</p>\n<ul>\n<li>(1) 创建spi接口, 如下:</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.binglumeng.spidemo;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IAnimal</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>(2) 实现spi接口, 如下:</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.binglumeng.spidemo;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.binglumeng.spidemo.IAnimal;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> <span class=\"keyword\">implements</span> <span class=\"title\">IAnimal</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Log.i(<span class=\"string\">\"test\"</span>, <span class=\"keyword\">this</span>.getClass().getName() + <span class=\"string\">\" == Dog run !\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>(3) 创建目录<code>resources/META-INF/services</code>目录</p>\n</li>\n<li><p>(4) 创建以接口命名的文件(<code>com.binglumeng.spidemo.IAnimal</code>), 内容为接口的实现类. 下面是spi的描述文件:</p>\n<p><img src=\"/2017/04/11/Android动态服务SPI的实现/spi.png\" alt=\"spi\"></p>\n</li>\n<li><p>(5) 使用ServiceLoader动态查找接口的实现并使用.<br>下面是在Activity中查找接口的实现, 并调用接口的方法, 代码如下:</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.binglumeng.spidemo;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.AppCompatActivity;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.View;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ServiceLoader;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Serial Peripheral Interface 这才是标准的SPI总线</div><div class=\"line\"> * 而此处所谓的SpiDemo只是Service Provider Interfaces的动态加载service的演示。</div><div class=\"line\"> * 步骤：</div><div class=\"line\"> * 1、定义接口和接口实现类</div><div class=\"line\"> * 2、创建resources/META-INF/services目录</div><div class=\"line\"> * 3、在services目录下创建接口全类名的文件，并且其内容为接口实现类的全类名</div><div class=\"line\"> * 4、在java代码中使用ServcieLoader来动态加载并调用内部方法。</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Button的onClick属性</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> view</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showSPI</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//通过ServiceLoader来动态加载Service,其中load有几个方法重载，可以尝试</span></div><div class=\"line\">        ServiceLoader&lt;ImageLoader&gt; serviceLoader = ServiceLoader.load(ImageLoader.class, ImageLoader.class.getClassLoader());</div><div class=\"line\">     </div><div class=\"line\">        Iterator&lt;ImageLoader&gt; it = serviceLoader.iterator();</div><div class=\"line\">        <span class=\"keyword\">if</span> (it.hasNext()) &#123;</div><div class=\"line\">            it.next().displayImage();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>点击按钮会输出下面信息:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">com.binglumeng.spidemo.Dog == Dog run !</div></pre></td></tr></table></figure>\n<p> ｡◕‿◕｡ …….</p>\n","excerpt":"","more":"<h2 id=\"Android-动态服务SPI的实现\"><a href=\"#Android-动态服务SPI的实现\" class=\"headerlink\" title=\"Android 动态服务SPI的实现\"></a>Android 动态服务SPI的实现</h2><blockquote>\n<p>声明：此处所谓的SPI是指Service Provider Interfaces，属于Java中动态加载Service的一项技术。</p>\n<p>而非硬件编程中的SPI，那是Serial Peripheral Interface。</p>\n</blockquote>\n<p>本文参照了<a href=\"http://www.jianshu.com/p/10533e5e4410\">元亨利贞o</a>这位博主的博客，表示感谢。</p>\n<h4 id=\"一、概念\"><a href=\"#一、概念\" class=\"headerlink\" title=\"一、概念\"></a>一、概念</h4><p>SPI即<code>Service Provider Interfaces</code>。Java的接口可以有多种实现方式，为便于代码灵活，有事需要动态加载实现类。这就是SPI机制. SPI机制非常简单, 步骤如下:</p>\n<ol>\n<li><p>定义接口和接口的实现类</p>\n</li>\n<li><p>创建resources/META-INF/services目录</p>\n</li>\n<li><p>在上述Service目录下，创建一个以接口名(类的全名) 命名的文件, 其内容是实现类的类名 (类的全名)。</p>\n<blockquote>\n<p>在services目录下创建的文件是<code>com.binglumeng.spidemo.IAnimal</code> 文件中的内容为Animal接口的实现类, 可能是<code>com.binglumeng.spidemo.Dog</code></p>\n</blockquote>\n</li>\n<li><p>在java代码中使用ServcieLoader来动态加载并调用内部方法.</p>\n</li>\n</ol>\n<h4 id=\"二、Android中使用SPI\"><a href=\"#二、Android中使用SPI\" class=\"headerlink\" title=\"二、Android中使用SPI\"></a>二、Android中使用SPI</h4><p>Android上使用SPI的步骤和Java中是一样的. 下面给出实例:</p>\n<ul>\n<li>(1) 创建spi接口, 如下:</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.binglumeng.spidemo;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IAnimal</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>(2) 实现spi接口, 如下:</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.binglumeng.spidemo;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.binglumeng.spidemo.IAnimal;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> <span class=\"keyword\">implements</span> <span class=\"title\">IAnimal</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Log.i(<span class=\"string\">\"test\"</span>, <span class=\"keyword\">this</span>.getClass().getName() + <span class=\"string\">\" == Dog run !\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>(3) 创建目录<code>resources/META-INF/services</code>目录</p>\n</li>\n<li><p>(4) 创建以接口命名的文件(<code>com.binglumeng.spidemo.IAnimal</code>), 内容为接口的实现类. 下面是spi的描述文件:</p>\n<p><img src=\"/2017/04/11/Android动态服务SPI的实现/spi.png\" alt=\"spi\"></p>\n</li>\n<li><p>(5) 使用ServiceLoader动态查找接口的实现并使用.<br>下面是在Activity中查找接口的实现, 并调用接口的方法, 代码如下:</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.binglumeng.spidemo;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.AppCompatActivity;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.View;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ServiceLoader;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Serial Peripheral Interface 这才是标准的SPI总线</div><div class=\"line\"> * 而此处所谓的SpiDemo只是Service Provider Interfaces的动态加载service的演示。</div><div class=\"line\"> * 步骤：</div><div class=\"line\"> * 1、定义接口和接口实现类</div><div class=\"line\"> * 2、创建resources/META-INF/services目录</div><div class=\"line\"> * 3、在services目录下创建接口全类名的文件，并且其内容为接口实现类的全类名</div><div class=\"line\"> * 4、在java代码中使用ServcieLoader来动态加载并调用内部方法。</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Button的onClick属性</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> view</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showSPI</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//通过ServiceLoader来动态加载Service,其中load有几个方法重载，可以尝试</span></div><div class=\"line\">        ServiceLoader&lt;ImageLoader&gt; serviceLoader = ServiceLoader.load(ImageLoader.class, ImageLoader.class.getClassLoader());</div><div class=\"line\">     </div><div class=\"line\">        Iterator&lt;ImageLoader&gt; it = serviceLoader.iterator();</div><div class=\"line\">        <span class=\"keyword\">if</span> (it.hasNext()) &#123;</div><div class=\"line\">            it.next().displayImage();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>点击按钮会输出下面信息:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">com.binglumeng.spidemo.Dog == Dog run !</div></pre></td></tr></table></figure>\n<p> ｡◕‿◕｡ …….</p>\n"},{"title":"C++学习笔记","date":"2016-12-20T07:28:00.000Z","_content":"\n# C++学习笔记\n\n鉴于C++可看作是C语言的扩展，或者说是面向对象的C语言版本。其语法方面多有类似指出，此笔记也就简要写出C++中与C不同和新增的语法部分。\n\n当然C与C++依然算作是两种语言，此处本人小白，亦不做辩论，只在此方便笔记而已。\n\n## 1、基本语法\n\n- 简介\n\n  linux下C语言用gcc，C++用g++编译；C++含有对象、类、方法、即使变量等概念。\n\nC++ 的预编译库包含了绝大多数C语言的库，自身格式略有不同\n\n```C++\n#include <iostream>\nusing namespace std;//使用标准的命名空间\n//C语言是<stdio.h>\nint main(){\n  cout << \"hello C++\";//输出语法是cout << ，有时候还要用endl;\n}\n```\n\n- 关键字\n\n| asm          | else      | new              | this     |\n| ------------ | --------- | ---------------- | -------- |\n| auto         | enum      | operator         | throw    |\n| bool         | explicit  | private          | true     |\n| break        | export    | protected        | try      |\n| case         | extern    | public           | typedef  |\n| catch        | false     | register         | typeid   |\n| char         | float     | reinterpret_cast | typename |\n| class        | for       | return           | union    |\n| const        | friend    | short            | unsigned |\n| const_cast   | goto      | signed           | using    |\n| continue     | if        | sizeof           | virtual  |\n| default      | inline    | static           | void     |\n| delete       | int       | static_cast      | volatile |\n| do           | long      | struct           | wchar_t  |\n| double       | mutable   | switch           | while    |\n| dynamic_cast | namespace | template         |          |\n\n- 三字字符\n\n| 三字符组 | 替换   |\n| ---- | ---- |\n| ??=  | #    |\n| ??/  | \\    |\n| ??'  | ^    |\n| ??(  | [    |\n| ??)  | ]    |\n| ??!  | \\|   |\n| ??<  | {    |\n| ??>  | }    |\n| ??-  | ~    |\n\n这些都是古老程序，当时为了表示键盘上没有的字符而设计的。\n\n- 数据类型\n\n  bool、char、int、float、double、void、wchar_t(宽字符型)，以及signed、unsigned、short、long等修饰符\n\n  - **typedef**定义新名称\n\n  ```C++\n  typedef int feet;//那么就可以用feet代替int类型定义变量了\n  ```\n\n  - 枚举\n\n  ```C++\n  enum enum_name{list of names} var-list;\n  //示例\n  enum color{red,green,blue} c;\n  c = blue;\n  //默认情况，第一个值=0，第二个=1，依次+1，也可以直接定义\n  enum shape {rectangle,circle=5,square} sp;\n  //那么此时，square=6，比上一个+1.\n  ```\n\n  const声明常量，成员变量自动初始化，char=‘\\0';默认初始值\n\n  有符号和无符号的修饰符\n\n  ```C++\n  #include　<iostream>\n  using namespace std;\n  int　main(){\n    short int i;//有符号短整数\n    unsigned short int j;//无符号的\n    j = 50000;//赋值\n    i = j;\n    cout << i << \" , \" << j;\n    return 0;\n  }\n  //输出结果\n  -15536 , 50000\n  ```\n\n- C++限定符\n\n  - const 常量修饰符\n  - volatile 告知编译器，其修饰的变量可能会被未知方式修改\n  - restrict修饰的指针，是一种唯一访问它所修饰对象的方式\n\n- C++存储类\n\n  auto、register、static、extern、mutable(用于对象修饰，允许对象成员代替常量，mutable成员可通过const成员修改)\n\n- String类\n\n  相比char字符类型，增加了许多常用便捷操作\n\n- 引用\n\n  引用不同于指针\n\n  - 没有空引用，可以用空指针\n  - 一旦引用被初始化为一个对象，就不能指向其他对象，指针可以随时变向\n  - 引用必须创建时初始化，指针可以随时\n\n  引用使用`&`符号\n\n  ```C++\n  //变量的声明初始化\n  int i = 17;\n  //声明变量i的引用\n  int& r = i;//成为r是初始化为i的整形引用\n  ```\n\n- 基本输入输出\n\n  I/O库\n\n  ```C++\n  <iostream>、<iomanip>、<fstream>等\n  ```\n\n  - 标准输出cout，输入cin\n\n  ```C++\n  #include <iostream>\n  using namespace std;\n  int main(){\n    char str[] = \"Hello C++\";\n    cout << \"Value of Str is : \" << str << endl;\n    char name[30];\n    cout << \"Please input your name\";\n    cin >> name;\n    cout << \"your name is : \"<<name<<endl;//endl  --  end line;\n  }\n  ```\n\n  - 标准错误流cerr，日志流clog\n\n## 2、面向对象\n\n- 对象类\n\n  **class**关键字\n\n  ```C++\n  class Box {\n    public ://还有private、protected，friend有点不同\n    \tdouble length;\n    \tdouble breadth;\n    \tdouble height;\n  };\n  //声明类对象\n  Box box1;\n  //然后用.符号访问类成员\n  box1.length\n  ```\n\n- 继承\n\n  C++可以多继承\n\n  ```C++\n  //格式\n  class derived-class : access-specifier base-class\n  //示例\n  class Rectangle : public Shape{\n    ...\n  }\n  ```\n\n  权限修饰符public、private、protected\n\n  | 访问   | public | protected | private |\n  | ---- | ------ | --------- | ------- |\n  | 同一个类 | yes    | yes       | yes     |\n  | 派生类  | yes    | yes       | no      |\n  | 外部类  | yes    | no        | no      |\n\n  派生类可以继承所有基类的方法，例外\n\n  - 基类的构造函数、析构函数和拷贝构造函数\n  - 积累的重载运算符(就是重新定义基本的运算符)\n  - 基类的友元函数(friend修饰的函数)\n\n  **注意**一般继承类型选择public，少用private和protected，因为使用对应的修饰符，基类的成员在派生类中将变成对应修饰符的权限级别。如使用private，则基类的public和protected成员，在派生类也会private化。\n\n  ```C++\n  class <sub-name>:<visit><base1>,<visit><base2>\n    {\n      ...\n    };\n  //示例\n  class Rectangle:public Shape,public PaintCost{\n    ...\n  };\n  ```\n\n- 重载运算符和重载函数\n\n  函数重载也就是Java之类的面向对象里的方法重载，既同一个方法名，不同的方法签名。\n\n  - 运算符重载\n\n  ```C++\n  Box operator+(const Box&);\n  //格式如上，必须有operator关键字，内部传入引用\n  //如此box1+box2就被如下重载定义\n  Box operator+(const Box& b){\n    Box box;\n    box.length = this->length + b.length;\n    ...\n  }\n  ```\n\n   下面是可重载的运算符列表：\n\n  | +    | -    | *    | /      | %      | ^         |\n  | ---- | ---- | ---- | ------ | ------ | --------- |\n  | &    | \\|   | ~    | !      | ,      | =         |\n  | <    | >    | <=   | \\>=     | ++     | --        |\n  | <<   | \\>>   | ==   | !=     | &&     | \\|\\|      |\n  | +=   | -=   | /=   | %=     | ^=     | &=        |\n  | \\|=  | *=   | <<=  | \\>>=    | []     | ()        |\n  | ->   | ->*  | new  | new [] | delete | delete [] |\n\n  下面是不可重载的运算符列表：\n\n  `::`、`.*`、`.`、`?:`\n\n- 多态\n\n  面向对象编程语言三大特性，封装、继承、多态。\n\n  所谓多态，也就是一个方法或属性，在不同的派生类那里，有不同的具体表现方式。\n\n  但是C++语言里，需要派生类实现的抽象方法，需要使用关键字`virtual`在基类中修饰，不然的话，子类调用的仍然还是父类方法，而不是自己的具体实现：\n\n  ```C++\n  class Shape{\n    ...\n    public:\n    ...\n    //此处若不用virtual修饰，那么子类实现该方法，调用时候，就依然是该方法，而不是子类自己的实现\n    virtual int area(){\n  \tcout << \"Parent class area:\"<<endl;\n      return 0;\n    }\n  }\n  //示例子类\n  class Circle{\n    ...\n    public :\n    ...\n    int area(){\n      cout << \"Circle class area:\" << end;\n      return 0;\n    }\n  }\n  int main(){\n    Shape *shape;\n    Circle circle;\n    //存储circle对象地址\n    shape = circle;\n    //调用,如果Shape类area()函数不用virtual的修饰，那么输出的只能是Shape类的方法，而不是子类Cirle的area()函数。\n    shape->area();\n    return 0;\n  }\n  ```\n\n  使用virtual修饰的函数成为虚函数，如果虚函数没有方法体，则成为纯虚函数。\n\n  类似于Java中的抽象方法。\n\n- 数据抽象与数据封装\n\n  数据抽象就是私有化数据变量，推外提供set、get方法。数据封装，也就是类似于C中的结构体，或者java中的bean对象类，封装一组数据和函数，成为一个实体类。\n\n  **抽象类**一个含有纯虚函数的类。也称为接口。\n\n## 3、高级教程\n- 文件和流\n\n`iostream`标准库，提供了`cin`、`cout`方法，而文件标准库`fstream`提供了三种数据类型\n`ofstream`、`ifstream`、`fstream`分别对应的是输出、输入、和同时具备输入输出的类型。\n\n- 打开文件\n```C++\n//参数表示，文件路径和名称，读取方式\nvoid open(const char *filename,ios::openmode mode);\n```\n|模式标志|描述|\n|--|--|\n|ios::app|追加模式|\n|ios::ate|打开文件，定位到末尾|\n|ios::in|读取|\n|ios::out|写入|\n|ios::trunc|若文件存在，打开前截断为0字节|\n\n这些模式可以结合使用，`::`符号为**域**定位符号\n```C++\nofstream outfile;\noutfile.open(\"file.dat\",ios::out | ios::trunc);\n```\n- 关闭文件\n\n`close()`函数是fstream、ifsteram、ofstream对象的一个成员。\n```C++\n#include <fstream>\n#include <iostream>\nusing namespace std;\n \nint main ()\n{\n    \n   char data[100];\n\n   // 以写模式打开文件\n   ofstream outfile;\n   outfile.open(\"afile.dat\");\n\n   cout << \"Writing to the file\" << endl;\n   cout << \"Enter your name: \"; \n   cin.getline(data, 100);\n\n   // 向文件写入用户输入的数据\n   outfile << data << endl;\n\n   cout << \"Enter your age: \"; \n   cin >> data;\n   cin.ignore();\n   \n   // 再次向文件写入用户输入的数据\n   outfile << data << endl;\n\n   // 关闭打开的文件\n   outfile.close();\n\n   // 以读模式打开文件\n   ifstream infile; \n   infile.open(\"afile.dat\"); \n \n   cout << \"Reading from the file\" << endl; \n   infile >> data; \n\n   // 在屏幕上写入数据\n   cout << data << endl;\n   \n   // 再次从文件读取数据，并显示它\n   infile >> data; \n   cout << data << endl; \n\n   // 关闭打开的文件\n   infile.close();\n\n   return 0;\n}\n```\n\n- 文件位置指针\n\nistream和ostream都提供了对文件重新定位的函数功能。这些成员函数包括关于 istream 的 seekg（\"seek get\"）和关于 ostream 的 seekp（\"seek put\"）。\nseekg 和 seekp 的参数通常是一个长整型。第二个参数可以用于指定查找方向。查找方向可以是 ios::beg（默认的，从流的开头开始定位），也可以是 ios::cur（从流的当前位置开始定位），也可以是 ios::end（从流的末尾开始定位）。\n```c++\n// 定位到 fileObject 的第 n 个字节（假设是 ios::beg）\nfileObject.seekg( n );\n\n// 把文件的读指针从 fileObject 当前位置向后移 n 个字节\nfileObject.seekg( n, ios::cur );\n\n// 把文件的读指针从 fileObject 末尾往回移 n 个字节\nfileObject.seekg( n, ios::end );\n\n// 定位到 fileObject 的末尾\nfileObject.seekg( 0, ios::end );\n```\n\n- 异常处理\ntry...catch ，throw,好像C++中没有throws关键字\n\n| 异常 | 描述 |\n|--|--|\n| **std::exception** | 该异常是所有标准 C++ 异常的父类。 |\n| std::bad_alloc | 该异常可以通过 **new** 抛出。 |\n| std::bad_cast | 该异常可以通过 **dynamic_cast** 抛出。 |\n| std::bad_exception | 这在处理 C++ 程序中无法预期的异常时非常有用。 |\n| std::bad_typeid | 该异常可以通过 **typeid** 抛出。 |\n| **std::logic_error** | 理论上可以通过读取代码来检测到的异常。 |\n| std::domain_error | 当使用了一个无效的数学域时，会抛出该异常。 |\n| std::invalid_argument | 当使用了无效的参数时，会抛出该异常。 |\n| std::length_error | 当创建了太长的 std::string 时，会抛出该异常。 |\n| std::out_of_range | 该异常可以通过方法抛出，例如 std::vector 和 std::bitset<>::operator[]()。 |\n| **std::runtime_error** | 理论上不可以通过读取代码来检测到的异常。 |\n| std::overflow_error | 当发生数学上溢时，会抛出该异常。 |\n| std::range_error | 当尝试存储超出范围的值时，会抛出该异常。 |\n| std::underflow_error | 当发生数学下溢时，会抛出该异常。 |\n也可以通过继承exception类，重载其`what()`方法，来自定义异常类\n```C++\n#include <iostream>\n#include <exception>\nusing namespace std;\n\nstruct MyException : public exception\n{\n  const char * what () const throw ()\n  {\n    return \"C++ Exception\";\n  }\n};\n \nint main()\n{\n  try\n  {\n    throw MyException();\n  }\n  catch(MyException& e)\n  {\n    std::cout << \"MyException caught\" << std::endl;\n    std::cout << e.what() << std::endl;\n  }\n  catch(std::exception& e)\n  {\n    //其他的错误\n  }\n}\n```\n\n- 动态内存\n    - 堆，程序中未使用，运行时动态分配的内存\n\n    - 栈，函数内部声明的变量，都在此。\n\nnew 和 delete 运算符，用于动态分配内存。\n`new data-type`\n```C++\ndouble* pvalue = NULL;//初始化为null的指针\npvalue = new double;//为变量请求内存，但是可能不一定有内存可分配，需要检查\nif(!(pvalue = new double)){\n  cout << \"Error : out of memory.\" << endl;\n  exit(1);\n}\n```\nC 语言中有`malloc()`函数，但是C++ 最好用new，因为它可以分配内存，而且还创建了对象。\n```C++\ndelete pvalue;//释放pvalue所指向的内存。\n//如下示例\n#include <iostream>\nusing namespace std;\n\nint main ()\n{\n   double* pvalue  = NULL; // 初始化为 null 的指针\n   pvalue  = new double;   // 为变量请求内存\n \n   *pvalue = 29494.99;     // 在分配的地址存储值\n   cout << \"Value of pvalue : \" << *pvalue << endl;\n\n   delete pvalue;         // 释放内存\n\n   return 0;\n}\n```\n- 数组动态分配内存\n```C++\nchar* pvalue = NULL;//初始化指针为null\npvalue = new char[20];//请求内存\ndelete [] pvalue;//删除pvalue指向的数组\n\nint ROW = 2;\nint COL = 3;\ndouble **pvalue = new double* [ROW];//为行分配内存\n//为列分配内存\nfor(int i = 0;i<COL;i++){\n  pvalue[i] = new double[COL];\n}\n//释放内存\nfor(int i = 0;i<COL;i++){\n  delete[] pvalue[i];\n}\ndelete [] pvalue;\n```\n- 对象的动态分配内存\n类似普通数据的动态分配：\n```c++\n#include <iostream>\nusing namespace std;\nclass Box{\n  public :\n  //创建对象时候调用\n    Box(){\n      cout<<\"构造函数\"<<endl;\n    }\n    //删除对象时候调用\n    ~Box(){\n      cout<<\"析构函数\"<<endl;\n    }\n};\nint main(){\n  //声明分配内存\n  Box* myBoxArray = new Box[4];\n  //释放内存\n  delete [] myBoxArray;\n  return 0;\n}\n```\n- 命名空间\n有点类似包名，或者xml中的命名空间的概念，就是通过一个完整路径定位，来便于区分不同地方的相同名称的函数和类。\n关键字`namespace`\n```c++\nnamespace namespace_name{\n  //代码声明\n}\n\n//调用的时候\nname::code;//code代表函数，或者变量\n//需要在文件头使用using namespace指令来说明使用的是哪个空间\n//类似于导入包，可以导入单个类，也可以导入整个包,代码中直接使用某个函数，如下\nusing std::cout;\n```\n命名空间可以定义在不同的文件中，成为不连续的命名空间。还可以嵌套。\n调用时候用`::`定位符\n```c++\nusing namespace name1::name2;\n```\n\n- 模板\nc++ 的模板也就是泛型，可以这么理解\n```c++\ntemplate <class type> ret-type func-name(parameter list){\n  //body code\n}\n```\n示例：\n```c++\n#include <iostream>\n#include <string>\n\nusing namespace std;\n\ntemplate <typename T>\ninline T const& Max (T const& a, T const& b) \n{ \n    return a < b ? b:a; \n} \nint main ()\n{\n \n    int i = 39;\n    int j = 20;\n    cout << \"Max(i, j): \" << Max(i, j) << endl; \n\n    double f1 = 13.5; \n    double f2 = 20.7; \n    cout << \"Max(f1, f2): \" << Max(f1, f2) << endl; \n\n    string s1 = \"Hello\"; \n    string s2 = \"World\"; \n    cout << \"Max(s1, s2): \" << Max(s1, s2) << endl; \n\n   return 0;\n}\n```\n以上是函数模板，类模板也差不多\n```C++\ntemplate <class type> class class-name {\n.\n.\n.\n}\n```\n\n- 信号处理\nC++ 中多了信号处理,在<csignal>文件中\n\n| 信号 | 描述 |\n|--|--|\n| SIGABRT | 程序的异常终止，如调用 **abort**。 |\n| SIGFPE | 错误的算术运算，比如除以零或导致溢出的操作。 |\n| SIGILL | 检测非法指令。 |\n| SIGINT | 接收到交互注意信号。 |\n| SIGSEGV | 非法访问内存。 |\n| SIGTERM | 发送到程序的终止请求。 |\n  \n- signal()函数\n```c++\nvoid (*signal (int sig,void (*func)(int)))(int);\n//第一个参数证书，代表信号编号，第二个是指针，指向信号处理函数。\n//示例：\n#include <iostream>\n#include <csignal>\n\nusing namespace std;\n\nvoid signalHandler( int signum )\n{\n    cout << \"Interrupt signal (\" << signum << \") received.\\n\";\n\n    // 清理并关闭\n    // 终止程序  \n\n   exit(signum);  \n\n}\n\nint main ()\n{\n    // 注册信号 SIGINT 和信号处理程序\n    signal(SIGINT, signalHandler);  \n\n    while(1){\n       cout << \"Going to sleep....\" << endl;\n       sleep(1);\n    }\n\n    return 0;\n}\n//此时，运行循环，用ctrl c来终端，就会被捕获信号。\n```\nraise()函数，生成信号\n`int raise(signal sig);`\n//sig表示信号编号，\n```C++\n#include <iostream>\n#include <csignal>\n\nusing namespace std;\n\nvoid signalHandler( int signum )\n{\n    cout << \"Interrupt signal (\" << signum << \") received.\\n\";\n\n    // 清理并关闭\n    // 终止程序 \n\n   exit(signum);  \n\n}\n\nint main ()\n{\n    int i = 0;\n    // 注册信号 SIGINT 和信号处理程序\n    signal(SIGINT, signalHandler);  \n\n    while(++i){\n       cout << \"Going to sleep....\" << endl;\n       if( i == 3 ){\n          raise( SIGINT);\n       }\n       sleep(1);\n    }\n\n    return 0;\n}\n```\n\n- 多线程\n多任务计算机分为两种，基于进程和基于线程。基于进程的多任务是程序的并发执行；基于线程的多任务是同一程序的片段并发执行。\n常见操作系统多是用POSIX编写线程。\n1、创建\n```c++\n#include <pthread.h>\npthread_create (thread,attr,start_routine,arg);\n//参数，thread为指向线程标识符的指针，attr为不透明的属性对象，用来设置线程属性，可以设置NULL\n//start_routine线程运行起始位置，创建线程就被执行。arg运行函数的参数，\n//可以NULL，但是必须把引用作为指针转换为void类型传入。\n\n//终止线程\npthread_exit(status);//一般不用显式调用，\n```\n\n实例：\n```c++\n#include <iostream>\n// 必须的头文件是\n#include <pthread.h>\n\nusing namespace std;\n\n#define NUM_THREADS 5\n\n// 线程的运行函数\nvoid* say_hello(void* args)\n{\n    cout << \"Hello Runoob！\" << endl;\n}\n\nint main()\n{\n    // 定义线程的 id 变量，多个变量使用数组\n    pthread_t tids[NUM_THREADS];\n    for(int i = 0; i < NUM_THREADS; ++i)\n    {\n        //参数依次是：创建的线程id，线程参数，调用的函数，传入的函数参数\n        int ret = pthread_create(&tids[i], NULL, say_hello, NULL);\n        if (ret != 0)\n        {\n           cout << \"pthread_create error: error_code=\" << ret << endl;\n        }\n    }\n    //等各个线程退出后，进程才结束，否则进程强制结束了，线程可能还没反应过来；\n    pthread_exit(NULL);\n}\n```\n连接和分离线程\n```c++\npthread_join(threadid,status)\npthread_detach(threadid)\n\n#include <iostream>\n#include <cstdlib>\n#include <pthread.h>\n#include <unistd.h>\n\nusing namespace std;\n\n#define NUM_THREADS     5\n\nvoid *wait(void *t)\n{\n   int i;\n   long tid;\n\n   tid = (long)t;\n\n   sleep(1);\n   cout << \"Sleeping in thread \" << endl;\n   cout << \"Thread with id : \" << tid << \"  ...exiting \" << endl;\n   pthread_exit(NULL);\n}\n\nint main ()\n{\n   int rc;\n   int i;\n   pthread_t threads[NUM_THREADS];\n   pthread_attr_t attr;\n   void *status;\n\n   // 初始化并设置线程为可连接的（joinable）\n   pthread_attr_init(&attr);\n   pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_JOINABLE);\n\n   for( i=0; i < NUM_THREADS; i++ ){\n      cout << \"main() : creating thread, \" << i << endl;\n      rc = pthread_create(&threads[i], NULL, wait, (void *)i );\n      if (rc){\n         cout << \"Error:unable to create thread,\" << rc << endl;\n         exit(-1);\n      }\n   }\n\n   // 删除属性，并等待其他线程\n   pthread_attr_destroy(&attr);\n   for( i=0; i < NUM_THREADS; i++ ){\n      rc = pthread_join(threads[i], &status);\n      if (rc){\n         cout << \"Error:unable to join,\" << rc << endl;\n         exit(-1);\n      }\n      cout << \"Main: completed thread id :\" << i ;\n      cout << \"  exiting with status :\" << status << endl;\n   }\n\n   cout << \"Main: program exiting.\" << endl;\n   pthread_exit(NULL);\n}\n```\n//效果\n```c++\nmain() : creating thread, 0\nmain() : creating thread, 1\nmain() : creating thread, 2\nmain() : creating thread, 3\nmain() : creating thread, 4\nSleeping in thread \nThread with id : 4  ...exiting \nSleeping in thread \nThread with id : 3  ...exiting \nSleeping in thread \nThread with id : 2  ...exiting \nSleeping in thread \nThread with id : 1  ...exiting \nSleeping in thread \nThread with id : 0  ...exiting \nMain: completed thread id :0  exiting with status :0\nMain: completed thread id :1  exiting with status :0\nMain: completed thread id :2  exiting with status :0\nMain: completed thread id :3  exiting with status :0\nMain: completed thread id :4  exiting with status :0\nMain: program exiting.\n```\n","source":"_posts/C++学习笔记.md","raw":"---\ntitle: C++学习笔记\ndate: 2016-12-20 15:28\ntags: \n    - C++\ncategories:\n    - 编程相关\n---\n\n# C++学习笔记\n\n鉴于C++可看作是C语言的扩展，或者说是面向对象的C语言版本。其语法方面多有类似指出，此笔记也就简要写出C++中与C不同和新增的语法部分。\n\n当然C与C++依然算作是两种语言，此处本人小白，亦不做辩论，只在此方便笔记而已。\n\n## 1、基本语法\n\n- 简介\n\n  linux下C语言用gcc，C++用g++编译；C++含有对象、类、方法、即使变量等概念。\n\nC++ 的预编译库包含了绝大多数C语言的库，自身格式略有不同\n\n```C++\n#include <iostream>\nusing namespace std;//使用标准的命名空间\n//C语言是<stdio.h>\nint main(){\n  cout << \"hello C++\";//输出语法是cout << ，有时候还要用endl;\n}\n```\n\n- 关键字\n\n| asm          | else      | new              | this     |\n| ------------ | --------- | ---------------- | -------- |\n| auto         | enum      | operator         | throw    |\n| bool         | explicit  | private          | true     |\n| break        | export    | protected        | try      |\n| case         | extern    | public           | typedef  |\n| catch        | false     | register         | typeid   |\n| char         | float     | reinterpret_cast | typename |\n| class        | for       | return           | union    |\n| const        | friend    | short            | unsigned |\n| const_cast   | goto      | signed           | using    |\n| continue     | if        | sizeof           | virtual  |\n| default      | inline    | static           | void     |\n| delete       | int       | static_cast      | volatile |\n| do           | long      | struct           | wchar_t  |\n| double       | mutable   | switch           | while    |\n| dynamic_cast | namespace | template         |          |\n\n- 三字字符\n\n| 三字符组 | 替换   |\n| ---- | ---- |\n| ??=  | #    |\n| ??/  | \\    |\n| ??'  | ^    |\n| ??(  | [    |\n| ??)  | ]    |\n| ??!  | \\|   |\n| ??<  | {    |\n| ??>  | }    |\n| ??-  | ~    |\n\n这些都是古老程序，当时为了表示键盘上没有的字符而设计的。\n\n- 数据类型\n\n  bool、char、int、float、double、void、wchar_t(宽字符型)，以及signed、unsigned、short、long等修饰符\n\n  - **typedef**定义新名称\n\n  ```C++\n  typedef int feet;//那么就可以用feet代替int类型定义变量了\n  ```\n\n  - 枚举\n\n  ```C++\n  enum enum_name{list of names} var-list;\n  //示例\n  enum color{red,green,blue} c;\n  c = blue;\n  //默认情况，第一个值=0，第二个=1，依次+1，也可以直接定义\n  enum shape {rectangle,circle=5,square} sp;\n  //那么此时，square=6，比上一个+1.\n  ```\n\n  const声明常量，成员变量自动初始化，char=‘\\0';默认初始值\n\n  有符号和无符号的修饰符\n\n  ```C++\n  #include　<iostream>\n  using namespace std;\n  int　main(){\n    short int i;//有符号短整数\n    unsigned short int j;//无符号的\n    j = 50000;//赋值\n    i = j;\n    cout << i << \" , \" << j;\n    return 0;\n  }\n  //输出结果\n  -15536 , 50000\n  ```\n\n- C++限定符\n\n  - const 常量修饰符\n  - volatile 告知编译器，其修饰的变量可能会被未知方式修改\n  - restrict修饰的指针，是一种唯一访问它所修饰对象的方式\n\n- C++存储类\n\n  auto、register、static、extern、mutable(用于对象修饰，允许对象成员代替常量，mutable成员可通过const成员修改)\n\n- String类\n\n  相比char字符类型，增加了许多常用便捷操作\n\n- 引用\n\n  引用不同于指针\n\n  - 没有空引用，可以用空指针\n  - 一旦引用被初始化为一个对象，就不能指向其他对象，指针可以随时变向\n  - 引用必须创建时初始化，指针可以随时\n\n  引用使用`&`符号\n\n  ```C++\n  //变量的声明初始化\n  int i = 17;\n  //声明变量i的引用\n  int& r = i;//成为r是初始化为i的整形引用\n  ```\n\n- 基本输入输出\n\n  I/O库\n\n  ```C++\n  <iostream>、<iomanip>、<fstream>等\n  ```\n\n  - 标准输出cout，输入cin\n\n  ```C++\n  #include <iostream>\n  using namespace std;\n  int main(){\n    char str[] = \"Hello C++\";\n    cout << \"Value of Str is : \" << str << endl;\n    char name[30];\n    cout << \"Please input your name\";\n    cin >> name;\n    cout << \"your name is : \"<<name<<endl;//endl  --  end line;\n  }\n  ```\n\n  - 标准错误流cerr，日志流clog\n\n## 2、面向对象\n\n- 对象类\n\n  **class**关键字\n\n  ```C++\n  class Box {\n    public ://还有private、protected，friend有点不同\n    \tdouble length;\n    \tdouble breadth;\n    \tdouble height;\n  };\n  //声明类对象\n  Box box1;\n  //然后用.符号访问类成员\n  box1.length\n  ```\n\n- 继承\n\n  C++可以多继承\n\n  ```C++\n  //格式\n  class derived-class : access-specifier base-class\n  //示例\n  class Rectangle : public Shape{\n    ...\n  }\n  ```\n\n  权限修饰符public、private、protected\n\n  | 访问   | public | protected | private |\n  | ---- | ------ | --------- | ------- |\n  | 同一个类 | yes    | yes       | yes     |\n  | 派生类  | yes    | yes       | no      |\n  | 外部类  | yes    | no        | no      |\n\n  派生类可以继承所有基类的方法，例外\n\n  - 基类的构造函数、析构函数和拷贝构造函数\n  - 积累的重载运算符(就是重新定义基本的运算符)\n  - 基类的友元函数(friend修饰的函数)\n\n  **注意**一般继承类型选择public，少用private和protected，因为使用对应的修饰符，基类的成员在派生类中将变成对应修饰符的权限级别。如使用private，则基类的public和protected成员，在派生类也会private化。\n\n  ```C++\n  class <sub-name>:<visit><base1>,<visit><base2>\n    {\n      ...\n    };\n  //示例\n  class Rectangle:public Shape,public PaintCost{\n    ...\n  };\n  ```\n\n- 重载运算符和重载函数\n\n  函数重载也就是Java之类的面向对象里的方法重载，既同一个方法名，不同的方法签名。\n\n  - 运算符重载\n\n  ```C++\n  Box operator+(const Box&);\n  //格式如上，必须有operator关键字，内部传入引用\n  //如此box1+box2就被如下重载定义\n  Box operator+(const Box& b){\n    Box box;\n    box.length = this->length + b.length;\n    ...\n  }\n  ```\n\n   下面是可重载的运算符列表：\n\n  | +    | -    | *    | /      | %      | ^         |\n  | ---- | ---- | ---- | ------ | ------ | --------- |\n  | &    | \\|   | ~    | !      | ,      | =         |\n  | <    | >    | <=   | \\>=     | ++     | --        |\n  | <<   | \\>>   | ==   | !=     | &&     | \\|\\|      |\n  | +=   | -=   | /=   | %=     | ^=     | &=        |\n  | \\|=  | *=   | <<=  | \\>>=    | []     | ()        |\n  | ->   | ->*  | new  | new [] | delete | delete [] |\n\n  下面是不可重载的运算符列表：\n\n  `::`、`.*`、`.`、`?:`\n\n- 多态\n\n  面向对象编程语言三大特性，封装、继承、多态。\n\n  所谓多态，也就是一个方法或属性，在不同的派生类那里，有不同的具体表现方式。\n\n  但是C++语言里，需要派生类实现的抽象方法，需要使用关键字`virtual`在基类中修饰，不然的话，子类调用的仍然还是父类方法，而不是自己的具体实现：\n\n  ```C++\n  class Shape{\n    ...\n    public:\n    ...\n    //此处若不用virtual修饰，那么子类实现该方法，调用时候，就依然是该方法，而不是子类自己的实现\n    virtual int area(){\n  \tcout << \"Parent class area:\"<<endl;\n      return 0;\n    }\n  }\n  //示例子类\n  class Circle{\n    ...\n    public :\n    ...\n    int area(){\n      cout << \"Circle class area:\" << end;\n      return 0;\n    }\n  }\n  int main(){\n    Shape *shape;\n    Circle circle;\n    //存储circle对象地址\n    shape = circle;\n    //调用,如果Shape类area()函数不用virtual的修饰，那么输出的只能是Shape类的方法，而不是子类Cirle的area()函数。\n    shape->area();\n    return 0;\n  }\n  ```\n\n  使用virtual修饰的函数成为虚函数，如果虚函数没有方法体，则成为纯虚函数。\n\n  类似于Java中的抽象方法。\n\n- 数据抽象与数据封装\n\n  数据抽象就是私有化数据变量，推外提供set、get方法。数据封装，也就是类似于C中的结构体，或者java中的bean对象类，封装一组数据和函数，成为一个实体类。\n\n  **抽象类**一个含有纯虚函数的类。也称为接口。\n\n## 3、高级教程\n- 文件和流\n\n`iostream`标准库，提供了`cin`、`cout`方法，而文件标准库`fstream`提供了三种数据类型\n`ofstream`、`ifstream`、`fstream`分别对应的是输出、输入、和同时具备输入输出的类型。\n\n- 打开文件\n```C++\n//参数表示，文件路径和名称，读取方式\nvoid open(const char *filename,ios::openmode mode);\n```\n|模式标志|描述|\n|--|--|\n|ios::app|追加模式|\n|ios::ate|打开文件，定位到末尾|\n|ios::in|读取|\n|ios::out|写入|\n|ios::trunc|若文件存在，打开前截断为0字节|\n\n这些模式可以结合使用，`::`符号为**域**定位符号\n```C++\nofstream outfile;\noutfile.open(\"file.dat\",ios::out | ios::trunc);\n```\n- 关闭文件\n\n`close()`函数是fstream、ifsteram、ofstream对象的一个成员。\n```C++\n#include <fstream>\n#include <iostream>\nusing namespace std;\n \nint main ()\n{\n    \n   char data[100];\n\n   // 以写模式打开文件\n   ofstream outfile;\n   outfile.open(\"afile.dat\");\n\n   cout << \"Writing to the file\" << endl;\n   cout << \"Enter your name: \"; \n   cin.getline(data, 100);\n\n   // 向文件写入用户输入的数据\n   outfile << data << endl;\n\n   cout << \"Enter your age: \"; \n   cin >> data;\n   cin.ignore();\n   \n   // 再次向文件写入用户输入的数据\n   outfile << data << endl;\n\n   // 关闭打开的文件\n   outfile.close();\n\n   // 以读模式打开文件\n   ifstream infile; \n   infile.open(\"afile.dat\"); \n \n   cout << \"Reading from the file\" << endl; \n   infile >> data; \n\n   // 在屏幕上写入数据\n   cout << data << endl;\n   \n   // 再次从文件读取数据，并显示它\n   infile >> data; \n   cout << data << endl; \n\n   // 关闭打开的文件\n   infile.close();\n\n   return 0;\n}\n```\n\n- 文件位置指针\n\nistream和ostream都提供了对文件重新定位的函数功能。这些成员函数包括关于 istream 的 seekg（\"seek get\"）和关于 ostream 的 seekp（\"seek put\"）。\nseekg 和 seekp 的参数通常是一个长整型。第二个参数可以用于指定查找方向。查找方向可以是 ios::beg（默认的，从流的开头开始定位），也可以是 ios::cur（从流的当前位置开始定位），也可以是 ios::end（从流的末尾开始定位）。\n```c++\n// 定位到 fileObject 的第 n 个字节（假设是 ios::beg）\nfileObject.seekg( n );\n\n// 把文件的读指针从 fileObject 当前位置向后移 n 个字节\nfileObject.seekg( n, ios::cur );\n\n// 把文件的读指针从 fileObject 末尾往回移 n 个字节\nfileObject.seekg( n, ios::end );\n\n// 定位到 fileObject 的末尾\nfileObject.seekg( 0, ios::end );\n```\n\n- 异常处理\ntry...catch ，throw,好像C++中没有throws关键字\n\n| 异常 | 描述 |\n|--|--|\n| **std::exception** | 该异常是所有标准 C++ 异常的父类。 |\n| std::bad_alloc | 该异常可以通过 **new** 抛出。 |\n| std::bad_cast | 该异常可以通过 **dynamic_cast** 抛出。 |\n| std::bad_exception | 这在处理 C++ 程序中无法预期的异常时非常有用。 |\n| std::bad_typeid | 该异常可以通过 **typeid** 抛出。 |\n| **std::logic_error** | 理论上可以通过读取代码来检测到的异常。 |\n| std::domain_error | 当使用了一个无效的数学域时，会抛出该异常。 |\n| std::invalid_argument | 当使用了无效的参数时，会抛出该异常。 |\n| std::length_error | 当创建了太长的 std::string 时，会抛出该异常。 |\n| std::out_of_range | 该异常可以通过方法抛出，例如 std::vector 和 std::bitset<>::operator[]()。 |\n| **std::runtime_error** | 理论上不可以通过读取代码来检测到的异常。 |\n| std::overflow_error | 当发生数学上溢时，会抛出该异常。 |\n| std::range_error | 当尝试存储超出范围的值时，会抛出该异常。 |\n| std::underflow_error | 当发生数学下溢时，会抛出该异常。 |\n也可以通过继承exception类，重载其`what()`方法，来自定义异常类\n```C++\n#include <iostream>\n#include <exception>\nusing namespace std;\n\nstruct MyException : public exception\n{\n  const char * what () const throw ()\n  {\n    return \"C++ Exception\";\n  }\n};\n \nint main()\n{\n  try\n  {\n    throw MyException();\n  }\n  catch(MyException& e)\n  {\n    std::cout << \"MyException caught\" << std::endl;\n    std::cout << e.what() << std::endl;\n  }\n  catch(std::exception& e)\n  {\n    //其他的错误\n  }\n}\n```\n\n- 动态内存\n    - 堆，程序中未使用，运行时动态分配的内存\n\n    - 栈，函数内部声明的变量，都在此。\n\nnew 和 delete 运算符，用于动态分配内存。\n`new data-type`\n```C++\ndouble* pvalue = NULL;//初始化为null的指针\npvalue = new double;//为变量请求内存，但是可能不一定有内存可分配，需要检查\nif(!(pvalue = new double)){\n  cout << \"Error : out of memory.\" << endl;\n  exit(1);\n}\n```\nC 语言中有`malloc()`函数，但是C++ 最好用new，因为它可以分配内存，而且还创建了对象。\n```C++\ndelete pvalue;//释放pvalue所指向的内存。\n//如下示例\n#include <iostream>\nusing namespace std;\n\nint main ()\n{\n   double* pvalue  = NULL; // 初始化为 null 的指针\n   pvalue  = new double;   // 为变量请求内存\n \n   *pvalue = 29494.99;     // 在分配的地址存储值\n   cout << \"Value of pvalue : \" << *pvalue << endl;\n\n   delete pvalue;         // 释放内存\n\n   return 0;\n}\n```\n- 数组动态分配内存\n```C++\nchar* pvalue = NULL;//初始化指针为null\npvalue = new char[20];//请求内存\ndelete [] pvalue;//删除pvalue指向的数组\n\nint ROW = 2;\nint COL = 3;\ndouble **pvalue = new double* [ROW];//为行分配内存\n//为列分配内存\nfor(int i = 0;i<COL;i++){\n  pvalue[i] = new double[COL];\n}\n//释放内存\nfor(int i = 0;i<COL;i++){\n  delete[] pvalue[i];\n}\ndelete [] pvalue;\n```\n- 对象的动态分配内存\n类似普通数据的动态分配：\n```c++\n#include <iostream>\nusing namespace std;\nclass Box{\n  public :\n  //创建对象时候调用\n    Box(){\n      cout<<\"构造函数\"<<endl;\n    }\n    //删除对象时候调用\n    ~Box(){\n      cout<<\"析构函数\"<<endl;\n    }\n};\nint main(){\n  //声明分配内存\n  Box* myBoxArray = new Box[4];\n  //释放内存\n  delete [] myBoxArray;\n  return 0;\n}\n```\n- 命名空间\n有点类似包名，或者xml中的命名空间的概念，就是通过一个完整路径定位，来便于区分不同地方的相同名称的函数和类。\n关键字`namespace`\n```c++\nnamespace namespace_name{\n  //代码声明\n}\n\n//调用的时候\nname::code;//code代表函数，或者变量\n//需要在文件头使用using namespace指令来说明使用的是哪个空间\n//类似于导入包，可以导入单个类，也可以导入整个包,代码中直接使用某个函数，如下\nusing std::cout;\n```\n命名空间可以定义在不同的文件中，成为不连续的命名空间。还可以嵌套。\n调用时候用`::`定位符\n```c++\nusing namespace name1::name2;\n```\n\n- 模板\nc++ 的模板也就是泛型，可以这么理解\n```c++\ntemplate <class type> ret-type func-name(parameter list){\n  //body code\n}\n```\n示例：\n```c++\n#include <iostream>\n#include <string>\n\nusing namespace std;\n\ntemplate <typename T>\ninline T const& Max (T const& a, T const& b) \n{ \n    return a < b ? b:a; \n} \nint main ()\n{\n \n    int i = 39;\n    int j = 20;\n    cout << \"Max(i, j): \" << Max(i, j) << endl; \n\n    double f1 = 13.5; \n    double f2 = 20.7; \n    cout << \"Max(f1, f2): \" << Max(f1, f2) << endl; \n\n    string s1 = \"Hello\"; \n    string s2 = \"World\"; \n    cout << \"Max(s1, s2): \" << Max(s1, s2) << endl; \n\n   return 0;\n}\n```\n以上是函数模板，类模板也差不多\n```C++\ntemplate <class type> class class-name {\n.\n.\n.\n}\n```\n\n- 信号处理\nC++ 中多了信号处理,在<csignal>文件中\n\n| 信号 | 描述 |\n|--|--|\n| SIGABRT | 程序的异常终止，如调用 **abort**。 |\n| SIGFPE | 错误的算术运算，比如除以零或导致溢出的操作。 |\n| SIGILL | 检测非法指令。 |\n| SIGINT | 接收到交互注意信号。 |\n| SIGSEGV | 非法访问内存。 |\n| SIGTERM | 发送到程序的终止请求。 |\n  \n- signal()函数\n```c++\nvoid (*signal (int sig,void (*func)(int)))(int);\n//第一个参数证书，代表信号编号，第二个是指针，指向信号处理函数。\n//示例：\n#include <iostream>\n#include <csignal>\n\nusing namespace std;\n\nvoid signalHandler( int signum )\n{\n    cout << \"Interrupt signal (\" << signum << \") received.\\n\";\n\n    // 清理并关闭\n    // 终止程序  \n\n   exit(signum);  \n\n}\n\nint main ()\n{\n    // 注册信号 SIGINT 和信号处理程序\n    signal(SIGINT, signalHandler);  \n\n    while(1){\n       cout << \"Going to sleep....\" << endl;\n       sleep(1);\n    }\n\n    return 0;\n}\n//此时，运行循环，用ctrl c来终端，就会被捕获信号。\n```\nraise()函数，生成信号\n`int raise(signal sig);`\n//sig表示信号编号，\n```C++\n#include <iostream>\n#include <csignal>\n\nusing namespace std;\n\nvoid signalHandler( int signum )\n{\n    cout << \"Interrupt signal (\" << signum << \") received.\\n\";\n\n    // 清理并关闭\n    // 终止程序 \n\n   exit(signum);  \n\n}\n\nint main ()\n{\n    int i = 0;\n    // 注册信号 SIGINT 和信号处理程序\n    signal(SIGINT, signalHandler);  \n\n    while(++i){\n       cout << \"Going to sleep....\" << endl;\n       if( i == 3 ){\n          raise( SIGINT);\n       }\n       sleep(1);\n    }\n\n    return 0;\n}\n```\n\n- 多线程\n多任务计算机分为两种，基于进程和基于线程。基于进程的多任务是程序的并发执行；基于线程的多任务是同一程序的片段并发执行。\n常见操作系统多是用POSIX编写线程。\n1、创建\n```c++\n#include <pthread.h>\npthread_create (thread,attr,start_routine,arg);\n//参数，thread为指向线程标识符的指针，attr为不透明的属性对象，用来设置线程属性，可以设置NULL\n//start_routine线程运行起始位置，创建线程就被执行。arg运行函数的参数，\n//可以NULL，但是必须把引用作为指针转换为void类型传入。\n\n//终止线程\npthread_exit(status);//一般不用显式调用，\n```\n\n实例：\n```c++\n#include <iostream>\n// 必须的头文件是\n#include <pthread.h>\n\nusing namespace std;\n\n#define NUM_THREADS 5\n\n// 线程的运行函数\nvoid* say_hello(void* args)\n{\n    cout << \"Hello Runoob！\" << endl;\n}\n\nint main()\n{\n    // 定义线程的 id 变量，多个变量使用数组\n    pthread_t tids[NUM_THREADS];\n    for(int i = 0; i < NUM_THREADS; ++i)\n    {\n        //参数依次是：创建的线程id，线程参数，调用的函数，传入的函数参数\n        int ret = pthread_create(&tids[i], NULL, say_hello, NULL);\n        if (ret != 0)\n        {\n           cout << \"pthread_create error: error_code=\" << ret << endl;\n        }\n    }\n    //等各个线程退出后，进程才结束，否则进程强制结束了，线程可能还没反应过来；\n    pthread_exit(NULL);\n}\n```\n连接和分离线程\n```c++\npthread_join(threadid,status)\npthread_detach(threadid)\n\n#include <iostream>\n#include <cstdlib>\n#include <pthread.h>\n#include <unistd.h>\n\nusing namespace std;\n\n#define NUM_THREADS     5\n\nvoid *wait(void *t)\n{\n   int i;\n   long tid;\n\n   tid = (long)t;\n\n   sleep(1);\n   cout << \"Sleeping in thread \" << endl;\n   cout << \"Thread with id : \" << tid << \"  ...exiting \" << endl;\n   pthread_exit(NULL);\n}\n\nint main ()\n{\n   int rc;\n   int i;\n   pthread_t threads[NUM_THREADS];\n   pthread_attr_t attr;\n   void *status;\n\n   // 初始化并设置线程为可连接的（joinable）\n   pthread_attr_init(&attr);\n   pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_JOINABLE);\n\n   for( i=0; i < NUM_THREADS; i++ ){\n      cout << \"main() : creating thread, \" << i << endl;\n      rc = pthread_create(&threads[i], NULL, wait, (void *)i );\n      if (rc){\n         cout << \"Error:unable to create thread,\" << rc << endl;\n         exit(-1);\n      }\n   }\n\n   // 删除属性，并等待其他线程\n   pthread_attr_destroy(&attr);\n   for( i=0; i < NUM_THREADS; i++ ){\n      rc = pthread_join(threads[i], &status);\n      if (rc){\n         cout << \"Error:unable to join,\" << rc << endl;\n         exit(-1);\n      }\n      cout << \"Main: completed thread id :\" << i ;\n      cout << \"  exiting with status :\" << status << endl;\n   }\n\n   cout << \"Main: program exiting.\" << endl;\n   pthread_exit(NULL);\n}\n```\n//效果\n```c++\nmain() : creating thread, 0\nmain() : creating thread, 1\nmain() : creating thread, 2\nmain() : creating thread, 3\nmain() : creating thread, 4\nSleeping in thread \nThread with id : 4  ...exiting \nSleeping in thread \nThread with id : 3  ...exiting \nSleeping in thread \nThread with id : 2  ...exiting \nSleeping in thread \nThread with id : 1  ...exiting \nSleeping in thread \nThread with id : 0  ...exiting \nMain: completed thread id :0  exiting with status :0\nMain: completed thread id :1  exiting with status :0\nMain: completed thread id :2  exiting with status :0\nMain: completed thread id :3  exiting with status :0\nMain: completed thread id :4  exiting with status :0\nMain: program exiting.\n```\n","slug":"C++学习笔记","published":1,"updated":"2017-03-31T08:34:07.179Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ndxcci000l88owlbg8pxz2","content":"<h1 id=\"C-学习笔记\"><a href=\"#C-学习笔记\" class=\"headerlink\" title=\"C++学习笔记\"></a>C++学习笔记</h1><p>鉴于C++可看作是C语言的扩展，或者说是面向对象的C语言版本。其语法方面多有类似指出，此笔记也就简要写出C++中与C不同和新增的语法部分。</p>\n<p>当然C与C++依然算作是两种语言，此处本人小白，亦不做辩论，只在此方便笔记而已。</p>\n<h2 id=\"1、基本语法\"><a href=\"#1、基本语法\" class=\"headerlink\" title=\"1、基本语法\"></a>1、基本语法</h2><ul>\n<li><p>简介</p>\n<p>linux下C语言用gcc，C++用g++编译；C++含有对象、类、方法、即使变量等概念。</p>\n</li>\n</ul>\n<p>C++ 的预编译库包含了绝大多数C语言的库，自身格式略有不同</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;<span class=\"comment\">//使用标准的命名空间</span></div><div class=\"line\"><span class=\"comment\">//C语言是&lt;stdio.h&gt;</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"hello C++\"</span>;<span class=\"comment\">//输出语法是cout &lt;&lt; ，有时候还要用endl;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>关键字</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>asm</th>\n<th>else</th>\n<th>new</th>\n<th>this</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>auto</td>\n<td>enum</td>\n<td>operator</td>\n<td>throw</td>\n</tr>\n<tr>\n<td>bool</td>\n<td>explicit</td>\n<td>private</td>\n<td>true</td>\n</tr>\n<tr>\n<td>break</td>\n<td>export</td>\n<td>protected</td>\n<td>try</td>\n</tr>\n<tr>\n<td>case</td>\n<td>extern</td>\n<td>public</td>\n<td>typedef</td>\n</tr>\n<tr>\n<td>catch</td>\n<td>false</td>\n<td>register</td>\n<td>typeid</td>\n</tr>\n<tr>\n<td>char</td>\n<td>float</td>\n<td>reinterpret_cast</td>\n<td>typename</td>\n</tr>\n<tr>\n<td>class</td>\n<td>for</td>\n<td>return</td>\n<td>union</td>\n</tr>\n<tr>\n<td>const</td>\n<td>friend</td>\n<td>short</td>\n<td>unsigned</td>\n</tr>\n<tr>\n<td>const_cast</td>\n<td>goto</td>\n<td>signed</td>\n<td>using</td>\n</tr>\n<tr>\n<td>continue</td>\n<td>if</td>\n<td>sizeof</td>\n<td>virtual</td>\n</tr>\n<tr>\n<td>default</td>\n<td>inline</td>\n<td>static</td>\n<td>void</td>\n</tr>\n<tr>\n<td>delete</td>\n<td>int</td>\n<td>static_cast</td>\n<td>volatile</td>\n</tr>\n<tr>\n<td>do</td>\n<td>long</td>\n<td>struct</td>\n<td>wchar_t</td>\n</tr>\n<tr>\n<td>double</td>\n<td>mutable</td>\n<td>switch</td>\n<td>while</td>\n</tr>\n<tr>\n<td>dynamic_cast</td>\n<td>namespace</td>\n<td>template</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>三字字符</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>三字符组</th>\n<th>替换</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>??=</td>\n<td>#</td>\n</tr>\n<tr>\n<td>??/</td>\n<td>\\</td>\n</tr>\n<tr>\n<td>??’</td>\n<td>^</td>\n</tr>\n<tr>\n<td>??(</td>\n<td>[</td>\n</tr>\n<tr>\n<td>??)</td>\n<td>]</td>\n</tr>\n<tr>\n<td>??!</td>\n<td>\\</td>\n<td></td>\n</tr>\n<tr>\n<td>??&lt;</td>\n<td>{</td>\n</tr>\n<tr>\n<td>??&gt;</td>\n<td>}</td>\n</tr>\n<tr>\n<td>??-</td>\n<td>~</td>\n</tr>\n</tbody>\n</table>\n<p>这些都是古老程序，当时为了表示键盘上没有的字符而设计的。</p>\n<ul>\n<li><p>数据类型</p>\n<p>bool、char、int、float、double、void、wchar_t(宽字符型)，以及signed、unsigned、short、long等修饰符</p>\n<ul>\n<li><strong>typedef</strong>定义新名称</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">int</span> feet;<span class=\"comment\">//那么就可以用feet代替int类型定义变量了</span></div></pre></td></tr></table></figure>\n<ul>\n<li>枚举</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">enum</span> enum_name&#123;<span class=\"built_in\">list</span> of names&#125; var-<span class=\"built_in\">list</span>;</div><div class=\"line\"><span class=\"comment\">//示例</span></div><div class=\"line\"><span class=\"keyword\">enum</span> color&#123;red,green,blue&#125; c;</div><div class=\"line\">c = blue;</div><div class=\"line\"><span class=\"comment\">//默认情况，第一个值=0，第二个=1，依次+1，也可以直接定义</span></div><div class=\"line\"><span class=\"keyword\">enum</span> shape &#123;rectangle,circle=<span class=\"number\">5</span>,square&#125; sp;</div><div class=\"line\"><span class=\"comment\">//那么此时，square=6，比上一个+1.</span></div></pre></td></tr></table></figure>\n<p>const声明常量，成员变量自动初始化，char=‘\\0’;默认初始值</p>\n<p>有符号和无符号的修饰符</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>　<span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>　<span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">short</span> <span class=\"keyword\">int</span> i;<span class=\"comment\">//有符号短整数</span></div><div class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">short</span> <span class=\"keyword\">int</span> j;<span class=\"comment\">//无符号的</span></div><div class=\"line\">  j = <span class=\"number\">50000</span>;<span class=\"comment\">//赋值</span></div><div class=\"line\">  i = j;</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; i &lt;&lt; <span class=\"string\">\" , \"</span> &lt;&lt; j;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//输出结果</span></div><div class=\"line\"><span class=\"number\">-15536</span> , <span class=\"number\">50000</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>C++限定符</p>\n<ul>\n<li>const 常量修饰符</li>\n<li>volatile 告知编译器，其修饰的变量可能会被未知方式修改</li>\n<li>restrict修饰的指针，是一种唯一访问它所修饰对象的方式</li>\n</ul>\n</li>\n<li><p>C++存储类</p>\n<p>auto、register、static、extern、mutable(用于对象修饰，允许对象成员代替常量，mutable成员可通过const成员修改)</p>\n</li>\n<li><p>String类</p>\n<p>相比char字符类型，增加了许多常用便捷操作</p>\n</li>\n<li><p>引用</p>\n<p>引用不同于指针</p>\n<ul>\n<li>没有空引用，可以用空指针</li>\n<li>一旦引用被初始化为一个对象，就不能指向其他对象，指针可以随时变向</li>\n<li>引用必须创建时初始化，指针可以随时</li>\n</ul>\n<p>引用使用<code>&amp;</code>符号</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//变量的声明初始化</span></div><div class=\"line\"><span class=\"keyword\">int</span> i = <span class=\"number\">17</span>;</div><div class=\"line\"><span class=\"comment\">//声明变量i的引用</span></div><div class=\"line\"><span class=\"keyword\">int</span>&amp; r = i;<span class=\"comment\">//成为r是初始化为i的整形引用</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>基本输入输出</p>\n<p>I/O库</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;iostream&gt;、&lt;iomanip&gt;、&lt;fstream&gt;等</div></pre></td></tr></table></figure>\n<ul>\n<li>标准输出cout，输入cin</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">char</span> str[] = <span class=\"string\">\"Hello C++\"</span>;</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Value of Str is : \"</span> &lt;&lt; str &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">  <span class=\"keyword\">char</span> name[<span class=\"number\">30</span>];</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Please input your name\"</span>;</div><div class=\"line\">  <span class=\"built_in\">cin</span> &gt;&gt; name;</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"your name is : \"</span>&lt;&lt;name&lt;&lt;<span class=\"built_in\">endl</span>;<span class=\"comment\">//endl  --  end line;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>标准错误流cerr，日志流clog</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2、面向对象\"><a href=\"#2、面向对象\" class=\"headerlink\" title=\"2、面向对象\"></a>2、面向对象</h2><ul>\n<li><p>对象类</p>\n<p><strong>class</strong>关键字</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Box &#123;</div><div class=\"line\">  <span class=\"keyword\">public</span> :<span class=\"comment\">//还有private、protected，friend有点不同</span></div><div class=\"line\">  \t<span class=\"keyword\">double</span> length;</div><div class=\"line\">  \t<span class=\"keyword\">double</span> breadth;</div><div class=\"line\">  \t<span class=\"keyword\">double</span> height;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">//声明类对象</span></div><div class=\"line\">Box box1;</div><div class=\"line\"><span class=\"comment\">//然后用.符号访问类成员</span></div><div class=\"line\">box1.length</div></pre></td></tr></table></figure>\n</li>\n<li><p>继承</p>\n<p>C++可以多继承</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//格式</span></div><div class=\"line\"><span class=\"keyword\">class</span> derived-<span class=\"keyword\">class</span> : access-specifier base-<span class=\"keyword\">class</span></div><div class=\"line\"><span class=\"comment\">//示例</span></div><div class=\"line\"><span class=\"keyword\">class</span> Rectangle : <span class=\"keyword\">public</span> Shape&#123;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>权限修饰符public、private、protected</p>\n<p>| 访问   | public | protected | private |<br>| —- | —— | ——— | ——- |<br>| 同一个类 | yes    | yes       | yes     |<br>| 派生类  | yes    | yes       | no      |<br>| 外部类  | yes    | no        | no      |</p>\n<p>派生类可以继承所有基类的方法，例外</p>\n<ul>\n<li>基类的构造函数、析构函数和拷贝构造函数</li>\n<li>积累的重载运算符(就是重新定义基本的运算符)</li>\n<li>基类的友元函数(friend修饰的函数)</li>\n</ul>\n<p><strong>注意</strong>一般继承类型选择public，少用private和protected，因为使用对应的修饰符，基类的成员在派生类中将变成对应修饰符的权限级别。如使用private，则基类的public和protected成员，在派生类也会private化。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> &lt;sub-name&gt;:&lt;visit&gt;&lt;base1&gt;,&lt;visit&gt;&lt;base2&gt;</div><div class=\"line\">  &#123;</div><div class=\"line\">    ...</div><div class=\"line\">  &#125;;</div><div class=\"line\"><span class=\"comment\">//示例</span></div><div class=\"line\"><span class=\"keyword\">class</span> Rectangle:<span class=\"keyword\">public</span> Shape,<span class=\"keyword\">public</span> PaintCost&#123;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>重载运算符和重载函数</p>\n<p>函数重载也就是Java之类的面向对象里的方法重载，既同一个方法名，不同的方法签名。</p>\n<ul>\n<li>运算符重载</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Box <span class=\"keyword\">operator</span>+(<span class=\"keyword\">const</span> Box&amp;);</div><div class=\"line\"><span class=\"comment\">//格式如上，必须有operator关键字，内部传入引用</span></div><div class=\"line\"><span class=\"comment\">//如此box1+box2就被如下重载定义</span></div><div class=\"line\">Box <span class=\"keyword\">operator</span>+(<span class=\"keyword\">const</span> Box&amp; b)&#123;</div><div class=\"line\">  Box box;</div><div class=\"line\">  box.length = <span class=\"keyword\">this</span>-&gt;length + b.length;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p> 下面是可重载的运算符列表：</p>\n<p>| +    | -    | <em>    | /      | %      | ^         |<br>| —- | —- | —- | —— | —— | ——— |<br>| &amp;    | |   | ~    | !      | ,      | =         |<br>| &lt;    | &gt;    | &lt;=   | >=     | ++     | –        |<br>| &lt;&lt;   | >&gt;   | ==   | !=     | &amp;&amp;     | ||      |<br>| +=   | -=   | /=   | %=     | ^=     | &amp;=        |<br>| |=  | </em>=   | &lt;&lt;=  | >&gt;=    | []     | ()        |<br>| -&gt;   | -&gt;*  | new  | new [] | delete | delete [] |</p>\n<p>下面是不可重载的运算符列表：</p>\n<p><code>::</code>、<code>.*</code>、<code>.</code>、<code>?:</code></p>\n</li>\n<li><p>多态</p>\n<p>面向对象编程语言三大特性，封装、继承、多态。</p>\n<p>所谓多态，也就是一个方法或属性，在不同的派生类那里，有不同的具体表现方式。</p>\n<p>但是C++语言里，需要派生类实现的抽象方法，需要使用关键字<code>virtual</code>在基类中修饰，不然的话，子类调用的仍然还是父类方法，而不是自己的具体实现：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Shape&#123;</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"keyword\">public</span>:</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"comment\">//此处若不用virtual修饰，那么子类实现该方法，调用时候，就依然是该方法，而不是子类自己的实现</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">area</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Parent class area:\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//示例子类</span></div><div class=\"line\"><span class=\"keyword\">class</span> Circle&#123;</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"keyword\">public</span> :</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">area</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Circle class area:\"</span> &lt;&lt; end;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  Shape *shape;</div><div class=\"line\">  Circle circle;</div><div class=\"line\">  <span class=\"comment\">//存储circle对象地址</span></div><div class=\"line\">  shape = circle;</div><div class=\"line\">  <span class=\"comment\">//调用,如果Shape类area()函数不用virtual的修饰，那么输出的只能是Shape类的方法，而不是子类Cirle的area()函数。</span></div><div class=\"line\">  shape-&gt;area();</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用virtual修饰的函数成为虚函数，如果虚函数没有方法体，则成为纯虚函数。</p>\n<p>类似于Java中的抽象方法。</p>\n</li>\n<li><p>数据抽象与数据封装</p>\n<p>数据抽象就是私有化数据变量，推外提供set、get方法。数据封装，也就是类似于C中的结构体，或者java中的bean对象类，封装一组数据和函数，成为一个实体类。</p>\n<p><strong>抽象类</strong>一个含有纯虚函数的类。也称为接口。</p>\n</li>\n</ul>\n<h2 id=\"3、高级教程\"><a href=\"#3、高级教程\" class=\"headerlink\" title=\"3、高级教程\"></a>3、高级教程</h2><ul>\n<li>文件和流</li>\n</ul>\n<p><code>iostream</code>标准库，提供了<code>cin</code>、<code>cout</code>方法，而文件标准库<code>fstream</code>提供了三种数据类型<br><code>ofstream</code>、<code>ifstream</code>、<code>fstream</code>分别对应的是输出、输入、和同时具备输入输出的类型。</p>\n<ul>\n<li>打开文件<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//参数表示，文件路径和名称，读取方式</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">open</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *filename,ios::openmode mode)</span></span>;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>模式标志</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ios::app</td>\n<td>追加模式</td>\n</tr>\n<tr>\n<td>ios::ate</td>\n<td>打开文件，定位到末尾</td>\n</tr>\n<tr>\n<td>ios::in</td>\n<td>读取</td>\n</tr>\n<tr>\n<td>ios::out</td>\n<td>写入</td>\n</tr>\n<tr>\n<td>ios::trunc</td>\n<td>若文件存在，打开前截断为0字节</td>\n</tr>\n</tbody>\n</table>\n<p>这些模式可以结合使用，<code>::</code>符号为<strong>域</strong>定位符号<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ofstream outfile;</div><div class=\"line\">outfile.open(<span class=\"string\">\"file.dat\"</span>,ios::out | ios::trunc);</div></pre></td></tr></table></figure></p>\n<ul>\n<li>关闭文件</li>\n</ul>\n<p><code>close()</code>函数是fstream、ifsteram、ofstream对象的一个成员。<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    </div><div class=\"line\">   <span class=\"keyword\">char</span> data[<span class=\"number\">100</span>];</div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">// 以写模式打开文件</span></div><div class=\"line\">   ofstream outfile;</div><div class=\"line\">   outfile.open(<span class=\"string\">\"afile.dat\"</span>);</div><div class=\"line\"></div><div class=\"line\">   <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Writing to the file\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">   <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Enter your name: \"</span>; </div><div class=\"line\">   <span class=\"built_in\">cin</span>.getline(data, <span class=\"number\">100</span>);</div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">// 向文件写入用户输入的数据</span></div><div class=\"line\">   outfile &lt;&lt; data &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Enter your age: \"</span>; </div><div class=\"line\">   <span class=\"built_in\">cin</span> &gt;&gt; data;</div><div class=\"line\">   <span class=\"built_in\">cin</span>.ignore();</div><div class=\"line\">   </div><div class=\"line\">   <span class=\"comment\">// 再次向文件写入用户输入的数据</span></div><div class=\"line\">   outfile &lt;&lt; data &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">// 关闭打开的文件</span></div><div class=\"line\">   outfile.close();</div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">// 以读模式打开文件</span></div><div class=\"line\">   ifstream infile; </div><div class=\"line\">   infile.open(<span class=\"string\">\"afile.dat\"</span>); </div><div class=\"line\"> </div><div class=\"line\">   <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Reading from the file\"</span> &lt;&lt; <span class=\"built_in\">endl</span>; </div><div class=\"line\">   infile &gt;&gt; data; </div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">// 在屏幕上写入数据</span></div><div class=\"line\">   <span class=\"built_in\">cout</span> &lt;&lt; data &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">   </div><div class=\"line\">   <span class=\"comment\">// 再次从文件读取数据，并显示它</span></div><div class=\"line\">   infile &gt;&gt; data; </div><div class=\"line\">   <span class=\"built_in\">cout</span> &lt;&lt; data &lt;&lt; <span class=\"built_in\">endl</span>; </div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">// 关闭打开的文件</span></div><div class=\"line\">   infile.close();</div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>文件位置指针</li>\n</ul>\n<p>istream和ostream都提供了对文件重新定位的函数功能。这些成员函数包括关于 istream 的 seekg（”seek get”）和关于 ostream 的 seekp（”seek put”）。<br>seekg 和 seekp 的参数通常是一个长整型。第二个参数可以用于指定查找方向。查找方向可以是 ios::beg（默认的，从流的开头开始定位），也可以是 ios::cur（从流的当前位置开始定位），也可以是 ios::end（从流的末尾开始定位）。<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 定位到 fileObject 的第 n 个字节（假设是 ios::beg）</span></div><div class=\"line\">fileObject.seekg( n );</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 把文件的读指针从 fileObject 当前位置向后移 n 个字节</span></div><div class=\"line\">fileObject.seekg( n, ios::cur );</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 把文件的读指针从 fileObject 末尾往回移 n 个字节</span></div><div class=\"line\">fileObject.seekg( n, ios::end );</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 定位到 fileObject 的末尾</span></div><div class=\"line\">fileObject.seekg( <span class=\"number\">0</span>, ios::end );</div></pre></td></tr></table></figure></p>\n<ul>\n<li>异常处理<br>try…catch ，throw,好像C++中没有throws关键字</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>异常</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>std::exception</strong></td>\n<td>该异常是所有标准 C++ 异常的父类。</td>\n</tr>\n<tr>\n<td>std::bad_alloc</td>\n<td>该异常可以通过 <strong>new</strong> 抛出。</td>\n</tr>\n<tr>\n<td>std::bad_cast</td>\n<td>该异常可以通过 <strong>dynamic_cast</strong> 抛出。</td>\n</tr>\n<tr>\n<td>std::bad_exception</td>\n<td>这在处理 C++ 程序中无法预期的异常时非常有用。</td>\n</tr>\n<tr>\n<td>std::bad_typeid</td>\n<td>该异常可以通过 <strong>typeid</strong> 抛出。</td>\n</tr>\n<tr>\n<td><strong>std::logic_error</strong></td>\n<td>理论上可以通过读取代码来检测到的异常。</td>\n</tr>\n<tr>\n<td>std::domain_error</td>\n<td>当使用了一个无效的数学域时，会抛出该异常。</td>\n</tr>\n<tr>\n<td>std::invalid_argument</td>\n<td>当使用了无效的参数时，会抛出该异常。</td>\n</tr>\n<tr>\n<td>std::length_error</td>\n<td>当创建了太长的 std::string 时，会抛出该异常。</td>\n</tr>\n<tr>\n<td>std::out_of_range</td>\n<td>该异常可以通过方法抛出，例如 std::vector 和 std::bitset&lt;&gt;::operator<a href=\"\"></a>。</td>\n</tr>\n<tr>\n<td><strong>std::runtime_error</strong></td>\n<td>理论上不可以通过读取代码来检测到的异常。</td>\n</tr>\n<tr>\n<td>std::overflow_error</td>\n<td>当发生数学上溢时，会抛出该异常。</td>\n</tr>\n<tr>\n<td>std::range_error</td>\n<td>当尝试存储超出范围的值时，会抛出该异常。</td>\n</tr>\n<tr>\n<td>std::underflow_error</td>\n<td>当发生数学下溢时，会抛出该异常。</td>\n</tr>\n</tbody>\n</table>\n<p>也可以通过继承exception类，重载其<code>what()</code>方法，来自定义异常类<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;exception&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">struct</span> MyException : <span class=\"keyword\">public</span> exception</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * <span class=\"title\">what</span> <span class=\"params\">()</span> <span class=\"keyword\">const</span> <span class=\"title\">throw</span> <span class=\"params\">()</span></span></div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"C++ Exception\"</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">try</span></div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> MyException();</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">catch</span>(MyException&amp; e)</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"MyException caught\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; e.what() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">catch</span>(<span class=\"built_in\">std</span>::exception&amp; e)</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"comment\">//其他的错误</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li><p>动态内存</p>\n<ul>\n<li><p>堆，程序中未使用，运行时动态分配的内存</p>\n</li>\n<li><p>栈，函数内部声明的变量，都在此。</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>new 和 delete 运算符，用于动态分配内存。<br><code>new data-type</code><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">double</span>* pvalue = <span class=\"literal\">NULL</span>;<span class=\"comment\">//初始化为null的指针</span></div><div class=\"line\">pvalue = <span class=\"keyword\">new</span> <span class=\"keyword\">double</span>;<span class=\"comment\">//为变量请求内存，但是可能不一定有内存可分配，需要检查</span></div><div class=\"line\"><span class=\"keyword\">if</span>(!(pvalue = <span class=\"keyword\">new</span> <span class=\"keyword\">double</span>))&#123;</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Error : out of memory.\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">  <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>C 语言中有<code>malloc()</code>函数，但是C++ 最好用new，因为它可以分配内存，而且还创建了对象。<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">delete</span> pvalue;<span class=\"comment\">//释放pvalue所指向的内存。</span></div><div class=\"line\"><span class=\"comment\">//如下示例</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">   <span class=\"keyword\">double</span>* pvalue  = <span class=\"literal\">NULL</span>; <span class=\"comment\">// 初始化为 null 的指针</span></div><div class=\"line\">   pvalue  = <span class=\"keyword\">new</span> <span class=\"keyword\">double</span>;   <span class=\"comment\">// 为变量请求内存</span></div><div class=\"line\"> </div><div class=\"line\">   *pvalue = <span class=\"number\">29494.99</span>;     <span class=\"comment\">// 在分配的地址存储值</span></div><div class=\"line\">   <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Value of pvalue : \"</span> &lt;&lt; *pvalue &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">delete</span> pvalue;         <span class=\"comment\">// 释放内存</span></div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li><p>数组动态分配内存</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">char</span>* pvalue = <span class=\"literal\">NULL</span>;<span class=\"comment\">//初始化指针为null</span></div><div class=\"line\">pvalue = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[<span class=\"number\">20</span>];<span class=\"comment\">//请求内存</span></div><div class=\"line\"><span class=\"keyword\">delete</span> [] pvalue;<span class=\"comment\">//删除pvalue指向的数组</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> ROW = <span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> COL = <span class=\"number\">3</span>;</div><div class=\"line\"><span class=\"keyword\">double</span> **pvalue = <span class=\"keyword\">new</span> <span class=\"keyword\">double</span>* [ROW];<span class=\"comment\">//为行分配内存</span></div><div class=\"line\"><span class=\"comment\">//为列分配内存</span></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;COL;i++)&#123;</div><div class=\"line\">  pvalue[i] = <span class=\"keyword\">new</span> <span class=\"keyword\">double</span>[COL];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//释放内存</span></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;COL;i++)&#123;</div><div class=\"line\">  <span class=\"keyword\">delete</span>[] pvalue[i];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">delete</span> [] pvalue;</div></pre></td></tr></table></figure>\n</li>\n<li><p>对象的动态分配内存<br>类似普通数据的动态分配：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">class</span> Box&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span> :</div><div class=\"line\">  <span class=\"comment\">//创建对象时候调用</span></div><div class=\"line\">    Box()&#123;</div><div class=\"line\">      <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"构造函数\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//删除对象时候调用</span></div><div class=\"line\">    ~Box()&#123;</div><div class=\"line\">      <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"析构函数\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"comment\">//声明分配内存</span></div><div class=\"line\">  Box* myBoxArray = <span class=\"keyword\">new</span> Box[<span class=\"number\">4</span>];</div><div class=\"line\">  <span class=\"comment\">//释放内存</span></div><div class=\"line\">  <span class=\"keyword\">delete</span> [] myBoxArray;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>命名空间<br>有点类似包名，或者xml中的命名空间的概念，就是通过一个完整路径定位，来便于区分不同地方的相同名称的函数和类。<br>关键字<code>namespace</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> namespace_name&#123;</div><div class=\"line\">  <span class=\"comment\">//代码声明</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//调用的时候</span></div><div class=\"line\">name::code;<span class=\"comment\">//code代表函数，或者变量</span></div><div class=\"line\"><span class=\"comment\">//需要在文件头使用using namespace指令来说明使用的是哪个空间</span></div><div class=\"line\"><span class=\"comment\">//类似于导入包，可以导入单个类，也可以导入整个包,代码中直接使用某个函数，如下</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>命名空间可以定义在不同的文件中，成为不连续的命名空间。还可以嵌套。<br>调用时候用<code>::</code>定位符<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> name1::name2;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>模板<br>c++ 的模板也就是泛型，可以这么理解<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> type&gt; ret-type func-name(parameter <span class=\"built_in\">list</span>)&#123;</div><div class=\"line\">  <span class=\"comment\">//body code</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>示例：<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> T <span class=\"keyword\">const</span>&amp; <span class=\"title\">Max</span> <span class=\"params\">(T <span class=\"keyword\">const</span>&amp; a, T <span class=\"keyword\">const</span>&amp; b)</span> </span></div><div class=\"line\">&#123; </div><div class=\"line\">    <span class=\"keyword\">return</span> a &lt; b ? b:a; </div><div class=\"line\">&#125; </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">39</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> j = <span class=\"number\">20</span>;</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Max(i, j): \"</span> &lt;&lt; Max(i, j) &lt;&lt; <span class=\"built_in\">endl</span>; </div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">double</span> f1 = <span class=\"number\">13.5</span>; </div><div class=\"line\">    <span class=\"keyword\">double</span> f2 = <span class=\"number\">20.7</span>; </div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Max(f1, f2): \"</span> &lt;&lt; Max(f1, f2) &lt;&lt; <span class=\"built_in\">endl</span>; </div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">string</span> s1 = <span class=\"string\">\"Hello\"</span>; </div><div class=\"line\">    <span class=\"built_in\">string</span> s2 = <span class=\"string\">\"World\"</span>; </div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Max(s1, s2): \"</span> &lt;&lt; Max(s1, s2) &lt;&lt; <span class=\"built_in\">endl</span>; </div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>以上是函数模板，类模板也差不多<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> type&gt; <span class=\"keyword\">class</span> <span class=\"keyword\">class</span>-name &#123;</div><div class=\"line\">.</div><div class=\"line\">.</div><div class=\"line\">.</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>信号处理<br>C++ 中多了信号处理,在<csignal>文件中</csignal></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>信号</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SIGABRT</td>\n<td>程序的异常终止，如调用 <strong>abort</strong>。</td>\n</tr>\n<tr>\n<td>SIGFPE</td>\n<td>错误的算术运算，比如除以零或导致溢出的操作。</td>\n</tr>\n<tr>\n<td>SIGILL</td>\n<td>检测非法指令。</td>\n</tr>\n<tr>\n<td>SIGINT</td>\n<td>接收到交互注意信号。</td>\n</tr>\n<tr>\n<td>SIGSEGV</td>\n<td>非法访问内存。</td>\n</tr>\n<tr>\n<td>SIGTERM</td>\n<td>发送到程序的终止请求。</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>signal()函数<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> (*signal (<span class=\"keyword\">int</span> sig,<span class=\"keyword\">void</span> (*func)(<span class=\"keyword\">int</span>)))(<span class=\"keyword\">int</span>);</div><div class=\"line\"><span class=\"comment\">//第一个参数证书，代表信号编号，第二个是指针，指向信号处理函数。</span></div><div class=\"line\"><span class=\"comment\">//示例：</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;csignal&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">signalHandler</span><span class=\"params\">( <span class=\"keyword\">int</span> signum )</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Interrupt signal (\"</span> &lt;&lt; signum &lt;&lt; <span class=\"string\">\") received.\\n\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 清理并关闭</span></div><div class=\"line\">    <span class=\"comment\">// 终止程序  </span></div><div class=\"line\"></div><div class=\"line\">   <span class=\"built_in\">exit</span>(signum);  </div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// 注册信号 SIGINT 和信号处理程序</span></div><div class=\"line\">    signal(SIGINT, signalHandler);  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</div><div class=\"line\">       <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Going to sleep....\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">       sleep(<span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//此时，运行循环，用ctrl c来终端，就会被捕获信号。</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>raise()函数，生成信号<br><code>int raise(signal sig);</code><br>//sig表示信号编号，<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;csignal&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">signalHandler</span><span class=\"params\">( <span class=\"keyword\">int</span> signum )</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Interrupt signal (\"</span> &lt;&lt; signum &lt;&lt; <span class=\"string\">\") received.\\n\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 清理并关闭</span></div><div class=\"line\">    <span class=\"comment\">// 终止程序 </span></div><div class=\"line\"></div><div class=\"line\">   <span class=\"built_in\">exit</span>(signum);  </div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"comment\">// 注册信号 SIGINT 和信号处理程序</span></div><div class=\"line\">    signal(SIGINT, signalHandler);  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span>(++i)&#123;</div><div class=\"line\">       <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Going to sleep....\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">       <span class=\"keyword\">if</span>( i == <span class=\"number\">3</span> )&#123;</div><div class=\"line\">          raise( SIGINT);</div><div class=\"line\">       &#125;</div><div class=\"line\">       sleep(<span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>多线程<br>多任务计算机分为两种，基于进程和基于线程。基于进程的多任务是程序的并发执行；基于线程的多任务是同一程序的片段并发执行。<br>常见操作系统多是用POSIX编写线程。<br>1、创建<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;pthread.h&gt;</span></span></div><div class=\"line\">pthread_create (thread,attr,start_routine,arg);</div><div class=\"line\"><span class=\"comment\">//参数，thread为指向线程标识符的指针，attr为不透明的属性对象，用来设置线程属性，可以设置NULL</span></div><div class=\"line\"><span class=\"comment\">//start_routine线程运行起始位置，创建线程就被执行。arg运行函数的参数，</span></div><div class=\"line\"><span class=\"comment\">//可以NULL，但是必须把引用作为指针转换为void类型传入。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//终止线程</span></div><div class=\"line\">pthread_exit(status);<span class=\"comment\">//一般不用显式调用，</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>实例：<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"comment\">// 必须的头文件是</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;pthread.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> NUM_THREADS 5</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 线程的运行函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">say_hello</span><span class=\"params\">(<span class=\"keyword\">void</span>* args)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Hello Runoob！\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// 定义线程的 id 变量，多个变量使用数组</span></div><div class=\"line\">    <span class=\"keyword\">pthread_t</span> tids[NUM_THREADS];</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; NUM_THREADS; ++i)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"comment\">//参数依次是：创建的线程id，线程参数，调用的函数，传入的函数参数</span></div><div class=\"line\">        <span class=\"keyword\">int</span> ret = pthread_create(&amp;tids[i], <span class=\"literal\">NULL</span>, say_hello, <span class=\"literal\">NULL</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (ret != <span class=\"number\">0</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">           <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"pthread_create error: error_code=\"</span> &lt;&lt; ret &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//等各个线程退出后，进程才结束，否则进程强制结束了，线程可能还没反应过来；</span></div><div class=\"line\">    pthread_exit(<span class=\"literal\">NULL</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>连接和分离线程<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\">pthread_join(threadid,status)</div><div class=\"line\">pthread_detach(threadid)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;pthread.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> NUM_THREADS     5</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> *<span class=\"title\">wait</span><span class=\"params\">(<span class=\"keyword\">void</span> *t)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">   <span class=\"keyword\">int</span> i;</div><div class=\"line\">   <span class=\"keyword\">long</span> tid;</div><div class=\"line\"></div><div class=\"line\">   tid = (<span class=\"keyword\">long</span>)t;</div><div class=\"line\"></div><div class=\"line\">   sleep(<span class=\"number\">1</span>);</div><div class=\"line\">   <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Sleeping in thread \"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">   <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Thread with id : \"</span> &lt;&lt; tid &lt;&lt; <span class=\"string\">\"  ...exiting \"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">   pthread_exit(<span class=\"literal\">NULL</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">   <span class=\"keyword\">int</span> rc;</div><div class=\"line\">   <span class=\"keyword\">int</span> i;</div><div class=\"line\">   <span class=\"keyword\">pthread_t</span> threads[NUM_THREADS];</div><div class=\"line\">   <span class=\"keyword\">pthread_attr_t</span> attr;</div><div class=\"line\">   <span class=\"keyword\">void</span> *status;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">// 初始化并设置线程为可连接的（joinable）</span></div><div class=\"line\">   pthread_attr_init(&amp;attr);</div><div class=\"line\">   pthread_attr_setdetachstate(&amp;attr, PTHREAD_CREATE_JOINABLE);</div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">for</span>( i=<span class=\"number\">0</span>; i &lt; NUM_THREADS; i++ )&#123;</div><div class=\"line\">      <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"main() : creating thread, \"</span> &lt;&lt; i &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">      rc = pthread_create(&amp;threads[i], <span class=\"literal\">NULL</span>, wait, (<span class=\"keyword\">void</span> *)i );</div><div class=\"line\">      <span class=\"keyword\">if</span> (rc)&#123;</div><div class=\"line\">         <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Error:unable to create thread,\"</span> &lt;&lt; rc &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">         <span class=\"built_in\">exit</span>(<span class=\"number\">-1</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">// 删除属性，并等待其他线程</span></div><div class=\"line\">   pthread_attr_destroy(&amp;attr);</div><div class=\"line\">   <span class=\"keyword\">for</span>( i=<span class=\"number\">0</span>; i &lt; NUM_THREADS; i++ )&#123;</div><div class=\"line\">      rc = pthread_join(threads[i], &amp;status);</div><div class=\"line\">      <span class=\"keyword\">if</span> (rc)&#123;</div><div class=\"line\">         <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Error:unable to join,\"</span> &lt;&lt; rc &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">         <span class=\"built_in\">exit</span>(<span class=\"number\">-1</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Main: completed thread id :\"</span> &lt;&lt; i ;</div><div class=\"line\">      <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"  exiting with status :\"</span> &lt;&lt; status &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Main: program exiting.\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">   pthread_exit(<span class=\"literal\">NULL</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>//效果<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">main() : creating thread, <span class=\"number\">0</span></div><div class=\"line\">main() : creating thread, <span class=\"number\">1</span></div><div class=\"line\">main() : creating thread, <span class=\"number\">2</span></div><div class=\"line\">main() : creating thread, <span class=\"number\">3</span></div><div class=\"line\">main() : creating thread, <span class=\"number\">4</span></div><div class=\"line\">Sleeping in thread </div><div class=\"line\">Thread with id : <span class=\"number\">4</span>  ...exiting </div><div class=\"line\">Sleeping in thread </div><div class=\"line\">Thread with id : <span class=\"number\">3</span>  ...exiting </div><div class=\"line\">Sleeping in thread </div><div class=\"line\">Thread with id : <span class=\"number\">2</span>  ...exiting </div><div class=\"line\">Sleeping in thread </div><div class=\"line\">Thread with id : <span class=\"number\">1</span>  ...exiting </div><div class=\"line\">Sleeping in thread </div><div class=\"line\">Thread with id : <span class=\"number\">0</span>  ...exiting </div><div class=\"line\">Main: completed thread id :<span class=\"number\">0</span>  exiting with status :<span class=\"number\">0</span></div><div class=\"line\">Main: completed thread id :<span class=\"number\">1</span>  exiting with status :<span class=\"number\">0</span></div><div class=\"line\">Main: completed thread id :<span class=\"number\">2</span>  exiting with status :<span class=\"number\">0</span></div><div class=\"line\">Main: completed thread id :<span class=\"number\">3</span>  exiting with status :<span class=\"number\">0</span></div><div class=\"line\">Main: completed thread id :<span class=\"number\">4</span>  exiting with status :<span class=\"number\">0</span></div><div class=\"line\">Main: program exiting.</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<h1 id=\"C-学习笔记\"><a href=\"#C-学习笔记\" class=\"headerlink\" title=\"C++学习笔记\"></a>C++学习笔记</h1><p>鉴于C++可看作是C语言的扩展，或者说是面向对象的C语言版本。其语法方面多有类似指出，此笔记也就简要写出C++中与C不同和新增的语法部分。</p>\n<p>当然C与C++依然算作是两种语言，此处本人小白，亦不做辩论，只在此方便笔记而已。</p>\n<h2 id=\"1、基本语法\"><a href=\"#1、基本语法\" class=\"headerlink\" title=\"1、基本语法\"></a>1、基本语法</h2><ul>\n<li><p>简介</p>\n<p>linux下C语言用gcc，C++用g++编译；C++含有对象、类、方法、即使变量等概念。</p>\n</li>\n</ul>\n<p>C++ 的预编译库包含了绝大多数C语言的库，自身格式略有不同</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;<span class=\"comment\">//使用标准的命名空间</span></div><div class=\"line\"><span class=\"comment\">//C语言是&lt;stdio.h&gt;</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"hello C++\"</span>;<span class=\"comment\">//输出语法是cout &lt;&lt; ，有时候还要用endl;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>关键字</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>asm</th>\n<th>else</th>\n<th>new</th>\n<th>this</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>auto</td>\n<td>enum</td>\n<td>operator</td>\n<td>throw</td>\n</tr>\n<tr>\n<td>bool</td>\n<td>explicit</td>\n<td>private</td>\n<td>true</td>\n</tr>\n<tr>\n<td>break</td>\n<td>export</td>\n<td>protected</td>\n<td>try</td>\n</tr>\n<tr>\n<td>case</td>\n<td>extern</td>\n<td>public</td>\n<td>typedef</td>\n</tr>\n<tr>\n<td>catch</td>\n<td>false</td>\n<td>register</td>\n<td>typeid</td>\n</tr>\n<tr>\n<td>char</td>\n<td>float</td>\n<td>reinterpret_cast</td>\n<td>typename</td>\n</tr>\n<tr>\n<td>class</td>\n<td>for</td>\n<td>return</td>\n<td>union</td>\n</tr>\n<tr>\n<td>const</td>\n<td>friend</td>\n<td>short</td>\n<td>unsigned</td>\n</tr>\n<tr>\n<td>const_cast</td>\n<td>goto</td>\n<td>signed</td>\n<td>using</td>\n</tr>\n<tr>\n<td>continue</td>\n<td>if</td>\n<td>sizeof</td>\n<td>virtual</td>\n</tr>\n<tr>\n<td>default</td>\n<td>inline</td>\n<td>static</td>\n<td>void</td>\n</tr>\n<tr>\n<td>delete</td>\n<td>int</td>\n<td>static_cast</td>\n<td>volatile</td>\n</tr>\n<tr>\n<td>do</td>\n<td>long</td>\n<td>struct</td>\n<td>wchar_t</td>\n</tr>\n<tr>\n<td>double</td>\n<td>mutable</td>\n<td>switch</td>\n<td>while</td>\n</tr>\n<tr>\n<td>dynamic_cast</td>\n<td>namespace</td>\n<td>template</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>三字字符</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>三字符组</th>\n<th>替换</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>??=</td>\n<td>#</td>\n</tr>\n<tr>\n<td>??/</td>\n<td>\\</td>\n</tr>\n<tr>\n<td>??’</td>\n<td>^</td>\n</tr>\n<tr>\n<td>??(</td>\n<td>[</td>\n</tr>\n<tr>\n<td>??)</td>\n<td>]</td>\n</tr>\n<tr>\n<td>??!</td>\n<td>\\</td>\n<td></td>\n</tr>\n<tr>\n<td>??&lt;</td>\n<td>{</td>\n</tr>\n<tr>\n<td>??&gt;</td>\n<td>}</td>\n</tr>\n<tr>\n<td>??-</td>\n<td>~</td>\n</tr>\n</tbody>\n</table>\n<p>这些都是古老程序，当时为了表示键盘上没有的字符而设计的。</p>\n<ul>\n<li><p>数据类型</p>\n<p>bool、char、int、float、double、void、wchar_t(宽字符型)，以及signed、unsigned、short、long等修饰符</p>\n<ul>\n<li><strong>typedef</strong>定义新名称</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">int</span> feet;<span class=\"comment\">//那么就可以用feet代替int类型定义变量了</span></div></pre></td></tr></table></figure>\n<ul>\n<li>枚举</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">enum</span> enum_name&#123;<span class=\"built_in\">list</span> of names&#125; var-<span class=\"built_in\">list</span>;</div><div class=\"line\"><span class=\"comment\">//示例</span></div><div class=\"line\"><span class=\"keyword\">enum</span> color&#123;red,green,blue&#125; c;</div><div class=\"line\">c = blue;</div><div class=\"line\"><span class=\"comment\">//默认情况，第一个值=0，第二个=1，依次+1，也可以直接定义</span></div><div class=\"line\"><span class=\"keyword\">enum</span> shape &#123;rectangle,circle=<span class=\"number\">5</span>,square&#125; sp;</div><div class=\"line\"><span class=\"comment\">//那么此时，square=6，比上一个+1.</span></div></pre></td></tr></table></figure>\n<p>const声明常量，成员变量自动初始化，char=‘\\0’;默认初始值</p>\n<p>有符号和无符号的修饰符</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>　<span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>　<span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">short</span> <span class=\"keyword\">int</span> i;<span class=\"comment\">//有符号短整数</span></div><div class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">short</span> <span class=\"keyword\">int</span> j;<span class=\"comment\">//无符号的</span></div><div class=\"line\">  j = <span class=\"number\">50000</span>;<span class=\"comment\">//赋值</span></div><div class=\"line\">  i = j;</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; i &lt;&lt; <span class=\"string\">\" , \"</span> &lt;&lt; j;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//输出结果</span></div><div class=\"line\"><span class=\"number\">-15536</span> , <span class=\"number\">50000</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>C++限定符</p>\n<ul>\n<li>const 常量修饰符</li>\n<li>volatile 告知编译器，其修饰的变量可能会被未知方式修改</li>\n<li>restrict修饰的指针，是一种唯一访问它所修饰对象的方式</li>\n</ul>\n</li>\n<li><p>C++存储类</p>\n<p>auto、register、static、extern、mutable(用于对象修饰，允许对象成员代替常量，mutable成员可通过const成员修改)</p>\n</li>\n<li><p>String类</p>\n<p>相比char字符类型，增加了许多常用便捷操作</p>\n</li>\n<li><p>引用</p>\n<p>引用不同于指针</p>\n<ul>\n<li>没有空引用，可以用空指针</li>\n<li>一旦引用被初始化为一个对象，就不能指向其他对象，指针可以随时变向</li>\n<li>引用必须创建时初始化，指针可以随时</li>\n</ul>\n<p>引用使用<code>&amp;</code>符号</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//变量的声明初始化</span></div><div class=\"line\"><span class=\"keyword\">int</span> i = <span class=\"number\">17</span>;</div><div class=\"line\"><span class=\"comment\">//声明变量i的引用</span></div><div class=\"line\"><span class=\"keyword\">int</span>&amp; r = i;<span class=\"comment\">//成为r是初始化为i的整形引用</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>基本输入输出</p>\n<p>I/O库</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;iostream&gt;、&lt;iomanip&gt;、&lt;fstream&gt;等</div></pre></td></tr></table></figure>\n<ul>\n<li>标准输出cout，输入cin</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">char</span> str[] = <span class=\"string\">\"Hello C++\"</span>;</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Value of Str is : \"</span> &lt;&lt; str &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">  <span class=\"keyword\">char</span> name[<span class=\"number\">30</span>];</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Please input your name\"</span>;</div><div class=\"line\">  <span class=\"built_in\">cin</span> &gt;&gt; name;</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"your name is : \"</span>&lt;&lt;name&lt;&lt;<span class=\"built_in\">endl</span>;<span class=\"comment\">//endl  --  end line;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>标准错误流cerr，日志流clog</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2、面向对象\"><a href=\"#2、面向对象\" class=\"headerlink\" title=\"2、面向对象\"></a>2、面向对象</h2><ul>\n<li><p>对象类</p>\n<p><strong>class</strong>关键字</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Box &#123;</div><div class=\"line\">  <span class=\"keyword\">public</span> :<span class=\"comment\">//还有private、protected，friend有点不同</span></div><div class=\"line\">  \t<span class=\"keyword\">double</span> length;</div><div class=\"line\">  \t<span class=\"keyword\">double</span> breadth;</div><div class=\"line\">  \t<span class=\"keyword\">double</span> height;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">//声明类对象</span></div><div class=\"line\">Box box1;</div><div class=\"line\"><span class=\"comment\">//然后用.符号访问类成员</span></div><div class=\"line\">box1.length</div></pre></td></tr></table></figure>\n</li>\n<li><p>继承</p>\n<p>C++可以多继承</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//格式</span></div><div class=\"line\"><span class=\"keyword\">class</span> derived-<span class=\"keyword\">class</span> : access-specifier base-<span class=\"keyword\">class</span></div><div class=\"line\"><span class=\"comment\">//示例</span></div><div class=\"line\"><span class=\"keyword\">class</span> Rectangle : <span class=\"keyword\">public</span> Shape&#123;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>权限修饰符public、private、protected</p>\n<p>| 访问   | public | protected | private |<br>| —- | —— | ——— | ——- |<br>| 同一个类 | yes    | yes       | yes     |<br>| 派生类  | yes    | yes       | no      |<br>| 外部类  | yes    | no        | no      |</p>\n<p>派生类可以继承所有基类的方法，例外</p>\n<ul>\n<li>基类的构造函数、析构函数和拷贝构造函数</li>\n<li>积累的重载运算符(就是重新定义基本的运算符)</li>\n<li>基类的友元函数(friend修饰的函数)</li>\n</ul>\n<p><strong>注意</strong>一般继承类型选择public，少用private和protected，因为使用对应的修饰符，基类的成员在派生类中将变成对应修饰符的权限级别。如使用private，则基类的public和protected成员，在派生类也会private化。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> &lt;sub-name&gt;:&lt;visit&gt;&lt;base1&gt;,&lt;visit&gt;&lt;base2&gt;</div><div class=\"line\">  &#123;</div><div class=\"line\">    ...</div><div class=\"line\">  &#125;;</div><div class=\"line\"><span class=\"comment\">//示例</span></div><div class=\"line\"><span class=\"keyword\">class</span> Rectangle:<span class=\"keyword\">public</span> Shape,<span class=\"keyword\">public</span> PaintCost&#123;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>重载运算符和重载函数</p>\n<p>函数重载也就是Java之类的面向对象里的方法重载，既同一个方法名，不同的方法签名。</p>\n<ul>\n<li>运算符重载</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Box <span class=\"keyword\">operator</span>+(<span class=\"keyword\">const</span> Box&amp;);</div><div class=\"line\"><span class=\"comment\">//格式如上，必须有operator关键字，内部传入引用</span></div><div class=\"line\"><span class=\"comment\">//如此box1+box2就被如下重载定义</span></div><div class=\"line\">Box <span class=\"keyword\">operator</span>+(<span class=\"keyword\">const</span> Box&amp; b)&#123;</div><div class=\"line\">  Box box;</div><div class=\"line\">  box.length = <span class=\"keyword\">this</span>-&gt;length + b.length;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p> 下面是可重载的运算符列表：</p>\n<p>| +    | -    | <em>    | /      | %      | ^         |<br>| —- | —- | —- | —— | —— | ——— |<br>| &amp;    | |   | ~    | !      | ,      | =         |<br>| &lt;    | &gt;    | &lt;=   | >=     | ++     | –        |<br>| &lt;&lt;   | >&gt;   | ==   | !=     | &amp;&amp;     | ||      |<br>| +=   | -=   | /=   | %=     | ^=     | &amp;=        |<br>| |=  | </em>=   | &lt;&lt;=  | >&gt;=    | []     | ()        |<br>| -&gt;   | -&gt;*  | new  | new [] | delete | delete [] |</p>\n<p>下面是不可重载的运算符列表：</p>\n<p><code>::</code>、<code>.*</code>、<code>.</code>、<code>?:</code></p>\n</li>\n<li><p>多态</p>\n<p>面向对象编程语言三大特性，封装、继承、多态。</p>\n<p>所谓多态，也就是一个方法或属性，在不同的派生类那里，有不同的具体表现方式。</p>\n<p>但是C++语言里，需要派生类实现的抽象方法，需要使用关键字<code>virtual</code>在基类中修饰，不然的话，子类调用的仍然还是父类方法，而不是自己的具体实现：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Shape&#123;</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"keyword\">public</span>:</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"comment\">//此处若不用virtual修饰，那么子类实现该方法，调用时候，就依然是该方法，而不是子类自己的实现</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">area</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Parent class area:\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//示例子类</span></div><div class=\"line\"><span class=\"keyword\">class</span> Circle&#123;</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"keyword\">public</span> :</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">area</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Circle class area:\"</span> &lt;&lt; end;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  Shape *shape;</div><div class=\"line\">  Circle circle;</div><div class=\"line\">  <span class=\"comment\">//存储circle对象地址</span></div><div class=\"line\">  shape = circle;</div><div class=\"line\">  <span class=\"comment\">//调用,如果Shape类area()函数不用virtual的修饰，那么输出的只能是Shape类的方法，而不是子类Cirle的area()函数。</span></div><div class=\"line\">  shape-&gt;area();</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用virtual修饰的函数成为虚函数，如果虚函数没有方法体，则成为纯虚函数。</p>\n<p>类似于Java中的抽象方法。</p>\n</li>\n<li><p>数据抽象与数据封装</p>\n<p>数据抽象就是私有化数据变量，推外提供set、get方法。数据封装，也就是类似于C中的结构体，或者java中的bean对象类，封装一组数据和函数，成为一个实体类。</p>\n<p><strong>抽象类</strong>一个含有纯虚函数的类。也称为接口。</p>\n</li>\n</ul>\n<h2 id=\"3、高级教程\"><a href=\"#3、高级教程\" class=\"headerlink\" title=\"3、高级教程\"></a>3、高级教程</h2><ul>\n<li>文件和流</li>\n</ul>\n<p><code>iostream</code>标准库，提供了<code>cin</code>、<code>cout</code>方法，而文件标准库<code>fstream</code>提供了三种数据类型<br><code>ofstream</code>、<code>ifstream</code>、<code>fstream</code>分别对应的是输出、输入、和同时具备输入输出的类型。</p>\n<ul>\n<li>打开文件<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//参数表示，文件路径和名称，读取方式</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">open</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *filename,ios::openmode mode)</span></span>;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>模式标志</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ios::app</td>\n<td>追加模式</td>\n</tr>\n<tr>\n<td>ios::ate</td>\n<td>打开文件，定位到末尾</td>\n</tr>\n<tr>\n<td>ios::in</td>\n<td>读取</td>\n</tr>\n<tr>\n<td>ios::out</td>\n<td>写入</td>\n</tr>\n<tr>\n<td>ios::trunc</td>\n<td>若文件存在，打开前截断为0字节</td>\n</tr>\n</tbody>\n</table>\n<p>这些模式可以结合使用，<code>::</code>符号为<strong>域</strong>定位符号<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ofstream outfile;</div><div class=\"line\">outfile.open(<span class=\"string\">\"file.dat\"</span>,ios::out | ios::trunc);</div></pre></td></tr></table></figure></p>\n<ul>\n<li>关闭文件</li>\n</ul>\n<p><code>close()</code>函数是fstream、ifsteram、ofstream对象的一个成员。<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    </div><div class=\"line\">   <span class=\"keyword\">char</span> data[<span class=\"number\">100</span>];</div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">// 以写模式打开文件</span></div><div class=\"line\">   ofstream outfile;</div><div class=\"line\">   outfile.open(<span class=\"string\">\"afile.dat\"</span>);</div><div class=\"line\"></div><div class=\"line\">   <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Writing to the file\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">   <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Enter your name: \"</span>; </div><div class=\"line\">   <span class=\"built_in\">cin</span>.getline(data, <span class=\"number\">100</span>);</div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">// 向文件写入用户输入的数据</span></div><div class=\"line\">   outfile &lt;&lt; data &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Enter your age: \"</span>; </div><div class=\"line\">   <span class=\"built_in\">cin</span> &gt;&gt; data;</div><div class=\"line\">   <span class=\"built_in\">cin</span>.ignore();</div><div class=\"line\">   </div><div class=\"line\">   <span class=\"comment\">// 再次向文件写入用户输入的数据</span></div><div class=\"line\">   outfile &lt;&lt; data &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">// 关闭打开的文件</span></div><div class=\"line\">   outfile.close();</div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">// 以读模式打开文件</span></div><div class=\"line\">   ifstream infile; </div><div class=\"line\">   infile.open(<span class=\"string\">\"afile.dat\"</span>); </div><div class=\"line\"> </div><div class=\"line\">   <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Reading from the file\"</span> &lt;&lt; <span class=\"built_in\">endl</span>; </div><div class=\"line\">   infile &gt;&gt; data; </div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">// 在屏幕上写入数据</span></div><div class=\"line\">   <span class=\"built_in\">cout</span> &lt;&lt; data &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">   </div><div class=\"line\">   <span class=\"comment\">// 再次从文件读取数据，并显示它</span></div><div class=\"line\">   infile &gt;&gt; data; </div><div class=\"line\">   <span class=\"built_in\">cout</span> &lt;&lt; data &lt;&lt; <span class=\"built_in\">endl</span>; </div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">// 关闭打开的文件</span></div><div class=\"line\">   infile.close();</div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>文件位置指针</li>\n</ul>\n<p>istream和ostream都提供了对文件重新定位的函数功能。这些成员函数包括关于 istream 的 seekg（”seek get”）和关于 ostream 的 seekp（”seek put”）。<br>seekg 和 seekp 的参数通常是一个长整型。第二个参数可以用于指定查找方向。查找方向可以是 ios::beg（默认的，从流的开头开始定位），也可以是 ios::cur（从流的当前位置开始定位），也可以是 ios::end（从流的末尾开始定位）。<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 定位到 fileObject 的第 n 个字节（假设是 ios::beg）</span></div><div class=\"line\">fileObject.seekg( n );</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 把文件的读指针从 fileObject 当前位置向后移 n 个字节</span></div><div class=\"line\">fileObject.seekg( n, ios::cur );</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 把文件的读指针从 fileObject 末尾往回移 n 个字节</span></div><div class=\"line\">fileObject.seekg( n, ios::end );</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 定位到 fileObject 的末尾</span></div><div class=\"line\">fileObject.seekg( <span class=\"number\">0</span>, ios::end );</div></pre></td></tr></table></figure></p>\n<ul>\n<li>异常处理<br>try…catch ，throw,好像C++中没有throws关键字</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>异常</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>std::exception</strong></td>\n<td>该异常是所有标准 C++ 异常的父类。</td>\n</tr>\n<tr>\n<td>std::bad_alloc</td>\n<td>该异常可以通过 <strong>new</strong> 抛出。</td>\n</tr>\n<tr>\n<td>std::bad_cast</td>\n<td>该异常可以通过 <strong>dynamic_cast</strong> 抛出。</td>\n</tr>\n<tr>\n<td>std::bad_exception</td>\n<td>这在处理 C++ 程序中无法预期的异常时非常有用。</td>\n</tr>\n<tr>\n<td>std::bad_typeid</td>\n<td>该异常可以通过 <strong>typeid</strong> 抛出。</td>\n</tr>\n<tr>\n<td><strong>std::logic_error</strong></td>\n<td>理论上可以通过读取代码来检测到的异常。</td>\n</tr>\n<tr>\n<td>std::domain_error</td>\n<td>当使用了一个无效的数学域时，会抛出该异常。</td>\n</tr>\n<tr>\n<td>std::invalid_argument</td>\n<td>当使用了无效的参数时，会抛出该异常。</td>\n</tr>\n<tr>\n<td>std::length_error</td>\n<td>当创建了太长的 std::string 时，会抛出该异常。</td>\n</tr>\n<tr>\n<td>std::out_of_range</td>\n<td>该异常可以通过方法抛出，例如 std::vector 和 std::bitset&lt;&gt;::operator<a href=\"\"></a>。</td>\n</tr>\n<tr>\n<td><strong>std::runtime_error</strong></td>\n<td>理论上不可以通过读取代码来检测到的异常。</td>\n</tr>\n<tr>\n<td>std::overflow_error</td>\n<td>当发生数学上溢时，会抛出该异常。</td>\n</tr>\n<tr>\n<td>std::range_error</td>\n<td>当尝试存储超出范围的值时，会抛出该异常。</td>\n</tr>\n<tr>\n<td>std::underflow_error</td>\n<td>当发生数学下溢时，会抛出该异常。</td>\n</tr>\n</tbody>\n</table>\n<p>也可以通过继承exception类，重载其<code>what()</code>方法，来自定义异常类<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;exception&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">struct</span> MyException : <span class=\"keyword\">public</span> exception</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * <span class=\"title\">what</span> <span class=\"params\">()</span> <span class=\"keyword\">const</span> <span class=\"title\">throw</span> <span class=\"params\">()</span></span></div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"C++ Exception\"</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">try</span></div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> MyException();</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">catch</span>(MyException&amp; e)</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"MyException caught\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; e.what() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">catch</span>(<span class=\"built_in\">std</span>::exception&amp; e)</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"comment\">//其他的错误</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li><p>动态内存</p>\n<ul>\n<li><p>堆，程序中未使用，运行时动态分配的内存</p>\n</li>\n<li><p>栈，函数内部声明的变量，都在此。</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>new 和 delete 运算符，用于动态分配内存。<br><code>new data-type</code><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">double</span>* pvalue = <span class=\"literal\">NULL</span>;<span class=\"comment\">//初始化为null的指针</span></div><div class=\"line\">pvalue = <span class=\"keyword\">new</span> <span class=\"keyword\">double</span>;<span class=\"comment\">//为变量请求内存，但是可能不一定有内存可分配，需要检查</span></div><div class=\"line\"><span class=\"keyword\">if</span>(!(pvalue = <span class=\"keyword\">new</span> <span class=\"keyword\">double</span>))&#123;</div><div class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Error : out of memory.\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">  <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>C 语言中有<code>malloc()</code>函数，但是C++ 最好用new，因为它可以分配内存，而且还创建了对象。<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">delete</span> pvalue;<span class=\"comment\">//释放pvalue所指向的内存。</span></div><div class=\"line\"><span class=\"comment\">//如下示例</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">   <span class=\"keyword\">double</span>* pvalue  = <span class=\"literal\">NULL</span>; <span class=\"comment\">// 初始化为 null 的指针</span></div><div class=\"line\">   pvalue  = <span class=\"keyword\">new</span> <span class=\"keyword\">double</span>;   <span class=\"comment\">// 为变量请求内存</span></div><div class=\"line\"> </div><div class=\"line\">   *pvalue = <span class=\"number\">29494.99</span>;     <span class=\"comment\">// 在分配的地址存储值</span></div><div class=\"line\">   <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Value of pvalue : \"</span> &lt;&lt; *pvalue &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">delete</span> pvalue;         <span class=\"comment\">// 释放内存</span></div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li><p>数组动态分配内存</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">char</span>* pvalue = <span class=\"literal\">NULL</span>;<span class=\"comment\">//初始化指针为null</span></div><div class=\"line\">pvalue = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[<span class=\"number\">20</span>];<span class=\"comment\">//请求内存</span></div><div class=\"line\"><span class=\"keyword\">delete</span> [] pvalue;<span class=\"comment\">//删除pvalue指向的数组</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> ROW = <span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> COL = <span class=\"number\">3</span>;</div><div class=\"line\"><span class=\"keyword\">double</span> **pvalue = <span class=\"keyword\">new</span> <span class=\"keyword\">double</span>* [ROW];<span class=\"comment\">//为行分配内存</span></div><div class=\"line\"><span class=\"comment\">//为列分配内存</span></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;COL;i++)&#123;</div><div class=\"line\">  pvalue[i] = <span class=\"keyword\">new</span> <span class=\"keyword\">double</span>[COL];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//释放内存</span></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;COL;i++)&#123;</div><div class=\"line\">  <span class=\"keyword\">delete</span>[] pvalue[i];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">delete</span> [] pvalue;</div></pre></td></tr></table></figure>\n</li>\n<li><p>对象的动态分配内存<br>类似普通数据的动态分配：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">class</span> Box&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span> :</div><div class=\"line\">  <span class=\"comment\">//创建对象时候调用</span></div><div class=\"line\">    Box()&#123;</div><div class=\"line\">      <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"构造函数\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//删除对象时候调用</span></div><div class=\"line\">    ~Box()&#123;</div><div class=\"line\">      <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"析构函数\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"comment\">//声明分配内存</span></div><div class=\"line\">  Box* myBoxArray = <span class=\"keyword\">new</span> Box[<span class=\"number\">4</span>];</div><div class=\"line\">  <span class=\"comment\">//释放内存</span></div><div class=\"line\">  <span class=\"keyword\">delete</span> [] myBoxArray;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>命名空间<br>有点类似包名，或者xml中的命名空间的概念，就是通过一个完整路径定位，来便于区分不同地方的相同名称的函数和类。<br>关键字<code>namespace</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> namespace_name&#123;</div><div class=\"line\">  <span class=\"comment\">//代码声明</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//调用的时候</span></div><div class=\"line\">name::code;<span class=\"comment\">//code代表函数，或者变量</span></div><div class=\"line\"><span class=\"comment\">//需要在文件头使用using namespace指令来说明使用的是哪个空间</span></div><div class=\"line\"><span class=\"comment\">//类似于导入包，可以导入单个类，也可以导入整个包,代码中直接使用某个函数，如下</span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>命名空间可以定义在不同的文件中，成为不连续的命名空间。还可以嵌套。<br>调用时候用<code>::</code>定位符<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> name1::name2;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>模板<br>c++ 的模板也就是泛型，可以这么理解<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> type&gt; ret-type func-name(parameter <span class=\"built_in\">list</span>)&#123;</div><div class=\"line\">  <span class=\"comment\">//body code</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>示例：<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> T <span class=\"keyword\">const</span>&amp; <span class=\"title\">Max</span> <span class=\"params\">(T <span class=\"keyword\">const</span>&amp; a, T <span class=\"keyword\">const</span>&amp; b)</span> </span></div><div class=\"line\">&#123; </div><div class=\"line\">    <span class=\"keyword\">return</span> a &lt; b ? b:a; </div><div class=\"line\">&#125; </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">39</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> j = <span class=\"number\">20</span>;</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Max(i, j): \"</span> &lt;&lt; Max(i, j) &lt;&lt; <span class=\"built_in\">endl</span>; </div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">double</span> f1 = <span class=\"number\">13.5</span>; </div><div class=\"line\">    <span class=\"keyword\">double</span> f2 = <span class=\"number\">20.7</span>; </div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Max(f1, f2): \"</span> &lt;&lt; Max(f1, f2) &lt;&lt; <span class=\"built_in\">endl</span>; </div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">string</span> s1 = <span class=\"string\">\"Hello\"</span>; </div><div class=\"line\">    <span class=\"built_in\">string</span> s2 = <span class=\"string\">\"World\"</span>; </div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Max(s1, s2): \"</span> &lt;&lt; Max(s1, s2) &lt;&lt; <span class=\"built_in\">endl</span>; </div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>以上是函数模板，类模板也差不多<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> type&gt; <span class=\"keyword\">class</span> <span class=\"keyword\">class</span>-name &#123;</div><div class=\"line\">.</div><div class=\"line\">.</div><div class=\"line\">.</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>信号处理<br>C++ 中多了信号处理,在<csignal>文件中</csignal></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>信号</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SIGABRT</td>\n<td>程序的异常终止，如调用 <strong>abort</strong>。</td>\n</tr>\n<tr>\n<td>SIGFPE</td>\n<td>错误的算术运算，比如除以零或导致溢出的操作。</td>\n</tr>\n<tr>\n<td>SIGILL</td>\n<td>检测非法指令。</td>\n</tr>\n<tr>\n<td>SIGINT</td>\n<td>接收到交互注意信号。</td>\n</tr>\n<tr>\n<td>SIGSEGV</td>\n<td>非法访问内存。</td>\n</tr>\n<tr>\n<td>SIGTERM</td>\n<td>发送到程序的终止请求。</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>signal()函数<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> (*signal (<span class=\"keyword\">int</span> sig,<span class=\"keyword\">void</span> (*func)(<span class=\"keyword\">int</span>)))(<span class=\"keyword\">int</span>);</div><div class=\"line\"><span class=\"comment\">//第一个参数证书，代表信号编号，第二个是指针，指向信号处理函数。</span></div><div class=\"line\"><span class=\"comment\">//示例：</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;csignal&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">signalHandler</span><span class=\"params\">( <span class=\"keyword\">int</span> signum )</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Interrupt signal (\"</span> &lt;&lt; signum &lt;&lt; <span class=\"string\">\") received.\\n\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 清理并关闭</span></div><div class=\"line\">    <span class=\"comment\">// 终止程序  </span></div><div class=\"line\"></div><div class=\"line\">   <span class=\"built_in\">exit</span>(signum);  </div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// 注册信号 SIGINT 和信号处理程序</span></div><div class=\"line\">    signal(SIGINT, signalHandler);  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</div><div class=\"line\">       <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Going to sleep....\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">       sleep(<span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//此时，运行循环，用ctrl c来终端，就会被捕获信号。</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>raise()函数，生成信号<br><code>int raise(signal sig);</code><br>//sig表示信号编号，<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;csignal&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">signalHandler</span><span class=\"params\">( <span class=\"keyword\">int</span> signum )</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Interrupt signal (\"</span> &lt;&lt; signum &lt;&lt; <span class=\"string\">\") received.\\n\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 清理并关闭</span></div><div class=\"line\">    <span class=\"comment\">// 终止程序 </span></div><div class=\"line\"></div><div class=\"line\">   <span class=\"built_in\">exit</span>(signum);  </div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"comment\">// 注册信号 SIGINT 和信号处理程序</span></div><div class=\"line\">    signal(SIGINT, signalHandler);  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span>(++i)&#123;</div><div class=\"line\">       <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Going to sleep....\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">       <span class=\"keyword\">if</span>( i == <span class=\"number\">3</span> )&#123;</div><div class=\"line\">          raise( SIGINT);</div><div class=\"line\">       &#125;</div><div class=\"line\">       sleep(<span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>多线程<br>多任务计算机分为两种，基于进程和基于线程。基于进程的多任务是程序的并发执行；基于线程的多任务是同一程序的片段并发执行。<br>常见操作系统多是用POSIX编写线程。<br>1、创建<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;pthread.h&gt;</span></span></div><div class=\"line\">pthread_create (thread,attr,start_routine,arg);</div><div class=\"line\"><span class=\"comment\">//参数，thread为指向线程标识符的指针，attr为不透明的属性对象，用来设置线程属性，可以设置NULL</span></div><div class=\"line\"><span class=\"comment\">//start_routine线程运行起始位置，创建线程就被执行。arg运行函数的参数，</span></div><div class=\"line\"><span class=\"comment\">//可以NULL，但是必须把引用作为指针转换为void类型传入。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//终止线程</span></div><div class=\"line\">pthread_exit(status);<span class=\"comment\">//一般不用显式调用，</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>实例：<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"comment\">// 必须的头文件是</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;pthread.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> NUM_THREADS 5</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 线程的运行函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">say_hello</span><span class=\"params\">(<span class=\"keyword\">void</span>* args)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Hello Runoob！\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// 定义线程的 id 变量，多个变量使用数组</span></div><div class=\"line\">    <span class=\"keyword\">pthread_t</span> tids[NUM_THREADS];</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; NUM_THREADS; ++i)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"comment\">//参数依次是：创建的线程id，线程参数，调用的函数，传入的函数参数</span></div><div class=\"line\">        <span class=\"keyword\">int</span> ret = pthread_create(&amp;tids[i], <span class=\"literal\">NULL</span>, say_hello, <span class=\"literal\">NULL</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (ret != <span class=\"number\">0</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">           <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"pthread_create error: error_code=\"</span> &lt;&lt; ret &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//等各个线程退出后，进程才结束，否则进程强制结束了，线程可能还没反应过来；</span></div><div class=\"line\">    pthread_exit(<span class=\"literal\">NULL</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>连接和分离线程<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\">pthread_join(threadid,status)</div><div class=\"line\">pthread_detach(threadid)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;pthread.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> NUM_THREADS     5</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> *<span class=\"title\">wait</span><span class=\"params\">(<span class=\"keyword\">void</span> *t)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">   <span class=\"keyword\">int</span> i;</div><div class=\"line\">   <span class=\"keyword\">long</span> tid;</div><div class=\"line\"></div><div class=\"line\">   tid = (<span class=\"keyword\">long</span>)t;</div><div class=\"line\"></div><div class=\"line\">   sleep(<span class=\"number\">1</span>);</div><div class=\"line\">   <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Sleeping in thread \"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">   <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Thread with id : \"</span> &lt;&lt; tid &lt;&lt; <span class=\"string\">\"  ...exiting \"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">   pthread_exit(<span class=\"literal\">NULL</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">   <span class=\"keyword\">int</span> rc;</div><div class=\"line\">   <span class=\"keyword\">int</span> i;</div><div class=\"line\">   <span class=\"keyword\">pthread_t</span> threads[NUM_THREADS];</div><div class=\"line\">   <span class=\"keyword\">pthread_attr_t</span> attr;</div><div class=\"line\">   <span class=\"keyword\">void</span> *status;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">// 初始化并设置线程为可连接的（joinable）</span></div><div class=\"line\">   pthread_attr_init(&amp;attr);</div><div class=\"line\">   pthread_attr_setdetachstate(&amp;attr, PTHREAD_CREATE_JOINABLE);</div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">for</span>( i=<span class=\"number\">0</span>; i &lt; NUM_THREADS; i++ )&#123;</div><div class=\"line\">      <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"main() : creating thread, \"</span> &lt;&lt; i &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">      rc = pthread_create(&amp;threads[i], <span class=\"literal\">NULL</span>, wait, (<span class=\"keyword\">void</span> *)i );</div><div class=\"line\">      <span class=\"keyword\">if</span> (rc)&#123;</div><div class=\"line\">         <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Error:unable to create thread,\"</span> &lt;&lt; rc &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">         <span class=\"built_in\">exit</span>(<span class=\"number\">-1</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">// 删除属性，并等待其他线程</span></div><div class=\"line\">   pthread_attr_destroy(&amp;attr);</div><div class=\"line\">   <span class=\"keyword\">for</span>( i=<span class=\"number\">0</span>; i &lt; NUM_THREADS; i++ )&#123;</div><div class=\"line\">      rc = pthread_join(threads[i], &amp;status);</div><div class=\"line\">      <span class=\"keyword\">if</span> (rc)&#123;</div><div class=\"line\">         <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Error:unable to join,\"</span> &lt;&lt; rc &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">         <span class=\"built_in\">exit</span>(<span class=\"number\">-1</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Main: completed thread id :\"</span> &lt;&lt; i ;</div><div class=\"line\">      <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"  exiting with status :\"</span> &lt;&lt; status &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Main: program exiting.\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">   pthread_exit(<span class=\"literal\">NULL</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>//效果<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">main() : creating thread, <span class=\"number\">0</span></div><div class=\"line\">main() : creating thread, <span class=\"number\">1</span></div><div class=\"line\">main() : creating thread, <span class=\"number\">2</span></div><div class=\"line\">main() : creating thread, <span class=\"number\">3</span></div><div class=\"line\">main() : creating thread, <span class=\"number\">4</span></div><div class=\"line\">Sleeping in thread </div><div class=\"line\">Thread with id : <span class=\"number\">4</span>  ...exiting </div><div class=\"line\">Sleeping in thread </div><div class=\"line\">Thread with id : <span class=\"number\">3</span>  ...exiting </div><div class=\"line\">Sleeping in thread </div><div class=\"line\">Thread with id : <span class=\"number\">2</span>  ...exiting </div><div class=\"line\">Sleeping in thread </div><div class=\"line\">Thread with id : <span class=\"number\">1</span>  ...exiting </div><div class=\"line\">Sleeping in thread </div><div class=\"line\">Thread with id : <span class=\"number\">0</span>  ...exiting </div><div class=\"line\">Main: completed thread id :<span class=\"number\">0</span>  exiting with status :<span class=\"number\">0</span></div><div class=\"line\">Main: completed thread id :<span class=\"number\">1</span>  exiting with status :<span class=\"number\">0</span></div><div class=\"line\">Main: completed thread id :<span class=\"number\">2</span>  exiting with status :<span class=\"number\">0</span></div><div class=\"line\">Main: completed thread id :<span class=\"number\">3</span>  exiting with status :<span class=\"number\">0</span></div><div class=\"line\">Main: completed thread id :<span class=\"number\">4</span>  exiting with status :<span class=\"number\">0</span></div><div class=\"line\">Main: program exiting.</div></pre></td></tr></table></figure></p>\n"},{"title":"Android开源控件搜集----Text View","date":"2017-03-27T08:57:00.000Z","author":"冰路梦","_content":"# Android开源控件搜集----Text View\n\n**Note：**本篇博客长期维护更新，欢迎各位网友共同合作，共享知识与技术。\n\n本篇博客主要搜集个人任务比较优秀的Android开源控件，大多来自github，并附上链接，自己学习之余，亦希望于大家有所帮助。\n\nAndroid的控件还算比较多，官方和第三方自定义优秀控件数不胜数，搜集难免不全，逐步更新丰富吧。\n\n## Text View\n\n其实好多第三方view，都是自定义的，未必十分符合text View的概念，姑且把个人认为的text view归类到此吧。\n\n1. Ticker\n\n   简单的可实现跳动显示字符的Text View，效果：\n\n   ![ticker](https://github.com/robinhood/ticker/raw/master/assets/ticker_main.gif)\n\n   github地址：https://github.com/robinhood/ticker\n\n2. Expandable Text View\n\n   正如项目介绍一样，这是一个可以折叠/展开的Text View，效果:\n\n   ![expandable](https://github.com/Manabu-GT/ExpandableTextView/raw/master/art/readme_demo.gif?raw=true)\n\n   github地址：https://github.com/Manabu-GT/ExpandableTextView\n\n3. SlantedTextView\n\n   倾斜的Text View，多用于给图片加个小标签，效果：\n\n   ![slanted](https://github.com/HeZaiJin/SlantedTextView/raw/master/screen_shot/screenshot.png)\n\n   github地址：https://github.com/HeZaiJin/SlantedTextView\n\n4. ReadMoreTextView\n\n   类似上面expandable TextView 这也是一个可以折叠/站看的text View控件，效果：\n\n   ![ReadMore](https://github.com/borjabravo10/ReadMoreTextView/raw/master/screenshots/collapsed.png)\n\n   github地址：https://github.com/borjabravo10/ReadMoreTextView\n\n5. SuperTextView\n\n   国人开发者写的一个自定义综合控件，常作于设置列表的item项比较合适，似乎有点实用性，效果：\n\n   ![SuperTextView](https://github.com/lygttpod/SuperTextView/raw/master/screenshot.png)\n\n   github地址：https://github.com/lygttpod/SuperTextView\n\n6. AutoLinkTextView\n\n   附带可以设置链接功能的text View，效果：\n\n   ![autolink](https://github.com/armcha/AutoLinkTextView/raw/master/screens/gif1.gif)\n\n   github地址：https://github.com/armcha/AutoLinkTextView\n\n7. Floating Text\n\n   一个可以弹出飞出文字的textview，效果：\n\n   ![floating](https://github.com/UFreedom/FloatingText/raw/master/demo.gif)\n\n   github地址：https://github.com/UFreedom/FloatingText\n\n8. SecretTextView\n\n   具有淡入淡出效果的Text View，效果：\n\n   ![Secret](https://camo.githubusercontent.com/bbb38412d3ae652f565556711e7aa6db67ebb4c7/68747470733a2f2f692e696d67666c69702e636f6d2f39356d39312e676966)\n\n   github地址：https://github.com/matthewrkula/SecretTextView\n\n9. DraweeTextView\n\n   没理解作者的描述，似乎是一个可以构造复杂图形文字显示的Text View，似乎有用？效果：\n\n   ![drawee](https://github.com/Bilibili/drawee-text-view/raw/master/art/screenshot.png)\n\n   github地址：https://github.com/Bilibili/drawee-text-view\n\n10. HTextView\n\n 支持炫酷动画效果的Text View，效果：\n\n ![htextview](https://github.com/hanks-zyh/HTextView/raw/master/screenshot/demo.gif)\n\n github地址：https://github.com/hanks-zyh/HTextView\n\n11. Titanic\n\n   这名字看不出是text view啊，呵呵，实现自动沉水的text view，效果：\n\n   ![titanic](https://github.com/RomainPiel/Titanic/raw/master/titanic.gif)\n\n   github地址：https://github.com/RomainPiel/Titanic\n\n12. Shimmer\n\n   比较流行的一个闪动式text View，效果：\n\n   ![shimmer](https://github.com/RomainPiel/Shimmer-android/raw/master/shimmer.gif)\n\n   github地址：https://github.com/RomainPiel/Shimmer-android\n\n   还有一个同名的，可能更强的，效果：\n\n   ![shimmer](https://github.com/facebook/shimmer-android/raw/master/shimmer.gif?raw=true)\n\n   github地址：https://github.com/facebook/shimmer-android\n\n13. emojicon\n\n   一个可以显示emoji表情的textview ，效果：\n\n   ![emoji](https://github.com/rockerhieu/emojicon/raw/master/images/sample.jpg)\n\n   github地址：https://github.com/rockerhieu/emojicon\n\n14. AutoFitTextView\n\n   可以在限定的大小，自动调整文字大小来适应边界，效果：\n\n   ![autofit](https://github.com/grantland/android-autofittextview/raw/master/website/static/autofittextview.gif?raw=true)\n\n   github地址：https://github.com/grantland/android-autofittextview\n\n15. iconify\n\n   可以显示很卡哇伊的效果的text view，效果：\n\n   ![iconify](https://github.com/JoanZapata/android-iconify/raw/master/graphics/androids.png)\n\n   github地址：https://github.com/JoanZapata/android-iconify\n\n16. Calligraphy\n\n   便于快速在xml中使用字体的textview，效果：\n\n   ![calligraphy](https://github.com/chrisjenx/Calligraphy/raw/master/screenshot.png)\n\n   github地址：https://github.com/chrisjenx/Calligraphy\n\n17. RobotoText View\n\n   类似上边，这个可以快捷使用android的roboto字体的textview,效果：\n\n   ![roboto](https://raw.githubusercontent.com/johnkil/Android-RobotoTextView/master/art/RobotoTextView.jpg)\n\n   github地址：https://github.com/johnkil/Android-RobotoTextView\n\n18. JumpingBeans\n\n   可以简单上下跳动的textview，效果：\n\n   ![jumping](https://github.com/frakbot/JumpingBeans/raw/master/art/jumpingdots.gif)\n\n   ![jumping](https://github.com/frakbot/JumpingBeans/raw/master/art/jumpingword.gif)\n\n   github地址：https://github.com/frakbot/JumpingBeans\n\n19. CountDown View\n\n   不知算不算text view，属于一个倒计时显示的text view吧，效果：\n\n   ![countdown](https://raw.githubusercontent.com/iwgang/CountdownView/master/screenshot/s_main.png)\n\n   github地址：https://github.com/iwgang/CountdownView\n\n20. VerTextView\n\n   竖排显示的text view，效果：\n\n   ![verText](https://github.com/lfkdsk/JustWeTools/raw/master/picture/VerTextView.png)\n\n   github地址：https://github.com/lfkdsk/JustWeTools\n\n21. LabelView\n\n   类似上面提到的SlantedTextView，这也是一个倾斜的作为标签的textview，效果：\n\n   ![label](https://github.com/linger1216/labelview/raw/master/img/img1.png)\n\n   github地址：https://github.com/linger1216/labelview\n\n22. Live emoji\n\n   可以显示动态emoji的text view，姑且成为text view吧，呵呵，效果：\n\n   ![live](https://github.com/RomainPiel/live-emoji/raw/master/image.gif)\n\n   github地址：https://github.com/RomainPiel/live-emoji\n\n23. MatchView\n\n   随风飘散的效果的text view，效果：\n\n   ![match](https://camo.githubusercontent.com/a71e9d26a7f90ea70270b3681d99785a29f83be5/687474703a2f2f7777312e73696e61696d672e636e2f6d773639302f6136393561636465677731656d79746e6b347334356732306567306d6b3439302e676966)\n\n   github地址：https://github.com/Rogero0o/MatchView\n\n24. TextJustify\n\n   算是一个可以对其调整的text view么，效果：\n\n   ![justify](https://camo.githubusercontent.com/061a4a460340c26422b2a2f43d7fe39e73246297/687474703a2f2f692e696d6775722e636f6d2f6b3662415764302e6a7067)\n\n   github地址：https://github.com/bluejamesbond/TextJustify-Android\n\n25. RoundedLetterView\n\n   类似Android联系人目录，显示头像或名字字母的text View，效果：\n\n   ![rounded](https://github.com/pavlospt/RoundedLetterView/raw/master/Screenshots/device-2014-11-13-191000.png)\n\n   github地址：https://github.com/pavlospt/RoundedLetterView\n\n26. TextDrawable\n\n   类似上面RoundedLetterView，效果：\n\n   ![text](https://github.com/amulyakhare/TextDrawable/raw/master/screens/screen1-material.png)\n\n   github 地址：https://github.com/amulyakhare/TextDrawable\n\n27. BabushkaText\n\n   可以自定义样式的textview，效果：\n\n   ![babushka](https://github.com/quiqueqs/BabushkaText/raw/master/images/example.png)\n\n   github地址：https://github.com/quiqueqs/BabushkaText\n\n28. TextSurface\n\n   可以自带动画效果的textview，效果：\n\n   ![text](https://github.com/elevenetc/TextSurface/raw/master/docs/demo.gif)\n\n   github 地址：https://github.com/elevenetc/TextSurface\n\n29. Text Counter\n\n    可以上下计数的text view，效果：\n\n    ![counter](https://github.com/premnirmal/TextCounter/blob/master/img/counter.gif?raw=true)\n\n    github地址：https://github.com/premnirmal/TextCounter\n\n30. android-ago\n\n    可以自动更新显示其生成时间的一个text view，效果：\n\n    ![text](https://github.com/curioustechizen/android-ago/raw/master/screenshots/android-ago-sample-screenshot.png)\n\n    github地址：https://github.com/curioustechizen/android-ago\n\n31. TimelyTextView\n\n    数字间变化的的一个text view，效果似乎是：\n\n    ![text](http://www.jcodecraeer.com/uploads/150127/1-15012F14312E0.gif)\n\n    github:https://github.com/adnan-SM/TimelyTextView\n\n32. ​\n","source":"_posts/Android开源控件搜集--TextView.md","raw":"---\ntitle: \"Android开源控件搜集----Text View\"\ndate: 2017-03-27 16:57\nauthor: 冰路梦\ntag:\n    - Android\ncategories:\n    - Android\n---\n# Android开源控件搜集----Text View\n\n**Note：**本篇博客长期维护更新，欢迎各位网友共同合作，共享知识与技术。\n\n本篇博客主要搜集个人任务比较优秀的Android开源控件，大多来自github，并附上链接，自己学习之余，亦希望于大家有所帮助。\n\nAndroid的控件还算比较多，官方和第三方自定义优秀控件数不胜数，搜集难免不全，逐步更新丰富吧。\n\n## Text View\n\n其实好多第三方view，都是自定义的，未必十分符合text View的概念，姑且把个人认为的text view归类到此吧。\n\n1. Ticker\n\n   简单的可实现跳动显示字符的Text View，效果：\n\n   ![ticker](https://github.com/robinhood/ticker/raw/master/assets/ticker_main.gif)\n\n   github地址：https://github.com/robinhood/ticker\n\n2. Expandable Text View\n\n   正如项目介绍一样，这是一个可以折叠/展开的Text View，效果:\n\n   ![expandable](https://github.com/Manabu-GT/ExpandableTextView/raw/master/art/readme_demo.gif?raw=true)\n\n   github地址：https://github.com/Manabu-GT/ExpandableTextView\n\n3. SlantedTextView\n\n   倾斜的Text View，多用于给图片加个小标签，效果：\n\n   ![slanted](https://github.com/HeZaiJin/SlantedTextView/raw/master/screen_shot/screenshot.png)\n\n   github地址：https://github.com/HeZaiJin/SlantedTextView\n\n4. ReadMoreTextView\n\n   类似上面expandable TextView 这也是一个可以折叠/站看的text View控件，效果：\n\n   ![ReadMore](https://github.com/borjabravo10/ReadMoreTextView/raw/master/screenshots/collapsed.png)\n\n   github地址：https://github.com/borjabravo10/ReadMoreTextView\n\n5. SuperTextView\n\n   国人开发者写的一个自定义综合控件，常作于设置列表的item项比较合适，似乎有点实用性，效果：\n\n   ![SuperTextView](https://github.com/lygttpod/SuperTextView/raw/master/screenshot.png)\n\n   github地址：https://github.com/lygttpod/SuperTextView\n\n6. AutoLinkTextView\n\n   附带可以设置链接功能的text View，效果：\n\n   ![autolink](https://github.com/armcha/AutoLinkTextView/raw/master/screens/gif1.gif)\n\n   github地址：https://github.com/armcha/AutoLinkTextView\n\n7. Floating Text\n\n   一个可以弹出飞出文字的textview，效果：\n\n   ![floating](https://github.com/UFreedom/FloatingText/raw/master/demo.gif)\n\n   github地址：https://github.com/UFreedom/FloatingText\n\n8. SecretTextView\n\n   具有淡入淡出效果的Text View，效果：\n\n   ![Secret](https://camo.githubusercontent.com/bbb38412d3ae652f565556711e7aa6db67ebb4c7/68747470733a2f2f692e696d67666c69702e636f6d2f39356d39312e676966)\n\n   github地址：https://github.com/matthewrkula/SecretTextView\n\n9. DraweeTextView\n\n   没理解作者的描述，似乎是一个可以构造复杂图形文字显示的Text View，似乎有用？效果：\n\n   ![drawee](https://github.com/Bilibili/drawee-text-view/raw/master/art/screenshot.png)\n\n   github地址：https://github.com/Bilibili/drawee-text-view\n\n10. HTextView\n\n 支持炫酷动画效果的Text View，效果：\n\n ![htextview](https://github.com/hanks-zyh/HTextView/raw/master/screenshot/demo.gif)\n\n github地址：https://github.com/hanks-zyh/HTextView\n\n11. Titanic\n\n   这名字看不出是text view啊，呵呵，实现自动沉水的text view，效果：\n\n   ![titanic](https://github.com/RomainPiel/Titanic/raw/master/titanic.gif)\n\n   github地址：https://github.com/RomainPiel/Titanic\n\n12. Shimmer\n\n   比较流行的一个闪动式text View，效果：\n\n   ![shimmer](https://github.com/RomainPiel/Shimmer-android/raw/master/shimmer.gif)\n\n   github地址：https://github.com/RomainPiel/Shimmer-android\n\n   还有一个同名的，可能更强的，效果：\n\n   ![shimmer](https://github.com/facebook/shimmer-android/raw/master/shimmer.gif?raw=true)\n\n   github地址：https://github.com/facebook/shimmer-android\n\n13. emojicon\n\n   一个可以显示emoji表情的textview ，效果：\n\n   ![emoji](https://github.com/rockerhieu/emojicon/raw/master/images/sample.jpg)\n\n   github地址：https://github.com/rockerhieu/emojicon\n\n14. AutoFitTextView\n\n   可以在限定的大小，自动调整文字大小来适应边界，效果：\n\n   ![autofit](https://github.com/grantland/android-autofittextview/raw/master/website/static/autofittextview.gif?raw=true)\n\n   github地址：https://github.com/grantland/android-autofittextview\n\n15. iconify\n\n   可以显示很卡哇伊的效果的text view，效果：\n\n   ![iconify](https://github.com/JoanZapata/android-iconify/raw/master/graphics/androids.png)\n\n   github地址：https://github.com/JoanZapata/android-iconify\n\n16. Calligraphy\n\n   便于快速在xml中使用字体的textview，效果：\n\n   ![calligraphy](https://github.com/chrisjenx/Calligraphy/raw/master/screenshot.png)\n\n   github地址：https://github.com/chrisjenx/Calligraphy\n\n17. RobotoText View\n\n   类似上边，这个可以快捷使用android的roboto字体的textview,效果：\n\n   ![roboto](https://raw.githubusercontent.com/johnkil/Android-RobotoTextView/master/art/RobotoTextView.jpg)\n\n   github地址：https://github.com/johnkil/Android-RobotoTextView\n\n18. JumpingBeans\n\n   可以简单上下跳动的textview，效果：\n\n   ![jumping](https://github.com/frakbot/JumpingBeans/raw/master/art/jumpingdots.gif)\n\n   ![jumping](https://github.com/frakbot/JumpingBeans/raw/master/art/jumpingword.gif)\n\n   github地址：https://github.com/frakbot/JumpingBeans\n\n19. CountDown View\n\n   不知算不算text view，属于一个倒计时显示的text view吧，效果：\n\n   ![countdown](https://raw.githubusercontent.com/iwgang/CountdownView/master/screenshot/s_main.png)\n\n   github地址：https://github.com/iwgang/CountdownView\n\n20. VerTextView\n\n   竖排显示的text view，效果：\n\n   ![verText](https://github.com/lfkdsk/JustWeTools/raw/master/picture/VerTextView.png)\n\n   github地址：https://github.com/lfkdsk/JustWeTools\n\n21. LabelView\n\n   类似上面提到的SlantedTextView，这也是一个倾斜的作为标签的textview，效果：\n\n   ![label](https://github.com/linger1216/labelview/raw/master/img/img1.png)\n\n   github地址：https://github.com/linger1216/labelview\n\n22. Live emoji\n\n   可以显示动态emoji的text view，姑且成为text view吧，呵呵，效果：\n\n   ![live](https://github.com/RomainPiel/live-emoji/raw/master/image.gif)\n\n   github地址：https://github.com/RomainPiel/live-emoji\n\n23. MatchView\n\n   随风飘散的效果的text view，效果：\n\n   ![match](https://camo.githubusercontent.com/a71e9d26a7f90ea70270b3681d99785a29f83be5/687474703a2f2f7777312e73696e61696d672e636e2f6d773639302f6136393561636465677731656d79746e6b347334356732306567306d6b3439302e676966)\n\n   github地址：https://github.com/Rogero0o/MatchView\n\n24. TextJustify\n\n   算是一个可以对其调整的text view么，效果：\n\n   ![justify](https://camo.githubusercontent.com/061a4a460340c26422b2a2f43d7fe39e73246297/687474703a2f2f692e696d6775722e636f6d2f6b3662415764302e6a7067)\n\n   github地址：https://github.com/bluejamesbond/TextJustify-Android\n\n25. RoundedLetterView\n\n   类似Android联系人目录，显示头像或名字字母的text View，效果：\n\n   ![rounded](https://github.com/pavlospt/RoundedLetterView/raw/master/Screenshots/device-2014-11-13-191000.png)\n\n   github地址：https://github.com/pavlospt/RoundedLetterView\n\n26. TextDrawable\n\n   类似上面RoundedLetterView，效果：\n\n   ![text](https://github.com/amulyakhare/TextDrawable/raw/master/screens/screen1-material.png)\n\n   github 地址：https://github.com/amulyakhare/TextDrawable\n\n27. BabushkaText\n\n   可以自定义样式的textview，效果：\n\n   ![babushka](https://github.com/quiqueqs/BabushkaText/raw/master/images/example.png)\n\n   github地址：https://github.com/quiqueqs/BabushkaText\n\n28. TextSurface\n\n   可以自带动画效果的textview，效果：\n\n   ![text](https://github.com/elevenetc/TextSurface/raw/master/docs/demo.gif)\n\n   github 地址：https://github.com/elevenetc/TextSurface\n\n29. Text Counter\n\n    可以上下计数的text view，效果：\n\n    ![counter](https://github.com/premnirmal/TextCounter/blob/master/img/counter.gif?raw=true)\n\n    github地址：https://github.com/premnirmal/TextCounter\n\n30. android-ago\n\n    可以自动更新显示其生成时间的一个text view，效果：\n\n    ![text](https://github.com/curioustechizen/android-ago/raw/master/screenshots/android-ago-sample-screenshot.png)\n\n    github地址：https://github.com/curioustechizen/android-ago\n\n31. TimelyTextView\n\n    数字间变化的的一个text view，效果似乎是：\n\n    ![text](http://www.jcodecraeer.com/uploads/150127/1-15012F14312E0.gif)\n\n    github:https://github.com/adnan-SM/TimelyTextView\n\n32. ​\n","slug":"Android开源控件搜集--TextView","published":1,"updated":"2017-03-28T09:40:37.127Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ndxccj000o88owa1oeeq2y","content":"<h1 id=\"Android开源控件搜集—-Text-View\"><a href=\"#Android开源控件搜集—-Text-View\" class=\"headerlink\" title=\"Android开源控件搜集—-Text View\"></a>Android开源控件搜集—-Text View</h1><p><strong>Note：</strong>本篇博客长期维护更新，欢迎各位网友共同合作，共享知识与技术。</p>\n<p>本篇博客主要搜集个人任务比较优秀的Android开源控件，大多来自github，并附上链接，自己学习之余，亦希望于大家有所帮助。</p>\n<p>Android的控件还算比较多，官方和第三方自定义优秀控件数不胜数，搜集难免不全，逐步更新丰富吧。</p>\n<h2 id=\"Text-View\"><a href=\"#Text-View\" class=\"headerlink\" title=\"Text View\"></a>Text View</h2><p>其实好多第三方view，都是自定义的，未必十分符合text View的概念，姑且把个人认为的text view归类到此吧。</p>\n<ol>\n<li><p>Ticker</p>\n<p>简单的可实现跳动显示字符的Text View，效果：</p>\n<p><img src=\"https://github.com/robinhood/ticker/raw/master/assets/ticker_main.gif\" alt=\"ticker\"></p>\n<p>github地址：<a href=\"https://github.com/robinhood/ticker\" target=\"_blank\" rel=\"external\">https://github.com/robinhood/ticker</a></p>\n</li>\n<li><p>Expandable Text View</p>\n<p>正如项目介绍一样，这是一个可以折叠/展开的Text View，效果:</p>\n<p><img src=\"https://github.com/Manabu-GT/ExpandableTextView/raw/master/art/readme_demo.gif?raw=true\" alt=\"expandable\"></p>\n<p>github地址：<a href=\"https://github.com/Manabu-GT/ExpandableTextView\" target=\"_blank\" rel=\"external\">https://github.com/Manabu-GT/ExpandableTextView</a></p>\n</li>\n<li><p>SlantedTextView</p>\n<p>倾斜的Text View，多用于给图片加个小标签，效果：</p>\n<p><img src=\"https://github.com/HeZaiJin/SlantedTextView/raw/master/screen_shot/screenshot.png\" alt=\"slanted\"></p>\n<p>github地址：<a href=\"https://github.com/HeZaiJin/SlantedTextView\" target=\"_blank\" rel=\"external\">https://github.com/HeZaiJin/SlantedTextView</a></p>\n</li>\n<li><p>ReadMoreTextView</p>\n<p>类似上面expandable TextView 这也是一个可以折叠/站看的text View控件，效果：</p>\n<p><img src=\"https://github.com/borjabravo10/ReadMoreTextView/raw/master/screenshots/collapsed.png\" alt=\"ReadMore\"></p>\n<p>github地址：<a href=\"https://github.com/borjabravo10/ReadMoreTextView\" target=\"_blank\" rel=\"external\">https://github.com/borjabravo10/ReadMoreTextView</a></p>\n</li>\n<li><p>SuperTextView</p>\n<p>国人开发者写的一个自定义综合控件，常作于设置列表的item项比较合适，似乎有点实用性，效果：</p>\n<p><img src=\"https://github.com/lygttpod/SuperTextView/raw/master/screenshot.png\" alt=\"SuperTextView\"></p>\n<p>github地址：<a href=\"https://github.com/lygttpod/SuperTextView\" target=\"_blank\" rel=\"external\">https://github.com/lygttpod/SuperTextView</a></p>\n</li>\n<li><p>AutoLinkTextView</p>\n<p>附带可以设置链接功能的text View，效果：</p>\n<p><img src=\"https://github.com/armcha/AutoLinkTextView/raw/master/screens/gif1.gif\" alt=\"autolink\"></p>\n<p>github地址：<a href=\"https://github.com/armcha/AutoLinkTextView\" target=\"_blank\" rel=\"external\">https://github.com/armcha/AutoLinkTextView</a></p>\n</li>\n<li><p>Floating Text</p>\n<p>一个可以弹出飞出文字的textview，效果：</p>\n<p><img src=\"https://github.com/UFreedom/FloatingText/raw/master/demo.gif\" alt=\"floating\"></p>\n<p>github地址：<a href=\"https://github.com/UFreedom/FloatingText\" target=\"_blank\" rel=\"external\">https://github.com/UFreedom/FloatingText</a></p>\n</li>\n<li><p>SecretTextView</p>\n<p>具有淡入淡出效果的Text View，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/bbb38412d3ae652f565556711e7aa6db67ebb4c7/68747470733a2f2f692e696d67666c69702e636f6d2f39356d39312e676966\" alt=\"Secret\"></p>\n<p>github地址：<a href=\"https://github.com/matthewrkula/SecretTextView\" target=\"_blank\" rel=\"external\">https://github.com/matthewrkula/SecretTextView</a></p>\n</li>\n<li><p>DraweeTextView</p>\n<p>没理解作者的描述，似乎是一个可以构造复杂图形文字显示的Text View，似乎有用？效果：</p>\n<p><img src=\"https://github.com/Bilibili/drawee-text-view/raw/master/art/screenshot.png\" alt=\"drawee\"></p>\n<p>github地址：<a href=\"https://github.com/Bilibili/drawee-text-view\" target=\"_blank\" rel=\"external\">https://github.com/Bilibili/drawee-text-view</a></p>\n</li>\n<li><p>HTextView</p>\n<p>支持炫酷动画效果的Text View，效果：</p>\n<p><img src=\"https://github.com/hanks-zyh/HTextView/raw/master/screenshot/demo.gif\" alt=\"htextview\"></p>\n<p>github地址：<a href=\"https://github.com/hanks-zyh/HTextView\" target=\"_blank\" rel=\"external\">https://github.com/hanks-zyh/HTextView</a></p>\n</li>\n<li><p>Titanic</p>\n<p>这名字看不出是text view啊，呵呵，实现自动沉水的text view，效果：</p>\n<p><img src=\"https://github.com/RomainPiel/Titanic/raw/master/titanic.gif\" alt=\"titanic\"></p>\n<p>github地址：<a href=\"https://github.com/RomainPiel/Titanic\" target=\"_blank\" rel=\"external\">https://github.com/RomainPiel/Titanic</a></p>\n</li>\n<li><p>Shimmer</p>\n<p>比较流行的一个闪动式text View，效果：</p>\n<p><img src=\"https://github.com/RomainPiel/Shimmer-android/raw/master/shimmer.gif\" alt=\"shimmer\"></p>\n<p>github地址：<a href=\"https://github.com/RomainPiel/Shimmer-android\" target=\"_blank\" rel=\"external\">https://github.com/RomainPiel/Shimmer-android</a></p>\n<p>还有一个同名的，可能更强的，效果：</p>\n<p><img src=\"https://github.com/facebook/shimmer-android/raw/master/shimmer.gif?raw=true\" alt=\"shimmer\"></p>\n<p>github地址：<a href=\"https://github.com/facebook/shimmer-android\" target=\"_blank\" rel=\"external\">https://github.com/facebook/shimmer-android</a></p>\n</li>\n<li><p>emojicon</p>\n<p>一个可以显示emoji表情的textview ，效果：</p>\n<p><img src=\"https://github.com/rockerhieu/emojicon/raw/master/images/sample.jpg\" alt=\"emoji\"></p>\n<p>github地址：<a href=\"https://github.com/rockerhieu/emojicon\" target=\"_blank\" rel=\"external\">https://github.com/rockerhieu/emojicon</a></p>\n</li>\n<li><p>AutoFitTextView</p>\n<p>可以在限定的大小，自动调整文字大小来适应边界，效果：</p>\n<p><img src=\"https://github.com/grantland/android-autofittextview/raw/master/website/static/autofittextview.gif?raw=true\" alt=\"autofit\"></p>\n<p>github地址：<a href=\"https://github.com/grantland/android-autofittextview\" target=\"_blank\" rel=\"external\">https://github.com/grantland/android-autofittextview</a></p>\n</li>\n<li><p>iconify</p>\n<p>可以显示很卡哇伊的效果的text view，效果：</p>\n<p><img src=\"https://github.com/JoanZapata/android-iconify/raw/master/graphics/androids.png\" alt=\"iconify\"></p>\n<p>github地址：<a href=\"https://github.com/JoanZapata/android-iconify\" target=\"_blank\" rel=\"external\">https://github.com/JoanZapata/android-iconify</a></p>\n</li>\n<li><p>Calligraphy</p>\n<p>便于快速在xml中使用字体的textview，效果：</p>\n<p><img src=\"https://github.com/chrisjenx/Calligraphy/raw/master/screenshot.png\" alt=\"calligraphy\"></p>\n<p>github地址：<a href=\"https://github.com/chrisjenx/Calligraphy\" target=\"_blank\" rel=\"external\">https://github.com/chrisjenx/Calligraphy</a></p>\n</li>\n<li><p>RobotoText View</p>\n<p>类似上边，这个可以快捷使用android的roboto字体的textview,效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/johnkil/Android-RobotoTextView/master/art/RobotoTextView.jpg\" alt=\"roboto\"></p>\n<p>github地址：<a href=\"https://github.com/johnkil/Android-RobotoTextView\" target=\"_blank\" rel=\"external\">https://github.com/johnkil/Android-RobotoTextView</a></p>\n</li>\n<li><p>JumpingBeans</p>\n<p>可以简单上下跳动的textview，效果：</p>\n<p><img src=\"https://github.com/frakbot/JumpingBeans/raw/master/art/jumpingdots.gif\" alt=\"jumping\"></p>\n<p><img src=\"https://github.com/frakbot/JumpingBeans/raw/master/art/jumpingword.gif\" alt=\"jumping\"></p>\n<p>github地址：<a href=\"https://github.com/frakbot/JumpingBeans\" target=\"_blank\" rel=\"external\">https://github.com/frakbot/JumpingBeans</a></p>\n</li>\n<li><p>CountDown View</p>\n<p>不知算不算text view，属于一个倒计时显示的text view吧，效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/iwgang/CountdownView/master/screenshot/s_main.png\" alt=\"countdown\"></p>\n<p>github地址：<a href=\"https://github.com/iwgang/CountdownView\" target=\"_blank\" rel=\"external\">https://github.com/iwgang/CountdownView</a></p>\n</li>\n<li><p>VerTextView</p>\n<p>竖排显示的text view，效果：</p>\n<p><img src=\"https://github.com/lfkdsk/JustWeTools/raw/master/picture/VerTextView.png\" alt=\"verText\"></p>\n<p>github地址：<a href=\"https://github.com/lfkdsk/JustWeTools\" target=\"_blank\" rel=\"external\">https://github.com/lfkdsk/JustWeTools</a></p>\n</li>\n<li><p>LabelView</p>\n<p>类似上面提到的SlantedTextView，这也是一个倾斜的作为标签的textview，效果：</p>\n<p><img src=\"https://github.com/linger1216/labelview/raw/master/img/img1.png\" alt=\"label\"></p>\n<p>github地址：<a href=\"https://github.com/linger1216/labelview\" target=\"_blank\" rel=\"external\">https://github.com/linger1216/labelview</a></p>\n</li>\n<li><p>Live emoji</p>\n<p>可以显示动态emoji的text view，姑且成为text view吧，呵呵，效果：</p>\n<p><img src=\"https://github.com/RomainPiel/live-emoji/raw/master/image.gif\" alt=\"live\"></p>\n<p>github地址：<a href=\"https://github.com/RomainPiel/live-emoji\" target=\"_blank\" rel=\"external\">https://github.com/RomainPiel/live-emoji</a></p>\n</li>\n<li><p>MatchView</p>\n<p>随风飘散的效果的text view，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/a71e9d26a7f90ea70270b3681d99785a29f83be5/687474703a2f2f7777312e73696e61696d672e636e2f6d773639302f6136393561636465677731656d79746e6b347334356732306567306d6b3439302e676966\" alt=\"match\"></p>\n<p>github地址：<a href=\"https://github.com/Rogero0o/MatchView\" target=\"_blank\" rel=\"external\">https://github.com/Rogero0o/MatchView</a></p>\n</li>\n<li><p>TextJustify</p>\n<p>算是一个可以对其调整的text view么，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/061a4a460340c26422b2a2f43d7fe39e73246297/687474703a2f2f692e696d6775722e636f6d2f6b3662415764302e6a7067\" alt=\"justify\"></p>\n<p>github地址：<a href=\"https://github.com/bluejamesbond/TextJustify-Android\" target=\"_blank\" rel=\"external\">https://github.com/bluejamesbond/TextJustify-Android</a></p>\n</li>\n<li><p>RoundedLetterView</p>\n<p>类似Android联系人目录，显示头像或名字字母的text View，效果：</p>\n<p><img src=\"https://github.com/pavlospt/RoundedLetterView/raw/master/Screenshots/device-2014-11-13-191000.png\" alt=\"rounded\"></p>\n<p>github地址：<a href=\"https://github.com/pavlospt/RoundedLetterView\" target=\"_blank\" rel=\"external\">https://github.com/pavlospt/RoundedLetterView</a></p>\n</li>\n<li><p>TextDrawable</p>\n<p>类似上面RoundedLetterView，效果：</p>\n<p><img src=\"https://github.com/amulyakhare/TextDrawable/raw/master/screens/screen1-material.png\" alt=\"text\"></p>\n<p>github 地址：<a href=\"https://github.com/amulyakhare/TextDrawable\" target=\"_blank\" rel=\"external\">https://github.com/amulyakhare/TextDrawable</a></p>\n</li>\n<li><p>BabushkaText</p>\n<p>可以自定义样式的textview，效果：</p>\n<p><img src=\"https://github.com/quiqueqs/BabushkaText/raw/master/images/example.png\" alt=\"babushka\"></p>\n<p>github地址：<a href=\"https://github.com/quiqueqs/BabushkaText\" target=\"_blank\" rel=\"external\">https://github.com/quiqueqs/BabushkaText</a></p>\n</li>\n<li><p>TextSurface</p>\n<p>可以自带动画效果的textview，效果：</p>\n<p><img src=\"https://github.com/elevenetc/TextSurface/raw/master/docs/demo.gif\" alt=\"text\"></p>\n<p>github 地址：<a href=\"https://github.com/elevenetc/TextSurface\" target=\"_blank\" rel=\"external\">https://github.com/elevenetc/TextSurface</a></p>\n</li>\n<li><p>Text Counter</p>\n<p>可以上下计数的text view，效果：</p>\n<p><img src=\"https://github.com/premnirmal/TextCounter/blob/master/img/counter.gif?raw=true\" alt=\"counter\"></p>\n<p>github地址：<a href=\"https://github.com/premnirmal/TextCounter\" target=\"_blank\" rel=\"external\">https://github.com/premnirmal/TextCounter</a></p>\n</li>\n<li><p>android-ago</p>\n<p>可以自动更新显示其生成时间的一个text view，效果：</p>\n<p><img src=\"https://github.com/curioustechizen/android-ago/raw/master/screenshots/android-ago-sample-screenshot.png\" alt=\"text\"></p>\n<p>github地址：<a href=\"https://github.com/curioustechizen/android-ago\" target=\"_blank\" rel=\"external\">https://github.com/curioustechizen/android-ago</a></p>\n</li>\n<li><p>TimelyTextView</p>\n<p>数字间变化的的一个text view，效果似乎是：</p>\n<p><img src=\"http://www.jcodecraeer.com/uploads/150127/1-15012F14312E0.gif\" alt=\"text\"></p>\n<p>github:<a href=\"https://github.com/adnan-SM/TimelyTextView\" target=\"_blank\" rel=\"external\">https://github.com/adnan-SM/TimelyTextView</a></p>\n</li>\n<li><p>​</p>\n</li>\n</ol>\n","excerpt":"","more":"<h1 id=\"Android开源控件搜集—-Text-View\"><a href=\"#Android开源控件搜集—-Text-View\" class=\"headerlink\" title=\"Android开源控件搜集—-Text View\"></a>Android开源控件搜集—-Text View</h1><p><strong>Note：</strong>本篇博客长期维护更新，欢迎各位网友共同合作，共享知识与技术。</p>\n<p>本篇博客主要搜集个人任务比较优秀的Android开源控件，大多来自github，并附上链接，自己学习之余，亦希望于大家有所帮助。</p>\n<p>Android的控件还算比较多，官方和第三方自定义优秀控件数不胜数，搜集难免不全，逐步更新丰富吧。</p>\n<h2 id=\"Text-View\"><a href=\"#Text-View\" class=\"headerlink\" title=\"Text View\"></a>Text View</h2><p>其实好多第三方view，都是自定义的，未必十分符合text View的概念，姑且把个人认为的text view归类到此吧。</p>\n<ol>\n<li><p>Ticker</p>\n<p>简单的可实现跳动显示字符的Text View，效果：</p>\n<p><img src=\"https://github.com/robinhood/ticker/raw/master/assets/ticker_main.gif\" alt=\"ticker\"></p>\n<p>github地址：<a href=\"https://github.com/robinhood/ticker\">https://github.com/robinhood/ticker</a></p>\n</li>\n<li><p>Expandable Text View</p>\n<p>正如项目介绍一样，这是一个可以折叠/展开的Text View，效果:</p>\n<p><img src=\"https://github.com/Manabu-GT/ExpandableTextView/raw/master/art/readme_demo.gif?raw=true\" alt=\"expandable\"></p>\n<p>github地址：<a href=\"https://github.com/Manabu-GT/ExpandableTextView\">https://github.com/Manabu-GT/ExpandableTextView</a></p>\n</li>\n<li><p>SlantedTextView</p>\n<p>倾斜的Text View，多用于给图片加个小标签，效果：</p>\n<p><img src=\"https://github.com/HeZaiJin/SlantedTextView/raw/master/screen_shot/screenshot.png\" alt=\"slanted\"></p>\n<p>github地址：<a href=\"https://github.com/HeZaiJin/SlantedTextView\">https://github.com/HeZaiJin/SlantedTextView</a></p>\n</li>\n<li><p>ReadMoreTextView</p>\n<p>类似上面expandable TextView 这也是一个可以折叠/站看的text View控件，效果：</p>\n<p><img src=\"https://github.com/borjabravo10/ReadMoreTextView/raw/master/screenshots/collapsed.png\" alt=\"ReadMore\"></p>\n<p>github地址：<a href=\"https://github.com/borjabravo10/ReadMoreTextView\">https://github.com/borjabravo10/ReadMoreTextView</a></p>\n</li>\n<li><p>SuperTextView</p>\n<p>国人开发者写的一个自定义综合控件，常作于设置列表的item项比较合适，似乎有点实用性，效果：</p>\n<p><img src=\"https://github.com/lygttpod/SuperTextView/raw/master/screenshot.png\" alt=\"SuperTextView\"></p>\n<p>github地址：<a href=\"https://github.com/lygttpod/SuperTextView\">https://github.com/lygttpod/SuperTextView</a></p>\n</li>\n<li><p>AutoLinkTextView</p>\n<p>附带可以设置链接功能的text View，效果：</p>\n<p><img src=\"https://github.com/armcha/AutoLinkTextView/raw/master/screens/gif1.gif\" alt=\"autolink\"></p>\n<p>github地址：<a href=\"https://github.com/armcha/AutoLinkTextView\">https://github.com/armcha/AutoLinkTextView</a></p>\n</li>\n<li><p>Floating Text</p>\n<p>一个可以弹出飞出文字的textview，效果：</p>\n<p><img src=\"https://github.com/UFreedom/FloatingText/raw/master/demo.gif\" alt=\"floating\"></p>\n<p>github地址：<a href=\"https://github.com/UFreedom/FloatingText\">https://github.com/UFreedom/FloatingText</a></p>\n</li>\n<li><p>SecretTextView</p>\n<p>具有淡入淡出效果的Text View，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/bbb38412d3ae652f565556711e7aa6db67ebb4c7/68747470733a2f2f692e696d67666c69702e636f6d2f39356d39312e676966\" alt=\"Secret\"></p>\n<p>github地址：<a href=\"https://github.com/matthewrkula/SecretTextView\">https://github.com/matthewrkula/SecretTextView</a></p>\n</li>\n<li><p>DraweeTextView</p>\n<p>没理解作者的描述，似乎是一个可以构造复杂图形文字显示的Text View，似乎有用？效果：</p>\n<p><img src=\"https://github.com/Bilibili/drawee-text-view/raw/master/art/screenshot.png\" alt=\"drawee\"></p>\n<p>github地址：<a href=\"https://github.com/Bilibili/drawee-text-view\">https://github.com/Bilibili/drawee-text-view</a></p>\n</li>\n<li><p>HTextView</p>\n<p>支持炫酷动画效果的Text View，效果：</p>\n<p><img src=\"https://github.com/hanks-zyh/HTextView/raw/master/screenshot/demo.gif\" alt=\"htextview\"></p>\n<p>github地址：<a href=\"https://github.com/hanks-zyh/HTextView\">https://github.com/hanks-zyh/HTextView</a></p>\n</li>\n<li><p>Titanic</p>\n<p>这名字看不出是text view啊，呵呵，实现自动沉水的text view，效果：</p>\n<p><img src=\"https://github.com/RomainPiel/Titanic/raw/master/titanic.gif\" alt=\"titanic\"></p>\n<p>github地址：<a href=\"https://github.com/RomainPiel/Titanic\">https://github.com/RomainPiel/Titanic</a></p>\n</li>\n<li><p>Shimmer</p>\n<p>比较流行的一个闪动式text View，效果：</p>\n<p><img src=\"https://github.com/RomainPiel/Shimmer-android/raw/master/shimmer.gif\" alt=\"shimmer\"></p>\n<p>github地址：<a href=\"https://github.com/RomainPiel/Shimmer-android\">https://github.com/RomainPiel/Shimmer-android</a></p>\n<p>还有一个同名的，可能更强的，效果：</p>\n<p><img src=\"https://github.com/facebook/shimmer-android/raw/master/shimmer.gif?raw=true\" alt=\"shimmer\"></p>\n<p>github地址：<a href=\"https://github.com/facebook/shimmer-android\">https://github.com/facebook/shimmer-android</a></p>\n</li>\n<li><p>emojicon</p>\n<p>一个可以显示emoji表情的textview ，效果：</p>\n<p><img src=\"https://github.com/rockerhieu/emojicon/raw/master/images/sample.jpg\" alt=\"emoji\"></p>\n<p>github地址：<a href=\"https://github.com/rockerhieu/emojicon\">https://github.com/rockerhieu/emojicon</a></p>\n</li>\n<li><p>AutoFitTextView</p>\n<p>可以在限定的大小，自动调整文字大小来适应边界，效果：</p>\n<p><img src=\"https://github.com/grantland/android-autofittextview/raw/master/website/static/autofittextview.gif?raw=true\" alt=\"autofit\"></p>\n<p>github地址：<a href=\"https://github.com/grantland/android-autofittextview\">https://github.com/grantland/android-autofittextview</a></p>\n</li>\n<li><p>iconify</p>\n<p>可以显示很卡哇伊的效果的text view，效果：</p>\n<p><img src=\"https://github.com/JoanZapata/android-iconify/raw/master/graphics/androids.png\" alt=\"iconify\"></p>\n<p>github地址：<a href=\"https://github.com/JoanZapata/android-iconify\">https://github.com/JoanZapata/android-iconify</a></p>\n</li>\n<li><p>Calligraphy</p>\n<p>便于快速在xml中使用字体的textview，效果：</p>\n<p><img src=\"https://github.com/chrisjenx/Calligraphy/raw/master/screenshot.png\" alt=\"calligraphy\"></p>\n<p>github地址：<a href=\"https://github.com/chrisjenx/Calligraphy\">https://github.com/chrisjenx/Calligraphy</a></p>\n</li>\n<li><p>RobotoText View</p>\n<p>类似上边，这个可以快捷使用android的roboto字体的textview,效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/johnkil/Android-RobotoTextView/master/art/RobotoTextView.jpg\" alt=\"roboto\"></p>\n<p>github地址：<a href=\"https://github.com/johnkil/Android-RobotoTextView\">https://github.com/johnkil/Android-RobotoTextView</a></p>\n</li>\n<li><p>JumpingBeans</p>\n<p>可以简单上下跳动的textview，效果：</p>\n<p><img src=\"https://github.com/frakbot/JumpingBeans/raw/master/art/jumpingdots.gif\" alt=\"jumping\"></p>\n<p><img src=\"https://github.com/frakbot/JumpingBeans/raw/master/art/jumpingword.gif\" alt=\"jumping\"></p>\n<p>github地址：<a href=\"https://github.com/frakbot/JumpingBeans\">https://github.com/frakbot/JumpingBeans</a></p>\n</li>\n<li><p>CountDown View</p>\n<p>不知算不算text view，属于一个倒计时显示的text view吧，效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/iwgang/CountdownView/master/screenshot/s_main.png\" alt=\"countdown\"></p>\n<p>github地址：<a href=\"https://github.com/iwgang/CountdownView\">https://github.com/iwgang/CountdownView</a></p>\n</li>\n<li><p>VerTextView</p>\n<p>竖排显示的text view，效果：</p>\n<p><img src=\"https://github.com/lfkdsk/JustWeTools/raw/master/picture/VerTextView.png\" alt=\"verText\"></p>\n<p>github地址：<a href=\"https://github.com/lfkdsk/JustWeTools\">https://github.com/lfkdsk/JustWeTools</a></p>\n</li>\n<li><p>LabelView</p>\n<p>类似上面提到的SlantedTextView，这也是一个倾斜的作为标签的textview，效果：</p>\n<p><img src=\"https://github.com/linger1216/labelview/raw/master/img/img1.png\" alt=\"label\"></p>\n<p>github地址：<a href=\"https://github.com/linger1216/labelview\">https://github.com/linger1216/labelview</a></p>\n</li>\n<li><p>Live emoji</p>\n<p>可以显示动态emoji的text view，姑且成为text view吧，呵呵，效果：</p>\n<p><img src=\"https://github.com/RomainPiel/live-emoji/raw/master/image.gif\" alt=\"live\"></p>\n<p>github地址：<a href=\"https://github.com/RomainPiel/live-emoji\">https://github.com/RomainPiel/live-emoji</a></p>\n</li>\n<li><p>MatchView</p>\n<p>随风飘散的效果的text view，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/a71e9d26a7f90ea70270b3681d99785a29f83be5/687474703a2f2f7777312e73696e61696d672e636e2f6d773639302f6136393561636465677731656d79746e6b347334356732306567306d6b3439302e676966\" alt=\"match\"></p>\n<p>github地址：<a href=\"https://github.com/Rogero0o/MatchView\">https://github.com/Rogero0o/MatchView</a></p>\n</li>\n<li><p>TextJustify</p>\n<p>算是一个可以对其调整的text view么，效果：</p>\n<p><img src=\"https://camo.githubusercontent.com/061a4a460340c26422b2a2f43d7fe39e73246297/687474703a2f2f692e696d6775722e636f6d2f6b3662415764302e6a7067\" alt=\"justify\"></p>\n<p>github地址：<a href=\"https://github.com/bluejamesbond/TextJustify-Android\">https://github.com/bluejamesbond/TextJustify-Android</a></p>\n</li>\n<li><p>RoundedLetterView</p>\n<p>类似Android联系人目录，显示头像或名字字母的text View，效果：</p>\n<p><img src=\"https://github.com/pavlospt/RoundedLetterView/raw/master/Screenshots/device-2014-11-13-191000.png\" alt=\"rounded\"></p>\n<p>github地址：<a href=\"https://github.com/pavlospt/RoundedLetterView\">https://github.com/pavlospt/RoundedLetterView</a></p>\n</li>\n<li><p>TextDrawable</p>\n<p>类似上面RoundedLetterView，效果：</p>\n<p><img src=\"https://github.com/amulyakhare/TextDrawable/raw/master/screens/screen1-material.png\" alt=\"text\"></p>\n<p>github 地址：<a href=\"https://github.com/amulyakhare/TextDrawable\">https://github.com/amulyakhare/TextDrawable</a></p>\n</li>\n<li><p>BabushkaText</p>\n<p>可以自定义样式的textview，效果：</p>\n<p><img src=\"https://github.com/quiqueqs/BabushkaText/raw/master/images/example.png\" alt=\"babushka\"></p>\n<p>github地址：<a href=\"https://github.com/quiqueqs/BabushkaText\">https://github.com/quiqueqs/BabushkaText</a></p>\n</li>\n<li><p>TextSurface</p>\n<p>可以自带动画效果的textview，效果：</p>\n<p><img src=\"https://github.com/elevenetc/TextSurface/raw/master/docs/demo.gif\" alt=\"text\"></p>\n<p>github 地址：<a href=\"https://github.com/elevenetc/TextSurface\">https://github.com/elevenetc/TextSurface</a></p>\n</li>\n<li><p>Text Counter</p>\n<p>可以上下计数的text view，效果：</p>\n<p><img src=\"https://github.com/premnirmal/TextCounter/blob/master/img/counter.gif?raw=true\" alt=\"counter\"></p>\n<p>github地址：<a href=\"https://github.com/premnirmal/TextCounter\">https://github.com/premnirmal/TextCounter</a></p>\n</li>\n<li><p>android-ago</p>\n<p>可以自动更新显示其生成时间的一个text view，效果：</p>\n<p><img src=\"https://github.com/curioustechizen/android-ago/raw/master/screenshots/android-ago-sample-screenshot.png\" alt=\"text\"></p>\n<p>github地址：<a href=\"https://github.com/curioustechizen/android-ago\">https://github.com/curioustechizen/android-ago</a></p>\n</li>\n<li><p>TimelyTextView</p>\n<p>数字间变化的的一个text view，效果似乎是：</p>\n<p><img src=\"http://www.jcodecraeer.com/uploads/150127/1-15012F14312E0.gif\" alt=\"text\"></p>\n<p>github:<a href=\"https://github.com/adnan-SM/TimelyTextView\">https://github.com/adnan-SM/TimelyTextView</a></p>\n</li>\n<li><p>​</p>\n</li>\n</ol>\n"},{"title":"Centos网络设置","date":"2016-11-03T09:31:00.000Z","_content":"\n##CentOS服务器网络配置\n*本人算是一个热爱折腾技术小白，涉猎技术广泛然而却不精通。*\n闲言少叙，且记录近日帮同事搭建测试服务器所遇到的问题，于人于己希望有益。\n\n####1、CentOS系统安装\n> 现在新的电脑原带的都是windows10系统，有安全系统之类的设置，简述一下系统安装过程。\n>    1、系统启动盘的制作：用LinuxLive制作CentOS 6.5启动盘，在戴尔vostro商用台式机上总是安装过程出问题，也许是同事下载的系统镜像有问题，或者制作过程不对。\n>    2、从官网或者centos中国上面下载了6.5的镜像，使用UltraISO制作启动盘，此次使用的是centos6.5 minimal的镜像。\n>    3、启动电脑设置取消secure boot选项。开机F12选择U盘启动，进入安装。\n\n**系统安装过程中，也许会选择安装盘的位置，选择自己的U盘sdb1之类的，也会有root账号的设置，请记住，后续登录会使用。**\n\n####2、CentOS网络配置\n> 安装好系统之后，启动登录，发现并不能联网，网上搜索各种`ifconfig eth0`的配置，然而本机并没有显示有`eth0` 使用ifconfig -a 查看到只有`lo` 、`p1p1` 、`wlan0` 、三个设备，其中`lo` 是本地回环测试，`wlan0` 是无线网卡（配置它似乎没成功上网，可能和下面的解决步骤的地方有关。）`p1p1` 也许就是本地网卡了，但是在`/etc/sysconfig/network-scripts/ifcfg-p1p1中配置类似网上所说的eth0的配置信息，并无效果，不能实现上网。\n> 各种搜索后，在百度知道里看到有个不正确的答案，却给我找到了正确的路径。\n\n> **解决方法**\n> 首先编辑`/etc/udev/rules.d/ 70-persistent-net.rules\n>\n> 1、 将`SUBSYSTEM==\"net\", ACTION==\"add\", DRIVERS==\"?*\", ATTR{address}==\"64:00:6a:3a:89:68\", ATTR{type}==\"1\", KERNEL==\"eth*\", NAME=\"p1p1\"` 中`p1p1` 改成`eth0`\n> 2、在`/etc/sysconfig/network-scripts/` 下，copy `ifcfg-p1p1` 重命名为`ifcfg-eth0` ，编辑`ifcfg-eth0` 如下：\n\n> **ifcfg-eth0**\n>\n> DEVICE=eth0\n> HWADDR=64:00:6A:3A:89:68\n> TYPE=Ethernet\n> UUID=ac0a7654-daad-46dc-914b-526d90494236\n> ONBOOT=yes\n> NM_CONTROLLED=yes\n> BOOTPROTO=none\n> IPADDR=192.168.0.144\n> PREFIX=24\n> DEFROUTE=yes\n> IPV4_FAILURE_FATAL=yes\n> IPV6INIT=no\n> GATEWAY=192.168.0.1\n> NETMASK=255.255.255.0\n> DNS1=192.168.0.1\n> DNS2=114.114.114.114\n> NAME=\"System eth0\"\n\n![这里写图片描述](Centos网络设置/p1.png)\n\n![这里写图片描述](Centos网络设置/p2.jpg)\n> 注释，DEVICE=eth0,就是网卡设备，对应刚才`70-persistent-net.rules` 中更改的名称`eth0` 。\n> HWADDR、UUID从ifcfg-p1p1中复制而来的,不改。\n> IPADDR是本机服务器所需要的ip\n> GATEWAY是网关\n> NETMASK子网掩码\n> DNS可自由配置两个公网dns或者公司的路由ip也行。\n> 注意的是BOOTPROTO设置为`none` ,ONBOOT设置yes，可以随开机生效配置。\n\n正确完成如上配置，重启服务器，既可以正常上网。*本经验未必通用，请读者自行斟酌。*","source":"_posts/Centos网络设置.md","raw":"---\ntitle: Centos网络设置\ndate: 2016-11-03 17:31\ntags:\n    - Linux\n    - Centos\n    - 网络设置\ncategories:\n    - Linux\n---\n\n##CentOS服务器网络配置\n*本人算是一个热爱折腾技术小白，涉猎技术广泛然而却不精通。*\n闲言少叙，且记录近日帮同事搭建测试服务器所遇到的问题，于人于己希望有益。\n\n####1、CentOS系统安装\n> 现在新的电脑原带的都是windows10系统，有安全系统之类的设置，简述一下系统安装过程。\n>    1、系统启动盘的制作：用LinuxLive制作CentOS 6.5启动盘，在戴尔vostro商用台式机上总是安装过程出问题，也许是同事下载的系统镜像有问题，或者制作过程不对。\n>    2、从官网或者centos中国上面下载了6.5的镜像，使用UltraISO制作启动盘，此次使用的是centos6.5 minimal的镜像。\n>    3、启动电脑设置取消secure boot选项。开机F12选择U盘启动，进入安装。\n\n**系统安装过程中，也许会选择安装盘的位置，选择自己的U盘sdb1之类的，也会有root账号的设置，请记住，后续登录会使用。**\n\n####2、CentOS网络配置\n> 安装好系统之后，启动登录，发现并不能联网，网上搜索各种`ifconfig eth0`的配置，然而本机并没有显示有`eth0` 使用ifconfig -a 查看到只有`lo` 、`p1p1` 、`wlan0` 、三个设备，其中`lo` 是本地回环测试，`wlan0` 是无线网卡（配置它似乎没成功上网，可能和下面的解决步骤的地方有关。）`p1p1` 也许就是本地网卡了，但是在`/etc/sysconfig/network-scripts/ifcfg-p1p1中配置类似网上所说的eth0的配置信息，并无效果，不能实现上网。\n> 各种搜索后，在百度知道里看到有个不正确的答案，却给我找到了正确的路径。\n\n> **解决方法**\n> 首先编辑`/etc/udev/rules.d/ 70-persistent-net.rules\n>\n> 1、 将`SUBSYSTEM==\"net\", ACTION==\"add\", DRIVERS==\"?*\", ATTR{address}==\"64:00:6a:3a:89:68\", ATTR{type}==\"1\", KERNEL==\"eth*\", NAME=\"p1p1\"` 中`p1p1` 改成`eth0`\n> 2、在`/etc/sysconfig/network-scripts/` 下，copy `ifcfg-p1p1` 重命名为`ifcfg-eth0` ，编辑`ifcfg-eth0` 如下：\n\n> **ifcfg-eth0**\n>\n> DEVICE=eth0\n> HWADDR=64:00:6A:3A:89:68\n> TYPE=Ethernet\n> UUID=ac0a7654-daad-46dc-914b-526d90494236\n> ONBOOT=yes\n> NM_CONTROLLED=yes\n> BOOTPROTO=none\n> IPADDR=192.168.0.144\n> PREFIX=24\n> DEFROUTE=yes\n> IPV4_FAILURE_FATAL=yes\n> IPV6INIT=no\n> GATEWAY=192.168.0.1\n> NETMASK=255.255.255.0\n> DNS1=192.168.0.1\n> DNS2=114.114.114.114\n> NAME=\"System eth0\"\n\n![这里写图片描述](Centos网络设置/p1.png)\n\n![这里写图片描述](Centos网络设置/p2.jpg)\n> 注释，DEVICE=eth0,就是网卡设备，对应刚才`70-persistent-net.rules` 中更改的名称`eth0` 。\n> HWADDR、UUID从ifcfg-p1p1中复制而来的,不改。\n> IPADDR是本机服务器所需要的ip\n> GATEWAY是网关\n> NETMASK子网掩码\n> DNS可自由配置两个公网dns或者公司的路由ip也行。\n> 注意的是BOOTPROTO设置为`none` ,ONBOOT设置yes，可以随开机生效配置。\n\n正确完成如上配置，重启服务器，既可以正常上网。*本经验未必通用，请读者自行斟酌。*","slug":"Centos网络设置","published":1,"updated":"2017-03-31T08:55:58.762Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ndxccm000s88owpd8ziith","content":"<p>##CentOS服务器网络配置<br><em>本人算是一个热爱折腾技术小白，涉猎技术广泛然而却不精通。</em><br>闲言少叙，且记录近日帮同事搭建测试服务器所遇到的问题，于人于己希望有益。</p>\n<p>####1、CentOS系统安装</p>\n<blockquote>\n<p>现在新的电脑原带的都是windows10系统，有安全系统之类的设置，简述一下系统安装过程。<br>   1、系统启动盘的制作：用LinuxLive制作CentOS 6.5启动盘，在戴尔vostro商用台式机上总是安装过程出问题，也许是同事下载的系统镜像有问题，或者制作过程不对。<br>   2、从官网或者centos中国上面下载了6.5的镜像，使用UltraISO制作启动盘，此次使用的是centos6.5 minimal的镜像。<br>   3、启动电脑设置取消secure boot选项。开机F12选择U盘启动，进入安装。</p>\n</blockquote>\n<p><strong>系统安装过程中，也许会选择安装盘的位置，选择自己的U盘sdb1之类的，也会有root账号的设置，请记住，后续登录会使用。</strong></p>\n<p>####2、CentOS网络配置</p>\n<blockquote>\n<p>安装好系统之后，启动登录，发现并不能联网，网上搜索各种<code>ifconfig eth0</code>的配置，然而本机并没有显示有<code>eth0</code> 使用ifconfig -a 查看到只有<code>lo</code> 、<code>p1p1</code> 、<code>wlan0</code> 、三个设备，其中<code>lo</code> 是本地回环测试，<code>wlan0</code> 是无线网卡（配置它似乎没成功上网，可能和下面的解决步骤的地方有关。）<code>p1p1</code> 也许就是本地网卡了，但是在`/etc/sysconfig/network-scripts/ifcfg-p1p1中配置类似网上所说的eth0的配置信息，并无效果，不能实现上网。<br>各种搜索后，在百度知道里看到有个不正确的答案，却给我找到了正确的路径。</p>\n<p><strong>解决方法</strong><br>首先编辑`/etc/udev/rules.d/ 70-persistent-net.rules</p>\n<p>1、 将<code>SUBSYSTEM==&quot;net&quot;, ACTION==&quot;add&quot;, DRIVERS==&quot;?*&quot;, ATTR{address}==&quot;64:00:6a:3a:89:68&quot;, ATTR{type}==&quot;1&quot;, KERNEL==&quot;eth*&quot;, NAME=&quot;p1p1&quot;</code> 中<code>p1p1</code> 改成<code>eth0</code><br>2、在<code>/etc/sysconfig/network-scripts/</code> 下，copy <code>ifcfg-p1p1</code> 重命名为<code>ifcfg-eth0</code> ，编辑<code>ifcfg-eth0</code> 如下：</p>\n<p><strong>ifcfg-eth0</strong></p>\n<p>DEVICE=eth0<br>HWADDR=64:00:6A:3A:89:68<br>TYPE=Ethernet<br>UUID=ac0a7654-daad-46dc-914b-526d90494236<br>ONBOOT=yes<br>NM_CONTROLLED=yes<br>BOOTPROTO=none<br>IPADDR=192.168.0.144<br>PREFIX=24<br>DEFROUTE=yes<br>IPV4_FAILURE_FATAL=yes<br>IPV6INIT=no<br>GATEWAY=192.168.0.1<br>NETMASK=255.255.255.0<br>DNS1=192.168.0.1<br>DNS2=114.114.114.114<br>NAME=”System eth0”</p>\n</blockquote>\n<p><img src=\"/2016/11/03/Centos网络设置/p1.png\" alt=\"这里写图片描述\"></p>\n<p><img src=\"/2016/11/03/Centos网络设置/p2.jpg\" alt=\"这里写图片描述\"></p>\n<blockquote>\n<p>注释，DEVICE=eth0,就是网卡设备，对应刚才<code>70-persistent-net.rules</code> 中更改的名称<code>eth0</code> 。<br>HWADDR、UUID从ifcfg-p1p1中复制而来的,不改。<br>IPADDR是本机服务器所需要的ip<br>GATEWAY是网关<br>NETMASK子网掩码<br>DNS可自由配置两个公网dns或者公司的路由ip也行。<br>注意的是BOOTPROTO设置为<code>none</code> ,ONBOOT设置yes，可以随开机生效配置。</p>\n</blockquote>\n<p>正确完成如上配置，重启服务器，既可以正常上网。<em>本经验未必通用，请读者自行斟酌。</em></p>\n","excerpt":"","more":"<p>##CentOS服务器网络配置<br><em>本人算是一个热爱折腾技术小白，涉猎技术广泛然而却不精通。</em><br>闲言少叙，且记录近日帮同事搭建测试服务器所遇到的问题，于人于己希望有益。</p>\n<p>####1、CentOS系统安装</p>\n<blockquote>\n<p>现在新的电脑原带的都是windows10系统，有安全系统之类的设置，简述一下系统安装过程。<br>   1、系统启动盘的制作：用LinuxLive制作CentOS 6.5启动盘，在戴尔vostro商用台式机上总是安装过程出问题，也许是同事下载的系统镜像有问题，或者制作过程不对。<br>   2、从官网或者centos中国上面下载了6.5的镜像，使用UltraISO制作启动盘，此次使用的是centos6.5 minimal的镜像。<br>   3、启动电脑设置取消secure boot选项。开机F12选择U盘启动，进入安装。</p>\n</blockquote>\n<p><strong>系统安装过程中，也许会选择安装盘的位置，选择自己的U盘sdb1之类的，也会有root账号的设置，请记住，后续登录会使用。</strong></p>\n<p>####2、CentOS网络配置</p>\n<blockquote>\n<p>安装好系统之后，启动登录，发现并不能联网，网上搜索各种<code>ifconfig eth0</code>的配置，然而本机并没有显示有<code>eth0</code> 使用ifconfig -a 查看到只有<code>lo</code> 、<code>p1p1</code> 、<code>wlan0</code> 、三个设备，其中<code>lo</code> 是本地回环测试，<code>wlan0</code> 是无线网卡（配置它似乎没成功上网，可能和下面的解决步骤的地方有关。）<code>p1p1</code> 也许就是本地网卡了，但是在`/etc/sysconfig/network-scripts/ifcfg-p1p1中配置类似网上所说的eth0的配置信息，并无效果，不能实现上网。<br>各种搜索后，在百度知道里看到有个不正确的答案，却给我找到了正确的路径。</p>\n<p><strong>解决方法</strong><br>首先编辑`/etc/udev/rules.d/ 70-persistent-net.rules</p>\n<p>1、 将<code>SUBSYSTEM==&quot;net&quot;, ACTION==&quot;add&quot;, DRIVERS==&quot;?*&quot;, ATTR{address}==&quot;64:00:6a:3a:89:68&quot;, ATTR{type}==&quot;1&quot;, KERNEL==&quot;eth*&quot;, NAME=&quot;p1p1&quot;</code> 中<code>p1p1</code> 改成<code>eth0</code><br>2、在<code>/etc/sysconfig/network-scripts/</code> 下，copy <code>ifcfg-p1p1</code> 重命名为<code>ifcfg-eth0</code> ，编辑<code>ifcfg-eth0</code> 如下：</p>\n<p><strong>ifcfg-eth0</strong></p>\n<p>DEVICE=eth0<br>HWADDR=64:00:6A:3A:89:68<br>TYPE=Ethernet<br>UUID=ac0a7654-daad-46dc-914b-526d90494236<br>ONBOOT=yes<br>NM_CONTROLLED=yes<br>BOOTPROTO=none<br>IPADDR=192.168.0.144<br>PREFIX=24<br>DEFROUTE=yes<br>IPV4_FAILURE_FATAL=yes<br>IPV6INIT=no<br>GATEWAY=192.168.0.1<br>NETMASK=255.255.255.0<br>DNS1=192.168.0.1<br>DNS2=114.114.114.114<br>NAME=”System eth0”</p>\n</blockquote>\n<p><img src=\"/2016/11/03/Centos网络设置/p1.png\" alt=\"这里写图片描述\"></p>\n<p><img src=\"/2016/11/03/Centos网络设置/p2.jpg\" alt=\"这里写图片描述\"></p>\n<blockquote>\n<p>注释，DEVICE=eth0,就是网卡设备，对应刚才<code>70-persistent-net.rules</code> 中更改的名称<code>eth0</code> 。<br>HWADDR、UUID从ifcfg-p1p1中复制而来的,不改。<br>IPADDR是本机服务器所需要的ip<br>GATEWAY是网关<br>NETMASK子网掩码<br>DNS可自由配置两个公网dns或者公司的路由ip也行。<br>注意的是BOOTPROTO设置为<code>none</code> ,ONBOOT设置yes，可以随开机生效配置。</p>\n</blockquote>\n<p>正确完成如上配置，重启服务器，既可以正常上网。<em>本经验未必通用，请读者自行斟酌。</em></p>\n"},{"title":"C语言学习笔记--基础语法三","date":"2016-12-18T11:50:00.000Z","_content":"# C語言學習筆記--基礎語法三\n\n## 1、共用體與位域\n\n​\t**共用體**，是一種特殊的數據類型，允許在相同的內存位置，存儲不同的數據類型。可以定義一個帶有多個成員的共用體，但是使用的時候，只能有一個成員有效的擁有數值。\n\n​\t共用體提供了一種使用相同內存的有效方式。\n\n- 定義共用體\n\n  `union`關鍵字，類似與結構體的定義。\n\n  ```C\n  union [union tag]{\n    member definition;\n    member definition;\n    ...\n    member definition;\n  }[one or more union variables];\n  ```\n\n  union tag爲可選項，類似結構體的定義，可以先聲明，也可以聲明並定義。\n\n  ```C\n  #include <stdio.h>\n  #inclued <string.h>\n  //這個共用體，聲明了一個Data共用體，它的變量data，以及包含了三種數據類型，i、f、str[20]，共用一個內存地址，這塊內存大小由共用體內最大成員決定。此處就是char類型的str，有20個字節位置。\n  union Data {\n    int i;\n    float f;\n    char str[20];\n  };\n  //main()函數\n  void main(){\n    //聲明共用體變量。\n    union Data data;\n    //顯示共用體內存佔用大小\n    printf(\"data的內存佔用：%d \\n\",sizeof(data));\n  }\n  //編譯運行，結果會顯示爲20\n  ```\n\n  共用體成員的訪問也類似與結構體，使用`.`符號。\n\n  ```C\n  #include <stdio.h>\n  #include <string.h>\n  union Data {\n    int i;\n    float f;\n    char str[20];\n  };\n  void main(){\n    union Data data;\n    //賦值\n    data.i = 10;\n    data.f = 220.5;\n    strcpy(data.str,\"C Programming\");\n    //輸出\n    printf(\"data.i: %d \\n\",data.i);\n    printf(\"data.f: %f \\n\",data.f);\n    printf(\"data.str: %s \\n\",data.str);\n    //這樣的輸出結果，只有最後一次會輸出正確的結果，上兩次都會數據損壞，因爲共用體只有一個可用內存變量。\n    //如果每次賦值後都輸出一下，是沒問題的，或者同時使用同一個成員變量，可以更改變量值，也是可行的。\n    data.i = 20;\n    printf(\"data.i: %d \\n\",data.i);\n    data.i = 99;\n    printf(\"data.i %d \\n\",data.i);\n  }\n  ```\n\n- 位域\n\n  位域雖然上一節也有講，但是不清楚，這麼理解吧，位域、結構體、共用體三個概念比較理解，結構體和位域用`struct`,而共用體用`union`關鍵字\n\n  | 名稱   | 是否共用內存                              | 備注                                       |\n  | ---- | ----------------------------------- | ---------------------------------------- |\n  | 結構體  | 內部成員各自有自己聲明的內存空間                    | 看作JAVA語言中的一個bean實體類                      |\n  | 共用體  | 內部成員共享內存地址和空間，最大的決定整體空間大小           | 類似與槍支，可能適配多個型號的子彈，但是每一次開槍，槍管裏就只能一個類型的子彈（姑且這麼比喻吧） |\n  | 位域   | 類似共用體，但是算作特殊的結構體，可以單個指定成員佔用的內存二進制位數 | 算是一個只有一種類型成員的共用體，暫且這麼理解。                 |\n\n  示例：\n```C\n  #include <stdio.h>\n  #include <sring.h>\n  //定義簡單的結構體\n  struct{\n    unsigned int widthValidated;\n    unsigned int heightValidated;\n  } status1;\n  //定義位域\n  struct {\n    unsigned int widthValidated : 1;\n    unsigned int heightValidated :1;\n  } status2;\n  //main()\n  void main(){\n    printf(\"status1佔用內存：%d \\n\",sizeof(status1));\n    printf(\"status2佔用內存：%d \\n\",sizeof(status2));\n  }\n  //結果會分別是8位和4位，因爲結構體算是兩個成員獨立佔用，而位域，算是兩個成員共用，而且雖然佔用4個字節，但是數據只用了1位，若是int widthValidated : 5; 那麼就會是8位了吧，位域不恩那個超出的，也不太清楚了，以後再回來看\n```\n\n  位域的聲明\n```c\n  struct {\n    /*type爲整數類型，決定了如何解釋位域的值,\n    member_name爲位域的名稱，\n    width爲位域中位的數量，不能大於制定類型的位寬度，不如int，就不能大於4個字節。\n    */\n    type [member_name] : width;\n  }\n```\n\n  位域指定了變量的位數，也就限制了數值的範圍，超出後會無法正確完成\n\n```C\n  #include <stdio.h>\n  #include <string.h>\n  //define a bitrange\n  struct {\n    //限定範圍了，0--7\n    unsigned int age:3;\n  } Age;\n  void main(){\n    Age.age = 4;\n    printf(\"Sizeof(Age):%d \\n\",sizeof(Age));\n    pringf(\"Age.age : %d \\n\",Age.age);\n    //但是不能超過3位二進制數的大小，\n    Age.age = 8;\n    printf(\"Age.age : %d \\n\",Age.age);\n    //這時候編譯會警告，數值就會是默認的0\n  }\n```\n\n- typedef\n\n  `typedef`C語言提供的一個用於給類型起新名字的關鍵字。類似與linux系統`alias`命令，就是用於自定義別名的一個關鍵字指令。\n\n  ```C\n  //定義unsigned char 爲BYTE\n  typedef unsigned char BYTE;\n  //那麼就可以用來聲明變量\n  BYTE b1;//就相當與unsigned char b1;\n  ```\n\n  習慣性的將`typedef`別名化的類型寫作大寫，當然也可以小寫。可以作用與基本數據類型，也可以作用與結構體、共用體、位域之類的自定義類型。\n\n- typedef 和 #define\n\n  `#define`是C指令，用於定義數據類型的別名，類似`typedef`\n\n  - typedef僅用於爲類型定義別名，而#define也可以定義數值的別名，如1可以定義爲ONE\n  - typedef由編譯器執行解釋，#define由預編譯器處理\n\n  ```C\n  #include <stdio.h>\n\n  //定義\n  #define TRUE 1\n  #define TWO 22\n  void main(){\n    printf(\"TURE:%d,TWO:%d \\n\",TURE,TWO);\n  }\n  ```\n\n- I/O\n\n  C語言提供了一系列的內置函數用於輸入和輸出操作。\n\n  > - 標準文件\n  >\n  >   C語言把左右設備都當作文件處理，類似與linux下，一切皆文件。\n  >\n  >   | 標準文件 | 文件指針   | 設備   |\n  >   | ---- | ------ | ---- |\n  >   | 標準輸入 | stdin  | 鍵盤   |\n  >   | 標準輸出 | stdout | 屏幕   |\n  >   | 標準錯誤 | stderr | 您的屏幕 |\n  >\n  >   文件指針是訪問文件的方式。\n  >\n  > - getchar()和putchar()函數\n  >\n  >   `int getchar(void)`函數從屏幕讀取下一個可用字符，一次讀一個，可以房子循環裏面使用。\n  >\n  >   `int putchar(Int c)`函數向屏幕輸出字符，一次輸一個，循環使用。\n  >\n  >   ```C\n  >   #include <stido.h>\n  >   void main(){\n  >     int c;\n  >     printf(\"請輸入字符：\");\n  >     c = getchar();\n  >     printf(\"\\n 您輸入的字符是：\");\n  >     putchar(c);\n  >   }\n  >   ```\n  >\n  > - gets()和puts()\n  >\n  >   **char \\*gets(char \\*s)**函數從`stdin`讀取一行到`s`所指向的緩衝區，一知道遇到終止符或者`EOF`。\n  >\n  >   **int puts(const char \\*s)**函數把字符串s和一個尾隨的換行符寫入到`stdout`。\n  >\n  >   ```c\n  >   #include <stdio.h>\n  >   void main(){\n  >     char str[100];//緩存區域\n  >     printf(\"Enter a value：\");\n  >     gets(str);\n  >     printf(\"\\n Your value:\");\n  >     puts(str);\n  >   }\n  >   ```\n  >\n  > - scanf()和printf()\n  >\n  >   `int scanf(const char \\*format,...)`函數從標準輸入流`stdin`讀取輸入，根據`fromat`來瀏覽輸入。\n  >\n  >   `int printf(const char \\*format,...)`函數吧輸出以`format`格式顯示，可以是`%s、%d、%c、%f`等。\n  >\n  > **Note:**`scanf()`讀取輸入，需要輸入的數據格式跟`format`的一樣才行，不然會報錯。遇到空格會停止讀取，便認爲結束了一個字符的讀取。\n\n- 文件讀寫\n\n  - 打開文件，`fopen()`函數來創建一個新的，或者打開已有的文件。\n\n  ```C\n  FILE *fopen(const char * filename,const char * mode);\n  ```\n\n  其中`finename`是字符串，命名文件用的。`mode`是讀寫模式\n\n  | mode | description                          |\n  | ---- | ------------------------------------ |\n  | r    | 打開一個已有的文本文件，允許讀取文件                   |\n  | w    | 打開一個文本文件，允許寫入文件。若不存在，會新建文件，從頭開始寫起    |\n  | a    | 打開一個文本文件，追加模式寫入，不存在則新建               |\n  | r+   | 打開一個文本文件，允許讀寫文件                      |\n  | w+   | 打開一個文本文件，允許讀寫。若已存在，文件會被截斷爲另長度，不存在則新建 |\n  | a+   | 打開一個文本文件，允許讀寫。不存在則新建，讀取從頭開始，寫入則是追加模式 |\n\n  若是處理的是二進制文件，寫法有點差異,多個`b`字符\n```C\n  \"rb\",\"wb\",\"ab\",\"rb+\",\"r+b\",\"wb+\",\"w+b\",\"ab+\",\"a+b\"\n```\n\n  - 關閉文件，`fclose()`關閉文件的函數\n\n  `int fclose(FILE *fp);`若關閉成功，返回`0`，關閉失敗，返回`EOF`（定義在`stdio.h`中的常量）\n\n  - 寫入文件\n\n    `fputc()`函數，將c的字符，寫入到fp的輸出流，成功則返回寫入的字符，失敗返回EOF。\n\n    ```c\n    int fputc(int c,FILE *fp);\n    ```\n\n    `fputc()`函數也可以吧字符串s寫入到fp的輸出流中，成功返回非負值，失敗返回EOF。\n\n    ```c\n    int fputs(const char *s,FILE *fp);\n    int fpuintf(FILE *fp,const char *format,...);\n    ```\n\n    示例，會在當前文件夾下，生成text文檔，含有兩句話。\n\n    ```C\n    #include <stdio.h>\n    void main(){\n      FILE *fp;\n      fp = fopen(\"./text.txt\",\"w+\");\n      fprintf(fp,\"This is testing for fprintf...\\n\");\n      fputs(\"這是測試fputs輸入\\n\",fp);\n      fclose(fp);\n    }\n    ```\n\n  - 讀取文件\n\n    `fgetc`和`fgets`函數\n\n    ```c\n    //讀取一個字符，正確返回該字符，錯誤返回EOF\n    int fgetc(FILE * fp);\n    //讀取字符串流，直到讀取到null的標識符，所以之前讀取了有效的n-1個,要是遇到\\n或者EOF則會返回讀取的字符。\n    char *fgets(char *buf,int n,FILE *fp);\n    //從文件中讀取，遇到空格會停止\n    int fscanf(FILE *fp,const char *format,...);\n    ```\n\n    示例，讀取上面的文件\n\n    ```C\n    #include <stdio.h>\n    void main(){\n      FILE *fp;\n      char buff[255];\n      fp = fopen(\"./text.txt\",\"r\");\n      //只會讀取第一個單詞，因爲遇到空格了\n      fscanf(fp,\"%s\",buff);\n      printf(\"1: %s\\n\",buff);\n      //會讀取一句話，遇到\\n或者EOF結束\n      fgets(buff,255,(FILE*)fp);\n      printf(\"2: %s\\n\",buff);\n      \n      fgets(buff,255,(FILE*)fp);\n      printf(\"3: %s\\n\",buff);\n      fclose(fp);\n    }\n    ```\n\n    首先`fscanf`只讀取了`This`，因爲它遇到了空格，之後調用`fgets`讀取剩餘部分，知道遇到`\\n`或者EOF，而第二次調用`fgets`讀取了一整句。\n\n  - 二進制讀寫函數\n\n    ```C\n    size_t fread(void *ptr,size_t size_of_elements,size_t number_of_elements,FILE *a_file);\n    size_t fwrite(const void *ptr,size_t size_of_elements,size_t size_of_elements,FILE *a_file);\n    ```\n\n    常用與存儲塊的讀寫，通常**數組**或**結構體**\n\n## 2、預處理器\n\n預處理器不是編譯器的組成部分，其會在編譯器實際編譯之前，指示編譯器做一些預處理工作。C與處理器(C Preprocessor)簡稱`CPP`，以`#`開頭，位於行首，文件首。\n\n| 指令        | 描述                 |\n| --------- | ------------------ |\n| \\#define  | 定義宏                |\n| \\#include | 包含一個源代碼文件          |\n| \\#undef   | 取消已定義的宏            |\n| \\#ifdef   | 如果定義了宏，返回真         |\n| \\#ifndef  | 如果沒有定義宏，返回真        |\n| \\#if      | 條件語句，滿足條件，則執行下面代碼  |\n| \\#else    | 與if搭配使用            |\n| \\#elif    | 也就是else if語句快      |\n| \\#endif   | 結束一個#if...#else語句塊 |\n| \\#error   | 遇到標準錯誤時，輸出錯誤       |\n| \\#pragma  | 使用標準化方法，向編譯器發布特殊指令 |\n\n示例：\n\n```C\n//定義常量別名,預處理指令，不需要;分行寫\n#define MAX 10\n//引入頭文件\n#include <stdio.h>\n#include \"myheader.h\"\n//取消宏定義，並更改\n#undef FILE_SIZE\n#define FILE_SIZE 88;\n//條件判斷，預處理的，與代碼塊的if..else不用弄混哦\n#ifndef MSG\n\t#define MSG \"message\"\n#endif\n```\n\n- 預定義宏\n\n  **ANSI C**定義了許多宏，但是不能直接修改\n\n  | 宏        | 描述                     |\n  | -------- | ---------------------- |\n  | \\_DATE\\_ | 當前日期，”MMM DD YYYY\"格式顯示 |\n  | \\_TIME\\_ | 當前時間，\"HH:MM:SS\"格式顯示    |\n  | \\_FILE\\_ | 這會包含當前文件名，一個字符串常量      |\n  | \\_LINE\\_ | 這會包含當前行號，一個十進制常量       |\n  | \\_STDC\\_ | 當編譯器以ANSI標準編譯時，則定義爲1   |\n\n- 預處理器運算符\n\n  - 宏延伸`\\`\n\n    一個宏通常寫在一行，若是太長，可以用`\\`符號延伸\n\n    ```C\n    #define message_for(a,b) \\\n    \tprintf(#a\"and\"#b \":Hello\\n\");\n    ```\n\n  - 字符串常量化`#`\n\n    定義宏時候，參數轉化爲字符常量，需要用`#`\n\n    ```C\n    #include <stdio.h>\n    #define msg(a,b) \\\n    \tprintf(#a \"和\" #b \"是朋友\");//此處就是用了#符號，\n    void main(){\n      msg(\"小白\",\"小黑\");\n    }\n    ```\n\n    輸出結果：\n\n    ```C\n    小白和小黑是朋友\n    ```\n\n  - 標記粘貼`##`\n\n    合並兩個參數\n\n    ```C\n    #include <stdio.h>\n    #define paster(n) printf(\"token：\" #n \" = %d\",token##n)\n    void main(){\n      int tocken22 = 80;\n      paster(22);//這裏輸入22,在paster函數內合並參數，就得到了token22,然後輸出token22這個變量，就得到了下面的結果，分寫一下printf函數，字符token+#n，也就是token22,token##n，代表了上面定義int token22\n    }\n    ```\n\n    輸出結果：\n\n    ```C\n    token22 = 80\n    ```\n\n    可以判斷定義\n\n    ```C\n    #inclue <stdio.h>\n    #if !defined(MSG)\n    \t#define MSG \"hahaha\"\n    #endif\n    void main(){\n      printf(\"msg == %s\\n\",MSG);\n    }\n    ```\n\n  - 參數化的宏\n\n    CPP可以使用參數化的宏來模擬函數\n\n    ```C\n    //求平方的函數\n    int square(int x){\n      return x * x;\n    }\n    //使用宏來定義,名稱和參數的括號之間不能有空格，且緊跟#define\n    #define square(x) ((x)*(x))\n    ```\n\n    然後就可以在源文件中使用\n\n    ```C\n    #include <stdio.h>\n    #define MAX(x,y) ((x)>(y)?(x):(y))\n    void main(){\n      printf(\"Max between 20 and 10 is : %d\\n\",MAX(20,10));\n    }\n    ```\n\n- 頭文件\n\n  `.h`文件，包含了C函數聲明和宏定義，被多個源文件共享。分爲**編譯器自帶**和**程序員自定義**兩類。用`#include`導入。\n\n  ```C\n  //<>包裹的，是系統的.h文件，\"\"包裹的，是程序員自定義的.h文件\n  #include <stdio.h>\n  #include \"myheader.h\"\n  //都可以通過編譯源碼時候，-l選項，將文件置於列表前。\n  ```\n\n  其實，頭文件，就相當與復制，類似與java中的導入包和文件類。導入一次就夠了，不用多次導入。一般需要判斷一下\n\n  ```c\n  #ifndef HEADER\n  #define HEADER\n  ...\n  #endif\n  ```\n\n  有條件引用\n\n  ```c\n  #if SYSTEM_1\n  \t#include \"system_1.h\"\n  #elif SYSTEM_2\n  \t#include \"system_2.h\"\n  //太多的話，可以宏定義一下\n  #define SYSTEM_H \"system_1.h\"\n  ```\n\n## 3、類型轉換\n\n編程語言中常見的數據類型轉換，從低類型轉高類型，從高類型轉低類型。向下轉換不安全的，會丟失數據精度。\n\n```C\n(type_name) variable;\n```\n\n- 整數提升\n\n  其實也就是一種類型轉換，將小範圍類型，轉爲大範圍的，char--int\n\n  ```c\n  char i = 'c';//ascii碼 99\n  int a = 17;\n  int sum = i + c;\n  //得到的sum值，就是int的，116\n  ```\n\n- 常用轉換\n\n  一般都會隱式的向上轉型，向下轉型會丟失精度，且需要強制轉型。\n\n  ![translate](http://img.blog.csdn.net/20161218194455669?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmluZ2x1bWVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n  這並不適合`賦值運算符`、邏輯運算符的`&&`、`||`\n\n- 錯誤處理\n\n  C語言不提供對錯誤的處理，其返回值出錯時多是1或者NULL，同時生成錯誤碼errno，可以在`<error.h>`中找到各種錯誤碼。通常通過返回值查找錯誤。一般初始化設這errno=0;\n\n  **errno、perror()和strerror()**，C語言提供了兩個函數來顯示errno的錯誤信息。\n\n  - perror()函數顯示您傳送的字符串，後面一個冒號、一個空格、和當前errno的文本描述\n  - strerror()函數返回一個指針，指針指向errno的錯誤描述。\n\n  示例：\n\n  ```C\n  #include <stdio.h>\n  #include <errno.h>\n  #include <string.h>\n\n  extern int errno;\n  int main(){\n    FILE * pf;\n    int errnum;\n    //以二進制形式打開文件，此處文件不存在，用於模擬錯誤\n    pf = fopen(\"./no.txt\",\"rb\");\n    if(pf==NULL){\n      errnum = errno;\n      fprintf(stderr,\"錯誤號： %d \\n\",errno);\n      perror(\"通過perror函數輸出錯誤\");\n      fprintf(stderr,\"strerror函數顯示，打開文件錯誤： %s \\n\",strerror(errnum));\n    }else{\n      fclose(pf);\n    }\n    return 0;\n  }\n  ```\n\n  錯誤種類很多，非法參數，數組越界之類的。程序正常退出時候會帶有一個EXIT_SUCCESS值，其爲宏定義，爲0。錯誤時候EXIT_FAILURE，爲-1。","source":"_posts/C语言学习笔记--基础语法三.md","raw":"---\ntitle: C语言学习笔记--基础语法三\ndate: 2016-12-18 19:50\ntags: \n    - C\ncategories:\n    - 编程相关\n---\n# C語言學習筆記--基礎語法三\n\n## 1、共用體與位域\n\n​\t**共用體**，是一種特殊的數據類型，允許在相同的內存位置，存儲不同的數據類型。可以定義一個帶有多個成員的共用體，但是使用的時候，只能有一個成員有效的擁有數值。\n\n​\t共用體提供了一種使用相同內存的有效方式。\n\n- 定義共用體\n\n  `union`關鍵字，類似與結構體的定義。\n\n  ```C\n  union [union tag]{\n    member definition;\n    member definition;\n    ...\n    member definition;\n  }[one or more union variables];\n  ```\n\n  union tag爲可選項，類似結構體的定義，可以先聲明，也可以聲明並定義。\n\n  ```C\n  #include <stdio.h>\n  #inclued <string.h>\n  //這個共用體，聲明了一個Data共用體，它的變量data，以及包含了三種數據類型，i、f、str[20]，共用一個內存地址，這塊內存大小由共用體內最大成員決定。此處就是char類型的str，有20個字節位置。\n  union Data {\n    int i;\n    float f;\n    char str[20];\n  };\n  //main()函數\n  void main(){\n    //聲明共用體變量。\n    union Data data;\n    //顯示共用體內存佔用大小\n    printf(\"data的內存佔用：%d \\n\",sizeof(data));\n  }\n  //編譯運行，結果會顯示爲20\n  ```\n\n  共用體成員的訪問也類似與結構體，使用`.`符號。\n\n  ```C\n  #include <stdio.h>\n  #include <string.h>\n  union Data {\n    int i;\n    float f;\n    char str[20];\n  };\n  void main(){\n    union Data data;\n    //賦值\n    data.i = 10;\n    data.f = 220.5;\n    strcpy(data.str,\"C Programming\");\n    //輸出\n    printf(\"data.i: %d \\n\",data.i);\n    printf(\"data.f: %f \\n\",data.f);\n    printf(\"data.str: %s \\n\",data.str);\n    //這樣的輸出結果，只有最後一次會輸出正確的結果，上兩次都會數據損壞，因爲共用體只有一個可用內存變量。\n    //如果每次賦值後都輸出一下，是沒問題的，或者同時使用同一個成員變量，可以更改變量值，也是可行的。\n    data.i = 20;\n    printf(\"data.i: %d \\n\",data.i);\n    data.i = 99;\n    printf(\"data.i %d \\n\",data.i);\n  }\n  ```\n\n- 位域\n\n  位域雖然上一節也有講，但是不清楚，這麼理解吧，位域、結構體、共用體三個概念比較理解，結構體和位域用`struct`,而共用體用`union`關鍵字\n\n  | 名稱   | 是否共用內存                              | 備注                                       |\n  | ---- | ----------------------------------- | ---------------------------------------- |\n  | 結構體  | 內部成員各自有自己聲明的內存空間                    | 看作JAVA語言中的一個bean實體類                      |\n  | 共用體  | 內部成員共享內存地址和空間，最大的決定整體空間大小           | 類似與槍支，可能適配多個型號的子彈，但是每一次開槍，槍管裏就只能一個類型的子彈（姑且這麼比喻吧） |\n  | 位域   | 類似共用體，但是算作特殊的結構體，可以單個指定成員佔用的內存二進制位數 | 算是一個只有一種類型成員的共用體，暫且這麼理解。                 |\n\n  示例：\n```C\n  #include <stdio.h>\n  #include <sring.h>\n  //定義簡單的結構體\n  struct{\n    unsigned int widthValidated;\n    unsigned int heightValidated;\n  } status1;\n  //定義位域\n  struct {\n    unsigned int widthValidated : 1;\n    unsigned int heightValidated :1;\n  } status2;\n  //main()\n  void main(){\n    printf(\"status1佔用內存：%d \\n\",sizeof(status1));\n    printf(\"status2佔用內存：%d \\n\",sizeof(status2));\n  }\n  //結果會分別是8位和4位，因爲結構體算是兩個成員獨立佔用，而位域，算是兩個成員共用，而且雖然佔用4個字節，但是數據只用了1位，若是int widthValidated : 5; 那麼就會是8位了吧，位域不恩那個超出的，也不太清楚了，以後再回來看\n```\n\n  位域的聲明\n```c\n  struct {\n    /*type爲整數類型，決定了如何解釋位域的值,\n    member_name爲位域的名稱，\n    width爲位域中位的數量，不能大於制定類型的位寬度，不如int，就不能大於4個字節。\n    */\n    type [member_name] : width;\n  }\n```\n\n  位域指定了變量的位數，也就限制了數值的範圍，超出後會無法正確完成\n\n```C\n  #include <stdio.h>\n  #include <string.h>\n  //define a bitrange\n  struct {\n    //限定範圍了，0--7\n    unsigned int age:3;\n  } Age;\n  void main(){\n    Age.age = 4;\n    printf(\"Sizeof(Age):%d \\n\",sizeof(Age));\n    pringf(\"Age.age : %d \\n\",Age.age);\n    //但是不能超過3位二進制數的大小，\n    Age.age = 8;\n    printf(\"Age.age : %d \\n\",Age.age);\n    //這時候編譯會警告，數值就會是默認的0\n  }\n```\n\n- typedef\n\n  `typedef`C語言提供的一個用於給類型起新名字的關鍵字。類似與linux系統`alias`命令，就是用於自定義別名的一個關鍵字指令。\n\n  ```C\n  //定義unsigned char 爲BYTE\n  typedef unsigned char BYTE;\n  //那麼就可以用來聲明變量\n  BYTE b1;//就相當與unsigned char b1;\n  ```\n\n  習慣性的將`typedef`別名化的類型寫作大寫，當然也可以小寫。可以作用與基本數據類型，也可以作用與結構體、共用體、位域之類的自定義類型。\n\n- typedef 和 #define\n\n  `#define`是C指令，用於定義數據類型的別名，類似`typedef`\n\n  - typedef僅用於爲類型定義別名，而#define也可以定義數值的別名，如1可以定義爲ONE\n  - typedef由編譯器執行解釋，#define由預編譯器處理\n\n  ```C\n  #include <stdio.h>\n\n  //定義\n  #define TRUE 1\n  #define TWO 22\n  void main(){\n    printf(\"TURE:%d,TWO:%d \\n\",TURE,TWO);\n  }\n  ```\n\n- I/O\n\n  C語言提供了一系列的內置函數用於輸入和輸出操作。\n\n  > - 標準文件\n  >\n  >   C語言把左右設備都當作文件處理，類似與linux下，一切皆文件。\n  >\n  >   | 標準文件 | 文件指針   | 設備   |\n  >   | ---- | ------ | ---- |\n  >   | 標準輸入 | stdin  | 鍵盤   |\n  >   | 標準輸出 | stdout | 屏幕   |\n  >   | 標準錯誤 | stderr | 您的屏幕 |\n  >\n  >   文件指針是訪問文件的方式。\n  >\n  > - getchar()和putchar()函數\n  >\n  >   `int getchar(void)`函數從屏幕讀取下一個可用字符，一次讀一個，可以房子循環裏面使用。\n  >\n  >   `int putchar(Int c)`函數向屏幕輸出字符，一次輸一個，循環使用。\n  >\n  >   ```C\n  >   #include <stido.h>\n  >   void main(){\n  >     int c;\n  >     printf(\"請輸入字符：\");\n  >     c = getchar();\n  >     printf(\"\\n 您輸入的字符是：\");\n  >     putchar(c);\n  >   }\n  >   ```\n  >\n  > - gets()和puts()\n  >\n  >   **char \\*gets(char \\*s)**函數從`stdin`讀取一行到`s`所指向的緩衝區，一知道遇到終止符或者`EOF`。\n  >\n  >   **int puts(const char \\*s)**函數把字符串s和一個尾隨的換行符寫入到`stdout`。\n  >\n  >   ```c\n  >   #include <stdio.h>\n  >   void main(){\n  >     char str[100];//緩存區域\n  >     printf(\"Enter a value：\");\n  >     gets(str);\n  >     printf(\"\\n Your value:\");\n  >     puts(str);\n  >   }\n  >   ```\n  >\n  > - scanf()和printf()\n  >\n  >   `int scanf(const char \\*format,...)`函數從標準輸入流`stdin`讀取輸入，根據`fromat`來瀏覽輸入。\n  >\n  >   `int printf(const char \\*format,...)`函數吧輸出以`format`格式顯示，可以是`%s、%d、%c、%f`等。\n  >\n  > **Note:**`scanf()`讀取輸入，需要輸入的數據格式跟`format`的一樣才行，不然會報錯。遇到空格會停止讀取，便認爲結束了一個字符的讀取。\n\n- 文件讀寫\n\n  - 打開文件，`fopen()`函數來創建一個新的，或者打開已有的文件。\n\n  ```C\n  FILE *fopen(const char * filename,const char * mode);\n  ```\n\n  其中`finename`是字符串，命名文件用的。`mode`是讀寫模式\n\n  | mode | description                          |\n  | ---- | ------------------------------------ |\n  | r    | 打開一個已有的文本文件，允許讀取文件                   |\n  | w    | 打開一個文本文件，允許寫入文件。若不存在，會新建文件，從頭開始寫起    |\n  | a    | 打開一個文本文件，追加模式寫入，不存在則新建               |\n  | r+   | 打開一個文本文件，允許讀寫文件                      |\n  | w+   | 打開一個文本文件，允許讀寫。若已存在，文件會被截斷爲另長度，不存在則新建 |\n  | a+   | 打開一個文本文件，允許讀寫。不存在則新建，讀取從頭開始，寫入則是追加模式 |\n\n  若是處理的是二進制文件，寫法有點差異,多個`b`字符\n```C\n  \"rb\",\"wb\",\"ab\",\"rb+\",\"r+b\",\"wb+\",\"w+b\",\"ab+\",\"a+b\"\n```\n\n  - 關閉文件，`fclose()`關閉文件的函數\n\n  `int fclose(FILE *fp);`若關閉成功，返回`0`，關閉失敗，返回`EOF`（定義在`stdio.h`中的常量）\n\n  - 寫入文件\n\n    `fputc()`函數，將c的字符，寫入到fp的輸出流，成功則返回寫入的字符，失敗返回EOF。\n\n    ```c\n    int fputc(int c,FILE *fp);\n    ```\n\n    `fputc()`函數也可以吧字符串s寫入到fp的輸出流中，成功返回非負值，失敗返回EOF。\n\n    ```c\n    int fputs(const char *s,FILE *fp);\n    int fpuintf(FILE *fp,const char *format,...);\n    ```\n\n    示例，會在當前文件夾下，生成text文檔，含有兩句話。\n\n    ```C\n    #include <stdio.h>\n    void main(){\n      FILE *fp;\n      fp = fopen(\"./text.txt\",\"w+\");\n      fprintf(fp,\"This is testing for fprintf...\\n\");\n      fputs(\"這是測試fputs輸入\\n\",fp);\n      fclose(fp);\n    }\n    ```\n\n  - 讀取文件\n\n    `fgetc`和`fgets`函數\n\n    ```c\n    //讀取一個字符，正確返回該字符，錯誤返回EOF\n    int fgetc(FILE * fp);\n    //讀取字符串流，直到讀取到null的標識符，所以之前讀取了有效的n-1個,要是遇到\\n或者EOF則會返回讀取的字符。\n    char *fgets(char *buf,int n,FILE *fp);\n    //從文件中讀取，遇到空格會停止\n    int fscanf(FILE *fp,const char *format,...);\n    ```\n\n    示例，讀取上面的文件\n\n    ```C\n    #include <stdio.h>\n    void main(){\n      FILE *fp;\n      char buff[255];\n      fp = fopen(\"./text.txt\",\"r\");\n      //只會讀取第一個單詞，因爲遇到空格了\n      fscanf(fp,\"%s\",buff);\n      printf(\"1: %s\\n\",buff);\n      //會讀取一句話，遇到\\n或者EOF結束\n      fgets(buff,255,(FILE*)fp);\n      printf(\"2: %s\\n\",buff);\n      \n      fgets(buff,255,(FILE*)fp);\n      printf(\"3: %s\\n\",buff);\n      fclose(fp);\n    }\n    ```\n\n    首先`fscanf`只讀取了`This`，因爲它遇到了空格，之後調用`fgets`讀取剩餘部分，知道遇到`\\n`或者EOF，而第二次調用`fgets`讀取了一整句。\n\n  - 二進制讀寫函數\n\n    ```C\n    size_t fread(void *ptr,size_t size_of_elements,size_t number_of_elements,FILE *a_file);\n    size_t fwrite(const void *ptr,size_t size_of_elements,size_t size_of_elements,FILE *a_file);\n    ```\n\n    常用與存儲塊的讀寫，通常**數組**或**結構體**\n\n## 2、預處理器\n\n預處理器不是編譯器的組成部分，其會在編譯器實際編譯之前，指示編譯器做一些預處理工作。C與處理器(C Preprocessor)簡稱`CPP`，以`#`開頭，位於行首，文件首。\n\n| 指令        | 描述                 |\n| --------- | ------------------ |\n| \\#define  | 定義宏                |\n| \\#include | 包含一個源代碼文件          |\n| \\#undef   | 取消已定義的宏            |\n| \\#ifdef   | 如果定義了宏，返回真         |\n| \\#ifndef  | 如果沒有定義宏，返回真        |\n| \\#if      | 條件語句，滿足條件，則執行下面代碼  |\n| \\#else    | 與if搭配使用            |\n| \\#elif    | 也就是else if語句快      |\n| \\#endif   | 結束一個#if...#else語句塊 |\n| \\#error   | 遇到標準錯誤時，輸出錯誤       |\n| \\#pragma  | 使用標準化方法，向編譯器發布特殊指令 |\n\n示例：\n\n```C\n//定義常量別名,預處理指令，不需要;分行寫\n#define MAX 10\n//引入頭文件\n#include <stdio.h>\n#include \"myheader.h\"\n//取消宏定義，並更改\n#undef FILE_SIZE\n#define FILE_SIZE 88;\n//條件判斷，預處理的，與代碼塊的if..else不用弄混哦\n#ifndef MSG\n\t#define MSG \"message\"\n#endif\n```\n\n- 預定義宏\n\n  **ANSI C**定義了許多宏，但是不能直接修改\n\n  | 宏        | 描述                     |\n  | -------- | ---------------------- |\n  | \\_DATE\\_ | 當前日期，”MMM DD YYYY\"格式顯示 |\n  | \\_TIME\\_ | 當前時間，\"HH:MM:SS\"格式顯示    |\n  | \\_FILE\\_ | 這會包含當前文件名，一個字符串常量      |\n  | \\_LINE\\_ | 這會包含當前行號，一個十進制常量       |\n  | \\_STDC\\_ | 當編譯器以ANSI標準編譯時，則定義爲1   |\n\n- 預處理器運算符\n\n  - 宏延伸`\\`\n\n    一個宏通常寫在一行，若是太長，可以用`\\`符號延伸\n\n    ```C\n    #define message_for(a,b) \\\n    \tprintf(#a\"and\"#b \":Hello\\n\");\n    ```\n\n  - 字符串常量化`#`\n\n    定義宏時候，參數轉化爲字符常量，需要用`#`\n\n    ```C\n    #include <stdio.h>\n    #define msg(a,b) \\\n    \tprintf(#a \"和\" #b \"是朋友\");//此處就是用了#符號，\n    void main(){\n      msg(\"小白\",\"小黑\");\n    }\n    ```\n\n    輸出結果：\n\n    ```C\n    小白和小黑是朋友\n    ```\n\n  - 標記粘貼`##`\n\n    合並兩個參數\n\n    ```C\n    #include <stdio.h>\n    #define paster(n) printf(\"token：\" #n \" = %d\",token##n)\n    void main(){\n      int tocken22 = 80;\n      paster(22);//這裏輸入22,在paster函數內合並參數，就得到了token22,然後輸出token22這個變量，就得到了下面的結果，分寫一下printf函數，字符token+#n，也就是token22,token##n，代表了上面定義int token22\n    }\n    ```\n\n    輸出結果：\n\n    ```C\n    token22 = 80\n    ```\n\n    可以判斷定義\n\n    ```C\n    #inclue <stdio.h>\n    #if !defined(MSG)\n    \t#define MSG \"hahaha\"\n    #endif\n    void main(){\n      printf(\"msg == %s\\n\",MSG);\n    }\n    ```\n\n  - 參數化的宏\n\n    CPP可以使用參數化的宏來模擬函數\n\n    ```C\n    //求平方的函數\n    int square(int x){\n      return x * x;\n    }\n    //使用宏來定義,名稱和參數的括號之間不能有空格，且緊跟#define\n    #define square(x) ((x)*(x))\n    ```\n\n    然後就可以在源文件中使用\n\n    ```C\n    #include <stdio.h>\n    #define MAX(x,y) ((x)>(y)?(x):(y))\n    void main(){\n      printf(\"Max between 20 and 10 is : %d\\n\",MAX(20,10));\n    }\n    ```\n\n- 頭文件\n\n  `.h`文件，包含了C函數聲明和宏定義，被多個源文件共享。分爲**編譯器自帶**和**程序員自定義**兩類。用`#include`導入。\n\n  ```C\n  //<>包裹的，是系統的.h文件，\"\"包裹的，是程序員自定義的.h文件\n  #include <stdio.h>\n  #include \"myheader.h\"\n  //都可以通過編譯源碼時候，-l選項，將文件置於列表前。\n  ```\n\n  其實，頭文件，就相當與復制，類似與java中的導入包和文件類。導入一次就夠了，不用多次導入。一般需要判斷一下\n\n  ```c\n  #ifndef HEADER\n  #define HEADER\n  ...\n  #endif\n  ```\n\n  有條件引用\n\n  ```c\n  #if SYSTEM_1\n  \t#include \"system_1.h\"\n  #elif SYSTEM_2\n  \t#include \"system_2.h\"\n  //太多的話，可以宏定義一下\n  #define SYSTEM_H \"system_1.h\"\n  ```\n\n## 3、類型轉換\n\n編程語言中常見的數據類型轉換，從低類型轉高類型，從高類型轉低類型。向下轉換不安全的，會丟失數據精度。\n\n```C\n(type_name) variable;\n```\n\n- 整數提升\n\n  其實也就是一種類型轉換，將小範圍類型，轉爲大範圍的，char--int\n\n  ```c\n  char i = 'c';//ascii碼 99\n  int a = 17;\n  int sum = i + c;\n  //得到的sum值，就是int的，116\n  ```\n\n- 常用轉換\n\n  一般都會隱式的向上轉型，向下轉型會丟失精度，且需要強制轉型。\n\n  ![translate](http://img.blog.csdn.net/20161218194455669?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmluZ2x1bWVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n  這並不適合`賦值運算符`、邏輯運算符的`&&`、`||`\n\n- 錯誤處理\n\n  C語言不提供對錯誤的處理，其返回值出錯時多是1或者NULL，同時生成錯誤碼errno，可以在`<error.h>`中找到各種錯誤碼。通常通過返回值查找錯誤。一般初始化設這errno=0;\n\n  **errno、perror()和strerror()**，C語言提供了兩個函數來顯示errno的錯誤信息。\n\n  - perror()函數顯示您傳送的字符串，後面一個冒號、一個空格、和當前errno的文本描述\n  - strerror()函數返回一個指針，指針指向errno的錯誤描述。\n\n  示例：\n\n  ```C\n  #include <stdio.h>\n  #include <errno.h>\n  #include <string.h>\n\n  extern int errno;\n  int main(){\n    FILE * pf;\n    int errnum;\n    //以二進制形式打開文件，此處文件不存在，用於模擬錯誤\n    pf = fopen(\"./no.txt\",\"rb\");\n    if(pf==NULL){\n      errnum = errno;\n      fprintf(stderr,\"錯誤號： %d \\n\",errno);\n      perror(\"通過perror函數輸出錯誤\");\n      fprintf(stderr,\"strerror函數顯示，打開文件錯誤： %s \\n\",strerror(errnum));\n    }else{\n      fclose(pf);\n    }\n    return 0;\n  }\n  ```\n\n  錯誤種類很多，非法參數，數組越界之類的。程序正常退出時候會帶有一個EXIT_SUCCESS值，其爲宏定義，爲0。錯誤時候EXIT_FAILURE，爲-1。","slug":"C语言学习笔记--基础语法三","published":1,"updated":"2017-03-31T08:36:28.531Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ndxccn000v88ow0usxvyef","content":"<h1 id=\"C語言學習筆記–基礎語法三\"><a href=\"#C語言學習筆記–基礎語法三\" class=\"headerlink\" title=\"C語言學習筆記–基礎語法三\"></a>C語言學習筆記–基礎語法三</h1><h2 id=\"1、共用體與位域\"><a href=\"#1、共用體與位域\" class=\"headerlink\" title=\"1、共用體與位域\"></a>1、共用體與位域</h2><p>​    <strong>共用體</strong>，是一種特殊的數據類型，允許在相同的內存位置，存儲不同的數據類型。可以定義一個帶有多個成員的共用體，但是使用的時候，只能有一個成員有效的擁有數值。</p>\n<p>​    共用體提供了一種使用相同內存的有效方式。</p>\n<ul>\n<li><p>定義共用體</p>\n<p><code>union</code>關鍵字，類似與結構體的定義。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">union</span> [<span class=\"keyword\">union</span> tag]&#123;</div><div class=\"line\">  member definition;</div><div class=\"line\">  member definition;</div><div class=\"line\">  ...</div><div class=\"line\">  member definition;</div><div class=\"line\">&#125;[one or more <span class=\"keyword\">union</span> variables];</div></pre></td></tr></table></figure>\n<p>union tag爲可選項，類似結構體的定義，可以先聲明，也可以聲明並定義。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#inclued <span class=\"meta-string\">&lt;string.h&gt;</span></span></div><div class=\"line\"><span class=\"comment\">//這個共用體，聲明了一個Data共用體，它的變量data，以及包含了三種數據類型，i、f、str[20]，共用一個內存地址，這塊內存大小由共用體內最大成員決定。此處就是char類型的str，有20個字節位置。</span></div><div class=\"line\"><span class=\"keyword\">union</span> Data &#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> i;</div><div class=\"line\">  <span class=\"keyword\">float</span> f;</div><div class=\"line\">  <span class=\"keyword\">char</span> str[<span class=\"number\">20</span>];</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">//main()函數</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"comment\">//聲明共用體變量。</span></div><div class=\"line\">  <span class=\"keyword\">union</span> Data data;</div><div class=\"line\">  <span class=\"comment\">//顯示共用體內存佔用大小</span></div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"data的內存佔用：%d \\n\"</span>,<span class=\"keyword\">sizeof</span>(data));</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//編譯運行，結果會顯示爲20</span></div></pre></td></tr></table></figure>\n<p>共用體成員的訪問也類似與結構體，使用<code>.</code>符號。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">union</span> Data &#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> i;</div><div class=\"line\">  <span class=\"keyword\">float</span> f;</div><div class=\"line\">  <span class=\"keyword\">char</span> str[<span class=\"number\">20</span>];</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">union</span> Data data;</div><div class=\"line\">  <span class=\"comment\">//賦值</span></div><div class=\"line\">  data.i = <span class=\"number\">10</span>;</div><div class=\"line\">  data.f = <span class=\"number\">220.5</span>;</div><div class=\"line\">  <span class=\"built_in\">strcpy</span>(data.str,<span class=\"string\">\"C Programming\"</span>);</div><div class=\"line\">  <span class=\"comment\">//輸出</span></div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"data.i: %d \\n\"</span>,data.i);</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"data.f: %f \\n\"</span>,data.f);</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"data.str: %s \\n\"</span>,data.str);</div><div class=\"line\">  <span class=\"comment\">//這樣的輸出結果，只有最後一次會輸出正確的結果，上兩次都會數據損壞，因爲共用體只有一個可用內存變量。</span></div><div class=\"line\">  <span class=\"comment\">//如果每次賦值後都輸出一下，是沒問題的，或者同時使用同一個成員變量，可以更改變量值，也是可行的。</span></div><div class=\"line\">  data.i = <span class=\"number\">20</span>;</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"data.i: %d \\n\"</span>,data.i);</div><div class=\"line\">  data.i = <span class=\"number\">99</span>;</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"data.i %d \\n\"</span>,data.i);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>位域</p>\n<p>位域雖然上一節也有講，但是不清楚，這麼理解吧，位域、結構體、共用體三個概念比較理解，結構體和位域用<code>struct</code>,而共用體用<code>union</code>關鍵字</p>\n<p>| 名稱   | 是否共用內存                              | 備注                                       |<br>| —- | ———————————– | —————————————- |<br>| 結構體  | 內部成員各自有自己聲明的內存空間                    | 看作JAVA語言中的一個bean實體類                      |<br>| 共用體  | 內部成員共享內存地址和空間，最大的決定整體空間大小           | 類似與槍支，可能適配多個型號的子彈，但是每一次開槍，槍管裏就只能一個類型的子彈（姑且這麼比喻吧） |<br>| 位域   | 類似共用體，但是算作特殊的結構體，可以單個指定成員佔用的內存二進制位數 | 算是一個只有一種類型成員的共用體，暫且這麼理解。                 |</p>\n<p>示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sring.h&gt;</span></span></div><div class=\"line\"><span class=\"comment\">//定義簡單的結構體</span></div><div class=\"line\"><span class=\"keyword\">struct</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> widthValidated;</div><div class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> heightValidated;</div><div class=\"line\">&#125; status1;</div><div class=\"line\"><span class=\"comment\">//定義位域</span></div><div class=\"line\"><span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> widthValidated : <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> heightValidated :<span class=\"number\">1</span>;</div><div class=\"line\">&#125; status2;</div><div class=\"line\"><span class=\"comment\">//main()</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"status1佔用內存：%d \\n\"</span>,<span class=\"keyword\">sizeof</span>(status1));</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"status2佔用內存：%d \\n\"</span>,<span class=\"keyword\">sizeof</span>(status2));</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//結果會分別是8位和4位，因爲結構體算是兩個成員獨立佔用，而位域，算是兩個成員共用，而且雖然佔用4個字節，但是數據只用了1位，若是int widthValidated : 5; 那麼就會是8位了吧，位域不恩那個超出的，也不太清楚了，以後再回來看</span></div></pre></td></tr></table></figure>\n<p>位域的聲明</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">  <span class=\"comment\">/*type爲整數類型，決定了如何解釋位域的值,</span></div><div class=\"line\">  member_name爲位域的名稱，</div><div class=\"line\">  width爲位域中位的數量，不能大於制定類型的位寬度，不如int，就不能大於4個字節。</div><div class=\"line\">  */</div><div class=\"line\">  type [member_name] : width;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>位域指定了變量的位數，也就限制了數值的範圍，超出後會無法正確完成</p>\n</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></div><div class=\"line\"><span class=\"comment\">//define a bitrange</span></div><div class=\"line\"><span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">  <span class=\"comment\">//限定範圍了，0--7</span></div><div class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> age:<span class=\"number\">3</span>;</div><div class=\"line\">&#125; Age;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  Age.age = <span class=\"number\">4</span>;</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Sizeof(Age):%d \\n\"</span>,<span class=\"keyword\">sizeof</span>(Age));</div><div class=\"line\">  pringf(<span class=\"string\">\"Age.age : %d \\n\"</span>,Age.age);</div><div class=\"line\">  <span class=\"comment\">//但是不能超過3位二進制數的大小，</span></div><div class=\"line\">  Age.age = <span class=\"number\">8</span>;</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Age.age : %d \\n\"</span>,Age.age);</div><div class=\"line\">  <span class=\"comment\">//這時候編譯會警告，數值就會是默認的0</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>typedef</p>\n<p><code>typedef</code>C語言提供的一個用於給類型起新名字的關鍵字。類似與linux系統<code>alias</code>命令，就是用於自定義別名的一個關鍵字指令。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//定義unsigned char 爲BYTE</span></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> BYTE;</div><div class=\"line\"><span class=\"comment\">//那麼就可以用來聲明變量</span></div><div class=\"line\">BYTE b1;<span class=\"comment\">//就相當與unsigned char b1;</span></div></pre></td></tr></table></figure>\n<p>習慣性的將<code>typedef</code>別名化的類型寫作大寫，當然也可以小寫。可以作用與基本數據類型，也可以作用與結構體、共用體、位域之類的自定義類型。</p>\n</li>\n<li><p>typedef 和 #define</p>\n<p><code>#define</code>是C指令，用於定義數據類型的別名，類似<code>typedef</code></p>\n<ul>\n<li>typedef僅用於爲類型定義別名，而#define也可以定義數值的別名，如1可以定義爲ONE</li>\n<li>typedef由編譯器執行解釋，#define由預編譯器處理</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//定義</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TRUE 1</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TWO 22</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"TURE:%d,TWO:%d \\n\"</span>,TURE,TWO);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>I/O</p>\n<p>C語言提供了一系列的內置函數用於輸入和輸出操作。</p>\n<blockquote>\n<ul>\n<li><p>標準文件</p>\n<p>C語言把左右設備都當作文件處理，類似與linux下，一切皆文件。</p>\n<p>| 標準文件 | 文件指針   | 設備   |<br>| —- | —— | —- |<br>| 標準輸入 | stdin  | 鍵盤   |<br>| 標準輸出 | stdout | 屏幕   |<br>| 標準錯誤 | stderr | 您的屏幕 |</p>\n<p>文件指針是訪問文件的方式。</p>\n</li>\n<li><p>getchar()和putchar()函數</p>\n<p><code>int getchar(void)</code>函數從屏幕讀取下一個可用字符，一次讀一個，可以房子循環裏面使用。</p>\n<p><code>int putchar(Int c)</code>函數向屏幕輸出字符，一次輸一個，循環使用。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stido.h&gt;</span></span></div><div class=\"line\">&gt;   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">&gt;     <span class=\"keyword\">int</span> c;</div><div class=\"line\">&gt;     <span class=\"built_in\">printf</span>(<span class=\"string\">\"請輸入字符：\"</span>);</div><div class=\"line\">&gt;     c = getchar();</div><div class=\"line\">&gt;     <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n 您輸入的字符是：\"</span>);</div><div class=\"line\">&gt;     <span class=\"built_in\">putchar</span>(c);</div><div class=\"line\">&gt;   &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>gets()和puts()</p>\n<p><strong>char *gets(char *s)</strong>函數從<code>stdin</code>讀取一行到<code>s</code>所指向的緩衝區，一知道遇到終止符或者<code>EOF</code>。</p>\n<p><strong>int puts(const char *s)</strong>函數把字符串s和一個尾隨的換行符寫入到<code>stdout</code>。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\">&gt;   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">&gt;     <span class=\"keyword\">char</span> str[<span class=\"number\">100</span>];<span class=\"comment\">//緩存區域</span></div><div class=\"line\">&gt;     <span class=\"built_in\">printf</span>(<span class=\"string\">\"Enter a value：\"</span>);</div><div class=\"line\">&gt;     gets(str);</div><div class=\"line\">&gt;     <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n Your value:\"</span>);</div><div class=\"line\">&gt;     <span class=\"built_in\">puts</span>(str);</div><div class=\"line\">&gt;   &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>scanf()和printf()</p>\n<p><code>int scanf(const char \\*format,...)</code>函數從標準輸入流<code>stdin</code>讀取輸入，根據<code>fromat</code>來瀏覽輸入。</p>\n<p><code>int printf(const char \\*format,...)</code>函數吧輸出以<code>format</code>格式顯示，可以是<code>%s、%d、%c、%f</code>等。</p>\n</li>\n</ul>\n<p><strong>Note:</strong><code>scanf()</code>讀取輸入，需要輸入的數據格式跟<code>format</code>的一樣才行，不然會報錯。遇到空格會停止讀取，便認爲結束了一個字符的讀取。</p>\n</blockquote>\n</li>\n<li><p>文件讀寫</p>\n<ul>\n<li>打開文件，<code>fopen()</code>函數來創建一個新的，或者打開已有的文件。</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">FILE *<span class=\"title\">fopen</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * filename,<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * mode)</span></span>;</div></pre></td></tr></table></figure>\n<p>其中<code>finename</code>是字符串，命名文件用的。<code>mode</code>是讀寫模式</p>\n<p>| mode | description                          |<br>| —- | ———————————— |<br>| r    | 打開一個已有的文本文件，允許讀取文件                   |<br>| w    | 打開一個文本文件，允許寫入文件。若不存在，會新建文件，從頭開始寫起    |<br>| a    | 打開一個文本文件，追加模式寫入，不存在則新建               |<br>| r+   | 打開一個文本文件，允許讀寫文件                      |<br>| w+   | 打開一個文本文件，允許讀寫。若已存在，文件會被截斷爲另長度，不存在則新建 |<br>| a+   | 打開一個文本文件，允許讀寫。不存在則新建，讀取從頭開始，寫入則是追加模式 |</p>\n<p>若是處理的是二進制文件，寫法有點差異,多個<code>b</code>字符</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"rb\"</span>,<span class=\"string\">\"wb\"</span>,<span class=\"string\">\"ab\"</span>,<span class=\"string\">\"rb+\"</span>,<span class=\"string\">\"r+b\"</span>,<span class=\"string\">\"wb+\"</span>,<span class=\"string\">\"w+b\"</span>,<span class=\"string\">\"ab+\"</span>,<span class=\"string\">\"a+b\"</span></div></pre></td></tr></table></figure>\n<ul>\n<li>關閉文件，<code>fclose()</code>關閉文件的函數</li>\n</ul>\n<p><code>int fclose(FILE *fp);</code>若關閉成功，返回<code>0</code>，關閉失敗，返回<code>EOF</code>（定義在<code>stdio.h</code>中的常量）</p>\n<ul>\n<li><p>寫入文件</p>\n<p><code>fputc()</code>函數，將c的字符，寫入到fp的輸出流，成功則返回寫入的字符，失敗返回EOF。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fputc</span><span class=\"params\">(<span class=\"keyword\">int</span> c,FILE *fp)</span></span>;</div></pre></td></tr></table></figure>\n<p><code>fputc()</code>函數也可以吧字符串s寫入到fp的輸出流中，成功返回非負值，失敗返回EOF。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fputs</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *s,FILE *fp)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fpuintf</span><span class=\"params\">(FILE *fp,<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *format,...)</span></span>;</div></pre></td></tr></table></figure>\n<p>示例，會在當前文件夾下，生成text文檔，含有兩句話。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  FILE *fp;</div><div class=\"line\">  fp = fopen(<span class=\"string\">\"./text.txt\"</span>,<span class=\"string\">\"w+\"</span>);</div><div class=\"line\">  <span class=\"built_in\">fprintf</span>(fp,<span class=\"string\">\"This is testing for fprintf...\\n\"</span>);</div><div class=\"line\">  <span class=\"built_in\">fputs</span>(<span class=\"string\">\"這是測試fputs輸入\\n\"</span>,fp);</div><div class=\"line\">  fclose(fp);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>讀取文件</p>\n<p><code>fgetc</code>和<code>fgets</code>函數</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//讀取一個字符，正確返回該字符，錯誤返回EOF</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fgetc</span><span class=\"params\">(FILE * fp)</span></span>;</div><div class=\"line\"><span class=\"comment\">//讀取字符串流，直到讀取到null的標識符，所以之前讀取了有效的n-1個,要是遇到\\n或者EOF則會返回讀取的字符。</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> *<span class=\"title\">fgets</span><span class=\"params\">(<span class=\"keyword\">char</span> *buf,<span class=\"keyword\">int</span> n,FILE *fp)</span></span>;</div><div class=\"line\"><span class=\"comment\">//從文件中讀取，遇到空格會停止</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fscanf</span><span class=\"params\">(FILE *fp,<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *format,...)</span></span>;</div></pre></td></tr></table></figure>\n<p>示例，讀取上面的文件</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  FILE *fp;</div><div class=\"line\">  <span class=\"keyword\">char</span> buff[<span class=\"number\">255</span>];</div><div class=\"line\">  fp = fopen(<span class=\"string\">\"./text.txt\"</span>,<span class=\"string\">\"r\"</span>);</div><div class=\"line\">  <span class=\"comment\">//只會讀取第一個單詞，因爲遇到空格了</span></div><div class=\"line\">  <span class=\"built_in\">fscanf</span>(fp,<span class=\"string\">\"%s\"</span>,buff);</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"1: %s\\n\"</span>,buff);</div><div class=\"line\">  <span class=\"comment\">//會讀取一句話，遇到\\n或者EOF結束</span></div><div class=\"line\">  fgets(buff,<span class=\"number\">255</span>,(FILE*)fp);</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"2: %s\\n\"</span>,buff);</div><div class=\"line\">  </div><div class=\"line\">  fgets(buff,<span class=\"number\">255</span>,(FILE*)fp);</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"3: %s\\n\"</span>,buff);</div><div class=\"line\">  fclose(fp);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>首先<code>fscanf</code>只讀取了<code>This</code>，因爲它遇到了空格，之後調用<code>fgets</code>讀取剩餘部分，知道遇到<code>\\n</code>或者EOF，而第二次調用<code>fgets</code>讀取了一整句。</p>\n</li>\n<li><p>二進制讀寫函數</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">size_t</span> fread(<span class=\"keyword\">void</span> *ptr,<span class=\"keyword\">size_t</span> size_of_elements,<span class=\"keyword\">size_t</span> number_of_elements,FILE *a_file);</div><div class=\"line\"><span class=\"keyword\">size_t</span> fwrite(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *ptr,<span class=\"keyword\">size_t</span> size_of_elements,<span class=\"keyword\">size_t</span> size_of_elements,FILE *a_file);</div></pre></td></tr></table></figure>\n<p>常用與存儲塊的讀寫，通常<strong>數組</strong>或<strong>結構體</strong></p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2、預處理器\"><a href=\"#2、預處理器\" class=\"headerlink\" title=\"2、預處理器\"></a>2、預處理器</h2><p>預處理器不是編譯器的組成部分，其會在編譯器實際編譯之前，指示編譯器做一些預處理工作。C與處理器(C Preprocessor)簡稱<code>CPP</code>，以<code>#</code>開頭，位於行首，文件首。</p>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>#define</td>\n<td>定義宏</td>\n</tr>\n<tr>\n<td>#include</td>\n<td>包含一個源代碼文件</td>\n</tr>\n<tr>\n<td>#undef</td>\n<td>取消已定義的宏</td>\n</tr>\n<tr>\n<td>#ifdef</td>\n<td>如果定義了宏，返回真</td>\n</tr>\n<tr>\n<td>#ifndef</td>\n<td>如果沒有定義宏，返回真</td>\n</tr>\n<tr>\n<td>#if</td>\n<td>條件語句，滿足條件，則執行下面代碼</td>\n</tr>\n<tr>\n<td>#else</td>\n<td>與if搭配使用</td>\n</tr>\n<tr>\n<td>#elif</td>\n<td>也就是else if語句快</td>\n</tr>\n<tr>\n<td>#endif</td>\n<td>結束一個#if…#else語句塊</td>\n</tr>\n<tr>\n<td>#error</td>\n<td>遇到標準錯誤時，輸出錯誤</td>\n</tr>\n<tr>\n<td>#pragma</td>\n<td>使用標準化方法，向編譯器發布特殊指令</td>\n</tr>\n</tbody>\n</table>\n<p>示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//定義常量別名,預處理指令，不需要;分行寫</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAX 10</span></div><div class=\"line\"><span class=\"comment\">//引入頭文件</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"myheader.h\"</span></span></div><div class=\"line\"><span class=\"comment\">//取消宏定義，並更改</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">undef</span> FILE_SIZE</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FILE_SIZE 88;</span></div><div class=\"line\"><span class=\"comment\">//條件判斷，預處理的，與代碼塊的if..else不用弄混哦</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> MSG</span></div><div class=\"line\">\t<span class=\"meta\">#<span class=\"meta-keyword\">define</span> MSG <span class=\"meta-string\">\"message\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div></pre></td></tr></table></figure>\n<ul>\n<li><p>預定義宏</p>\n<p><strong>ANSI C</strong>定義了許多宏，但是不能直接修改</p>\n<p>| 宏        | 描述                     |<br>| ——– | ———————- |<br>| _DATE_ | 當前日期，”MMM DD YYYY”格式顯示 |<br>| _TIME_ | 當前時間，”HH:MM:SS”格式顯示    |<br>| _FILE_ | 這會包含當前文件名，一個字符串常量      |<br>| _LINE_ | 這會包含當前行號，一個十進制常量       |<br>| _STDC_ | 當編譯器以ANSI標準編譯時，則定義爲1   |</p>\n</li>\n<li><p>預處理器運算符</p>\n<ul>\n<li><p>宏延伸<code>\\</code></p>\n<p>一個宏通常寫在一行，若是太長，可以用<code>\\</code>符號延伸</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> message_for(a,b) \\</span></div><div class=\"line\">\tprintf(#a<span class=\"meta-string\">\"and\"</span>#b <span class=\"meta-string\">\":Hello\\n\"</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>字符串常量化<code>#</code></p>\n<p>定義宏時候，參數轉化爲字符常量，需要用<code>#</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> msg(a,b) \\</span></div><div class=\"line\">\tprintf(#a <span class=\"meta-string\">\"和\"</span> #b <span class=\"meta-string\">\"是朋友\"</span>);<span class=\"comment\">//此處就是用了#符號，</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  msg(<span class=\"string\">\"小白\"</span>,<span class=\"string\">\"小黑\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>輸出結果：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">小白和小黑是朋友</div></pre></td></tr></table></figure>\n</li>\n<li><p>標記粘貼<code>##</code></p>\n<p>合並兩個參數</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> paster(n) printf(<span class=\"meta-string\">\"token：\"</span> #n <span class=\"meta-string\">\" = %d\"</span>,token##n)</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> tocken22 = <span class=\"number\">80</span>;</div><div class=\"line\">  paster(<span class=\"number\">22</span>);<span class=\"comment\">//這裏輸入22,在paster函數內合並參數，就得到了token22,然後輸出token22這個變量，就得到了下面的結果，分寫一下printf函數，字符token+#n，也就是token22,token##n，代表了上面定義int token22</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>輸出結果：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">token22 = <span class=\"number\">80</span></div></pre></td></tr></table></figure>\n<p>可以判斷定義</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#inclue <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> !defined(MSG)</span></div><div class=\"line\">\t<span class=\"meta\">#<span class=\"meta-keyword\">define</span> MSG <span class=\"meta-string\">\"hahaha\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"msg == %s\\n\"</span>,MSG);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>參數化的宏</p>\n<p>CPP可以使用參數化的宏來模擬函數</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//求平方的函數</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">square</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> x * x;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//使用宏來定義,名稱和參數的括號之間不能有空格，且緊跟#define</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> square(x) ((x)*(x))</span></div></pre></td></tr></table></figure>\n<p>然後就可以在源文件中使用</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAX(x,y) ((x)&gt;(y)?(x):(y))</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Max between 20 and 10 is : %d\\n\"</span>,MAX(<span class=\"number\">20</span>,<span class=\"number\">10</span>));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>頭文件</p>\n<p><code>.h</code>文件，包含了C函數聲明和宏定義，被多個源文件共享。分爲<strong>編譯器自帶</strong>和<strong>程序員自定義</strong>兩類。用<code>#include</code>導入。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//&lt;&gt;包裹的，是系統的.h文件，\"\"包裹的，是程序員自定義的.h文件</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"myheader.h\"</span></span></div><div class=\"line\"><span class=\"comment\">//都可以通過編譯源碼時候，-l選項，將文件置於列表前。</span></div></pre></td></tr></table></figure>\n<p>其實，頭文件，就相當與復制，類似與java中的導入包和文件類。導入一次就夠了，不用多次導入。一般需要判斷一下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> HEADER</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> HEADER</span></div><div class=\"line\">...</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div></pre></td></tr></table></figure>\n<p>有條件引用</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> SYSTEM_1</span></div><div class=\"line\">\t<span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"system_1.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">elif</span> SYSTEM_2</span></div><div class=\"line\">\t<span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"system_2.h\"</span></span></div><div class=\"line\"><span class=\"comment\">//太多的話，可以宏定義一下</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SYSTEM_H <span class=\"meta-string\">\"system_1.h\"</span></span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"3、類型轉換\"><a href=\"#3、類型轉換\" class=\"headerlink\" title=\"3、類型轉換\"></a>3、類型轉換</h2><p>編程語言中常見的數據類型轉換，從低類型轉高類型，從高類型轉低類型。向下轉換不安全的，會丟失數據精度。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(type_name) variable;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>整數提升</p>\n<p>其實也就是一種類型轉換，將小範圍類型，轉爲大範圍的，char–int</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">char</span> i = <span class=\"string\">'c'</span>;<span class=\"comment\">//ascii碼 99</span></div><div class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">17</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> sum = i + c;</div><div class=\"line\"><span class=\"comment\">//得到的sum值，就是int的，116</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>常用轉換</p>\n<p>一般都會隱式的向上轉型，向下轉型會丟失精度，且需要強制轉型。</p>\n<p><img src=\"http://img.blog.csdn.net/20161218194455669?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmluZ2x1bWVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"translate\"></p>\n<p>這並不適合<code>賦值運算符</code>、邏輯運算符的<code>&amp;&amp;</code>、<code>||</code></p>\n</li>\n<li><p>錯誤處理</p>\n<p>C語言不提供對錯誤的處理，其返回值出錯時多是1或者NULL，同時生成錯誤碼errno，可以在<code>&lt;error.h&gt;</code>中找到各種錯誤碼。通常通過返回值查找錯誤。一般初始化設這errno=0;</p>\n<p><strong>errno、perror()和strerror()</strong>，C語言提供了兩個函數來顯示errno的錯誤信息。</p>\n<ul>\n<li>perror()函數顯示您傳送的字符串，後面一個冒號、一個空格、和當前errno的文本描述</li>\n<li>strerror()函數返回一個指針，指針指向errno的錯誤描述。</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;errno.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">int</span> errno;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  FILE * pf;</div><div class=\"line\">  <span class=\"keyword\">int</span> errnum;</div><div class=\"line\">  <span class=\"comment\">//以二進制形式打開文件，此處文件不存在，用於模擬錯誤</span></div><div class=\"line\">  pf = fopen(<span class=\"string\">\"./no.txt\"</span>,<span class=\"string\">\"rb\"</span>);</div><div class=\"line\">  <span class=\"keyword\">if</span>(pf==<span class=\"literal\">NULL</span>)&#123;</div><div class=\"line\">    errnum = errno;</div><div class=\"line\">    <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">\"錯誤號： %d \\n\"</span>,errno);</div><div class=\"line\">    perror(<span class=\"string\">\"通過perror函數輸出錯誤\"</span>);</div><div class=\"line\">    <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">\"strerror函數顯示，打開文件錯誤： %s \\n\"</span>,strerror(errnum));</div><div class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">    fclose(pf);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>錯誤種類很多，非法參數，數組越界之類的。程序正常退出時候會帶有一個EXIT_SUCCESS值，其爲宏定義，爲0。錯誤時候EXIT_FAILURE，爲-1。</p>\n</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"C語言學習筆記–基礎語法三\"><a href=\"#C語言學習筆記–基礎語法三\" class=\"headerlink\" title=\"C語言學習筆記–基礎語法三\"></a>C語言學習筆記–基礎語法三</h1><h2 id=\"1、共用體與位域\"><a href=\"#1、共用體與位域\" class=\"headerlink\" title=\"1、共用體與位域\"></a>1、共用體與位域</h2><p>​    <strong>共用體</strong>，是一種特殊的數據類型，允許在相同的內存位置，存儲不同的數據類型。可以定義一個帶有多個成員的共用體，但是使用的時候，只能有一個成員有效的擁有數值。</p>\n<p>​    共用體提供了一種使用相同內存的有效方式。</p>\n<ul>\n<li><p>定義共用體</p>\n<p><code>union</code>關鍵字，類似與結構體的定義。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">union</span> [<span class=\"keyword\">union</span> tag]&#123;</div><div class=\"line\">  member definition;</div><div class=\"line\">  member definition;</div><div class=\"line\">  ...</div><div class=\"line\">  member definition;</div><div class=\"line\">&#125;[one or more <span class=\"keyword\">union</span> variables];</div></pre></td></tr></table></figure>\n<p>union tag爲可選項，類似結構體的定義，可以先聲明，也可以聲明並定義。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#inclued <span class=\"meta-string\">&lt;string.h&gt;</span></span></div><div class=\"line\"><span class=\"comment\">//這個共用體，聲明了一個Data共用體，它的變量data，以及包含了三種數據類型，i、f、str[20]，共用一個內存地址，這塊內存大小由共用體內最大成員決定。此處就是char類型的str，有20個字節位置。</span></div><div class=\"line\"><span class=\"keyword\">union</span> Data &#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> i;</div><div class=\"line\">  <span class=\"keyword\">float</span> f;</div><div class=\"line\">  <span class=\"keyword\">char</span> str[<span class=\"number\">20</span>];</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">//main()函數</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"comment\">//聲明共用體變量。</span></div><div class=\"line\">  <span class=\"keyword\">union</span> Data data;</div><div class=\"line\">  <span class=\"comment\">//顯示共用體內存佔用大小</span></div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"data的內存佔用：%d \\n\"</span>,<span class=\"keyword\">sizeof</span>(data));</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//編譯運行，結果會顯示爲20</span></div></pre></td></tr></table></figure>\n<p>共用體成員的訪問也類似與結構體，使用<code>.</code>符號。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">union</span> Data &#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> i;</div><div class=\"line\">  <span class=\"keyword\">float</span> f;</div><div class=\"line\">  <span class=\"keyword\">char</span> str[<span class=\"number\">20</span>];</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">union</span> Data data;</div><div class=\"line\">  <span class=\"comment\">//賦值</span></div><div class=\"line\">  data.i = <span class=\"number\">10</span>;</div><div class=\"line\">  data.f = <span class=\"number\">220.5</span>;</div><div class=\"line\">  <span class=\"built_in\">strcpy</span>(data.str,<span class=\"string\">\"C Programming\"</span>);</div><div class=\"line\">  <span class=\"comment\">//輸出</span></div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"data.i: %d \\n\"</span>,data.i);</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"data.f: %f \\n\"</span>,data.f);</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"data.str: %s \\n\"</span>,data.str);</div><div class=\"line\">  <span class=\"comment\">//這樣的輸出結果，只有最後一次會輸出正確的結果，上兩次都會數據損壞，因爲共用體只有一個可用內存變量。</span></div><div class=\"line\">  <span class=\"comment\">//如果每次賦值後都輸出一下，是沒問題的，或者同時使用同一個成員變量，可以更改變量值，也是可行的。</span></div><div class=\"line\">  data.i = <span class=\"number\">20</span>;</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"data.i: %d \\n\"</span>,data.i);</div><div class=\"line\">  data.i = <span class=\"number\">99</span>;</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"data.i %d \\n\"</span>,data.i);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>位域</p>\n<p>位域雖然上一節也有講，但是不清楚，這麼理解吧，位域、結構體、共用體三個概念比較理解，結構體和位域用<code>struct</code>,而共用體用<code>union</code>關鍵字</p>\n<p>| 名稱   | 是否共用內存                              | 備注                                       |<br>| —- | ———————————– | —————————————- |<br>| 結構體  | 內部成員各自有自己聲明的內存空間                    | 看作JAVA語言中的一個bean實體類                      |<br>| 共用體  | 內部成員共享內存地址和空間，最大的決定整體空間大小           | 類似與槍支，可能適配多個型號的子彈，但是每一次開槍，槍管裏就只能一個類型的子彈（姑且這麼比喻吧） |<br>| 位域   | 類似共用體，但是算作特殊的結構體，可以單個指定成員佔用的內存二進制位數 | 算是一個只有一種類型成員的共用體，暫且這麼理解。                 |</p>\n<p>示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sring.h&gt;</span></span></div><div class=\"line\"><span class=\"comment\">//定義簡單的結構體</span></div><div class=\"line\"><span class=\"keyword\">struct</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> widthValidated;</div><div class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> heightValidated;</div><div class=\"line\">&#125; status1;</div><div class=\"line\"><span class=\"comment\">//定義位域</span></div><div class=\"line\"><span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> widthValidated : <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> heightValidated :<span class=\"number\">1</span>;</div><div class=\"line\">&#125; status2;</div><div class=\"line\"><span class=\"comment\">//main()</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"status1佔用內存：%d \\n\"</span>,<span class=\"keyword\">sizeof</span>(status1));</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"status2佔用內存：%d \\n\"</span>,<span class=\"keyword\">sizeof</span>(status2));</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//結果會分別是8位和4位，因爲結構體算是兩個成員獨立佔用，而位域，算是兩個成員共用，而且雖然佔用4個字節，但是數據只用了1位，若是int widthValidated : 5; 那麼就會是8位了吧，位域不恩那個超出的，也不太清楚了，以後再回來看</span></div></pre></td></tr></table></figure>\n<p>位域的聲明</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">  <span class=\"comment\">/*type爲整數類型，決定了如何解釋位域的值,</span></div><div class=\"line\">  member_name爲位域的名稱，</div><div class=\"line\">  width爲位域中位的數量，不能大於制定類型的位寬度，不如int，就不能大於4個字節。</div><div class=\"line\">  */</div><div class=\"line\">  type [member_name] : width;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>位域指定了變量的位數，也就限制了數值的範圍，超出後會無法正確完成</p>\n</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></div><div class=\"line\"><span class=\"comment\">//define a bitrange</span></div><div class=\"line\"><span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">  <span class=\"comment\">//限定範圍了，0--7</span></div><div class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> age:<span class=\"number\">3</span>;</div><div class=\"line\">&#125; Age;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  Age.age = <span class=\"number\">4</span>;</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Sizeof(Age):%d \\n\"</span>,<span class=\"keyword\">sizeof</span>(Age));</div><div class=\"line\">  pringf(<span class=\"string\">\"Age.age : %d \\n\"</span>,Age.age);</div><div class=\"line\">  <span class=\"comment\">//但是不能超過3位二進制數的大小，</span></div><div class=\"line\">  Age.age = <span class=\"number\">8</span>;</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Age.age : %d \\n\"</span>,Age.age);</div><div class=\"line\">  <span class=\"comment\">//這時候編譯會警告，數值就會是默認的0</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>typedef</p>\n<p><code>typedef</code>C語言提供的一個用於給類型起新名字的關鍵字。類似與linux系統<code>alias</code>命令，就是用於自定義別名的一個關鍵字指令。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//定義unsigned char 爲BYTE</span></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> BYTE;</div><div class=\"line\"><span class=\"comment\">//那麼就可以用來聲明變量</span></div><div class=\"line\">BYTE b1;<span class=\"comment\">//就相當與unsigned char b1;</span></div></pre></td></tr></table></figure>\n<p>習慣性的將<code>typedef</code>別名化的類型寫作大寫，當然也可以小寫。可以作用與基本數據類型，也可以作用與結構體、共用體、位域之類的自定義類型。</p>\n</li>\n<li><p>typedef 和 #define</p>\n<p><code>#define</code>是C指令，用於定義數據類型的別名，類似<code>typedef</code></p>\n<ul>\n<li>typedef僅用於爲類型定義別名，而#define也可以定義數值的別名，如1可以定義爲ONE</li>\n<li>typedef由編譯器執行解釋，#define由預編譯器處理</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//定義</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TRUE 1</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TWO 22</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"TURE:%d,TWO:%d \\n\"</span>,TURE,TWO);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>I/O</p>\n<p>C語言提供了一系列的內置函數用於輸入和輸出操作。</p>\n<blockquote>\n<ul>\n<li><p>標準文件</p>\n<p>C語言把左右設備都當作文件處理，類似與linux下，一切皆文件。</p>\n<p>| 標準文件 | 文件指針   | 設備   |<br>| —- | —— | —- |<br>| 標準輸入 | stdin  | 鍵盤   |<br>| 標準輸出 | stdout | 屏幕   |<br>| 標準錯誤 | stderr | 您的屏幕 |</p>\n<p>文件指針是訪問文件的方式。</p>\n</li>\n<li><p>getchar()和putchar()函數</p>\n<p><code>int getchar(void)</code>函數從屏幕讀取下一個可用字符，一次讀一個，可以房子循環裏面使用。</p>\n<p><code>int putchar(Int c)</code>函數向屏幕輸出字符，一次輸一個，循環使用。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stido.h&gt;</span></span></div><div class=\"line\">&gt;   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">&gt;     <span class=\"keyword\">int</span> c;</div><div class=\"line\">&gt;     <span class=\"built_in\">printf</span>(<span class=\"string\">\"請輸入字符：\"</span>);</div><div class=\"line\">&gt;     c = getchar();</div><div class=\"line\">&gt;     <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n 您輸入的字符是：\"</span>);</div><div class=\"line\">&gt;     <span class=\"built_in\">putchar</span>(c);</div><div class=\"line\">&gt;   &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>gets()和puts()</p>\n<p><strong>char *gets(char *s)</strong>函數從<code>stdin</code>讀取一行到<code>s</code>所指向的緩衝區，一知道遇到終止符或者<code>EOF</code>。</p>\n<p><strong>int puts(const char *s)</strong>函數把字符串s和一個尾隨的換行符寫入到<code>stdout</code>。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\">&gt;   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">&gt;     <span class=\"keyword\">char</span> str[<span class=\"number\">100</span>];<span class=\"comment\">//緩存區域</span></div><div class=\"line\">&gt;     <span class=\"built_in\">printf</span>(<span class=\"string\">\"Enter a value：\"</span>);</div><div class=\"line\">&gt;     gets(str);</div><div class=\"line\">&gt;     <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n Your value:\"</span>);</div><div class=\"line\">&gt;     <span class=\"built_in\">puts</span>(str);</div><div class=\"line\">&gt;   &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>scanf()和printf()</p>\n<p><code>int scanf(const char \\*format,...)</code>函數從標準輸入流<code>stdin</code>讀取輸入，根據<code>fromat</code>來瀏覽輸入。</p>\n<p><code>int printf(const char \\*format,...)</code>函數吧輸出以<code>format</code>格式顯示，可以是<code>%s、%d、%c、%f</code>等。</p>\n</li>\n</ul>\n<p><strong>Note:</strong><code>scanf()</code>讀取輸入，需要輸入的數據格式跟<code>format</code>的一樣才行，不然會報錯。遇到空格會停止讀取，便認爲結束了一個字符的讀取。</p>\n</blockquote>\n</li>\n<li><p>文件讀寫</p>\n<ul>\n<li>打開文件，<code>fopen()</code>函數來創建一個新的，或者打開已有的文件。</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">FILE *<span class=\"title\">fopen</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * filename,<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * mode)</span></span>;</div></pre></td></tr></table></figure>\n<p>其中<code>finename</code>是字符串，命名文件用的。<code>mode</code>是讀寫模式</p>\n<p>| mode | description                          |<br>| —- | ———————————— |<br>| r    | 打開一個已有的文本文件，允許讀取文件                   |<br>| w    | 打開一個文本文件，允許寫入文件。若不存在，會新建文件，從頭開始寫起    |<br>| a    | 打開一個文本文件，追加模式寫入，不存在則新建               |<br>| r+   | 打開一個文本文件，允許讀寫文件                      |<br>| w+   | 打開一個文本文件，允許讀寫。若已存在，文件會被截斷爲另長度，不存在則新建 |<br>| a+   | 打開一個文本文件，允許讀寫。不存在則新建，讀取從頭開始，寫入則是追加模式 |</p>\n<p>若是處理的是二進制文件，寫法有點差異,多個<code>b</code>字符</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"rb\"</span>,<span class=\"string\">\"wb\"</span>,<span class=\"string\">\"ab\"</span>,<span class=\"string\">\"rb+\"</span>,<span class=\"string\">\"r+b\"</span>,<span class=\"string\">\"wb+\"</span>,<span class=\"string\">\"w+b\"</span>,<span class=\"string\">\"ab+\"</span>,<span class=\"string\">\"a+b\"</span></div></pre></td></tr></table></figure>\n<ul>\n<li>關閉文件，<code>fclose()</code>關閉文件的函數</li>\n</ul>\n<p><code>int fclose(FILE *fp);</code>若關閉成功，返回<code>0</code>，關閉失敗，返回<code>EOF</code>（定義在<code>stdio.h</code>中的常量）</p>\n<ul>\n<li><p>寫入文件</p>\n<p><code>fputc()</code>函數，將c的字符，寫入到fp的輸出流，成功則返回寫入的字符，失敗返回EOF。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fputc</span><span class=\"params\">(<span class=\"keyword\">int</span> c,FILE *fp)</span></span>;</div></pre></td></tr></table></figure>\n<p><code>fputc()</code>函數也可以吧字符串s寫入到fp的輸出流中，成功返回非負值，失敗返回EOF。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fputs</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *s,FILE *fp)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fpuintf</span><span class=\"params\">(FILE *fp,<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *format,...)</span></span>;</div></pre></td></tr></table></figure>\n<p>示例，會在當前文件夾下，生成text文檔，含有兩句話。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  FILE *fp;</div><div class=\"line\">  fp = fopen(<span class=\"string\">\"./text.txt\"</span>,<span class=\"string\">\"w+\"</span>);</div><div class=\"line\">  <span class=\"built_in\">fprintf</span>(fp,<span class=\"string\">\"This is testing for fprintf...\\n\"</span>);</div><div class=\"line\">  <span class=\"built_in\">fputs</span>(<span class=\"string\">\"這是測試fputs輸入\\n\"</span>,fp);</div><div class=\"line\">  fclose(fp);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>讀取文件</p>\n<p><code>fgetc</code>和<code>fgets</code>函數</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//讀取一個字符，正確返回該字符，錯誤返回EOF</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fgetc</span><span class=\"params\">(FILE * fp)</span></span>;</div><div class=\"line\"><span class=\"comment\">//讀取字符串流，直到讀取到null的標識符，所以之前讀取了有效的n-1個,要是遇到\\n或者EOF則會返回讀取的字符。</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> *<span class=\"title\">fgets</span><span class=\"params\">(<span class=\"keyword\">char</span> *buf,<span class=\"keyword\">int</span> n,FILE *fp)</span></span>;</div><div class=\"line\"><span class=\"comment\">//從文件中讀取，遇到空格會停止</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fscanf</span><span class=\"params\">(FILE *fp,<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *format,...)</span></span>;</div></pre></td></tr></table></figure>\n<p>示例，讀取上面的文件</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  FILE *fp;</div><div class=\"line\">  <span class=\"keyword\">char</span> buff[<span class=\"number\">255</span>];</div><div class=\"line\">  fp = fopen(<span class=\"string\">\"./text.txt\"</span>,<span class=\"string\">\"r\"</span>);</div><div class=\"line\">  <span class=\"comment\">//只會讀取第一個單詞，因爲遇到空格了</span></div><div class=\"line\">  <span class=\"built_in\">fscanf</span>(fp,<span class=\"string\">\"%s\"</span>,buff);</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"1: %s\\n\"</span>,buff);</div><div class=\"line\">  <span class=\"comment\">//會讀取一句話，遇到\\n或者EOF結束</span></div><div class=\"line\">  fgets(buff,<span class=\"number\">255</span>,(FILE*)fp);</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"2: %s\\n\"</span>,buff);</div><div class=\"line\">  </div><div class=\"line\">  fgets(buff,<span class=\"number\">255</span>,(FILE*)fp);</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"3: %s\\n\"</span>,buff);</div><div class=\"line\">  fclose(fp);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>首先<code>fscanf</code>只讀取了<code>This</code>，因爲它遇到了空格，之後調用<code>fgets</code>讀取剩餘部分，知道遇到<code>\\n</code>或者EOF，而第二次調用<code>fgets</code>讀取了一整句。</p>\n</li>\n<li><p>二進制讀寫函數</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">size_t</span> fread(<span class=\"keyword\">void</span> *ptr,<span class=\"keyword\">size_t</span> size_of_elements,<span class=\"keyword\">size_t</span> number_of_elements,FILE *a_file);</div><div class=\"line\"><span class=\"keyword\">size_t</span> fwrite(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *ptr,<span class=\"keyword\">size_t</span> size_of_elements,<span class=\"keyword\">size_t</span> size_of_elements,FILE *a_file);</div></pre></td></tr></table></figure>\n<p>常用與存儲塊的讀寫，通常<strong>數組</strong>或<strong>結構體</strong></p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2、預處理器\"><a href=\"#2、預處理器\" class=\"headerlink\" title=\"2、預處理器\"></a>2、預處理器</h2><p>預處理器不是編譯器的組成部分，其會在編譯器實際編譯之前，指示編譯器做一些預處理工作。C與處理器(C Preprocessor)簡稱<code>CPP</code>，以<code>#</code>開頭，位於行首，文件首。</p>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>#define</td>\n<td>定義宏</td>\n</tr>\n<tr>\n<td>#include</td>\n<td>包含一個源代碼文件</td>\n</tr>\n<tr>\n<td>#undef</td>\n<td>取消已定義的宏</td>\n</tr>\n<tr>\n<td>#ifdef</td>\n<td>如果定義了宏，返回真</td>\n</tr>\n<tr>\n<td>#ifndef</td>\n<td>如果沒有定義宏，返回真</td>\n</tr>\n<tr>\n<td>#if</td>\n<td>條件語句，滿足條件，則執行下面代碼</td>\n</tr>\n<tr>\n<td>#else</td>\n<td>與if搭配使用</td>\n</tr>\n<tr>\n<td>#elif</td>\n<td>也就是else if語句快</td>\n</tr>\n<tr>\n<td>#endif</td>\n<td>結束一個#if…#else語句塊</td>\n</tr>\n<tr>\n<td>#error</td>\n<td>遇到標準錯誤時，輸出錯誤</td>\n</tr>\n<tr>\n<td>#pragma</td>\n<td>使用標準化方法，向編譯器發布特殊指令</td>\n</tr>\n</tbody>\n</table>\n<p>示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//定義常量別名,預處理指令，不需要;分行寫</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAX 10</span></div><div class=\"line\"><span class=\"comment\">//引入頭文件</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"myheader.h\"</span></span></div><div class=\"line\"><span class=\"comment\">//取消宏定義，並更改</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">undef</span> FILE_SIZE</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FILE_SIZE 88;</span></div><div class=\"line\"><span class=\"comment\">//條件判斷，預處理的，與代碼塊的if..else不用弄混哦</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> MSG</span></div><div class=\"line\">\t<span class=\"meta\">#<span class=\"meta-keyword\">define</span> MSG <span class=\"meta-string\">\"message\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div></pre></td></tr></table></figure>\n<ul>\n<li><p>預定義宏</p>\n<p><strong>ANSI C</strong>定義了許多宏，但是不能直接修改</p>\n<p>| 宏        | 描述                     |<br>| ——– | ———————- |<br>| _DATE_ | 當前日期，”MMM DD YYYY”格式顯示 |<br>| _TIME_ | 當前時間，”HH:MM:SS”格式顯示    |<br>| _FILE_ | 這會包含當前文件名，一個字符串常量      |<br>| _LINE_ | 這會包含當前行號，一個十進制常量       |<br>| _STDC_ | 當編譯器以ANSI標準編譯時，則定義爲1   |</p>\n</li>\n<li><p>預處理器運算符</p>\n<ul>\n<li><p>宏延伸<code>\\</code></p>\n<p>一個宏通常寫在一行，若是太長，可以用<code>\\</code>符號延伸</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> message_for(a,b) \\</span></div><div class=\"line\">\tprintf(#a<span class=\"meta-string\">\"and\"</span>#b <span class=\"meta-string\">\":Hello\\n\"</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>字符串常量化<code>#</code></p>\n<p>定義宏時候，參數轉化爲字符常量，需要用<code>#</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> msg(a,b) \\</span></div><div class=\"line\">\tprintf(#a <span class=\"meta-string\">\"和\"</span> #b <span class=\"meta-string\">\"是朋友\"</span>);<span class=\"comment\">//此處就是用了#符號，</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  msg(<span class=\"string\">\"小白\"</span>,<span class=\"string\">\"小黑\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>輸出結果：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">小白和小黑是朋友</div></pre></td></tr></table></figure>\n</li>\n<li><p>標記粘貼<code>##</code></p>\n<p>合並兩個參數</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> paster(n) printf(<span class=\"meta-string\">\"token：\"</span> #n <span class=\"meta-string\">\" = %d\"</span>,token##n)</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> tocken22 = <span class=\"number\">80</span>;</div><div class=\"line\">  paster(<span class=\"number\">22</span>);<span class=\"comment\">//這裏輸入22,在paster函數內合並參數，就得到了token22,然後輸出token22這個變量，就得到了下面的結果，分寫一下printf函數，字符token+#n，也就是token22,token##n，代表了上面定義int token22</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>輸出結果：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">token22 = <span class=\"number\">80</span></div></pre></td></tr></table></figure>\n<p>可以判斷定義</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#inclue <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> !defined(MSG)</span></div><div class=\"line\">\t<span class=\"meta\">#<span class=\"meta-keyword\">define</span> MSG <span class=\"meta-string\">\"hahaha\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"msg == %s\\n\"</span>,MSG);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>參數化的宏</p>\n<p>CPP可以使用參數化的宏來模擬函數</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//求平方的函數</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">square</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> x * x;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//使用宏來定義,名稱和參數的括號之間不能有空格，且緊跟#define</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> square(x) ((x)*(x))</span></div></pre></td></tr></table></figure>\n<p>然後就可以在源文件中使用</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAX(x,y) ((x)&gt;(y)?(x):(y))</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Max between 20 and 10 is : %d\\n\"</span>,MAX(<span class=\"number\">20</span>,<span class=\"number\">10</span>));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>頭文件</p>\n<p><code>.h</code>文件，包含了C函數聲明和宏定義，被多個源文件共享。分爲<strong>編譯器自帶</strong>和<strong>程序員自定義</strong>兩類。用<code>#include</code>導入。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//&lt;&gt;包裹的，是系統的.h文件，\"\"包裹的，是程序員自定義的.h文件</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"myheader.h\"</span></span></div><div class=\"line\"><span class=\"comment\">//都可以通過編譯源碼時候，-l選項，將文件置於列表前。</span></div></pre></td></tr></table></figure>\n<p>其實，頭文件，就相當與復制，類似與java中的導入包和文件類。導入一次就夠了，不用多次導入。一般需要判斷一下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> HEADER</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> HEADER</span></div><div class=\"line\">...</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div></pre></td></tr></table></figure>\n<p>有條件引用</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> SYSTEM_1</span></div><div class=\"line\">\t<span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"system_1.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">elif</span> SYSTEM_2</span></div><div class=\"line\">\t<span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"system_2.h\"</span></span></div><div class=\"line\"><span class=\"comment\">//太多的話，可以宏定義一下</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SYSTEM_H <span class=\"meta-string\">\"system_1.h\"</span></span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"3、類型轉換\"><a href=\"#3、類型轉換\" class=\"headerlink\" title=\"3、類型轉換\"></a>3、類型轉換</h2><p>編程語言中常見的數據類型轉換，從低類型轉高類型，從高類型轉低類型。向下轉換不安全的，會丟失數據精度。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(type_name) variable;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>整數提升</p>\n<p>其實也就是一種類型轉換，將小範圍類型，轉爲大範圍的，char–int</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">char</span> i = <span class=\"string\">'c'</span>;<span class=\"comment\">//ascii碼 99</span></div><div class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">17</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> sum = i + c;</div><div class=\"line\"><span class=\"comment\">//得到的sum值，就是int的，116</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>常用轉換</p>\n<p>一般都會隱式的向上轉型，向下轉型會丟失精度，且需要強制轉型。</p>\n<p><img src=\"http://img.blog.csdn.net/20161218194455669?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmluZ2x1bWVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"translate\"></p>\n<p>這並不適合<code>賦值運算符</code>、邏輯運算符的<code>&amp;&amp;</code>、<code>||</code></p>\n</li>\n<li><p>錯誤處理</p>\n<p>C語言不提供對錯誤的處理，其返回值出錯時多是1或者NULL，同時生成錯誤碼errno，可以在<code>&lt;error.h&gt;</code>中找到各種錯誤碼。通常通過返回值查找錯誤。一般初始化設這errno=0;</p>\n<p><strong>errno、perror()和strerror()</strong>，C語言提供了兩個函數來顯示errno的錯誤信息。</p>\n<ul>\n<li>perror()函數顯示您傳送的字符串，後面一個冒號、一個空格、和當前errno的文本描述</li>\n<li>strerror()函數返回一個指針，指針指向errno的錯誤描述。</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;errno.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">int</span> errno;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  FILE * pf;</div><div class=\"line\">  <span class=\"keyword\">int</span> errnum;</div><div class=\"line\">  <span class=\"comment\">//以二進制形式打開文件，此處文件不存在，用於模擬錯誤</span></div><div class=\"line\">  pf = fopen(<span class=\"string\">\"./no.txt\"</span>,<span class=\"string\">\"rb\"</span>);</div><div class=\"line\">  <span class=\"keyword\">if</span>(pf==<span class=\"literal\">NULL</span>)&#123;</div><div class=\"line\">    errnum = errno;</div><div class=\"line\">    <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">\"錯誤號： %d \\n\"</span>,errno);</div><div class=\"line\">    perror(<span class=\"string\">\"通過perror函數輸出錯誤\"</span>);</div><div class=\"line\">    <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">\"strerror函數顯示，打開文件錯誤： %s \\n\"</span>,strerror(errnum));</div><div class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">    fclose(pf);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>錯誤種類很多，非法參數，數組越界之類的。程序正常退出時候會帶有一個EXIT_SUCCESS值，其爲宏定義，爲0。錯誤時候EXIT_FAILURE，爲-1。</p>\n</li>\n</ul>\n"},{"title":"Error:Execution failed for task ':app:mergeDebugResources'","date":"2017-02-22T02:26:00.000Z","_content":"在使用AndroidStudio时，出现\n```java\nError:Execution failed for task':app:mergeDebugResources'.>Error:java.util.concurrent.ExecutionException:com.android.ide.common.process.ProcessException:\n```\n 异常,作为技术小白，也曾被这问题折腾了一些时间，现记录于此，亦希望于人于己皆有帮助。\n\n\n##问题原因\n出现这个异常是IDE抛出的异常，问题出在编译过程中，工程的资源文件有非法标识。\n1、比如`string.xml`中的配置，只有key而无value，如`<string name=\"\">abc</string>`这么就是错的，必备属性`name`就需要有个名称。\n2、res文件夹中的layout和drawable等，是否命名规范，不能用数字开头，小写字母和下划线命名，而且不要有中文等。\n3、还有一个关于res文件命名，在eclipse中似乎可以用`.9`文件命名带`.9.jpg`之类的后缀。而在AndroidStudio中则不可以，只能使用单一的`.jpg`后缀，不可以`.9`了。这点要注意。扯淡的是，AndroidStudio中根本没有任何定位到这个地方的错误提示。","source":"_posts/Execution failed for task.md","raw":"---\ntitle: \"Error:Execution failed for task ':app:mergeDebugResources'\"\ndate: 2017-02-22 10:26\ntags:\n    - Android Studio\ncategories:\n    - 编程相关\n---\n在使用AndroidStudio时，出现\n```java\nError:Execution failed for task':app:mergeDebugResources'.>Error:java.util.concurrent.ExecutionException:com.android.ide.common.process.ProcessException:\n```\n 异常,作为技术小白，也曾被这问题折腾了一些时间，现记录于此，亦希望于人于己皆有帮助。\n\n\n##问题原因\n出现这个异常是IDE抛出的异常，问题出在编译过程中，工程的资源文件有非法标识。\n1、比如`string.xml`中的配置，只有key而无value，如`<string name=\"\">abc</string>`这么就是错的，必备属性`name`就需要有个名称。\n2、res文件夹中的layout和drawable等，是否命名规范，不能用数字开头，小写字母和下划线命名，而且不要有中文等。\n3、还有一个关于res文件命名，在eclipse中似乎可以用`.9`文件命名带`.9.jpg`之类的后缀。而在AndroidStudio中则不可以，只能使用单一的`.jpg`后缀，不可以`.9`了。这点要注意。扯淡的是，AndroidStudio中根本没有任何定位到这个地方的错误提示。","slug":"Execution failed for task","published":1,"updated":"2017-03-31T08:23:07.623Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ndxcco000z88owvsrpjbmh","content":"<p>在使用AndroidStudio时，出现<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Error:Execution failed <span class=\"keyword\">for</span> task<span class=\"string\">':app:mergeDebugResources'</span>.&gt;Error:java.util.concurrent.ExecutionException:com.android.ide.common.process.ProcessException:</div></pre></td></tr></table></figure></p>\n<p> 异常,作为技术小白，也曾被这问题折腾了一些时间，现记录于此，亦希望于人于己皆有帮助。</p>\n<p>##问题原因<br>出现这个异常是IDE抛出的异常，问题出在编译过程中，工程的资源文件有非法标识。<br>1、比如<code>string.xml</code>中的配置，只有key而无value，如<code>&lt;string name=&quot;&quot;&gt;abc&lt;/string&gt;</code>这么就是错的，必备属性<code>name</code>就需要有个名称。<br>2、res文件夹中的layout和drawable等，是否命名规范，不能用数字开头，小写字母和下划线命名，而且不要有中文等。<br>3、还有一个关于res文件命名，在eclipse中似乎可以用<code>.9</code>文件命名带<code>.9.jpg</code>之类的后缀。而在AndroidStudio中则不可以，只能使用单一的<code>.jpg</code>后缀，不可以<code>.9</code>了。这点要注意。扯淡的是，AndroidStudio中根本没有任何定位到这个地方的错误提示。</p>\n","excerpt":"","more":"<p>在使用AndroidStudio时，出现<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Error:Execution failed <span class=\"keyword\">for</span> task<span class=\"string\">':app:mergeDebugResources'</span>.&gt;Error:java.util.concurrent.ExecutionException:com.android.ide.common.process.ProcessException:</div></pre></td></tr></table></figure></p>\n<p> 异常,作为技术小白，也曾被这问题折腾了一些时间，现记录于此，亦希望于人于己皆有帮助。</p>\n<p>##问题原因<br>出现这个异常是IDE抛出的异常，问题出在编译过程中，工程的资源文件有非法标识。<br>1、比如<code>string.xml</code>中的配置，只有key而无value，如<code>&lt;string name=&quot;&quot;&gt;abc&lt;/string&gt;</code>这么就是错的，必备属性<code>name</code>就需要有个名称。<br>2、res文件夹中的layout和drawable等，是否命名规范，不能用数字开头，小写字母和下划线命名，而且不要有中文等。<br>3、还有一个关于res文件命名，在eclipse中似乎可以用<code>.9</code>文件命名带<code>.9.jpg</code>之类的后缀。而在AndroidStudio中则不可以，只能使用单一的<code>.jpg</code>后缀，不可以<code>.9</code>了。这点要注意。扯淡的是，AndroidStudio中根本没有任何定位到这个地方的错误提示。</p>\n"},{"title":"C语言学习笔记--基础语法二","date":"2016-12-17T13:50:00.000Z","_content":"# C语言基础部分二\n\n## 1、函数\n\n函数，可以称为方法、子例程或程序等等。定义一个函数需要**声明**函数名称、返回类型和参数。函数就是一组执行特定任务和逻辑的代码语句。C程序至少有一个函数---main();\n**main函數要有返回值，void類型或者int，float等，有的編譯器要求必須int，需注意這點，有的竟然还可以不写返回类型，编译器标准不同，c89,c99,c11之类的，好吧，最好写上吧。**\n\n- 定义函数\n\n  ```C\n  return_type function_name(parameter list){\n    body of the function;\n  }\n  ```\n\n  函数的构成：\n\n  - 返回类型，若有则是返回数据的数据类型，若无则是void，或者不写。\n  - 函数名称，也就是函数的实际名，与参数列表一起构成函数签名。\n  - 参数，参数类似与占位符，用于接收传递过来的参数，在函数内部调用使用，参数可选，函数可无参数。\n  - 函数主体，也就是执行一定的任务逻辑的代码语句。\n\n  ```C\n  /*\n   * 函数返回两个数字中较大的那个数。\n   */\n  int max(int num1,int num2){\n    //声明局部变量\n    int result;\n    if(num1>num2){\n      result = num1;\n    }esle{\n      result = num2;\n    }\n    return result;\n  }\n  ```\n\n  **Note:**函数声明包含返回类型、函数名、参数列表。而不必有函数主体。\n\n  C语言中，函数声明参数列表中的参数名并不重要，只要有参数类型亦可。\n\n  ```C\n  //如此也是合法的\n  int max(int,int);\n  ```\n\n  函数参数多类似为形式参数，调用者需要传递实际参数。\n\n  | 调用类型 | 描述                                       |\n  | ---- | ---------------------------------------- |\n  | 传值调用 | 调用方将数值传递给形参，如果形参在函数内修改数值，但不会形象到外部的实际参数值。C 语言多用此方式。 |\n  | 引用调用 | 调用方将参数的地址复制给形参，此时在函数内形参修改数值，会同步影响到外部实际参数的。 |\n  | 指针形式 | 通过指针传递的方式，形参为实参的指针，操作会影响到实际参数的数据。        |\n\n- 作用域\n\n  任何一个编程语言中，定义的变量都应有其作用范围，称为作用域\n\n  - 局部变量，作用与函数内。\n  - 全局变量，作用与函数外部所有范围。\n  - 形式参数，在函数的参数定义中，也就在函数内有效。类似局部变量了。\n\n  **C语言中，函数的局部参数可以和全局参数同名称，但是内部仅使用局部变量的值。局部变量需要手动初始化，全局变量会自动初始化。**\n\n- 数组\n\n  C语言数组和Java的数组类似，用于存储一类相同类型的数值，声明一个变量，用序列编号指定元素数据。\n\n  | 元素         | 元素         | 元素     | 元素         |\n  | ---------- | ---------- | ------ | ---------- |\n  | numbers[0] | numbers[1] | ...... | numbers[n] |\n\n  声明与初始化：\n\n```C\n  //声明\n  type arrayName[arraySize]\n  double balance[10];\n  double balance[3] = {12.0,3.5,8.8};\n  double balance[] = {7.9,0.1,3.2}\n  //单个元素赋值\n  balacne[0] = 8.9;\n```\n\n  数组的访问使用数组下标，从左至右依次为0----n，某个元素则为arrayName[i];\n\n  | 概念      | 描述                                   |\n  | ------- | ------------------------------------ |\n  | 多维数组    | 即数组的元素又是数组，常见的为二维数组。                 |\n  | 传递数组函数  | 通过指定不带索引的数组名称，来给函数传递一个数组的指针。也就是作为形参。 |\n  | 从函数返回数组 | 函数的返回类型。                             |\n  | 指向数组的指针 | 通过指定不带索引的数组名称，来生成一个指向数组中第一个元素的指针。    |\n\n## 2、指针\n\nC语言指针是简单而有趣的一个概念，便于简化程序任务，比如动态内存分配等。\n\n每一个变量都有一个内存地址，这个地址是有一个编号的。\n\n```C\n#include <stdio.h>\nvoid main(){\n  int var1;\n  char var2[10];\n  //printf函数参数为可变参数，必有string哦，不然会报错。和java不同。\n  printf(\"var1变量的地址：%x \\n\",&var1);\n  printf(\"varsb变量的地址：%x \\n\",&var2);\n}\n```\n\n- 指针\n\n  是一个特殊变量，它的值是另一个变量的地址，内存位置的直接地址。类似其他变量和常量，在使用指针存储其他变量的地址之前，需要声明和存储。\n\n  ```C\n  //type为指针的基类型，var-name为指针变量的名称。星号用于标示一个变量是指针。\n  type *var-name;\n  //指针示例\n  int *ip;\n  double *dp;\n  float *fp;\n  char *cp;\n  //不管基类型为何种类型，指针的实际数据类型，都是一个代表内存地址的十六进制数。\n  ```\n\n- 如何使用指针\n\n  使用指针涉及以下操作：\n\n  - 定义指针变量\n  - 把另一变量地址赋值给指针\n  - 访问指针变量中可用地址的值\n\n  `*`用来返回位于操作数所指定的地址的变量的值。\n\n  ```c\n  #include <stdio.h>\n  void main(){\n    int var  = 20;//实际变量的声明\n    int *ip;//指针变量的声明\n    \n    ip = &var;//在指针变量中存储var变量的地址，也就是给指针变量赋值\n    printf(\"var变量的地址：%x\\n\",&var);//C语言printf函数不会换行，所以习惯都是内部加上\\n，初学者可别弄混了哦。\n    //在指针变量中存储的地址\n    printf(\"在ip中存储的地址：%x \\n\",ip);\n    //使用指针方位实际变量的值，也就用指针指向的内存地址，读取地址里面的数值。\n    printf(\"指针所指向地址的存储数据：%d \\n\",*ip);//使用*ip格式来获取指针对应的实际数值。\n  }\n  ```\n\n  **使用\\*符号来作用与指针，便可得到指针所指向地址内的实际数值。**\n\n- Null指针\n\n  变量声明的时候，如果没有明确赋值，最好给指针赋值一个NULL值，如此为空指针。\n\n  `NULL`指针是定义在标准库中值为零的常量。\n\n  ```C\n  #include <stdio.h>\n  void main(){\n    int *ip=null;\n    //输出ip的值，就是0\n    printf(\"ip的值是：%x \\n\",ip);\n  }\n  ```\n\n  **Note:**弄清几个概念，&var表示var的地址，*var是指var指针所指向地址的储存的数值。\n\n  多数操作系统都不允许访问地址为0的内存，其为系统保留内存，有特殊含义，表明指针不指向可访问的内存位置。依据惯例指针包含空值，则认为它不指向任何地址。\n\n  ```c\n  if(ptr)//表示，如果ptr非空，则完成\n  if(!ptr)//表示，如果ptr为空，则完成。\n  ```\n\n- 指针详解\n\n  | 概念      | 描述                           |\n  | ------- | ---------------------------- |\n  | 指针的算数运算 | 指针可以进行四种算术运算++、--、+、-        |\n  | 指针数组    | 可以定义用来存储指针的数组                |\n  | 指向指针的指针 | C语言允许指向指针的指针                 |\n  | 传递指针给函数 | 通过引用过地址传递参数，使传递的参数在调用的函数中被改变 |\n  | 从函数返回指针 | C允许函数返回指针到局部变量、静态变量和动态内存分配   |\n\n\n- 字符串\n\n  C语言中字符串实际上是使用`null`字符`\\0`终止的一维字符数组。\n```C\n  char cs[6] = {'H','e','l','l','o','\\0'};\n  //这就是hello字符串，用的是null字符'\\0'结尾的一个字符数组,所以数组长度比字符串数字多1,因为末尾是null的字符标记。也可以写作：\n  char cs[] = \"Hello\";\n```\n\n  C/C++中定义的字符串的内存表示：\n\n ![string](http://img.blog.csdn.net/20161217213357762?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmluZ2x1bWVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n  其实可以不必写出null标记，C编译器会自动追加，在初始化时候。\n\n  常用的C语言字符串操作函数：\n\n  | 函数            | 描述                                   |\n  | ------------- | ------------------------------------ |\n  | strcpy(s1,s2) | 复制字符串s2到s1                           |\n  | strcat(s1,s2) | 连接字符串s2到s1末尾                         |\n  | strlen(s1)    | 返回字符串s1的长度                           |\n  | strcmp(s1,s2) | s1==s2则返回0,`s1<s2`则返回小于0,s1>s2则返回大于0 |\n  | strchr(s1,ch) | 返回一个指针，指向字符串s1中字符ch的第一次出现的位置         |\n  | strstr(s1,s2) | 返回一直指针，指向字符串s1中字符串s2的第一次出现的位置        |\n\n## 3、结构体\n\nC语言中数组是存储一类相同类型的数据变量，而`结构`则可以存储不同类型的数据项。有点类似面向对象的编程语言中的实体类`bean`的封装。\n\n- 定义结构\n\n  `struct`语句，可以定义一个包含多个成员的数据类型。\n\n  ```C\n  struct [structure tag]{\n    member definition;\n    member definition;\n    ...\n    member definition;\n  }[one or more structure variables]\n  ```\n\n  其中`structure tag `是可选的，每个`member definition`是标准的变量定义，比如`int i;double d;`如下示例，定义一个Book结构的方式\n\n  ```C\n  struct Books{\n    char title[50];\n    char author[50];\n    char subject[100];\n    int book_id;\n  } book;\n  ```\n\n- 访问结构成员\n\n  使用成员运算符`.`示例：\n\n  ```C\n  #include <stdio.h>\n  #include <string.h>\n  //定义结构体\n  struct Books{\n      char title[50];\n  \tchar author[50];\n  \tchar subject[100];\n  \tint book_id;\n  };\n  //main函数\n  void main(){\n    //声明结构体的变量，使用关键词struct\n    struct Books Book1;\n    struct Books Book2;\n    //初始化变量的内部数据,结构体成员，用变量名.成员名\n    strcpy(Book1.title,\"C语言编程\");\n    strcpy(Book1.author,\"谭浩强\");\n    strcpy(Book1.subject,\"C语言编程入门\");\n    Book1.book_id = 10086;\n    //输出Book1信息\n    printf(\"Book1的标题：%s \\n\",Book1.title);\n    printf(\"Book1的作者：%s \\n\",Book1.author);\n    printf(\"Book1的副标题：%s \\n\",Book1.subject);\n    printf(\"Book1的编号：%d \\n\",Book1.book_id);\n    //Book2类似\n    ...\n  }\n  ```\n\n- 结构体作为函数参数\n\n  结构体也可以作为参数传递给函数调用，类似变量和指针。不同与Java语言的方法函数，这里需要先声明结构函数，然后实现，在调用。\n\n  ```c\n  #include <stdio.h>\n  #include <string.h>\n   \n  struct Books\n  {\n     char  title[50];\n     char  author[50];\n     char  subject[100];\n     int   book_id;\n  };\n\n  /* 函数声明 */\n  void printBook( struct Books book );\n  int main( )\n  {\n     struct Books Book1;        /* 声明 Book1，类型为 Book */\n     struct Books Book2;        /* 声明 Book2，类型为 Book */\n   \n     /* Book1 详述 */\n     strcpy( Book1.title, \"C Programming\");\n     strcpy( Book1.author, \"Nuha Ali\"); \n     strcpy( Book1.subject, \"C Programming Tutorial\");\n     Book1.book_id = 6495407;\n\n     /* Book2 详述 */\n     strcpy( Book2.title, \"Telecom Billing\");\n     strcpy( Book2.author, \"Zara Ali\");\n     strcpy( Book2.subject, \"Telecom Billing Tutorial\");\n     Book2.book_id = 6495700;\n   \n     /* 输出 Book1 信息 */\n     printBook( Book1 );\n\n     /* 输出 Book2 信息 */\n     printBook( Book2 );\n\n     return 0;\n  }\n  void printBook( struct Books book )\n  {\n     printf( \"Book title : %s\\n\", book.title);\n     printf( \"Book author : %s\\n\", book.author);\n     printf( \"Book subject : %s\\n\", book.subject);\n     printf( \"Book book_id : %d\\n\", book.book_id);\n  }\n  ```\n\n- 指向结构的指针\n\n  可以定义结构体的指针，类似变量和指针，\n\n  ```c\n  //声明指针\n  struct Books *struct_pointer;\n  //将变量的地址，赋值给指针\n  struct_pointer = &Book1;\n  //要想让这个指针能够访问到结构体中的某个成员，就需要用->运算符\n  struct_pointer->title;//指针访问结构体中的title变量的值\n  ```\n\n  **上例使用指针模式：**\n\n  ```C\n  //其他不变\n  ...\n  printBook(&Book1);//这里传入的是指针\n  ...\n  void printBook(struct Books *book){//结构体的指针，作为参数，传递给函数\n    printf(\"Book title:%s \\n\",book->title);//使用->运算符访问结构体成员\n    ...\n  }\n  ```\n\n- 位域\n\n  又称\"位段\"，为了节省空间，仅存储占用一个或者几个二进制位的数据字节，满足一些特殊需要，如开关变量0和1,只用一个二进制位即可满足。\n\n  所谓位域，就是吧一个字节中的二进制位，划分为几个不同的区域，位域有域名，可以在程序中用域名来操作，从而可以把不同的对象用一个字节的二进制位域来表示。\n\n  >位域定义和变量说明\n  >\n  >```c\n  >struct 位域结构名{\n  >  位域列表\n  >};\n  >```\n  >\n  >其中位域列表的形式：\n  >\n  >`类型说明符 位域名:位域长度`\n\n  示例：\n\n  ```C\n  struct bs{\n    int a:8;\n    int b:2;\n    int c:6;\n  };\n  ```\n\n  位域变量的说明与结构变量的说明方式相同，可采用先定义后说明，同时定义说明或者直接说明三种方式。\n\n  ```C\n  struct bs{\n    int a:8;//占用的二进制位数8个\n    int b:2;\n    int c:6;\n  } data;\n  ```\n\n  如上则是同时定义和说明一个`bs`的变量`data`，占用两个字节(两个8位)。\n\n  ```C\n  struct packed_stuct{\n    unsigned int f1:1;\n    unsigned int f2:1;\n    unsigned int f3:1;\n    unsigned int f4:1;\n    unsigned int type:4;\n    unsigned int my_int:9;//注意此处，前面有int，和下面的注意事项中不能超过一个字节的要求，并不矛盾，\n  } pack;\n  ```\n\n  这里pack_struct就包含了6个成员，四个1位的标识符，一个4位的type，还有一个9位的my_int。\n\n- 位于定义的注意事项\n\n  - 一个位域必须存储在同一个字节中，不能跨两个字节，但是可以指定位域的开始位置：\n\n    ```C\n    struct bs{\n      unsigned a:4;\n      unsigned  :4;//空域\n      unsigned b:4;//从下一单元开始存放，而不是使用上面空的那4个\n      unsigned c:4;\n    }\n    ```\n\n  - 位域不恩你个跨两个字节，所以位域长度不能超过8,超过了的话，可能会被重叠，或者放入下一个字节了。\n\n  - 位域可以是无名位域，之用来占位，其不能使用。\n\n    ```c\n    struct k{\n      int a:1;\n      int  :2;//占位的，无名位域，不可用\n      int b:3;\n      int c:2;\n    }\n    ```\n\n  其实，位域也算是一种结构类型，只不过成员是按照二进制位表示而已。\n\n- 位域的使用\n\n  类似与结构成员的使用\n\n  ```C\n  位域变量名.位域名\n  ```\n\n  位域允许各种格式输出，示例：\n\n  ```C\n  void main(){\n    //定义了一个位域，并声明了一个变量bit，和它的指针变量*pbit\n    struct bs{\n      unsigned a:1;\n      unsigned b:3;\n      unsigned c:4;\n    }bit,*pbit;\n    //给位域赋值，注意不要超过位域的值的范围。\n    bit.a = 1;//就只能是0或1,因为定义占1个二进制位\n    bit.b = 7;//0--7,因为占用3个二进制位\n    bit.c = 15;\n    //以整型量输出\n    printf(\"%d,%d,%d \\n\",bit.a,bit.b,bit.c);\n    //使用位域指针访问成员\n    pbit = &bit;//给指针赋值\n    pbit->a = 0;//指针访问成员，并赋值给成员\n    pbit->b&=3;//使用了&=运算符，相当与pbit->b = pbit->b&3;\n    pbit->c|=1;//使用了|=运算符，相当与pbit-> = pbit->b|3;\n    printf(\"%d,%d,%d \\n\",pbit->a,pbit->b,pbit-c);\n  }\n  ```\n\n  ","source":"_posts/C语言学习笔记--基础语法二.md","raw":"---\ntitle: C语言学习笔记--基础语法二\ndate: 2016-12-17 21:50\ntags: \n    - C\ncategories:\n    - 编程相关\n---\n# C语言基础部分二\n\n## 1、函数\n\n函数，可以称为方法、子例程或程序等等。定义一个函数需要**声明**函数名称、返回类型和参数。函数就是一组执行特定任务和逻辑的代码语句。C程序至少有一个函数---main();\n**main函數要有返回值，void類型或者int，float等，有的編譯器要求必須int，需注意這點，有的竟然还可以不写返回类型，编译器标准不同，c89,c99,c11之类的，好吧，最好写上吧。**\n\n- 定义函数\n\n  ```C\n  return_type function_name(parameter list){\n    body of the function;\n  }\n  ```\n\n  函数的构成：\n\n  - 返回类型，若有则是返回数据的数据类型，若无则是void，或者不写。\n  - 函数名称，也就是函数的实际名，与参数列表一起构成函数签名。\n  - 参数，参数类似与占位符，用于接收传递过来的参数，在函数内部调用使用，参数可选，函数可无参数。\n  - 函数主体，也就是执行一定的任务逻辑的代码语句。\n\n  ```C\n  /*\n   * 函数返回两个数字中较大的那个数。\n   */\n  int max(int num1,int num2){\n    //声明局部变量\n    int result;\n    if(num1>num2){\n      result = num1;\n    }esle{\n      result = num2;\n    }\n    return result;\n  }\n  ```\n\n  **Note:**函数声明包含返回类型、函数名、参数列表。而不必有函数主体。\n\n  C语言中，函数声明参数列表中的参数名并不重要，只要有参数类型亦可。\n\n  ```C\n  //如此也是合法的\n  int max(int,int);\n  ```\n\n  函数参数多类似为形式参数，调用者需要传递实际参数。\n\n  | 调用类型 | 描述                                       |\n  | ---- | ---------------------------------------- |\n  | 传值调用 | 调用方将数值传递给形参，如果形参在函数内修改数值，但不会形象到外部的实际参数值。C 语言多用此方式。 |\n  | 引用调用 | 调用方将参数的地址复制给形参，此时在函数内形参修改数值，会同步影响到外部实际参数的。 |\n  | 指针形式 | 通过指针传递的方式，形参为实参的指针，操作会影响到实际参数的数据。        |\n\n- 作用域\n\n  任何一个编程语言中，定义的变量都应有其作用范围，称为作用域\n\n  - 局部变量，作用与函数内。\n  - 全局变量，作用与函数外部所有范围。\n  - 形式参数，在函数的参数定义中，也就在函数内有效。类似局部变量了。\n\n  **C语言中，函数的局部参数可以和全局参数同名称，但是内部仅使用局部变量的值。局部变量需要手动初始化，全局变量会自动初始化。**\n\n- 数组\n\n  C语言数组和Java的数组类似，用于存储一类相同类型的数值，声明一个变量，用序列编号指定元素数据。\n\n  | 元素         | 元素         | 元素     | 元素         |\n  | ---------- | ---------- | ------ | ---------- |\n  | numbers[0] | numbers[1] | ...... | numbers[n] |\n\n  声明与初始化：\n\n```C\n  //声明\n  type arrayName[arraySize]\n  double balance[10];\n  double balance[3] = {12.0,3.5,8.8};\n  double balance[] = {7.9,0.1,3.2}\n  //单个元素赋值\n  balacne[0] = 8.9;\n```\n\n  数组的访问使用数组下标，从左至右依次为0----n，某个元素则为arrayName[i];\n\n  | 概念      | 描述                                   |\n  | ------- | ------------------------------------ |\n  | 多维数组    | 即数组的元素又是数组，常见的为二维数组。                 |\n  | 传递数组函数  | 通过指定不带索引的数组名称，来给函数传递一个数组的指针。也就是作为形参。 |\n  | 从函数返回数组 | 函数的返回类型。                             |\n  | 指向数组的指针 | 通过指定不带索引的数组名称，来生成一个指向数组中第一个元素的指针。    |\n\n## 2、指针\n\nC语言指针是简单而有趣的一个概念，便于简化程序任务，比如动态内存分配等。\n\n每一个变量都有一个内存地址，这个地址是有一个编号的。\n\n```C\n#include <stdio.h>\nvoid main(){\n  int var1;\n  char var2[10];\n  //printf函数参数为可变参数，必有string哦，不然会报错。和java不同。\n  printf(\"var1变量的地址：%x \\n\",&var1);\n  printf(\"varsb变量的地址：%x \\n\",&var2);\n}\n```\n\n- 指针\n\n  是一个特殊变量，它的值是另一个变量的地址，内存位置的直接地址。类似其他变量和常量，在使用指针存储其他变量的地址之前，需要声明和存储。\n\n  ```C\n  //type为指针的基类型，var-name为指针变量的名称。星号用于标示一个变量是指针。\n  type *var-name;\n  //指针示例\n  int *ip;\n  double *dp;\n  float *fp;\n  char *cp;\n  //不管基类型为何种类型，指针的实际数据类型，都是一个代表内存地址的十六进制数。\n  ```\n\n- 如何使用指针\n\n  使用指针涉及以下操作：\n\n  - 定义指针变量\n  - 把另一变量地址赋值给指针\n  - 访问指针变量中可用地址的值\n\n  `*`用来返回位于操作数所指定的地址的变量的值。\n\n  ```c\n  #include <stdio.h>\n  void main(){\n    int var  = 20;//实际变量的声明\n    int *ip;//指针变量的声明\n    \n    ip = &var;//在指针变量中存储var变量的地址，也就是给指针变量赋值\n    printf(\"var变量的地址：%x\\n\",&var);//C语言printf函数不会换行，所以习惯都是内部加上\\n，初学者可别弄混了哦。\n    //在指针变量中存储的地址\n    printf(\"在ip中存储的地址：%x \\n\",ip);\n    //使用指针方位实际变量的值，也就用指针指向的内存地址，读取地址里面的数值。\n    printf(\"指针所指向地址的存储数据：%d \\n\",*ip);//使用*ip格式来获取指针对应的实际数值。\n  }\n  ```\n\n  **使用\\*符号来作用与指针，便可得到指针所指向地址内的实际数值。**\n\n- Null指针\n\n  变量声明的时候，如果没有明确赋值，最好给指针赋值一个NULL值，如此为空指针。\n\n  `NULL`指针是定义在标准库中值为零的常量。\n\n  ```C\n  #include <stdio.h>\n  void main(){\n    int *ip=null;\n    //输出ip的值，就是0\n    printf(\"ip的值是：%x \\n\",ip);\n  }\n  ```\n\n  **Note:**弄清几个概念，&var表示var的地址，*var是指var指针所指向地址的储存的数值。\n\n  多数操作系统都不允许访问地址为0的内存，其为系统保留内存，有特殊含义，表明指针不指向可访问的内存位置。依据惯例指针包含空值，则认为它不指向任何地址。\n\n  ```c\n  if(ptr)//表示，如果ptr非空，则完成\n  if(!ptr)//表示，如果ptr为空，则完成。\n  ```\n\n- 指针详解\n\n  | 概念      | 描述                           |\n  | ------- | ---------------------------- |\n  | 指针的算数运算 | 指针可以进行四种算术运算++、--、+、-        |\n  | 指针数组    | 可以定义用来存储指针的数组                |\n  | 指向指针的指针 | C语言允许指向指针的指针                 |\n  | 传递指针给函数 | 通过引用过地址传递参数，使传递的参数在调用的函数中被改变 |\n  | 从函数返回指针 | C允许函数返回指针到局部变量、静态变量和动态内存分配   |\n\n\n- 字符串\n\n  C语言中字符串实际上是使用`null`字符`\\0`终止的一维字符数组。\n```C\n  char cs[6] = {'H','e','l','l','o','\\0'};\n  //这就是hello字符串，用的是null字符'\\0'结尾的一个字符数组,所以数组长度比字符串数字多1,因为末尾是null的字符标记。也可以写作：\n  char cs[] = \"Hello\";\n```\n\n  C/C++中定义的字符串的内存表示：\n\n ![string](http://img.blog.csdn.net/20161217213357762?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmluZ2x1bWVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n  其实可以不必写出null标记，C编译器会自动追加，在初始化时候。\n\n  常用的C语言字符串操作函数：\n\n  | 函数            | 描述                                   |\n  | ------------- | ------------------------------------ |\n  | strcpy(s1,s2) | 复制字符串s2到s1                           |\n  | strcat(s1,s2) | 连接字符串s2到s1末尾                         |\n  | strlen(s1)    | 返回字符串s1的长度                           |\n  | strcmp(s1,s2) | s1==s2则返回0,`s1<s2`则返回小于0,s1>s2则返回大于0 |\n  | strchr(s1,ch) | 返回一个指针，指向字符串s1中字符ch的第一次出现的位置         |\n  | strstr(s1,s2) | 返回一直指针，指向字符串s1中字符串s2的第一次出现的位置        |\n\n## 3、结构体\n\nC语言中数组是存储一类相同类型的数据变量，而`结构`则可以存储不同类型的数据项。有点类似面向对象的编程语言中的实体类`bean`的封装。\n\n- 定义结构\n\n  `struct`语句，可以定义一个包含多个成员的数据类型。\n\n  ```C\n  struct [structure tag]{\n    member definition;\n    member definition;\n    ...\n    member definition;\n  }[one or more structure variables]\n  ```\n\n  其中`structure tag `是可选的，每个`member definition`是标准的变量定义，比如`int i;double d;`如下示例，定义一个Book结构的方式\n\n  ```C\n  struct Books{\n    char title[50];\n    char author[50];\n    char subject[100];\n    int book_id;\n  } book;\n  ```\n\n- 访问结构成员\n\n  使用成员运算符`.`示例：\n\n  ```C\n  #include <stdio.h>\n  #include <string.h>\n  //定义结构体\n  struct Books{\n      char title[50];\n  \tchar author[50];\n  \tchar subject[100];\n  \tint book_id;\n  };\n  //main函数\n  void main(){\n    //声明结构体的变量，使用关键词struct\n    struct Books Book1;\n    struct Books Book2;\n    //初始化变量的内部数据,结构体成员，用变量名.成员名\n    strcpy(Book1.title,\"C语言编程\");\n    strcpy(Book1.author,\"谭浩强\");\n    strcpy(Book1.subject,\"C语言编程入门\");\n    Book1.book_id = 10086;\n    //输出Book1信息\n    printf(\"Book1的标题：%s \\n\",Book1.title);\n    printf(\"Book1的作者：%s \\n\",Book1.author);\n    printf(\"Book1的副标题：%s \\n\",Book1.subject);\n    printf(\"Book1的编号：%d \\n\",Book1.book_id);\n    //Book2类似\n    ...\n  }\n  ```\n\n- 结构体作为函数参数\n\n  结构体也可以作为参数传递给函数调用，类似变量和指针。不同与Java语言的方法函数，这里需要先声明结构函数，然后实现，在调用。\n\n  ```c\n  #include <stdio.h>\n  #include <string.h>\n   \n  struct Books\n  {\n     char  title[50];\n     char  author[50];\n     char  subject[100];\n     int   book_id;\n  };\n\n  /* 函数声明 */\n  void printBook( struct Books book );\n  int main( )\n  {\n     struct Books Book1;        /* 声明 Book1，类型为 Book */\n     struct Books Book2;        /* 声明 Book2，类型为 Book */\n   \n     /* Book1 详述 */\n     strcpy( Book1.title, \"C Programming\");\n     strcpy( Book1.author, \"Nuha Ali\"); \n     strcpy( Book1.subject, \"C Programming Tutorial\");\n     Book1.book_id = 6495407;\n\n     /* Book2 详述 */\n     strcpy( Book2.title, \"Telecom Billing\");\n     strcpy( Book2.author, \"Zara Ali\");\n     strcpy( Book2.subject, \"Telecom Billing Tutorial\");\n     Book2.book_id = 6495700;\n   \n     /* 输出 Book1 信息 */\n     printBook( Book1 );\n\n     /* 输出 Book2 信息 */\n     printBook( Book2 );\n\n     return 0;\n  }\n  void printBook( struct Books book )\n  {\n     printf( \"Book title : %s\\n\", book.title);\n     printf( \"Book author : %s\\n\", book.author);\n     printf( \"Book subject : %s\\n\", book.subject);\n     printf( \"Book book_id : %d\\n\", book.book_id);\n  }\n  ```\n\n- 指向结构的指针\n\n  可以定义结构体的指针，类似变量和指针，\n\n  ```c\n  //声明指针\n  struct Books *struct_pointer;\n  //将变量的地址，赋值给指针\n  struct_pointer = &Book1;\n  //要想让这个指针能够访问到结构体中的某个成员，就需要用->运算符\n  struct_pointer->title;//指针访问结构体中的title变量的值\n  ```\n\n  **上例使用指针模式：**\n\n  ```C\n  //其他不变\n  ...\n  printBook(&Book1);//这里传入的是指针\n  ...\n  void printBook(struct Books *book){//结构体的指针，作为参数，传递给函数\n    printf(\"Book title:%s \\n\",book->title);//使用->运算符访问结构体成员\n    ...\n  }\n  ```\n\n- 位域\n\n  又称\"位段\"，为了节省空间，仅存储占用一个或者几个二进制位的数据字节，满足一些特殊需要，如开关变量0和1,只用一个二进制位即可满足。\n\n  所谓位域，就是吧一个字节中的二进制位，划分为几个不同的区域，位域有域名，可以在程序中用域名来操作，从而可以把不同的对象用一个字节的二进制位域来表示。\n\n  >位域定义和变量说明\n  >\n  >```c\n  >struct 位域结构名{\n  >  位域列表\n  >};\n  >```\n  >\n  >其中位域列表的形式：\n  >\n  >`类型说明符 位域名:位域长度`\n\n  示例：\n\n  ```C\n  struct bs{\n    int a:8;\n    int b:2;\n    int c:6;\n  };\n  ```\n\n  位域变量的说明与结构变量的说明方式相同，可采用先定义后说明，同时定义说明或者直接说明三种方式。\n\n  ```C\n  struct bs{\n    int a:8;//占用的二进制位数8个\n    int b:2;\n    int c:6;\n  } data;\n  ```\n\n  如上则是同时定义和说明一个`bs`的变量`data`，占用两个字节(两个8位)。\n\n  ```C\n  struct packed_stuct{\n    unsigned int f1:1;\n    unsigned int f2:1;\n    unsigned int f3:1;\n    unsigned int f4:1;\n    unsigned int type:4;\n    unsigned int my_int:9;//注意此处，前面有int，和下面的注意事项中不能超过一个字节的要求，并不矛盾，\n  } pack;\n  ```\n\n  这里pack_struct就包含了6个成员，四个1位的标识符，一个4位的type，还有一个9位的my_int。\n\n- 位于定义的注意事项\n\n  - 一个位域必须存储在同一个字节中，不能跨两个字节，但是可以指定位域的开始位置：\n\n    ```C\n    struct bs{\n      unsigned a:4;\n      unsigned  :4;//空域\n      unsigned b:4;//从下一单元开始存放，而不是使用上面空的那4个\n      unsigned c:4;\n    }\n    ```\n\n  - 位域不恩你个跨两个字节，所以位域长度不能超过8,超过了的话，可能会被重叠，或者放入下一个字节了。\n\n  - 位域可以是无名位域，之用来占位，其不能使用。\n\n    ```c\n    struct k{\n      int a:1;\n      int  :2;//占位的，无名位域，不可用\n      int b:3;\n      int c:2;\n    }\n    ```\n\n  其实，位域也算是一种结构类型，只不过成员是按照二进制位表示而已。\n\n- 位域的使用\n\n  类似与结构成员的使用\n\n  ```C\n  位域变量名.位域名\n  ```\n\n  位域允许各种格式输出，示例：\n\n  ```C\n  void main(){\n    //定义了一个位域，并声明了一个变量bit，和它的指针变量*pbit\n    struct bs{\n      unsigned a:1;\n      unsigned b:3;\n      unsigned c:4;\n    }bit,*pbit;\n    //给位域赋值，注意不要超过位域的值的范围。\n    bit.a = 1;//就只能是0或1,因为定义占1个二进制位\n    bit.b = 7;//0--7,因为占用3个二进制位\n    bit.c = 15;\n    //以整型量输出\n    printf(\"%d,%d,%d \\n\",bit.a,bit.b,bit.c);\n    //使用位域指针访问成员\n    pbit = &bit;//给指针赋值\n    pbit->a = 0;//指针访问成员，并赋值给成员\n    pbit->b&=3;//使用了&=运算符，相当与pbit->b = pbit->b&3;\n    pbit->c|=1;//使用了|=运算符，相当与pbit-> = pbit->b|3;\n    printf(\"%d,%d,%d \\n\",pbit->a,pbit->b,pbit-c);\n  }\n  ```\n\n  ","slug":"C语言学习笔记--基础语法二","published":1,"updated":"2017-03-31T08:37:24.741Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ndxccr001188owlvzsw623","content":"<h1 id=\"C语言基础部分二\"><a href=\"#C语言基础部分二\" class=\"headerlink\" title=\"C语言基础部分二\"></a>C语言基础部分二</h1><h2 id=\"1、函数\"><a href=\"#1、函数\" class=\"headerlink\" title=\"1、函数\"></a>1、函数</h2><p>函数，可以称为方法、子例程或程序等等。定义一个函数需要<strong>声明</strong>函数名称、返回类型和参数。函数就是一组执行特定任务和逻辑的代码语句。C程序至少有一个函数—main();<br><strong>main函數要有返回值，void類型或者int，float等，有的編譯器要求必須int，需注意這點，有的竟然还可以不写返回类型，编译器标准不同，c89,c99,c11之类的，好吧，最好写上吧。</strong></p>\n<ul>\n<li><p>定义函数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">return_type <span class=\"title\">function_name</span><span class=\"params\">(parameter <span class=\"built_in\">list</span>)</span></span>&#123;</div><div class=\"line\">  body of the function;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>函数的构成：</p>\n<ul>\n<li>返回类型，若有则是返回数据的数据类型，若无则是void，或者不写。</li>\n<li>函数名称，也就是函数的实际名，与参数列表一起构成函数签名。</li>\n<li>参数，参数类似与占位符，用于接收传递过来的参数，在函数内部调用使用，参数可选，函数可无参数。</li>\n<li>函数主体，也就是执行一定的任务逻辑的代码语句。</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> * 函数返回两个数字中较大的那个数。</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">max</span><span class=\"params\">(<span class=\"keyword\">int</span> num1,<span class=\"keyword\">int</span> num2)</span></span>&#123;</div><div class=\"line\">  <span class=\"comment\">//声明局部变量</span></div><div class=\"line\">  <span class=\"keyword\">int</span> result;</div><div class=\"line\">  <span class=\"keyword\">if</span>(num1&gt;num2)&#123;</div><div class=\"line\">    result = num1;</div><div class=\"line\">  &#125;esle&#123;</div><div class=\"line\">    result = num2;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>Note:</strong>函数声明包含返回类型、函数名、参数列表。而不必有函数主体。</p>\n<p>C语言中，函数声明参数列表中的参数名并不重要，只要有参数类型亦可。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//如此也是合法的</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">max</span><span class=\"params\">(<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>)</span></span>;</div></pre></td></tr></table></figure>\n<p>函数参数多类似为形式参数，调用者需要传递实际参数。</p>\n<p>| 调用类型 | 描述                                       |<br>| —- | —————————————- |<br>| 传值调用 | 调用方将数值传递给形参，如果形参在函数内修改数值，但不会形象到外部的实际参数值。C 语言多用此方式。 |<br>| 引用调用 | 调用方将参数的地址复制给形参，此时在函数内形参修改数值，会同步影响到外部实际参数的。 |<br>| 指针形式 | 通过指针传递的方式，形参为实参的指针，操作会影响到实际参数的数据。        |</p>\n</li>\n<li><p>作用域</p>\n<p>任何一个编程语言中，定义的变量都应有其作用范围，称为作用域</p>\n<ul>\n<li>局部变量，作用与函数内。</li>\n<li>全局变量，作用与函数外部所有范围。</li>\n<li>形式参数，在函数的参数定义中，也就在函数内有效。类似局部变量了。</li>\n</ul>\n<p><strong>C语言中，函数的局部参数可以和全局参数同名称，但是内部仅使用局部变量的值。局部变量需要手动初始化，全局变量会自动初始化。</strong></p>\n</li>\n<li><p>数组</p>\n<p>C语言数组和Java的数组类似，用于存储一类相同类型的数值，声明一个变量，用序列编号指定元素数据。</p>\n<p>| 元素         | 元素         | 元素     | 元素         |<br>| ———- | ———- | —— | ———- |<br>| numbers[0] | numbers[1] | …… | numbers[n] |</p>\n<p>声明与初始化：</p>\n</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//声明</span></div><div class=\"line\">type arrayName[arraySize]</div><div class=\"line\"><span class=\"keyword\">double</span> balance[<span class=\"number\">10</span>];</div><div class=\"line\"><span class=\"keyword\">double</span> balance[<span class=\"number\">3</span>] = &#123;<span class=\"number\">12.0</span>,<span class=\"number\">3.5</span>,<span class=\"number\">8.8</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">double</span> balance[] = &#123;<span class=\"number\">7.9</span>,<span class=\"number\">0.1</span>,<span class=\"number\">3.2</span>&#125;</div><div class=\"line\"><span class=\"comment\">//单个元素赋值</span></div><div class=\"line\">balacne[<span class=\"number\">0</span>] = <span class=\"number\">8.9</span>;</div></pre></td></tr></table></figure>\n<p>  数组的访问使用数组下标，从左至右依次为0—-n，某个元素则为arrayName[i];</p>\n<table>\n<thead>\n<tr>\n<th>概念</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>多维数组</td>\n<td>即数组的元素又是数组，常见的为二维数组。</td>\n</tr>\n<tr>\n<td>传递数组函数</td>\n<td>通过指定不带索引的数组名称，来给函数传递一个数组的指针。也就是作为形参。</td>\n</tr>\n<tr>\n<td>从函数返回数组</td>\n<td>函数的返回类型。</td>\n</tr>\n<tr>\n<td>指向数组的指针</td>\n<td>通过指定不带索引的数组名称，来生成一个指向数组中第一个元素的指针。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"2、指针\"><a href=\"#2、指针\" class=\"headerlink\" title=\"2、指针\"></a>2、指针</h2><p>C语言指针是简单而有趣的一个概念，便于简化程序任务，比如动态内存分配等。</p>\n<p>每一个变量都有一个内存地址，这个地址是有一个编号的。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> var1;</div><div class=\"line\">  <span class=\"keyword\">char</span> var2[<span class=\"number\">10</span>];</div><div class=\"line\">  <span class=\"comment\">//printf函数参数为可变参数，必有string哦，不然会报错。和java不同。</span></div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"var1变量的地址：%x \\n\"</span>,&amp;var1);</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"varsb变量的地址：%x \\n\"</span>,&amp;var2);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>指针</p>\n<p>是一个特殊变量，它的值是另一个变量的地址，内存位置的直接地址。类似其他变量和常量，在使用指针存储其他变量的地址之前，需要声明和存储。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//type为指针的基类型，var-name为指针变量的名称。星号用于标示一个变量是指针。</span></div><div class=\"line\">type *var-name;</div><div class=\"line\"><span class=\"comment\">//指针示例</span></div><div class=\"line\"><span class=\"keyword\">int</span> *ip;</div><div class=\"line\"><span class=\"keyword\">double</span> *dp;</div><div class=\"line\"><span class=\"keyword\">float</span> *fp;</div><div class=\"line\"><span class=\"keyword\">char</span> *cp;</div><div class=\"line\"><span class=\"comment\">//不管基类型为何种类型，指针的实际数据类型，都是一个代表内存地址的十六进制数。</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>如何使用指针</p>\n<p>使用指针涉及以下操作：</p>\n<ul>\n<li>定义指针变量</li>\n<li>把另一变量地址赋值给指针</li>\n<li>访问指针变量中可用地址的值</li>\n</ul>\n<p><code>*</code>用来返回位于操作数所指定的地址的变量的值。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> var  = <span class=\"number\">20</span>;<span class=\"comment\">//实际变量的声明</span></div><div class=\"line\">  <span class=\"keyword\">int</span> *ip;<span class=\"comment\">//指针变量的声明</span></div><div class=\"line\">  </div><div class=\"line\">  ip = &amp;var;<span class=\"comment\">//在指针变量中存储var变量的地址，也就是给指针变量赋值</span></div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"var变量的地址：%x\\n\"</span>,&amp;var);<span class=\"comment\">//C语言printf函数不会换行，所以习惯都是内部加上\\n，初学者可别弄混了哦。</span></div><div class=\"line\">  <span class=\"comment\">//在指针变量中存储的地址</span></div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"在ip中存储的地址：%x \\n\"</span>,ip);</div><div class=\"line\">  <span class=\"comment\">//使用指针方位实际变量的值，也就用指针指向的内存地址，读取地址里面的数值。</span></div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"指针所指向地址的存储数据：%d \\n\"</span>,*ip);<span class=\"comment\">//使用*ip格式来获取指针对应的实际数值。</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>使用*符号来作用与指针，便可得到指针所指向地址内的实际数值。</strong></p>\n</li>\n<li><p>Null指针</p>\n<p>变量声明的时候，如果没有明确赋值，最好给指针赋值一个NULL值，如此为空指针。</p>\n<p><code>NULL</code>指针是定义在标准库中值为零的常量。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> *ip=null;</div><div class=\"line\">  <span class=\"comment\">//输出ip的值，就是0</span></div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"ip的值是：%x \\n\"</span>,ip);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>Note:</strong>弄清几个概念，&amp;var表示var的地址，*var是指var指针所指向地址的储存的数值。</p>\n<p>多数操作系统都不允许访问地址为0的内存，其为系统保留内存，有特殊含义，表明指针不指向可访问的内存位置。依据惯例指针包含空值，则认为它不指向任何地址。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>(ptr)<span class=\"comment\">//表示，如果ptr非空，则完成</span></div><div class=\"line\"><span class=\"keyword\">if</span>(!ptr)<span class=\"comment\">//表示，如果ptr为空，则完成。</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>指针详解</p>\n<p>| 概念      | 描述                           |<br>| ——- | —————————- |<br>| 指针的算数运算 | 指针可以进行四种算术运算++、–、+、-        |<br>| 指针数组    | 可以定义用来存储指针的数组                |<br>| 指向指针的指针 | C语言允许指向指针的指针                 |<br>| 传递指针给函数 | 通过引用过地址传递参数，使传递的参数在调用的函数中被改变 |<br>| 从函数返回指针 | C允许函数返回指针到局部变量、静态变量和动态内存分配   |</p>\n</li>\n</ul>\n<ul>\n<li><p>字符串</p>\n<p>C语言中字符串实际上是使用<code>null</code>字符<code>\\0</code>终止的一维字符数组。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">char</span> cs[<span class=\"number\">6</span>] = &#123;<span class=\"string\">'H'</span>,<span class=\"string\">'e'</span>,<span class=\"string\">'l'</span>,<span class=\"string\">'l'</span>,<span class=\"string\">'o'</span>,<span class=\"string\">'\\0'</span>&#125;;</div><div class=\"line\"><span class=\"comment\">//这就是hello字符串，用的是null字符'\\0'结尾的一个字符数组,所以数组长度比字符串数字多1,因为末尾是null的字符标记。也可以写作：</span></div><div class=\"line\"><span class=\"keyword\">char</span> cs[] = <span class=\"string\">\"Hello\"</span>;</div></pre></td></tr></table></figure>\n<p>C/C++中定义的字符串的内存表示：</p>\n<p><img src=\"http://img.blog.csdn.net/20161217213357762?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmluZ2x1bWVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"string\"></p>\n<p>其实可以不必写出null标记，C编译器会自动追加，在初始化时候。</p>\n<p>常用的C语言字符串操作函数：</p>\n<p>| 函数            | 描述                                   |<br>| ————- | ———————————— |<br>| strcpy(s1,s2) | 复制字符串s2到s1                           |<br>| strcat(s1,s2) | 连接字符串s2到s1末尾                         |<br>| strlen(s1)    | 返回字符串s1的长度                           |<br>| strcmp(s1,s2) | s1==s2则返回0,<code>s1&lt;s2</code>则返回小于0,s1&gt;s2则返回大于0 |<br>| strchr(s1,ch) | 返回一个指针，指向字符串s1中字符ch的第一次出现的位置         |<br>| strstr(s1,s2) | 返回一直指针，指向字符串s1中字符串s2的第一次出现的位置        |</p>\n</li>\n</ul>\n<h2 id=\"3、结构体\"><a href=\"#3、结构体\" class=\"headerlink\" title=\"3、结构体\"></a>3、结构体</h2><p>C语言中数组是存储一类相同类型的数据变量，而<code>结构</code>则可以存储不同类型的数据项。有点类似面向对象的编程语言中的实体类<code>bean</code>的封装。</p>\n<ul>\n<li><p>定义结构</p>\n<p><code>struct</code>语句，可以定义一个包含多个成员的数据类型。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> [structure tag]&#123;</div><div class=\"line\">  member definition;</div><div class=\"line\">  member definition;</div><div class=\"line\">  ...</div><div class=\"line\">  member definition;</div><div class=\"line\">&#125;[one or more structure variables]</div></pre></td></tr></table></figure>\n<p>其中<code>structure tag</code>是可选的，每个<code>member definition</code>是标准的变量定义，比如<code>int i;double d;</code>如下示例，定义一个Book结构的方式</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> Books&#123;</div><div class=\"line\">  <span class=\"keyword\">char</span> title[<span class=\"number\">50</span>];</div><div class=\"line\">  <span class=\"keyword\">char</span> author[<span class=\"number\">50</span>];</div><div class=\"line\">  <span class=\"keyword\">char</span> subject[<span class=\"number\">100</span>];</div><div class=\"line\">  <span class=\"keyword\">int</span> book_id;</div><div class=\"line\">&#125; book;</div></pre></td></tr></table></figure>\n</li>\n<li><p>访问结构成员</p>\n<p>使用成员运算符<code>.</code>示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></div><div class=\"line\"><span class=\"comment\">//定义结构体</span></div><div class=\"line\"><span class=\"keyword\">struct</span> Books&#123;</div><div class=\"line\">    <span class=\"keyword\">char</span> title[<span class=\"number\">50</span>];</div><div class=\"line\">\t<span class=\"keyword\">char</span> author[<span class=\"number\">50</span>];</div><div class=\"line\">\t<span class=\"keyword\">char</span> subject[<span class=\"number\">100</span>];</div><div class=\"line\">\t<span class=\"keyword\">int</span> book_id;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">//main函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"comment\">//声明结构体的变量，使用关键词struct</span></div><div class=\"line\">  <span class=\"keyword\">struct</span> Books Book1;</div><div class=\"line\">  <span class=\"keyword\">struct</span> Books Book2;</div><div class=\"line\">  <span class=\"comment\">//初始化变量的内部数据,结构体成员，用变量名.成员名</span></div><div class=\"line\">  <span class=\"built_in\">strcpy</span>(Book1.title,<span class=\"string\">\"C语言编程\"</span>);</div><div class=\"line\">  <span class=\"built_in\">strcpy</span>(Book1.author,<span class=\"string\">\"谭浩强\"</span>);</div><div class=\"line\">  <span class=\"built_in\">strcpy</span>(Book1.subject,<span class=\"string\">\"C语言编程入门\"</span>);</div><div class=\"line\">  Book1.book_id = <span class=\"number\">10086</span>;</div><div class=\"line\">  <span class=\"comment\">//输出Book1信息</span></div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Book1的标题：%s \\n\"</span>,Book1.title);</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Book1的作者：%s \\n\"</span>,Book1.author);</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Book1的副标题：%s \\n\"</span>,Book1.subject);</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Book1的编号：%d \\n\"</span>,Book1.book_id);</div><div class=\"line\">  <span class=\"comment\">//Book2类似</span></div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>结构体作为函数参数</p>\n<p>结构体也可以作为参数传递给函数调用，类似变量和指针。不同与Java语言的方法函数，这里需要先声明结构函数，然后实现，在调用。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">struct</span> Books</div><div class=\"line\">&#123;</div><div class=\"line\">   <span class=\"keyword\">char</span>  title[<span class=\"number\">50</span>];</div><div class=\"line\">   <span class=\"keyword\">char</span>  author[<span class=\"number\">50</span>];</div><div class=\"line\">   <span class=\"keyword\">char</span>  subject[<span class=\"number\">100</span>];</div><div class=\"line\">   <span class=\"keyword\">int</span>   book_id;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 函数声明 */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printBook</span><span class=\"params\">( <span class=\"keyword\">struct</span> Books book )</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">( )</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">   <span class=\"keyword\">struct</span> Books Book1;        <span class=\"comment\">/* 声明 Book1，类型为 Book */</span></div><div class=\"line\">   <span class=\"keyword\">struct</span> Books Book2;        <span class=\"comment\">/* 声明 Book2，类型为 Book */</span></div><div class=\"line\"> </div><div class=\"line\">   <span class=\"comment\">/* Book1 详述 */</span></div><div class=\"line\">   <span class=\"built_in\">strcpy</span>( Book1.title, <span class=\"string\">\"C Programming\"</span>);</div><div class=\"line\">   <span class=\"built_in\">strcpy</span>( Book1.author, <span class=\"string\">\"Nuha Ali\"</span>); </div><div class=\"line\">   <span class=\"built_in\">strcpy</span>( Book1.subject, <span class=\"string\">\"C Programming Tutorial\"</span>);</div><div class=\"line\">   Book1.book_id = <span class=\"number\">6495407</span>;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">/* Book2 详述 */</span></div><div class=\"line\">   <span class=\"built_in\">strcpy</span>( Book2.title, <span class=\"string\">\"Telecom Billing\"</span>);</div><div class=\"line\">   <span class=\"built_in\">strcpy</span>( Book2.author, <span class=\"string\">\"Zara Ali\"</span>);</div><div class=\"line\">   <span class=\"built_in\">strcpy</span>( Book2.subject, <span class=\"string\">\"Telecom Billing Tutorial\"</span>);</div><div class=\"line\">   Book2.book_id = <span class=\"number\">6495700</span>;</div><div class=\"line\"> </div><div class=\"line\">   <span class=\"comment\">/* 输出 Book1 信息 */</span></div><div class=\"line\">   printBook( Book1 );</div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">/* 输出 Book2 信息 */</span></div><div class=\"line\">   printBook( Book2 );</div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printBook</span><span class=\"params\">( <span class=\"keyword\">struct</span> Books book )</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">   <span class=\"built_in\">printf</span>( <span class=\"string\">\"Book title : %s\\n\"</span>, book.title);</div><div class=\"line\">   <span class=\"built_in\">printf</span>( <span class=\"string\">\"Book author : %s\\n\"</span>, book.author);</div><div class=\"line\">   <span class=\"built_in\">printf</span>( <span class=\"string\">\"Book subject : %s\\n\"</span>, book.subject);</div><div class=\"line\">   <span class=\"built_in\">printf</span>( <span class=\"string\">\"Book book_id : %d\\n\"</span>, book.book_id);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>指向结构的指针</p>\n<p>可以定义结构体的指针，类似变量和指针，</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//声明指针</span></div><div class=\"line\"><span class=\"keyword\">struct</span> Books *struct_pointer;</div><div class=\"line\"><span class=\"comment\">//将变量的地址，赋值给指针</span></div><div class=\"line\">struct_pointer = &amp;Book1;</div><div class=\"line\"><span class=\"comment\">//要想让这个指针能够访问到结构体中的某个成员，就需要用-&gt;运算符</span></div><div class=\"line\">struct_pointer-&gt;title;<span class=\"comment\">//指针访问结构体中的title变量的值</span></div></pre></td></tr></table></figure>\n<p><strong>上例使用指针模式：</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//其他不变</span></div><div class=\"line\">...</div><div class=\"line\">printBook(&amp;Book1);<span class=\"comment\">//这里传入的是指针</span></div><div class=\"line\">...</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printBook</span><span class=\"params\">(<span class=\"keyword\">struct</span> Books *book)</span></span>&#123;<span class=\"comment\">//结构体的指针，作为参数，传递给函数</span></div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Book title:%s \\n\"</span>,book-&gt;title);<span class=\"comment\">//使用-&gt;运算符访问结构体成员</span></div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>位域</p>\n<p>又称”位段”，为了节省空间，仅存储占用一个或者几个二进制位的数据字节，满足一些特殊需要，如开关变量0和1,只用一个二进制位即可满足。</p>\n<p>所谓位域，就是吧一个字节中的二进制位，划分为几个不同的区域，位域有域名，可以在程序中用域名来操作，从而可以把不同的对象用一个字节的二进制位域来表示。</p>\n<blockquote>\n<p>位域定义和变量说明</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;<span class=\"keyword\">struct</span> 位域结构名&#123;</div><div class=\"line\">&gt;  位域列表</div><div class=\"line\">&gt;&#125;;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>其中位域列表的形式：</p>\n<p><code>类型说明符 位域名:位域长度</code></p>\n</blockquote>\n<p>示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> bs&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> a:<span class=\"number\">8</span>;</div><div class=\"line\">  <span class=\"keyword\">int</span> b:<span class=\"number\">2</span>;</div><div class=\"line\">  <span class=\"keyword\">int</span> c:<span class=\"number\">6</span>;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>位域变量的说明与结构变量的说明方式相同，可采用先定义后说明，同时定义说明或者直接说明三种方式。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> bs&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> a:<span class=\"number\">8</span>;<span class=\"comment\">//占用的二进制位数8个</span></div><div class=\"line\">  <span class=\"keyword\">int</span> b:<span class=\"number\">2</span>;</div><div class=\"line\">  <span class=\"keyword\">int</span> c:<span class=\"number\">6</span>;</div><div class=\"line\">&#125; data;</div></pre></td></tr></table></figure>\n<p>如上则是同时定义和说明一个<code>bs</code>的变量<code>data</code>，占用两个字节(两个8位)。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> packed_stuct&#123;</div><div class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> f1:<span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> f2:<span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> f3:<span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> f4:<span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> type:<span class=\"number\">4</span>;</div><div class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> my_int:<span class=\"number\">9</span>;<span class=\"comment\">//注意此处，前面有int，和下面的注意事项中不能超过一个字节的要求，并不矛盾，</span></div><div class=\"line\">&#125; pack;</div></pre></td></tr></table></figure>\n<p>这里pack_struct就包含了6个成员，四个1位的标识符，一个4位的type，还有一个9位的my_int。</p>\n</li>\n<li><p>位于定义的注意事项</p>\n<ul>\n<li><p>一个位域必须存储在同一个字节中，不能跨两个字节，但是可以指定位域的开始位置：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> bs&#123;</div><div class=\"line\">  <span class=\"keyword\">unsigned</span> a:<span class=\"number\">4</span>;</div><div class=\"line\">  <span class=\"keyword\">unsigned</span>  :<span class=\"number\">4</span>;<span class=\"comment\">//空域</span></div><div class=\"line\">  <span class=\"keyword\">unsigned</span> b:<span class=\"number\">4</span>;<span class=\"comment\">//从下一单元开始存放，而不是使用上面空的那4个</span></div><div class=\"line\">  <span class=\"keyword\">unsigned</span> c:<span class=\"number\">4</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>位域不恩你个跨两个字节，所以位域长度不能超过8,超过了的话，可能会被重叠，或者放入下一个字节了。</p>\n</li>\n<li><p>位域可以是无名位域，之用来占位，其不能使用。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> k&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> a:<span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">int</span>  :<span class=\"number\">2</span>;<span class=\"comment\">//占位的，无名位域，不可用</span></div><div class=\"line\">  <span class=\"keyword\">int</span> b:<span class=\"number\">3</span>;</div><div class=\"line\">  <span class=\"keyword\">int</span> c:<span class=\"number\">2</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>其实，位域也算是一种结构类型，只不过成员是按照二进制位表示而已。</p>\n</li>\n<li><p>位域的使用</p>\n<p>类似与结构成员的使用</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">位域变量名.位域名</div></pre></td></tr></table></figure>\n<p>位域允许各种格式输出，示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"comment\">//定义了一个位域，并声明了一个变量bit，和它的指针变量*pbit</span></div><div class=\"line\">  <span class=\"keyword\">struct</span> bs&#123;</div><div class=\"line\">    <span class=\"keyword\">unsigned</span> a:<span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">unsigned</span> b:<span class=\"number\">3</span>;</div><div class=\"line\">    <span class=\"keyword\">unsigned</span> c:<span class=\"number\">4</span>;</div><div class=\"line\">  &#125;bit,*pbit;</div><div class=\"line\">  <span class=\"comment\">//给位域赋值，注意不要超过位域的值的范围。</span></div><div class=\"line\">  bit.a = <span class=\"number\">1</span>;<span class=\"comment\">//就只能是0或1,因为定义占1个二进制位</span></div><div class=\"line\">  bit.b = <span class=\"number\">7</span>;<span class=\"comment\">//0--7,因为占用3个二进制位</span></div><div class=\"line\">  bit.c = <span class=\"number\">15</span>;</div><div class=\"line\">  <span class=\"comment\">//以整型量输出</span></div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d,%d,%d \\n\"</span>,bit.a,bit.b,bit.c);</div><div class=\"line\">  <span class=\"comment\">//使用位域指针访问成员</span></div><div class=\"line\">  pbit = &amp;bit;<span class=\"comment\">//给指针赋值</span></div><div class=\"line\">  pbit-&gt;a = <span class=\"number\">0</span>;<span class=\"comment\">//指针访问成员，并赋值给成员</span></div><div class=\"line\">  pbit-&gt;b&amp;=<span class=\"number\">3</span>;<span class=\"comment\">//使用了&amp;=运算符，相当与pbit-&gt;b = pbit-&gt;b&amp;3;</span></div><div class=\"line\">  pbit-&gt;c|=<span class=\"number\">1</span>;<span class=\"comment\">//使用了|=运算符，相当与pbit-&gt; = pbit-&gt;b|3;</span></div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d,%d,%d \\n\"</span>,pbit-&gt;a,pbit-&gt;b,pbit-c);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"C语言基础部分二\"><a href=\"#C语言基础部分二\" class=\"headerlink\" title=\"C语言基础部分二\"></a>C语言基础部分二</h1><h2 id=\"1、函数\"><a href=\"#1、函数\" class=\"headerlink\" title=\"1、函数\"></a>1、函数</h2><p>函数，可以称为方法、子例程或程序等等。定义一个函数需要<strong>声明</strong>函数名称、返回类型和参数。函数就是一组执行特定任务和逻辑的代码语句。C程序至少有一个函数—main();<br><strong>main函數要有返回值，void類型或者int，float等，有的編譯器要求必須int，需注意這點，有的竟然还可以不写返回类型，编译器标准不同，c89,c99,c11之类的，好吧，最好写上吧。</strong></p>\n<ul>\n<li><p>定义函数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">return_type <span class=\"title\">function_name</span><span class=\"params\">(parameter <span class=\"built_in\">list</span>)</span></span>&#123;</div><div class=\"line\">  body of the function;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>函数的构成：</p>\n<ul>\n<li>返回类型，若有则是返回数据的数据类型，若无则是void，或者不写。</li>\n<li>函数名称，也就是函数的实际名，与参数列表一起构成函数签名。</li>\n<li>参数，参数类似与占位符，用于接收传递过来的参数，在函数内部调用使用，参数可选，函数可无参数。</li>\n<li>函数主体，也就是执行一定的任务逻辑的代码语句。</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> * 函数返回两个数字中较大的那个数。</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">max</span><span class=\"params\">(<span class=\"keyword\">int</span> num1,<span class=\"keyword\">int</span> num2)</span></span>&#123;</div><div class=\"line\">  <span class=\"comment\">//声明局部变量</span></div><div class=\"line\">  <span class=\"keyword\">int</span> result;</div><div class=\"line\">  <span class=\"keyword\">if</span>(num1&gt;num2)&#123;</div><div class=\"line\">    result = num1;</div><div class=\"line\">  &#125;esle&#123;</div><div class=\"line\">    result = num2;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>Note:</strong>函数声明包含返回类型、函数名、参数列表。而不必有函数主体。</p>\n<p>C语言中，函数声明参数列表中的参数名并不重要，只要有参数类型亦可。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//如此也是合法的</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">max</span><span class=\"params\">(<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>)</span></span>;</div></pre></td></tr></table></figure>\n<p>函数参数多类似为形式参数，调用者需要传递实际参数。</p>\n<p>| 调用类型 | 描述                                       |<br>| —- | —————————————- |<br>| 传值调用 | 调用方将数值传递给形参，如果形参在函数内修改数值，但不会形象到外部的实际参数值。C 语言多用此方式。 |<br>| 引用调用 | 调用方将参数的地址复制给形参，此时在函数内形参修改数值，会同步影响到外部实际参数的。 |<br>| 指针形式 | 通过指针传递的方式，形参为实参的指针，操作会影响到实际参数的数据。        |</p>\n</li>\n<li><p>作用域</p>\n<p>任何一个编程语言中，定义的变量都应有其作用范围，称为作用域</p>\n<ul>\n<li>局部变量，作用与函数内。</li>\n<li>全局变量，作用与函数外部所有范围。</li>\n<li>形式参数，在函数的参数定义中，也就在函数内有效。类似局部变量了。</li>\n</ul>\n<p><strong>C语言中，函数的局部参数可以和全局参数同名称，但是内部仅使用局部变量的值。局部变量需要手动初始化，全局变量会自动初始化。</strong></p>\n</li>\n<li><p>数组</p>\n<p>C语言数组和Java的数组类似，用于存储一类相同类型的数值，声明一个变量，用序列编号指定元素数据。</p>\n<p>| 元素         | 元素         | 元素     | 元素         |<br>| ———- | ———- | —— | ———- |<br>| numbers[0] | numbers[1] | …… | numbers[n] |</p>\n<p>声明与初始化：</p>\n</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//声明</span></div><div class=\"line\">type arrayName[arraySize]</div><div class=\"line\"><span class=\"keyword\">double</span> balance[<span class=\"number\">10</span>];</div><div class=\"line\"><span class=\"keyword\">double</span> balance[<span class=\"number\">3</span>] = &#123;<span class=\"number\">12.0</span>,<span class=\"number\">3.5</span>,<span class=\"number\">8.8</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">double</span> balance[] = &#123;<span class=\"number\">7.9</span>,<span class=\"number\">0.1</span>,<span class=\"number\">3.2</span>&#125;</div><div class=\"line\"><span class=\"comment\">//单个元素赋值</span></div><div class=\"line\">balacne[<span class=\"number\">0</span>] = <span class=\"number\">8.9</span>;</div></pre></td></tr></table></figure>\n<p>  数组的访问使用数组下标，从左至右依次为0—-n，某个元素则为arrayName[i];</p>\n<table>\n<thead>\n<tr>\n<th>概念</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>多维数组</td>\n<td>即数组的元素又是数组，常见的为二维数组。</td>\n</tr>\n<tr>\n<td>传递数组函数</td>\n<td>通过指定不带索引的数组名称，来给函数传递一个数组的指针。也就是作为形参。</td>\n</tr>\n<tr>\n<td>从函数返回数组</td>\n<td>函数的返回类型。</td>\n</tr>\n<tr>\n<td>指向数组的指针</td>\n<td>通过指定不带索引的数组名称，来生成一个指向数组中第一个元素的指针。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"2、指针\"><a href=\"#2、指针\" class=\"headerlink\" title=\"2、指针\"></a>2、指针</h2><p>C语言指针是简单而有趣的一个概念，便于简化程序任务，比如动态内存分配等。</p>\n<p>每一个变量都有一个内存地址，这个地址是有一个编号的。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> var1;</div><div class=\"line\">  <span class=\"keyword\">char</span> var2[<span class=\"number\">10</span>];</div><div class=\"line\">  <span class=\"comment\">//printf函数参数为可变参数，必有string哦，不然会报错。和java不同。</span></div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"var1变量的地址：%x \\n\"</span>,&amp;var1);</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"varsb变量的地址：%x \\n\"</span>,&amp;var2);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>指针</p>\n<p>是一个特殊变量，它的值是另一个变量的地址，内存位置的直接地址。类似其他变量和常量，在使用指针存储其他变量的地址之前，需要声明和存储。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//type为指针的基类型，var-name为指针变量的名称。星号用于标示一个变量是指针。</span></div><div class=\"line\">type *var-name;</div><div class=\"line\"><span class=\"comment\">//指针示例</span></div><div class=\"line\"><span class=\"keyword\">int</span> *ip;</div><div class=\"line\"><span class=\"keyword\">double</span> *dp;</div><div class=\"line\"><span class=\"keyword\">float</span> *fp;</div><div class=\"line\"><span class=\"keyword\">char</span> *cp;</div><div class=\"line\"><span class=\"comment\">//不管基类型为何种类型，指针的实际数据类型，都是一个代表内存地址的十六进制数。</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>如何使用指针</p>\n<p>使用指针涉及以下操作：</p>\n<ul>\n<li>定义指针变量</li>\n<li>把另一变量地址赋值给指针</li>\n<li>访问指针变量中可用地址的值</li>\n</ul>\n<p><code>*</code>用来返回位于操作数所指定的地址的变量的值。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> var  = <span class=\"number\">20</span>;<span class=\"comment\">//实际变量的声明</span></div><div class=\"line\">  <span class=\"keyword\">int</span> *ip;<span class=\"comment\">//指针变量的声明</span></div><div class=\"line\">  </div><div class=\"line\">  ip = &amp;var;<span class=\"comment\">//在指针变量中存储var变量的地址，也就是给指针变量赋值</span></div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"var变量的地址：%x\\n\"</span>,&amp;var);<span class=\"comment\">//C语言printf函数不会换行，所以习惯都是内部加上\\n，初学者可别弄混了哦。</span></div><div class=\"line\">  <span class=\"comment\">//在指针变量中存储的地址</span></div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"在ip中存储的地址：%x \\n\"</span>,ip);</div><div class=\"line\">  <span class=\"comment\">//使用指针方位实际变量的值，也就用指针指向的内存地址，读取地址里面的数值。</span></div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"指针所指向地址的存储数据：%d \\n\"</span>,*ip);<span class=\"comment\">//使用*ip格式来获取指针对应的实际数值。</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>使用*符号来作用与指针，便可得到指针所指向地址内的实际数值。</strong></p>\n</li>\n<li><p>Null指针</p>\n<p>变量声明的时候，如果没有明确赋值，最好给指针赋值一个NULL值，如此为空指针。</p>\n<p><code>NULL</code>指针是定义在标准库中值为零的常量。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> *ip=null;</div><div class=\"line\">  <span class=\"comment\">//输出ip的值，就是0</span></div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"ip的值是：%x \\n\"</span>,ip);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>Note:</strong>弄清几个概念，&amp;var表示var的地址，*var是指var指针所指向地址的储存的数值。</p>\n<p>多数操作系统都不允许访问地址为0的内存，其为系统保留内存，有特殊含义，表明指针不指向可访问的内存位置。依据惯例指针包含空值，则认为它不指向任何地址。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>(ptr)<span class=\"comment\">//表示，如果ptr非空，则完成</span></div><div class=\"line\"><span class=\"keyword\">if</span>(!ptr)<span class=\"comment\">//表示，如果ptr为空，则完成。</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>指针详解</p>\n<p>| 概念      | 描述                           |<br>| ——- | —————————- |<br>| 指针的算数运算 | 指针可以进行四种算术运算++、–、+、-        |<br>| 指针数组    | 可以定义用来存储指针的数组                |<br>| 指向指针的指针 | C语言允许指向指针的指针                 |<br>| 传递指针给函数 | 通过引用过地址传递参数，使传递的参数在调用的函数中被改变 |<br>| 从函数返回指针 | C允许函数返回指针到局部变量、静态变量和动态内存分配   |</p>\n</li>\n</ul>\n<ul>\n<li><p>字符串</p>\n<p>C语言中字符串实际上是使用<code>null</code>字符<code>\\0</code>终止的一维字符数组。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">char</span> cs[<span class=\"number\">6</span>] = &#123;<span class=\"string\">'H'</span>,<span class=\"string\">'e'</span>,<span class=\"string\">'l'</span>,<span class=\"string\">'l'</span>,<span class=\"string\">'o'</span>,<span class=\"string\">'\\0'</span>&#125;;</div><div class=\"line\"><span class=\"comment\">//这就是hello字符串，用的是null字符'\\0'结尾的一个字符数组,所以数组长度比字符串数字多1,因为末尾是null的字符标记。也可以写作：</span></div><div class=\"line\"><span class=\"keyword\">char</span> cs[] = <span class=\"string\">\"Hello\"</span>;</div></pre></td></tr></table></figure>\n<p>C/C++中定义的字符串的内存表示：</p>\n<p><img src=\"http://img.blog.csdn.net/20161217213357762?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmluZ2x1bWVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"string\"></p>\n<p>其实可以不必写出null标记，C编译器会自动追加，在初始化时候。</p>\n<p>常用的C语言字符串操作函数：</p>\n<p>| 函数            | 描述                                   |<br>| ————- | ———————————— |<br>| strcpy(s1,s2) | 复制字符串s2到s1                           |<br>| strcat(s1,s2) | 连接字符串s2到s1末尾                         |<br>| strlen(s1)    | 返回字符串s1的长度                           |<br>| strcmp(s1,s2) | s1==s2则返回0,<code>s1&lt;s2</code>则返回小于0,s1&gt;s2则返回大于0 |<br>| strchr(s1,ch) | 返回一个指针，指向字符串s1中字符ch的第一次出现的位置         |<br>| strstr(s1,s2) | 返回一直指针，指向字符串s1中字符串s2的第一次出现的位置        |</p>\n</li>\n</ul>\n<h2 id=\"3、结构体\"><a href=\"#3、结构体\" class=\"headerlink\" title=\"3、结构体\"></a>3、结构体</h2><p>C语言中数组是存储一类相同类型的数据变量，而<code>结构</code>则可以存储不同类型的数据项。有点类似面向对象的编程语言中的实体类<code>bean</code>的封装。</p>\n<ul>\n<li><p>定义结构</p>\n<p><code>struct</code>语句，可以定义一个包含多个成员的数据类型。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> [structure tag]&#123;</div><div class=\"line\">  member definition;</div><div class=\"line\">  member definition;</div><div class=\"line\">  ...</div><div class=\"line\">  member definition;</div><div class=\"line\">&#125;[one or more structure variables]</div></pre></td></tr></table></figure>\n<p>其中<code>structure tag</code>是可选的，每个<code>member definition</code>是标准的变量定义，比如<code>int i;double d;</code>如下示例，定义一个Book结构的方式</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> Books&#123;</div><div class=\"line\">  <span class=\"keyword\">char</span> title[<span class=\"number\">50</span>];</div><div class=\"line\">  <span class=\"keyword\">char</span> author[<span class=\"number\">50</span>];</div><div class=\"line\">  <span class=\"keyword\">char</span> subject[<span class=\"number\">100</span>];</div><div class=\"line\">  <span class=\"keyword\">int</span> book_id;</div><div class=\"line\">&#125; book;</div></pre></td></tr></table></figure>\n</li>\n<li><p>访问结构成员</p>\n<p>使用成员运算符<code>.</code>示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></div><div class=\"line\"><span class=\"comment\">//定义结构体</span></div><div class=\"line\"><span class=\"keyword\">struct</span> Books&#123;</div><div class=\"line\">    <span class=\"keyword\">char</span> title[<span class=\"number\">50</span>];</div><div class=\"line\">\t<span class=\"keyword\">char</span> author[<span class=\"number\">50</span>];</div><div class=\"line\">\t<span class=\"keyword\">char</span> subject[<span class=\"number\">100</span>];</div><div class=\"line\">\t<span class=\"keyword\">int</span> book_id;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">//main函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"comment\">//声明结构体的变量，使用关键词struct</span></div><div class=\"line\">  <span class=\"keyword\">struct</span> Books Book1;</div><div class=\"line\">  <span class=\"keyword\">struct</span> Books Book2;</div><div class=\"line\">  <span class=\"comment\">//初始化变量的内部数据,结构体成员，用变量名.成员名</span></div><div class=\"line\">  <span class=\"built_in\">strcpy</span>(Book1.title,<span class=\"string\">\"C语言编程\"</span>);</div><div class=\"line\">  <span class=\"built_in\">strcpy</span>(Book1.author,<span class=\"string\">\"谭浩强\"</span>);</div><div class=\"line\">  <span class=\"built_in\">strcpy</span>(Book1.subject,<span class=\"string\">\"C语言编程入门\"</span>);</div><div class=\"line\">  Book1.book_id = <span class=\"number\">10086</span>;</div><div class=\"line\">  <span class=\"comment\">//输出Book1信息</span></div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Book1的标题：%s \\n\"</span>,Book1.title);</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Book1的作者：%s \\n\"</span>,Book1.author);</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Book1的副标题：%s \\n\"</span>,Book1.subject);</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Book1的编号：%d \\n\"</span>,Book1.book_id);</div><div class=\"line\">  <span class=\"comment\">//Book2类似</span></div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>结构体作为函数参数</p>\n<p>结构体也可以作为参数传递给函数调用，类似变量和指针。不同与Java语言的方法函数，这里需要先声明结构函数，然后实现，在调用。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">struct</span> Books</div><div class=\"line\">&#123;</div><div class=\"line\">   <span class=\"keyword\">char</span>  title[<span class=\"number\">50</span>];</div><div class=\"line\">   <span class=\"keyword\">char</span>  author[<span class=\"number\">50</span>];</div><div class=\"line\">   <span class=\"keyword\">char</span>  subject[<span class=\"number\">100</span>];</div><div class=\"line\">   <span class=\"keyword\">int</span>   book_id;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 函数声明 */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printBook</span><span class=\"params\">( <span class=\"keyword\">struct</span> Books book )</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">( )</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">   <span class=\"keyword\">struct</span> Books Book1;        <span class=\"comment\">/* 声明 Book1，类型为 Book */</span></div><div class=\"line\">   <span class=\"keyword\">struct</span> Books Book2;        <span class=\"comment\">/* 声明 Book2，类型为 Book */</span></div><div class=\"line\"> </div><div class=\"line\">   <span class=\"comment\">/* Book1 详述 */</span></div><div class=\"line\">   <span class=\"built_in\">strcpy</span>( Book1.title, <span class=\"string\">\"C Programming\"</span>);</div><div class=\"line\">   <span class=\"built_in\">strcpy</span>( Book1.author, <span class=\"string\">\"Nuha Ali\"</span>); </div><div class=\"line\">   <span class=\"built_in\">strcpy</span>( Book1.subject, <span class=\"string\">\"C Programming Tutorial\"</span>);</div><div class=\"line\">   Book1.book_id = <span class=\"number\">6495407</span>;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">/* Book2 详述 */</span></div><div class=\"line\">   <span class=\"built_in\">strcpy</span>( Book2.title, <span class=\"string\">\"Telecom Billing\"</span>);</div><div class=\"line\">   <span class=\"built_in\">strcpy</span>( Book2.author, <span class=\"string\">\"Zara Ali\"</span>);</div><div class=\"line\">   <span class=\"built_in\">strcpy</span>( Book2.subject, <span class=\"string\">\"Telecom Billing Tutorial\"</span>);</div><div class=\"line\">   Book2.book_id = <span class=\"number\">6495700</span>;</div><div class=\"line\"> </div><div class=\"line\">   <span class=\"comment\">/* 输出 Book1 信息 */</span></div><div class=\"line\">   printBook( Book1 );</div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">/* 输出 Book2 信息 */</span></div><div class=\"line\">   printBook( Book2 );</div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printBook</span><span class=\"params\">( <span class=\"keyword\">struct</span> Books book )</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">   <span class=\"built_in\">printf</span>( <span class=\"string\">\"Book title : %s\\n\"</span>, book.title);</div><div class=\"line\">   <span class=\"built_in\">printf</span>( <span class=\"string\">\"Book author : %s\\n\"</span>, book.author);</div><div class=\"line\">   <span class=\"built_in\">printf</span>( <span class=\"string\">\"Book subject : %s\\n\"</span>, book.subject);</div><div class=\"line\">   <span class=\"built_in\">printf</span>( <span class=\"string\">\"Book book_id : %d\\n\"</span>, book.book_id);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>指向结构的指针</p>\n<p>可以定义结构体的指针，类似变量和指针，</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//声明指针</span></div><div class=\"line\"><span class=\"keyword\">struct</span> Books *struct_pointer;</div><div class=\"line\"><span class=\"comment\">//将变量的地址，赋值给指针</span></div><div class=\"line\">struct_pointer = &amp;Book1;</div><div class=\"line\"><span class=\"comment\">//要想让这个指针能够访问到结构体中的某个成员，就需要用-&gt;运算符</span></div><div class=\"line\">struct_pointer-&gt;title;<span class=\"comment\">//指针访问结构体中的title变量的值</span></div></pre></td></tr></table></figure>\n<p><strong>上例使用指针模式：</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//其他不变</span></div><div class=\"line\">...</div><div class=\"line\">printBook(&amp;Book1);<span class=\"comment\">//这里传入的是指针</span></div><div class=\"line\">...</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printBook</span><span class=\"params\">(<span class=\"keyword\">struct</span> Books *book)</span></span>&#123;<span class=\"comment\">//结构体的指针，作为参数，传递给函数</span></div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Book title:%s \\n\"</span>,book-&gt;title);<span class=\"comment\">//使用-&gt;运算符访问结构体成员</span></div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>位域</p>\n<p>又称”位段”，为了节省空间，仅存储占用一个或者几个二进制位的数据字节，满足一些特殊需要，如开关变量0和1,只用一个二进制位即可满足。</p>\n<p>所谓位域，就是吧一个字节中的二进制位，划分为几个不同的区域，位域有域名，可以在程序中用域名来操作，从而可以把不同的对象用一个字节的二进制位域来表示。</p>\n<blockquote>\n<p>位域定义和变量说明</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;<span class=\"keyword\">struct</span> 位域结构名&#123;</div><div class=\"line\">&gt;  位域列表</div><div class=\"line\">&gt;&#125;;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>其中位域列表的形式：</p>\n<p><code>类型说明符 位域名:位域长度</code></p>\n</blockquote>\n<p>示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> bs&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> a:<span class=\"number\">8</span>;</div><div class=\"line\">  <span class=\"keyword\">int</span> b:<span class=\"number\">2</span>;</div><div class=\"line\">  <span class=\"keyword\">int</span> c:<span class=\"number\">6</span>;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>位域变量的说明与结构变量的说明方式相同，可采用先定义后说明，同时定义说明或者直接说明三种方式。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> bs&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> a:<span class=\"number\">8</span>;<span class=\"comment\">//占用的二进制位数8个</span></div><div class=\"line\">  <span class=\"keyword\">int</span> b:<span class=\"number\">2</span>;</div><div class=\"line\">  <span class=\"keyword\">int</span> c:<span class=\"number\">6</span>;</div><div class=\"line\">&#125; data;</div></pre></td></tr></table></figure>\n<p>如上则是同时定义和说明一个<code>bs</code>的变量<code>data</code>，占用两个字节(两个8位)。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> packed_stuct&#123;</div><div class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> f1:<span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> f2:<span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> f3:<span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> f4:<span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> type:<span class=\"number\">4</span>;</div><div class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> my_int:<span class=\"number\">9</span>;<span class=\"comment\">//注意此处，前面有int，和下面的注意事项中不能超过一个字节的要求，并不矛盾，</span></div><div class=\"line\">&#125; pack;</div></pre></td></tr></table></figure>\n<p>这里pack_struct就包含了6个成员，四个1位的标识符，一个4位的type，还有一个9位的my_int。</p>\n</li>\n<li><p>位于定义的注意事项</p>\n<ul>\n<li><p>一个位域必须存储在同一个字节中，不能跨两个字节，但是可以指定位域的开始位置：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> bs&#123;</div><div class=\"line\">  <span class=\"keyword\">unsigned</span> a:<span class=\"number\">4</span>;</div><div class=\"line\">  <span class=\"keyword\">unsigned</span>  :<span class=\"number\">4</span>;<span class=\"comment\">//空域</span></div><div class=\"line\">  <span class=\"keyword\">unsigned</span> b:<span class=\"number\">4</span>;<span class=\"comment\">//从下一单元开始存放，而不是使用上面空的那4个</span></div><div class=\"line\">  <span class=\"keyword\">unsigned</span> c:<span class=\"number\">4</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>位域不恩你个跨两个字节，所以位域长度不能超过8,超过了的话，可能会被重叠，或者放入下一个字节了。</p>\n</li>\n<li><p>位域可以是无名位域，之用来占位，其不能使用。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> k&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> a:<span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">int</span>  :<span class=\"number\">2</span>;<span class=\"comment\">//占位的，无名位域，不可用</span></div><div class=\"line\">  <span class=\"keyword\">int</span> b:<span class=\"number\">3</span>;</div><div class=\"line\">  <span class=\"keyword\">int</span> c:<span class=\"number\">2</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>其实，位域也算是一种结构类型，只不过成员是按照二进制位表示而已。</p>\n</li>\n<li><p>位域的使用</p>\n<p>类似与结构成员的使用</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">位域变量名.位域名</div></pre></td></tr></table></figure>\n<p>位域允许各种格式输出，示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"comment\">//定义了一个位域，并声明了一个变量bit，和它的指针变量*pbit</span></div><div class=\"line\">  <span class=\"keyword\">struct</span> bs&#123;</div><div class=\"line\">    <span class=\"keyword\">unsigned</span> a:<span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">unsigned</span> b:<span class=\"number\">3</span>;</div><div class=\"line\">    <span class=\"keyword\">unsigned</span> c:<span class=\"number\">4</span>;</div><div class=\"line\">  &#125;bit,*pbit;</div><div class=\"line\">  <span class=\"comment\">//给位域赋值，注意不要超过位域的值的范围。</span></div><div class=\"line\">  bit.a = <span class=\"number\">1</span>;<span class=\"comment\">//就只能是0或1,因为定义占1个二进制位</span></div><div class=\"line\">  bit.b = <span class=\"number\">7</span>;<span class=\"comment\">//0--7,因为占用3个二进制位</span></div><div class=\"line\">  bit.c = <span class=\"number\">15</span>;</div><div class=\"line\">  <span class=\"comment\">//以整型量输出</span></div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d,%d,%d \\n\"</span>,bit.a,bit.b,bit.c);</div><div class=\"line\">  <span class=\"comment\">//使用位域指针访问成员</span></div><div class=\"line\">  pbit = &amp;bit;<span class=\"comment\">//给指针赋值</span></div><div class=\"line\">  pbit-&gt;a = <span class=\"number\">0</span>;<span class=\"comment\">//指针访问成员，并赋值给成员</span></div><div class=\"line\">  pbit-&gt;b&amp;=<span class=\"number\">3</span>;<span class=\"comment\">//使用了&amp;=运算符，相当与pbit-&gt;b = pbit-&gt;b&amp;3;</span></div><div class=\"line\">  pbit-&gt;c|=<span class=\"number\">1</span>;<span class=\"comment\">//使用了|=运算符，相当与pbit-&gt; = pbit-&gt;b|3;</span></div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d,%d,%d \\n\"</span>,pbit-&gt;a,pbit-&gt;b,pbit-c);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"C语言学习笔记--基础语法四","date":"2016-12-19T03:18:00.000Z","_content":"\n## 递归\n\n递归是指在函数的定义中使用函数自身的方法，简言之就是自我调用。\n\n```C\nvoid recursion(){\n  recursion();//函数自我调用\n}\nint main(){\n  recursion();\n}\n```\n\n**Note:**使用递归要注意需要有跳出循环的条件，比如阶乘、斐波那契数列等常用到递归。\n\n- 示例\n\n  `阶乘`\n\n```C\n#include <stdio.h>\ndouble factorial(unsigned int i){\n  if(i <= 1){\n    return 1;\n  }\n  return i * factorial(i-1);\n}\nvoid main(){\n  int i = 15;\n  printf(\"%d 的阶乘为 %f \\n\"，i，factorial(i));\n}\n```\n\n`Fibonaci斐波那契数列`\n\n```C\n#include <stdio.h>\nint fibonaci(int i){\n  if(i==0){\n    return 0;\n  }\n  if(i ==1){\n    return 1;\n  }\n  return fibonaci(i-1)+fibonaci(i-2);\n}\nvoid main(){\n  int i;\n  for(i = 0;i<10;i++){\n    printf(\"%d\\t\\n\",fibonaci(i));\n  }\n}\n```\n\n## 可变参数\n\n多数编程语言中都会有可变参数的函数形式\n\n```C\n//可变参数，函数内...省略号表示不定个数的参数，在调用时，可以传入数目不定，但是类型总是一致的。\nint func(int,...){\n  .\n  .\n  .\n}\nvoid main(){\n  //调用可变参数的函数，传入参数的个数可以是不同的\n  func(1,2,3);\n  func(1,2,3,4);\n}\n```\n\n**注：**使用可变参数函数，需要导入`stdarg.h`头文件，其中定义了相关的**宏和函数**步骤：\n\n- 定义一个可变参数函数，最后一个参数为`...`省略号，前面一个参数总是`int`表示参数的个数\n- 函数中创建一个`va_list`类型变量，该类型定义在`stdarg.h`中\n- 使用**int**参数和**va_start**宏来初始化**va_list**变量为一个参数列表\n- 使用**va_arg**宏和**va_list**变量来访问参数列表中的每个项\n- 使用**va_end**来清理赋予**va_list**变量的内存\n\n示例：\n\n```C\n#include <stdio.h>\n#include <stdarg.h>\n//定义一个求平均数的函数，传入的参数不定个数\ndouble average(int num,...){\n  va_list valist;\n  double sum = 0.0;\n  int i;\n  //为 num 个参数初始化 valist\n  va_start(valist,num);\n  //访问所有赋值给valist的参数\n  for(i=0; i<num;i++){\n    sum+=va_arg(valist,int);\n  }\n  //清理为 valist 保留的内存\n  va_end(valist);\n  return sum/num;\n}\nint main(){\n  printf(\"Average of 2,3,4,5 = %f \\n\",average(4,2,3,4,5));\n  printf(\"Average of 5,10,15 = %f \\n\",average(3,5,10,15));\n}\n```\n\n## 内存管理\n\nC语言为内存的分配和管理提供了几个函数`stdlib.h`文件中\n\n```C\n#include <stdio.h>\n#include <stdlib.h>\n//该函数分配一个带有 num 个元素的数组，每个元素大小 size\nvoid *calloc(int num,int size);\n//该函数释放 address 所指向的内存块\nvoid fress(void *address);\n//该函数分配一个 num 个字节的数组，并初始化\nvoid *malloc(int num);\n//该函数重新分配内存,把内存扩展到newsize\nvoid *realloc(void *address,int newsize);\n```\n\n编程时，若预先知道数组大小，便容易定义`char name[100]`若不确定数组大小，则可以用**指针**来指向未定义所需内存大小的字符，后期动态分配内存。\n\n```C\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main(){\n  //已知大小的定义方式\n  char name[100];\n  //不确定大小，使用指针作\n  char *description;\n  \n  strcpy(name,\"Hello C\");\n  //动态分配内存\n  description = malloc(200 * sizeof(char));\n  //也可以用calloc()函数替代malloc()\n  if(description == NULL){\n    fprintf(stderr,\"Error,不能分配所需内存\\n\");\n  }else{\n    strcpy(description,\"Hello C ,非常不错的编程语言\\n\")；\n  }\n  printf(\"Name = %s \\n\",name);\n  printf(\"Description:%s \\n\",description);\n}\n```\n\n程序退出时，会自动释放内存，但是依然建议在不需要内存时候，手动调用`free()`函数释放内存。也可以通过`realloc()`调整内存大小\n\n```C\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nint main(){\n  char name[100];\n  char *description;\n  strcpy(name,\"Boby\");\n  //动态分配内存\n  description = calloc(30,sizeof(char));\n  if(description == NULL){\n    fprintf(stderr,\"错了，又没有分配好内存\\n\");\n  }else {\n    strcpy(description,\"Boby,你好啊\\n\");\n  }\n  //重新调整内存大小\n  description = realloc(description,100*sizeof(char));\n  if(description == NULL){\n    fprintf(stderr,\"好吧，又错了,内存没有调整正确\\n\";)\n  }else{\n  \tstrcat(description,\"Boby,你在哪儿啊\\n\");  \n  }\n  printf(\"Name = %s \\n\",name);\n  printf(\"description : %s \\n\",description);\n  //释放内存\n  free(description);\n}\n```\n\n## 命令行参数\n\n执行程序时，可以从命令行传值给C程序，这类值称为**命令行参数**，当其需要从外部控制程序时候，这类参数就很重要了。\n\n命令行参数，是使用`main()`函数参数来处理，其中`argc`是传入参数的个数，`argv[]`是一个指针数组，指向传递给程序的每个参数。\n\n```C\n#include <stdio.h>\nint main(int argc,char *argv[]){\n  if(argc == 2){\n    printf(\"传递来的参数是%s\\n\"，argv[1]);\n  }else if(argc > 2){\n    printf(\"传递来了许多参数\\n\");\n  }else{\n    printf(\"只有一个参数\\n\");\n  }\n}\n```\n\n**Note:**需要说明的是`argv[0]`存储程序的名字，`argv[1]`才是第一个参数的指针，`*argv[n]`是最后一个参数，如果没有任何参数，argc就是1，传递一个参数，**argc**就是2;\n\n> 多个命令行参数之间用空格分隔，多是参数本身带有空格，那就放在`\"\"`或`''`之内\n\n```C\n$ gcc test.c\n$ ./test.out argument1,argument2\n$ ./test.out argument1,\"argument with blank\"\n```","source":"_posts/C语言学习笔记--基础语法四.md","raw":"---\ntitle: C语言学习笔记--基础语法四\ndate: 2016-12-19 11:18\ntags: \n    - C\ncategories:\n    - 编程相关\n---\n\n## 递归\n\n递归是指在函数的定义中使用函数自身的方法，简言之就是自我调用。\n\n```C\nvoid recursion(){\n  recursion();//函数自我调用\n}\nint main(){\n  recursion();\n}\n```\n\n**Note:**使用递归要注意需要有跳出循环的条件，比如阶乘、斐波那契数列等常用到递归。\n\n- 示例\n\n  `阶乘`\n\n```C\n#include <stdio.h>\ndouble factorial(unsigned int i){\n  if(i <= 1){\n    return 1;\n  }\n  return i * factorial(i-1);\n}\nvoid main(){\n  int i = 15;\n  printf(\"%d 的阶乘为 %f \\n\"，i，factorial(i));\n}\n```\n\n`Fibonaci斐波那契数列`\n\n```C\n#include <stdio.h>\nint fibonaci(int i){\n  if(i==0){\n    return 0;\n  }\n  if(i ==1){\n    return 1;\n  }\n  return fibonaci(i-1)+fibonaci(i-2);\n}\nvoid main(){\n  int i;\n  for(i = 0;i<10;i++){\n    printf(\"%d\\t\\n\",fibonaci(i));\n  }\n}\n```\n\n## 可变参数\n\n多数编程语言中都会有可变参数的函数形式\n\n```C\n//可变参数，函数内...省略号表示不定个数的参数，在调用时，可以传入数目不定，但是类型总是一致的。\nint func(int,...){\n  .\n  .\n  .\n}\nvoid main(){\n  //调用可变参数的函数，传入参数的个数可以是不同的\n  func(1,2,3);\n  func(1,2,3,4);\n}\n```\n\n**注：**使用可变参数函数，需要导入`stdarg.h`头文件，其中定义了相关的**宏和函数**步骤：\n\n- 定义一个可变参数函数，最后一个参数为`...`省略号，前面一个参数总是`int`表示参数的个数\n- 函数中创建一个`va_list`类型变量，该类型定义在`stdarg.h`中\n- 使用**int**参数和**va_start**宏来初始化**va_list**变量为一个参数列表\n- 使用**va_arg**宏和**va_list**变量来访问参数列表中的每个项\n- 使用**va_end**来清理赋予**va_list**变量的内存\n\n示例：\n\n```C\n#include <stdio.h>\n#include <stdarg.h>\n//定义一个求平均数的函数，传入的参数不定个数\ndouble average(int num,...){\n  va_list valist;\n  double sum = 0.0;\n  int i;\n  //为 num 个参数初始化 valist\n  va_start(valist,num);\n  //访问所有赋值给valist的参数\n  for(i=0; i<num;i++){\n    sum+=va_arg(valist,int);\n  }\n  //清理为 valist 保留的内存\n  va_end(valist);\n  return sum/num;\n}\nint main(){\n  printf(\"Average of 2,3,4,5 = %f \\n\",average(4,2,3,4,5));\n  printf(\"Average of 5,10,15 = %f \\n\",average(3,5,10,15));\n}\n```\n\n## 内存管理\n\nC语言为内存的分配和管理提供了几个函数`stdlib.h`文件中\n\n```C\n#include <stdio.h>\n#include <stdlib.h>\n//该函数分配一个带有 num 个元素的数组，每个元素大小 size\nvoid *calloc(int num,int size);\n//该函数释放 address 所指向的内存块\nvoid fress(void *address);\n//该函数分配一个 num 个字节的数组，并初始化\nvoid *malloc(int num);\n//该函数重新分配内存,把内存扩展到newsize\nvoid *realloc(void *address,int newsize);\n```\n\n编程时，若预先知道数组大小，便容易定义`char name[100]`若不确定数组大小，则可以用**指针**来指向未定义所需内存大小的字符，后期动态分配内存。\n\n```C\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main(){\n  //已知大小的定义方式\n  char name[100];\n  //不确定大小，使用指针作\n  char *description;\n  \n  strcpy(name,\"Hello C\");\n  //动态分配内存\n  description = malloc(200 * sizeof(char));\n  //也可以用calloc()函数替代malloc()\n  if(description == NULL){\n    fprintf(stderr,\"Error,不能分配所需内存\\n\");\n  }else{\n    strcpy(description,\"Hello C ,非常不错的编程语言\\n\")；\n  }\n  printf(\"Name = %s \\n\",name);\n  printf(\"Description:%s \\n\",description);\n}\n```\n\n程序退出时，会自动释放内存，但是依然建议在不需要内存时候，手动调用`free()`函数释放内存。也可以通过`realloc()`调整内存大小\n\n```C\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nint main(){\n  char name[100];\n  char *description;\n  strcpy(name,\"Boby\");\n  //动态分配内存\n  description = calloc(30,sizeof(char));\n  if(description == NULL){\n    fprintf(stderr,\"错了，又没有分配好内存\\n\");\n  }else {\n    strcpy(description,\"Boby,你好啊\\n\");\n  }\n  //重新调整内存大小\n  description = realloc(description,100*sizeof(char));\n  if(description == NULL){\n    fprintf(stderr,\"好吧，又错了,内存没有调整正确\\n\";)\n  }else{\n  \tstrcat(description,\"Boby,你在哪儿啊\\n\");  \n  }\n  printf(\"Name = %s \\n\",name);\n  printf(\"description : %s \\n\",description);\n  //释放内存\n  free(description);\n}\n```\n\n## 命令行参数\n\n执行程序时，可以从命令行传值给C程序，这类值称为**命令行参数**，当其需要从外部控制程序时候，这类参数就很重要了。\n\n命令行参数，是使用`main()`函数参数来处理，其中`argc`是传入参数的个数，`argv[]`是一个指针数组，指向传递给程序的每个参数。\n\n```C\n#include <stdio.h>\nint main(int argc,char *argv[]){\n  if(argc == 2){\n    printf(\"传递来的参数是%s\\n\"，argv[1]);\n  }else if(argc > 2){\n    printf(\"传递来了许多参数\\n\");\n  }else{\n    printf(\"只有一个参数\\n\");\n  }\n}\n```\n\n**Note:**需要说明的是`argv[0]`存储程序的名字，`argv[1]`才是第一个参数的指针，`*argv[n]`是最后一个参数，如果没有任何参数，argc就是1，传递一个参数，**argc**就是2;\n\n> 多个命令行参数之间用空格分隔，多是参数本身带有空格，那就放在`\"\"`或`''`之内\n\n```C\n$ gcc test.c\n$ ./test.out argument1,argument2\n$ ./test.out argument1,\"argument with blank\"\n```","slug":"C语言学习笔记--基础语法四","published":1,"updated":"2017-03-31T08:35:38.123Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ndxcct001488ow6hxb3jo7","content":"<h2 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h2><p>递归是指在函数的定义中使用函数自身的方法，简言之就是自我调用。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">recursion</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  recursion();<span class=\"comment\">//函数自我调用</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  recursion();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>Note:</strong>使用递归要注意需要有跳出循环的条件，比如阶乘、斐波那契数列等常用到递归。</p>\n<ul>\n<li><p>示例</p>\n<p><code>阶乘</code></p>\n</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">factorial</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> i)</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(i &lt;= <span class=\"number\">1</span>)&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> i * factorial(i<span class=\"number\">-1</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> i = <span class=\"number\">15</span>;</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d 的阶乘为 %f \\n\"</span>，i，factorial(i));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>Fibonaci斐波那契数列</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fibonaci</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(i==<span class=\"number\">0</span>)&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">if</span>(i ==<span class=\"number\">1</span>)&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> fibonaci(i<span class=\"number\">-1</span>)+fibonaci(i<span class=\"number\">-2</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> i;</div><div class=\"line\">  <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\t\\n\"</span>,fibonaci(i));</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"可变参数\"><a href=\"#可变参数\" class=\"headerlink\" title=\"可变参数\"></a>可变参数</h2><p>多数编程语言中都会有可变参数的函数形式</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//可变参数，函数内...省略号表示不定个数的参数，在调用时，可以传入数目不定，但是类型总是一致的。</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span>,...)</span></span>&#123;</div><div class=\"line\">  .</div><div class=\"line\">  .</div><div class=\"line\">  .</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"comment\">//调用可变参数的函数，传入参数的个数可以是不同的</span></div><div class=\"line\">  func(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>);</div><div class=\"line\">  func(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>注：</strong>使用可变参数函数，需要导入<code>stdarg.h</code>头文件，其中定义了相关的<strong>宏和函数</strong>步骤：</p>\n<ul>\n<li>定义一个可变参数函数，最后一个参数为<code>...</code>省略号，前面一个参数总是<code>int</code>表示参数的个数</li>\n<li>函数中创建一个<code>va_list</code>类型变量，该类型定义在<code>stdarg.h</code>中</li>\n<li>使用<strong>int</strong>参数和<strong>va_start</strong>宏来初始化<strong>va_list</strong>变量为一个参数列表</li>\n<li>使用<strong>va_arg</strong>宏和<strong>va_list</strong>变量来访问参数列表中的每个项</li>\n<li>使用<strong>va_end</strong>来清理赋予<strong>va_list</strong>变量的内存</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdarg.h&gt;</span></span></div><div class=\"line\"><span class=\"comment\">//定义一个求平均数的函数，传入的参数不定个数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">average</span><span class=\"params\">(<span class=\"keyword\">int</span> num,...)</span></span>&#123;</div><div class=\"line\">  va_list valist;</div><div class=\"line\">  <span class=\"keyword\">double</span> sum = <span class=\"number\">0.0</span>;</div><div class=\"line\">  <span class=\"keyword\">int</span> i;</div><div class=\"line\">  <span class=\"comment\">//为 num 个参数初始化 valist</span></div><div class=\"line\">  va_start(valist,num);</div><div class=\"line\">  <span class=\"comment\">//访问所有赋值给valist的参数</span></div><div class=\"line\">  <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i&lt;num;i++)&#123;</div><div class=\"line\">    sum+=va_arg(valist,<span class=\"keyword\">int</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//清理为 valist 保留的内存</span></div><div class=\"line\">  va_end(valist);</div><div class=\"line\">  <span class=\"keyword\">return</span> sum/num;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Average of 2,3,4,5 = %f \\n\"</span>,average(<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>));</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Average of 5,10,15 = %f \\n\"</span>,average(<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">10</span>,<span class=\"number\">15</span>));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"内存管理\"><a href=\"#内存管理\" class=\"headerlink\" title=\"内存管理\"></a>内存管理</h2><p>C语言为内存的分配和管理提供了几个函数<code>stdlib.h</code>文件中</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></div><div class=\"line\"><span class=\"comment\">//该函数分配一个带有 num 个元素的数组，每个元素大小 size</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> *<span class=\"title\">calloc</span><span class=\"params\">(<span class=\"keyword\">int</span> num,<span class=\"keyword\">int</span> size)</span></span>;</div><div class=\"line\"><span class=\"comment\">//该函数释放 address 所指向的内存块</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fress</span><span class=\"params\">(<span class=\"keyword\">void</span> *address)</span></span>;</div><div class=\"line\"><span class=\"comment\">//该函数分配一个 num 个字节的数组，并初始化</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> *<span class=\"title\">malloc</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span></span>;</div><div class=\"line\"><span class=\"comment\">//该函数重新分配内存,把内存扩展到newsize</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> *<span class=\"title\">realloc</span><span class=\"params\">(<span class=\"keyword\">void</span> *address,<span class=\"keyword\">int</span> newsize)</span></span>;</div></pre></td></tr></table></figure>\n<p>编程时，若预先知道数组大小，便容易定义<code>char name[100]</code>若不确定数组大小，则可以用<strong>指针</strong>来指向未定义所需内存大小的字符，后期动态分配内存。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"comment\">//已知大小的定义方式</span></div><div class=\"line\">  <span class=\"keyword\">char</span> name[<span class=\"number\">100</span>];</div><div class=\"line\">  <span class=\"comment\">//不确定大小，使用指针作</span></div><div class=\"line\">  <span class=\"keyword\">char</span> *description;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"built_in\">strcpy</span>(name,<span class=\"string\">\"Hello C\"</span>);</div><div class=\"line\">  <span class=\"comment\">//动态分配内存</span></div><div class=\"line\">  description = <span class=\"built_in\">malloc</span>(<span class=\"number\">200</span> * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>));</div><div class=\"line\">  <span class=\"comment\">//也可以用calloc()函数替代malloc()</span></div><div class=\"line\">  <span class=\"keyword\">if</span>(description == <span class=\"literal\">NULL</span>)&#123;</div><div class=\"line\">    <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">\"Error,不能分配所需内存\\n\"</span>);</div><div class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">strcpy</span>(description,<span class=\"string\">\"Hello C ,非常不错的编程语言\\n\"</span>)；</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Name = %s \\n\"</span>,name);</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Description:%s \\n\"</span>,description);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>程序退出时，会自动释放内存，但是依然建议在不需要内存时候，手动调用<code>free()</code>函数释放内存。也可以通过<code>realloc()</code>调整内存大小</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">char</span> name[<span class=\"number\">100</span>];</div><div class=\"line\">  <span class=\"keyword\">char</span> *description;</div><div class=\"line\">  <span class=\"built_in\">strcpy</span>(name,<span class=\"string\">\"Boby\"</span>);</div><div class=\"line\">  <span class=\"comment\">//动态分配内存</span></div><div class=\"line\">  description = <span class=\"built_in\">calloc</span>(<span class=\"number\">30</span>,<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>));</div><div class=\"line\">  <span class=\"keyword\">if</span>(description == <span class=\"literal\">NULL</span>)&#123;</div><div class=\"line\">    <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">\"错了，又没有分配好内存\\n\"</span>);</div><div class=\"line\">  &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">strcpy</span>(description,<span class=\"string\">\"Boby,你好啊\\n\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//重新调整内存大小</span></div><div class=\"line\">  description = <span class=\"built_in\">realloc</span>(description,<span class=\"number\">100</span>*<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>));</div><div class=\"line\">  <span class=\"keyword\">if</span>(description == <span class=\"literal\">NULL</span>)&#123;</div><div class=\"line\">    <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">\"好吧，又错了,内存没有调整正确\\n\"</span>;)</div><div class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">  \t<span class=\"built_in\">strcat</span>(description,<span class=\"string\">\"Boby,你在哪儿啊\\n\"</span>);  </div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Name = %s \\n\"</span>,name);</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"description : %s \\n\"</span>,description);</div><div class=\"line\">  <span class=\"comment\">//释放内存</span></div><div class=\"line\">  <span class=\"built_in\">free</span>(description);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"命令行参数\"><a href=\"#命令行参数\" class=\"headerlink\" title=\"命令行参数\"></a>命令行参数</h2><p>执行程序时，可以从命令行传值给C程序，这类值称为<strong>命令行参数</strong>，当其需要从外部控制程序时候，这类参数就很重要了。</p>\n<p>命令行参数，是使用<code>main()</code>函数参数来处理，其中<code>argc</code>是传入参数的个数，<code>argv[]</code>是一个指针数组，指向传递给程序的每个参数。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc,<span class=\"keyword\">char</span> *argv[])</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(argc == <span class=\"number\">2</span>)&#123;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"传递来的参数是%s\\n\"</span>，argv[<span class=\"number\">1</span>]);</div><div class=\"line\">  &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(argc &gt; <span class=\"number\">2</span>)&#123;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"传递来了许多参数\\n\"</span>);</div><div class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"只有一个参数\\n\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>Note:</strong>需要说明的是<code>argv[0]</code>存储程序的名字，<code>argv[1]</code>才是第一个参数的指针，<code>*argv[n]</code>是最后一个参数，如果没有任何参数，argc就是1，传递一个参数，<strong>argc</strong>就是2;</p>\n<blockquote>\n<p>多个命令行参数之间用空格分隔，多是参数本身带有空格，那就放在<code>&quot;&quot;</code>或<code>&#39;&#39;</code>之内</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ gcc test.c</div><div class=\"line\">$ ./test.out argument1,argument2</div><div class=\"line\">$ ./test.out argument1,<span class=\"string\">\"argument with blank\"</span></div></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h2><p>递归是指在函数的定义中使用函数自身的方法，简言之就是自我调用。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">recursion</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  recursion();<span class=\"comment\">//函数自我调用</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  recursion();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>Note:</strong>使用递归要注意需要有跳出循环的条件，比如阶乘、斐波那契数列等常用到递归。</p>\n<ul>\n<li><p>示例</p>\n<p><code>阶乘</code></p>\n</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">factorial</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> i)</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(i &lt;= <span class=\"number\">1</span>)&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> i * factorial(i<span class=\"number\">-1</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> i = <span class=\"number\">15</span>;</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d 的阶乘为 %f \\n\"</span>，i，factorial(i));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>Fibonaci斐波那契数列</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fibonaci</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(i==<span class=\"number\">0</span>)&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">if</span>(i ==<span class=\"number\">1</span>)&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> fibonaci(i<span class=\"number\">-1</span>)+fibonaci(i<span class=\"number\">-2</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> i;</div><div class=\"line\">  <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\t\\n\"</span>,fibonaci(i));</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"可变参数\"><a href=\"#可变参数\" class=\"headerlink\" title=\"可变参数\"></a>可变参数</h2><p>多数编程语言中都会有可变参数的函数形式</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//可变参数，函数内...省略号表示不定个数的参数，在调用时，可以传入数目不定，但是类型总是一致的。</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span>,...)</span></span>&#123;</div><div class=\"line\">  .</div><div class=\"line\">  .</div><div class=\"line\">  .</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"comment\">//调用可变参数的函数，传入参数的个数可以是不同的</span></div><div class=\"line\">  func(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>);</div><div class=\"line\">  func(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>注：</strong>使用可变参数函数，需要导入<code>stdarg.h</code>头文件，其中定义了相关的<strong>宏和函数</strong>步骤：</p>\n<ul>\n<li>定义一个可变参数函数，最后一个参数为<code>...</code>省略号，前面一个参数总是<code>int</code>表示参数的个数</li>\n<li>函数中创建一个<code>va_list</code>类型变量，该类型定义在<code>stdarg.h</code>中</li>\n<li>使用<strong>int</strong>参数和<strong>va_start</strong>宏来初始化<strong>va_list</strong>变量为一个参数列表</li>\n<li>使用<strong>va_arg</strong>宏和<strong>va_list</strong>变量来访问参数列表中的每个项</li>\n<li>使用<strong>va_end</strong>来清理赋予<strong>va_list</strong>变量的内存</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdarg.h&gt;</span></span></div><div class=\"line\"><span class=\"comment\">//定义一个求平均数的函数，传入的参数不定个数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">average</span><span class=\"params\">(<span class=\"keyword\">int</span> num,...)</span></span>&#123;</div><div class=\"line\">  va_list valist;</div><div class=\"line\">  <span class=\"keyword\">double</span> sum = <span class=\"number\">0.0</span>;</div><div class=\"line\">  <span class=\"keyword\">int</span> i;</div><div class=\"line\">  <span class=\"comment\">//为 num 个参数初始化 valist</span></div><div class=\"line\">  va_start(valist,num);</div><div class=\"line\">  <span class=\"comment\">//访问所有赋值给valist的参数</span></div><div class=\"line\">  <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i&lt;num;i++)&#123;</div><div class=\"line\">    sum+=va_arg(valist,<span class=\"keyword\">int</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//清理为 valist 保留的内存</span></div><div class=\"line\">  va_end(valist);</div><div class=\"line\">  <span class=\"keyword\">return</span> sum/num;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Average of 2,3,4,5 = %f \\n\"</span>,average(<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>));</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Average of 5,10,15 = %f \\n\"</span>,average(<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">10</span>,<span class=\"number\">15</span>));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"内存管理\"><a href=\"#内存管理\" class=\"headerlink\" title=\"内存管理\"></a>内存管理</h2><p>C语言为内存的分配和管理提供了几个函数<code>stdlib.h</code>文件中</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></div><div class=\"line\"><span class=\"comment\">//该函数分配一个带有 num 个元素的数组，每个元素大小 size</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> *<span class=\"title\">calloc</span><span class=\"params\">(<span class=\"keyword\">int</span> num,<span class=\"keyword\">int</span> size)</span></span>;</div><div class=\"line\"><span class=\"comment\">//该函数释放 address 所指向的内存块</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fress</span><span class=\"params\">(<span class=\"keyword\">void</span> *address)</span></span>;</div><div class=\"line\"><span class=\"comment\">//该函数分配一个 num 个字节的数组，并初始化</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> *<span class=\"title\">malloc</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span></span>;</div><div class=\"line\"><span class=\"comment\">//该函数重新分配内存,把内存扩展到newsize</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> *<span class=\"title\">realloc</span><span class=\"params\">(<span class=\"keyword\">void</span> *address,<span class=\"keyword\">int</span> newsize)</span></span>;</div></pre></td></tr></table></figure>\n<p>编程时，若预先知道数组大小，便容易定义<code>char name[100]</code>若不确定数组大小，则可以用<strong>指针</strong>来指向未定义所需内存大小的字符，后期动态分配内存。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"comment\">//已知大小的定义方式</span></div><div class=\"line\">  <span class=\"keyword\">char</span> name[<span class=\"number\">100</span>];</div><div class=\"line\">  <span class=\"comment\">//不确定大小，使用指针作</span></div><div class=\"line\">  <span class=\"keyword\">char</span> *description;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"built_in\">strcpy</span>(name,<span class=\"string\">\"Hello C\"</span>);</div><div class=\"line\">  <span class=\"comment\">//动态分配内存</span></div><div class=\"line\">  description = <span class=\"built_in\">malloc</span>(<span class=\"number\">200</span> * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>));</div><div class=\"line\">  <span class=\"comment\">//也可以用calloc()函数替代malloc()</span></div><div class=\"line\">  <span class=\"keyword\">if</span>(description == <span class=\"literal\">NULL</span>)&#123;</div><div class=\"line\">    <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">\"Error,不能分配所需内存\\n\"</span>);</div><div class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">strcpy</span>(description,<span class=\"string\">\"Hello C ,非常不错的编程语言\\n\"</span>)；</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Name = %s \\n\"</span>,name);</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Description:%s \\n\"</span>,description);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>程序退出时，会自动释放内存，但是依然建议在不需要内存时候，手动调用<code>free()</code>函数释放内存。也可以通过<code>realloc()</code>调整内存大小</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">char</span> name[<span class=\"number\">100</span>];</div><div class=\"line\">  <span class=\"keyword\">char</span> *description;</div><div class=\"line\">  <span class=\"built_in\">strcpy</span>(name,<span class=\"string\">\"Boby\"</span>);</div><div class=\"line\">  <span class=\"comment\">//动态分配内存</span></div><div class=\"line\">  description = <span class=\"built_in\">calloc</span>(<span class=\"number\">30</span>,<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>));</div><div class=\"line\">  <span class=\"keyword\">if</span>(description == <span class=\"literal\">NULL</span>)&#123;</div><div class=\"line\">    <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">\"错了，又没有分配好内存\\n\"</span>);</div><div class=\"line\">  &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">strcpy</span>(description,<span class=\"string\">\"Boby,你好啊\\n\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//重新调整内存大小</span></div><div class=\"line\">  description = <span class=\"built_in\">realloc</span>(description,<span class=\"number\">100</span>*<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>));</div><div class=\"line\">  <span class=\"keyword\">if</span>(description == <span class=\"literal\">NULL</span>)&#123;</div><div class=\"line\">    <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">\"好吧，又错了,内存没有调整正确\\n\"</span>;)</div><div class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">  \t<span class=\"built_in\">strcat</span>(description,<span class=\"string\">\"Boby,你在哪儿啊\\n\"</span>);  </div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Name = %s \\n\"</span>,name);</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"description : %s \\n\"</span>,description);</div><div class=\"line\">  <span class=\"comment\">//释放内存</span></div><div class=\"line\">  <span class=\"built_in\">free</span>(description);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"命令行参数\"><a href=\"#命令行参数\" class=\"headerlink\" title=\"命令行参数\"></a>命令行参数</h2><p>执行程序时，可以从命令行传值给C程序，这类值称为<strong>命令行参数</strong>，当其需要从外部控制程序时候，这类参数就很重要了。</p>\n<p>命令行参数，是使用<code>main()</code>函数参数来处理，其中<code>argc</code>是传入参数的个数，<code>argv[]</code>是一个指针数组，指向传递给程序的每个参数。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc,<span class=\"keyword\">char</span> *argv[])</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(argc == <span class=\"number\">2</span>)&#123;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"传递来的参数是%s\\n\"</span>，argv[<span class=\"number\">1</span>]);</div><div class=\"line\">  &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(argc &gt; <span class=\"number\">2</span>)&#123;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"传递来了许多参数\\n\"</span>);</div><div class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"只有一个参数\\n\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>Note:</strong>需要说明的是<code>argv[0]</code>存储程序的名字，<code>argv[1]</code>才是第一个参数的指针，<code>*argv[n]</code>是最后一个参数，如果没有任何参数，argc就是1，传递一个参数，<strong>argc</strong>就是2;</p>\n<blockquote>\n<p>多个命令行参数之间用空格分隔，多是参数本身带有空格，那就放在<code>&quot;&quot;</code>或<code>&#39;&#39;</code>之内</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ gcc test.c</div><div class=\"line\">$ ./test.out argument1,argument2</div><div class=\"line\">$ ./test.out argument1,<span class=\"string\">\"argument with blank\"</span></div></pre></td></tr></table></figure>"},{"title":"C语言学习笔记--基础语法一","date":"2016-12-15T12:50:00.000Z","_content":"# C语言学习笔记\n\nC语言是一种通用的、面向过程的计算机编程语言。不同于Java、C#之类的面向对象的语言，C语言适用于底层开发，执行效率接近于汇编语言。\n\n## 基础语法\n\n- 程序结构\n\n  C程序主要包括以下部分\n\n  - 预处理器指令，如`#include <stdio.h>`\n  - 函数，如main()\n  - 变量\n  - 语句&表达式\n  - 注释,`//`，`/***/`单行或多行注释\n\n- 基本语法\n\n  C程序由各种令牌组成，`Tokens`，`;`分号结束语句。\n\n  标识符用数字、字母、下划线组成，类似Java，数字不能开头。\n\n  | auto     | else   | long     | switch   |\n  | -------- | ------ | -------- | -------- |\n  | break    | enum   | register | typedef  |\n  | case     | extern | return   | union    |\n  | char     | float  | short    | unsigned |\n  | const    | for    | signed   | void     |\n  | continue | goto   | sizeof   | volatile |\n  | default  | if     | static   | while    |\n  | do       | int    | struct   | _Packed  |\n  | double   |        |          |          |\n\n- 数据类型\n\n  C语言数据类型\n\n  - 基本类型，整数型、浮点型。\n  - 枚举类型，也算是算数类型，但是枚举定义了一定的变量数值。\n  - void类型，无可用值。\n  - 派生类型，包括指针类型、数组类型、结构类型、共用体类型和函数类型。\n\n  整数型`char`、`unsigned char`、`signed char`、`int`、`unsigned int`、`short`、`unsigned short`、`long`、`unsigned long`\n\n  浮点型、`float`、`double`、`long double`之类的。windows下32位、64位系统，变量的值占用字节大小一致，而类Unix下，不完全一致。\n\n  可以用`sizeof()`函数来确定大小范围。\n\n  ```c\n  #include <stdio.h>\n  #include <limits.h>\n  //主函数入口，有时候会写void，int返回类型，都一样。但是不能不寫，而且有的編譯器要求必須是int返回類型\n  void main(){\n    printf(\"int 存储大小：%1u \\n\",sizeof(int));//注意和Java之类的不同。\n  }\n  ```\n\n  void类型，可以作为返回类型、参数、或者指针的返回指向。\n\n- 变量\n\n  变量定义\n\n  ```C\n  //定义变量\n  int i,j,k;\n  char a;\n  float f = 2.2f;\n  //声明变量，而不用，在函数外。\n  extern value;\n  ```\n\n  C语言有左值(Lvalue)和右值(Rvalue)。其实左值就是变量名的意思，右值可理解为具体数值。\n\n- 常量\n\n  整数常量，有十进制、八进制、十六进制，用0x或0X表示十六进制。0表示八进制，整数常量可以带一个后缀，U或者L分辨表示`unsigned`和`long`，也可以小写。\n\n  浮点常量、字符常量。\n\n  | 转义序列     | 含义          |\n  | -------- | ----------- |\n  | \\\\\\      | \\           |\n  | \\\\'      | '           |\n  | \\\\\"      | \"           |\n  | \\\\?      | ?           |\n  | \\a       | 警报铃声        |\n  | \\\\b      | 退格键         |\n  | \\\\f      | 换页符         |\n  | \\\\n      | 换行符         |\n  | \\\\r      | 回车          |\n  | \\\\t      | 水平制表符       |\n  | \\v       | 垂直制表符       |\n  | \\\\ooo    | 一到三位的八进制    |\n  | \\\\xhh... | 一到多位数字的十六进制 |\n\n  char是单引号`''`，字符串是双引号`\"\"`。\n\n  **定义常量**\n\n  - 使用#define\n  - 使用const关键字\n\n  ```C\n  #include <stdio.h>\n\n  #define LENGTH 10\n  #define WIDTH 5\n  #define NEWLINE '\\n'\n  void main(){\n    int area;\n    \n    area = LENGTH * WIDTH;\n    printf(\"value of area: %d\",area);\n    printf(\"%c\",NEWLINE);\n  }\n  ```\n\n  const关键字\n\n  ```C\n  #include <stdio.h>\n  int main(){\n    const int LENGTH = 10;\n    const int WIDTH = 5;\n    const int NEWLINE = '\\n';\n    ....\n    return 0;\n  }\n  ```\n\n- C存储类\n\n  存储类定义C程序中的变量或函数的范围、可见性和生命周期。\n\n  - auto，存储类是所有==**局部**==变量默认的存储类。\n\n  - register，定义存储在==**寄存器**==而不是ARM中的局部变量，大小通常为一个词，且不能应用一元的`&`运算。比较快访问，但不一定就在寄存器内存储啊，切记。\n\n  - static，存储周期为整个程序的生命周期，它也可以用于修饰全局变量，但是会将变量限制在声明的文件内。有点类似JAVA中的静态。\n\n  - extern，也是提供一个全局变量，会对所有程序文件可见，若是没有初始化，其会自动指向上次存储的数值，也可以修饰函数。\n\n    ```C\n    #include <stdio.h>\n    int count;\n    extern void write_extern();\n    void main(){\n      count = 5;\n      write_extern();\n    }\n    ```\n\n    ```c\n    #include <stdio.h>\n\n    extern int count;\n    void write_extern(void){\n      printf(\"count is %d \\n\",count);\n    }\n    ```\n\n- C语言运算符\n\n  - 算术运算符：`+`、`-`、`*`、`/`、`%`、`++`、`--`、分别是加减乘除和取模、自增、1、自减1。\n  - 关系运算符：`==`、`!=`、`>`、`<`、`>=`、`<=`\n  - 逻辑运算符：`&&`、`||`、`!`逻辑与、或、非\n  - 位运算符：`&`、`|`、`^`、`~`、`<<`、`>>`，分别是按位与、按位或、按位异或、反转、左移、右移。\n  - 赋值运算符：`=`、`+=`、`-=`、`*=`、`/=`、`%=`、`<<=`、`>>=`、`&=`、`^=`、`|=`\n  - 杂项运算符：`sizeof()`、`&`、`*`、`?:`分别表示求算大小范围的函数、返回变量的地址、指向一个变量、条件表达式(三目运算符，示例：a>b?x:y，表示如果a>b为真，则取x值，否则取y值。)\n\n  运算符存在优先级，一般可以用`()`括号来改变。\n\n  | 类别      | 运算符                                     | 结合性  |\n  | ------- | --------------------------------------- | ---- |\n  | 后缀      | () 、[]、 -> 、. 、++、 - -                  | 从左到右 |\n  | 一元      | \\+ 、\\- 、! 、~ 、++、 - -、 (type)*、 &、 sizeof | 从右到左 |\n  | 乘除      | *、 / 、%                                 | 从左到右 |\n  | 加减      | \\+ 、\\-                                    | 从左到右 |\n  | 移位      | << 、>>                                  | 从左到右 |\n  | 关系      | < <= 、> >=                              | 从左到右 |\n  | 相等      | ==、 !=                                  | 从左到右 |\n  | 位与 AND  | &                                       | 从左到右 |\n  | 位异或 XOR | ^                                       | 从左到右 |\n  | 位或 OR   | \\|                                      | 从左到右 |\n  | 逻辑与 AND | &&                                      | 从左到右 |\n  | 逻辑或 OR  | \\|\\|                                    | 从左到右 |\n  | 条件      | ?:                                      | 从右到左 |\n  | 赋值      | =、 +=、 -=、 *=、 /=、 %=、>>= 、<<=、 &= 、^=  | 从右到左 |\n  | 逗号      | ,                                       | 从左到右 |\n**Note:**逗号运算符，C++中有描述，用于分隔一系列的运算表达式\n```C\nint a = 10,b = 12,c = 20;\nint d = 0;\n//逗号用于分隔不同的运算式，但是赋值，仅区最后一项运算结果\n/*\n d = (a++,b--,c+=15);\n//此时d值就是c+15 = 35,而同样此时，a值已经++，b值已经--，\nprintf(\"d = %d\\n\",d);\n/*\n//注释掉上面的赋值运算了，\nd = (a++,b--,a+90);\n//那么此时，d的值就是101，既，a++,a+90;\n```\n\n- 判断与循环\n\n  1、`if`、`if...else`、`if嵌套`、`switch`、`switch嵌套`也可以三目运算符`? : `\n\n  2、`while`、`for`、`do...while`、`嵌套循环`，配合循环控制语句`break`、`continue`、`goto`(控制转移到被标记的语句，一般不建议使用。)；条件为永远为真的循环，为无限循环，程序用应避免这个。还有就是控制条件为空语句，那么就是无限循环了。\n```C\n#include <stdio.h>\nvoid main(){\n\tfor(;;){\n\t\tprintf(\"无限循环中......\");\n\t}\n}\n```","source":"_posts/C语言学习笔记--基础语法一.md","raw":"---\ntitle: C语言学习笔记--基础语法一\ndate: 2016-12-15 20:50\ntags: \n    - C\ncategories:\n    - 编程相关\n---\n# C语言学习笔记\n\nC语言是一种通用的、面向过程的计算机编程语言。不同于Java、C#之类的面向对象的语言，C语言适用于底层开发，执行效率接近于汇编语言。\n\n## 基础语法\n\n- 程序结构\n\n  C程序主要包括以下部分\n\n  - 预处理器指令，如`#include <stdio.h>`\n  - 函数，如main()\n  - 变量\n  - 语句&表达式\n  - 注释,`//`，`/***/`单行或多行注释\n\n- 基本语法\n\n  C程序由各种令牌组成，`Tokens`，`;`分号结束语句。\n\n  标识符用数字、字母、下划线组成，类似Java，数字不能开头。\n\n  | auto     | else   | long     | switch   |\n  | -------- | ------ | -------- | -------- |\n  | break    | enum   | register | typedef  |\n  | case     | extern | return   | union    |\n  | char     | float  | short    | unsigned |\n  | const    | for    | signed   | void     |\n  | continue | goto   | sizeof   | volatile |\n  | default  | if     | static   | while    |\n  | do       | int    | struct   | _Packed  |\n  | double   |        |          |          |\n\n- 数据类型\n\n  C语言数据类型\n\n  - 基本类型，整数型、浮点型。\n  - 枚举类型，也算是算数类型，但是枚举定义了一定的变量数值。\n  - void类型，无可用值。\n  - 派生类型，包括指针类型、数组类型、结构类型、共用体类型和函数类型。\n\n  整数型`char`、`unsigned char`、`signed char`、`int`、`unsigned int`、`short`、`unsigned short`、`long`、`unsigned long`\n\n  浮点型、`float`、`double`、`long double`之类的。windows下32位、64位系统，变量的值占用字节大小一致，而类Unix下，不完全一致。\n\n  可以用`sizeof()`函数来确定大小范围。\n\n  ```c\n  #include <stdio.h>\n  #include <limits.h>\n  //主函数入口，有时候会写void，int返回类型，都一样。但是不能不寫，而且有的編譯器要求必須是int返回類型\n  void main(){\n    printf(\"int 存储大小：%1u \\n\",sizeof(int));//注意和Java之类的不同。\n  }\n  ```\n\n  void类型，可以作为返回类型、参数、或者指针的返回指向。\n\n- 变量\n\n  变量定义\n\n  ```C\n  //定义变量\n  int i,j,k;\n  char a;\n  float f = 2.2f;\n  //声明变量，而不用，在函数外。\n  extern value;\n  ```\n\n  C语言有左值(Lvalue)和右值(Rvalue)。其实左值就是变量名的意思，右值可理解为具体数值。\n\n- 常量\n\n  整数常量，有十进制、八进制、十六进制，用0x或0X表示十六进制。0表示八进制，整数常量可以带一个后缀，U或者L分辨表示`unsigned`和`long`，也可以小写。\n\n  浮点常量、字符常量。\n\n  | 转义序列     | 含义          |\n  | -------- | ----------- |\n  | \\\\\\      | \\           |\n  | \\\\'      | '           |\n  | \\\\\"      | \"           |\n  | \\\\?      | ?           |\n  | \\a       | 警报铃声        |\n  | \\\\b      | 退格键         |\n  | \\\\f      | 换页符         |\n  | \\\\n      | 换行符         |\n  | \\\\r      | 回车          |\n  | \\\\t      | 水平制表符       |\n  | \\v       | 垂直制表符       |\n  | \\\\ooo    | 一到三位的八进制    |\n  | \\\\xhh... | 一到多位数字的十六进制 |\n\n  char是单引号`''`，字符串是双引号`\"\"`。\n\n  **定义常量**\n\n  - 使用#define\n  - 使用const关键字\n\n  ```C\n  #include <stdio.h>\n\n  #define LENGTH 10\n  #define WIDTH 5\n  #define NEWLINE '\\n'\n  void main(){\n    int area;\n    \n    area = LENGTH * WIDTH;\n    printf(\"value of area: %d\",area);\n    printf(\"%c\",NEWLINE);\n  }\n  ```\n\n  const关键字\n\n  ```C\n  #include <stdio.h>\n  int main(){\n    const int LENGTH = 10;\n    const int WIDTH = 5;\n    const int NEWLINE = '\\n';\n    ....\n    return 0;\n  }\n  ```\n\n- C存储类\n\n  存储类定义C程序中的变量或函数的范围、可见性和生命周期。\n\n  - auto，存储类是所有==**局部**==变量默认的存储类。\n\n  - register，定义存储在==**寄存器**==而不是ARM中的局部变量，大小通常为一个词，且不能应用一元的`&`运算。比较快访问，但不一定就在寄存器内存储啊，切记。\n\n  - static，存储周期为整个程序的生命周期，它也可以用于修饰全局变量，但是会将变量限制在声明的文件内。有点类似JAVA中的静态。\n\n  - extern，也是提供一个全局变量，会对所有程序文件可见，若是没有初始化，其会自动指向上次存储的数值，也可以修饰函数。\n\n    ```C\n    #include <stdio.h>\n    int count;\n    extern void write_extern();\n    void main(){\n      count = 5;\n      write_extern();\n    }\n    ```\n\n    ```c\n    #include <stdio.h>\n\n    extern int count;\n    void write_extern(void){\n      printf(\"count is %d \\n\",count);\n    }\n    ```\n\n- C语言运算符\n\n  - 算术运算符：`+`、`-`、`*`、`/`、`%`、`++`、`--`、分别是加减乘除和取模、自增、1、自减1。\n  - 关系运算符：`==`、`!=`、`>`、`<`、`>=`、`<=`\n  - 逻辑运算符：`&&`、`||`、`!`逻辑与、或、非\n  - 位运算符：`&`、`|`、`^`、`~`、`<<`、`>>`，分别是按位与、按位或、按位异或、反转、左移、右移。\n  - 赋值运算符：`=`、`+=`、`-=`、`*=`、`/=`、`%=`、`<<=`、`>>=`、`&=`、`^=`、`|=`\n  - 杂项运算符：`sizeof()`、`&`、`*`、`?:`分别表示求算大小范围的函数、返回变量的地址、指向一个变量、条件表达式(三目运算符，示例：a>b?x:y，表示如果a>b为真，则取x值，否则取y值。)\n\n  运算符存在优先级，一般可以用`()`括号来改变。\n\n  | 类别      | 运算符                                     | 结合性  |\n  | ------- | --------------------------------------- | ---- |\n  | 后缀      | () 、[]、 -> 、. 、++、 - -                  | 从左到右 |\n  | 一元      | \\+ 、\\- 、! 、~ 、++、 - -、 (type)*、 &、 sizeof | 从右到左 |\n  | 乘除      | *、 / 、%                                 | 从左到右 |\n  | 加减      | \\+ 、\\-                                    | 从左到右 |\n  | 移位      | << 、>>                                  | 从左到右 |\n  | 关系      | < <= 、> >=                              | 从左到右 |\n  | 相等      | ==、 !=                                  | 从左到右 |\n  | 位与 AND  | &                                       | 从左到右 |\n  | 位异或 XOR | ^                                       | 从左到右 |\n  | 位或 OR   | \\|                                      | 从左到右 |\n  | 逻辑与 AND | &&                                      | 从左到右 |\n  | 逻辑或 OR  | \\|\\|                                    | 从左到右 |\n  | 条件      | ?:                                      | 从右到左 |\n  | 赋值      | =、 +=、 -=、 *=、 /=、 %=、>>= 、<<=、 &= 、^=  | 从右到左 |\n  | 逗号      | ,                                       | 从左到右 |\n**Note:**逗号运算符，C++中有描述，用于分隔一系列的运算表达式\n```C\nint a = 10,b = 12,c = 20;\nint d = 0;\n//逗号用于分隔不同的运算式，但是赋值，仅区最后一项运算结果\n/*\n d = (a++,b--,c+=15);\n//此时d值就是c+15 = 35,而同样此时，a值已经++，b值已经--，\nprintf(\"d = %d\\n\",d);\n/*\n//注释掉上面的赋值运算了，\nd = (a++,b--,a+90);\n//那么此时，d的值就是101，既，a++,a+90;\n```\n\n- 判断与循环\n\n  1、`if`、`if...else`、`if嵌套`、`switch`、`switch嵌套`也可以三目运算符`? : `\n\n  2、`while`、`for`、`do...while`、`嵌套循环`，配合循环控制语句`break`、`continue`、`goto`(控制转移到被标记的语句，一般不建议使用。)；条件为永远为真的循环，为无限循环，程序用应避免这个。还有就是控制条件为空语句，那么就是无限循环了。\n```C\n#include <stdio.h>\nvoid main(){\n\tfor(;;){\n\t\tprintf(\"无限循环中......\");\n\t}\n}\n```","slug":"C语言学习笔记--基础语法一","published":1,"updated":"2017-03-31T08:38:05.195Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ndxccv001888owszj4x85m","content":"<h1 id=\"C语言学习笔记\"><a href=\"#C语言学习笔记\" class=\"headerlink\" title=\"C语言学习笔记\"></a>C语言学习笔记</h1><p>C语言是一种通用的、面向过程的计算机编程语言。不同于Java、C#之类的面向对象的语言，C语言适用于底层开发，执行效率接近于汇编语言。</p>\n<h2 id=\"基础语法\"><a href=\"#基础语法\" class=\"headerlink\" title=\"基础语法\"></a>基础语法</h2><ul>\n<li><p>程序结构</p>\n<p>C程序主要包括以下部分</p>\n<ul>\n<li>预处理器指令，如<code>#include &lt;stdio.h&gt;</code></li>\n<li>函数，如main()</li>\n<li>变量</li>\n<li>语句&amp;表达式</li>\n<li>注释,<code>//</code>，<code>/***/</code>单行或多行注释</li>\n</ul>\n</li>\n<li><p>基本语法</p>\n<p>C程序由各种令牌组成，<code>Tokens</code>，<code>;</code>分号结束语句。</p>\n<p>标识符用数字、字母、下划线组成，类似Java，数字不能开头。</p>\n<p>| auto     | else   | long     | switch   |<br>| ——– | —— | ——– | ——– |<br>| break    | enum   | register | typedef  |<br>| case     | extern | return   | union    |<br>| char     | float  | short    | unsigned |<br>| const    | for    | signed   | void     |<br>| continue | goto   | sizeof   | volatile |<br>| default  | if     | static   | while    |<br>| do       | int    | struct   | _Packed  |<br>| double   |        |          |          |</p>\n</li>\n<li><p>数据类型</p>\n<p>C语言数据类型</p>\n<ul>\n<li>基本类型，整数型、浮点型。</li>\n<li>枚举类型，也算是算数类型，但是枚举定义了一定的变量数值。</li>\n<li>void类型，无可用值。</li>\n<li>派生类型，包括指针类型、数组类型、结构类型、共用体类型和函数类型。</li>\n</ul>\n<p>整数型<code>char</code>、<code>unsigned char</code>、<code>signed char</code>、<code>int</code>、<code>unsigned int</code>、<code>short</code>、<code>unsigned short</code>、<code>long</code>、<code>unsigned long</code></p>\n<p>浮点型、<code>float</code>、<code>double</code>、<code>long double</code>之类的。windows下32位、64位系统，变量的值占用字节大小一致，而类Unix下，不完全一致。</p>\n<p>可以用<code>sizeof()</code>函数来确定大小范围。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;limits.h&gt;</span></span></div><div class=\"line\"><span class=\"comment\">//主函数入口，有时候会写void，int返回类型，都一样。但是不能不寫，而且有的編譯器要求必須是int返回類型</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"int 存储大小：%1u \\n\"</span>,<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));<span class=\"comment\">//注意和Java之类的不同。</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>void类型，可以作为返回类型、参数、或者指针的返回指向。</p>\n</li>\n<li><p>变量</p>\n<p>变量定义</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//定义变量</span></div><div class=\"line\"><span class=\"keyword\">int</span> i,j,k;</div><div class=\"line\"><span class=\"keyword\">char</span> a;</div><div class=\"line\"><span class=\"keyword\">float</span> f = <span class=\"number\">2.2f</span>;</div><div class=\"line\"><span class=\"comment\">//声明变量，而不用，在函数外。</span></div><div class=\"line\"><span class=\"keyword\">extern</span> value;</div></pre></td></tr></table></figure>\n<p>C语言有左值(Lvalue)和右值(Rvalue)。其实左值就是变量名的意思，右值可理解为具体数值。</p>\n</li>\n<li><p>常量</p>\n<p>整数常量，有十进制、八进制、十六进制，用0x或0X表示十六进制。0表示八进制，整数常量可以带一个后缀，U或者L分辨表示<code>unsigned</code>和<code>long</code>，也可以小写。</p>\n<p>浮点常量、字符常量。</p>\n<p>| 转义序列     | 含义          |<br>| ——– | ———– |<br>| \\\\      | \\           |<br>| \\‘      | ‘           |<br>| \\“      | “           |<br>| \\?      | ?           |<br>| \\a       | 警报铃声        |<br>| \\b      | 退格键         |<br>| \\f      | 换页符         |<br>| \\n      | 换行符         |<br>| \\r      | 回车          |<br>| \\t      | 水平制表符       |<br>| \\v       | 垂直制表符       |<br>| \\ooo    | 一到三位的八进制    |<br>| \\xhh… | 一到多位数字的十六进制 |</p>\n<p>char是单引号<code>&#39;&#39;</code>，字符串是双引号<code>&quot;&quot;</code>。</p>\n<p><strong>定义常量</strong></p>\n<ul>\n<li>使用#define</li>\n<li>使用const关键字</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LENGTH 10</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> WIDTH 5</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> NEWLINE <span class=\"meta-string\">'\\n'</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> area;</div><div class=\"line\">  </div><div class=\"line\">  area = LENGTH * WIDTH;</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"value of area: %d\"</span>,area);</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"%c\"</span>,NEWLINE);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>const关键字</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> LENGTH = <span class=\"number\">10</span>;</div><div class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> WIDTH = <span class=\"number\">5</span>;</div><div class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> NEWLINE = <span class=\"string\">'\\n'</span>;</div><div class=\"line\">  ....</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>C存储类</p>\n<p>存储类定义C程序中的变量或函数的范围、可见性和生命周期。</p>\n<ul>\n<li><p>auto，存储类是所有==<strong>局部</strong>==变量默认的存储类。</p>\n</li>\n<li><p>register，定义存储在==<strong>寄存器</strong>==而不是ARM中的局部变量，大小通常为一个词，且不能应用一元的<code>&amp;</code>运算。比较快访问，但不一定就在寄存器内存储啊，切记。</p>\n</li>\n<li><p>static，存储周期为整个程序的生命周期，它也可以用于修饰全局变量，但是会将变量限制在声明的文件内。有点类似JAVA中的静态。</p>\n</li>\n<li><p>extern，也是提供一个全局变量，会对所有程序文件可见，若是没有初始化，其会自动指向上次存储的数值，也可以修饰函数。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">int</span> count;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">extern</span> <span class=\"keyword\">void</span> <span class=\"title\">write_extern</span><span class=\"params\">()</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  count = <span class=\"number\">5</span>;</div><div class=\"line\">  write_extern();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">int</span> count;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">write_extern</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>&#123;</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"count is %d \\n\"</span>,count);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>C语言运算符</p>\n<ul>\n<li>算术运算符：<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>、<code>%</code>、<code>++</code>、<code>--</code>、分别是加减乘除和取模、自增、1、自减1。</li>\n<li>关系运算符：<code>==</code>、<code>!=</code>、<code>&gt;</code>、<code>&lt;</code>、<code>&gt;=</code>、<code>&lt;=</code></li>\n<li>逻辑运算符：<code>&amp;&amp;</code>、<code>||</code>、<code>!</code>逻辑与、或、非</li>\n<li>位运算符：<code>&amp;</code>、<code>|</code>、<code>^</code>、<code>~</code>、<code>&lt;&lt;</code>、<code>&gt;&gt;</code>，分别是按位与、按位或、按位异或、反转、左移、右移。</li>\n<li>赋值运算符：<code>=</code>、<code>+=</code>、<code>-=</code>、<code>*=</code>、<code>/=</code>、<code>%=</code>、<code>&lt;&lt;=</code>、<code>&gt;&gt;=</code>、<code>&amp;=</code>、<code>^=</code>、<code>|=</code></li>\n<li>杂项运算符：<code>sizeof()</code>、<code>&amp;</code>、<code>*</code>、<code>?:</code>分别表示求算大小范围的函数、返回变量的地址、指向一个变量、条件表达式(三目运算符，示例：a&gt;b?x:y，表示如果a&gt;b为真，则取x值，否则取y值。)</li>\n</ul>\n<p>运算符存在优先级，一般可以用<code>()</code>括号来改变。</p>\n<p>| 类别      | 运算符                                     | 结合性  |<br>| ——- | ————————————— | —- |<br>| 后缀      | () 、[]、 -&gt; 、. 、++、 - -                  | 从左到右 |<br>| 一元      | + 、- 、! 、~ 、++、 - -、 (type)<em>、 &amp;、 sizeof | 从右到左 |<br>| 乘除      | </em>、 / 、%                                 | 从左到右 |<br>| 加减      | + 、-                                    | 从左到右 |<br>| 移位      | &lt;&lt; 、&gt;&gt;                                  | 从左到右 |<br>| 关系      | &lt; &lt;= 、&gt; &gt;=                              | 从左到右 |<br>| 相等      | ==、 !=                                  | 从左到右 |<br>| 位与 AND  | &amp;                                       | 从左到右 |<br>| 位异或 XOR | ^                                       | 从左到右 |<br>| 位或 OR   | |                                      | 从左到右 |<br>| 逻辑与 AND | &amp;&amp;                                      | 从左到右 |<br>| 逻辑或 OR  | ||                                    | 从左到右 |<br>| 条件      | ?:                                      | 从右到左 |<br>| 赋值      | =、 +=、 -=、 <em>=、 /=、 %=、&gt;&gt;= 、&lt;&lt;=、 &amp;= 、^=  | 从右到左 |<br>| 逗号      | ,                                       | 从左到右 |<br><em>*Note:</em></em>逗号运算符，C++中有描述，用于分隔一系列的运算表达式</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">10</span>,b = <span class=\"number\">12</span>,c = <span class=\"number\">20</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> d = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"comment\">//逗号用于分隔不同的运算式，但是赋值，仅区最后一项运算结果</span></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> d = (a++,b--,c+=15);</div><div class=\"line\">//此时d值就是c+15 = 35,而同样此时，a值已经++，b值已经--，</div><div class=\"line\">printf(\"d = %d\\n\",d);</div><div class=\"line\">/*</div><div class=\"line\">//注释掉上面的赋值运算了，</div><div class=\"line\">d = (a++,b--,a+90);</div><div class=\"line\">//那么此时，d的值就是101，既，a++,a+90;</div></pre></td></tr></table></figure>\n</li>\n<li><p>判断与循环</p>\n<p>1、<code>if</code>、<code>if...else</code>、<code>if嵌套</code>、<code>switch</code>、<code>switch嵌套</code>也可以三目运算符<code>? :</code></p>\n<p>2、<code>while</code>、<code>for</code>、<code>do...while</code>、<code>嵌套循环</code>，配合循环控制语句<code>break</code>、<code>continue</code>、<code>goto</code>(控制转移到被标记的语句，一般不建议使用。)；条件为永远为真的循环，为无限循环，程序用应避免这个。还有就是控制条件为空语句，那么就是无限循环了。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(;;)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"无限循环中......\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"C语言学习笔记\"><a href=\"#C语言学习笔记\" class=\"headerlink\" title=\"C语言学习笔记\"></a>C语言学习笔记</h1><p>C语言是一种通用的、面向过程的计算机编程语言。不同于Java、C#之类的面向对象的语言，C语言适用于底层开发，执行效率接近于汇编语言。</p>\n<h2 id=\"基础语法\"><a href=\"#基础语法\" class=\"headerlink\" title=\"基础语法\"></a>基础语法</h2><ul>\n<li><p>程序结构</p>\n<p>C程序主要包括以下部分</p>\n<ul>\n<li>预处理器指令，如<code>#include &lt;stdio.h&gt;</code></li>\n<li>函数，如main()</li>\n<li>变量</li>\n<li>语句&amp;表达式</li>\n<li>注释,<code>//</code>，<code>/***/</code>单行或多行注释</li>\n</ul>\n</li>\n<li><p>基本语法</p>\n<p>C程序由各种令牌组成，<code>Tokens</code>，<code>;</code>分号结束语句。</p>\n<p>标识符用数字、字母、下划线组成，类似Java，数字不能开头。</p>\n<p>| auto     | else   | long     | switch   |<br>| ——– | —— | ——– | ——– |<br>| break    | enum   | register | typedef  |<br>| case     | extern | return   | union    |<br>| char     | float  | short    | unsigned |<br>| const    | for    | signed   | void     |<br>| continue | goto   | sizeof   | volatile |<br>| default  | if     | static   | while    |<br>| do       | int    | struct   | _Packed  |<br>| double   |        |          |          |</p>\n</li>\n<li><p>数据类型</p>\n<p>C语言数据类型</p>\n<ul>\n<li>基本类型，整数型、浮点型。</li>\n<li>枚举类型，也算是算数类型，但是枚举定义了一定的变量数值。</li>\n<li>void类型，无可用值。</li>\n<li>派生类型，包括指针类型、数组类型、结构类型、共用体类型和函数类型。</li>\n</ul>\n<p>整数型<code>char</code>、<code>unsigned char</code>、<code>signed char</code>、<code>int</code>、<code>unsigned int</code>、<code>short</code>、<code>unsigned short</code>、<code>long</code>、<code>unsigned long</code></p>\n<p>浮点型、<code>float</code>、<code>double</code>、<code>long double</code>之类的。windows下32位、64位系统，变量的值占用字节大小一致，而类Unix下，不完全一致。</p>\n<p>可以用<code>sizeof()</code>函数来确定大小范围。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;limits.h&gt;</span></span></div><div class=\"line\"><span class=\"comment\">//主函数入口，有时候会写void，int返回类型，都一样。但是不能不寫，而且有的編譯器要求必須是int返回類型</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"int 存储大小：%1u \\n\"</span>,<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));<span class=\"comment\">//注意和Java之类的不同。</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>void类型，可以作为返回类型、参数、或者指针的返回指向。</p>\n</li>\n<li><p>变量</p>\n<p>变量定义</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//定义变量</span></div><div class=\"line\"><span class=\"keyword\">int</span> i,j,k;</div><div class=\"line\"><span class=\"keyword\">char</span> a;</div><div class=\"line\"><span class=\"keyword\">float</span> f = <span class=\"number\">2.2f</span>;</div><div class=\"line\"><span class=\"comment\">//声明变量，而不用，在函数外。</span></div><div class=\"line\"><span class=\"keyword\">extern</span> value;</div></pre></td></tr></table></figure>\n<p>C语言有左值(Lvalue)和右值(Rvalue)。其实左值就是变量名的意思，右值可理解为具体数值。</p>\n</li>\n<li><p>常量</p>\n<p>整数常量，有十进制、八进制、十六进制，用0x或0X表示十六进制。0表示八进制，整数常量可以带一个后缀，U或者L分辨表示<code>unsigned</code>和<code>long</code>，也可以小写。</p>\n<p>浮点常量、字符常量。</p>\n<p>| 转义序列     | 含义          |<br>| ——– | ———– |<br>| \\\\      | \\           |<br>| \\‘      | ‘           |<br>| \\“      | “           |<br>| \\?      | ?           |<br>| \\a       | 警报铃声        |<br>| \\b      | 退格键         |<br>| \\f      | 换页符         |<br>| \\n      | 换行符         |<br>| \\r      | 回车          |<br>| \\t      | 水平制表符       |<br>| \\v       | 垂直制表符       |<br>| \\ooo    | 一到三位的八进制    |<br>| \\xhh… | 一到多位数字的十六进制 |</p>\n<p>char是单引号<code>&#39;&#39;</code>，字符串是双引号<code>&quot;&quot;</code>。</p>\n<p><strong>定义常量</strong></p>\n<ul>\n<li>使用#define</li>\n<li>使用const关键字</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LENGTH 10</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> WIDTH 5</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> NEWLINE <span class=\"meta-string\">'\\n'</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> area;</div><div class=\"line\">  </div><div class=\"line\">  area = LENGTH * WIDTH;</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"value of area: %d\"</span>,area);</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"%c\"</span>,NEWLINE);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>const关键字</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> LENGTH = <span class=\"number\">10</span>;</div><div class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> WIDTH = <span class=\"number\">5</span>;</div><div class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> NEWLINE = <span class=\"string\">'\\n'</span>;</div><div class=\"line\">  ....</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>C存储类</p>\n<p>存储类定义C程序中的变量或函数的范围、可见性和生命周期。</p>\n<ul>\n<li><p>auto，存储类是所有==<strong>局部</strong>==变量默认的存储类。</p>\n</li>\n<li><p>register，定义存储在==<strong>寄存器</strong>==而不是ARM中的局部变量，大小通常为一个词，且不能应用一元的<code>&amp;</code>运算。比较快访问，但不一定就在寄存器内存储啊，切记。</p>\n</li>\n<li><p>static，存储周期为整个程序的生命周期，它也可以用于修饰全局变量，但是会将变量限制在声明的文件内。有点类似JAVA中的静态。</p>\n</li>\n<li><p>extern，也是提供一个全局变量，会对所有程序文件可见，若是没有初始化，其会自动指向上次存储的数值，也可以修饰函数。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">int</span> count;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">extern</span> <span class=\"keyword\">void</span> <span class=\"title\">write_extern</span><span class=\"params\">()</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  count = <span class=\"number\">5</span>;</div><div class=\"line\">  write_extern();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">int</span> count;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">write_extern</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>&#123;</div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"count is %d \\n\"</span>,count);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>C语言运算符</p>\n<ul>\n<li>算术运算符：<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>、<code>%</code>、<code>++</code>、<code>--</code>、分别是加减乘除和取模、自增、1、自减1。</li>\n<li>关系运算符：<code>==</code>、<code>!=</code>、<code>&gt;</code>、<code>&lt;</code>、<code>&gt;=</code>、<code>&lt;=</code></li>\n<li>逻辑运算符：<code>&amp;&amp;</code>、<code>||</code>、<code>!</code>逻辑与、或、非</li>\n<li>位运算符：<code>&amp;</code>、<code>|</code>、<code>^</code>、<code>~</code>、<code>&lt;&lt;</code>、<code>&gt;&gt;</code>，分别是按位与、按位或、按位异或、反转、左移、右移。</li>\n<li>赋值运算符：<code>=</code>、<code>+=</code>、<code>-=</code>、<code>*=</code>、<code>/=</code>、<code>%=</code>、<code>&lt;&lt;=</code>、<code>&gt;&gt;=</code>、<code>&amp;=</code>、<code>^=</code>、<code>|=</code></li>\n<li>杂项运算符：<code>sizeof()</code>、<code>&amp;</code>、<code>*</code>、<code>?:</code>分别表示求算大小范围的函数、返回变量的地址、指向一个变量、条件表达式(三目运算符，示例：a&gt;b?x:y，表示如果a&gt;b为真，则取x值，否则取y值。)</li>\n</ul>\n<p>运算符存在优先级，一般可以用<code>()</code>括号来改变。</p>\n<p>| 类别      | 运算符                                     | 结合性  |<br>| ——- | ————————————— | —- |<br>| 后缀      | () 、[]、 -&gt; 、. 、++、 - -                  | 从左到右 |<br>| 一元      | + 、- 、! 、~ 、++、 - -、 (type)<em>、 &amp;、 sizeof | 从右到左 |<br>| 乘除      | </em>、 / 、%                                 | 从左到右 |<br>| 加减      | + 、-                                    | 从左到右 |<br>| 移位      | &lt;&lt; 、&gt;&gt;                                  | 从左到右 |<br>| 关系      | &lt; &lt;= 、&gt; &gt;=                              | 从左到右 |<br>| 相等      | ==、 !=                                  | 从左到右 |<br>| 位与 AND  | &amp;                                       | 从左到右 |<br>| 位异或 XOR | ^                                       | 从左到右 |<br>| 位或 OR   | |                                      | 从左到右 |<br>| 逻辑与 AND | &amp;&amp;                                      | 从左到右 |<br>| 逻辑或 OR  | ||                                    | 从左到右 |<br>| 条件      | ?:                                      | 从右到左 |<br>| 赋值      | =、 +=、 -=、 <em>=、 /=、 %=、&gt;&gt;= 、&lt;&lt;=、 &amp;= 、^=  | 从右到左 |<br>| 逗号      | ,                                       | 从左到右 |<br><em>*Note:</em></em>逗号运算符，C++中有描述，用于分隔一系列的运算表达式</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">10</span>,b = <span class=\"number\">12</span>,c = <span class=\"number\">20</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> d = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"comment\">//逗号用于分隔不同的运算式，但是赋值，仅区最后一项运算结果</span></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> d = (a++,b--,c+=15);</div><div class=\"line\">//此时d值就是c+15 = 35,而同样此时，a值已经++，b值已经--，</div><div class=\"line\">printf(\"d = %d\\n\",d);</div><div class=\"line\">/*</div><div class=\"line\">//注释掉上面的赋值运算了，</div><div class=\"line\">d = (a++,b--,a+90);</div><div class=\"line\">//那么此时，d的值就是101，既，a++,a+90;</div></pre></td></tr></table></figure>\n</li>\n<li><p>判断与循环</p>\n<p>1、<code>if</code>、<code>if...else</code>、<code>if嵌套</code>、<code>switch</code>、<code>switch嵌套</code>也可以三目运算符<code>? :</code></p>\n<p>2、<code>while</code>、<code>for</code>、<code>do...while</code>、<code>嵌套循环</code>，配合循环控制语句<code>break</code>、<code>continue</code>、<code>goto</code>(控制转移到被标记的语句，一般不建议使用。)；条件为永远为真的循环，为无限循环，程序用应避免这个。还有就是控制条件为空语句，那么就是无限循环了。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(;;)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"无限循环中......\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"GitHub IOS Libraries Top 100 简介","date":"2017-04-11T09:50:25.000Z","_content":"\n## GitHub IOS 框架Top 100 简介\n\n<font color=\"#ff0000\">本文原文链接https://github.com/Aufree/trip-to-iOS/blob/master/Top-100.md</font>\n\n\n\n主要对当前 GitHub 排名前 100 的项目做一个简单的简介, 方便初学者快速了解到当前 Objective-C 在 GitHub 的情况.\n\n> - [Android 版本](https://github.com/Freelander/Android_Data/blob/master/Android-Librarys-Top-100.md)。\n> - 本人著作的书籍[《Laravel 入门教程》](https://laravel-china.org/laravel-tutorial/5.1)已正式发布，有兴趣的朋友可点击 [此处](https://laravel-china.org/topics/3383) 作进一步了解。\n\n**若有任何疑问可通过微博 @李锦发 或我的微信（lijinfa894330982）联系我**\n\n| 项目名称                                     | 项目信息                                     |\n| ---------------------------------------- | ---------------------------------------- |\n| [AFNetworking](https://github.com/AFNetworking/AFNetworking) | 作者是 NSHipster 的博主, iOS 开发界的大神级人物, 毕业于卡内基·梅隆大学, 开源了许多牛逼的项目, 这个便是其中之一, AFNetworking 采用 NSURLConnection + NSOperation, 主要方便与服务端 API 进行数据交换, 操作简单, 功能强大, 现在许多人都用它取代 ASIHTTPRequest |\n| [GPUImage](https://github.com/BradLarson/GPUImage) | 一款强大的图片滤镜工具, 支持自定义滤镜, 可用来实时处理图片和视频流, 作者是 SonoPlot 公司的 CTO, 在很小的时候便开始接触编程, 他在 [SO](http://stackoverflow.com/users/19679/brad-larson) 上面的回答也有很多值得阅读, GPUImage 这个项目从 2012 年开始, 使用 OpenGL 图形程序接口编写, 性能非常好, 现在很多 iOS 程序员都用它来实现 iOS 的模糊效果 |\n| [SDWebImage](https://github.com/rs/SDWebImage) | 作者 Olivier Poitrey 是 Dailymotion 的 CTO, 拥有多个不错的开源项目, 此项目常用于对从 Web 端接受到的图片进行缓存, 是 UIImageView 的扩展, 应用起来比较简单 |\n| [RestKit](https://github.com/RestKit/RestKit) | 主要用于 iOS 上网络通信, 允许与 RESTful Web 服务交互, 常用于处理 API, 解析 JSON, 映射响应对象等操作, 简单易用, 方便你把所有精力都放在对数据的操作上 |\n| [ReactiveCocoa](https://github.com/ReactiveCocoa/ReactiveCocoa) | 由 GitHub 工程师们开发的一个应用于 iOS 和 OS X 开发的函数响应式编程新框架, Matt 称其为 \"An open source project that exemplifies this brave new era for Objective-C\", 也有人说它是 Cocoa 的未来, 具体可看唐巧写的这篇[文章](http://www.devtang.com/blog/2014/02/11/reactivecocoa-introduction) |\n| [three20](https://github.com/facebookarchive/three20) | 由 Facebook iOS 客户端衍生出的一款 iPhone 框架, 内置许多丰富的功能, 有丰富的界面, 对底层的操作便捷, 为开发者省下了很多时间, 但现在已经停止了更新, 一个 [PR](https://github.com/facebookarchive/three20/pull/832?utm_source=iOS+Dev+Weekly&utm_campaign=46a7deb647-iOS_Dev_Weekly_Issue_100&utm_medium=email&utm_term=0_7bda94b7ca-46a7deb647-299428269) 把代码删得干干净净, 不要好奇去点开 Files changed, 我点开后该页面直接卡死, three20 当中的一位作者创建了 [Nimbus](https://github.com/jverkoey/nimbus), 算是 three20 的一个替代品 |\n| [MBProgressHUD](https://github.com/jdg/MBProgressHUD) | 作者 Matej Bukovinski 是一位全栈工程师, UI/UX 设计师, 此项目是一款提示框第三方库, 帮助开发者快速应用到项目中) |\n| [MagicalRecord](https://github.com/magicalpanda/MagicalRecord) | 作者是 Coursera 的 iOS 工程师, 该项目创作灵感来自于 Ruby on Rails 的 Active Record, 主要为方便操作 CoreData 而生, 帮助清除 CoreData 引用的代码, 协助方便 CoreData 的工作 |\n| [FMDB](https://github.com/ccgus/fmdb)    | 一个对 SQLite 进行封装的库, 使用起来方便, 简单            |\n| [Mantle](https://github.com/Mantle/Mantle) | 作者是 GitHub 的员工, 文档写的很清楚: Mantle makes it easy to write a simple model layer for your Cocoa or Cocoa Touch application, 主要用来将 JSON 数据模型化为 Model 对象, 唱吧在前段时间也改用 Mantle 了. |\n| [FlatUIKit](https://github.com/Grouper/FlatUIKit) | 收集了很多扁平化 UI 的 iOS 组件, 方便使用               |\n| [ASIHTTPRequest](https://github.com/pokeb/asi-http-request) | 一个轻量级的 iOS 网络通信类库, 基于 CFNetwork 框架开发, 但现在已经停止更新, 多数开发者改用 AFNetworking 替代) |\n| [FastImageCache](https://github.com/path/FastImageCache) | Path 公司出品的 iOS 库, 作者 Mallory Paine 是苹果前员工, 此类库适用于在滚动时快速显示图像, 高速持久是其最大的特点 |\n| [Masonry](https://github.com/Masonry/Masonry) | 一个轻量级的布局框架, 同时支持 iOS 和 Mac OS X, 语法优雅, 帮助开发者快速适配不同分辨率的 iOS 设备 |\n| [Shimmer](https://github.com/facebook/Shimmer) | Facebook 推出的一款具有闪烁效果的第三方控件, 供它旗下一款名为 Paper 的应用使用, 安装使用整个过程都十分简单 |\n| [SVProgressHUD](https://github.com/TransitApp/SVProgressHUD) | 又一款轻量级的 iOS 第三方控件, 用于显示任务加载时的动画, 非常轻便, 容易使用 |\n| [Slate](https://github.com/jigish/slate) | 一款窗口管理应用程序, 但在两年前就已经停止更新了                |\n| [JSONKit](https://github.com/johnezang/JSONKit) | 主要用于解析 JSON, 适用于 iOS6 以下环境, 自从 iOS5 开始 Apple 官方给出了 NSJSONSerialization API, 自此大家都用官方的了 |\n| [Nimbus](https://github.com/jverkoey/nimbus) | 作者 Jeff 曾为 Facebook, Google 做过不少好东西, 也是 three20 的成员之一, three20 停更后, 他创造出这个框架来代替 three20, 文档齐全 |\n| [CocoaLumberjack](https://github.com/CocoaLumberjack/CocoaLumberjack) | 这是 Mac 和 iOS 的一款强大的日志框架, 配置简单, 多线程, 提供更高级的 log 功能, 可用于代替默认的 NSLog 语句 |\n| [Facebook SDK for iOS](https://github.com/facebook/facebook-ios-sdk) | Facebook 官方的 iOS SDK, 方便开发者集成 Facebook 的一些功能到自己的 iOS APP 里面 |\n| [AsyncDisplayKit](https://github.com/facebook/AsyncDisplayKit) | Facebook 开源的一款 iOS UI 框架, Paper 用的就是该框架, 另外框架还用到了 Facebook 早期开源 Pop 动画引擎 |\n| [Alcatraz](https://github.com/supermarin/Alcatraz) | Alcatraz 是一款管理 Xcode 插件、模版以及颜色配置的工具, 可以集成到 Xcode 的图形界面中, 安装删除都是几条命令的事, 很方便, 支持自己开发插件并上传 |\n| [ViewDeck](https://github.com/Inferis/ViewDeck) | 一款开源的 iOS 活动面板组件, 还原 Path 2.0 的侧滑效果, 作者因为时间关系在两年前停止对其更新 |\n| [JSQMessagesViewController](https://github.com/jessesquires/JSQMessagesViewController) | 优雅的 iOS 消息类库, 常用于聊天应用中, 可定制性高            |\n| [FLEX](https://github.com/Flipboard/FLEX) | 这是 Flipboard 官方发布的一组专门用于 iOS 开发的应用内调试工具, 开发者无需将其连接到 LLDB/Xcode 或其他远程调试服务器,支持直接在 App 中运行 |\n| [Xctool](https://github.com/facebook/xctool) | 是 Facebook 开源的一个命令行工具，用来替代苹果的 XcodeBuild 工具, 极大的方便了 iOS 的构建和测试, 输出错误信息也比较友好, 受到许多 iOS 开发者的称赞, 经常与其搭配使用的还有 OCUnit, [Travis CI](https://travis-ci.org/), [OCLint](http://oclint.org/) 等测试工具 |\n| [OpenEmu](https://github.com/OpenEmu/OpenEmu) | 超强的游戏模拟器, 做游戏开发必备, 官网做得也很不错              |\n| [iCarousel](https://github.com/nicklockwood/iCarousel) | 作者是英国 Charcoal Design 公司的创始人, 开源领域的贡献颇为卓著, 这个项目就是其中之一, 这是一款可以在 iOS 上实现旋转木马视图切换效果的第三方控件, 并提供多种切换效果 |\n| [RESideMenu](https://github.com/romaonthego/RESideMenu) | 作者 Roman Efimov 是雅虎的 iOS 工程师, 这个项目实现了 iOS 上的菜单侧滑效果, 创意来源于 Dribbble, 该项目支持 iOS8 |\n| [PNChart](https://github.com/kevinzhow/PNChart) | 作者周楷雯是 90 后, 秒视的创始人, 该项目是一个带动画效果的图表控件, 简约易用, 受到不少开发者喜爱 |\n| [PonyDebugger](https://github.com/square/PonyDebugger) | 由 Square 公司推出的一款优秀的 iOS 应用网络调试工具, 用户可以实时看到应用程序的网络请求, 也可以对 iOS 应用程序的核心数据栈进行远程调试 |\n| [JVFloatLabeledTextField](https://github.com/jverdi/JVFloatLabeledTextField) | 作者是 Thumb Labs 的联合创始人, JVFloatLabeledTextField 是 UITextField 的子类, 主要实现输入框标签浮动效果, 创作灵感来自 Dribbble, 已出现多个移植版本 |\n| [SWTableViewCell](https://github.com/CEWendel/SWTableViewCell) | UITableViewCell 的子类, 实现了左右滑动显示信息视图并调出按钮  |\n| [AwesomeMenu](https://github.com/levey/AwesomeMenu) | 作者是一位中国人, 该项目主要是使用 CoreAnimation 还原了 Path menu 的动画效果 |\n| [Reachability](https://github.com/tonymillion/Reachability) | Reachablity 是用于检测 iOS 设备网络环境的库           |\n| [VVDocumenter-Xcode](https://github.com/onevcat/VVDocumenter-Xcode) | 作者是王巍国内著名的 iOS 开发者, 人称喵神, 目前在日本 LINE 公司工作, 该项目帮助开发者轻松的生成注释文档, 节省了不少工作量, 赞 |\n| [The Physical Web](https://github.com/google/physical-web) | 由 Chrome 团队主导的一个项目, 意在用 URL 连接世界, 方便用户接受数据, 目前尚处在实验阶段 |\n| [NewsBlur](https://github.com/samuelclay/NewsBlur) | 作者独自一个人 Samuel Clay 做出来的一款名为 NewsBlur 的新闻阅读器, 很多人都称其为 Google Reader 的替代品, 这是它的源码 |\n| [Cocos2D-SpriteBuilder](https://github.com/cocos2d/cocos2d-spritebuilder) | 一个可用于在 iOS, Mac 和 Android 上制作 2D 游戏或其它图形/交互应用的框架, 之前的项目名称为 Cocos Swift, 目前该项目在 GitHub 上更新较为频繁 |\n| [TTTAttributedLabel](https://github.com/TTTAttributedLabel/TTTAttributedLabel) | UILabel 的替代品, 使 iOS 上的 Label 功能更加丰富, 可支持链接植入等功能 |\n| [CocoaAsyncSocket](https://github.com/robbiehanson/CocoaAsyncSocket) | 一个功能强大、简单易用的异步 socket 通讯类库, 支持 TCP 和 UDP 协议, 可用于 Mac 和 iOS 设备上, 作者 Robbie Hanson 是 Deusty 的首席软件工程师 |\n| [TapkuLibrary](https://github.com/devinross/tapkulibrary) | 作者是 Devin Ross, 这是在 iOS 上一款功能强大的 UI 效果类库, 可以实现多种酷炫的效果, 目前仍在更新中 |\n| [Canvas](https://github.com/CanvasPod/Canvas) | 无需编码实现牛逼的动画效果的库, 连设计师都可以快速上手             |\n| [SocketRocket](https://github.com/square/SocketRocket) | Square 公司开源的一个 WebSocket 客户端, 稳定并且易用, 做实时应用常会用到, 受广大开发者喜爱 |\n| [ECSlidingViewController](https://github.com/ECSlidingViewController/ECSlidingViewController) | 一个视图控制器容器, 将子视图处理成两层, 通过滑动来处理层的切换, 创作灵感来自 Facebook 和 Path的 App, 作者是 Cleveland 的员工 |\n| [Json Framework](https://github.com/stig/json-framework) | 用于解析 JSON 数据的一个框架, 但是在 iOS5 以上版本大多数人都选择使用 NSJSONSerialization 来解析 JSON, 该项目现在在 GitHub 上也几乎没怎么更新了 |\n| [Tweaks](https://github.com/facebook/Tweaks) | Facebook 开源的一款工具, 旨在帮助 iOS 开发者更快的迭代应用, 方便用户动态的调整参数, 是的, Paper 这个项目也用到了 |\n| [realm-cocoa](https://github.com/realm/realm-cocoa) | Realm-Cocoa 是 Realm 公司推出一款移动端数据库, 可以运行在手机、平板和可穿戴设备之上, 其目标是取代 CoreData 和 SQLite 数据库 |\n| [BlocksKit](https://github.com/zwaldowski/BlocksKit) | 一个开源的与 Cocoa 紧密集合的基础性框架                  |\n| [Appirater](https://github.com/arashpayan/appirater) | 一款用于提醒用户给你的 App 打分的工具                    |\n| [KIF](https://github.com/kif-framework/KIF) | Square 出品的一个开源的用户界面测试框架, 极大的简化了 iOS 开发者的 UI 测试流程 |\n| [SlackTextViewController](https://github.com/slackhq/SlackTextViewController) | Slack 推出的一款具有文字输入框高度自适应, 自动输入, 复制单元格内容等功能的解决方案 |\n| [JazzHands](https://github.com/IFTTT/JazzHands) | IFTTT 开源的一个简单易用的关键帧基础动画框架, 可通过手势、scroll views, KVO, ReactiveCocoa 等方式来控制动画 |\n| [Bolts-iOS](https://github.com/BoltsFramework/Bolts-iOS) | Bolts 是一个 Parse 和 Facebook 在内部使用的底层库, 方便移动开发 |\n| [Spectacle](https://github.com/eczarny/spectacle) | 一款易用的 OS X 窗口分屏操作快捷键工具, 这是其源代码           |\n| [nui](https://github.com/tombenner/nui)  | 方便样式化 iOS 应用中的 UI 元素, 可在短时间内样式化整个应用, 类 CSS 原理 |\n| [Induction](https://github.com/Induction/Induction) | Induction 是一款用于理解数据关系的管理工具, 这是其程序代码      |\n| [JSONModel](https://github.com/icanzilb/JSONModel) | 一个能迅速解析服务器返回的 Json 数据的库, 方便数据的类型转换       |\n| [DTCoreText](https://github.com/Cocoanetics/DTCoreText) | 一个开源的 iOS 富文本组件, 它可以解析 HTML 与 CSS 并最终用 CoreText 绘制出来, 通常用于在一些需要显示富文本的场景下代替低性能的 UIWebView |\n| [Popping](https://github.com/schneiderandre/popping) | 基于 Facebook Pop 引擎的 iOS 动画库, 集合了很多动画效果   |\n| [TSMessages](https://github.com/KrauseFx/TSMessages) | 一个用来弹出显示警告和通知的轻量级库, 样式丰富, 简单易用           |\n| [KVOController](https://github.com/facebook/KVOController) | 一个简单安全的 KVO(Key-value Observing, 键-值 观察)工具, 提供简单方便、线程安全的API, Facebook 的开源项目之一 |\n| [MWPhotoBrowser](https://github.com/mwaterfall/MWPhotoBrowser) | 一款简单的 iOS 照片浏览控件                         |\n| [MMDrawerController](https://github.com/mutualmobile/MMDrawerController) | 一个轻量级, 易于使用的侧边抽屉导航 iOS 控件                |\n| [QuickDialog](https://github.com/escoz/QuickDialog) | 用于快速创建复杂的 iOS 表单, 自定义了 UITableViewCell, TableView 的样式 |\n| [SVPullToRefresh](https://github.com/samvermette/SVPullToRefresh) | 一款只需一行代码便可集成上拉刷新和下拉加载的组件                 |\n| [cheddar-ios](https://github.com/nothingmagical/cheddar-ios) | Cheddar 是一款简单易用的日程管理软件, 这是其早期版本的开源代码, 该项目已停止维护 |\n| [XVim](https://github.com/XVimProject/XVim) | 一款在 Xcode 上实现了 Vim 功能的插件                 |\n| [EGOTableViewPullRefresh](https://github.com/enormego/EGOTableViewPullRefresh) | 一款提供下拉刷新的控件, 最后更新时间是一年前                  |\n| [iOS-boilerplate](https://github.com/gimenete/iOS-boilerplate) | iOS 应用程序的基础模板, 使用该模板可以省掉许多项目初始编码的工作, 内置非常多丰富的功能, 现已经停止维护 |\n| [JASidePanels](https://github.com/gotosleep/JASidePanels) | 一个 UIViewController 容器, 灵感来自 Facebook 和 Path 2.0 应用的菜单, 实现了左右侧滑的操作 |\n| [FormatterKit](https://github.com/mattt/FormatterKit) | 收集了很多构思优秀的 NSFormatter 子类                |\n| [MSDynamicsDrawerViewController](https://github.com/erichoracek/MSDynamicsDrawerViewController) | 实现了具有动态弹性效果的抽屉式侧边导航栏, 效果丰富, 可定制性强        |\n| [idev-recipes](https://github.com/boctor/idev-recipes) | iDevRecipes 博客的代码, 演示如何实现一些有趣的控件, 该项目在两年前(2013)停止了更新 |\n| [XMPPFramework](https://github.com/robbiehanson/XMPPFramework) | 一个基于 RFC-3920 实现, 支持多线程和线程保护, 同时通用于所有的 iOS 和 Mac OS 开发设备的通信框架. |\n| [MacGap1](https://github.com/MacGapProject/MacGap1) | 一款可以将 HTML/CSS/JS 网络应用打包成原生 Mac App 的工具  |\n| [FXBlurView](https://github.com/nicklockwood/FXBlurView) | iOS 模糊背景类库, 可以方便的根据底层显示的状态生成模糊效果         |\n| [iOS7-Sampler](https://github.com/shu223/iOS7-Sampler) | 整合演示了多个具有 iOS7 新特性的的项目, 提供了非常多的例子参考      |\n| [PromiseKit](https://github.com/mxcl/PromiseKit) | 提供强大的 iOS 开发异步功能, 是 Promises 的实现, 受到广大开发者的追捧 |\n| [Origami](https://github.com/facebook/origami) | 此为 Facebook 推出的 Quartz Composer 的一个开源插件, 由其设计团队花费了 9 个月打造而成, 目的是为方便设计师快速构建原型, 以零代码完成复杂动画的合成和测试, 堪称神器 |\n| [NSLogger](https://github.com/fpillet/NSLogger) | 一款强大的日志分析工具, 具有大窗口查看 Log, 自定义日志等级等功能     |\n| [KSImageNamed-Xcode](https://github.com/ksuther/KSImageNamed-Xcode) | 一款对 UIImage 的 imageNamed 提供自动补全功能的插件, 非常方便 |\n| [PureLayout](https://github.com/smileyborg/PureLayout) | 一个简单却强大的 AutoLayout API 库, 兼容了 Objective-C 和 Swift, 扩展了 UIView/NSView, NSArray, 和 NSLayoutConstraint |\n| [AppleDoc](https://github.com/tomaz/appledoc) | 一款 Objective-C 文档生成工具, 生成的文档风格保持与 Apple 官方的一致, 极大的方便了 Xcode 识别自己写的 API 文档, 安装也是十分的简单 |\n| [iTerm2](https://github.com/gnachman/iTerm2) | iTerm2 被不少程序员称赞为 Mac 下最好用的终端, 这是其源代码, 配合 oh-my-zsh 使用效果更佳 |\n| [Kiwi](https://github.com/kiwi-bdd/Kiwi) | 一个行为驱动开发测试框架, 适用于 iOS 平台, 旨在为开发者提供一个简单配置便可使用的 BDD 库 |\n| [terminal-notifier](https://github.com/alloy/terminal-notifier) | 一款命令行工具, 用来给 Mac OS X 用户发送通知             |\n| [MacDown](https://github.com/uranusjr/macdown) | Mac OS X 下的一款开源的 Markdown 编辑器, 创意来自与 Mou, 使用 brew cask 即可完成安装 |\n| [TwUI](https://github.com/twitter/twui)  | Twitter 开源的一个支持硬件加速的 Mac 的 UI 框架, 最后一次的更新时间是在 3 年前(2012) |\n| [PaperFold for iOS](https://github.com/honcheng/PaperFold-for-iOS) | 实现了类似折纸效果的视图切换, 可从不同方向进行切换, 该项目已经许久未更新   |\n| [Reader](https://github.com/vfr/Reader)  | 一款开源的 iOS PDF 阅读器, 附带书签, 列纲要等功能          |\n| [WebViewJavascriptBridge](https://github.com/marcuswestin/WebViewJavascriptBridge) | 一个方便使用 Objective-C 与 JavaScript 进行通信的第三方库, 支持消息发送, 接收, 消息处理器的注册与调用以及设置消息处理的回调 |\n| [iOS8-Sampler](https://github.com/shu223/iOS8-Sampler) | iOSX-Sampler 系列之一, 整合演示了多个具有 iOS8 新特性的的项目, 提供了非常多的例子参考 |\n| [CocoaHTTPServer](https://github.com/robbiehanson/CocoaHTTPServer) | 一个用于 Mac OS X 或 iOS 应用的轻量级、可嵌入的HTTP 服务器框架, 方便开发者在应用中嵌入一个 HTTP 服务器 |\n| [Kod](https://github.com/rsms/kod)       | Mac OS X 上一款专为程序员打造的编辑器, 这是其开源代码, 可惜的是作者在 2011 年停止了维护 |\n| [TPKeyboardAvoiding](https://github.com/michaeltyson/TPKeyboardAvoiding) | 下拉键盘在 iOS 移动文本字段的通用解决方案, 能够自动处理键盘弹出后出现遮挡到文本输入框的问题 |\n| [MKNetworkKit](https://github.com/MugunthKumar/MKNetworkKit) | 一个轻量级网络请求框架, 完全基于 ARC, 仅有两个类, 具有自主操作多个网络请求, 更加准确的显示网络活动指标等优点，设置简单, 高度灵活 |\n| [AQGridView](https://github.com/AlanQuatermain/AQGridView) | 一个命令行工具, 通过项目里的 `.xcdatamodel` 文件, 可以为每个 entity 生成两个类, 方便 CoreData 的使用 |","source":"_posts/GitHub-IOS-Libraries-Top-100-简介.md","raw":"---\ntitle: GitHub IOS Libraries Top 100 简介\ndate: 2017-04-11 17:50:25\ntags:\n    - IOS\n    - 框架\ncategories:\n    - IOS\n---\n\n## GitHub IOS 框架Top 100 简介\n\n<font color=\"#ff0000\">本文原文链接https://github.com/Aufree/trip-to-iOS/blob/master/Top-100.md</font>\n\n\n\n主要对当前 GitHub 排名前 100 的项目做一个简单的简介, 方便初学者快速了解到当前 Objective-C 在 GitHub 的情况.\n\n> - [Android 版本](https://github.com/Freelander/Android_Data/blob/master/Android-Librarys-Top-100.md)。\n> - 本人著作的书籍[《Laravel 入门教程》](https://laravel-china.org/laravel-tutorial/5.1)已正式发布，有兴趣的朋友可点击 [此处](https://laravel-china.org/topics/3383) 作进一步了解。\n\n**若有任何疑问可通过微博 @李锦发 或我的微信（lijinfa894330982）联系我**\n\n| 项目名称                                     | 项目信息                                     |\n| ---------------------------------------- | ---------------------------------------- |\n| [AFNetworking](https://github.com/AFNetworking/AFNetworking) | 作者是 NSHipster 的博主, iOS 开发界的大神级人物, 毕业于卡内基·梅隆大学, 开源了许多牛逼的项目, 这个便是其中之一, AFNetworking 采用 NSURLConnection + NSOperation, 主要方便与服务端 API 进行数据交换, 操作简单, 功能强大, 现在许多人都用它取代 ASIHTTPRequest |\n| [GPUImage](https://github.com/BradLarson/GPUImage) | 一款强大的图片滤镜工具, 支持自定义滤镜, 可用来实时处理图片和视频流, 作者是 SonoPlot 公司的 CTO, 在很小的时候便开始接触编程, 他在 [SO](http://stackoverflow.com/users/19679/brad-larson) 上面的回答也有很多值得阅读, GPUImage 这个项目从 2012 年开始, 使用 OpenGL 图形程序接口编写, 性能非常好, 现在很多 iOS 程序员都用它来实现 iOS 的模糊效果 |\n| [SDWebImage](https://github.com/rs/SDWebImage) | 作者 Olivier Poitrey 是 Dailymotion 的 CTO, 拥有多个不错的开源项目, 此项目常用于对从 Web 端接受到的图片进行缓存, 是 UIImageView 的扩展, 应用起来比较简单 |\n| [RestKit](https://github.com/RestKit/RestKit) | 主要用于 iOS 上网络通信, 允许与 RESTful Web 服务交互, 常用于处理 API, 解析 JSON, 映射响应对象等操作, 简单易用, 方便你把所有精力都放在对数据的操作上 |\n| [ReactiveCocoa](https://github.com/ReactiveCocoa/ReactiveCocoa) | 由 GitHub 工程师们开发的一个应用于 iOS 和 OS X 开发的函数响应式编程新框架, Matt 称其为 \"An open source project that exemplifies this brave new era for Objective-C\", 也有人说它是 Cocoa 的未来, 具体可看唐巧写的这篇[文章](http://www.devtang.com/blog/2014/02/11/reactivecocoa-introduction) |\n| [three20](https://github.com/facebookarchive/three20) | 由 Facebook iOS 客户端衍生出的一款 iPhone 框架, 内置许多丰富的功能, 有丰富的界面, 对底层的操作便捷, 为开发者省下了很多时间, 但现在已经停止了更新, 一个 [PR](https://github.com/facebookarchive/three20/pull/832?utm_source=iOS+Dev+Weekly&utm_campaign=46a7deb647-iOS_Dev_Weekly_Issue_100&utm_medium=email&utm_term=0_7bda94b7ca-46a7deb647-299428269) 把代码删得干干净净, 不要好奇去点开 Files changed, 我点开后该页面直接卡死, three20 当中的一位作者创建了 [Nimbus](https://github.com/jverkoey/nimbus), 算是 three20 的一个替代品 |\n| [MBProgressHUD](https://github.com/jdg/MBProgressHUD) | 作者 Matej Bukovinski 是一位全栈工程师, UI/UX 设计师, 此项目是一款提示框第三方库, 帮助开发者快速应用到项目中) |\n| [MagicalRecord](https://github.com/magicalpanda/MagicalRecord) | 作者是 Coursera 的 iOS 工程师, 该项目创作灵感来自于 Ruby on Rails 的 Active Record, 主要为方便操作 CoreData 而生, 帮助清除 CoreData 引用的代码, 协助方便 CoreData 的工作 |\n| [FMDB](https://github.com/ccgus/fmdb)    | 一个对 SQLite 进行封装的库, 使用起来方便, 简单            |\n| [Mantle](https://github.com/Mantle/Mantle) | 作者是 GitHub 的员工, 文档写的很清楚: Mantle makes it easy to write a simple model layer for your Cocoa or Cocoa Touch application, 主要用来将 JSON 数据模型化为 Model 对象, 唱吧在前段时间也改用 Mantle 了. |\n| [FlatUIKit](https://github.com/Grouper/FlatUIKit) | 收集了很多扁平化 UI 的 iOS 组件, 方便使用               |\n| [ASIHTTPRequest](https://github.com/pokeb/asi-http-request) | 一个轻量级的 iOS 网络通信类库, 基于 CFNetwork 框架开发, 但现在已经停止更新, 多数开发者改用 AFNetworking 替代) |\n| [FastImageCache](https://github.com/path/FastImageCache) | Path 公司出品的 iOS 库, 作者 Mallory Paine 是苹果前员工, 此类库适用于在滚动时快速显示图像, 高速持久是其最大的特点 |\n| [Masonry](https://github.com/Masonry/Masonry) | 一个轻量级的布局框架, 同时支持 iOS 和 Mac OS X, 语法优雅, 帮助开发者快速适配不同分辨率的 iOS 设备 |\n| [Shimmer](https://github.com/facebook/Shimmer) | Facebook 推出的一款具有闪烁效果的第三方控件, 供它旗下一款名为 Paper 的应用使用, 安装使用整个过程都十分简单 |\n| [SVProgressHUD](https://github.com/TransitApp/SVProgressHUD) | 又一款轻量级的 iOS 第三方控件, 用于显示任务加载时的动画, 非常轻便, 容易使用 |\n| [Slate](https://github.com/jigish/slate) | 一款窗口管理应用程序, 但在两年前就已经停止更新了                |\n| [JSONKit](https://github.com/johnezang/JSONKit) | 主要用于解析 JSON, 适用于 iOS6 以下环境, 自从 iOS5 开始 Apple 官方给出了 NSJSONSerialization API, 自此大家都用官方的了 |\n| [Nimbus](https://github.com/jverkoey/nimbus) | 作者 Jeff 曾为 Facebook, Google 做过不少好东西, 也是 three20 的成员之一, three20 停更后, 他创造出这个框架来代替 three20, 文档齐全 |\n| [CocoaLumberjack](https://github.com/CocoaLumberjack/CocoaLumberjack) | 这是 Mac 和 iOS 的一款强大的日志框架, 配置简单, 多线程, 提供更高级的 log 功能, 可用于代替默认的 NSLog 语句 |\n| [Facebook SDK for iOS](https://github.com/facebook/facebook-ios-sdk) | Facebook 官方的 iOS SDK, 方便开发者集成 Facebook 的一些功能到自己的 iOS APP 里面 |\n| [AsyncDisplayKit](https://github.com/facebook/AsyncDisplayKit) | Facebook 开源的一款 iOS UI 框架, Paper 用的就是该框架, 另外框架还用到了 Facebook 早期开源 Pop 动画引擎 |\n| [Alcatraz](https://github.com/supermarin/Alcatraz) | Alcatraz 是一款管理 Xcode 插件、模版以及颜色配置的工具, 可以集成到 Xcode 的图形界面中, 安装删除都是几条命令的事, 很方便, 支持自己开发插件并上传 |\n| [ViewDeck](https://github.com/Inferis/ViewDeck) | 一款开源的 iOS 活动面板组件, 还原 Path 2.0 的侧滑效果, 作者因为时间关系在两年前停止对其更新 |\n| [JSQMessagesViewController](https://github.com/jessesquires/JSQMessagesViewController) | 优雅的 iOS 消息类库, 常用于聊天应用中, 可定制性高            |\n| [FLEX](https://github.com/Flipboard/FLEX) | 这是 Flipboard 官方发布的一组专门用于 iOS 开发的应用内调试工具, 开发者无需将其连接到 LLDB/Xcode 或其他远程调试服务器,支持直接在 App 中运行 |\n| [Xctool](https://github.com/facebook/xctool) | 是 Facebook 开源的一个命令行工具，用来替代苹果的 XcodeBuild 工具, 极大的方便了 iOS 的构建和测试, 输出错误信息也比较友好, 受到许多 iOS 开发者的称赞, 经常与其搭配使用的还有 OCUnit, [Travis CI](https://travis-ci.org/), [OCLint](http://oclint.org/) 等测试工具 |\n| [OpenEmu](https://github.com/OpenEmu/OpenEmu) | 超强的游戏模拟器, 做游戏开发必备, 官网做得也很不错              |\n| [iCarousel](https://github.com/nicklockwood/iCarousel) | 作者是英国 Charcoal Design 公司的创始人, 开源领域的贡献颇为卓著, 这个项目就是其中之一, 这是一款可以在 iOS 上实现旋转木马视图切换效果的第三方控件, 并提供多种切换效果 |\n| [RESideMenu](https://github.com/romaonthego/RESideMenu) | 作者 Roman Efimov 是雅虎的 iOS 工程师, 这个项目实现了 iOS 上的菜单侧滑效果, 创意来源于 Dribbble, 该项目支持 iOS8 |\n| [PNChart](https://github.com/kevinzhow/PNChart) | 作者周楷雯是 90 后, 秒视的创始人, 该项目是一个带动画效果的图表控件, 简约易用, 受到不少开发者喜爱 |\n| [PonyDebugger](https://github.com/square/PonyDebugger) | 由 Square 公司推出的一款优秀的 iOS 应用网络调试工具, 用户可以实时看到应用程序的网络请求, 也可以对 iOS 应用程序的核心数据栈进行远程调试 |\n| [JVFloatLabeledTextField](https://github.com/jverdi/JVFloatLabeledTextField) | 作者是 Thumb Labs 的联合创始人, JVFloatLabeledTextField 是 UITextField 的子类, 主要实现输入框标签浮动效果, 创作灵感来自 Dribbble, 已出现多个移植版本 |\n| [SWTableViewCell](https://github.com/CEWendel/SWTableViewCell) | UITableViewCell 的子类, 实现了左右滑动显示信息视图并调出按钮  |\n| [AwesomeMenu](https://github.com/levey/AwesomeMenu) | 作者是一位中国人, 该项目主要是使用 CoreAnimation 还原了 Path menu 的动画效果 |\n| [Reachability](https://github.com/tonymillion/Reachability) | Reachablity 是用于检测 iOS 设备网络环境的库           |\n| [VVDocumenter-Xcode](https://github.com/onevcat/VVDocumenter-Xcode) | 作者是王巍国内著名的 iOS 开发者, 人称喵神, 目前在日本 LINE 公司工作, 该项目帮助开发者轻松的生成注释文档, 节省了不少工作量, 赞 |\n| [The Physical Web](https://github.com/google/physical-web) | 由 Chrome 团队主导的一个项目, 意在用 URL 连接世界, 方便用户接受数据, 目前尚处在实验阶段 |\n| [NewsBlur](https://github.com/samuelclay/NewsBlur) | 作者独自一个人 Samuel Clay 做出来的一款名为 NewsBlur 的新闻阅读器, 很多人都称其为 Google Reader 的替代品, 这是它的源码 |\n| [Cocos2D-SpriteBuilder](https://github.com/cocos2d/cocos2d-spritebuilder) | 一个可用于在 iOS, Mac 和 Android 上制作 2D 游戏或其它图形/交互应用的框架, 之前的项目名称为 Cocos Swift, 目前该项目在 GitHub 上更新较为频繁 |\n| [TTTAttributedLabel](https://github.com/TTTAttributedLabel/TTTAttributedLabel) | UILabel 的替代品, 使 iOS 上的 Label 功能更加丰富, 可支持链接植入等功能 |\n| [CocoaAsyncSocket](https://github.com/robbiehanson/CocoaAsyncSocket) | 一个功能强大、简单易用的异步 socket 通讯类库, 支持 TCP 和 UDP 协议, 可用于 Mac 和 iOS 设备上, 作者 Robbie Hanson 是 Deusty 的首席软件工程师 |\n| [TapkuLibrary](https://github.com/devinross/tapkulibrary) | 作者是 Devin Ross, 这是在 iOS 上一款功能强大的 UI 效果类库, 可以实现多种酷炫的效果, 目前仍在更新中 |\n| [Canvas](https://github.com/CanvasPod/Canvas) | 无需编码实现牛逼的动画效果的库, 连设计师都可以快速上手             |\n| [SocketRocket](https://github.com/square/SocketRocket) | Square 公司开源的一个 WebSocket 客户端, 稳定并且易用, 做实时应用常会用到, 受广大开发者喜爱 |\n| [ECSlidingViewController](https://github.com/ECSlidingViewController/ECSlidingViewController) | 一个视图控制器容器, 将子视图处理成两层, 通过滑动来处理层的切换, 创作灵感来自 Facebook 和 Path的 App, 作者是 Cleveland 的员工 |\n| [Json Framework](https://github.com/stig/json-framework) | 用于解析 JSON 数据的一个框架, 但是在 iOS5 以上版本大多数人都选择使用 NSJSONSerialization 来解析 JSON, 该项目现在在 GitHub 上也几乎没怎么更新了 |\n| [Tweaks](https://github.com/facebook/Tweaks) | Facebook 开源的一款工具, 旨在帮助 iOS 开发者更快的迭代应用, 方便用户动态的调整参数, 是的, Paper 这个项目也用到了 |\n| [realm-cocoa](https://github.com/realm/realm-cocoa) | Realm-Cocoa 是 Realm 公司推出一款移动端数据库, 可以运行在手机、平板和可穿戴设备之上, 其目标是取代 CoreData 和 SQLite 数据库 |\n| [BlocksKit](https://github.com/zwaldowski/BlocksKit) | 一个开源的与 Cocoa 紧密集合的基础性框架                  |\n| [Appirater](https://github.com/arashpayan/appirater) | 一款用于提醒用户给你的 App 打分的工具                    |\n| [KIF](https://github.com/kif-framework/KIF) | Square 出品的一个开源的用户界面测试框架, 极大的简化了 iOS 开发者的 UI 测试流程 |\n| [SlackTextViewController](https://github.com/slackhq/SlackTextViewController) | Slack 推出的一款具有文字输入框高度自适应, 自动输入, 复制单元格内容等功能的解决方案 |\n| [JazzHands](https://github.com/IFTTT/JazzHands) | IFTTT 开源的一个简单易用的关键帧基础动画框架, 可通过手势、scroll views, KVO, ReactiveCocoa 等方式来控制动画 |\n| [Bolts-iOS](https://github.com/BoltsFramework/Bolts-iOS) | Bolts 是一个 Parse 和 Facebook 在内部使用的底层库, 方便移动开发 |\n| [Spectacle](https://github.com/eczarny/spectacle) | 一款易用的 OS X 窗口分屏操作快捷键工具, 这是其源代码           |\n| [nui](https://github.com/tombenner/nui)  | 方便样式化 iOS 应用中的 UI 元素, 可在短时间内样式化整个应用, 类 CSS 原理 |\n| [Induction](https://github.com/Induction/Induction) | Induction 是一款用于理解数据关系的管理工具, 这是其程序代码      |\n| [JSONModel](https://github.com/icanzilb/JSONModel) | 一个能迅速解析服务器返回的 Json 数据的库, 方便数据的类型转换       |\n| [DTCoreText](https://github.com/Cocoanetics/DTCoreText) | 一个开源的 iOS 富文本组件, 它可以解析 HTML 与 CSS 并最终用 CoreText 绘制出来, 通常用于在一些需要显示富文本的场景下代替低性能的 UIWebView |\n| [Popping](https://github.com/schneiderandre/popping) | 基于 Facebook Pop 引擎的 iOS 动画库, 集合了很多动画效果   |\n| [TSMessages](https://github.com/KrauseFx/TSMessages) | 一个用来弹出显示警告和通知的轻量级库, 样式丰富, 简单易用           |\n| [KVOController](https://github.com/facebook/KVOController) | 一个简单安全的 KVO(Key-value Observing, 键-值 观察)工具, 提供简单方便、线程安全的API, Facebook 的开源项目之一 |\n| [MWPhotoBrowser](https://github.com/mwaterfall/MWPhotoBrowser) | 一款简单的 iOS 照片浏览控件                         |\n| [MMDrawerController](https://github.com/mutualmobile/MMDrawerController) | 一个轻量级, 易于使用的侧边抽屉导航 iOS 控件                |\n| [QuickDialog](https://github.com/escoz/QuickDialog) | 用于快速创建复杂的 iOS 表单, 自定义了 UITableViewCell, TableView 的样式 |\n| [SVPullToRefresh](https://github.com/samvermette/SVPullToRefresh) | 一款只需一行代码便可集成上拉刷新和下拉加载的组件                 |\n| [cheddar-ios](https://github.com/nothingmagical/cheddar-ios) | Cheddar 是一款简单易用的日程管理软件, 这是其早期版本的开源代码, 该项目已停止维护 |\n| [XVim](https://github.com/XVimProject/XVim) | 一款在 Xcode 上实现了 Vim 功能的插件                 |\n| [EGOTableViewPullRefresh](https://github.com/enormego/EGOTableViewPullRefresh) | 一款提供下拉刷新的控件, 最后更新时间是一年前                  |\n| [iOS-boilerplate](https://github.com/gimenete/iOS-boilerplate) | iOS 应用程序的基础模板, 使用该模板可以省掉许多项目初始编码的工作, 内置非常多丰富的功能, 现已经停止维护 |\n| [JASidePanels](https://github.com/gotosleep/JASidePanels) | 一个 UIViewController 容器, 灵感来自 Facebook 和 Path 2.0 应用的菜单, 实现了左右侧滑的操作 |\n| [FormatterKit](https://github.com/mattt/FormatterKit) | 收集了很多构思优秀的 NSFormatter 子类                |\n| [MSDynamicsDrawerViewController](https://github.com/erichoracek/MSDynamicsDrawerViewController) | 实现了具有动态弹性效果的抽屉式侧边导航栏, 效果丰富, 可定制性强        |\n| [idev-recipes](https://github.com/boctor/idev-recipes) | iDevRecipes 博客的代码, 演示如何实现一些有趣的控件, 该项目在两年前(2013)停止了更新 |\n| [XMPPFramework](https://github.com/robbiehanson/XMPPFramework) | 一个基于 RFC-3920 实现, 支持多线程和线程保护, 同时通用于所有的 iOS 和 Mac OS 开发设备的通信框架. |\n| [MacGap1](https://github.com/MacGapProject/MacGap1) | 一款可以将 HTML/CSS/JS 网络应用打包成原生 Mac App 的工具  |\n| [FXBlurView](https://github.com/nicklockwood/FXBlurView) | iOS 模糊背景类库, 可以方便的根据底层显示的状态生成模糊效果         |\n| [iOS7-Sampler](https://github.com/shu223/iOS7-Sampler) | 整合演示了多个具有 iOS7 新特性的的项目, 提供了非常多的例子参考      |\n| [PromiseKit](https://github.com/mxcl/PromiseKit) | 提供强大的 iOS 开发异步功能, 是 Promises 的实现, 受到广大开发者的追捧 |\n| [Origami](https://github.com/facebook/origami) | 此为 Facebook 推出的 Quartz Composer 的一个开源插件, 由其设计团队花费了 9 个月打造而成, 目的是为方便设计师快速构建原型, 以零代码完成复杂动画的合成和测试, 堪称神器 |\n| [NSLogger](https://github.com/fpillet/NSLogger) | 一款强大的日志分析工具, 具有大窗口查看 Log, 自定义日志等级等功能     |\n| [KSImageNamed-Xcode](https://github.com/ksuther/KSImageNamed-Xcode) | 一款对 UIImage 的 imageNamed 提供自动补全功能的插件, 非常方便 |\n| [PureLayout](https://github.com/smileyborg/PureLayout) | 一个简单却强大的 AutoLayout API 库, 兼容了 Objective-C 和 Swift, 扩展了 UIView/NSView, NSArray, 和 NSLayoutConstraint |\n| [AppleDoc](https://github.com/tomaz/appledoc) | 一款 Objective-C 文档生成工具, 生成的文档风格保持与 Apple 官方的一致, 极大的方便了 Xcode 识别自己写的 API 文档, 安装也是十分的简单 |\n| [iTerm2](https://github.com/gnachman/iTerm2) | iTerm2 被不少程序员称赞为 Mac 下最好用的终端, 这是其源代码, 配合 oh-my-zsh 使用效果更佳 |\n| [Kiwi](https://github.com/kiwi-bdd/Kiwi) | 一个行为驱动开发测试框架, 适用于 iOS 平台, 旨在为开发者提供一个简单配置便可使用的 BDD 库 |\n| [terminal-notifier](https://github.com/alloy/terminal-notifier) | 一款命令行工具, 用来给 Mac OS X 用户发送通知             |\n| [MacDown](https://github.com/uranusjr/macdown) | Mac OS X 下的一款开源的 Markdown 编辑器, 创意来自与 Mou, 使用 brew cask 即可完成安装 |\n| [TwUI](https://github.com/twitter/twui)  | Twitter 开源的一个支持硬件加速的 Mac 的 UI 框架, 最后一次的更新时间是在 3 年前(2012) |\n| [PaperFold for iOS](https://github.com/honcheng/PaperFold-for-iOS) | 实现了类似折纸效果的视图切换, 可从不同方向进行切换, 该项目已经许久未更新   |\n| [Reader](https://github.com/vfr/Reader)  | 一款开源的 iOS PDF 阅读器, 附带书签, 列纲要等功能          |\n| [WebViewJavascriptBridge](https://github.com/marcuswestin/WebViewJavascriptBridge) | 一个方便使用 Objective-C 与 JavaScript 进行通信的第三方库, 支持消息发送, 接收, 消息处理器的注册与调用以及设置消息处理的回调 |\n| [iOS8-Sampler](https://github.com/shu223/iOS8-Sampler) | iOSX-Sampler 系列之一, 整合演示了多个具有 iOS8 新特性的的项目, 提供了非常多的例子参考 |\n| [CocoaHTTPServer](https://github.com/robbiehanson/CocoaHTTPServer) | 一个用于 Mac OS X 或 iOS 应用的轻量级、可嵌入的HTTP 服务器框架, 方便开发者在应用中嵌入一个 HTTP 服务器 |\n| [Kod](https://github.com/rsms/kod)       | Mac OS X 上一款专为程序员打造的编辑器, 这是其开源代码, 可惜的是作者在 2011 年停止了维护 |\n| [TPKeyboardAvoiding](https://github.com/michaeltyson/TPKeyboardAvoiding) | 下拉键盘在 iOS 移动文本字段的通用解决方案, 能够自动处理键盘弹出后出现遮挡到文本输入框的问题 |\n| [MKNetworkKit](https://github.com/MugunthKumar/MKNetworkKit) | 一个轻量级网络请求框架, 完全基于 ARC, 仅有两个类, 具有自主操作多个网络请求, 更加准确的显示网络活动指标等优点，设置简单, 高度灵活 |\n| [AQGridView](https://github.com/AlanQuatermain/AQGridView) | 一个命令行工具, 通过项目里的 `.xcdatamodel` 文件, 可以为每个 entity 生成两个类, 方便 CoreData 的使用 |","slug":"GitHub-IOS-Libraries-Top-100-简介","published":1,"updated":"2017-04-11T11:10:34.105Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ndxccy001b88owun7clppr","content":"<h2 id=\"GitHub-IOS-框架Top-100-简介\"><a href=\"#GitHub-IOS-框架Top-100-简介\" class=\"headerlink\" title=\"GitHub IOS 框架Top 100 简介\"></a>GitHub IOS 框架Top 100 简介</h2><font color=\"#ff0000\">本文原文链接<a href=\"https://github.com/Aufree/trip-to-iOS/blob/master/Top-100.md\" target=\"_blank\" rel=\"external\">https://github.com/Aufree/trip-to-iOS/blob/master/Top-100.md</a></font>\n\n\n\n<p>主要对当前 GitHub 排名前 100 的项目做一个简单的简介, 方便初学者快速了解到当前 Objective-C 在 GitHub 的情况.</p>\n<blockquote>\n<ul>\n<li><a href=\"https://github.com/Freelander/Android_Data/blob/master/Android-Librarys-Top-100.md\" target=\"_blank\" rel=\"external\">Android 版本</a>。</li>\n<li>本人著作的书籍<a href=\"https://laravel-china.org/laravel-tutorial/5.1\" target=\"_blank\" rel=\"external\">《Laravel 入门教程》</a>已正式发布，有兴趣的朋友可点击 <a href=\"https://laravel-china.org/topics/3383\" target=\"_blank\" rel=\"external\">此处</a> 作进一步了解。</li>\n</ul>\n</blockquote>\n<p><strong>若有任何疑问可通过微博 @李锦发 或我的微信（lijinfa894330982）联系我</strong></p>\n<table>\n<thead>\n<tr>\n<th>项目名称</th>\n<th>项目信息</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/AFNetworking/AFNetworking\" target=\"_blank\" rel=\"external\">AFNetworking</a></td>\n<td>作者是 NSHipster 的博主, iOS 开发界的大神级人物, 毕业于卡内基·梅隆大学, 开源了许多牛逼的项目, 这个便是其中之一, AFNetworking 采用 NSURLConnection + NSOperation, 主要方便与服务端 API 进行数据交换, 操作简单, 功能强大, 现在许多人都用它取代 ASIHTTPRequest</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/BradLarson/GPUImage\" target=\"_blank\" rel=\"external\">GPUImage</a></td>\n<td>一款强大的图片滤镜工具, 支持自定义滤镜, 可用来实时处理图片和视频流, 作者是 SonoPlot 公司的 CTO, 在很小的时候便开始接触编程, 他在 <a href=\"http://stackoverflow.com/users/19679/brad-larson\" target=\"_blank\" rel=\"external\">SO</a> 上面的回答也有很多值得阅读, GPUImage 这个项目从 2012 年开始, 使用 OpenGL 图形程序接口编写, 性能非常好, 现在很多 iOS 程序员都用它来实现 iOS 的模糊效果</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/rs/SDWebImage\" target=\"_blank\" rel=\"external\">SDWebImage</a></td>\n<td>作者 Olivier Poitrey 是 Dailymotion 的 CTO, 拥有多个不错的开源项目, 此项目常用于对从 Web 端接受到的图片进行缓存, 是 UIImageView 的扩展, 应用起来比较简单</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/RestKit/RestKit\" target=\"_blank\" rel=\"external\">RestKit</a></td>\n<td>主要用于 iOS 上网络通信, 允许与 RESTful Web 服务交互, 常用于处理 API, 解析 JSON, 映射响应对象等操作, 简单易用, 方便你把所有精力都放在对数据的操作上</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/ReactiveCocoa/ReactiveCocoa\" target=\"_blank\" rel=\"external\">ReactiveCocoa</a></td>\n<td>由 GitHub 工程师们开发的一个应用于 iOS 和 OS X 开发的函数响应式编程新框架, Matt 称其为 “An open source project that exemplifies this brave new era for Objective-C”, 也有人说它是 Cocoa 的未来, 具体可看唐巧写的这篇<a href=\"http://www.devtang.com/blog/2014/02/11/reactivecocoa-introduction\" target=\"_blank\" rel=\"external\">文章</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/facebookarchive/three20\" target=\"_blank\" rel=\"external\">three20</a></td>\n<td>由 Facebook iOS 客户端衍生出的一款 iPhone 框架, 内置许多丰富的功能, 有丰富的界面, 对底层的操作便捷, 为开发者省下了很多时间, 但现在已经停止了更新, 一个 <a href=\"https://github.com/facebookarchive/three20/pull/832?utm_source=iOS+Dev+Weekly&amp;utm_campaign=46a7deb647-iOS_Dev_Weekly_Issue_100&amp;utm_medium=email&amp;utm_term=0_7bda94b7ca-46a7deb647-299428269\" target=\"_blank\" rel=\"external\">PR</a> 把代码删得干干净净, 不要好奇去点开 Files changed, 我点开后该页面直接卡死, three20 当中的一位作者创建了 <a href=\"https://github.com/jverkoey/nimbus\" target=\"_blank\" rel=\"external\">Nimbus</a>, 算是 three20 的一个替代品</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/jdg/MBProgressHUD\" target=\"_blank\" rel=\"external\">MBProgressHUD</a></td>\n<td>作者 Matej Bukovinski 是一位全栈工程师, UI/UX 设计师, 此项目是一款提示框第三方库, 帮助开发者快速应用到项目中)</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/magicalpanda/MagicalRecord\" target=\"_blank\" rel=\"external\">MagicalRecord</a></td>\n<td>作者是 Coursera 的 iOS 工程师, 该项目创作灵感来自于 Ruby on Rails 的 Active Record, 主要为方便操作 CoreData 而生, 帮助清除 CoreData 引用的代码, 协助方便 CoreData 的工作</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/ccgus/fmdb\" target=\"_blank\" rel=\"external\">FMDB</a></td>\n<td>一个对 SQLite 进行封装的库, 使用起来方便, 简单</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Mantle/Mantle\" target=\"_blank\" rel=\"external\">Mantle</a></td>\n<td>作者是 GitHub 的员工, 文档写的很清楚: Mantle makes it easy to write a simple model layer for your Cocoa or Cocoa Touch application, 主要用来将 JSON 数据模型化为 Model 对象, 唱吧在前段时间也改用 Mantle 了.</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Grouper/FlatUIKit\" target=\"_blank\" rel=\"external\">FlatUIKit</a></td>\n<td>收集了很多扁平化 UI 的 iOS 组件, 方便使用</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/pokeb/asi-http-request\" target=\"_blank\" rel=\"external\">ASIHTTPRequest</a></td>\n<td>一个轻量级的 iOS 网络通信类库, 基于 CFNetwork 框架开发, 但现在已经停止更新, 多数开发者改用 AFNetworking 替代)</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/path/FastImageCache\" target=\"_blank\" rel=\"external\">FastImageCache</a></td>\n<td>Path 公司出品的 iOS 库, 作者 Mallory Paine 是苹果前员工, 此类库适用于在滚动时快速显示图像, 高速持久是其最大的特点</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Masonry/Masonry\" target=\"_blank\" rel=\"external\">Masonry</a></td>\n<td>一个轻量级的布局框架, 同时支持 iOS 和 Mac OS X, 语法优雅, 帮助开发者快速适配不同分辨率的 iOS 设备</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/facebook/Shimmer\" target=\"_blank\" rel=\"external\">Shimmer</a></td>\n<td>Facebook 推出的一款具有闪烁效果的第三方控件, 供它旗下一款名为 Paper 的应用使用, 安装使用整个过程都十分简单</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/TransitApp/SVProgressHUD\" target=\"_blank\" rel=\"external\">SVProgressHUD</a></td>\n<td>又一款轻量级的 iOS 第三方控件, 用于显示任务加载时的动画, 非常轻便, 容易使用</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/jigish/slate\" target=\"_blank\" rel=\"external\">Slate</a></td>\n<td>一款窗口管理应用程序, 但在两年前就已经停止更新了</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/johnezang/JSONKit\" target=\"_blank\" rel=\"external\">JSONKit</a></td>\n<td>主要用于解析 JSON, 适用于 iOS6 以下环境, 自从 iOS5 开始 Apple 官方给出了 NSJSONSerialization API, 自此大家都用官方的了</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/jverkoey/nimbus\" target=\"_blank\" rel=\"external\">Nimbus</a></td>\n<td>作者 Jeff 曾为 Facebook, Google 做过不少好东西, 也是 three20 的成员之一, three20 停更后, 他创造出这个框架来代替 three20, 文档齐全</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/CocoaLumberjack/CocoaLumberjack\" target=\"_blank\" rel=\"external\">CocoaLumberjack</a></td>\n<td>这是 Mac 和 iOS 的一款强大的日志框架, 配置简单, 多线程, 提供更高级的 log 功能, 可用于代替默认的 NSLog 语句</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/facebook/facebook-ios-sdk\" target=\"_blank\" rel=\"external\">Facebook SDK for iOS</a></td>\n<td>Facebook 官方的 iOS SDK, 方便开发者集成 Facebook 的一些功能到自己的 iOS APP 里面</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/facebook/AsyncDisplayKit\" target=\"_blank\" rel=\"external\">AsyncDisplayKit</a></td>\n<td>Facebook 开源的一款 iOS UI 框架, Paper 用的就是该框架, 另外框架还用到了 Facebook 早期开源 Pop 动画引擎</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/supermarin/Alcatraz\" target=\"_blank\" rel=\"external\">Alcatraz</a></td>\n<td>Alcatraz 是一款管理 Xcode 插件、模版以及颜色配置的工具, 可以集成到 Xcode 的图形界面中, 安装删除都是几条命令的事, 很方便, 支持自己开发插件并上传</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Inferis/ViewDeck\" target=\"_blank\" rel=\"external\">ViewDeck</a></td>\n<td>一款开源的 iOS 活动面板组件, 还原 Path 2.0 的侧滑效果, 作者因为时间关系在两年前停止对其更新</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/jessesquires/JSQMessagesViewController\" target=\"_blank\" rel=\"external\">JSQMessagesViewController</a></td>\n<td>优雅的 iOS 消息类库, 常用于聊天应用中, 可定制性高</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Flipboard/FLEX\" target=\"_blank\" rel=\"external\">FLEX</a></td>\n<td>这是 Flipboard 官方发布的一组专门用于 iOS 开发的应用内调试工具, 开发者无需将其连接到 LLDB/Xcode 或其他远程调试服务器,支持直接在 App 中运行</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/facebook/xctool\" target=\"_blank\" rel=\"external\">Xctool</a></td>\n<td>是 Facebook 开源的一个命令行工具，用来替代苹果的 XcodeBuild 工具, 极大的方便了 iOS 的构建和测试, 输出错误信息也比较友好, 受到许多 iOS 开发者的称赞, 经常与其搭配使用的还有 OCUnit, <a href=\"https://travis-ci.org/\" target=\"_blank\" rel=\"external\">Travis CI</a>, <a href=\"http://oclint.org/\" target=\"_blank\" rel=\"external\">OCLint</a> 等测试工具</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/OpenEmu/OpenEmu\" target=\"_blank\" rel=\"external\">OpenEmu</a></td>\n<td>超强的游戏模拟器, 做游戏开发必备, 官网做得也很不错</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/nicklockwood/iCarousel\" target=\"_blank\" rel=\"external\">iCarousel</a></td>\n<td>作者是英国 Charcoal Design 公司的创始人, 开源领域的贡献颇为卓著, 这个项目就是其中之一, 这是一款可以在 iOS 上实现旋转木马视图切换效果的第三方控件, 并提供多种切换效果</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/romaonthego/RESideMenu\" target=\"_blank\" rel=\"external\">RESideMenu</a></td>\n<td>作者 Roman Efimov 是雅虎的 iOS 工程师, 这个项目实现了 iOS 上的菜单侧滑效果, 创意来源于 Dribbble, 该项目支持 iOS8</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/kevinzhow/PNChart\" target=\"_blank\" rel=\"external\">PNChart</a></td>\n<td>作者周楷雯是 90 后, 秒视的创始人, 该项目是一个带动画效果的图表控件, 简约易用, 受到不少开发者喜爱</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/square/PonyDebugger\" target=\"_blank\" rel=\"external\">PonyDebugger</a></td>\n<td>由 Square 公司推出的一款优秀的 iOS 应用网络调试工具, 用户可以实时看到应用程序的网络请求, 也可以对 iOS 应用程序的核心数据栈进行远程调试</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/jverdi/JVFloatLabeledTextField\" target=\"_blank\" rel=\"external\">JVFloatLabeledTextField</a></td>\n<td>作者是 Thumb Labs 的联合创始人, JVFloatLabeledTextField 是 UITextField 的子类, 主要实现输入框标签浮动效果, 创作灵感来自 Dribbble, 已出现多个移植版本</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/CEWendel/SWTableViewCell\" target=\"_blank\" rel=\"external\">SWTableViewCell</a></td>\n<td>UITableViewCell 的子类, 实现了左右滑动显示信息视图并调出按钮</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/levey/AwesomeMenu\" target=\"_blank\" rel=\"external\">AwesomeMenu</a></td>\n<td>作者是一位中国人, 该项目主要是使用 CoreAnimation 还原了 Path menu 的动画效果</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/tonymillion/Reachability\" target=\"_blank\" rel=\"external\">Reachability</a></td>\n<td>Reachablity 是用于检测 iOS 设备网络环境的库</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/onevcat/VVDocumenter-Xcode\" target=\"_blank\" rel=\"external\">VVDocumenter-Xcode</a></td>\n<td>作者是王巍国内著名的 iOS 开发者, 人称喵神, 目前在日本 LINE 公司工作, 该项目帮助开发者轻松的生成注释文档, 节省了不少工作量, 赞</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/google/physical-web\" target=\"_blank\" rel=\"external\">The Physical Web</a></td>\n<td>由 Chrome 团队主导的一个项目, 意在用 URL 连接世界, 方便用户接受数据, 目前尚处在实验阶段</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/samuelclay/NewsBlur\" target=\"_blank\" rel=\"external\">NewsBlur</a></td>\n<td>作者独自一个人 Samuel Clay 做出来的一款名为 NewsBlur 的新闻阅读器, 很多人都称其为 Google Reader 的替代品, 这是它的源码</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/cocos2d/cocos2d-spritebuilder\" target=\"_blank\" rel=\"external\">Cocos2D-SpriteBuilder</a></td>\n<td>一个可用于在 iOS, Mac 和 Android 上制作 2D 游戏或其它图形/交互应用的框架, 之前的项目名称为 Cocos Swift, 目前该项目在 GitHub 上更新较为频繁</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/TTTAttributedLabel/TTTAttributedLabel\" target=\"_blank\" rel=\"external\">TTTAttributedLabel</a></td>\n<td>UILabel 的替代品, 使 iOS 上的 Label 功能更加丰富, 可支持链接植入等功能</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/robbiehanson/CocoaAsyncSocket\" target=\"_blank\" rel=\"external\">CocoaAsyncSocket</a></td>\n<td>一个功能强大、简单易用的异步 socket 通讯类库, 支持 TCP 和 UDP 协议, 可用于 Mac 和 iOS 设备上, 作者 Robbie Hanson 是 Deusty 的首席软件工程师</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/devinross/tapkulibrary\" target=\"_blank\" rel=\"external\">TapkuLibrary</a></td>\n<td>作者是 Devin Ross, 这是在 iOS 上一款功能强大的 UI 效果类库, 可以实现多种酷炫的效果, 目前仍在更新中</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/CanvasPod/Canvas\" target=\"_blank\" rel=\"external\">Canvas</a></td>\n<td>无需编码实现牛逼的动画效果的库, 连设计师都可以快速上手</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/square/SocketRocket\" target=\"_blank\" rel=\"external\">SocketRocket</a></td>\n<td>Square 公司开源的一个 WebSocket 客户端, 稳定并且易用, 做实时应用常会用到, 受广大开发者喜爱</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/ECSlidingViewController/ECSlidingViewController\" target=\"_blank\" rel=\"external\">ECSlidingViewController</a></td>\n<td>一个视图控制器容器, 将子视图处理成两层, 通过滑动来处理层的切换, 创作灵感来自 Facebook 和 Path的 App, 作者是 Cleveland 的员工</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/stig/json-framework\" target=\"_blank\" rel=\"external\">Json Framework</a></td>\n<td>用于解析 JSON 数据的一个框架, 但是在 iOS5 以上版本大多数人都选择使用 NSJSONSerialization 来解析 JSON, 该项目现在在 GitHub 上也几乎没怎么更新了</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/facebook/Tweaks\" target=\"_blank\" rel=\"external\">Tweaks</a></td>\n<td>Facebook 开源的一款工具, 旨在帮助 iOS 开发者更快的迭代应用, 方便用户动态的调整参数, 是的, Paper 这个项目也用到了</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/realm/realm-cocoa\" target=\"_blank\" rel=\"external\">realm-cocoa</a></td>\n<td>Realm-Cocoa 是 Realm 公司推出一款移动端数据库, 可以运行在手机、平板和可穿戴设备之上, 其目标是取代 CoreData 和 SQLite 数据库</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/zwaldowski/BlocksKit\" target=\"_blank\" rel=\"external\">BlocksKit</a></td>\n<td>一个开源的与 Cocoa 紧密集合的基础性框架</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/arashpayan/appirater\" target=\"_blank\" rel=\"external\">Appirater</a></td>\n<td>一款用于提醒用户给你的 App 打分的工具</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/kif-framework/KIF\" target=\"_blank\" rel=\"external\">KIF</a></td>\n<td>Square 出品的一个开源的用户界面测试框架, 极大的简化了 iOS 开发者的 UI 测试流程</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/slackhq/SlackTextViewController\" target=\"_blank\" rel=\"external\">SlackTextViewController</a></td>\n<td>Slack 推出的一款具有文字输入框高度自适应, 自动输入, 复制单元格内容等功能的解决方案</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/IFTTT/JazzHands\" target=\"_blank\" rel=\"external\">JazzHands</a></td>\n<td>IFTTT 开源的一个简单易用的关键帧基础动画框架, 可通过手势、scroll views, KVO, ReactiveCocoa 等方式来控制动画</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/BoltsFramework/Bolts-iOS\" target=\"_blank\" rel=\"external\">Bolts-iOS</a></td>\n<td>Bolts 是一个 Parse 和 Facebook 在内部使用的底层库, 方便移动开发</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/eczarny/spectacle\" target=\"_blank\" rel=\"external\">Spectacle</a></td>\n<td>一款易用的 OS X 窗口分屏操作快捷键工具, 这是其源代码</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/tombenner/nui\" target=\"_blank\" rel=\"external\">nui</a></td>\n<td>方便样式化 iOS 应用中的 UI 元素, 可在短时间内样式化整个应用, 类 CSS 原理</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Induction/Induction\" target=\"_blank\" rel=\"external\">Induction</a></td>\n<td>Induction 是一款用于理解数据关系的管理工具, 这是其程序代码</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/icanzilb/JSONModel\" target=\"_blank\" rel=\"external\">JSONModel</a></td>\n<td>一个能迅速解析服务器返回的 Json 数据的库, 方便数据的类型转换</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Cocoanetics/DTCoreText\" target=\"_blank\" rel=\"external\">DTCoreText</a></td>\n<td>一个开源的 iOS 富文本组件, 它可以解析 HTML 与 CSS 并最终用 CoreText 绘制出来, 通常用于在一些需要显示富文本的场景下代替低性能的 UIWebView</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/schneiderandre/popping\" target=\"_blank\" rel=\"external\">Popping</a></td>\n<td>基于 Facebook Pop 引擎的 iOS 动画库, 集合了很多动画效果</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/KrauseFx/TSMessages\" target=\"_blank\" rel=\"external\">TSMessages</a></td>\n<td>一个用来弹出显示警告和通知的轻量级库, 样式丰富, 简单易用</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/facebook/KVOController\" target=\"_blank\" rel=\"external\">KVOController</a></td>\n<td>一个简单安全的 KVO(Key-value Observing, 键-值 观察)工具, 提供简单方便、线程安全的API, Facebook 的开源项目之一</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/mwaterfall/MWPhotoBrowser\" target=\"_blank\" rel=\"external\">MWPhotoBrowser</a></td>\n<td>一款简单的 iOS 照片浏览控件</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/mutualmobile/MMDrawerController\" target=\"_blank\" rel=\"external\">MMDrawerController</a></td>\n<td>一个轻量级, 易于使用的侧边抽屉导航 iOS 控件</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/escoz/QuickDialog\" target=\"_blank\" rel=\"external\">QuickDialog</a></td>\n<td>用于快速创建复杂的 iOS 表单, 自定义了 UITableViewCell, TableView 的样式</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/samvermette/SVPullToRefresh\" target=\"_blank\" rel=\"external\">SVPullToRefresh</a></td>\n<td>一款只需一行代码便可集成上拉刷新和下拉加载的组件</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/nothingmagical/cheddar-ios\" target=\"_blank\" rel=\"external\">cheddar-ios</a></td>\n<td>Cheddar 是一款简单易用的日程管理软件, 这是其早期版本的开源代码, 该项目已停止维护</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/XVimProject/XVim\" target=\"_blank\" rel=\"external\">XVim</a></td>\n<td>一款在 Xcode 上实现了 Vim 功能的插件</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/enormego/EGOTableViewPullRefresh\" target=\"_blank\" rel=\"external\">EGOTableViewPullRefresh</a></td>\n<td>一款提供下拉刷新的控件, 最后更新时间是一年前</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/gimenete/iOS-boilerplate\" target=\"_blank\" rel=\"external\">iOS-boilerplate</a></td>\n<td>iOS 应用程序的基础模板, 使用该模板可以省掉许多项目初始编码的工作, 内置非常多丰富的功能, 现已经停止维护</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/gotosleep/JASidePanels\" target=\"_blank\" rel=\"external\">JASidePanels</a></td>\n<td>一个 UIViewController 容器, 灵感来自 Facebook 和 Path 2.0 应用的菜单, 实现了左右侧滑的操作</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/mattt/FormatterKit\" target=\"_blank\" rel=\"external\">FormatterKit</a></td>\n<td>收集了很多构思优秀的 NSFormatter 子类</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/erichoracek/MSDynamicsDrawerViewController\" target=\"_blank\" rel=\"external\">MSDynamicsDrawerViewController</a></td>\n<td>实现了具有动态弹性效果的抽屉式侧边导航栏, 效果丰富, 可定制性强</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/boctor/idev-recipes\" target=\"_blank\" rel=\"external\">idev-recipes</a></td>\n<td>iDevRecipes 博客的代码, 演示如何实现一些有趣的控件, 该项目在两年前(2013)停止了更新</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/robbiehanson/XMPPFramework\" target=\"_blank\" rel=\"external\">XMPPFramework</a></td>\n<td>一个基于 RFC-3920 实现, 支持多线程和线程保护, 同时通用于所有的 iOS 和 Mac OS 开发设备的通信框架.</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/MacGapProject/MacGap1\" target=\"_blank\" rel=\"external\">MacGap1</a></td>\n<td>一款可以将 HTML/CSS/JS 网络应用打包成原生 Mac App 的工具</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/nicklockwood/FXBlurView\" target=\"_blank\" rel=\"external\">FXBlurView</a></td>\n<td>iOS 模糊背景类库, 可以方便的根据底层显示的状态生成模糊效果</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/shu223/iOS7-Sampler\" target=\"_blank\" rel=\"external\">iOS7-Sampler</a></td>\n<td>整合演示了多个具有 iOS7 新特性的的项目, 提供了非常多的例子参考</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/mxcl/PromiseKit\" target=\"_blank\" rel=\"external\">PromiseKit</a></td>\n<td>提供强大的 iOS 开发异步功能, 是 Promises 的实现, 受到广大开发者的追捧</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/facebook/origami\" target=\"_blank\" rel=\"external\">Origami</a></td>\n<td>此为 Facebook 推出的 Quartz Composer 的一个开源插件, 由其设计团队花费了 9 个月打造而成, 目的是为方便设计师快速构建原型, 以零代码完成复杂动画的合成和测试, 堪称神器</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/fpillet/NSLogger\" target=\"_blank\" rel=\"external\">NSLogger</a></td>\n<td>一款强大的日志分析工具, 具有大窗口查看 Log, 自定义日志等级等功能</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/ksuther/KSImageNamed-Xcode\" target=\"_blank\" rel=\"external\">KSImageNamed-Xcode</a></td>\n<td>一款对 UIImage 的 imageNamed 提供自动补全功能的插件, 非常方便</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/smileyborg/PureLayout\" target=\"_blank\" rel=\"external\">PureLayout</a></td>\n<td>一个简单却强大的 AutoLayout API 库, 兼容了 Objective-C 和 Swift, 扩展了 UIView/NSView, NSArray, 和 NSLayoutConstraint</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/tomaz/appledoc\" target=\"_blank\" rel=\"external\">AppleDoc</a></td>\n<td>一款 Objective-C 文档生成工具, 生成的文档风格保持与 Apple 官方的一致, 极大的方便了 Xcode 识别自己写的 API 文档, 安装也是十分的简单</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/gnachman/iTerm2\" target=\"_blank\" rel=\"external\">iTerm2</a></td>\n<td>iTerm2 被不少程序员称赞为 Mac 下最好用的终端, 这是其源代码, 配合 oh-my-zsh 使用效果更佳</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/kiwi-bdd/Kiwi\" target=\"_blank\" rel=\"external\">Kiwi</a></td>\n<td>一个行为驱动开发测试框架, 适用于 iOS 平台, 旨在为开发者提供一个简单配置便可使用的 BDD 库</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/alloy/terminal-notifier\" target=\"_blank\" rel=\"external\">terminal-notifier</a></td>\n<td>一款命令行工具, 用来给 Mac OS X 用户发送通知</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/uranusjr/macdown\" target=\"_blank\" rel=\"external\">MacDown</a></td>\n<td>Mac OS X 下的一款开源的 Markdown 编辑器, 创意来自与 Mou, 使用 brew cask 即可完成安装</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/twitter/twui\" target=\"_blank\" rel=\"external\">TwUI</a></td>\n<td>Twitter 开源的一个支持硬件加速的 Mac 的 UI 框架, 最后一次的更新时间是在 3 年前(2012)</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/honcheng/PaperFold-for-iOS\" target=\"_blank\" rel=\"external\">PaperFold for iOS</a></td>\n<td>实现了类似折纸效果的视图切换, 可从不同方向进行切换, 该项目已经许久未更新</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/vfr/Reader\" target=\"_blank\" rel=\"external\">Reader</a></td>\n<td>一款开源的 iOS PDF 阅读器, 附带书签, 列纲要等功能</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/marcuswestin/WebViewJavascriptBridge\" target=\"_blank\" rel=\"external\">WebViewJavascriptBridge</a></td>\n<td>一个方便使用 Objective-C 与 JavaScript 进行通信的第三方库, 支持消息发送, 接收, 消息处理器的注册与调用以及设置消息处理的回调</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/shu223/iOS8-Sampler\" target=\"_blank\" rel=\"external\">iOS8-Sampler</a></td>\n<td>iOSX-Sampler 系列之一, 整合演示了多个具有 iOS8 新特性的的项目, 提供了非常多的例子参考</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/robbiehanson/CocoaHTTPServer\" target=\"_blank\" rel=\"external\">CocoaHTTPServer</a></td>\n<td>一个用于 Mac OS X 或 iOS 应用的轻量级、可嵌入的HTTP 服务器框架, 方便开发者在应用中嵌入一个 HTTP 服务器</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/rsms/kod\" target=\"_blank\" rel=\"external\">Kod</a></td>\n<td>Mac OS X 上一款专为程序员打造的编辑器, 这是其开源代码, 可惜的是作者在 2011 年停止了维护</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/michaeltyson/TPKeyboardAvoiding\" target=\"_blank\" rel=\"external\">TPKeyboardAvoiding</a></td>\n<td>下拉键盘在 iOS 移动文本字段的通用解决方案, 能够自动处理键盘弹出后出现遮挡到文本输入框的问题</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/MugunthKumar/MKNetworkKit\" target=\"_blank\" rel=\"external\">MKNetworkKit</a></td>\n<td>一个轻量级网络请求框架, 完全基于 ARC, 仅有两个类, 具有自主操作多个网络请求, 更加准确的显示网络活动指标等优点，设置简单, 高度灵活</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/AlanQuatermain/AQGridView\" target=\"_blank\" rel=\"external\">AQGridView</a></td>\n<td>一个命令行工具, 通过项目里的 <code>.xcdatamodel</code> 文件, 可以为每个 entity 生成两个类, 方便 CoreData 的使用</td>\n</tr>\n</tbody>\n</table>\n","excerpt":"","more":"<h2 id=\"GitHub-IOS-框架Top-100-简介\"><a href=\"#GitHub-IOS-框架Top-100-简介\" class=\"headerlink\" title=\"GitHub IOS 框架Top 100 简介\"></a>GitHub IOS 框架Top 100 简介</h2><font color=\"#ff0000\">本文原文链接<a href=\"https://github.com/Aufree/trip-to-iOS/blob/master/Top-100.md\">https://github.com/Aufree/trip-to-iOS/blob/master/Top-100.md</a></font>\n\n\n\n<p>主要对当前 GitHub 排名前 100 的项目做一个简单的简介, 方便初学者快速了解到当前 Objective-C 在 GitHub 的情况.</p>\n<blockquote>\n<ul>\n<li><a href=\"https://github.com/Freelander/Android_Data/blob/master/Android-Librarys-Top-100.md\">Android 版本</a>。</li>\n<li>本人著作的书籍<a href=\"https://laravel-china.org/laravel-tutorial/5.1\">《Laravel 入门教程》</a>已正式发布，有兴趣的朋友可点击 <a href=\"https://laravel-china.org/topics/3383\">此处</a> 作进一步了解。</li>\n</ul>\n</blockquote>\n<p><strong>若有任何疑问可通过微博 @李锦发 或我的微信（lijinfa894330982）联系我</strong></p>\n<table>\n<thead>\n<tr>\n<th>项目名称</th>\n<th>项目信息</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/AFNetworking/AFNetworking\">AFNetworking</a></td>\n<td>作者是 NSHipster 的博主, iOS 开发界的大神级人物, 毕业于卡内基·梅隆大学, 开源了许多牛逼的项目, 这个便是其中之一, AFNetworking 采用 NSURLConnection + NSOperation, 主要方便与服务端 API 进行数据交换, 操作简单, 功能强大, 现在许多人都用它取代 ASIHTTPRequest</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/BradLarson/GPUImage\">GPUImage</a></td>\n<td>一款强大的图片滤镜工具, 支持自定义滤镜, 可用来实时处理图片和视频流, 作者是 SonoPlot 公司的 CTO, 在很小的时候便开始接触编程, 他在 <a href=\"http://stackoverflow.com/users/19679/brad-larson\">SO</a> 上面的回答也有很多值得阅读, GPUImage 这个项目从 2012 年开始, 使用 OpenGL 图形程序接口编写, 性能非常好, 现在很多 iOS 程序员都用它来实现 iOS 的模糊效果</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/rs/SDWebImage\">SDWebImage</a></td>\n<td>作者 Olivier Poitrey 是 Dailymotion 的 CTO, 拥有多个不错的开源项目, 此项目常用于对从 Web 端接受到的图片进行缓存, 是 UIImageView 的扩展, 应用起来比较简单</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/RestKit/RestKit\">RestKit</a></td>\n<td>主要用于 iOS 上网络通信, 允许与 RESTful Web 服务交互, 常用于处理 API, 解析 JSON, 映射响应对象等操作, 简单易用, 方便你把所有精力都放在对数据的操作上</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/ReactiveCocoa/ReactiveCocoa\">ReactiveCocoa</a></td>\n<td>由 GitHub 工程师们开发的一个应用于 iOS 和 OS X 开发的函数响应式编程新框架, Matt 称其为 “An open source project that exemplifies this brave new era for Objective-C”, 也有人说它是 Cocoa 的未来, 具体可看唐巧写的这篇<a href=\"http://www.devtang.com/blog/2014/02/11/reactivecocoa-introduction\">文章</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/facebookarchive/three20\">three20</a></td>\n<td>由 Facebook iOS 客户端衍生出的一款 iPhone 框架, 内置许多丰富的功能, 有丰富的界面, 对底层的操作便捷, 为开发者省下了很多时间, 但现在已经停止了更新, 一个 <a href=\"https://github.com/facebookarchive/three20/pull/832?utm_source=iOS+Dev+Weekly&amp;utm_campaign=46a7deb647-iOS_Dev_Weekly_Issue_100&amp;utm_medium=email&amp;utm_term=0_7bda94b7ca-46a7deb647-299428269\">PR</a> 把代码删得干干净净, 不要好奇去点开 Files changed, 我点开后该页面直接卡死, three20 当中的一位作者创建了 <a href=\"https://github.com/jverkoey/nimbus\">Nimbus</a>, 算是 three20 的一个替代品</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/jdg/MBProgressHUD\">MBProgressHUD</a></td>\n<td>作者 Matej Bukovinski 是一位全栈工程师, UI/UX 设计师, 此项目是一款提示框第三方库, 帮助开发者快速应用到项目中)</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/magicalpanda/MagicalRecord\">MagicalRecord</a></td>\n<td>作者是 Coursera 的 iOS 工程师, 该项目创作灵感来自于 Ruby on Rails 的 Active Record, 主要为方便操作 CoreData 而生, 帮助清除 CoreData 引用的代码, 协助方便 CoreData 的工作</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/ccgus/fmdb\">FMDB</a></td>\n<td>一个对 SQLite 进行封装的库, 使用起来方便, 简单</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Mantle/Mantle\">Mantle</a></td>\n<td>作者是 GitHub 的员工, 文档写的很清楚: Mantle makes it easy to write a simple model layer for your Cocoa or Cocoa Touch application, 主要用来将 JSON 数据模型化为 Model 对象, 唱吧在前段时间也改用 Mantle 了.</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Grouper/FlatUIKit\">FlatUIKit</a></td>\n<td>收集了很多扁平化 UI 的 iOS 组件, 方便使用</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/pokeb/asi-http-request\">ASIHTTPRequest</a></td>\n<td>一个轻量级的 iOS 网络通信类库, 基于 CFNetwork 框架开发, 但现在已经停止更新, 多数开发者改用 AFNetworking 替代)</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/path/FastImageCache\">FastImageCache</a></td>\n<td>Path 公司出品的 iOS 库, 作者 Mallory Paine 是苹果前员工, 此类库适用于在滚动时快速显示图像, 高速持久是其最大的特点</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Masonry/Masonry\">Masonry</a></td>\n<td>一个轻量级的布局框架, 同时支持 iOS 和 Mac OS X, 语法优雅, 帮助开发者快速适配不同分辨率的 iOS 设备</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/facebook/Shimmer\">Shimmer</a></td>\n<td>Facebook 推出的一款具有闪烁效果的第三方控件, 供它旗下一款名为 Paper 的应用使用, 安装使用整个过程都十分简单</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/TransitApp/SVProgressHUD\">SVProgressHUD</a></td>\n<td>又一款轻量级的 iOS 第三方控件, 用于显示任务加载时的动画, 非常轻便, 容易使用</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/jigish/slate\">Slate</a></td>\n<td>一款窗口管理应用程序, 但在两年前就已经停止更新了</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/johnezang/JSONKit\">JSONKit</a></td>\n<td>主要用于解析 JSON, 适用于 iOS6 以下环境, 自从 iOS5 开始 Apple 官方给出了 NSJSONSerialization API, 自此大家都用官方的了</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/jverkoey/nimbus\">Nimbus</a></td>\n<td>作者 Jeff 曾为 Facebook, Google 做过不少好东西, 也是 three20 的成员之一, three20 停更后, 他创造出这个框架来代替 three20, 文档齐全</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/CocoaLumberjack/CocoaLumberjack\">CocoaLumberjack</a></td>\n<td>这是 Mac 和 iOS 的一款强大的日志框架, 配置简单, 多线程, 提供更高级的 log 功能, 可用于代替默认的 NSLog 语句</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/facebook/facebook-ios-sdk\">Facebook SDK for iOS</a></td>\n<td>Facebook 官方的 iOS SDK, 方便开发者集成 Facebook 的一些功能到自己的 iOS APP 里面</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/facebook/AsyncDisplayKit\">AsyncDisplayKit</a></td>\n<td>Facebook 开源的一款 iOS UI 框架, Paper 用的就是该框架, 另外框架还用到了 Facebook 早期开源 Pop 动画引擎</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/supermarin/Alcatraz\">Alcatraz</a></td>\n<td>Alcatraz 是一款管理 Xcode 插件、模版以及颜色配置的工具, 可以集成到 Xcode 的图形界面中, 安装删除都是几条命令的事, 很方便, 支持自己开发插件并上传</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Inferis/ViewDeck\">ViewDeck</a></td>\n<td>一款开源的 iOS 活动面板组件, 还原 Path 2.0 的侧滑效果, 作者因为时间关系在两年前停止对其更新</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/jessesquires/JSQMessagesViewController\">JSQMessagesViewController</a></td>\n<td>优雅的 iOS 消息类库, 常用于聊天应用中, 可定制性高</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Flipboard/FLEX\">FLEX</a></td>\n<td>这是 Flipboard 官方发布的一组专门用于 iOS 开发的应用内调试工具, 开发者无需将其连接到 LLDB/Xcode 或其他远程调试服务器,支持直接在 App 中运行</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/facebook/xctool\">Xctool</a></td>\n<td>是 Facebook 开源的一个命令行工具，用来替代苹果的 XcodeBuild 工具, 极大的方便了 iOS 的构建和测试, 输出错误信息也比较友好, 受到许多 iOS 开发者的称赞, 经常与其搭配使用的还有 OCUnit, <a href=\"https://travis-ci.org/\">Travis CI</a>, <a href=\"http://oclint.org/\">OCLint</a> 等测试工具</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/OpenEmu/OpenEmu\">OpenEmu</a></td>\n<td>超强的游戏模拟器, 做游戏开发必备, 官网做得也很不错</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/nicklockwood/iCarousel\">iCarousel</a></td>\n<td>作者是英国 Charcoal Design 公司的创始人, 开源领域的贡献颇为卓著, 这个项目就是其中之一, 这是一款可以在 iOS 上实现旋转木马视图切换效果的第三方控件, 并提供多种切换效果</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/romaonthego/RESideMenu\">RESideMenu</a></td>\n<td>作者 Roman Efimov 是雅虎的 iOS 工程师, 这个项目实现了 iOS 上的菜单侧滑效果, 创意来源于 Dribbble, 该项目支持 iOS8</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/kevinzhow/PNChart\">PNChart</a></td>\n<td>作者周楷雯是 90 后, 秒视的创始人, 该项目是一个带动画效果的图表控件, 简约易用, 受到不少开发者喜爱</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/square/PonyDebugger\">PonyDebugger</a></td>\n<td>由 Square 公司推出的一款优秀的 iOS 应用网络调试工具, 用户可以实时看到应用程序的网络请求, 也可以对 iOS 应用程序的核心数据栈进行远程调试</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/jverdi/JVFloatLabeledTextField\">JVFloatLabeledTextField</a></td>\n<td>作者是 Thumb Labs 的联合创始人, JVFloatLabeledTextField 是 UITextField 的子类, 主要实现输入框标签浮动效果, 创作灵感来自 Dribbble, 已出现多个移植版本</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/CEWendel/SWTableViewCell\">SWTableViewCell</a></td>\n<td>UITableViewCell 的子类, 实现了左右滑动显示信息视图并调出按钮</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/levey/AwesomeMenu\">AwesomeMenu</a></td>\n<td>作者是一位中国人, 该项目主要是使用 CoreAnimation 还原了 Path menu 的动画效果</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/tonymillion/Reachability\">Reachability</a></td>\n<td>Reachablity 是用于检测 iOS 设备网络环境的库</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/onevcat/VVDocumenter-Xcode\">VVDocumenter-Xcode</a></td>\n<td>作者是王巍国内著名的 iOS 开发者, 人称喵神, 目前在日本 LINE 公司工作, 该项目帮助开发者轻松的生成注释文档, 节省了不少工作量, 赞</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/google/physical-web\">The Physical Web</a></td>\n<td>由 Chrome 团队主导的一个项目, 意在用 URL 连接世界, 方便用户接受数据, 目前尚处在实验阶段</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/samuelclay/NewsBlur\">NewsBlur</a></td>\n<td>作者独自一个人 Samuel Clay 做出来的一款名为 NewsBlur 的新闻阅读器, 很多人都称其为 Google Reader 的替代品, 这是它的源码</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/cocos2d/cocos2d-spritebuilder\">Cocos2D-SpriteBuilder</a></td>\n<td>一个可用于在 iOS, Mac 和 Android 上制作 2D 游戏或其它图形/交互应用的框架, 之前的项目名称为 Cocos Swift, 目前该项目在 GitHub 上更新较为频繁</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/TTTAttributedLabel/TTTAttributedLabel\">TTTAttributedLabel</a></td>\n<td>UILabel 的替代品, 使 iOS 上的 Label 功能更加丰富, 可支持链接植入等功能</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/robbiehanson/CocoaAsyncSocket\">CocoaAsyncSocket</a></td>\n<td>一个功能强大、简单易用的异步 socket 通讯类库, 支持 TCP 和 UDP 协议, 可用于 Mac 和 iOS 设备上, 作者 Robbie Hanson 是 Deusty 的首席软件工程师</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/devinross/tapkulibrary\">TapkuLibrary</a></td>\n<td>作者是 Devin Ross, 这是在 iOS 上一款功能强大的 UI 效果类库, 可以实现多种酷炫的效果, 目前仍在更新中</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/CanvasPod/Canvas\">Canvas</a></td>\n<td>无需编码实现牛逼的动画效果的库, 连设计师都可以快速上手</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/square/SocketRocket\">SocketRocket</a></td>\n<td>Square 公司开源的一个 WebSocket 客户端, 稳定并且易用, 做实时应用常会用到, 受广大开发者喜爱</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/ECSlidingViewController/ECSlidingViewController\">ECSlidingViewController</a></td>\n<td>一个视图控制器容器, 将子视图处理成两层, 通过滑动来处理层的切换, 创作灵感来自 Facebook 和 Path的 App, 作者是 Cleveland 的员工</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/stig/json-framework\">Json Framework</a></td>\n<td>用于解析 JSON 数据的一个框架, 但是在 iOS5 以上版本大多数人都选择使用 NSJSONSerialization 来解析 JSON, 该项目现在在 GitHub 上也几乎没怎么更新了</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/facebook/Tweaks\">Tweaks</a></td>\n<td>Facebook 开源的一款工具, 旨在帮助 iOS 开发者更快的迭代应用, 方便用户动态的调整参数, 是的, Paper 这个项目也用到了</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/realm/realm-cocoa\">realm-cocoa</a></td>\n<td>Realm-Cocoa 是 Realm 公司推出一款移动端数据库, 可以运行在手机、平板和可穿戴设备之上, 其目标是取代 CoreData 和 SQLite 数据库</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/zwaldowski/BlocksKit\">BlocksKit</a></td>\n<td>一个开源的与 Cocoa 紧密集合的基础性框架</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/arashpayan/appirater\">Appirater</a></td>\n<td>一款用于提醒用户给你的 App 打分的工具</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/kif-framework/KIF\">KIF</a></td>\n<td>Square 出品的一个开源的用户界面测试框架, 极大的简化了 iOS 开发者的 UI 测试流程</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/slackhq/SlackTextViewController\">SlackTextViewController</a></td>\n<td>Slack 推出的一款具有文字输入框高度自适应, 自动输入, 复制单元格内容等功能的解决方案</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/IFTTT/JazzHands\">JazzHands</a></td>\n<td>IFTTT 开源的一个简单易用的关键帧基础动画框架, 可通过手势、scroll views, KVO, ReactiveCocoa 等方式来控制动画</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/BoltsFramework/Bolts-iOS\">Bolts-iOS</a></td>\n<td>Bolts 是一个 Parse 和 Facebook 在内部使用的底层库, 方便移动开发</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/eczarny/spectacle\">Spectacle</a></td>\n<td>一款易用的 OS X 窗口分屏操作快捷键工具, 这是其源代码</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/tombenner/nui\">nui</a></td>\n<td>方便样式化 iOS 应用中的 UI 元素, 可在短时间内样式化整个应用, 类 CSS 原理</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Induction/Induction\">Induction</a></td>\n<td>Induction 是一款用于理解数据关系的管理工具, 这是其程序代码</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/icanzilb/JSONModel\">JSONModel</a></td>\n<td>一个能迅速解析服务器返回的 Json 数据的库, 方便数据的类型转换</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Cocoanetics/DTCoreText\">DTCoreText</a></td>\n<td>一个开源的 iOS 富文本组件, 它可以解析 HTML 与 CSS 并最终用 CoreText 绘制出来, 通常用于在一些需要显示富文本的场景下代替低性能的 UIWebView</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/schneiderandre/popping\">Popping</a></td>\n<td>基于 Facebook Pop 引擎的 iOS 动画库, 集合了很多动画效果</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/KrauseFx/TSMessages\">TSMessages</a></td>\n<td>一个用来弹出显示警告和通知的轻量级库, 样式丰富, 简单易用</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/facebook/KVOController\">KVOController</a></td>\n<td>一个简单安全的 KVO(Key-value Observing, 键-值 观察)工具, 提供简单方便、线程安全的API, Facebook 的开源项目之一</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/mwaterfall/MWPhotoBrowser\">MWPhotoBrowser</a></td>\n<td>一款简单的 iOS 照片浏览控件</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/mutualmobile/MMDrawerController\">MMDrawerController</a></td>\n<td>一个轻量级, 易于使用的侧边抽屉导航 iOS 控件</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/escoz/QuickDialog\">QuickDialog</a></td>\n<td>用于快速创建复杂的 iOS 表单, 自定义了 UITableViewCell, TableView 的样式</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/samvermette/SVPullToRefresh\">SVPullToRefresh</a></td>\n<td>一款只需一行代码便可集成上拉刷新和下拉加载的组件</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/nothingmagical/cheddar-ios\">cheddar-ios</a></td>\n<td>Cheddar 是一款简单易用的日程管理软件, 这是其早期版本的开源代码, 该项目已停止维护</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/XVimProject/XVim\">XVim</a></td>\n<td>一款在 Xcode 上实现了 Vim 功能的插件</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/enormego/EGOTableViewPullRefresh\">EGOTableViewPullRefresh</a></td>\n<td>一款提供下拉刷新的控件, 最后更新时间是一年前</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/gimenete/iOS-boilerplate\">iOS-boilerplate</a></td>\n<td>iOS 应用程序的基础模板, 使用该模板可以省掉许多项目初始编码的工作, 内置非常多丰富的功能, 现已经停止维护</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/gotosleep/JASidePanels\">JASidePanels</a></td>\n<td>一个 UIViewController 容器, 灵感来自 Facebook 和 Path 2.0 应用的菜单, 实现了左右侧滑的操作</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/mattt/FormatterKit\">FormatterKit</a></td>\n<td>收集了很多构思优秀的 NSFormatter 子类</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/erichoracek/MSDynamicsDrawerViewController\">MSDynamicsDrawerViewController</a></td>\n<td>实现了具有动态弹性效果的抽屉式侧边导航栏, 效果丰富, 可定制性强</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/boctor/idev-recipes\">idev-recipes</a></td>\n<td>iDevRecipes 博客的代码, 演示如何实现一些有趣的控件, 该项目在两年前(2013)停止了更新</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/robbiehanson/XMPPFramework\">XMPPFramework</a></td>\n<td>一个基于 RFC-3920 实现, 支持多线程和线程保护, 同时通用于所有的 iOS 和 Mac OS 开发设备的通信框架.</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/MacGapProject/MacGap1\">MacGap1</a></td>\n<td>一款可以将 HTML/CSS/JS 网络应用打包成原生 Mac App 的工具</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/nicklockwood/FXBlurView\">FXBlurView</a></td>\n<td>iOS 模糊背景类库, 可以方便的根据底层显示的状态生成模糊效果</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/shu223/iOS7-Sampler\">iOS7-Sampler</a></td>\n<td>整合演示了多个具有 iOS7 新特性的的项目, 提供了非常多的例子参考</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/mxcl/PromiseKit\">PromiseKit</a></td>\n<td>提供强大的 iOS 开发异步功能, 是 Promises 的实现, 受到广大开发者的追捧</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/facebook/origami\">Origami</a></td>\n<td>此为 Facebook 推出的 Quartz Composer 的一个开源插件, 由其设计团队花费了 9 个月打造而成, 目的是为方便设计师快速构建原型, 以零代码完成复杂动画的合成和测试, 堪称神器</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/fpillet/NSLogger\">NSLogger</a></td>\n<td>一款强大的日志分析工具, 具有大窗口查看 Log, 自定义日志等级等功能</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/ksuther/KSImageNamed-Xcode\">KSImageNamed-Xcode</a></td>\n<td>一款对 UIImage 的 imageNamed 提供自动补全功能的插件, 非常方便</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/smileyborg/PureLayout\">PureLayout</a></td>\n<td>一个简单却强大的 AutoLayout API 库, 兼容了 Objective-C 和 Swift, 扩展了 UIView/NSView, NSArray, 和 NSLayoutConstraint</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/tomaz/appledoc\">AppleDoc</a></td>\n<td>一款 Objective-C 文档生成工具, 生成的文档风格保持与 Apple 官方的一致, 极大的方便了 Xcode 识别自己写的 API 文档, 安装也是十分的简单</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/gnachman/iTerm2\">iTerm2</a></td>\n<td>iTerm2 被不少程序员称赞为 Mac 下最好用的终端, 这是其源代码, 配合 oh-my-zsh 使用效果更佳</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/kiwi-bdd/Kiwi\">Kiwi</a></td>\n<td>一个行为驱动开发测试框架, 适用于 iOS 平台, 旨在为开发者提供一个简单配置便可使用的 BDD 库</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/alloy/terminal-notifier\">terminal-notifier</a></td>\n<td>一款命令行工具, 用来给 Mac OS X 用户发送通知</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/uranusjr/macdown\">MacDown</a></td>\n<td>Mac OS X 下的一款开源的 Markdown 编辑器, 创意来自与 Mou, 使用 brew cask 即可完成安装</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/twitter/twui\">TwUI</a></td>\n<td>Twitter 开源的一个支持硬件加速的 Mac 的 UI 框架, 最后一次的更新时间是在 3 年前(2012)</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/honcheng/PaperFold-for-iOS\">PaperFold for iOS</a></td>\n<td>实现了类似折纸效果的视图切换, 可从不同方向进行切换, 该项目已经许久未更新</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/vfr/Reader\">Reader</a></td>\n<td>一款开源的 iOS PDF 阅读器, 附带书签, 列纲要等功能</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/marcuswestin/WebViewJavascriptBridge\">WebViewJavascriptBridge</a></td>\n<td>一个方便使用 Objective-C 与 JavaScript 进行通信的第三方库, 支持消息发送, 接收, 消息处理器的注册与调用以及设置消息处理的回调</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/shu223/iOS8-Sampler\">iOS8-Sampler</a></td>\n<td>iOSX-Sampler 系列之一, 整合演示了多个具有 iOS8 新特性的的项目, 提供了非常多的例子参考</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/robbiehanson/CocoaHTTPServer\">CocoaHTTPServer</a></td>\n<td>一个用于 Mac OS X 或 iOS 应用的轻量级、可嵌入的HTTP 服务器框架, 方便开发者在应用中嵌入一个 HTTP 服务器</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/rsms/kod\">Kod</a></td>\n<td>Mac OS X 上一款专为程序员打造的编辑器, 这是其开源代码, 可惜的是作者在 2011 年停止了维护</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/michaeltyson/TPKeyboardAvoiding\">TPKeyboardAvoiding</a></td>\n<td>下拉键盘在 iOS 移动文本字段的通用解决方案, 能够自动处理键盘弹出后出现遮挡到文本输入框的问题</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/MugunthKumar/MKNetworkKit\">MKNetworkKit</a></td>\n<td>一个轻量级网络请求框架, 完全基于 ARC, 仅有两个类, 具有自主操作多个网络请求, 更加准确的显示网络活动指标等优点，设置简单, 高度灵活</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/AlanQuatermain/AQGridView\">AQGridView</a></td>\n<td>一个命令行工具, 通过项目里的 <code>.xcdatamodel</code> 文件, 可以为每个 entity 生成两个类, 方便 CoreData 的使用</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"Git学习笔记","date":"2016-11-18T12:24:00.000Z","author":"冰路梦","_content":"# Git学习笔记\n\n<!-- TOC -->\n\n- [Git学习笔记](#git学习笔记)\n    - [1、Git简介](#1git简介)\n        - [Git与SVN区别](#git与svn区别)\n    - [2、Git安装配置](#2git安装配置)\n        - [1)、Git配置](#1git配置)\n        - [2)、用户信息](#2用户信息)\n        - [3)、文本编辑器](#3文本编辑器)\n        - [4)、差异对比工具](#4差异对比工具)\n        - [5)、查看配置信息](#5查看配置信息)\n    - [2、Git 工作流程](#2git-工作流程)\n    - [3、Git工作区、暂存区和版本库](#3git工作区暂存区和版本库)\n        - [基本概念：](#基本概念)\n    - [5、Git创建仓库](#5git创建仓库)\n    - [6、Git基本操作](#6git基本操作)\n    - [7、Git分支管理](#7git分支管理)\n    - [8、Git查看提交历史](#8git查看提交历史)\n    - [9、Git标签](#9git标签)\n    - [10、Git远程仓库](#10git远程仓库)\n    - [11、Git服务器搭建](#11git服务器搭建)\n\n<!-- /TOC -->\n\n## 1、Git简介\n\nGit是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。\n\nGit 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。\n\nGit 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。\n\n### Git与SVN区别\n\nGIT不仅仅是个版本控制系统，它也是个内容管理系统(CMS),工作管理系统等。\n\n如果你是一个具有使用SVN背景的人，你需要做一定的思想转换，来适应GIT提供的一些概念和特征。\n\nGit 与 SVN 区别点：\n\n- 1、GIT是分布式的，SVN不是：这是GIT和其它非分布式的版本控制系统，例如SVN，CVS等，最核心的区别。\n- 2、GIT把内容按元数据方式存储，而SVN是按文件：所有的资源控制系统都是把文件的元信息隐藏在一个类似.svn,.cvs等的文件夹里。\n- 3、GIT分支和SVN的分支不同：分支在SVN中一点不特别，就是版本库中的另外的一个目录。\n- 4、GIT没有一个全局的版本号，而SVN有：目前为止这是跟SVN相比GIT缺少的最大的一个特征。\n- 5、GIT的内容完整性要优于SVN：GIT的内容存储使用的是SHA-1哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。\n\n## 2、Git安装配置\n\n### 1)、Git配置\n\nGit 提供了`git config`的工具，用于配置读取工作环境变量\n\n- /etc/gitconfig文件：系统级别的配置文件，使用`git config --system`操作此文件\n- ~/.gitconfig文件：当前用户的配置文件，使用`git config --global`操作此文件\n- .git/config文件：当前Git目录中的配置文件，仅对当前项目有效。\n\n### 2)、用户信息\n\n配置user.name和user.email\n\n```shell\ngit config --global user.name \"name\"\ngit config --global user.email \"name@name.com\"\n```\n\n可以不用`--global`参数，则只配置当前git项目。\n\n### 3)、文本编辑器\n\n可以设置git默认的文本编辑器\n\n```shell\ngit config --global core.editor vim # 使用vim作为指定编辑器\n```\n\n### 4)、差异对比工具\n\n可以指定对比工具\n\n```sh\ngit config --global merge.tool vimdiff\n```\n\n### 5)、查看配置信息\n\n```sh\ngit config --list\n```\n\n\n\n## 2、Git 工作流程\n\ngit一般工作流程：\n\n- 克隆 Git 资源作为工作目录。\n- 在克隆的资源上添加或修改文件。\n- 如果其他人修改了，你可以更新资源。\n- 在提交前查看修改。\n- 提交修改。\n- 在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。\n\n下图展示了 Git 的工作流程：\n\n![git](http://www.runoob.com/wp-content/uploads/2015/02/git-process.png)\n\n## 3、Git工作区、暂存区和版本库\n\n### 基本概念：\n\n- **工作区：**就是你在电脑里能看到的目录。\n- **暂存区：**英文叫stage, 或index。一般存放在\"git目录\"下的index文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。\n- **版本库：**工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。\n\n下面这个图展示了工作区、版本库中的暂存区和版本库之间的关系：\n\n![work](http://www.runoob.com/wp-content/uploads/2015/02/1352126739_7909.jpg)\n\n图中左侧为工作区，右侧为版本库。在版本库中标记为 \"index\" 的区域是暂存区（stage, index），标记为 \"master\" 的是 master 分支所代表的目录树。\n\n图中我们可以看出此时 \"HEAD\" 实际是指向 master 分支的一个\"游标\"。所以图示的命令中出现 HEAD 的地方可以用 master 来替换。\n\n图中的 objects 标识的区域为 Git 的对象库，实际位于 \".git/objects\" 目录下，里面包含了创建的各种对象及内容。\n\n当对工作区修改（或新增）的文件执行 \"git add\" 命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的ID被记录在暂存区的文件索引中。\n\n当执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。\n\n当执行 \"git reset HEAD\" 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。\n\n当执行 \"git rm --cached <file>\" 命令时，会直接从暂存区删除文件，工作区则不做出改变。\n\n当执行 \"git checkout .\" 或者 \"git checkout -- <file>\" 命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动。\n\n当执行 \"git checkout HEAD .\" 或者 \"git checkout HEAD <file>\" 命令时，会用 HEAD 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。\n\n## 5、Git创建仓库\n\n- git init\n\n`git init`初始化git仓库，如此才能执行其他git操作。会生成一个`.git`目录。\n\n```sh\ngit init <repo_name>\n```\n\n- git clone\n\n  从git仓库拷贝项目\n\n  ```sh\n  git clone <repo> <directory>\n  ```\n\n  其中`repo`为git仓库，`dir`为本地目录\n\n## 6、Git基本操作\n\n- git init\n- git clone\n- git add\n- git status\n- git diff\n- git commit\n- git reset HEAD\n- git rm\n- git mv\n\n## 7、Git分支管理\n\n- git branch\n- git checkout\n- git merge\n\n## 8、Git查看提交历史\n\n- git log\n\n## 9、Git标签\n\n- git tag\n\n## 10、Git远程仓库\n\n- git remote add [shortname]\\[url]\n- git remote\n- git fetch\n- git pull\n- git push [alias]\\[branch]\n- git remote rm [alias]\n\n## 11、Git服务器搭建\n\n以CentOS为例\n\n- 安装Git\n\n  ```sh\n  $ yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel perl-devel\n  $ yum install git\n  ```\n\n  创建一个git用户组和用户，用于运行git服务\n\n  ```sh\n  $ groupadd git\n  $ adduser git -g git\n  ```\n\n- 创建证书登录\n\n  ```sh\n  $ cd /home/git/\n  $ mkdir .ssh\n  $ chmod 700 .ssh\n  $ touch .ssh/authorized_keys\n  $ chmod 600 .ssh/authorized_keys\n  ```\n\n- 初始化Git仓库\n\n  ```sh\n  $ cd /home\n  $ mkdir gitrepo\n  $ chown git:git gitrepo/\n  $ cd gitrepo\n\n  $ git init --bare w3cschoolcc.git\n  Initialized empty Git repository in /home/gitrepo/w3cschoolcc.git/\n  ```\n\n- 克隆仓库\n\n  ```sh\n  $ git clone <url>\n  Cloning into 'w3cschoolcc'...\n  warning: You appear to have cloned an empty repository.\n  Checking connectivity... done.\n  ```\n\n设置`git`用户不能shell登录，则编辑`/etc/passwd`文件，\n\n```sh\ngit:x:503:503::/home/git:/bin/bash\n#将后面的/bin/bash改为/sbin/nologin\n```\n\n","source":"_posts/Git学习笔记.md","raw":"---\ntitle: \"Git学习笔记\"\ndate: 2016-11-18 20:24\nauthor: 冰路梦\ntag:\n    - Linux\n    - Git\ncategories:\n    - Linux\n---\n# Git学习笔记\n\n<!-- TOC -->\n\n- [Git学习笔记](#git学习笔记)\n    - [1、Git简介](#1git简介)\n        - [Git与SVN区别](#git与svn区别)\n    - [2、Git安装配置](#2git安装配置)\n        - [1)、Git配置](#1git配置)\n        - [2)、用户信息](#2用户信息)\n        - [3)、文本编辑器](#3文本编辑器)\n        - [4)、差异对比工具](#4差异对比工具)\n        - [5)、查看配置信息](#5查看配置信息)\n    - [2、Git 工作流程](#2git-工作流程)\n    - [3、Git工作区、暂存区和版本库](#3git工作区暂存区和版本库)\n        - [基本概念：](#基本概念)\n    - [5、Git创建仓库](#5git创建仓库)\n    - [6、Git基本操作](#6git基本操作)\n    - [7、Git分支管理](#7git分支管理)\n    - [8、Git查看提交历史](#8git查看提交历史)\n    - [9、Git标签](#9git标签)\n    - [10、Git远程仓库](#10git远程仓库)\n    - [11、Git服务器搭建](#11git服务器搭建)\n\n<!-- /TOC -->\n\n## 1、Git简介\n\nGit是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。\n\nGit 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。\n\nGit 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。\n\n### Git与SVN区别\n\nGIT不仅仅是个版本控制系统，它也是个内容管理系统(CMS),工作管理系统等。\n\n如果你是一个具有使用SVN背景的人，你需要做一定的思想转换，来适应GIT提供的一些概念和特征。\n\nGit 与 SVN 区别点：\n\n- 1、GIT是分布式的，SVN不是：这是GIT和其它非分布式的版本控制系统，例如SVN，CVS等，最核心的区别。\n- 2、GIT把内容按元数据方式存储，而SVN是按文件：所有的资源控制系统都是把文件的元信息隐藏在一个类似.svn,.cvs等的文件夹里。\n- 3、GIT分支和SVN的分支不同：分支在SVN中一点不特别，就是版本库中的另外的一个目录。\n- 4、GIT没有一个全局的版本号，而SVN有：目前为止这是跟SVN相比GIT缺少的最大的一个特征。\n- 5、GIT的内容完整性要优于SVN：GIT的内容存储使用的是SHA-1哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。\n\n## 2、Git安装配置\n\n### 1)、Git配置\n\nGit 提供了`git config`的工具，用于配置读取工作环境变量\n\n- /etc/gitconfig文件：系统级别的配置文件，使用`git config --system`操作此文件\n- ~/.gitconfig文件：当前用户的配置文件，使用`git config --global`操作此文件\n- .git/config文件：当前Git目录中的配置文件，仅对当前项目有效。\n\n### 2)、用户信息\n\n配置user.name和user.email\n\n```shell\ngit config --global user.name \"name\"\ngit config --global user.email \"name@name.com\"\n```\n\n可以不用`--global`参数，则只配置当前git项目。\n\n### 3)、文本编辑器\n\n可以设置git默认的文本编辑器\n\n```shell\ngit config --global core.editor vim # 使用vim作为指定编辑器\n```\n\n### 4)、差异对比工具\n\n可以指定对比工具\n\n```sh\ngit config --global merge.tool vimdiff\n```\n\n### 5)、查看配置信息\n\n```sh\ngit config --list\n```\n\n\n\n## 2、Git 工作流程\n\ngit一般工作流程：\n\n- 克隆 Git 资源作为工作目录。\n- 在克隆的资源上添加或修改文件。\n- 如果其他人修改了，你可以更新资源。\n- 在提交前查看修改。\n- 提交修改。\n- 在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。\n\n下图展示了 Git 的工作流程：\n\n![git](http://www.runoob.com/wp-content/uploads/2015/02/git-process.png)\n\n## 3、Git工作区、暂存区和版本库\n\n### 基本概念：\n\n- **工作区：**就是你在电脑里能看到的目录。\n- **暂存区：**英文叫stage, 或index。一般存放在\"git目录\"下的index文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。\n- **版本库：**工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。\n\n下面这个图展示了工作区、版本库中的暂存区和版本库之间的关系：\n\n![work](http://www.runoob.com/wp-content/uploads/2015/02/1352126739_7909.jpg)\n\n图中左侧为工作区，右侧为版本库。在版本库中标记为 \"index\" 的区域是暂存区（stage, index），标记为 \"master\" 的是 master 分支所代表的目录树。\n\n图中我们可以看出此时 \"HEAD\" 实际是指向 master 分支的一个\"游标\"。所以图示的命令中出现 HEAD 的地方可以用 master 来替换。\n\n图中的 objects 标识的区域为 Git 的对象库，实际位于 \".git/objects\" 目录下，里面包含了创建的各种对象及内容。\n\n当对工作区修改（或新增）的文件执行 \"git add\" 命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的ID被记录在暂存区的文件索引中。\n\n当执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。\n\n当执行 \"git reset HEAD\" 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。\n\n当执行 \"git rm --cached <file>\" 命令时，会直接从暂存区删除文件，工作区则不做出改变。\n\n当执行 \"git checkout .\" 或者 \"git checkout -- <file>\" 命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动。\n\n当执行 \"git checkout HEAD .\" 或者 \"git checkout HEAD <file>\" 命令时，会用 HEAD 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。\n\n## 5、Git创建仓库\n\n- git init\n\n`git init`初始化git仓库，如此才能执行其他git操作。会生成一个`.git`目录。\n\n```sh\ngit init <repo_name>\n```\n\n- git clone\n\n  从git仓库拷贝项目\n\n  ```sh\n  git clone <repo> <directory>\n  ```\n\n  其中`repo`为git仓库，`dir`为本地目录\n\n## 6、Git基本操作\n\n- git init\n- git clone\n- git add\n- git status\n- git diff\n- git commit\n- git reset HEAD\n- git rm\n- git mv\n\n## 7、Git分支管理\n\n- git branch\n- git checkout\n- git merge\n\n## 8、Git查看提交历史\n\n- git log\n\n## 9、Git标签\n\n- git tag\n\n## 10、Git远程仓库\n\n- git remote add [shortname]\\[url]\n- git remote\n- git fetch\n- git pull\n- git push [alias]\\[branch]\n- git remote rm [alias]\n\n## 11、Git服务器搭建\n\n以CentOS为例\n\n- 安装Git\n\n  ```sh\n  $ yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel perl-devel\n  $ yum install git\n  ```\n\n  创建一个git用户组和用户，用于运行git服务\n\n  ```sh\n  $ groupadd git\n  $ adduser git -g git\n  ```\n\n- 创建证书登录\n\n  ```sh\n  $ cd /home/git/\n  $ mkdir .ssh\n  $ chmod 700 .ssh\n  $ touch .ssh/authorized_keys\n  $ chmod 600 .ssh/authorized_keys\n  ```\n\n- 初始化Git仓库\n\n  ```sh\n  $ cd /home\n  $ mkdir gitrepo\n  $ chown git:git gitrepo/\n  $ cd gitrepo\n\n  $ git init --bare w3cschoolcc.git\n  Initialized empty Git repository in /home/gitrepo/w3cschoolcc.git/\n  ```\n\n- 克隆仓库\n\n  ```sh\n  $ git clone <url>\n  Cloning into 'w3cschoolcc'...\n  warning: You appear to have cloned an empty repository.\n  Checking connectivity... done.\n  ```\n\n设置`git`用户不能shell登录，则编辑`/etc/passwd`文件，\n\n```sh\ngit:x:503:503::/home/git:/bin/bash\n#将后面的/bin/bash改为/sbin/nologin\n```\n\n","slug":"Git学习笔记","published":1,"updated":"2017-03-31T02:55:53.287Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ndxcd0001f88owt8k83hak","content":"<h1 id=\"Git学习笔记\"><a href=\"#Git学习笔记\" class=\"headerlink\" title=\"Git学习笔记\"></a>Git学习笔记</h1><!-- TOC -->\n<ul>\n<li><a href=\"#git学习笔记\">Git学习笔记</a><ul>\n<li><a href=\"#1git简介\">1、Git简介</a><ul>\n<li><a href=\"#git与svn区别\">Git与SVN区别</a></li>\n</ul>\n</li>\n<li><a href=\"#2git安装配置\">2、Git安装配置</a><ul>\n<li><a href=\"#1git配置\">1)、Git配置</a></li>\n<li><a href=\"#2用户信息\">2)、用户信息</a></li>\n<li><a href=\"#3文本编辑器\">3)、文本编辑器</a></li>\n<li><a href=\"#4差异对比工具\">4)、差异对比工具</a></li>\n<li><a href=\"#5查看配置信息\">5)、查看配置信息</a></li>\n</ul>\n</li>\n<li><a href=\"#2git-工作流程\">2、Git 工作流程</a></li>\n<li><a href=\"#3git工作区暂存区和版本库\">3、Git工作区、暂存区和版本库</a><ul>\n<li><a href=\"#基本概念\">基本概念：</a></li>\n</ul>\n</li>\n<li><a href=\"#5git创建仓库\">5、Git创建仓库</a></li>\n<li><a href=\"#6git基本操作\">6、Git基本操作</a></li>\n<li><a href=\"#7git分支管理\">7、Git分支管理</a></li>\n<li><a href=\"#8git查看提交历史\">8、Git查看提交历史</a></li>\n<li><a href=\"#9git标签\">9、Git标签</a></li>\n<li><a href=\"#10git远程仓库\">10、Git远程仓库</a></li>\n<li><a href=\"#11git服务器搭建\">11、Git服务器搭建</a></li>\n</ul>\n</li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"1、Git简介\"><a href=\"#1、Git简介\" class=\"headerlink\" title=\"1、Git简介\"></a>1、Git简介</h2><p>Git是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</p>\n<p>Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</p>\n<p>Git 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。</p>\n<h3 id=\"Git与SVN区别\"><a href=\"#Git与SVN区别\" class=\"headerlink\" title=\"Git与SVN区别\"></a>Git与SVN区别</h3><p>GIT不仅仅是个版本控制系统，它也是个内容管理系统(CMS),工作管理系统等。</p>\n<p>如果你是一个具有使用SVN背景的人，你需要做一定的思想转换，来适应GIT提供的一些概念和特征。</p>\n<p>Git 与 SVN 区别点：</p>\n<ul>\n<li>1、GIT是分布式的，SVN不是：这是GIT和其它非分布式的版本控制系统，例如SVN，CVS等，最核心的区别。</li>\n<li>2、GIT把内容按元数据方式存储，而SVN是按文件：所有的资源控制系统都是把文件的元信息隐藏在一个类似.svn,.cvs等的文件夹里。</li>\n<li>3、GIT分支和SVN的分支不同：分支在SVN中一点不特别，就是版本库中的另外的一个目录。</li>\n<li>4、GIT没有一个全局的版本号，而SVN有：目前为止这是跟SVN相比GIT缺少的最大的一个特征。</li>\n<li>5、GIT的内容完整性要优于SVN：GIT的内容存储使用的是SHA-1哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。</li>\n</ul>\n<h2 id=\"2、Git安装配置\"><a href=\"#2、Git安装配置\" class=\"headerlink\" title=\"2、Git安装配置\"></a>2、Git安装配置</h2><h3 id=\"1-、Git配置\"><a href=\"#1-、Git配置\" class=\"headerlink\" title=\"1)、Git配置\"></a>1)、Git配置</h3><p>Git 提供了<code>git config</code>的工具，用于配置读取工作环境变量</p>\n<ul>\n<li>/etc/gitconfig文件：系统级别的配置文件，使用<code>git config --system</code>操作此文件</li>\n<li>~/.gitconfig文件：当前用户的配置文件，使用<code>git config --global</code>操作此文件</li>\n<li>.git/config文件：当前Git目录中的配置文件，仅对当前项目有效。</li>\n</ul>\n<h3 id=\"2-、用户信息\"><a href=\"#2-、用户信息\" class=\"headerlink\" title=\"2)、用户信息\"></a>2)、用户信息</h3><p>配置user.name和user.email</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global user.name &quot;name&quot;</div><div class=\"line\">git config --global user.email &quot;name@name.com&quot;</div></pre></td></tr></table></figure>\n<p>可以不用<code>--global</code>参数，则只配置当前git项目。</p>\n<h3 id=\"3-、文本编辑器\"><a href=\"#3-、文本编辑器\" class=\"headerlink\" title=\"3)、文本编辑器\"></a>3)、文本编辑器</h3><p>可以设置git默认的文本编辑器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global core.editor vim # 使用vim作为指定编辑器</div></pre></td></tr></table></figure>\n<h3 id=\"4-、差异对比工具\"><a href=\"#4-、差异对比工具\" class=\"headerlink\" title=\"4)、差异对比工具\"></a>4)、差异对比工具</h3><p>可以指定对比工具</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global merge.tool vimdiff</div></pre></td></tr></table></figure>\n<h3 id=\"5-、查看配置信息\"><a href=\"#5-、查看配置信息\" class=\"headerlink\" title=\"5)、查看配置信息\"></a>5)、查看配置信息</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --list</div></pre></td></tr></table></figure>\n<h2 id=\"2、Git-工作流程\"><a href=\"#2、Git-工作流程\" class=\"headerlink\" title=\"2、Git 工作流程\"></a>2、Git 工作流程</h2><p>git一般工作流程：</p>\n<ul>\n<li>克隆 Git 资源作为工作目录。</li>\n<li>在克隆的资源上添加或修改文件。</li>\n<li>如果其他人修改了，你可以更新资源。</li>\n<li>在提交前查看修改。</li>\n<li>提交修改。</li>\n<li>在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。</li>\n</ul>\n<p>下图展示了 Git 的工作流程：</p>\n<p><img src=\"http://www.runoob.com/wp-content/uploads/2015/02/git-process.png\" alt=\"git\"></p>\n<h2 id=\"3、Git工作区、暂存区和版本库\"><a href=\"#3、Git工作区、暂存区和版本库\" class=\"headerlink\" title=\"3、Git工作区、暂存区和版本库\"></a>3、Git工作区、暂存区和版本库</h2><h3 id=\"基本概念：\"><a href=\"#基本概念：\" class=\"headerlink\" title=\"基本概念：\"></a>基本概念：</h3><ul>\n<li><strong>工作区：</strong>就是你在电脑里能看到的目录。</li>\n<li><strong>暂存区：</strong>英文叫stage, 或index。一般存放在”git目录”下的index文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。</li>\n<li><strong>版本库：</strong>工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。</li>\n</ul>\n<p>下面这个图展示了工作区、版本库中的暂存区和版本库之间的关系：</p>\n<p><img src=\"http://www.runoob.com/wp-content/uploads/2015/02/1352126739_7909.jpg\" alt=\"work\"></p>\n<p>图中左侧为工作区，右侧为版本库。在版本库中标记为 “index” 的区域是暂存区（stage, index），标记为 “master” 的是 master 分支所代表的目录树。</p>\n<p>图中我们可以看出此时 “HEAD” 实际是指向 master 分支的一个”游标”。所以图示的命令中出现 HEAD 的地方可以用 master 来替换。</p>\n<p>图中的 objects 标识的区域为 Git 的对象库，实际位于 “.git/objects” 目录下，里面包含了创建的各种对象及内容。</p>\n<p>当对工作区修改（或新增）的文件执行 “git add” 命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的ID被记录在暂存区的文件索引中。</p>\n<p>当执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。</p>\n<p>当执行 “git reset HEAD” 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。</p>\n<p>当执行 “git rm –cached <file>“ 命令时，会直接从暂存区删除文件，工作区则不做出改变。</file></p>\n<p>当执行 “git checkout .” 或者 “git checkout – <file>“ 命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动。</file></p>\n<p>当执行 “git checkout HEAD .” 或者 “git checkout HEAD <file>“ 命令时，会用 HEAD 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。</file></p>\n<h2 id=\"5、Git创建仓库\"><a href=\"#5、Git创建仓库\" class=\"headerlink\" title=\"5、Git创建仓库\"></a>5、Git创建仓库</h2><ul>\n<li>git init</li>\n</ul>\n<p><code>git init</code>初始化git仓库，如此才能执行其他git操作。会生成一个<code>.git</code>目录。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git init &lt;repo_name&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>git clone</p>\n<p>从git仓库拷贝项目</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> &lt;repo&gt; &lt;directory&gt;</div></pre></td></tr></table></figure>\n<p>其中<code>repo</code>为git仓库，<code>dir</code>为本地目录</p>\n</li>\n</ul>\n<h2 id=\"6、Git基本操作\"><a href=\"#6、Git基本操作\" class=\"headerlink\" title=\"6、Git基本操作\"></a>6、Git基本操作</h2><ul>\n<li>git init</li>\n<li>git clone</li>\n<li>git add</li>\n<li>git status</li>\n<li>git diff</li>\n<li>git commit</li>\n<li>git reset HEAD</li>\n<li>git rm</li>\n<li>git mv</li>\n</ul>\n<h2 id=\"7、Git分支管理\"><a href=\"#7、Git分支管理\" class=\"headerlink\" title=\"7、Git分支管理\"></a>7、Git分支管理</h2><ul>\n<li>git branch</li>\n<li>git checkout</li>\n<li>git merge</li>\n</ul>\n<h2 id=\"8、Git查看提交历史\"><a href=\"#8、Git查看提交历史\" class=\"headerlink\" title=\"8、Git查看提交历史\"></a>8、Git查看提交历史</h2><ul>\n<li>git log</li>\n</ul>\n<h2 id=\"9、Git标签\"><a href=\"#9、Git标签\" class=\"headerlink\" title=\"9、Git标签\"></a>9、Git标签</h2><ul>\n<li>git tag</li>\n</ul>\n<h2 id=\"10、Git远程仓库\"><a href=\"#10、Git远程仓库\" class=\"headerlink\" title=\"10、Git远程仓库\"></a>10、Git远程仓库</h2><ul>\n<li>git remote add [shortname][url]</li>\n<li>git remote</li>\n<li>git fetch</li>\n<li>git pull</li>\n<li>git push [alias][branch]</li>\n<li>git remote rm [alias]</li>\n</ul>\n<h2 id=\"11、Git服务器搭建\"><a href=\"#11、Git服务器搭建\" class=\"headerlink\" title=\"11、Git服务器搭建\"></a>11、Git服务器搭建</h2><p>以CentOS为例</p>\n<ul>\n<li><p>安装Git</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel perl-devel</div><div class=\"line\">$ yum install git</div></pre></td></tr></table></figure>\n<p>创建一个git用户组和用户，用于运行git服务</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ groupadd git</div><div class=\"line\">$ adduser git -g git</div></pre></td></tr></table></figure>\n</li>\n<li><p>创建证书登录</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> /home/git/</div><div class=\"line\">$ mkdir .ssh</div><div class=\"line\">$ chmod 700 .ssh</div><div class=\"line\">$ touch .ssh/authorized_keys</div><div class=\"line\">$ chmod 600 .ssh/authorized_keys</div></pre></td></tr></table></figure>\n</li>\n<li><p>初始化Git仓库</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> /home</div><div class=\"line\">$ mkdir gitrepo</div><div class=\"line\">$ chown git:git gitrepo/</div><div class=\"line\">$ <span class=\"built_in\">cd</span> gitrepo</div><div class=\"line\"></div><div class=\"line\">$ git init --bare w3cschoolcc.git</div><div class=\"line\">Initialized empty Git repository <span class=\"keyword\">in</span> /home/gitrepo/w3cschoolcc.git/</div></pre></td></tr></table></figure>\n</li>\n<li><p>克隆仓库</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> &lt;url&gt;</div><div class=\"line\">Cloning into <span class=\"string\">'w3cschoolcc'</span>...</div><div class=\"line\">warning: You appear to have cloned an empty repository.</div><div class=\"line\">Checking connectivity... done.</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>设置<code>git</code>用户不能shell登录，则编辑<code>/etc/passwd</code>文件，</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git:x:503:503::/home/git:/bin/bash</div><div class=\"line\"><span class=\"comment\">#将后面的/bin/bash改为/sbin/nologin</span></div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"Git学习笔记\"><a href=\"#Git学习笔记\" class=\"headerlink\" title=\"Git学习笔记\"></a>Git学习笔记</h1><!-- TOC -->\n<ul>\n<li><a href=\"#git学习笔记\">Git学习笔记</a><ul>\n<li><a href=\"#1git简介\">1、Git简介</a><ul>\n<li><a href=\"#git与svn区别\">Git与SVN区别</a></li>\n</ul>\n</li>\n<li><a href=\"#2git安装配置\">2、Git安装配置</a><ul>\n<li><a href=\"#1git配置\">1)、Git配置</a></li>\n<li><a href=\"#2用户信息\">2)、用户信息</a></li>\n<li><a href=\"#3文本编辑器\">3)、文本编辑器</a></li>\n<li><a href=\"#4差异对比工具\">4)、差异对比工具</a></li>\n<li><a href=\"#5查看配置信息\">5)、查看配置信息</a></li>\n</ul>\n</li>\n<li><a href=\"#2git-工作流程\">2、Git 工作流程</a></li>\n<li><a href=\"#3git工作区暂存区和版本库\">3、Git工作区、暂存区和版本库</a><ul>\n<li><a href=\"#基本概念\">基本概念：</a></li>\n</ul>\n</li>\n<li><a href=\"#5git创建仓库\">5、Git创建仓库</a></li>\n<li><a href=\"#6git基本操作\">6、Git基本操作</a></li>\n<li><a href=\"#7git分支管理\">7、Git分支管理</a></li>\n<li><a href=\"#8git查看提交历史\">8、Git查看提交历史</a></li>\n<li><a href=\"#9git标签\">9、Git标签</a></li>\n<li><a href=\"#10git远程仓库\">10、Git远程仓库</a></li>\n<li><a href=\"#11git服务器搭建\">11、Git服务器搭建</a></li>\n</ul>\n</li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"1、Git简介\"><a href=\"#1、Git简介\" class=\"headerlink\" title=\"1、Git简介\"></a>1、Git简介</h2><p>Git是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</p>\n<p>Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</p>\n<p>Git 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。</p>\n<h3 id=\"Git与SVN区别\"><a href=\"#Git与SVN区别\" class=\"headerlink\" title=\"Git与SVN区别\"></a>Git与SVN区别</h3><p>GIT不仅仅是个版本控制系统，它也是个内容管理系统(CMS),工作管理系统等。</p>\n<p>如果你是一个具有使用SVN背景的人，你需要做一定的思想转换，来适应GIT提供的一些概念和特征。</p>\n<p>Git 与 SVN 区别点：</p>\n<ul>\n<li>1、GIT是分布式的，SVN不是：这是GIT和其它非分布式的版本控制系统，例如SVN，CVS等，最核心的区别。</li>\n<li>2、GIT把内容按元数据方式存储，而SVN是按文件：所有的资源控制系统都是把文件的元信息隐藏在一个类似.svn,.cvs等的文件夹里。</li>\n<li>3、GIT分支和SVN的分支不同：分支在SVN中一点不特别，就是版本库中的另外的一个目录。</li>\n<li>4、GIT没有一个全局的版本号，而SVN有：目前为止这是跟SVN相比GIT缺少的最大的一个特征。</li>\n<li>5、GIT的内容完整性要优于SVN：GIT的内容存储使用的是SHA-1哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。</li>\n</ul>\n<h2 id=\"2、Git安装配置\"><a href=\"#2、Git安装配置\" class=\"headerlink\" title=\"2、Git安装配置\"></a>2、Git安装配置</h2><h3 id=\"1-、Git配置\"><a href=\"#1-、Git配置\" class=\"headerlink\" title=\"1)、Git配置\"></a>1)、Git配置</h3><p>Git 提供了<code>git config</code>的工具，用于配置读取工作环境变量</p>\n<ul>\n<li>/etc/gitconfig文件：系统级别的配置文件，使用<code>git config --system</code>操作此文件</li>\n<li>~/.gitconfig文件：当前用户的配置文件，使用<code>git config --global</code>操作此文件</li>\n<li>.git/config文件：当前Git目录中的配置文件，仅对当前项目有效。</li>\n</ul>\n<h3 id=\"2-、用户信息\"><a href=\"#2-、用户信息\" class=\"headerlink\" title=\"2)、用户信息\"></a>2)、用户信息</h3><p>配置user.name和user.email</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global user.name &quot;name&quot;</div><div class=\"line\">git config --global user.email &quot;name@name.com&quot;</div></pre></td></tr></table></figure>\n<p>可以不用<code>--global</code>参数，则只配置当前git项目。</p>\n<h3 id=\"3-、文本编辑器\"><a href=\"#3-、文本编辑器\" class=\"headerlink\" title=\"3)、文本编辑器\"></a>3)、文本编辑器</h3><p>可以设置git默认的文本编辑器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global core.editor vim # 使用vim作为指定编辑器</div></pre></td></tr></table></figure>\n<h3 id=\"4-、差异对比工具\"><a href=\"#4-、差异对比工具\" class=\"headerlink\" title=\"4)、差异对比工具\"></a>4)、差异对比工具</h3><p>可以指定对比工具</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global merge.tool vimdiff</div></pre></td></tr></table></figure>\n<h3 id=\"5-、查看配置信息\"><a href=\"#5-、查看配置信息\" class=\"headerlink\" title=\"5)、查看配置信息\"></a>5)、查看配置信息</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --list</div></pre></td></tr></table></figure>\n<h2 id=\"2、Git-工作流程\"><a href=\"#2、Git-工作流程\" class=\"headerlink\" title=\"2、Git 工作流程\"></a>2、Git 工作流程</h2><p>git一般工作流程：</p>\n<ul>\n<li>克隆 Git 资源作为工作目录。</li>\n<li>在克隆的资源上添加或修改文件。</li>\n<li>如果其他人修改了，你可以更新资源。</li>\n<li>在提交前查看修改。</li>\n<li>提交修改。</li>\n<li>在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。</li>\n</ul>\n<p>下图展示了 Git 的工作流程：</p>\n<p><img src=\"http://www.runoob.com/wp-content/uploads/2015/02/git-process.png\" alt=\"git\"></p>\n<h2 id=\"3、Git工作区、暂存区和版本库\"><a href=\"#3、Git工作区、暂存区和版本库\" class=\"headerlink\" title=\"3、Git工作区、暂存区和版本库\"></a>3、Git工作区、暂存区和版本库</h2><h3 id=\"基本概念：\"><a href=\"#基本概念：\" class=\"headerlink\" title=\"基本概念：\"></a>基本概念：</h3><ul>\n<li><strong>工作区：</strong>就是你在电脑里能看到的目录。</li>\n<li><strong>暂存区：</strong>英文叫stage, 或index。一般存放在”git目录”下的index文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。</li>\n<li><strong>版本库：</strong>工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。</li>\n</ul>\n<p>下面这个图展示了工作区、版本库中的暂存区和版本库之间的关系：</p>\n<p><img src=\"http://www.runoob.com/wp-content/uploads/2015/02/1352126739_7909.jpg\" alt=\"work\"></p>\n<p>图中左侧为工作区，右侧为版本库。在版本库中标记为 “index” 的区域是暂存区（stage, index），标记为 “master” 的是 master 分支所代表的目录树。</p>\n<p>图中我们可以看出此时 “HEAD” 实际是指向 master 分支的一个”游标”。所以图示的命令中出现 HEAD 的地方可以用 master 来替换。</p>\n<p>图中的 objects 标识的区域为 Git 的对象库，实际位于 “.git/objects” 目录下，里面包含了创建的各种对象及内容。</p>\n<p>当对工作区修改（或新增）的文件执行 “git add” 命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的ID被记录在暂存区的文件索引中。</p>\n<p>当执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。</p>\n<p>当执行 “git reset HEAD” 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。</p>\n<p>当执行 “git rm –cached <file>“ 命令时，会直接从暂存区删除文件，工作区则不做出改变。</file></p>\n<p>当执行 “git checkout .” 或者 “git checkout – <file>“ 命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动。</file></p>\n<p>当执行 “git checkout HEAD .” 或者 “git checkout HEAD <file>“ 命令时，会用 HEAD 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。</file></p>\n<h2 id=\"5、Git创建仓库\"><a href=\"#5、Git创建仓库\" class=\"headerlink\" title=\"5、Git创建仓库\"></a>5、Git创建仓库</h2><ul>\n<li>git init</li>\n</ul>\n<p><code>git init</code>初始化git仓库，如此才能执行其他git操作。会生成一个<code>.git</code>目录。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git init &lt;repo_name&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>git clone</p>\n<p>从git仓库拷贝项目</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> &lt;repo&gt; &lt;directory&gt;</div></pre></td></tr></table></figure>\n<p>其中<code>repo</code>为git仓库，<code>dir</code>为本地目录</p>\n</li>\n</ul>\n<h2 id=\"6、Git基本操作\"><a href=\"#6、Git基本操作\" class=\"headerlink\" title=\"6、Git基本操作\"></a>6、Git基本操作</h2><ul>\n<li>git init</li>\n<li>git clone</li>\n<li>git add</li>\n<li>git status</li>\n<li>git diff</li>\n<li>git commit</li>\n<li>git reset HEAD</li>\n<li>git rm</li>\n<li>git mv</li>\n</ul>\n<h2 id=\"7、Git分支管理\"><a href=\"#7、Git分支管理\" class=\"headerlink\" title=\"7、Git分支管理\"></a>7、Git分支管理</h2><ul>\n<li>git branch</li>\n<li>git checkout</li>\n<li>git merge</li>\n</ul>\n<h2 id=\"8、Git查看提交历史\"><a href=\"#8、Git查看提交历史\" class=\"headerlink\" title=\"8、Git查看提交历史\"></a>8、Git查看提交历史</h2><ul>\n<li>git log</li>\n</ul>\n<h2 id=\"9、Git标签\"><a href=\"#9、Git标签\" class=\"headerlink\" title=\"9、Git标签\"></a>9、Git标签</h2><ul>\n<li>git tag</li>\n</ul>\n<h2 id=\"10、Git远程仓库\"><a href=\"#10、Git远程仓库\" class=\"headerlink\" title=\"10、Git远程仓库\"></a>10、Git远程仓库</h2><ul>\n<li>git remote add [shortname][url]</li>\n<li>git remote</li>\n<li>git fetch</li>\n<li>git pull</li>\n<li>git push [alias][branch]</li>\n<li>git remote rm [alias]</li>\n</ul>\n<h2 id=\"11、Git服务器搭建\"><a href=\"#11、Git服务器搭建\" class=\"headerlink\" title=\"11、Git服务器搭建\"></a>11、Git服务器搭建</h2><p>以CentOS为例</p>\n<ul>\n<li><p>安装Git</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel perl-devel</div><div class=\"line\">$ yum install git</div></pre></td></tr></table></figure>\n<p>创建一个git用户组和用户，用于运行git服务</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ groupadd git</div><div class=\"line\">$ adduser git -g git</div></pre></td></tr></table></figure>\n</li>\n<li><p>创建证书登录</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> /home/git/</div><div class=\"line\">$ mkdir .ssh</div><div class=\"line\">$ chmod 700 .ssh</div><div class=\"line\">$ touch .ssh/authorized_keys</div><div class=\"line\">$ chmod 600 .ssh/authorized_keys</div></pre></td></tr></table></figure>\n</li>\n<li><p>初始化Git仓库</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> /home</div><div class=\"line\">$ mkdir gitrepo</div><div class=\"line\">$ chown git:git gitrepo/</div><div class=\"line\">$ <span class=\"built_in\">cd</span> gitrepo</div><div class=\"line\"></div><div class=\"line\">$ git init --bare w3cschoolcc.git</div><div class=\"line\">Initialized empty Git repository <span class=\"keyword\">in</span> /home/gitrepo/w3cschoolcc.git/</div></pre></td></tr></table></figure>\n</li>\n<li><p>克隆仓库</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> &lt;url&gt;</div><div class=\"line\">Cloning into <span class=\"string\">'w3cschoolcc'</span>...</div><div class=\"line\">warning: You appear to have cloned an empty repository.</div><div class=\"line\">Checking connectivity... done.</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>设置<code>git</code>用户不能shell登录，则编辑<code>/etc/passwd</code>文件，</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git:x:503:503::/home/git:/bin/bash</div><div class=\"line\"><span class=\"comment\">#将后面的/bin/bash改为/sbin/nologin</span></div></pre></td></tr></table></figure>\n"},{"title":"Hexo使用说明笔记","date":"2017-03-21T08:26:00.000Z","_content":"\n# Hexo使用说明笔记\n\n本文简要介绍如何使用Hexo在github上搭建一个个人博客网站，关于Hexo的详细使用说明，还请参考[官方文档](https://hexo.io/zh-cn/docs/index.html)\n\n## 1、文件简介\n\n在Hexo生成的目录下，大致有一下几个文件夹/文件：\n\n- public 生成的网站文件，发布的站点文件。\n\n- source资源文件夹，用于存放内容。\n\n- tag 标签文件夹。\n\n- archive归档文件夹。\n\n- category分类文件夹。\n\n- downloads/code include code文件夹。\n\n- :lang i18n_dir 国际化文件夹。\n\n- _config.yml 配置文件\n\n  - 配置说明\n\n  ```yaml\n  # Hexo Configuration\n  ## Docs: https://hexo.io/docs/configuration.html\n  ## Source: https://github.com/hexojs/hexo/\n\n  # Site，参数说明：title 网站标题；subtitle 网站副标题；description 网站描述，在搜索引擎中可被搜索的信息，可以配置描述关键字；author 作者姓名；language 网站语言；timezone 网站时区；\n  # 默认使用电脑本地时区，可以用时区表指定，如America/New_York，UTC等。\n  title: Binglumeng's Blog\n  subtitle: Just do what you want !\n  author: 冰路梦\n  language: \n  timezone: \n\n  # URL\n  ## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\n  # 参数说明：url 网址；root 网址根目录，要是网站存放在子目录，这里就要配置到子目录路径，如url是https://binglumeng.github.io ,而https://binglumeng.github.io/blog才是文件路径，那么root就要设置为/blog/；\n  # permalink 文章永久链接格式，:year/:month/:day/:title/ ;permalink_defaults 永久链接中各部分的默认值。\n  url: https://binglumeng.github.io/\n  # root就是网址路径path\n  root: /binglumeng/\n  permalink: :year/:month/:day/:title/\n  permalink_defaults:\n\n  # Directory 目录参数说明：source_dir 资源文件夹，用于存放内容，默认值source；public_dir 公共文件夹，存放生成的站点文件，默认值public；\n  # tag_dir 标签文件夹 默认值tag；archive_dir 归档文件夹 默认值archives;category_dir 分类文件夹，默认值categories;\n  # code_dir include code 文件夹，默认值 downloads/code ;i18n_dir 国际化文件夹 ，默认值 :lang ；skip_render 跳过指定的渲染，可以使用glob表达式来匹配路径。\n\n  source_dir: source\n  public_dir: public\n  tag_dir: tags\n  archive_dir: i_dont_wanna_use_default_archives\n  category_dir: categories\n  code_dir: downloads/code\n  i18n_dir: :lang\n  skip_render:\n\n  # Writing 文章相关参数：new_post_name 新文章文件名 ，默认值:title.md ;\n  # default_category 预设布局，默认值 post ;\n  # auto_spacing 中英文之间加入空格，默认 false；\n  # titlecase 把标题转换为title case 默认值 false；\n  # external_link 新标签中打开链接 ，默认值 true；\n  # filename_case 把文件名转换为(1)小写或(2)大写。默认值0；\n  # render_drafts 显示草稿，默认值false；\n  # post_asset_folder 启动Asset文件夹，默认值false；\n  # relative_link 把链接改为与根目录的相对路径位置，默认值false；\n  # future 显示未来的文章，默认值true；\n  # highlight 代码块设置\n  new_post_name: :title.md # File name of new posts\n  default_layout: post \n  titlecase: false # Transform title into titlecase\n  external_link: true # Open external links in new tab\n  filename_case: 0\n  render_drafts: false\n  post_asset_folder: true\n  relative_link: false\n  future: true\n  highlight:\n    enable: true\n    line_number: true\n    auto_detect: true\n    tab_replace:\n\n  # Category & Tag 分类和标签 ，default_categorty 默认分类，默认值 uncategorized;\n  # category_map 分类别名；tag_map 标签别名\n  default_category: uncategorized\n  category_map:\n  tag_map:\n\n  # Date / Time format 日期时间格式 date_format 日期格式 ，默认是YYYY-MM-DD ；time_format 时间格式 ，H:mm:ss\n  ## Hexo uses Moment.js to parse and display date\n  ## You can customize the date format as defined in\n  ## http://momentjs.com/docs/#/displaying/format/\n  date_format: YYYY-MM-DD\n  time_format: HH:mm:ss\n\n  # Pagination 分页 per_page 每页显示的文章数，0表示关闭分页。默认值10；\n  # pagination_dir 分页目录，默认值page\n  ## Set per_page to 0 to disable pagination\n  per_page: 10\n  pagination_dir: page\n\n  # Extensions 扩展，theme 当前主题的名称 ，false表示禁止使用主题。\n  ## Plugins: https://hexo.io/plugins/\n  ## Themes: https://hexo.io/themes/\n  theme: binglumeng\n\n  # Deployment 部署的设置\n  ## Docs: https://hexo.io/docs/deployment.html\n  deploy:\n    type: git\n    repo: https://github.com/\n    branch: master\n  ```\n\n- package.json 包信息\n\n# 指令说明\n\n使用hexo首先要安装node.js和git。本文演示为windows系统下，linux和mac请参照官方文档。\n\n- init\n\n```shell\nhexo init [folder] # 在cmd命令下，cd到你所需要建立博客的文件夹，执行此命令，其中folder为可选指令，若不写，则默认当前目录。\n```\n\n- new\n\n```sh\nhexo new [layout] <title> # layout为可选项，默认使用_config.yml中的default_layout。新建文章的指令\n```\n\n- generate\n\n```sh\nhexo generate # 生成静态文件，\n# 可选参数：\n-d ,--deploy 文件生成后立即部署网站\n-w , --watch 件事文件变动\n```\n\n该指令可以简写为`hexo g`\n\n- publish\n\n```sh\nhexo publish [layout] <filename> # 发布草稿\n```\n\n- server\n\n```sh\nhexo server # 启动server，就可以在本地预览效果。\n# 参数，默认网址http://localhost:4000/\n-p , --port 重设端口\n-s , --static 只是用静态文件\n-l , --log 启动日志记录，使用覆盖记录格式\n-i , --ip 重新制定服务器ip\n```\n\n- deploy\n\n```sh\nhexo deploy # 发布到网站，这里就是发布到_config.yml中deploy中设置的网址上。\n# 参数\n-g , --generate 部署前生成静态文件\n```\n\n该命令可以简写`hexo g`\n\n- render\n\n```sh\nhexo render <file1> [file2] ... # 渲染文件\n# 参数\n-o , --output 设置输出路径\n```\n\n- migrate\n\n```sh\nhexo migrate <type> # 从其他博客系统迁移内容\n```\n\n- clean\n\n```sh\nhexo clean # 清除缓存文件(db.json)和已生成的静态文件(public)，通常更换主题后，无效时，可以运行此命令。\n```\n\n- list\n\n```sh\nhexo list <type> # 列出网站资料\n```\n\n- version\n\n```sh\nhexo version # 显示hexo版本信息\n```\n\n#### 选项指令\n\n> - 选项指令\n>\n> ```sh\n> hexo --safe # 安全模式，会禁用插件和脚本。\n> hexo --debug # debug 模式\n> hexo --silent # 简洁模式，隐藏终端信息\n> hexo --config custom.yml # 自定义配置文件路径，如此就不会使用_config.yml了。\n> hexo --draft # 显示草稿，也就是source/_drafts\n> hexo --cwd /path/to/cwd # 自定义当前工作目录\n> ```\n> - 迁移文章\n>   - RSS 使用RSS需要安装`hexo-migrator-rss`插件\n>\n>     ```sh\n>     npm install hexo-migrator-rss --save\n>     #可使用如下命令，从RSS迁移所有文章\n>     hexo migrate rss <source>\n>     ```\n>\n>   - Jekyll 将`_post`文件夹内的文件复制到`source/posts`下，在`_config.yml`修改`new_post_name`\n>\n>     ```yaml\n>     new_post_name: :year-:month-:day-:title.md\n>     ```\n>\n>   - Octopress\n>\n>     将Octopress中`source/_posts`文件复制到Hexo的对应目录下，在修改`_config.yml`中`new_post_name`参数\n>\n>     ```yaml\n>     new_post_name: :year-:month-:day-:title.md\n>     ```\n>\n>   - WordPress\n>\n>     需要安装`hexo-migrator-wordpress`插件\n>\n>     ```sh\n>     npm install hexo-migrator-wordpress --save\n>     # wordpress导出数据,然后hexo迁移\n>     hexo migrate wordpress <source> # source可以是网址，或者文件夹\n>     ```\n>\n>   - Joomla\n>\n>     安装`hexo-migrator-joomla`插件，类似wordpress迁移。\n>\n>     ```sh\n>     npm install hexo-migrator-joomla\n>     hexo migrate joomla <source>\n>     ```\n\n## 3、写作\n\n你可以执行下列命令来创建一篇新文章。\n\n```\n$ hexo new [layout] <title>\n```\n\n您可以在命令中指定文章的布局（layout），默认为 `post`，可以通过修改 `_config.yml` 中的 `default_layout` 参数来指定默认布局。\n\n#### 布局（Layout）\n\nHexo 有三种默认布局：`post`、`page` 和 `draft`，它们分别对应不同的路径，而您自定义的其他布局和 `post` 相同，都将储存到 `source/_posts` 文件夹。\n\n| 布局      | 路径               |\n| ------- | ---------------- |\n| `post`  | `source/_posts`  |\n| `page`  | `source`         |\n| `draft` | `source/_drafts` |\n\n> **不要处理我的文章** 如果你不想你的文章被处理，你可以将 Front-Matter 中的`layout:` 设为 `false` 。\n\n#### 文件名称\n\nHexo 默认以标题做为文件名称，但您可编辑 `new_post_name` 参数来改变默认的文件名称，举例来说，设为 `:year-:month-:day-:title.md` 可让您更方便的通过日期来管理文章。\n\n| 变量         | 描述                   |\n| ---------- | -------------------- |\n| `:title`   | 标题（小写，空格将会被替换为短杠）    |\n| `:year`    | 建立的年份，比如， `2015`     |\n| `:month`   | 建立的月份（有前导零），比如， `04` |\n| `:i_month` | 建立的月份（无前导零），比如， `4`  |\n| `:day`     | 建立的日期（有前导零），比如， `07` |\n| `:i_day`   | 建立的日期（无前导零），比如， `7`  |\n\n#### 草稿\n\n刚刚提到了 Hexo 的一种特殊布局：`draft`，这种布局在建立时会被保存到 `source/_drafts` 文件夹，您可通过 `publish` 命令将草稿移动到 `source/_posts` 文件夹，该命令的使用方式与 `new` 十分类似，您也可在命令中指定 `layout` 来指定布局。\n\n```\n$ hexo publish [layout] <title>\n```\n\n草稿默认不会显示在页面中，您可在执行时加上 `--draft` 参数，或是把 `render_drafts` 参数设为 `true`来预览草稿。\n\n## 4、模版（Scaffold）\n\n在新建文章时，Hexo 会根据 `scaffolds` 文件夹内相对应的文件来建立文件，例如：\n\n```\n$ hexo new photo \"My Gallery\"\n```\n\n在执行这行指令时，Hexo 会尝试在 `scaffolds` 文件夹中寻找 `photo.md`，并根据其内容建立文章，以下是您可以在模版中使用的变量：\n\n| 变量       | 描述     |\n| -------- | ------ |\n| `layout` | 布局     |\n| `title`  | 标题     |\n| `date`   | 文件建立日期 |\n\n## 5、Front-matter\n\nFront-matter 是文件最上方以 `---` 分隔的区域，用于指定个别文件的变量，举例来说：\n\n```\ntitle: Hello World\ndate: 2013/7/13 20:46:25\n---\n```\n\n以下是预先定义的参数，您可在模板中使用这些参数值并加以利用。\n\n| 参数           | 描述         | 默认值    |\n| ------------ | ---------- | ------ |\n| `layout`     | 布局         |        |\n| `title`      | 标题         |        |\n| `date`       | 建立日期       | 文件建立日期 |\n| `updated`    | 更新日期       | 文件更新日期 |\n| `comments`   | 开启文章的评论功能  | true   |\n| `tags`       | 标签（不适用于分页） |        |\n| `categories` | 分类（不适用于分页） |        |\n| `permalink`  | 覆盖文章网址     |        |\n\n#### 分类和标签\n\n只有文章支持分类和标签，您可以在 Front-matter 中设置。在其他系统中，分类和标签听起来很接近，但是在 Hexo 中两者有着明显的差别：分类具有顺序性和层次性，也就是说 `Foo, Bar` 不等于 `Bar, Foo`；而标签没有顺序和层次。\n\n```\ncategories:\n- Diary\ntags:\n- PS3\n- Games\n```\n\n> **分类方法的分歧**\n>\n> 如果您有过使用WordPress的经验，就很容易误解Hexo的分类方式。WordPress支持对一篇文章设置多个分类，而且这些分类可以是同级的，也可以是父子分类。但是Hexo不支持指定多个同级分类。下面的指定方法：\n> categories:DiaryLife\n> 会使分类`Life`成为`Diary`的子分类，而不是并列分类。因此，有必要为您的文章选择尽可能准确的分类。\n\n#### JSON Front-matter\n\n除了 YAML 外，你也可以使用 JSON 来编写 Front-matter，只要将 `---` 代换成 `;;;` 即可。\n\n```\n\"title\": \"Hello World\",\n\"date\": \"2013/7/13 20:46:25\"\n;;;\n```\n\n标签插件和 Front-matter 中的标签不同，它们是用于在文章中快速插入特定内容的插件。\n\n## 6、 标签插件（Tag Plugins）\n\n标签插件和 Front-matter 中的标签不同，它们是用于在文章中快速插入特定内容的插件。\n\n- #### 引用块\n\n在文章中插入引言，可包含作者、来源和标题。\n\n**别号：** quote\n\n```\n{% blockquote [author[, source]] [link] [source_link_title] %}\ncontent\n{% endblockquote %}\n```\n\n#### 样例\n\n**没有提供参数，则只输出普通的 blockquote**\n\n```\n{% blockquote %}\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.\n{% endblockquote %}\n```\n\n> Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.\n\n**引用书上的句子**\n\n```\n{% blockquote David Levithan, Wide Awake %}\nDo not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.\n{% endblockquote %}\n```\n\n> Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.\n>\n> **David Levithan**Wide Awake\n\n**引用 Twitter**\n\n```\n{% blockquote @DevDocs https://twitter.com/devdocs/status/356095192085962752 %}\nNEW: DevDocs now comes with syntax highlighting. http://devdocs.io\n{% endblockquote %}\n```\n\n> NEW: DevDocs now comes with syntax highlighting. [http://devdocs.io](http://devdocs.io/)\n>\n> **@DevDocs**[twitter.com/devdocs/status/356095192085962752](https://twitter.com/devdocs/status/356095192085962752)\n\n**引用网络上的文章**\n\n```\n{% blockquote Seth Godin http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html Welcome to Island Marketing %}\nEvery interaction is both precious and an opportunity to delight.\n{% endblockquote %}\n```\n\n> Every interaction is both precious and an opportunity to delight.\n>\n> **Seth Godin**[Welcome to Island Marketing](http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html)\n\n- #### 代码块\n\n在文章中插入代码。\n\n**别名：** code\n\n```\n{% codeblock [title] [lang:language] [url] [link text] %}\ncode snippet\n{% endcodeblock %}\n```\n\n#### 样例\n\n**普通的代码块**\n\n```\n{% codeblock %}\nalert('Hello World!');\n{% endcodeblock %}\n```\n\n```\nalert('Hello World!');\n```\n\n**指定语言**\n\n```\n{% codeblock lang:objc %}\n[rectangle setX: 10 y: 10 width: 20 height: 20];\n{% endcodeblock %}\n```\n\n```\n[rectangle setX: 10 y: 10 width: 20 height: 20];\n```\n\n**附加说明**\n\n```\n{% codeblock Array.map %}\narray.map(callback[, thisArg])\n{% endcodeblock %}\n```\n\n```\nArray.map\narray.map(callback[, thisArg])\n```\n\n**附加说明和网址**\n\n```\n{% codeblock _.compact http://underscorejs.org/#compact Underscore.js %}\n_.compact([0, 1, false, 2, '', 3]);\n=> [1, 2, 3]\n{% endcodeblock %}\n```\n\n```\n_.compactUnderscore.js\n_.compact([0, 1, false, 2, '', 3]);\n=> [1, 2, 3]\n```\n\n- #### 反引号代码块\n\n另一种形式的代码块，不同的是它使用三个反引号来包裹。\n\n\\``` [language] [title] [url] [link text] code snippet ```\n\n- #### Pull Quote\n\n在文章中插入 Pull quote。\n\n```\n{% pullquote [class] %}\ncontent\n{% endpullquote %}\n```\n\n- #### jsFiddle\n\n在文章中嵌入 jsFiddle。\n\n```\n{% jsfiddle shorttag [tabs] [skin] [width] [height] %}\n```\n\n- #### Gist\n\n在文章中嵌入 Gist。\n\n```\n{% gist gist_id [filename] %}\n```\n\n- #### iframe\n\n在文章中插入 iframe。\n\n```\n{% iframe url [width] [height] %}\n```\n\n- #### Image\n\n在文章中插入指定大小的图片。\n\n```\n{% img [class names] /path/to/image [width] [height] [title text [alt text]] %}\n```\n\n- #### Link\n\n在文章中插入链接，并自动给外部链接添加 `target=\"_blank\"` 属性。\n\n```\n{% link text url [external] [title] %}\n```\n\n- #### Include Code\n\n插入 `source` 文件夹内的代码文件。\n\n```\n{% include_code [title] [lang:language] path/to/file %}\n```\n\n- #### Youtube\n\n在文章中插入 Youtube 视频。\n\n```\n{% youtube video_id %}\n```\n\n- #### Vimeo\n\n在文章中插入 Vimeo 视频。\n\n```\n{% vimeo video_id %}\n```\n\n- #### 引用文章\n\n引用其他文章的链接。\n\n```\n{% post_path slug %}\n{% post_link slug [title] %}\n```\n\n- #### 引用资源\n\n引用文章的资源。\n\n```\n{% asset_path slug %}\n{% asset_img slug [title] %}\n{% asset_link slug [title] %}\n```\n\n- #### Raw\n\n如果您想在文章中插入 Swig 标签，可以尝试使用 Raw 标签，以免发生解析异常。\n\n```\n{% raw %}\ncontent\n{% endraw %}\n```\n\n\n\n> ==其上上面那么一大段，主要是用于编辑文章时候的文档语法，如果有自己的markdown编辑器，则可以用md文件，那么md语法就相对便捷。==[Markdown语法简介](http://blog.csdn.net/binglumeng/article/details/52949717)，注意有时候hexo不完全支持所有markdown的语法显示。\n\n\n\n## 7、Asset资源文件夹\n\nAsset用于存放除了`source`文件夹中的文章意外的文件，比如图片、CSS/JS文件等。若仅有少量的图片，可以在`source/images`中存放，在文章中用`![](images/img.jpg)`引用。\n\n如果在`_config.yml`中配置了`post_asset_folder:true`那么Hexo创建新文章时候，会同时创建一个文件夹，存放相关资源。\n\n**注意：**有时候的markdown相对引用在文章中显示正常，但是发布后不一定可以，新版Hexo 3 中可以使用标签\n\n```yaml\n{% asset_path slug %}\n{% asset_img slug [title] %}\n{% asset_link slug [title] %}\n```\n\n比如使用相对引用图片资源时候\n\n```yaml\n{% asset_img img.jpg avaster %} # 这就可以正常的显示相对引用的图片资源\n```\n\n## 8、数据文件\n\nHexo 3中增加了`数据文件`的功能，便于资源复用。通过加载`source/_data`下的`yaml 或json`文件。\n\n```yaml\n# 例如在source/_data下menu.yaml\nHome: /\nGallery: /gallery/\nArchives: /archivers/\n#那么就可以在模板中使用\n{% for link in site.data.menu %}\n\t<a href=\"{{ link }}\">{{ loop.key }}</a>\n{% endfor %}\n```\n\n## 9、部署\n\n在`_config.yml`中配置参数，就可以部署到服务器。\n\n```yaml\ndeploy:\n\ttype: git \n# 可以多个type,通过缩进表示层级 ,冒号后面要有空格！\ndeploy:\n- type: git\n\trepo:\n- type :heroku\n\trepo:\n```\n\n- git\n\n安装`hexo-deploy-git`\n\n```yaml\nnpm install hexo-deployer-git --save\n```\n\n配置`_config.yml`\n\n```yaml\ndeploy:\n\ttype: git\n\trepo: <repository url>\n    branch: [branch]\n    message: [message] #用与git自动提交的信息说明，默认格式Site updated:{{now('YYYY-MM-DD HH:mm:ss)}}\n```\n\n\n\n## 10、永久链接\n\n`_config.yml`配置调用永久链接或在每篇文章的Front-matter中指定\n\n- 变量\n\n| 变量          | 描述                                      |\n| ----------- | --------------------------------------- |\n| `:year`     | 文章的发表年份（4 位数）                           |\n| `:month`    | 文章的发表月份（2 位数）                           |\n| `:i_month`  | 文章的发表月份（去掉开头的零）                         |\n| `:day`      | 文章的发表日期 (2 位数)                          |\n| `:i_day`    | 文章的发表日期（去掉开头的零）                         |\n| `:title`    | 文件名称                                    |\n| `:id`       | 文章 ID                                   |\n| `:category` | 分类。如果文章没有分类，则是 `default_category` 配置信息。 |\n\n修改`permalink_defaluts:`参数为空，就可以永久变量。\n\n- 多语言支持\n\n修改`new_post_name`和`permalink`参数：\n\n```yaml\nnew_post_name: :lang/:title.md\npermalink: :lang/:title/\n#新建文章时候\nhexo new \"hello world\" --lang tw\n# 则输出 => source/_posts/tw/hello-world.md,访问网址也会变成url/tw/hello-world/\n```\n\n\n\n## 11、主题\n\n创建Hexo主题，在`themes`文件夹内，新增任意文件夹，修改`_config.yml`内`theme`设置\n\n```yaml\n# 主题的结构\n.\n|--- _config.yml\n|--- languages\n|--- layout\n|--- scripts\n|___ source\n```\n\n## 12、模板\n\n每个主题都必须有个`index`的模板，用于决定网站内容的呈现方式\n\n| 模板         | 用途   | 回调        |\n| ---------- | ---- | --------- |\n| `index`    | 首页   |           |\n| `post`     | 文章   | `index`   |\n| `page`     | 分页   | `index`   |\n| `archive`  | 归档   | `index`   |\n| `category` | 分类归档 | `archive` |\n| `tag`      | 标签归档 | `archive` |\n\n","source":"_posts/Hexo学习笔记.md","raw":"---\ntitle: Hexo使用说明笔记\ndate: 2017-03-21 16:26\ntags:\n    - Hexo\n    - 博客\ncategories:\n    - 网络相关\n---\n\n# Hexo使用说明笔记\n\n本文简要介绍如何使用Hexo在github上搭建一个个人博客网站，关于Hexo的详细使用说明，还请参考[官方文档](https://hexo.io/zh-cn/docs/index.html)\n\n## 1、文件简介\n\n在Hexo生成的目录下，大致有一下几个文件夹/文件：\n\n- public 生成的网站文件，发布的站点文件。\n\n- source资源文件夹，用于存放内容。\n\n- tag 标签文件夹。\n\n- archive归档文件夹。\n\n- category分类文件夹。\n\n- downloads/code include code文件夹。\n\n- :lang i18n_dir 国际化文件夹。\n\n- _config.yml 配置文件\n\n  - 配置说明\n\n  ```yaml\n  # Hexo Configuration\n  ## Docs: https://hexo.io/docs/configuration.html\n  ## Source: https://github.com/hexojs/hexo/\n\n  # Site，参数说明：title 网站标题；subtitle 网站副标题；description 网站描述，在搜索引擎中可被搜索的信息，可以配置描述关键字；author 作者姓名；language 网站语言；timezone 网站时区；\n  # 默认使用电脑本地时区，可以用时区表指定，如America/New_York，UTC等。\n  title: Binglumeng's Blog\n  subtitle: Just do what you want !\n  author: 冰路梦\n  language: \n  timezone: \n\n  # URL\n  ## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\n  # 参数说明：url 网址；root 网址根目录，要是网站存放在子目录，这里就要配置到子目录路径，如url是https://binglumeng.github.io ,而https://binglumeng.github.io/blog才是文件路径，那么root就要设置为/blog/；\n  # permalink 文章永久链接格式，:year/:month/:day/:title/ ;permalink_defaults 永久链接中各部分的默认值。\n  url: https://binglumeng.github.io/\n  # root就是网址路径path\n  root: /binglumeng/\n  permalink: :year/:month/:day/:title/\n  permalink_defaults:\n\n  # Directory 目录参数说明：source_dir 资源文件夹，用于存放内容，默认值source；public_dir 公共文件夹，存放生成的站点文件，默认值public；\n  # tag_dir 标签文件夹 默认值tag；archive_dir 归档文件夹 默认值archives;category_dir 分类文件夹，默认值categories;\n  # code_dir include code 文件夹，默认值 downloads/code ;i18n_dir 国际化文件夹 ，默认值 :lang ；skip_render 跳过指定的渲染，可以使用glob表达式来匹配路径。\n\n  source_dir: source\n  public_dir: public\n  tag_dir: tags\n  archive_dir: i_dont_wanna_use_default_archives\n  category_dir: categories\n  code_dir: downloads/code\n  i18n_dir: :lang\n  skip_render:\n\n  # Writing 文章相关参数：new_post_name 新文章文件名 ，默认值:title.md ;\n  # default_category 预设布局，默认值 post ;\n  # auto_spacing 中英文之间加入空格，默认 false；\n  # titlecase 把标题转换为title case 默认值 false；\n  # external_link 新标签中打开链接 ，默认值 true；\n  # filename_case 把文件名转换为(1)小写或(2)大写。默认值0；\n  # render_drafts 显示草稿，默认值false；\n  # post_asset_folder 启动Asset文件夹，默认值false；\n  # relative_link 把链接改为与根目录的相对路径位置，默认值false；\n  # future 显示未来的文章，默认值true；\n  # highlight 代码块设置\n  new_post_name: :title.md # File name of new posts\n  default_layout: post \n  titlecase: false # Transform title into titlecase\n  external_link: true # Open external links in new tab\n  filename_case: 0\n  render_drafts: false\n  post_asset_folder: true\n  relative_link: false\n  future: true\n  highlight:\n    enable: true\n    line_number: true\n    auto_detect: true\n    tab_replace:\n\n  # Category & Tag 分类和标签 ，default_categorty 默认分类，默认值 uncategorized;\n  # category_map 分类别名；tag_map 标签别名\n  default_category: uncategorized\n  category_map:\n  tag_map:\n\n  # Date / Time format 日期时间格式 date_format 日期格式 ，默认是YYYY-MM-DD ；time_format 时间格式 ，H:mm:ss\n  ## Hexo uses Moment.js to parse and display date\n  ## You can customize the date format as defined in\n  ## http://momentjs.com/docs/#/displaying/format/\n  date_format: YYYY-MM-DD\n  time_format: HH:mm:ss\n\n  # Pagination 分页 per_page 每页显示的文章数，0表示关闭分页。默认值10；\n  # pagination_dir 分页目录，默认值page\n  ## Set per_page to 0 to disable pagination\n  per_page: 10\n  pagination_dir: page\n\n  # Extensions 扩展，theme 当前主题的名称 ，false表示禁止使用主题。\n  ## Plugins: https://hexo.io/plugins/\n  ## Themes: https://hexo.io/themes/\n  theme: binglumeng\n\n  # Deployment 部署的设置\n  ## Docs: https://hexo.io/docs/deployment.html\n  deploy:\n    type: git\n    repo: https://github.com/\n    branch: master\n  ```\n\n- package.json 包信息\n\n# 指令说明\n\n使用hexo首先要安装node.js和git。本文演示为windows系统下，linux和mac请参照官方文档。\n\n- init\n\n```shell\nhexo init [folder] # 在cmd命令下，cd到你所需要建立博客的文件夹，执行此命令，其中folder为可选指令，若不写，则默认当前目录。\n```\n\n- new\n\n```sh\nhexo new [layout] <title> # layout为可选项，默认使用_config.yml中的default_layout。新建文章的指令\n```\n\n- generate\n\n```sh\nhexo generate # 生成静态文件，\n# 可选参数：\n-d ,--deploy 文件生成后立即部署网站\n-w , --watch 件事文件变动\n```\n\n该指令可以简写为`hexo g`\n\n- publish\n\n```sh\nhexo publish [layout] <filename> # 发布草稿\n```\n\n- server\n\n```sh\nhexo server # 启动server，就可以在本地预览效果。\n# 参数，默认网址http://localhost:4000/\n-p , --port 重设端口\n-s , --static 只是用静态文件\n-l , --log 启动日志记录，使用覆盖记录格式\n-i , --ip 重新制定服务器ip\n```\n\n- deploy\n\n```sh\nhexo deploy # 发布到网站，这里就是发布到_config.yml中deploy中设置的网址上。\n# 参数\n-g , --generate 部署前生成静态文件\n```\n\n该命令可以简写`hexo g`\n\n- render\n\n```sh\nhexo render <file1> [file2] ... # 渲染文件\n# 参数\n-o , --output 设置输出路径\n```\n\n- migrate\n\n```sh\nhexo migrate <type> # 从其他博客系统迁移内容\n```\n\n- clean\n\n```sh\nhexo clean # 清除缓存文件(db.json)和已生成的静态文件(public)，通常更换主题后，无效时，可以运行此命令。\n```\n\n- list\n\n```sh\nhexo list <type> # 列出网站资料\n```\n\n- version\n\n```sh\nhexo version # 显示hexo版本信息\n```\n\n#### 选项指令\n\n> - 选项指令\n>\n> ```sh\n> hexo --safe # 安全模式，会禁用插件和脚本。\n> hexo --debug # debug 模式\n> hexo --silent # 简洁模式，隐藏终端信息\n> hexo --config custom.yml # 自定义配置文件路径，如此就不会使用_config.yml了。\n> hexo --draft # 显示草稿，也就是source/_drafts\n> hexo --cwd /path/to/cwd # 自定义当前工作目录\n> ```\n> - 迁移文章\n>   - RSS 使用RSS需要安装`hexo-migrator-rss`插件\n>\n>     ```sh\n>     npm install hexo-migrator-rss --save\n>     #可使用如下命令，从RSS迁移所有文章\n>     hexo migrate rss <source>\n>     ```\n>\n>   - Jekyll 将`_post`文件夹内的文件复制到`source/posts`下，在`_config.yml`修改`new_post_name`\n>\n>     ```yaml\n>     new_post_name: :year-:month-:day-:title.md\n>     ```\n>\n>   - Octopress\n>\n>     将Octopress中`source/_posts`文件复制到Hexo的对应目录下，在修改`_config.yml`中`new_post_name`参数\n>\n>     ```yaml\n>     new_post_name: :year-:month-:day-:title.md\n>     ```\n>\n>   - WordPress\n>\n>     需要安装`hexo-migrator-wordpress`插件\n>\n>     ```sh\n>     npm install hexo-migrator-wordpress --save\n>     # wordpress导出数据,然后hexo迁移\n>     hexo migrate wordpress <source> # source可以是网址，或者文件夹\n>     ```\n>\n>   - Joomla\n>\n>     安装`hexo-migrator-joomla`插件，类似wordpress迁移。\n>\n>     ```sh\n>     npm install hexo-migrator-joomla\n>     hexo migrate joomla <source>\n>     ```\n\n## 3、写作\n\n你可以执行下列命令来创建一篇新文章。\n\n```\n$ hexo new [layout] <title>\n```\n\n您可以在命令中指定文章的布局（layout），默认为 `post`，可以通过修改 `_config.yml` 中的 `default_layout` 参数来指定默认布局。\n\n#### 布局（Layout）\n\nHexo 有三种默认布局：`post`、`page` 和 `draft`，它们分别对应不同的路径，而您自定义的其他布局和 `post` 相同，都将储存到 `source/_posts` 文件夹。\n\n| 布局      | 路径               |\n| ------- | ---------------- |\n| `post`  | `source/_posts`  |\n| `page`  | `source`         |\n| `draft` | `source/_drafts` |\n\n> **不要处理我的文章** 如果你不想你的文章被处理，你可以将 Front-Matter 中的`layout:` 设为 `false` 。\n\n#### 文件名称\n\nHexo 默认以标题做为文件名称，但您可编辑 `new_post_name` 参数来改变默认的文件名称，举例来说，设为 `:year-:month-:day-:title.md` 可让您更方便的通过日期来管理文章。\n\n| 变量         | 描述                   |\n| ---------- | -------------------- |\n| `:title`   | 标题（小写，空格将会被替换为短杠）    |\n| `:year`    | 建立的年份，比如， `2015`     |\n| `:month`   | 建立的月份（有前导零），比如， `04` |\n| `:i_month` | 建立的月份（无前导零），比如， `4`  |\n| `:day`     | 建立的日期（有前导零），比如， `07` |\n| `:i_day`   | 建立的日期（无前导零），比如， `7`  |\n\n#### 草稿\n\n刚刚提到了 Hexo 的一种特殊布局：`draft`，这种布局在建立时会被保存到 `source/_drafts` 文件夹，您可通过 `publish` 命令将草稿移动到 `source/_posts` 文件夹，该命令的使用方式与 `new` 十分类似，您也可在命令中指定 `layout` 来指定布局。\n\n```\n$ hexo publish [layout] <title>\n```\n\n草稿默认不会显示在页面中，您可在执行时加上 `--draft` 参数，或是把 `render_drafts` 参数设为 `true`来预览草稿。\n\n## 4、模版（Scaffold）\n\n在新建文章时，Hexo 会根据 `scaffolds` 文件夹内相对应的文件来建立文件，例如：\n\n```\n$ hexo new photo \"My Gallery\"\n```\n\n在执行这行指令时，Hexo 会尝试在 `scaffolds` 文件夹中寻找 `photo.md`，并根据其内容建立文章，以下是您可以在模版中使用的变量：\n\n| 变量       | 描述     |\n| -------- | ------ |\n| `layout` | 布局     |\n| `title`  | 标题     |\n| `date`   | 文件建立日期 |\n\n## 5、Front-matter\n\nFront-matter 是文件最上方以 `---` 分隔的区域，用于指定个别文件的变量，举例来说：\n\n```\ntitle: Hello World\ndate: 2013/7/13 20:46:25\n---\n```\n\n以下是预先定义的参数，您可在模板中使用这些参数值并加以利用。\n\n| 参数           | 描述         | 默认值    |\n| ------------ | ---------- | ------ |\n| `layout`     | 布局         |        |\n| `title`      | 标题         |        |\n| `date`       | 建立日期       | 文件建立日期 |\n| `updated`    | 更新日期       | 文件更新日期 |\n| `comments`   | 开启文章的评论功能  | true   |\n| `tags`       | 标签（不适用于分页） |        |\n| `categories` | 分类（不适用于分页） |        |\n| `permalink`  | 覆盖文章网址     |        |\n\n#### 分类和标签\n\n只有文章支持分类和标签，您可以在 Front-matter 中设置。在其他系统中，分类和标签听起来很接近，但是在 Hexo 中两者有着明显的差别：分类具有顺序性和层次性，也就是说 `Foo, Bar` 不等于 `Bar, Foo`；而标签没有顺序和层次。\n\n```\ncategories:\n- Diary\ntags:\n- PS3\n- Games\n```\n\n> **分类方法的分歧**\n>\n> 如果您有过使用WordPress的经验，就很容易误解Hexo的分类方式。WordPress支持对一篇文章设置多个分类，而且这些分类可以是同级的，也可以是父子分类。但是Hexo不支持指定多个同级分类。下面的指定方法：\n> categories:DiaryLife\n> 会使分类`Life`成为`Diary`的子分类，而不是并列分类。因此，有必要为您的文章选择尽可能准确的分类。\n\n#### JSON Front-matter\n\n除了 YAML 外，你也可以使用 JSON 来编写 Front-matter，只要将 `---` 代换成 `;;;` 即可。\n\n```\n\"title\": \"Hello World\",\n\"date\": \"2013/7/13 20:46:25\"\n;;;\n```\n\n标签插件和 Front-matter 中的标签不同，它们是用于在文章中快速插入特定内容的插件。\n\n## 6、 标签插件（Tag Plugins）\n\n标签插件和 Front-matter 中的标签不同，它们是用于在文章中快速插入特定内容的插件。\n\n- #### 引用块\n\n在文章中插入引言，可包含作者、来源和标题。\n\n**别号：** quote\n\n```\n{% blockquote [author[, source]] [link] [source_link_title] %}\ncontent\n{% endblockquote %}\n```\n\n#### 样例\n\n**没有提供参数，则只输出普通的 blockquote**\n\n```\n{% blockquote %}\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.\n{% endblockquote %}\n```\n\n> Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.\n\n**引用书上的句子**\n\n```\n{% blockquote David Levithan, Wide Awake %}\nDo not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.\n{% endblockquote %}\n```\n\n> Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.\n>\n> **David Levithan**Wide Awake\n\n**引用 Twitter**\n\n```\n{% blockquote @DevDocs https://twitter.com/devdocs/status/356095192085962752 %}\nNEW: DevDocs now comes with syntax highlighting. http://devdocs.io\n{% endblockquote %}\n```\n\n> NEW: DevDocs now comes with syntax highlighting. [http://devdocs.io](http://devdocs.io/)\n>\n> **@DevDocs**[twitter.com/devdocs/status/356095192085962752](https://twitter.com/devdocs/status/356095192085962752)\n\n**引用网络上的文章**\n\n```\n{% blockquote Seth Godin http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html Welcome to Island Marketing %}\nEvery interaction is both precious and an opportunity to delight.\n{% endblockquote %}\n```\n\n> Every interaction is both precious and an opportunity to delight.\n>\n> **Seth Godin**[Welcome to Island Marketing](http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html)\n\n- #### 代码块\n\n在文章中插入代码。\n\n**别名：** code\n\n```\n{% codeblock [title] [lang:language] [url] [link text] %}\ncode snippet\n{% endcodeblock %}\n```\n\n#### 样例\n\n**普通的代码块**\n\n```\n{% codeblock %}\nalert('Hello World!');\n{% endcodeblock %}\n```\n\n```\nalert('Hello World!');\n```\n\n**指定语言**\n\n```\n{% codeblock lang:objc %}\n[rectangle setX: 10 y: 10 width: 20 height: 20];\n{% endcodeblock %}\n```\n\n```\n[rectangle setX: 10 y: 10 width: 20 height: 20];\n```\n\n**附加说明**\n\n```\n{% codeblock Array.map %}\narray.map(callback[, thisArg])\n{% endcodeblock %}\n```\n\n```\nArray.map\narray.map(callback[, thisArg])\n```\n\n**附加说明和网址**\n\n```\n{% codeblock _.compact http://underscorejs.org/#compact Underscore.js %}\n_.compact([0, 1, false, 2, '', 3]);\n=> [1, 2, 3]\n{% endcodeblock %}\n```\n\n```\n_.compactUnderscore.js\n_.compact([0, 1, false, 2, '', 3]);\n=> [1, 2, 3]\n```\n\n- #### 反引号代码块\n\n另一种形式的代码块，不同的是它使用三个反引号来包裹。\n\n\\``` [language] [title] [url] [link text] code snippet ```\n\n- #### Pull Quote\n\n在文章中插入 Pull quote。\n\n```\n{% pullquote [class] %}\ncontent\n{% endpullquote %}\n```\n\n- #### jsFiddle\n\n在文章中嵌入 jsFiddle。\n\n```\n{% jsfiddle shorttag [tabs] [skin] [width] [height] %}\n```\n\n- #### Gist\n\n在文章中嵌入 Gist。\n\n```\n{% gist gist_id [filename] %}\n```\n\n- #### iframe\n\n在文章中插入 iframe。\n\n```\n{% iframe url [width] [height] %}\n```\n\n- #### Image\n\n在文章中插入指定大小的图片。\n\n```\n{% img [class names] /path/to/image [width] [height] [title text [alt text]] %}\n```\n\n- #### Link\n\n在文章中插入链接，并自动给外部链接添加 `target=\"_blank\"` 属性。\n\n```\n{% link text url [external] [title] %}\n```\n\n- #### Include Code\n\n插入 `source` 文件夹内的代码文件。\n\n```\n{% include_code [title] [lang:language] path/to/file %}\n```\n\n- #### Youtube\n\n在文章中插入 Youtube 视频。\n\n```\n{% youtube video_id %}\n```\n\n- #### Vimeo\n\n在文章中插入 Vimeo 视频。\n\n```\n{% vimeo video_id %}\n```\n\n- #### 引用文章\n\n引用其他文章的链接。\n\n```\n{% post_path slug %}\n{% post_link slug [title] %}\n```\n\n- #### 引用资源\n\n引用文章的资源。\n\n```\n{% asset_path slug %}\n{% asset_img slug [title] %}\n{% asset_link slug [title] %}\n```\n\n- #### Raw\n\n如果您想在文章中插入 Swig 标签，可以尝试使用 Raw 标签，以免发生解析异常。\n\n```\n{% raw %}\ncontent\n{% endraw %}\n```\n\n\n\n> ==其上上面那么一大段，主要是用于编辑文章时候的文档语法，如果有自己的markdown编辑器，则可以用md文件，那么md语法就相对便捷。==[Markdown语法简介](http://blog.csdn.net/binglumeng/article/details/52949717)，注意有时候hexo不完全支持所有markdown的语法显示。\n\n\n\n## 7、Asset资源文件夹\n\nAsset用于存放除了`source`文件夹中的文章意外的文件，比如图片、CSS/JS文件等。若仅有少量的图片，可以在`source/images`中存放，在文章中用`![](images/img.jpg)`引用。\n\n如果在`_config.yml`中配置了`post_asset_folder:true`那么Hexo创建新文章时候，会同时创建一个文件夹，存放相关资源。\n\n**注意：**有时候的markdown相对引用在文章中显示正常，但是发布后不一定可以，新版Hexo 3 中可以使用标签\n\n```yaml\n{% asset_path slug %}\n{% asset_img slug [title] %}\n{% asset_link slug [title] %}\n```\n\n比如使用相对引用图片资源时候\n\n```yaml\n{% asset_img img.jpg avaster %} # 这就可以正常的显示相对引用的图片资源\n```\n\n## 8、数据文件\n\nHexo 3中增加了`数据文件`的功能，便于资源复用。通过加载`source/_data`下的`yaml 或json`文件。\n\n```yaml\n# 例如在source/_data下menu.yaml\nHome: /\nGallery: /gallery/\nArchives: /archivers/\n#那么就可以在模板中使用\n{% for link in site.data.menu %}\n\t<a href=\"{{ link }}\">{{ loop.key }}</a>\n{% endfor %}\n```\n\n## 9、部署\n\n在`_config.yml`中配置参数，就可以部署到服务器。\n\n```yaml\ndeploy:\n\ttype: git \n# 可以多个type,通过缩进表示层级 ,冒号后面要有空格！\ndeploy:\n- type: git\n\trepo:\n- type :heroku\n\trepo:\n```\n\n- git\n\n安装`hexo-deploy-git`\n\n```yaml\nnpm install hexo-deployer-git --save\n```\n\n配置`_config.yml`\n\n```yaml\ndeploy:\n\ttype: git\n\trepo: <repository url>\n    branch: [branch]\n    message: [message] #用与git自动提交的信息说明，默认格式Site updated:{{now('YYYY-MM-DD HH:mm:ss)}}\n```\n\n\n\n## 10、永久链接\n\n`_config.yml`配置调用永久链接或在每篇文章的Front-matter中指定\n\n- 变量\n\n| 变量          | 描述                                      |\n| ----------- | --------------------------------------- |\n| `:year`     | 文章的发表年份（4 位数）                           |\n| `:month`    | 文章的发表月份（2 位数）                           |\n| `:i_month`  | 文章的发表月份（去掉开头的零）                         |\n| `:day`      | 文章的发表日期 (2 位数)                          |\n| `:i_day`    | 文章的发表日期（去掉开头的零）                         |\n| `:title`    | 文件名称                                    |\n| `:id`       | 文章 ID                                   |\n| `:category` | 分类。如果文章没有分类，则是 `default_category` 配置信息。 |\n\n修改`permalink_defaluts:`参数为空，就可以永久变量。\n\n- 多语言支持\n\n修改`new_post_name`和`permalink`参数：\n\n```yaml\nnew_post_name: :lang/:title.md\npermalink: :lang/:title/\n#新建文章时候\nhexo new \"hello world\" --lang tw\n# 则输出 => source/_posts/tw/hello-world.md,访问网址也会变成url/tw/hello-world/\n```\n\n\n\n## 11、主题\n\n创建Hexo主题，在`themes`文件夹内，新增任意文件夹，修改`_config.yml`内`theme`设置\n\n```yaml\n# 主题的结构\n.\n|--- _config.yml\n|--- languages\n|--- layout\n|--- scripts\n|___ source\n```\n\n## 12、模板\n\n每个主题都必须有个`index`的模板，用于决定网站内容的呈现方式\n\n| 模板         | 用途   | 回调        |\n| ---------- | ---- | --------- |\n| `index`    | 首页   |           |\n| `post`     | 文章   | `index`   |\n| `page`     | 分页   | `index`   |\n| `archive`  | 归档   | `index`   |\n| `category` | 分类归档 | `archive` |\n| `tag`      | 标签归档 | `archive` |\n\n","slug":"Hexo学习笔记","published":1,"updated":"2017-03-31T08:44:37.669Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ndxcd2001j88owwsine4gw","content":"<h1 id=\"Hexo使用说明笔记\"><a href=\"#Hexo使用说明笔记\" class=\"headerlink\" title=\"Hexo使用说明笔记\"></a>Hexo使用说明笔记</h1><p>本文简要介绍如何使用Hexo在github上搭建一个个人博客网站，关于Hexo的详细使用说明，还请参考<a href=\"https://hexo.io/zh-cn/docs/index.html\" target=\"_blank\" rel=\"external\">官方文档</a></p>\n<h2 id=\"1、文件简介\"><a href=\"#1、文件简介\" class=\"headerlink\" title=\"1、文件简介\"></a>1、文件简介</h2><p>在Hexo生成的目录下，大致有一下几个文件夹/文件：</p>\n<ul>\n<li><p>public 生成的网站文件，发布的站点文件。</p>\n</li>\n<li><p>source资源文件夹，用于存放内容。</p>\n</li>\n<li><p>tag 标签文件夹。</p>\n</li>\n<li><p>archive归档文件夹。</p>\n</li>\n<li><p>category分类文件夹。</p>\n</li>\n<li><p>downloads/code include code文件夹。</p>\n</li>\n<li><p>:lang i18n_dir 国际化文件夹。</p>\n</li>\n<li><p>_config.yml 配置文件</p>\n<ul>\n<li>配置说明</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Hexo Configuration</span></div><div class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/configuration.html</span></div><div class=\"line\"><span class=\"comment\">## Source: https://github.com/hexojs/hexo/</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Site，参数说明：title 网站标题；subtitle 网站副标题；description 网站描述，在搜索引擎中可被搜索的信息，可以配置描述关键字；author 作者姓名；language 网站语言；timezone 网站时区；</span></div><div class=\"line\"><span class=\"comment\"># 默认使用电脑本地时区，可以用时区表指定，如America/New_York，UTC等。</span></div><div class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">Binglumeng's</span> <span class=\"string\">Blog</span></div><div class=\"line\"><span class=\"attr\">subtitle:</span> <span class=\"string\">Just</span> <span class=\"string\">do</span> <span class=\"string\">what</span> <span class=\"string\">you</span> <span class=\"string\">want</span> <span class=\"string\">!</span></div><div class=\"line\"><span class=\"attr\">author:</span> <span class=\"string\">冰路梦</span></div><div class=\"line\"><span class=\"attr\">language:</span> </div><div class=\"line\"><span class=\"attr\">timezone:</span> </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># URL</span></div><div class=\"line\"><span class=\"comment\">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></div><div class=\"line\"><span class=\"comment\"># 参数说明：url 网址；root 网址根目录，要是网站存放在子目录，这里就要配置到子目录路径，如url是https://binglumeng.github.io ,而https://binglumeng.github.io/blog才是文件路径，那么root就要设置为/blog/；</span></div><div class=\"line\"><span class=\"comment\"># permalink 文章永久链接格式，:year/:month/:day/:title/ ;permalink_defaults 永久链接中各部分的默认值。</span></div><div class=\"line\"><span class=\"attr\">url:</span> <span class=\"attr\">https://binglumeng.github.io/</span></div><div class=\"line\"><span class=\"comment\"># root就是网址路径path</span></div><div class=\"line\"><span class=\"attr\">root:</span> <span class=\"string\">/binglumeng/</span></div><div class=\"line\"><span class=\"attr\">permalink:</span> <span class=\"string\">:year/:month/:day/:title/</span></div><div class=\"line\"><span class=\"attr\">permalink_defaults:</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Directory 目录参数说明：source_dir 资源文件夹，用于存放内容，默认值source；public_dir 公共文件夹，存放生成的站点文件，默认值public；</span></div><div class=\"line\"><span class=\"comment\"># tag_dir 标签文件夹 默认值tag；archive_dir 归档文件夹 默认值archives;category_dir 分类文件夹，默认值categories;</span></div><div class=\"line\"><span class=\"comment\"># code_dir include code 文件夹，默认值 downloads/code ;i18n_dir 国际化文件夹 ，默认值 :lang ；skip_render 跳过指定的渲染，可以使用glob表达式来匹配路径。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">source_dir:</span> <span class=\"string\">source</span></div><div class=\"line\"><span class=\"attr\">public_dir:</span> <span class=\"string\">public</span></div><div class=\"line\"><span class=\"attr\">tag_dir:</span> <span class=\"string\">tags</span></div><div class=\"line\"><span class=\"attr\">archive_dir:</span> <span class=\"string\">i_dont_wanna_use_default_archives</span></div><div class=\"line\"><span class=\"attr\">category_dir:</span> <span class=\"string\">categories</span></div><div class=\"line\"><span class=\"attr\">code_dir:</span> <span class=\"string\">downloads/code</span></div><div class=\"line\"><span class=\"attr\">i18n_dir:</span> <span class=\"string\">:lang</span></div><div class=\"line\"><span class=\"attr\">skip_render:</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Writing 文章相关参数：new_post_name 新文章文件名 ，默认值:title.md ;</span></div><div class=\"line\"><span class=\"comment\"># default_category 预设布局，默认值 post ;</span></div><div class=\"line\"><span class=\"comment\"># auto_spacing 中英文之间加入空格，默认 false；</span></div><div class=\"line\"><span class=\"comment\"># titlecase 把标题转换为title case 默认值 false；</span></div><div class=\"line\"><span class=\"comment\"># external_link 新标签中打开链接 ，默认值 true；</span></div><div class=\"line\"><span class=\"comment\"># filename_case 把文件名转换为(1)小写或(2)大写。默认值0；</span></div><div class=\"line\"><span class=\"comment\"># render_drafts 显示草稿，默认值false；</span></div><div class=\"line\"><span class=\"comment\"># post_asset_folder 启动Asset文件夹，默认值false；</span></div><div class=\"line\"><span class=\"comment\"># relative_link 把链接改为与根目录的相对路径位置，默认值false；</span></div><div class=\"line\"><span class=\"comment\"># future 显示未来的文章，默认值true；</span></div><div class=\"line\"><span class=\"comment\"># highlight 代码块设置</span></div><div class=\"line\"><span class=\"attr\">new_post_name:</span> <span class=\"string\">:title.md</span> <span class=\"comment\"># File name of new posts</span></div><div class=\"line\"><span class=\"attr\">default_layout:</span> <span class=\"string\">post</span> </div><div class=\"line\"><span class=\"attr\">titlecase:</span> <span class=\"literal\">false</span> <span class=\"comment\"># Transform title into titlecase</span></div><div class=\"line\"><span class=\"attr\">external_link:</span> <span class=\"literal\">true</span> <span class=\"comment\"># Open external links in new tab</span></div><div class=\"line\"><span class=\"attr\">filename_case:</span> <span class=\"number\">0</span></div><div class=\"line\"><span class=\"attr\">render_drafts:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">post_asset_folder:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">relative_link:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">future:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">highlight:</span></div><div class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">  line_number:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">  auto_detect:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">  tab_replace:</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Category &amp; Tag 分类和标签 ，default_categorty 默认分类，默认值 uncategorized;</span></div><div class=\"line\"><span class=\"comment\"># category_map 分类别名；tag_map 标签别名</span></div><div class=\"line\"><span class=\"attr\">default_category:</span> <span class=\"string\">uncategorized</span></div><div class=\"line\"><span class=\"attr\">category_map:</span></div><div class=\"line\"><span class=\"attr\">tag_map:</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Date / Time format 日期时间格式 date_format 日期格式 ，默认是YYYY-MM-DD ；time_format 时间格式 ，H:mm:ss</span></div><div class=\"line\"><span class=\"comment\">## Hexo uses Moment.js to parse and display date</span></div><div class=\"line\"><span class=\"comment\">## You can customize the date format as defined in</span></div><div class=\"line\"><span class=\"comment\">## http://momentjs.com/docs/#/displaying/format/</span></div><div class=\"line\"><span class=\"attr\">date_format:</span> <span class=\"string\">YYYY-MM-DD</span></div><div class=\"line\"><span class=\"attr\">time_format:</span> <span class=\"attr\">HH:mm:ss</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Pagination 分页 per_page 每页显示的文章数，0表示关闭分页。默认值10；</span></div><div class=\"line\"><span class=\"comment\"># pagination_dir 分页目录，默认值page</span></div><div class=\"line\"><span class=\"comment\">## Set per_page to 0 to disable pagination</span></div><div class=\"line\"><span class=\"attr\">per_page:</span> <span class=\"number\">10</span></div><div class=\"line\"><span class=\"attr\">pagination_dir:</span> <span class=\"string\">page</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Extensions 扩展，theme 当前主题的名称 ，false表示禁止使用主题。</span></div><div class=\"line\"><span class=\"comment\">## Plugins: https://hexo.io/plugins/</span></div><div class=\"line\"><span class=\"comment\">## Themes: https://hexo.io/themes/</span></div><div class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">binglumeng</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Deployment 部署的设置</span></div><div class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></div><div class=\"line\"><span class=\"attr\">deploy:</span></div><div class=\"line\"><span class=\"attr\">  type:</span> <span class=\"string\">git</span></div><div class=\"line\"><span class=\"attr\">  repo:</span> <span class=\"attr\">https://github.com/</span></div><div class=\"line\"><span class=\"attr\">  branch:</span> <span class=\"string\">master</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>package.json 包信息</p>\n</li>\n</ul>\n<h1 id=\"指令说明\"><a href=\"#指令说明\" class=\"headerlink\" title=\"指令说明\"></a>指令说明</h1><p>使用hexo首先要安装node.js和git。本文演示为windows系统下，linux和mac请参照官方文档。</p>\n<ul>\n<li>init</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo init [folder] # 在cmd命令下，cd到你所需要建立博客的文件夹，执行此命令，其中folder为可选指令，若不写，则默认当前目录。</div></pre></td></tr></table></figure>\n<ul>\n<li>new</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo new [layout] &lt;title&gt; <span class=\"comment\"># layout为可选项，默认使用_config.yml中的default_layout。新建文章的指令</span></div></pre></td></tr></table></figure>\n<ul>\n<li>generate</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo generate <span class=\"comment\"># 生成静态文件，</span></div><div class=\"line\"><span class=\"comment\"># 可选参数：</span></div><div class=\"line\"><span class=\"_\">-d</span> ,--deploy 文件生成后立即部署网站</div><div class=\"line\">-w , --watch 件事文件变动</div></pre></td></tr></table></figure>\n<p>该指令可以简写为<code>hexo g</code></p>\n<ul>\n<li>publish</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo publish [layout] &lt;filename&gt; <span class=\"comment\"># 发布草稿</span></div></pre></td></tr></table></figure>\n<ul>\n<li>server</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo server <span class=\"comment\"># 启动server，就可以在本地预览效果。</span></div><div class=\"line\"><span class=\"comment\"># 参数，默认网址http://localhost:4000/</span></div><div class=\"line\">-p , --port 重设端口</div><div class=\"line\"><span class=\"_\">-s</span> , --static 只是用静态文件</div><div class=\"line\"><span class=\"_\">-l</span> , --log 启动日志记录，使用覆盖记录格式</div><div class=\"line\">-i , --ip 重新制定服务器ip</div></pre></td></tr></table></figure>\n<ul>\n<li>deploy</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo deploy <span class=\"comment\"># 发布到网站，这里就是发布到_config.yml中deploy中设置的网址上。</span></div><div class=\"line\"><span class=\"comment\"># 参数</span></div><div class=\"line\">-g , --generate 部署前生成静态文件</div></pre></td></tr></table></figure>\n<p>该命令可以简写<code>hexo g</code></p>\n<ul>\n<li>render</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo render &lt;file1&gt; [file2] ... <span class=\"comment\"># 渲染文件</span></div><div class=\"line\"><span class=\"comment\"># 参数</span></div><div class=\"line\">-o , --output 设置输出路径</div></pre></td></tr></table></figure>\n<ul>\n<li>migrate</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo migrate &lt;<span class=\"built_in\">type</span>&gt; <span class=\"comment\"># 从其他博客系统迁移内容</span></div></pre></td></tr></table></figure>\n<ul>\n<li>clean</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo clean <span class=\"comment\"># 清除缓存文件(db.json)和已生成的静态文件(public)，通常更换主题后，无效时，可以运行此命令。</span></div></pre></td></tr></table></figure>\n<ul>\n<li>list</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo list &lt;<span class=\"built_in\">type</span>&gt; <span class=\"comment\"># 列出网站资料</span></div></pre></td></tr></table></figure>\n<ul>\n<li>version</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo version <span class=\"comment\"># 显示hexo版本信息</span></div></pre></td></tr></table></figure>\n<h4 id=\"选项指令\"><a href=\"#选项指令\" class=\"headerlink\" title=\"选项指令\"></a>选项指令</h4><blockquote>\n<ul>\n<li>选项指令</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; hexo --safe <span class=\"comment\"># 安全模式，会禁用插件和脚本。</span></div><div class=\"line\">&gt; hexo --debug <span class=\"comment\"># debug 模式</span></div><div class=\"line\">&gt; hexo --silent <span class=\"comment\"># 简洁模式，隐藏终端信息</span></div><div class=\"line\">&gt; hexo --config custom.yml <span class=\"comment\"># 自定义配置文件路径，如此就不会使用_config.yml了。</span></div><div class=\"line\">&gt; hexo --draft <span class=\"comment\"># 显示草稿，也就是source/_drafts</span></div><div class=\"line\">&gt; hexo --cwd /path/to/cwd <span class=\"comment\"># 自定义当前工作目录</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>迁移文章</p>\n<ul>\n<li><p>RSS 使用RSS需要安装<code>hexo-migrator-rss</code>插件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;     npm install hexo-migrator-rss --save</div><div class=\"line\">&gt;     <span class=\"comment\">#可使用如下命令，从RSS迁移所有文章</span></div><div class=\"line\">&gt;     hexo migrate rss &lt;<span class=\"built_in\">source</span>&gt;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>Jekyll 将<code>_post</code>文件夹内的文件复制到<code>source/posts</code>下，在<code>_config.yml</code>修改<code>new_post_name</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">&gt;     new_post_name: :year-:month-:day-:title.md</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>Octopress</p>\n<p>将Octopress中<code>source/_posts</code>文件复制到Hexo的对应目录下，在修改<code>_config.yml</code>中<code>new_post_name</code>参数</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">&gt;     new_post_name: :year-:month-:day-:title.md</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>WordPress</p>\n<p>需要安装<code>hexo-migrator-wordpress</code>插件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;     npm install hexo-migrator-wordpress --save</div><div class=\"line\">&gt;     <span class=\"comment\"># wordpress导出数据,然后hexo迁移</span></div><div class=\"line\">&gt;     hexo migrate wordpress &lt;<span class=\"built_in\">source</span>&gt; <span class=\"comment\"># source可以是网址，或者文件夹</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>Joomla</p>\n<p>安装<code>hexo-migrator-joomla</code>插件，类似wordpress迁移。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;     npm install hexo-migrator-joomla</div><div class=\"line\">&gt;     hexo migrate joomla &lt;<span class=\"built_in\">source</span>&gt;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"3、写作\"><a href=\"#3、写作\" class=\"headerlink\" title=\"3、写作\"></a>3、写作</h2><p>你可以执行下列命令来创建一篇新文章。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new [layout] &lt;title&gt;</div></pre></td></tr></table></figure>\n<p>您可以在命令中指定文章的布局（layout），默认为 <code>post</code>，可以通过修改 <code>_config.yml</code> 中的 <code>default_layout</code> 参数来指定默认布局。</p>\n<h4 id=\"布局（Layout）\"><a href=\"#布局（Layout）\" class=\"headerlink\" title=\"布局（Layout）\"></a>布局（Layout）</h4><p>Hexo 有三种默认布局：<code>post</code>、<code>page</code> 和 <code>draft</code>，它们分别对应不同的路径，而您自定义的其他布局和 <code>post</code> 相同，都将储存到 <code>source/_posts</code> 文件夹。</p>\n<table>\n<thead>\n<tr>\n<th>布局</th>\n<th>路径</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>post</code></td>\n<td><code>source/_posts</code></td>\n</tr>\n<tr>\n<td><code>page</code></td>\n<td><code>source</code></td>\n</tr>\n<tr>\n<td><code>draft</code></td>\n<td><code>source/_drafts</code></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p><strong>不要处理我的文章</strong> 如果你不想你的文章被处理，你可以将 Front-Matter 中的<code>layout:</code> 设为 <code>false</code> 。</p>\n</blockquote>\n<h4 id=\"文件名称\"><a href=\"#文件名称\" class=\"headerlink\" title=\"文件名称\"></a>文件名称</h4><p>Hexo 默认以标题做为文件名称，但您可编辑 <code>new_post_name</code> 参数来改变默认的文件名称，举例来说，设为 <code>:year-:month-:day-:title.md</code> 可让您更方便的通过日期来管理文章。</p>\n<table>\n<thead>\n<tr>\n<th>变量</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>:title</code></td>\n<td>标题（小写，空格将会被替换为短杠）</td>\n</tr>\n<tr>\n<td><code>:year</code></td>\n<td>建立的年份，比如， <code>2015</code></td>\n</tr>\n<tr>\n<td><code>:month</code></td>\n<td>建立的月份（有前导零），比如， <code>04</code></td>\n</tr>\n<tr>\n<td><code>:i_month</code></td>\n<td>建立的月份（无前导零），比如， <code>4</code></td>\n</tr>\n<tr>\n<td><code>:day</code></td>\n<td>建立的日期（有前导零），比如， <code>07</code></td>\n</tr>\n<tr>\n<td><code>:i_day</code></td>\n<td>建立的日期（无前导零），比如， <code>7</code></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"草稿\"><a href=\"#草稿\" class=\"headerlink\" title=\"草稿\"></a>草稿</h4><p>刚刚提到了 Hexo 的一种特殊布局：<code>draft</code>，这种布局在建立时会被保存到 <code>source/_drafts</code> 文件夹，您可通过 <code>publish</code> 命令将草稿移动到 <code>source/_posts</code> 文件夹，该命令的使用方式与 <code>new</code> 十分类似，您也可在命令中指定 <code>layout</code> 来指定布局。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo publish [layout] &lt;title&gt;</div></pre></td></tr></table></figure>\n<p>草稿默认不会显示在页面中，您可在执行时加上 <code>--draft</code> 参数，或是把 <code>render_drafts</code> 参数设为 <code>true</code>来预览草稿。</p>\n<h2 id=\"4、模版（Scaffold）\"><a href=\"#4、模版（Scaffold）\" class=\"headerlink\" title=\"4、模版（Scaffold）\"></a>4、模版（Scaffold）</h2><p>在新建文章时，Hexo 会根据 <code>scaffolds</code> 文件夹内相对应的文件来建立文件，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new photo &quot;My Gallery&quot;</div></pre></td></tr></table></figure>\n<p>在执行这行指令时，Hexo 会尝试在 <code>scaffolds</code> 文件夹中寻找 <code>photo.md</code>，并根据其内容建立文章，以下是您可以在模版中使用的变量：</p>\n<table>\n<thead>\n<tr>\n<th>变量</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>layout</code></td>\n<td>布局</td>\n</tr>\n<tr>\n<td><code>title</code></td>\n<td>标题</td>\n</tr>\n<tr>\n<td><code>date</code></td>\n<td>文件建立日期</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"5、Front-matter\"><a href=\"#5、Front-matter\" class=\"headerlink\" title=\"5、Front-matter\"></a>5、Front-matter</h2><p>Front-matter 是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量，举例来说：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: Hello World</div><div class=\"line\">date: 2013/7/13 20:46:25</div><div class=\"line\">---</div></pre></td></tr></table></figure>\n<p>以下是预先定义的参数，您可在模板中使用这些参数值并加以利用。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>layout</code></td>\n<td>布局</td>\n<td></td>\n</tr>\n<tr>\n<td><code>title</code></td>\n<td>标题</td>\n<td></td>\n</tr>\n<tr>\n<td><code>date</code></td>\n<td>建立日期</td>\n<td>文件建立日期</td>\n</tr>\n<tr>\n<td><code>updated</code></td>\n<td>更新日期</td>\n<td>文件更新日期</td>\n</tr>\n<tr>\n<td><code>comments</code></td>\n<td>开启文章的评论功能</td>\n<td>true</td>\n</tr>\n<tr>\n<td><code>tags</code></td>\n<td>标签（不适用于分页）</td>\n<td></td>\n</tr>\n<tr>\n<td><code>categories</code></td>\n<td>分类（不适用于分页）</td>\n<td></td>\n</tr>\n<tr>\n<td><code>permalink</code></td>\n<td>覆盖文章网址</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"分类和标签\"><a href=\"#分类和标签\" class=\"headerlink\" title=\"分类和标签\"></a>分类和标签</h4><p>只有文章支持分类和标签，您可以在 Front-matter 中设置。在其他系统中，分类和标签听起来很接近，但是在 Hexo 中两者有着明显的差别：分类具有顺序性和层次性，也就是说 <code>Foo, Bar</code> 不等于 <code>Bar, Foo</code>；而标签没有顺序和层次。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">categories:</div><div class=\"line\">- Diary</div><div class=\"line\">tags:</div><div class=\"line\">- PS3</div><div class=\"line\">- Games</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>分类方法的分歧</strong></p>\n<p>如果您有过使用WordPress的经验，就很容易误解Hexo的分类方式。WordPress支持对一篇文章设置多个分类，而且这些分类可以是同级的，也可以是父子分类。但是Hexo不支持指定多个同级分类。下面的指定方法：<br>categories:DiaryLife<br>会使分类<code>Life</code>成为<code>Diary</code>的子分类，而不是并列分类。因此，有必要为您的文章选择尽可能准确的分类。</p>\n</blockquote>\n<h4 id=\"JSON-Front-matter\"><a href=\"#JSON-Front-matter\" class=\"headerlink\" title=\"JSON Front-matter\"></a>JSON Front-matter</h4><p>除了 YAML 外，你也可以使用 JSON 来编写 Front-matter，只要将 <code>---</code> 代换成 <code>;;;</code> 即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;title&quot;: &quot;Hello World&quot;,</div><div class=\"line\">&quot;date&quot;: &quot;2013/7/13 20:46:25&quot;</div><div class=\"line\">;;;</div></pre></td></tr></table></figure>\n<p>标签插件和 Front-matter 中的标签不同，它们是用于在文章中快速插入特定内容的插件。</p>\n<h2 id=\"6、-标签插件（Tag-Plugins）\"><a href=\"#6、-标签插件（Tag-Plugins）\" class=\"headerlink\" title=\"6、 标签插件（Tag Plugins）\"></a>6、 标签插件（Tag Plugins）</h2><p>标签插件和 Front-matter 中的标签不同，它们是用于在文章中快速插入特定内容的插件。</p>\n<ul>\n<li><h4 id=\"引用块\"><a href=\"#引用块\" class=\"headerlink\" title=\"引用块\"></a>引用块</h4></li>\n</ul>\n<p>在文章中插入引言，可包含作者、来源和标题。</p>\n<p><strong>别号：</strong> quote</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;</div><div class=\"line\">content</div><div class=\"line\">&#123;% endblockquote %&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"样例\"><a href=\"#样例\" class=\"headerlink\" title=\"样例\"></a>样例</h4><p><strong>没有提供参数，则只输出普通的 blockquote</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% blockquote %&#125;</div><div class=\"line\">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</div><div class=\"line\">&#123;% endblockquote %&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</p>\n</blockquote>\n<p><strong>引用书上的句子</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% blockquote David Levithan, Wide Awake %&#125;</div><div class=\"line\">Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</div><div class=\"line\">&#123;% endblockquote %&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p>\n<p><strong>David Levithan</strong>Wide Awake</p>\n</blockquote>\n<p><strong>引用 Twitter</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% blockquote @DevDocs https://twitter.com/devdocs/status/356095192085962752 %&#125;</div><div class=\"line\">NEW: DevDocs now comes with syntax highlighting. http://devdocs.io</div><div class=\"line\">&#123;% endblockquote %&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>NEW: DevDocs now comes with syntax highlighting. <a href=\"http://devdocs.io/\" target=\"_blank\" rel=\"external\">http://devdocs.io</a></p>\n<p><strong>@DevDocs</strong><a href=\"https://twitter.com/devdocs/status/356095192085962752\" target=\"_blank\" rel=\"external\">twitter.com/devdocs/status/356095192085962752</a></p>\n</blockquote>\n<p><strong>引用网络上的文章</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% blockquote Seth Godin http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html Welcome to Island Marketing %&#125;</div><div class=\"line\">Every interaction is both precious and an opportunity to delight.</div><div class=\"line\">&#123;% endblockquote %&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Every interaction is both precious and an opportunity to delight.</p>\n<p><strong>Seth Godin</strong><a href=\"http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html\" target=\"_blank\" rel=\"external\">Welcome to Island Marketing</a></p>\n</blockquote>\n<ul>\n<li><h4 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h4></li>\n</ul>\n<p>在文章中插入代码。</p>\n<p><strong>别名：</strong> code</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% codeblock [title] [lang:language] [url] [link text] %&#125;</div><div class=\"line\">code snippet</div><div class=\"line\">&#123;% endcodeblock %&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"样例-1\"><a href=\"#样例-1\" class=\"headerlink\" title=\"样例\"></a>样例</h4><p><strong>普通的代码块</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% codeblock %&#125;</div><div class=\"line\">alert(&apos;Hello World!&apos;);</div><div class=\"line\">&#123;% endcodeblock %&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(&apos;Hello World!&apos;);</div></pre></td></tr></table></figure>\n<p><strong>指定语言</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% codeblock lang:objc %&#125;</div><div class=\"line\">[rectangle setX: 10 y: 10 width: 20 height: 20];</div><div class=\"line\">&#123;% endcodeblock %&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[rectangle setX: 10 y: 10 width: 20 height: 20];</div></pre></td></tr></table></figure>\n<p><strong>附加说明</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% codeblock Array.map %&#125;</div><div class=\"line\">array.map(callback[, thisArg])</div><div class=\"line\">&#123;% endcodeblock %&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Array.map</div><div class=\"line\">array.map(callback[, thisArg])</div></pre></td></tr></table></figure>\n<p><strong>附加说明和网址</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% codeblock _.compact http://underscorejs.org/#compact Underscore.js %&#125;</div><div class=\"line\">_.compact([0, 1, false, 2, &apos;&apos;, 3]);</div><div class=\"line\">=&gt; [1, 2, 3]</div><div class=\"line\">&#123;% endcodeblock %&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.compactUnderscore.js</div><div class=\"line\">_.compact([0, 1, false, 2, &apos;&apos;, 3]);</div><div class=\"line\">=&gt; [1, 2, 3]</div></pre></td></tr></table></figure>\n<ul>\n<li><h4 id=\"反引号代码块\"><a href=\"#反引号代码块\" class=\"headerlink\" title=\"反引号代码块\"></a>反引号代码块</h4></li>\n</ul>\n<p>另一种形式的代码块，不同的是它使用三个反引号来包裹。</p>\n<p>\\<figure class=\"highlight plain\"><figcaption><span>[title] [url] [link text] code snippet ```</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">- #### Pull Quote</div><div class=\"line\"></div><div class=\"line\">在文章中插入 Pull quote。</div></pre></td></tr></table></figure></p>\n<blockquote class=\"pullquote [class]\"><p>content</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">- #### jsFiddle</div><div class=\"line\"></div><div class=\"line\">在文章中嵌入 jsFiddle。</div></pre></td></tr></table></figure>\n<iframe scrolling=\"no\" width=\"[width]\" height=\"[height]\" src=\"http://jsfiddle.net/shorttag/embedded/[tabs]/[skin]\" frameborder=\"0\" allowfullscreen></iframe>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">- #### Gist</div><div class=\"line\"></div><div class=\"line\">在文章中嵌入 Gist。</div></pre></td></tr></table></figure>\n<script src=\"//gist.github.com/gist_id.js?file=[filename]\"></script>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">- #### iframe</div><div class=\"line\"></div><div class=\"line\">在文章中插入 iframe。</div></pre></td></tr></table></figure>\n<iframe src=\"url\" width=\"[width]\" height=\"[height]\" frameborder=\"0\" allowfullscreen></iframe>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">- #### Image</div><div class=\"line\"></div><div class=\"line\">在文章中插入指定大小的图片。</div></pre></td></tr></table></figure>\n<img src=\"/2017/03/21/Hexo学习笔记/to/image\" class=\"[class names]\" title=\"[width] [height] [title text [alt text]]\">\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">- #### Link</div><div class=\"line\"></div><div class=\"line\">在文章中插入链接，并自动给外部链接添加 `target=&quot;_blank&quot;` 属性。</div></pre></td></tr></table></figure>\n<a>text url [external] [title]</a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">- #### Include Code</div><div class=\"line\"></div><div class=\"line\">插入 `source` 文件夹内的代码文件。</div></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">- #### Youtube</div><div class=\"line\"></div><div class=\"line\">在文章中插入 Youtube 视频。</div></pre></td></tr></table></figure>\n<div class=\"video-container\"><iframe src=\"//www.youtube.com/embed/video_id\" frameborder=\"0\" allowfullscreen></iframe></div>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">- #### Vimeo</div><div class=\"line\"></div><div class=\"line\">在文章中插入 Vimeo 视频。</div></pre></td></tr></table></figure>\n<div class=\"video-container\"><iframe src=\"//player.vimeo.com/video/video_id\" frameborder=\"0\" allowfullscreen></iframe></div>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">- #### 引用文章</div><div class=\"line\"></div><div class=\"line\">引用其他文章的链接。</div></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">- #### 引用资源</div><div class=\"line\"></div><div class=\"line\">引用文章的资源。</div></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">- #### Raw</div><div class=\"line\"></div><div class=\"line\">如果您想在文章中插入 Swig 标签，可以尝试使用 Raw 标签，以免发生解析异常。</div></pre></td></tr></table></figure>\n\ncontent\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&gt; ==其上上面那么一大段，主要是用于编辑文章时候的文档语法，如果有自己的markdown编辑器，则可以用md文件，那么md语法就相对便捷。==[Markdown语法简介](http://blog.csdn.net/binglumeng/article/details/52949717)，注意有时候hexo不完全支持所有markdown的语法显示。</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">## 7、Asset资源文件夹</div><div class=\"line\"></div><div class=\"line\">Asset用于存放除了`source`文件夹中的文章意外的文件，比如图片、CSS/JS文件等。若仅有少量的图片，可以在`source/images`中存放，在文章中用`![](images/img.jpg)`引用。</div><div class=\"line\"></div><div class=\"line\">如果在`_config.yml`中配置了`post_asset_folder:true`那么Hexo创建新文章时候，会同时创建一个文件夹，存放相关资源。</div><div class=\"line\"></div><div class=\"line\">**注意：**有时候的markdown相对引用在文章中显示正常，但是发布后不一定可以，新版Hexo 3 中可以使用标签</div><div class=\"line\"></div><div class=\"line\">```yaml</div><div class=\"line\">&#123;% asset_path slug %&#125;</div><div class=\"line\">&#123;% asset_img slug [title] %&#125;</div><div class=\"line\">&#123;% asset_link slug [title] %&#125;</div></pre></td></tr></table></figure>\n<p>比如使用相对引用图片资源时候</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">&#123;%</span> <span class=\"string\">asset_img</span> <span class=\"string\">img.jpg</span> <span class=\"string\">avaster</span> <span class=\"string\">%&#125;</span> <span class=\"comment\"># 这就可以正常的显示相对引用的图片资源</span></div></pre></td></tr></table></figure>\n<h2 id=\"8、数据文件\"><a href=\"#8、数据文件\" class=\"headerlink\" title=\"8、数据文件\"></a>8、数据文件</h2><p>Hexo 3中增加了<code>数据文件</code>的功能，便于资源复用。通过加载<code>source/_data</code>下的<code>yaml 或json</code>文件。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 例如在source/_data下menu.yaml</span></div><div class=\"line\"><span class=\"attr\">Home:</span> <span class=\"string\">/</span></div><div class=\"line\"><span class=\"attr\">Gallery:</span> <span class=\"string\">/gallery/</span></div><div class=\"line\"><span class=\"attr\">Archives:</span> <span class=\"string\">/archivers/</span></div><div class=\"line\"><span class=\"comment\">#那么就可以在模板中使用</span></div><div class=\"line\"><span class=\"string\">&#123;%</span> <span class=\"string\">for</span> <span class=\"string\">link</span> <span class=\"string\">in</span> <span class=\"string\">site.data.menu</span> <span class=\"string\">%&#125;</span></div><div class=\"line\">\t<span class=\"string\">&lt;a</span> <span class=\"string\">href=\"&#123;&#123;</span> <span class=\"string\">link</span> <span class=\"string\">&#125;&#125;\"&gt;&#123;&#123;</span> <span class=\"string\">loop.key</span> <span class=\"string\">&#125;&#125;&lt;/a&gt;</span></div><div class=\"line\"><span class=\"string\">&#123;%</span> <span class=\"string\">endfor</span> <span class=\"string\">%&#125;</span></div></pre></td></tr></table></figure>\n<h2 id=\"9、部署\"><a href=\"#9、部署\" class=\"headerlink\" title=\"9、部署\"></a>9、部署</h2><p>在<code>_config.yml</code>中配置参数，就可以部署到服务器。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">deploy:</span></div><div class=\"line\">\t<span class=\"attr\">type:</span> <span class=\"string\">git</span> </div><div class=\"line\"><span class=\"comment\"># 可以多个type,通过缩进表示层级 ,冒号后面要有空格！</span></div><div class=\"line\"><span class=\"attr\">deploy:</span></div><div class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">git</span></div><div class=\"line\">\t<span class=\"attr\">repo:</span></div><div class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">type</span> <span class=\"string\">:heroku</span></div><div class=\"line\">\t<span class=\"attr\">repo:</span></div></pre></td></tr></table></figure>\n<ul>\n<li>git</li>\n</ul>\n<p>安装<code>hexo-deploy-git</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">hexo-deployer-git</span> <span class=\"bullet\">--save</span></div></pre></td></tr></table></figure>\n<p>配置<code>_config.yml</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">deploy:</span></div><div class=\"line\">\t<span class=\"attr\">type:</span> <span class=\"string\">git</span></div><div class=\"line\">\t<span class=\"attr\">repo:</span> <span class=\"string\">&lt;repository</span> <span class=\"string\">url&gt;</span></div><div class=\"line\"><span class=\"attr\">    branch:</span> <span class=\"string\">[branch]</span></div><div class=\"line\"><span class=\"attr\">    message:</span> <span class=\"string\">[message]</span> <span class=\"comment\">#用与git自动提交的信息说明，默认格式Site updated:&#123;&#123;now('YYYY-MM-DD HH:mm:ss)&#125;&#125;</span></div></pre></td></tr></table></figure>\n<h2 id=\"10、永久链接\"><a href=\"#10、永久链接\" class=\"headerlink\" title=\"10、永久链接\"></a>10、永久链接</h2><p><code>_config.yml</code>配置调用永久链接或在每篇文章的Front-matter中指定</p>\n<ul>\n<li>变量</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>变量</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>:year</code></td>\n<td>文章的发表年份（4 位数）</td>\n</tr>\n<tr>\n<td><code>:month</code></td>\n<td>文章的发表月份（2 位数）</td>\n</tr>\n<tr>\n<td><code>:i_month</code></td>\n<td>文章的发表月份（去掉开头的零）</td>\n</tr>\n<tr>\n<td><code>:day</code></td>\n<td>文章的发表日期 (2 位数)</td>\n</tr>\n<tr>\n<td><code>:i_day</code></td>\n<td>文章的发表日期（去掉开头的零）</td>\n</tr>\n<tr>\n<td><code>:title</code></td>\n<td>文件名称</td>\n</tr>\n<tr>\n<td><code>:id</code></td>\n<td>文章 ID</td>\n</tr>\n<tr>\n<td><code>:category</code></td>\n<td>分类。如果文章没有分类，则是 <code>default_category</code> 配置信息。</td>\n</tr>\n</tbody>\n</table>\n<p>修改<code>permalink_defaluts:</code>参数为空，就可以永久变量。</p>\n<ul>\n<li>多语言支持</li>\n</ul>\n<p>修改<code>new_post_name</code>和<code>permalink</code>参数：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">new_post_name:</span> <span class=\"string\">:lang/:title.md</span></div><div class=\"line\"><span class=\"attr\">permalink:</span> <span class=\"string\">:lang/:title/</span></div><div class=\"line\"><span class=\"comment\">#新建文章时候</span></div><div class=\"line\"><span class=\"string\">hexo</span> <span class=\"string\">new</span> <span class=\"string\">\"hello world\"</span> <span class=\"bullet\">--lang</span> <span class=\"string\">tw</span></div><div class=\"line\"><span class=\"comment\"># 则输出 =&gt; source/_posts/tw/hello-world.md,访问网址也会变成url/tw/hello-world/</span></div></pre></td></tr></table></figure>\n<h2 id=\"11、主题\"><a href=\"#11、主题\" class=\"headerlink\" title=\"11、主题\"></a>11、主题</h2><p>创建Hexo主题，在<code>themes</code>文件夹内，新增任意文件夹，修改<code>_config.yml</code>内<code>theme</code>设置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 主题的结构</span></div><div class=\"line\"><span class=\"string\">.</span></div><div class=\"line\"><span class=\"string\">|---</span> <span class=\"string\">_config.yml</span></div><div class=\"line\"><span class=\"string\">|---</span> <span class=\"string\">languages</span></div><div class=\"line\"><span class=\"string\">|---</span> <span class=\"string\">layout</span></div><div class=\"line\"><span class=\"string\">|---</span> <span class=\"string\">scripts</span></div><div class=\"line\"><span class=\"string\">|___</span> <span class=\"string\">source</span></div></pre></td></tr></table></figure>\n<h2 id=\"12、模板\"><a href=\"#12、模板\" class=\"headerlink\" title=\"12、模板\"></a>12、模板</h2><p>每个主题都必须有个<code>index</code>的模板，用于决定网站内容的呈现方式</p>\n<table>\n<thead>\n<tr>\n<th>模板</th>\n<th>用途</th>\n<th>回调</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>index</code></td>\n<td>首页</td>\n<td></td>\n</tr>\n<tr>\n<td><code>post</code></td>\n<td>文章</td>\n<td><code>index</code></td>\n</tr>\n<tr>\n<td><code>page</code></td>\n<td>分页</td>\n<td><code>index</code></td>\n</tr>\n<tr>\n<td><code>archive</code></td>\n<td>归档</td>\n<td><code>index</code></td>\n</tr>\n<tr>\n<td><code>category</code></td>\n<td>分类归档</td>\n<td><code>archive</code></td>\n</tr>\n<tr>\n<td><code>tag</code></td>\n<td>标签归档</td>\n<td><code>archive</code></td>\n</tr>\n</tbody>\n</table>\n","excerpt":"","more":"<h1 id=\"Hexo使用说明笔记\"><a href=\"#Hexo使用说明笔记\" class=\"headerlink\" title=\"Hexo使用说明笔记\"></a>Hexo使用说明笔记</h1><p>本文简要介绍如何使用Hexo在github上搭建一个个人博客网站，关于Hexo的详细使用说明，还请参考<a href=\"https://hexo.io/zh-cn/docs/index.html\">官方文档</a></p>\n<h2 id=\"1、文件简介\"><a href=\"#1、文件简介\" class=\"headerlink\" title=\"1、文件简介\"></a>1、文件简介</h2><p>在Hexo生成的目录下，大致有一下几个文件夹/文件：</p>\n<ul>\n<li><p>public 生成的网站文件，发布的站点文件。</p>\n</li>\n<li><p>source资源文件夹，用于存放内容。</p>\n</li>\n<li><p>tag 标签文件夹。</p>\n</li>\n<li><p>archive归档文件夹。</p>\n</li>\n<li><p>category分类文件夹。</p>\n</li>\n<li><p>downloads/code include code文件夹。</p>\n</li>\n<li><p>:lang i18n_dir 国际化文件夹。</p>\n</li>\n<li><p>_config.yml 配置文件</p>\n<ul>\n<li>配置说明</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Hexo Configuration</span></div><div class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/configuration.html</span></div><div class=\"line\"><span class=\"comment\">## Source: https://github.com/hexojs/hexo/</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Site，参数说明：title 网站标题；subtitle 网站副标题；description 网站描述，在搜索引擎中可被搜索的信息，可以配置描述关键字；author 作者姓名；language 网站语言；timezone 网站时区；</span></div><div class=\"line\"><span class=\"comment\"># 默认使用电脑本地时区，可以用时区表指定，如America/New_York，UTC等。</span></div><div class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">Binglumeng's</span> <span class=\"string\">Blog</span></div><div class=\"line\"><span class=\"attr\">subtitle:</span> <span class=\"string\">Just</span> <span class=\"string\">do</span> <span class=\"string\">what</span> <span class=\"string\">you</span> <span class=\"string\">want</span> <span class=\"string\">!</span></div><div class=\"line\"><span class=\"attr\">author:</span> <span class=\"string\">冰路梦</span></div><div class=\"line\"><span class=\"attr\">language:</span> </div><div class=\"line\"><span class=\"attr\">timezone:</span> </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># URL</span></div><div class=\"line\"><span class=\"comment\">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></div><div class=\"line\"><span class=\"comment\"># 参数说明：url 网址；root 网址根目录，要是网站存放在子目录，这里就要配置到子目录路径，如url是https://binglumeng.github.io ,而https://binglumeng.github.io/blog才是文件路径，那么root就要设置为/blog/；</span></div><div class=\"line\"><span class=\"comment\"># permalink 文章永久链接格式，:year/:month/:day/:title/ ;permalink_defaults 永久链接中各部分的默认值。</span></div><div class=\"line\"><span class=\"attr\">url:</span> <span class=\"attr\">https://binglumeng.github.io/</span></div><div class=\"line\"><span class=\"comment\"># root就是网址路径path</span></div><div class=\"line\"><span class=\"attr\">root:</span> <span class=\"string\">/binglumeng/</span></div><div class=\"line\"><span class=\"attr\">permalink:</span> <span class=\"string\">:year/:month/:day/:title/</span></div><div class=\"line\"><span class=\"attr\">permalink_defaults:</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Directory 目录参数说明：source_dir 资源文件夹，用于存放内容，默认值source；public_dir 公共文件夹，存放生成的站点文件，默认值public；</span></div><div class=\"line\"><span class=\"comment\"># tag_dir 标签文件夹 默认值tag；archive_dir 归档文件夹 默认值archives;category_dir 分类文件夹，默认值categories;</span></div><div class=\"line\"><span class=\"comment\"># code_dir include code 文件夹，默认值 downloads/code ;i18n_dir 国际化文件夹 ，默认值 :lang ；skip_render 跳过指定的渲染，可以使用glob表达式来匹配路径。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">source_dir:</span> <span class=\"string\">source</span></div><div class=\"line\"><span class=\"attr\">public_dir:</span> <span class=\"string\">public</span></div><div class=\"line\"><span class=\"attr\">tag_dir:</span> <span class=\"string\">tags</span></div><div class=\"line\"><span class=\"attr\">archive_dir:</span> <span class=\"string\">i_dont_wanna_use_default_archives</span></div><div class=\"line\"><span class=\"attr\">category_dir:</span> <span class=\"string\">categories</span></div><div class=\"line\"><span class=\"attr\">code_dir:</span> <span class=\"string\">downloads/code</span></div><div class=\"line\"><span class=\"attr\">i18n_dir:</span> <span class=\"string\">:lang</span></div><div class=\"line\"><span class=\"attr\">skip_render:</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Writing 文章相关参数：new_post_name 新文章文件名 ，默认值:title.md ;</span></div><div class=\"line\"><span class=\"comment\"># default_category 预设布局，默认值 post ;</span></div><div class=\"line\"><span class=\"comment\"># auto_spacing 中英文之间加入空格，默认 false；</span></div><div class=\"line\"><span class=\"comment\"># titlecase 把标题转换为title case 默认值 false；</span></div><div class=\"line\"><span class=\"comment\"># external_link 新标签中打开链接 ，默认值 true；</span></div><div class=\"line\"><span class=\"comment\"># filename_case 把文件名转换为(1)小写或(2)大写。默认值0；</span></div><div class=\"line\"><span class=\"comment\"># render_drafts 显示草稿，默认值false；</span></div><div class=\"line\"><span class=\"comment\"># post_asset_folder 启动Asset文件夹，默认值false；</span></div><div class=\"line\"><span class=\"comment\"># relative_link 把链接改为与根目录的相对路径位置，默认值false；</span></div><div class=\"line\"><span class=\"comment\"># future 显示未来的文章，默认值true；</span></div><div class=\"line\"><span class=\"comment\"># highlight 代码块设置</span></div><div class=\"line\"><span class=\"attr\">new_post_name:</span> <span class=\"string\">:title.md</span> <span class=\"comment\"># File name of new posts</span></div><div class=\"line\"><span class=\"attr\">default_layout:</span> <span class=\"string\">post</span> </div><div class=\"line\"><span class=\"attr\">titlecase:</span> <span class=\"literal\">false</span> <span class=\"comment\"># Transform title into titlecase</span></div><div class=\"line\"><span class=\"attr\">external_link:</span> <span class=\"literal\">true</span> <span class=\"comment\"># Open external links in new tab</span></div><div class=\"line\"><span class=\"attr\">filename_case:</span> <span class=\"number\">0</span></div><div class=\"line\"><span class=\"attr\">render_drafts:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">post_asset_folder:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">relative_link:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">future:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">highlight:</span></div><div class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">  line_number:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">  auto_detect:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">  tab_replace:</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Category &amp; Tag 分类和标签 ，default_categorty 默认分类，默认值 uncategorized;</span></div><div class=\"line\"><span class=\"comment\"># category_map 分类别名；tag_map 标签别名</span></div><div class=\"line\"><span class=\"attr\">default_category:</span> <span class=\"string\">uncategorized</span></div><div class=\"line\"><span class=\"attr\">category_map:</span></div><div class=\"line\"><span class=\"attr\">tag_map:</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Date / Time format 日期时间格式 date_format 日期格式 ，默认是YYYY-MM-DD ；time_format 时间格式 ，H:mm:ss</span></div><div class=\"line\"><span class=\"comment\">## Hexo uses Moment.js to parse and display date</span></div><div class=\"line\"><span class=\"comment\">## You can customize the date format as defined in</span></div><div class=\"line\"><span class=\"comment\">## http://momentjs.com/docs/#/displaying/format/</span></div><div class=\"line\"><span class=\"attr\">date_format:</span> <span class=\"string\">YYYY-MM-DD</span></div><div class=\"line\"><span class=\"attr\">time_format:</span> <span class=\"attr\">HH:mm:ss</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Pagination 分页 per_page 每页显示的文章数，0表示关闭分页。默认值10；</span></div><div class=\"line\"><span class=\"comment\"># pagination_dir 分页目录，默认值page</span></div><div class=\"line\"><span class=\"comment\">## Set per_page to 0 to disable pagination</span></div><div class=\"line\"><span class=\"attr\">per_page:</span> <span class=\"number\">10</span></div><div class=\"line\"><span class=\"attr\">pagination_dir:</span> <span class=\"string\">page</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Extensions 扩展，theme 当前主题的名称 ，false表示禁止使用主题。</span></div><div class=\"line\"><span class=\"comment\">## Plugins: https://hexo.io/plugins/</span></div><div class=\"line\"><span class=\"comment\">## Themes: https://hexo.io/themes/</span></div><div class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">binglumeng</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Deployment 部署的设置</span></div><div class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></div><div class=\"line\"><span class=\"attr\">deploy:</span></div><div class=\"line\"><span class=\"attr\">  type:</span> <span class=\"string\">git</span></div><div class=\"line\"><span class=\"attr\">  repo:</span> <span class=\"attr\">https://github.com/</span></div><div class=\"line\"><span class=\"attr\">  branch:</span> <span class=\"string\">master</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>package.json 包信息</p>\n</li>\n</ul>\n<h1 id=\"指令说明\"><a href=\"#指令说明\" class=\"headerlink\" title=\"指令说明\"></a>指令说明</h1><p>使用hexo首先要安装node.js和git。本文演示为windows系统下，linux和mac请参照官方文档。</p>\n<ul>\n<li>init</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo init [folder] # 在cmd命令下，cd到你所需要建立博客的文件夹，执行此命令，其中folder为可选指令，若不写，则默认当前目录。</div></pre></td></tr></table></figure>\n<ul>\n<li>new</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo new [layout] &lt;title&gt; <span class=\"comment\"># layout为可选项，默认使用_config.yml中的default_layout。新建文章的指令</span></div></pre></td></tr></table></figure>\n<ul>\n<li>generate</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo generate <span class=\"comment\"># 生成静态文件，</span></div><div class=\"line\"><span class=\"comment\"># 可选参数：</span></div><div class=\"line\"><span class=\"_\">-d</span> ,--deploy 文件生成后立即部署网站</div><div class=\"line\">-w , --watch 件事文件变动</div></pre></td></tr></table></figure>\n<p>该指令可以简写为<code>hexo g</code></p>\n<ul>\n<li>publish</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo publish [layout] &lt;filename&gt; <span class=\"comment\"># 发布草稿</span></div></pre></td></tr></table></figure>\n<ul>\n<li>server</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo server <span class=\"comment\"># 启动server，就可以在本地预览效果。</span></div><div class=\"line\"><span class=\"comment\"># 参数，默认网址http://localhost:4000/</span></div><div class=\"line\">-p , --port 重设端口</div><div class=\"line\"><span class=\"_\">-s</span> , --static 只是用静态文件</div><div class=\"line\"><span class=\"_\">-l</span> , --log 启动日志记录，使用覆盖记录格式</div><div class=\"line\">-i , --ip 重新制定服务器ip</div></pre></td></tr></table></figure>\n<ul>\n<li>deploy</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo deploy <span class=\"comment\"># 发布到网站，这里就是发布到_config.yml中deploy中设置的网址上。</span></div><div class=\"line\"><span class=\"comment\"># 参数</span></div><div class=\"line\">-g , --generate 部署前生成静态文件</div></pre></td></tr></table></figure>\n<p>该命令可以简写<code>hexo g</code></p>\n<ul>\n<li>render</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo render &lt;file1&gt; [file2] ... <span class=\"comment\"># 渲染文件</span></div><div class=\"line\"><span class=\"comment\"># 参数</span></div><div class=\"line\">-o , --output 设置输出路径</div></pre></td></tr></table></figure>\n<ul>\n<li>migrate</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo migrate &lt;<span class=\"built_in\">type</span>&gt; <span class=\"comment\"># 从其他博客系统迁移内容</span></div></pre></td></tr></table></figure>\n<ul>\n<li>clean</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo clean <span class=\"comment\"># 清除缓存文件(db.json)和已生成的静态文件(public)，通常更换主题后，无效时，可以运行此命令。</span></div></pre></td></tr></table></figure>\n<ul>\n<li>list</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo list &lt;<span class=\"built_in\">type</span>&gt; <span class=\"comment\"># 列出网站资料</span></div></pre></td></tr></table></figure>\n<ul>\n<li>version</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo version <span class=\"comment\"># 显示hexo版本信息</span></div></pre></td></tr></table></figure>\n<h4 id=\"选项指令\"><a href=\"#选项指令\" class=\"headerlink\" title=\"选项指令\"></a>选项指令</h4><blockquote>\n<ul>\n<li>选项指令</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; hexo --safe <span class=\"comment\"># 安全模式，会禁用插件和脚本。</span></div><div class=\"line\">&gt; hexo --debug <span class=\"comment\"># debug 模式</span></div><div class=\"line\">&gt; hexo --silent <span class=\"comment\"># 简洁模式，隐藏终端信息</span></div><div class=\"line\">&gt; hexo --config custom.yml <span class=\"comment\"># 自定义配置文件路径，如此就不会使用_config.yml了。</span></div><div class=\"line\">&gt; hexo --draft <span class=\"comment\"># 显示草稿，也就是source/_drafts</span></div><div class=\"line\">&gt; hexo --cwd /path/to/cwd <span class=\"comment\"># 自定义当前工作目录</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>迁移文章</p>\n<ul>\n<li><p>RSS 使用RSS需要安装<code>hexo-migrator-rss</code>插件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;     npm install hexo-migrator-rss --save</div><div class=\"line\">&gt;     <span class=\"comment\">#可使用如下命令，从RSS迁移所有文章</span></div><div class=\"line\">&gt;     hexo migrate rss &lt;<span class=\"built_in\">source</span>&gt;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>Jekyll 将<code>_post</code>文件夹内的文件复制到<code>source/posts</code>下，在<code>_config.yml</code>修改<code>new_post_name</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">&gt;     new_post_name: :year-:month-:day-:title.md</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>Octopress</p>\n<p>将Octopress中<code>source/_posts</code>文件复制到Hexo的对应目录下，在修改<code>_config.yml</code>中<code>new_post_name</code>参数</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">&gt;     new_post_name: :year-:month-:day-:title.md</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>WordPress</p>\n<p>需要安装<code>hexo-migrator-wordpress</code>插件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;     npm install hexo-migrator-wordpress --save</div><div class=\"line\">&gt;     <span class=\"comment\"># wordpress导出数据,然后hexo迁移</span></div><div class=\"line\">&gt;     hexo migrate wordpress &lt;<span class=\"built_in\">source</span>&gt; <span class=\"comment\"># source可以是网址，或者文件夹</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>Joomla</p>\n<p>安装<code>hexo-migrator-joomla</code>插件，类似wordpress迁移。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;     npm install hexo-migrator-joomla</div><div class=\"line\">&gt;     hexo migrate joomla &lt;<span class=\"built_in\">source</span>&gt;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"3、写作\"><a href=\"#3、写作\" class=\"headerlink\" title=\"3、写作\"></a>3、写作</h2><p>你可以执行下列命令来创建一篇新文章。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new [layout] &lt;title&gt;</div></pre></td></tr></table></figure>\n<p>您可以在命令中指定文章的布局（layout），默认为 <code>post</code>，可以通过修改 <code>_config.yml</code> 中的 <code>default_layout</code> 参数来指定默认布局。</p>\n<h4 id=\"布局（Layout）\"><a href=\"#布局（Layout）\" class=\"headerlink\" title=\"布局（Layout）\"></a>布局（Layout）</h4><p>Hexo 有三种默认布局：<code>post</code>、<code>page</code> 和 <code>draft</code>，它们分别对应不同的路径，而您自定义的其他布局和 <code>post</code> 相同，都将储存到 <code>source/_posts</code> 文件夹。</p>\n<table>\n<thead>\n<tr>\n<th>布局</th>\n<th>路径</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>post</code></td>\n<td><code>source/_posts</code></td>\n</tr>\n<tr>\n<td><code>page</code></td>\n<td><code>source</code></td>\n</tr>\n<tr>\n<td><code>draft</code></td>\n<td><code>source/_drafts</code></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p><strong>不要处理我的文章</strong> 如果你不想你的文章被处理，你可以将 Front-Matter 中的<code>layout:</code> 设为 <code>false</code> 。</p>\n</blockquote>\n<h4 id=\"文件名称\"><a href=\"#文件名称\" class=\"headerlink\" title=\"文件名称\"></a>文件名称</h4><p>Hexo 默认以标题做为文件名称，但您可编辑 <code>new_post_name</code> 参数来改变默认的文件名称，举例来说，设为 <code>:year-:month-:day-:title.md</code> 可让您更方便的通过日期来管理文章。</p>\n<table>\n<thead>\n<tr>\n<th>变量</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>:title</code></td>\n<td>标题（小写，空格将会被替换为短杠）</td>\n</tr>\n<tr>\n<td><code>:year</code></td>\n<td>建立的年份，比如， <code>2015</code></td>\n</tr>\n<tr>\n<td><code>:month</code></td>\n<td>建立的月份（有前导零），比如， <code>04</code></td>\n</tr>\n<tr>\n<td><code>:i_month</code></td>\n<td>建立的月份（无前导零），比如， <code>4</code></td>\n</tr>\n<tr>\n<td><code>:day</code></td>\n<td>建立的日期（有前导零），比如， <code>07</code></td>\n</tr>\n<tr>\n<td><code>:i_day</code></td>\n<td>建立的日期（无前导零），比如， <code>7</code></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"草稿\"><a href=\"#草稿\" class=\"headerlink\" title=\"草稿\"></a>草稿</h4><p>刚刚提到了 Hexo 的一种特殊布局：<code>draft</code>，这种布局在建立时会被保存到 <code>source/_drafts</code> 文件夹，您可通过 <code>publish</code> 命令将草稿移动到 <code>source/_posts</code> 文件夹，该命令的使用方式与 <code>new</code> 十分类似，您也可在命令中指定 <code>layout</code> 来指定布局。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo publish [layout] &lt;title&gt;</div></pre></td></tr></table></figure>\n<p>草稿默认不会显示在页面中，您可在执行时加上 <code>--draft</code> 参数，或是把 <code>render_drafts</code> 参数设为 <code>true</code>来预览草稿。</p>\n<h2 id=\"4、模版（Scaffold）\"><a href=\"#4、模版（Scaffold）\" class=\"headerlink\" title=\"4、模版（Scaffold）\"></a>4、模版（Scaffold）</h2><p>在新建文章时，Hexo 会根据 <code>scaffolds</code> 文件夹内相对应的文件来建立文件，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new photo &quot;My Gallery&quot;</div></pre></td></tr></table></figure>\n<p>在执行这行指令时，Hexo 会尝试在 <code>scaffolds</code> 文件夹中寻找 <code>photo.md</code>，并根据其内容建立文章，以下是您可以在模版中使用的变量：</p>\n<table>\n<thead>\n<tr>\n<th>变量</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>layout</code></td>\n<td>布局</td>\n</tr>\n<tr>\n<td><code>title</code></td>\n<td>标题</td>\n</tr>\n<tr>\n<td><code>date</code></td>\n<td>文件建立日期</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"5、Front-matter\"><a href=\"#5、Front-matter\" class=\"headerlink\" title=\"5、Front-matter\"></a>5、Front-matter</h2><p>Front-matter 是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量，举例来说：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: Hello World</div><div class=\"line\">date: 2013/7/13 20:46:25</div><div class=\"line\">---</div></pre></td></tr></table></figure>\n<p>以下是预先定义的参数，您可在模板中使用这些参数值并加以利用。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>layout</code></td>\n<td>布局</td>\n<td></td>\n</tr>\n<tr>\n<td><code>title</code></td>\n<td>标题</td>\n<td></td>\n</tr>\n<tr>\n<td><code>date</code></td>\n<td>建立日期</td>\n<td>文件建立日期</td>\n</tr>\n<tr>\n<td><code>updated</code></td>\n<td>更新日期</td>\n<td>文件更新日期</td>\n</tr>\n<tr>\n<td><code>comments</code></td>\n<td>开启文章的评论功能</td>\n<td>true</td>\n</tr>\n<tr>\n<td><code>tags</code></td>\n<td>标签（不适用于分页）</td>\n<td></td>\n</tr>\n<tr>\n<td><code>categories</code></td>\n<td>分类（不适用于分页）</td>\n<td></td>\n</tr>\n<tr>\n<td><code>permalink</code></td>\n<td>覆盖文章网址</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"分类和标签\"><a href=\"#分类和标签\" class=\"headerlink\" title=\"分类和标签\"></a>分类和标签</h4><p>只有文章支持分类和标签，您可以在 Front-matter 中设置。在其他系统中，分类和标签听起来很接近，但是在 Hexo 中两者有着明显的差别：分类具有顺序性和层次性，也就是说 <code>Foo, Bar</code> 不等于 <code>Bar, Foo</code>；而标签没有顺序和层次。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">categories:</div><div class=\"line\">- Diary</div><div class=\"line\">tags:</div><div class=\"line\">- PS3</div><div class=\"line\">- Games</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>分类方法的分歧</strong></p>\n<p>如果您有过使用WordPress的经验，就很容易误解Hexo的分类方式。WordPress支持对一篇文章设置多个分类，而且这些分类可以是同级的，也可以是父子分类。但是Hexo不支持指定多个同级分类。下面的指定方法：<br>categories:DiaryLife<br>会使分类<code>Life</code>成为<code>Diary</code>的子分类，而不是并列分类。因此，有必要为您的文章选择尽可能准确的分类。</p>\n</blockquote>\n<h4 id=\"JSON-Front-matter\"><a href=\"#JSON-Front-matter\" class=\"headerlink\" title=\"JSON Front-matter\"></a>JSON Front-matter</h4><p>除了 YAML 外，你也可以使用 JSON 来编写 Front-matter，只要将 <code>---</code> 代换成 <code>;;;</code> 即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;title&quot;: &quot;Hello World&quot;,</div><div class=\"line\">&quot;date&quot;: &quot;2013/7/13 20:46:25&quot;</div><div class=\"line\">;;;</div></pre></td></tr></table></figure>\n<p>标签插件和 Front-matter 中的标签不同，它们是用于在文章中快速插入特定内容的插件。</p>\n<h2 id=\"6、-标签插件（Tag-Plugins）\"><a href=\"#6、-标签插件（Tag-Plugins）\" class=\"headerlink\" title=\"6、 标签插件（Tag Plugins）\"></a>6、 标签插件（Tag Plugins）</h2><p>标签插件和 Front-matter 中的标签不同，它们是用于在文章中快速插入特定内容的插件。</p>\n<ul>\n<li><h4 id=\"引用块\"><a href=\"#引用块\" class=\"headerlink\" title=\"引用块\"></a>引用块</h4></li>\n</ul>\n<p>在文章中插入引言，可包含作者、来源和标题。</p>\n<p><strong>别号：</strong> quote</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;</div><div class=\"line\">content</div><div class=\"line\">&#123;% endblockquote %&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"样例\"><a href=\"#样例\" class=\"headerlink\" title=\"样例\"></a>样例</h4><p><strong>没有提供参数，则只输出普通的 blockquote</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% blockquote %&#125;</div><div class=\"line\">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</div><div class=\"line\">&#123;% endblockquote %&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</p>\n</blockquote>\n<p><strong>引用书上的句子</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% blockquote David Levithan, Wide Awake %&#125;</div><div class=\"line\">Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</div><div class=\"line\">&#123;% endblockquote %&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p>\n<p><strong>David Levithan</strong>Wide Awake</p>\n</blockquote>\n<p><strong>引用 Twitter</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% blockquote @DevDocs https://twitter.com/devdocs/status/356095192085962752 %&#125;</div><div class=\"line\">NEW: DevDocs now comes with syntax highlighting. http://devdocs.io</div><div class=\"line\">&#123;% endblockquote %&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>NEW: DevDocs now comes with syntax highlighting. <a href=\"http://devdocs.io/\">http://devdocs.io</a></p>\n<p><strong>@DevDocs</strong><a href=\"https://twitter.com/devdocs/status/356095192085962752\">twitter.com/devdocs/status/356095192085962752</a></p>\n</blockquote>\n<p><strong>引用网络上的文章</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% blockquote Seth Godin http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html Welcome to Island Marketing %&#125;</div><div class=\"line\">Every interaction is both precious and an opportunity to delight.</div><div class=\"line\">&#123;% endblockquote %&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Every interaction is both precious and an opportunity to delight.</p>\n<p><strong>Seth Godin</strong><a href=\"http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html\">Welcome to Island Marketing</a></p>\n</blockquote>\n<ul>\n<li><h4 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h4></li>\n</ul>\n<p>在文章中插入代码。</p>\n<p><strong>别名：</strong> code</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% codeblock [title] [lang:language] [url] [link text] %&#125;</div><div class=\"line\">code snippet</div><div class=\"line\">&#123;% endcodeblock %&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"样例-1\"><a href=\"#样例-1\" class=\"headerlink\" title=\"样例\"></a>样例</h4><p><strong>普通的代码块</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% codeblock %&#125;</div><div class=\"line\">alert(&apos;Hello World!&apos;);</div><div class=\"line\">&#123;% endcodeblock %&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(&apos;Hello World!&apos;);</div></pre></td></tr></table></figure>\n<p><strong>指定语言</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% codeblock lang:objc %&#125;</div><div class=\"line\">[rectangle setX: 10 y: 10 width: 20 height: 20];</div><div class=\"line\">&#123;% endcodeblock %&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[rectangle setX: 10 y: 10 width: 20 height: 20];</div></pre></td></tr></table></figure>\n<p><strong>附加说明</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% codeblock Array.map %&#125;</div><div class=\"line\">array.map(callback[, thisArg])</div><div class=\"line\">&#123;% endcodeblock %&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Array.map</div><div class=\"line\">array.map(callback[, thisArg])</div></pre></td></tr></table></figure>\n<p><strong>附加说明和网址</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% codeblock _.compact http://underscorejs.org/#compact Underscore.js %&#125;</div><div class=\"line\">_.compact([0, 1, false, 2, &apos;&apos;, 3]);</div><div class=\"line\">=&gt; [1, 2, 3]</div><div class=\"line\">&#123;% endcodeblock %&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">_.compactUnderscore.js</div><div class=\"line\">_.compact([0, 1, false, 2, &apos;&apos;, 3]);</div><div class=\"line\">=&gt; [1, 2, 3]</div></pre></td></tr></table></figure>\n<ul>\n<li><h4 id=\"反引号代码块\"><a href=\"#反引号代码块\" class=\"headerlink\" title=\"反引号代码块\"></a>反引号代码块</h4></li>\n</ul>\n<p>另一种形式的代码块，不同的是它使用三个反引号来包裹。</p>\n<p>\\<figure class=\"highlight plain\"><figcaption><span>[title] [url] [link text] code snippet ```</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">- #### Pull Quote</div><div class=\"line\"></div><div class=\"line\">在文章中插入 Pull quote。</div></pre></td></tr></table></figure></p>\n<blockquote class=\"pullquote [class]\"><p>content</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">- #### jsFiddle</div><div class=\"line\"></div><div class=\"line\">在文章中嵌入 jsFiddle。</div></pre></td></tr></table></figure>\n<iframe scrolling=\"no\" width=\"[width]\" height=\"[height]\" src=\"http://jsfiddle.net/shorttag/embedded/[tabs]/[skin]\" frameborder=\"0\" allowfullscreen></iframe>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">- #### Gist</div><div class=\"line\"></div><div class=\"line\">在文章中嵌入 Gist。</div></pre></td></tr></table></figure>\n<script src=\"//gist.github.com/gist_id.js?file=[filename]\"></script>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">- #### iframe</div><div class=\"line\"></div><div class=\"line\">在文章中插入 iframe。</div></pre></td></tr></table></figure>\n<iframe src=\"url\" width=\"[width]\" height=\"[height]\" frameborder=\"0\" allowfullscreen></iframe>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">- #### Image</div><div class=\"line\"></div><div class=\"line\">在文章中插入指定大小的图片。</div></pre></td></tr></table></figure>\n<img src=\"/2017/03/21/Hexo学习笔记/to/image\" class=\"[class names]\" title=\"[width] [height] [title text [alt text]]\">\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">- #### Link</div><div class=\"line\"></div><div class=\"line\">在文章中插入链接，并自动给外部链接添加 `target=&quot;_blank&quot;` 属性。</div></pre></td></tr></table></figure>\n<a>text url [external] [title]</a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">- #### Include Code</div><div class=\"line\"></div><div class=\"line\">插入 `source` 文件夹内的代码文件。</div></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">- #### Youtube</div><div class=\"line\"></div><div class=\"line\">在文章中插入 Youtube 视频。</div></pre></td></tr></table></figure>\n<div class=\"video-container\"><iframe src=\"//www.youtube.com/embed/video_id\" frameborder=\"0\" allowfullscreen></iframe></div>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">- #### Vimeo</div><div class=\"line\"></div><div class=\"line\">在文章中插入 Vimeo 视频。</div></pre></td></tr></table></figure>\n<div class=\"video-container\"><iframe src=\"//player.vimeo.com/video/video_id\" frameborder=\"0\" allowfullscreen></iframe></div>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">- #### 引用文章</div><div class=\"line\"></div><div class=\"line\">引用其他文章的链接。</div></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">- #### 引用资源</div><div class=\"line\"></div><div class=\"line\">引用文章的资源。</div></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">- #### Raw</div><div class=\"line\"></div><div class=\"line\">如果您想在文章中插入 Swig 标签，可以尝试使用 Raw 标签，以免发生解析异常。</div></pre></td></tr></table></figure>\n\ncontent\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&gt; ==其上上面那么一大段，主要是用于编辑文章时候的文档语法，如果有自己的markdown编辑器，则可以用md文件，那么md语法就相对便捷。==[Markdown语法简介](http://blog.csdn.net/binglumeng/article/details/52949717)，注意有时候hexo不完全支持所有markdown的语法显示。</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">## 7、Asset资源文件夹</div><div class=\"line\"></div><div class=\"line\">Asset用于存放除了`source`文件夹中的文章意外的文件，比如图片、CSS/JS文件等。若仅有少量的图片，可以在`source/images`中存放，在文章中用`![](images/img.jpg)`引用。</div><div class=\"line\"></div><div class=\"line\">如果在`_config.yml`中配置了`post_asset_folder:true`那么Hexo创建新文章时候，会同时创建一个文件夹，存放相关资源。</div><div class=\"line\"></div><div class=\"line\">**注意：**有时候的markdown相对引用在文章中显示正常，但是发布后不一定可以，新版Hexo 3 中可以使用标签</div><div class=\"line\"></div><div class=\"line\">```yaml</div><div class=\"line\">&#123;% asset_path slug %&#125;</div><div class=\"line\">&#123;% asset_img slug [title] %&#125;</div><div class=\"line\">&#123;% asset_link slug [title] %&#125;</div></pre></td></tr></table></figure>\n<p>比如使用相对引用图片资源时候</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">&#123;%</span> <span class=\"string\">asset_img</span> <span class=\"string\">img.jpg</span> <span class=\"string\">avaster</span> <span class=\"string\">%&#125;</span> <span class=\"comment\"># 这就可以正常的显示相对引用的图片资源</span></div></pre></td></tr></table></figure>\n<h2 id=\"8、数据文件\"><a href=\"#8、数据文件\" class=\"headerlink\" title=\"8、数据文件\"></a>8、数据文件</h2><p>Hexo 3中增加了<code>数据文件</code>的功能，便于资源复用。通过加载<code>source/_data</code>下的<code>yaml 或json</code>文件。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 例如在source/_data下menu.yaml</span></div><div class=\"line\"><span class=\"attr\">Home:</span> <span class=\"string\">/</span></div><div class=\"line\"><span class=\"attr\">Gallery:</span> <span class=\"string\">/gallery/</span></div><div class=\"line\"><span class=\"attr\">Archives:</span> <span class=\"string\">/archivers/</span></div><div class=\"line\"><span class=\"comment\">#那么就可以在模板中使用</span></div><div class=\"line\"><span class=\"string\">&#123;%</span> <span class=\"string\">for</span> <span class=\"string\">link</span> <span class=\"string\">in</span> <span class=\"string\">site.data.menu</span> <span class=\"string\">%&#125;</span></div><div class=\"line\">\t<span class=\"string\">&lt;a</span> <span class=\"string\">href=\"&#123;&#123;</span> <span class=\"string\">link</span> <span class=\"string\">&#125;&#125;\"&gt;&#123;&#123;</span> <span class=\"string\">loop.key</span> <span class=\"string\">&#125;&#125;&lt;/a&gt;</span></div><div class=\"line\"><span class=\"string\">&#123;%</span> <span class=\"string\">endfor</span> <span class=\"string\">%&#125;</span></div></pre></td></tr></table></figure>\n<h2 id=\"9、部署\"><a href=\"#9、部署\" class=\"headerlink\" title=\"9、部署\"></a>9、部署</h2><p>在<code>_config.yml</code>中配置参数，就可以部署到服务器。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">deploy:</span></div><div class=\"line\">\t<span class=\"attr\">type:</span> <span class=\"string\">git</span> </div><div class=\"line\"><span class=\"comment\"># 可以多个type,通过缩进表示层级 ,冒号后面要有空格！</span></div><div class=\"line\"><span class=\"attr\">deploy:</span></div><div class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">git</span></div><div class=\"line\">\t<span class=\"attr\">repo:</span></div><div class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">type</span> <span class=\"string\">:heroku</span></div><div class=\"line\">\t<span class=\"attr\">repo:</span></div></pre></td></tr></table></figure>\n<ul>\n<li>git</li>\n</ul>\n<p>安装<code>hexo-deploy-git</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">hexo-deployer-git</span> <span class=\"bullet\">--save</span></div></pre></td></tr></table></figure>\n<p>配置<code>_config.yml</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">deploy:</span></div><div class=\"line\">\t<span class=\"attr\">type:</span> <span class=\"string\">git</span></div><div class=\"line\">\t<span class=\"attr\">repo:</span> <span class=\"string\">&lt;repository</span> <span class=\"string\">url&gt;</span></div><div class=\"line\"><span class=\"attr\">    branch:</span> <span class=\"string\">[branch]</span></div><div class=\"line\"><span class=\"attr\">    message:</span> <span class=\"string\">[message]</span> <span class=\"comment\">#用与git自动提交的信息说明，默认格式Site updated:&#123;&#123;now('YYYY-MM-DD HH:mm:ss)&#125;&#125;</span></div></pre></td></tr></table></figure>\n<h2 id=\"10、永久链接\"><a href=\"#10、永久链接\" class=\"headerlink\" title=\"10、永久链接\"></a>10、永久链接</h2><p><code>_config.yml</code>配置调用永久链接或在每篇文章的Front-matter中指定</p>\n<ul>\n<li>变量</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>变量</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>:year</code></td>\n<td>文章的发表年份（4 位数）</td>\n</tr>\n<tr>\n<td><code>:month</code></td>\n<td>文章的发表月份（2 位数）</td>\n</tr>\n<tr>\n<td><code>:i_month</code></td>\n<td>文章的发表月份（去掉开头的零）</td>\n</tr>\n<tr>\n<td><code>:day</code></td>\n<td>文章的发表日期 (2 位数)</td>\n</tr>\n<tr>\n<td><code>:i_day</code></td>\n<td>文章的发表日期（去掉开头的零）</td>\n</tr>\n<tr>\n<td><code>:title</code></td>\n<td>文件名称</td>\n</tr>\n<tr>\n<td><code>:id</code></td>\n<td>文章 ID</td>\n</tr>\n<tr>\n<td><code>:category</code></td>\n<td>分类。如果文章没有分类，则是 <code>default_category</code> 配置信息。</td>\n</tr>\n</tbody>\n</table>\n<p>修改<code>permalink_defaluts:</code>参数为空，就可以永久变量。</p>\n<ul>\n<li>多语言支持</li>\n</ul>\n<p>修改<code>new_post_name</code>和<code>permalink</code>参数：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">new_post_name:</span> <span class=\"string\">:lang/:title.md</span></div><div class=\"line\"><span class=\"attr\">permalink:</span> <span class=\"string\">:lang/:title/</span></div><div class=\"line\"><span class=\"comment\">#新建文章时候</span></div><div class=\"line\"><span class=\"string\">hexo</span> <span class=\"string\">new</span> <span class=\"string\">\"hello world\"</span> <span class=\"bullet\">--lang</span> <span class=\"string\">tw</span></div><div class=\"line\"><span class=\"comment\"># 则输出 =&gt; source/_posts/tw/hello-world.md,访问网址也会变成url/tw/hello-world/</span></div></pre></td></tr></table></figure>\n<h2 id=\"11、主题\"><a href=\"#11、主题\" class=\"headerlink\" title=\"11、主题\"></a>11、主题</h2><p>创建Hexo主题，在<code>themes</code>文件夹内，新增任意文件夹，修改<code>_config.yml</code>内<code>theme</code>设置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 主题的结构</span></div><div class=\"line\"><span class=\"string\">.</span></div><div class=\"line\"><span class=\"string\">|---</span> <span class=\"string\">_config.yml</span></div><div class=\"line\"><span class=\"string\">|---</span> <span class=\"string\">languages</span></div><div class=\"line\"><span class=\"string\">|---</span> <span class=\"string\">layout</span></div><div class=\"line\"><span class=\"string\">|---</span> <span class=\"string\">scripts</span></div><div class=\"line\"><span class=\"string\">|___</span> <span class=\"string\">source</span></div></pre></td></tr></table></figure>\n<h2 id=\"12、模板\"><a href=\"#12、模板\" class=\"headerlink\" title=\"12、模板\"></a>12、模板</h2><p>每个主题都必须有个<code>index</code>的模板，用于决定网站内容的呈现方式</p>\n<table>\n<thead>\n<tr>\n<th>模板</th>\n<th>用途</th>\n<th>回调</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>index</code></td>\n<td>首页</td>\n<td></td>\n</tr>\n<tr>\n<td><code>post</code></td>\n<td>文章</td>\n<td><code>index</code></td>\n</tr>\n<tr>\n<td><code>page</code></td>\n<td>分页</td>\n<td><code>index</code></td>\n</tr>\n<tr>\n<td><code>archive</code></td>\n<td>归档</td>\n<td><code>index</code></td>\n</tr>\n<tr>\n<td><code>category</code></td>\n<td>分类归档</td>\n<td><code>archive</code></td>\n</tr>\n<tr>\n<td><code>tag</code></td>\n<td>标签归档</td>\n<td><code>archive</code></td>\n</tr>\n</tbody>\n</table>\n"},{"title":"Github项目fork同步","date":"2017-03-02T07:56:00.000Z","_content":"\n#前言\nGithub可谓是开发者的乐园，众多的优秀开源项目，有时候我们想关注某个项目，常用的是star，偶尔会fork一下，到个人项目库中，研习代码，更希望有机会可以贡献代码。作为技术小白，现在会遇到已经`fork`的代码，原项目可能更新了，而个人账户下的项目并不能同步更新。如此肯定不利于我们的学习。\n# 同步项目\n在网上搜索如何同步fork项目和原项目，很多热心的网友的各种解决方案。\n\n- 删除原有项目，在重新fork。(无疑这是暴力有效的，但绝不是我们想要的方式)\n\n- 在电脑本地同时`git clone`原项目和fork项目，用`git pull `更新，然后对比，再`git push`到github上个人代码库。(虽有繁琐，却也是办法)\n\n- 本地`git clone`已fork的项目，然后添加远程库为原项目地址。(当然这里肯定要有项目访问权限的哦)\n\n- 最后也是本人觉得不错的方式，就是用windows下的 github for desktop客户端最为便捷。\n\n\n> 以上四种方式，前两种基本不用多介绍，主要简介后面来两种的操作。\n\n**使用远程代码库方式：** 转载自[云栖社区](https://yq.aliyun.com/articles/39474)\n```sh\n首先先通过 github 的 web 页面 fork 目标的项目\n前提是自己已经设置好了git,并且配置了相应的权限\n然后使用git clone命令在本地克隆自己 fork 的项目：\n\ngit clone https://github.com/YOUR-USERNAME/project—name\n\n然后需要复制被自己fork的项目的git地址\n切换到自己之前克隆的项目的路径下，使用：\n\ngit remote -v\n就可以看到当前项目的远程仓库配置\n\n然后使用下面的命令：\n\ngit remote add upstream 原始项目仓库的git地址\n然后如果你继续使git remove -v命令查看的话，就会发现这个时候已经和原始的被fork的项目产生了关联。\n如果想保持项目同步的话，一般使用下面的命令就好了：\n\ngit fetch upstream\ngit merge upstream/master\n```\n**使用windows 的github客户端**\n\n> 1、首先是PC安装了github客户端，并已经关联了github账号(类似废话)。\n> 2、在web上打开已经fork的项目，选在`clone or download`对话框，`open in Desktop`就会调用github的客户端并clone到本地。当然你可以用客户端内直接用git项目地址clone。\n> ![github](Github上fork同步/clone.png)\n> 3、在一段时间后，原项目已经更新，而fork的项目未有更新，此时，在github客户端上，选择如图示的原项目主线---Sync同步，点击update from xxx，再点击选择个人fork的主线---Sync同步。如此可以完成与原有项目的同步。\n> ![github desktop](Github上fork同步/update.png)\n> <font color=\"#f00\">注意：</font>此时并未出现与原项目代码冲突的情况，暂时先这么记下笔记，以后在做详细分析处理。","source":"_posts/Github上fork同步.md","raw":"---\ntitle: Github项目fork同步\ndate: 2017-03-02 15:56\ntags:\n    - github\ncategories:\n    - 编程相关\n---\n\n#前言\nGithub可谓是开发者的乐园，众多的优秀开源项目，有时候我们想关注某个项目，常用的是star，偶尔会fork一下，到个人项目库中，研习代码，更希望有机会可以贡献代码。作为技术小白，现在会遇到已经`fork`的代码，原项目可能更新了，而个人账户下的项目并不能同步更新。如此肯定不利于我们的学习。\n# 同步项目\n在网上搜索如何同步fork项目和原项目，很多热心的网友的各种解决方案。\n\n- 删除原有项目，在重新fork。(无疑这是暴力有效的，但绝不是我们想要的方式)\n\n- 在电脑本地同时`git clone`原项目和fork项目，用`git pull `更新，然后对比，再`git push`到github上个人代码库。(虽有繁琐，却也是办法)\n\n- 本地`git clone`已fork的项目，然后添加远程库为原项目地址。(当然这里肯定要有项目访问权限的哦)\n\n- 最后也是本人觉得不错的方式，就是用windows下的 github for desktop客户端最为便捷。\n\n\n> 以上四种方式，前两种基本不用多介绍，主要简介后面来两种的操作。\n\n**使用远程代码库方式：** 转载自[云栖社区](https://yq.aliyun.com/articles/39474)\n```sh\n首先先通过 github 的 web 页面 fork 目标的项目\n前提是自己已经设置好了git,并且配置了相应的权限\n然后使用git clone命令在本地克隆自己 fork 的项目：\n\ngit clone https://github.com/YOUR-USERNAME/project—name\n\n然后需要复制被自己fork的项目的git地址\n切换到自己之前克隆的项目的路径下，使用：\n\ngit remote -v\n就可以看到当前项目的远程仓库配置\n\n然后使用下面的命令：\n\ngit remote add upstream 原始项目仓库的git地址\n然后如果你继续使git remove -v命令查看的话，就会发现这个时候已经和原始的被fork的项目产生了关联。\n如果想保持项目同步的话，一般使用下面的命令就好了：\n\ngit fetch upstream\ngit merge upstream/master\n```\n**使用windows 的github客户端**\n\n> 1、首先是PC安装了github客户端，并已经关联了github账号(类似废话)。\n> 2、在web上打开已经fork的项目，选在`clone or download`对话框，`open in Desktop`就会调用github的客户端并clone到本地。当然你可以用客户端内直接用git项目地址clone。\n> ![github](Github上fork同步/clone.png)\n> 3、在一段时间后，原项目已经更新，而fork的项目未有更新，此时，在github客户端上，选择如图示的原项目主线---Sync同步，点击update from xxx，再点击选择个人fork的主线---Sync同步。如此可以完成与原有项目的同步。\n> ![github desktop](Github上fork同步/update.png)\n> <font color=\"#f00\">注意：</font>此时并未出现与原项目代码冲突的情况，暂时先这么记下笔记，以后在做详细分析处理。","slug":"Github上fork同步","published":1,"updated":"2017-03-31T08:44:18.845Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ndxcd4001m88owfck3n4rn","content":"<p>#前言<br>Github可谓是开发者的乐园，众多的优秀开源项目，有时候我们想关注某个项目，常用的是star，偶尔会fork一下，到个人项目库中，研习代码，更希望有机会可以贡献代码。作为技术小白，现在会遇到已经<code>fork</code>的代码，原项目可能更新了，而个人账户下的项目并不能同步更新。如此肯定不利于我们的学习。</p>\n<h1 id=\"同步项目\"><a href=\"#同步项目\" class=\"headerlink\" title=\"同步项目\"></a>同步项目</h1><p>在网上搜索如何同步fork项目和原项目，很多热心的网友的各种解决方案。</p>\n<ul>\n<li><p>删除原有项目，在重新fork。(无疑这是暴力有效的，但绝不是我们想要的方式)</p>\n</li>\n<li><p>在电脑本地同时<code>git clone</code>原项目和fork项目，用<code>git pull</code>更新，然后对比，再<code>git push</code>到github上个人代码库。(虽有繁琐，却也是办法)</p>\n</li>\n<li><p>本地<code>git clone</code>已fork的项目，然后添加远程库为原项目地址。(当然这里肯定要有项目访问权限的哦)</p>\n</li>\n<li><p>最后也是本人觉得不错的方式，就是用windows下的 github for desktop客户端最为便捷。</p>\n</li>\n</ul>\n<blockquote>\n<p>以上四种方式，前两种基本不用多介绍，主要简介后面来两种的操作。</p>\n</blockquote>\n<p><strong>使用远程代码库方式：</strong> 转载自<a href=\"https://yq.aliyun.com/articles/39474\" target=\"_blank\" rel=\"external\">云栖社区</a><br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">首先先通过 github 的 web 页面 fork 目标的项目</div><div class=\"line\">前提是自己已经设置好了git,并且配置了相应的权限</div><div class=\"line\">然后使用git <span class=\"built_in\">clone</span>命令在本地克隆自己 fork 的项目：</div><div class=\"line\"></div><div class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/YOUR-USERNAME/project—name</div><div class=\"line\"></div><div class=\"line\">然后需要复制被自己fork的项目的git地址</div><div class=\"line\">切换到自己之前克隆的项目的路径下，使用：</div><div class=\"line\"></div><div class=\"line\">git remote -v</div><div class=\"line\">就可以看到当前项目的远程仓库配置</div><div class=\"line\"></div><div class=\"line\">然后使用下面的命令：</div><div class=\"line\"></div><div class=\"line\">git remote add upstream 原始项目仓库的git地址</div><div class=\"line\">然后如果你继续使git remove -v命令查看的话，就会发现这个时候已经和原始的被fork的项目产生了关联。</div><div class=\"line\">如果想保持项目同步的话，一般使用下面的命令就好了：</div><div class=\"line\"></div><div class=\"line\">git fetch upstream</div><div class=\"line\">git merge upstream/master</div></pre></td></tr></table></figure></p>\n<p><strong>使用windows 的github客户端</strong></p>\n<blockquote>\n<p>1、首先是PC安装了github客户端，并已经关联了github账号(类似废话)。<br>2、在web上打开已经fork的项目，选在<code>clone or download</code>对话框，<code>open in Desktop</code>就会调用github的客户端并clone到本地。当然你可以用客户端内直接用git项目地址clone。<br><img src=\"/2017/03/02/Github上fork同步/clone.png\" alt=\"github\"><br>3、在一段时间后，原项目已经更新，而fork的项目未有更新，此时，在github客户端上，选择如图示的原项目主线—Sync同步，点击update from xxx，再点击选择个人fork的主线—Sync同步。如此可以完成与原有项目的同步。<br><img src=\"/2017/03/02/Github上fork同步/update.png\" alt=\"github desktop\"></p>\n<p><font color=\"#f00\">注意：</font>此时并未出现与原项目代码冲突的情况，暂时先这么记下笔记，以后在做详细分析处理。</p>\n</blockquote>\n","excerpt":"","more":"<p>#前言<br>Github可谓是开发者的乐园，众多的优秀开源项目，有时候我们想关注某个项目，常用的是star，偶尔会fork一下，到个人项目库中，研习代码，更希望有机会可以贡献代码。作为技术小白，现在会遇到已经<code>fork</code>的代码，原项目可能更新了，而个人账户下的项目并不能同步更新。如此肯定不利于我们的学习。</p>\n<h1 id=\"同步项目\"><a href=\"#同步项目\" class=\"headerlink\" title=\"同步项目\"></a>同步项目</h1><p>在网上搜索如何同步fork项目和原项目，很多热心的网友的各种解决方案。</p>\n<ul>\n<li><p>删除原有项目，在重新fork。(无疑这是暴力有效的，但绝不是我们想要的方式)</p>\n</li>\n<li><p>在电脑本地同时<code>git clone</code>原项目和fork项目，用<code>git pull</code>更新，然后对比，再<code>git push</code>到github上个人代码库。(虽有繁琐，却也是办法)</p>\n</li>\n<li><p>本地<code>git clone</code>已fork的项目，然后添加远程库为原项目地址。(当然这里肯定要有项目访问权限的哦)</p>\n</li>\n<li><p>最后也是本人觉得不错的方式，就是用windows下的 github for desktop客户端最为便捷。</p>\n</li>\n</ul>\n<blockquote>\n<p>以上四种方式，前两种基本不用多介绍，主要简介后面来两种的操作。</p>\n</blockquote>\n<p><strong>使用远程代码库方式：</strong> 转载自<a href=\"https://yq.aliyun.com/articles/39474\">云栖社区</a><br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">首先先通过 github 的 web 页面 fork 目标的项目</div><div class=\"line\">前提是自己已经设置好了git,并且配置了相应的权限</div><div class=\"line\">然后使用git <span class=\"built_in\">clone</span>命令在本地克隆自己 fork 的项目：</div><div class=\"line\"></div><div class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/YOUR-USERNAME/project—name</div><div class=\"line\"></div><div class=\"line\">然后需要复制被自己fork的项目的git地址</div><div class=\"line\">切换到自己之前克隆的项目的路径下，使用：</div><div class=\"line\"></div><div class=\"line\">git remote -v</div><div class=\"line\">就可以看到当前项目的远程仓库配置</div><div class=\"line\"></div><div class=\"line\">然后使用下面的命令：</div><div class=\"line\"></div><div class=\"line\">git remote add upstream 原始项目仓库的git地址</div><div class=\"line\">然后如果你继续使git remove -v命令查看的话，就会发现这个时候已经和原始的被fork的项目产生了关联。</div><div class=\"line\">如果想保持项目同步的话，一般使用下面的命令就好了：</div><div class=\"line\"></div><div class=\"line\">git fetch upstream</div><div class=\"line\">git merge upstream/master</div></pre></td></tr></table></figure></p>\n<p><strong>使用windows 的github客户端</strong></p>\n<blockquote>\n<p>1、首先是PC安装了github客户端，并已经关联了github账号(类似废话)。<br>2、在web上打开已经fork的项目，选在<code>clone or download</code>对话框，<code>open in Desktop</code>就会调用github的客户端并clone到本地。当然你可以用客户端内直接用git项目地址clone。<br><img src=\"/2017/03/02/Github上fork同步/clone.png\" alt=\"github\"><br>3、在一段时间后，原项目已经更新，而fork的项目未有更新，此时，在github客户端上，选择如图示的原项目主线—Sync同步，点击update from xxx，再点击选择个人fork的主线—Sync同步。如此可以完成与原有项目的同步。<br><img src=\"/2017/03/02/Github上fork同步/update.png\" alt=\"github desktop\"></p>\n<p><font color=\"#f00\">注意：</font>此时并未出现与原项目代码冲突的情况，暂时先这么记下笔记，以后在做详细分析处理。</p>\n</blockquote>\n"},{"title":"Linux adb使用及adb devices no permissions问题解决","date":"2017-04-07T03:52:25.000Z","_content":"## Linux下adb的使用及adb devices ： no permissions问题的解决\n\n最近在Android开发过程中，需要用到linux下的开发环境，而使用adb时候遇到点小问题，特此笔记记录一下，方便自已，亦希望有助于他人。\n\n### 1、adb的安装\n\n本人的Linux开发环境为Ubuntu Server 16.04，有使用其他平台，如CentOS等，可灵活变通。\n\n```sh\n# 安装adb\nsudo apt install adb\nsudo apt install android-tools-adb\n```\n\n### 2 、no permissions\n\n安装好adb工具之后，连接安卓设备，并开启usb调试，使用`adb devices`发现显示出来的竟然是`?????? no permissions`。\n\n在网上查看到有相关解决方案[^1]\n\n- 首先，在未连接Android设备的情况下，查看一下Linux下的usb，类似如下\n\n  ```sh\n  # 运行lsusb命令\n  lsusb\n  # 结果\n  Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub\n  Bus 001 Device 003: ID 0bda:0129 Realtek Semiconductor Corp. RTS5129 Card Reader Controller\n  Bus 001 Device 005: ID 0cf3:e005 Atheros Communications, Inc.\n  Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub\n  ```\n\n- 然后，打开android设备的usb调试模式，连接到Linux电脑上，运行\n\n  ```sh\n  # 运行lsusb指令，查看设备信息\n  lsusb\n  # 显示结果如下\n  Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub\n  Bus 001 Device 003: ID 0bda:0129 Realtek Semiconductor Corp. RTS5129 Card Reader Controller\n  Bus 001 Device 005: ID 0cf3:e005 Atheros Communications, Inc.\n  Bus 001 Device 019: ID 2207:0010   # 此条新增的条目，则是新连接的android设备\n  Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub\n  ```\n\n  如上则可以查看到新连接的Android设备信息，注意其ID号，这里是`2207`和`0010`\n\n- 然后`cd /etc/udev/rules.d/`目录下，查看`.rules`文件\n\n  ```sh\n  cd /etc/udev/rules.d/\n  ls\n  # 结果如下,名称可能不同\n  51-android.rules\n  # 然后编辑该文件\n  sudo vim 51-android.rules\n  # 然后加入如下代码\n  SUBSYSTEM==\"usb\",ATTRS{idVendor}==\"2207\",ATTRS{idProduct}==\"0010\",MODE=\"0666\"\n  ```\n\n  这里`2207`和`0010`则分别是上一步中查看到的android设备的额ID信息，MODE应该是表示权限。\n\n- 重启设备\n\n  ```sh\n  sudo chmod a+rx /etc/udev/rules.d/51-android.rules\n  sudo service udev restart\n  ```\n\n**至此，拔掉usb重新连接，然后在运行如下命令，便可进行adb操作**\n\n```sh\nsudo adb kill-server\nsudo adb start-server\nsudo devices\n# 若要需要root权限进入Android设备的shell，可以运行\nadb root\nadb remount\nadb shell\n```\n\n#### adb devices为空\n\n若是运行`adb devices`列表为空，而`lsusb`却能看到已经连接的Android设备，此时可以\n\n```sh\n# 编辑adb_usb.ini文件\nsudo vim ~/.android/adb_usb.ini\n# 加入 0x0bb4 然后执行\nsudo service udev restart\nandroid update adb\n```\n\n参考文章：\n\n[^1]: http://blog.csdn.net/chychc/article/details/7276294\n\n","source":"_posts/Linux下adb的使用及adb devices no permissions问题的解决.md","raw":"---\ntitle: Linux adb使用及adb devices no permissions问题解决\ndate: 2017-04-07 11:52:25\ntags:\n    - Linux\n    - Android\n    - adb\ncategories:\n    - Android\n---\n## Linux下adb的使用及adb devices ： no permissions问题的解决\n\n最近在Android开发过程中，需要用到linux下的开发环境，而使用adb时候遇到点小问题，特此笔记记录一下，方便自已，亦希望有助于他人。\n\n### 1、adb的安装\n\n本人的Linux开发环境为Ubuntu Server 16.04，有使用其他平台，如CentOS等，可灵活变通。\n\n```sh\n# 安装adb\nsudo apt install adb\nsudo apt install android-tools-adb\n```\n\n### 2 、no permissions\n\n安装好adb工具之后，连接安卓设备，并开启usb调试，使用`adb devices`发现显示出来的竟然是`?????? no permissions`。\n\n在网上查看到有相关解决方案[^1]\n\n- 首先，在未连接Android设备的情况下，查看一下Linux下的usb，类似如下\n\n  ```sh\n  # 运行lsusb命令\n  lsusb\n  # 结果\n  Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub\n  Bus 001 Device 003: ID 0bda:0129 Realtek Semiconductor Corp. RTS5129 Card Reader Controller\n  Bus 001 Device 005: ID 0cf3:e005 Atheros Communications, Inc.\n  Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub\n  ```\n\n- 然后，打开android设备的usb调试模式，连接到Linux电脑上，运行\n\n  ```sh\n  # 运行lsusb指令，查看设备信息\n  lsusb\n  # 显示结果如下\n  Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub\n  Bus 001 Device 003: ID 0bda:0129 Realtek Semiconductor Corp. RTS5129 Card Reader Controller\n  Bus 001 Device 005: ID 0cf3:e005 Atheros Communications, Inc.\n  Bus 001 Device 019: ID 2207:0010   # 此条新增的条目，则是新连接的android设备\n  Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub\n  ```\n\n  如上则可以查看到新连接的Android设备信息，注意其ID号，这里是`2207`和`0010`\n\n- 然后`cd /etc/udev/rules.d/`目录下，查看`.rules`文件\n\n  ```sh\n  cd /etc/udev/rules.d/\n  ls\n  # 结果如下,名称可能不同\n  51-android.rules\n  # 然后编辑该文件\n  sudo vim 51-android.rules\n  # 然后加入如下代码\n  SUBSYSTEM==\"usb\",ATTRS{idVendor}==\"2207\",ATTRS{idProduct}==\"0010\",MODE=\"0666\"\n  ```\n\n  这里`2207`和`0010`则分别是上一步中查看到的android设备的额ID信息，MODE应该是表示权限。\n\n- 重启设备\n\n  ```sh\n  sudo chmod a+rx /etc/udev/rules.d/51-android.rules\n  sudo service udev restart\n  ```\n\n**至此，拔掉usb重新连接，然后在运行如下命令，便可进行adb操作**\n\n```sh\nsudo adb kill-server\nsudo adb start-server\nsudo devices\n# 若要需要root权限进入Android设备的shell，可以运行\nadb root\nadb remount\nadb shell\n```\n\n#### adb devices为空\n\n若是运行`adb devices`列表为空，而`lsusb`却能看到已经连接的Android设备，此时可以\n\n```sh\n# 编辑adb_usb.ini文件\nsudo vim ~/.android/adb_usb.ini\n# 加入 0x0bb4 然后执行\nsudo service udev restart\nandroid update adb\n```\n\n参考文章：\n\n[^1]: http://blog.csdn.net/chychc/article/details/7276294\n\n","slug":"Linux下adb的使用及adb devices no permissions问题的解决","published":1,"updated":"2017-04-07T03:55:44.035Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ndxcd7001o88owgqe4nri8","content":"<h2 id=\"Linux下adb的使用及adb-devices-：-no-permissions问题的解决\"><a href=\"#Linux下adb的使用及adb-devices-：-no-permissions问题的解决\" class=\"headerlink\" title=\"Linux下adb的使用及adb devices ： no permissions问题的解决\"></a>Linux下adb的使用及adb devices ： no permissions问题的解决</h2><p>最近在Android开发过程中，需要用到linux下的开发环境，而使用adb时候遇到点小问题，特此笔记记录一下，方便自已，亦希望有助于他人。</p>\n<h3 id=\"1、adb的安装\"><a href=\"#1、adb的安装\" class=\"headerlink\" title=\"1、adb的安装\"></a>1、adb的安装</h3><p>本人的Linux开发环境为Ubuntu Server 16.04，有使用其他平台，如CentOS等，可灵活变通。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 安装adb</span></div><div class=\"line\">sudo apt install adb</div><div class=\"line\">sudo apt install android-tools-adb</div></pre></td></tr></table></figure>\n<h3 id=\"2-、no-permissions\"><a href=\"#2-、no-permissions\" class=\"headerlink\" title=\"2 、no permissions\"></a>2 、no permissions</h3><p>安装好adb工具之后，连接安卓设备，并开启usb调试，使用<code>adb devices</code>发现显示出来的竟然是<code>?????? no permissions</code>。</p>\n<p>在网上查看到有相关解决方案<a href=\"http://blog.csdn.net/chychc/article/details/7276294\" target=\"_blank\" rel=\"external\">^1</a></p>\n<ul>\n<li><p>首先，在未连接Android设备的情况下，查看一下Linux下的usb，类似如下</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 运行lsusb命令</span></div><div class=\"line\">lsusb</div><div class=\"line\"><span class=\"comment\"># 结果</span></div><div class=\"line\">Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub</div><div class=\"line\">Bus 001 Device 003: ID 0bda:0129 Realtek Semiconductor Corp. RTS5129 Card Reader Controller</div><div class=\"line\">Bus 001 Device 005: ID 0cf3:e005 Atheros Communications, Inc.</div><div class=\"line\">Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub</div></pre></td></tr></table></figure>\n</li>\n<li><p>然后，打开android设备的usb调试模式，连接到Linux电脑上，运行</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 运行lsusb指令，查看设备信息</span></div><div class=\"line\">lsusb</div><div class=\"line\"><span class=\"comment\"># 显示结果如下</span></div><div class=\"line\">Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub</div><div class=\"line\">Bus 001 Device 003: ID 0bda:0129 Realtek Semiconductor Corp. RTS5129 Card Reader Controller</div><div class=\"line\">Bus 001 Device 005: ID 0cf3:e005 Atheros Communications, Inc.</div><div class=\"line\">Bus 001 Device 019: ID 2207:0010   <span class=\"comment\"># 此条新增的条目，则是新连接的android设备</span></div><div class=\"line\">Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub</div></pre></td></tr></table></figure>\n<p>如上则可以查看到新连接的Android设备信息，注意其ID号，这里是<code>2207</code>和<code>0010</code></p>\n</li>\n<li><p>然后<code>cd /etc/udev/rules.d/</code>目录下，查看<code>.rules</code>文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> /etc/udev/rules.d/</div><div class=\"line\">ls</div><div class=\"line\"><span class=\"comment\"># 结果如下,名称可能不同</span></div><div class=\"line\">51-android.rules</div><div class=\"line\"><span class=\"comment\"># 然后编辑该文件</span></div><div class=\"line\">sudo vim 51-android.rules</div><div class=\"line\"><span class=\"comment\"># 然后加入如下代码</span></div><div class=\"line\">SUBSYSTEM==<span class=\"string\">\"usb\"</span>,ATTRS&#123;idVendor&#125;==<span class=\"string\">\"2207\"</span>,ATTRS&#123;idProduct&#125;==<span class=\"string\">\"0010\"</span>,MODE=<span class=\"string\">\"0666\"</span></div></pre></td></tr></table></figure>\n<p>这里<code>2207</code>和<code>0010</code>则分别是上一步中查看到的android设备的额ID信息，MODE应该是表示权限。</p>\n</li>\n<li><p>重启设备</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo chmod a+rx /etc/udev/rules.d/51-android.rules</div><div class=\"line\">sudo service udev restart</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>至此，拔掉usb重新连接，然后在运行如下命令，便可进行adb操作</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo adb <span class=\"built_in\">kill</span>-server</div><div class=\"line\">sudo adb start-server</div><div class=\"line\">sudo devices</div><div class=\"line\"><span class=\"comment\"># 若要需要root权限进入Android设备的shell，可以运行</span></div><div class=\"line\">adb root</div><div class=\"line\">adb remount</div><div class=\"line\">adb shell</div></pre></td></tr></table></figure>\n<h4 id=\"adb-devices为空\"><a href=\"#adb-devices为空\" class=\"headerlink\" title=\"adb devices为空\"></a>adb devices为空</h4><p>若是运行<code>adb devices</code>列表为空，而<code>lsusb</code>却能看到已经连接的Android设备，此时可以</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 编辑adb_usb.ini文件</span></div><div class=\"line\">sudo vim ~/.android/adb_usb.ini</div><div class=\"line\"><span class=\"comment\"># 加入 0x0bb4 然后执行</span></div><div class=\"line\">sudo service udev restart</div><div class=\"line\">android update adb</div></pre></td></tr></table></figure>\n<p>参考文章：</p>\n","excerpt":"","more":"<h2 id=\"Linux下adb的使用及adb-devices-：-no-permissions问题的解决\"><a href=\"#Linux下adb的使用及adb-devices-：-no-permissions问题的解决\" class=\"headerlink\" title=\"Linux下adb的使用及adb devices ： no permissions问题的解决\"></a>Linux下adb的使用及adb devices ： no permissions问题的解决</h2><p>最近在Android开发过程中，需要用到linux下的开发环境，而使用adb时候遇到点小问题，特此笔记记录一下，方便自已，亦希望有助于他人。</p>\n<h3 id=\"1、adb的安装\"><a href=\"#1、adb的安装\" class=\"headerlink\" title=\"1、adb的安装\"></a>1、adb的安装</h3><p>本人的Linux开发环境为Ubuntu Server 16.04，有使用其他平台，如CentOS等，可灵活变通。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 安装adb</span></div><div class=\"line\">sudo apt install adb</div><div class=\"line\">sudo apt install android-tools-adb</div></pre></td></tr></table></figure>\n<h3 id=\"2-、no-permissions\"><a href=\"#2-、no-permissions\" class=\"headerlink\" title=\"2 、no permissions\"></a>2 、no permissions</h3><p>安装好adb工具之后，连接安卓设备，并开启usb调试，使用<code>adb devices</code>发现显示出来的竟然是<code>?????? no permissions</code>。</p>\n<p>在网上查看到有相关解决方案<a href=\"http://blog.csdn.net/chychc/article/details/7276294\">^1</a></p>\n<ul>\n<li><p>首先，在未连接Android设备的情况下，查看一下Linux下的usb，类似如下</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 运行lsusb命令</span></div><div class=\"line\">lsusb</div><div class=\"line\"><span class=\"comment\"># 结果</span></div><div class=\"line\">Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub</div><div class=\"line\">Bus 001 Device 003: ID 0bda:0129 Realtek Semiconductor Corp. RTS5129 Card Reader Controller</div><div class=\"line\">Bus 001 Device 005: ID 0cf3:e005 Atheros Communications, Inc.</div><div class=\"line\">Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub</div></pre></td></tr></table></figure>\n</li>\n<li><p>然后，打开android设备的usb调试模式，连接到Linux电脑上，运行</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 运行lsusb指令，查看设备信息</span></div><div class=\"line\">lsusb</div><div class=\"line\"><span class=\"comment\"># 显示结果如下</span></div><div class=\"line\">Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub</div><div class=\"line\">Bus 001 Device 003: ID 0bda:0129 Realtek Semiconductor Corp. RTS5129 Card Reader Controller</div><div class=\"line\">Bus 001 Device 005: ID 0cf3:e005 Atheros Communications, Inc.</div><div class=\"line\">Bus 001 Device 019: ID 2207:0010   <span class=\"comment\"># 此条新增的条目，则是新连接的android设备</span></div><div class=\"line\">Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub</div></pre></td></tr></table></figure>\n<p>如上则可以查看到新连接的Android设备信息，注意其ID号，这里是<code>2207</code>和<code>0010</code></p>\n</li>\n<li><p>然后<code>cd /etc/udev/rules.d/</code>目录下，查看<code>.rules</code>文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> /etc/udev/rules.d/</div><div class=\"line\">ls</div><div class=\"line\"><span class=\"comment\"># 结果如下,名称可能不同</span></div><div class=\"line\">51-android.rules</div><div class=\"line\"><span class=\"comment\"># 然后编辑该文件</span></div><div class=\"line\">sudo vim 51-android.rules</div><div class=\"line\"><span class=\"comment\"># 然后加入如下代码</span></div><div class=\"line\">SUBSYSTEM==<span class=\"string\">\"usb\"</span>,ATTRS&#123;idVendor&#125;==<span class=\"string\">\"2207\"</span>,ATTRS&#123;idProduct&#125;==<span class=\"string\">\"0010\"</span>,MODE=<span class=\"string\">\"0666\"</span></div></pre></td></tr></table></figure>\n<p>这里<code>2207</code>和<code>0010</code>则分别是上一步中查看到的android设备的额ID信息，MODE应该是表示权限。</p>\n</li>\n<li><p>重启设备</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo chmod a+rx /etc/udev/rules.d/51-android.rules</div><div class=\"line\">sudo service udev restart</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>至此，拔掉usb重新连接，然后在运行如下命令，便可进行adb操作</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo adb <span class=\"built_in\">kill</span>-server</div><div class=\"line\">sudo adb start-server</div><div class=\"line\">sudo devices</div><div class=\"line\"><span class=\"comment\"># 若要需要root权限进入Android设备的shell，可以运行</span></div><div class=\"line\">adb root</div><div class=\"line\">adb remount</div><div class=\"line\">adb shell</div></pre></td></tr></table></figure>\n<h4 id=\"adb-devices为空\"><a href=\"#adb-devices为空\" class=\"headerlink\" title=\"adb devices为空\"></a>adb devices为空</h4><p>若是运行<code>adb devices</code>列表为空，而<code>lsusb</code>却能看到已经连接的Android设备，此时可以</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 编辑adb_usb.ini文件</span></div><div class=\"line\">sudo vim ~/.android/adb_usb.ini</div><div class=\"line\"><span class=\"comment\"># 加入 0x0bb4 然后执行</span></div><div class=\"line\">sudo service udev restart</div><div class=\"line\">android update adb</div></pre></td></tr></table></figure>\n<p>参考文章：</p>\n"},{"title":"Linux中文相关设置","date":"2016-08-22T03:02:25.000Z","_content":"编程语言与开发工具，操作系统大多都是国外人开发的，这点来说确实让国人汗颜，也不过多的牢骚什么，言归正传。在学习linux初期，总会遇到一些中文编码与显示及字体相关的问题，本人小白一个，也遇到此类问题。在此作为笔记记录如下，亦希望与他人有益。\n#### Linux中文语言设置\n>CentOS7.0中，一般在安装CentOS时候就可以选择中文，然而大多数情况下，我们还是选择安装英文版比较好。但是也需要中文支持。在Applications中--settings--Language&Region，选择语言中添加中文China汉语，下面框inputsources中添加Chinese(Intelligen Pinyin)。其默认切换键为Shift，然后apply保存，即可使用中文输入法和中文支持。若在刚才一步中language选择汉语，则linux系统界面的语言也会变成中文。\n\n#### Linux添加字体\n>其实widows和linux，以至我们常用的android手机，字体都是通用的，支持ttf格式字体。所以笔者从widows10的C：/windows/fonts中copy了几款喜欢的字体，复制到linux桌面。\n\n>在linux下，将字体文件或者文件夹，以root权限，复制到/usr/share/fonts下，然后cd到该目录下，运行mkfontscale,mkfontdir,fc-cache -fv这三条命令，建立字体缓存，加入字体索引库。然后再系统或者其他地方的设置里就可以用这些新加入的字体了。\n\n附，笔者发现在linux和window下有时候文件显示不一致，会乱码，所以在linux下的terminal设置为编码utf-8,其他编译器也是这个格式，在windows下也用这个格式，就能通用显示了。但是windows下的记事本似乎默认ASIIC编码，会在linux下中文乱码，所以可以用其他编辑器代替。","source":"_posts/Linux中文相关设置.md","raw":"---\ntitle: Linux中文相关设置\ndate: 2016-08-22 11:02:25\ntags:\n    - Linux\n    - 中文\ncategories:\n    - Linux\n---\n编程语言与开发工具，操作系统大多都是国外人开发的，这点来说确实让国人汗颜，也不过多的牢骚什么，言归正传。在学习linux初期，总会遇到一些中文编码与显示及字体相关的问题，本人小白一个，也遇到此类问题。在此作为笔记记录如下，亦希望与他人有益。\n#### Linux中文语言设置\n>CentOS7.0中，一般在安装CentOS时候就可以选择中文，然而大多数情况下，我们还是选择安装英文版比较好。但是也需要中文支持。在Applications中--settings--Language&Region，选择语言中添加中文China汉语，下面框inputsources中添加Chinese(Intelligen Pinyin)。其默认切换键为Shift，然后apply保存，即可使用中文输入法和中文支持。若在刚才一步中language选择汉语，则linux系统界面的语言也会变成中文。\n\n#### Linux添加字体\n>其实widows和linux，以至我们常用的android手机，字体都是通用的，支持ttf格式字体。所以笔者从widows10的C：/windows/fonts中copy了几款喜欢的字体，复制到linux桌面。\n\n>在linux下，将字体文件或者文件夹，以root权限，复制到/usr/share/fonts下，然后cd到该目录下，运行mkfontscale,mkfontdir,fc-cache -fv这三条命令，建立字体缓存，加入字体索引库。然后再系统或者其他地方的设置里就可以用这些新加入的字体了。\n\n附，笔者发现在linux和window下有时候文件显示不一致，会乱码，所以在linux下的terminal设置为编码utf-8,其他编译器也是这个格式，在windows下也用这个格式，就能通用显示了。但是windows下的记事本似乎默认ASIIC编码，会在linux下中文乱码，所以可以用其他编辑器代替。","slug":"Linux中文相关设置","published":1,"updated":"2017-03-31T08:03:50.537Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ndxcd8001s88owuvarh676","content":"<p>编程语言与开发工具，操作系统大多都是国外人开发的，这点来说确实让国人汗颜，也不过多的牢骚什么，言归正传。在学习linux初期，总会遇到一些中文编码与显示及字体相关的问题，本人小白一个，也遇到此类问题。在此作为笔记记录如下，亦希望与他人有益。</p>\n<h4 id=\"Linux中文语言设置\"><a href=\"#Linux中文语言设置\" class=\"headerlink\" title=\"Linux中文语言设置\"></a>Linux中文语言设置</h4><blockquote>\n<p>CentOS7.0中，一般在安装CentOS时候就可以选择中文，然而大多数情况下，我们还是选择安装英文版比较好。但是也需要中文支持。在Applications中–settings–Language&amp;Region，选择语言中添加中文China汉语，下面框inputsources中添加Chinese(Intelligen Pinyin)。其默认切换键为Shift，然后apply保存，即可使用中文输入法和中文支持。若在刚才一步中language选择汉语，则linux系统界面的语言也会变成中文。</p>\n</blockquote>\n<h4 id=\"Linux添加字体\"><a href=\"#Linux添加字体\" class=\"headerlink\" title=\"Linux添加字体\"></a>Linux添加字体</h4><blockquote>\n<p>其实widows和linux，以至我们常用的android手机，字体都是通用的，支持ttf格式字体。所以笔者从widows10的C：/windows/fonts中copy了几款喜欢的字体，复制到linux桌面。</p>\n<p>在linux下，将字体文件或者文件夹，以root权限，复制到/usr/share/fonts下，然后cd到该目录下，运行mkfontscale,mkfontdir,fc-cache -fv这三条命令，建立字体缓存，加入字体索引库。然后再系统或者其他地方的设置里就可以用这些新加入的字体了。</p>\n</blockquote>\n<p>附，笔者发现在linux和window下有时候文件显示不一致，会乱码，所以在linux下的terminal设置为编码utf-8,其他编译器也是这个格式，在windows下也用这个格式，就能通用显示了。但是windows下的记事本似乎默认ASIIC编码，会在linux下中文乱码，所以可以用其他编辑器代替。</p>\n","excerpt":"","more":"<p>编程语言与开发工具，操作系统大多都是国外人开发的，这点来说确实让国人汗颜，也不过多的牢骚什么，言归正传。在学习linux初期，总会遇到一些中文编码与显示及字体相关的问题，本人小白一个，也遇到此类问题。在此作为笔记记录如下，亦希望与他人有益。</p>\n<h4 id=\"Linux中文语言设置\"><a href=\"#Linux中文语言设置\" class=\"headerlink\" title=\"Linux中文语言设置\"></a>Linux中文语言设置</h4><blockquote>\n<p>CentOS7.0中，一般在安装CentOS时候就可以选择中文，然而大多数情况下，我们还是选择安装英文版比较好。但是也需要中文支持。在Applications中–settings–Language&amp;Region，选择语言中添加中文China汉语，下面框inputsources中添加Chinese(Intelligen Pinyin)。其默认切换键为Shift，然后apply保存，即可使用中文输入法和中文支持。若在刚才一步中language选择汉语，则linux系统界面的语言也会变成中文。</p>\n</blockquote>\n<h4 id=\"Linux添加字体\"><a href=\"#Linux添加字体\" class=\"headerlink\" title=\"Linux添加字体\"></a>Linux添加字体</h4><blockquote>\n<p>其实widows和linux，以至我们常用的android手机，字体都是通用的，支持ttf格式字体。所以笔者从widows10的C：/windows/fonts中copy了几款喜欢的字体，复制到linux桌面。</p>\n<p>在linux下，将字体文件或者文件夹，以root权限，复制到/usr/share/fonts下，然后cd到该目录下，运行mkfontscale,mkfontdir,fc-cache -fv这三条命令，建立字体缓存，加入字体索引库。然后再系统或者其他地方的设置里就可以用这些新加入的字体了。</p>\n</blockquote>\n<p>附，笔者发现在linux和window下有时候文件显示不一致，会乱码，所以在linux下的terminal设置为编码utf-8,其他编译器也是这个格式，在windows下也用这个格式，就能通用显示了。但是windows下的记事本似乎默认ASIIC编码，会在linux下中文乱码，所以可以用其他编辑器代替。</p>\n"},{"title":"Markdown基本语法","date":"2016-09-26T02:57:00.000Z","author":"冰路梦","_content":"\n\nMarkdown 基本语法\n==\n**本文没有使用csdn的markdown书写，而是原语法格式显示，便于更好的理解markdown语法。**\n目前本人发现的比较不错的markdown编辑器：tepora、atom、Haroopad、以及在线版的cmdMarkdown、马克飞象、Stack Edit等。\n文章结尾附上本文的markdown形式。\n<image url = '/path/to/image'>\n\n\n## 一、标题\n`1. 类似Setext形式，利用 = 或 - 符号，写在标题文字下一行，分别表示一级、二级 标题`\n\n\n\n注 : =或-至少也只需要两个就好。\n\n\n`2.类似Atx形式，使用 # 符号，加与标题文字前，且至少一个空格才行使用个数1～6,分别表示六级标题`\n\n\n\n注 : 标签语言讲究对称性，标题Atx模式可以在标题后加上不定个数的#，仅为美观而已。\n\n\n\nmarkdown编辑文字需要有空行，才能显示为空行，而换行需要编辑时有一个空行\n\n\n\n显示才会换行。编程通则，符号输入法英文半角。\n\n\n## 二、区块引用\n> markdown使用类似email中的 > 引用符号，标记区块\n> 区块内的每一行都会自动添加 > 符号\n> 其实也可以仅在第一行使用了 > 符号即可，不过有些编辑器会自动补上。\n\n\n但是这样的话就需要有一个空行，才能表示区块结束。若是最后一行有 > 符号，\n想要结束区块就要回车后，空一行，再回来哦，表示中断和区块编辑的联系。\n>区块内也可以使用嵌套\n> >嵌套层级应该是没有限制的\n> >>多级嵌套\n> >>也是挺好看的\n\n\n> >但是想要结束一个小区块，就得借助空行了。\n> >不然还真的不好结束呢。外层区块与其他区块之间，\n> >看来需要有非区块语法隔离才行。\n\n---\n>使用了一个分割线才和上面的区块分开来，空格，空行，回车都没用的哦。\n>区块内可以使用其他markdown的语法。\n###### 来个标题\n`背景条幅`\n\n---\n三个---即可形成一个分割线，注意和上面文字空一行，否则就成标题了哦\n## 三、列表\n+ 列表分为无序列表和有序列表，可以多级列表。\n\n\n    - 无序列表中使用 加、减、星号\n       * 来作为开启列表的标识,均需要有一个空格才生效。或者tab也行\n\n\n9. 有序列表使用数字\n   6. 和英文的句号，数字不一定就要一二三的很有序。\n\n\n7.    显示时候都是123的。\n8. 多个段落的隔开，需要每个段前tab或4空格？有点乱，感觉首列后空一行\n           则每列都会空，非首列则空其后。\n9. 列表内使用引用符号>，需要缩进\n      10. 还是列表内容\n      >引用，我似乎没感觉到？\n\n\n   7. 如果列表放入代码，该区快就要缩进两tab或8空格\n```java\n   public static void main(String[] args){\n    System.out.pringtln(\"代码高亮\");\n   }\n```\n\n\n1.可能无意间会写出列表形式，比如首行“2016. 09. 25\"出现了数字，句点和空格\n就会形成列表，如此可以加个\\来避免，或者其他符号。\n注意和普通文本的编辑不同，列表的缩进，需要在列表标识符号前加空格，最多三个。\n其后面需至少一个空格或tab\n\n\n2.文字段落前一个tab或4个空格，就会生成背景框。\n`和用``符号似乎不太一样，这个有点加黑得样子？`\n\n## 四、代码区块\n1,代码区块得建立就是面所说，一个tab或者4个空格。\n而在带码区块中，markdown的一般语法符号，将只是普通文本。\n```java\npublic static void main(String[] args){\n    System.out.pringtln(\"代码高亮\");\n}//哎呦，后面的```引号，还不到能直接放在这一行呢，否则就不算结束代码块了。\n```\n\n## 五、分割线\n在一行中使用三个或以上的星号、减号、下划线，就可以显示一个分割线\n但是需要从行首就开始,可以混用,(不同的md编辑器，也许细节不同)且不必连续，但不能掺杂文字\n\n----\n___\n\n_*-\n\n而且要注意避免形成标题哦，\n*     *     *\n\n## 六、区段元素\n\n#### 1、链接\n\nMarkdown 支持两种链接：行内式和参考式。链接文字都用[方括号]标记。\n- 行内式，[]后跟(url \"网址标题\")即可。\n  [baidu](www.baidu.com \"百度\")，前面式显示网址，\"\"内部式网址标题\n  * 似乎也可以使用路径形式,[file](/server/file/ \"FTP服务器\")。\n\n\n- 参考式，两个[name][id]，前面为显示名称，id为标记变量名，在文章内任意文本首行位置\n  声明 [id]:www.baidu.com,即可。\n  *例如，[百度][url],网址在此显示，地址声明如下，\n  注意缩进什么的不要与其他语法冲突而失效。\n\n  [url]: www.baidu.com&quot;baidu&quot;\n\n  此种链接内容的格式，选择性的3个空格，一个冒号，一个tab或空格，然后是网址，\n  后面的标题title，可以用单引号，双引号，或者括号都行。\n  注，网址可以用<>包括，标题可以另起一行。链接不区分大小写，字母数字，空白和标点。\n  隐式链接标记功能，可以省略指定连接。此时视为文字为网址，[id]就空这，name等于id了。\n- 如[Google][]\n[Google]: www.google.com\n如此形式，name可以多单词，加空格。\n[thinkpad lenovo][],\n[thinkpad lenovo]: www.lenovo.com\n参考式链接可以像文献引用一样，放于文后，便于整洁。\n## 七、强调\nMarkdown用\\*或_来标识强调，位于其包围内的文本，被强调显示，两个\\*\\*或__,会更强吗？\n此处为了显示单个的*而不是和后面的一起作用，用了\\做转义。\n+ 如下\n  - _单个强调_,和*强调单个*，是加黑斜体\n  - **双星强调**，__更厉害__\n  + ****那么三星更厉害吗****,最多可用四个，但是没啥区别了。\n    ____你____混合失效，且符号两边不能有空格。前边的不能空？\n+ *强调单个*\n- 删除线，~~nihao~~\n\n\n## 八、代码及符号\n原来背景`是用来标记小行段代码的`，用反单引号\\``标记，代码写在其中。\n要是代码内也有\\``符号，那么外围可以多用几个\\``符号\n例如````这里面还有反单引号``出现呢````，成对出现的哦。\n___\n使用反引号时候，紧跟代码语言，即可实现代码高亮\n最外围的\\```  内部各加一个空格，里面的引用就可以直接一开始添加更多的\\```了\n```  ``使用反引号 ```\n\n$$注意使用标签标识符的时候，前后的位置个数要一致，尤其小心缩进与空格的影响$$\n$d$\n#d\n\n$$你好#$$\n\n$$nihao_$$\n\n$$nihao^$$\n\n$$nihao$$\n$$nihao%$$\n$$nihao@$$\n$$nihao~$$\n$$nihao{$$\n1、markdown语法会自动规避一盒html的标签，比如&，[]之类的\n\n## 九、图片\n\n1、Markdown 使用和链接类似得方式处理图片，行内式和参考式，用！作为标记，加[name]和(path)\n+ 行内式，![img1](/path/to/img1.jpg,\"title\"),小心写成链接哦![img2](/path/to/img2.jpg)\n+ 参考式，![img2][image2]\n  [image2]: /path/to/image2.jpg\n  暂时没法指定宽高，可以用html的< image > 标签,此处加空格，否则就不显示了。颜色字体什么的\n  就看html的形式了。\n## 十、其他\n1、自动链接，Markdown  转译简短得自动链接或邮箱\n<http://www.baidu.com/>,<markdown@mk.cn>\n2、反斜杠，转义符号，可用于一下符号转义为普通\n>\\\n>`\n>*\n>_\n>{}\n>[]\n>#\n>+\n>-\n>.\n>!\n>这几种符号得转义。\n\n<! html 的标签，似乎会被隐藏,不同编辑器略有不同哦，<> >\n空格空格加回车，才是换行符。\n\n<text 这个标签就被隐藏了哦 >\n\n\n### 表格\n\n\n\n**Markdown　Extra**　表格语法：独立行开始，写title，用|分割，然后次行用－符号，并配合|，如此构成表格。\n\n\n| 项目       | 价格    |\n| -------- | ----- |\n| Computer | $1600 |\n| Phone    | $12   |\n| Pipe     | $1    |\n\n\n可以使用冒号来定义对齐方式：\n：---表示左对齐，---：表示右对齐，：---：表示居中对齐。\n\n\n| 项目       |     价格 |  数量  |\n| :------- | -----: | :--: |\n| Computer | 1600 元 |  5   |\n| Phone    |   12 元 |  12  |\n| Pipe     |    1 元 | 234  |\n\n\n- 试试表格，至少要有表头和一个－标识列才行哦。\n\n\n表头|\n-|\n\n\n- 复选框，使用空格-/*/+空格[x]空格 项目，表示选中,类似列表选项。\n  * [x] 第一条\n  * [ ] 第二条\n\n---\n- 表情，使用冒号包围表情的英文代号\n  - 猴子:monkey:,星星:stars:,:v:\n  - 表情支持，见http://emoji.codes/\n\n\n## 其他拓展\n- CSDN\n  1. 脚注，类似链接，使用[^id]声明，其他地方[^id]:解释。\n  2. 目录，[toc]标签\n  3. UML图，类似代码块，不过反单引号后面申明的不是编程语言，而是图的类型\n        1. 如\n  ```sequence\n    张三->李四: 嘿，小四儿, 写博客了没?\n    Note right of 李四: 李四愣了一下，说：\n    李四-->张三: 忙得吐血，哪有时间写。\n  ```\n       2. 流程图\n  ```flow\n  st=>start: 开始\n  e=>end: 结束\n  op=>operation: 我的操作\n  cond=>condition: 确认？\n  st->op->cond\n  cond(yes)->e\n  cond(no)->op\n  ```\n\n  4. 列表的定义与基本语法不同，使用:  项目来缩进列表项。\n  5. 数学公式，如下\n     使用MathJax渲染*LaTex* 数学公式，详见[math.stackexchange.com].\n  - 行内公式，数学公式为：$\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$。\n  - 块级公式：\n      $$x = \\dfrac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$\n\n\n- Gitlab\n\n      1、网址直译，www.baidu.com\n\n      2、文件对比，不同,使用花括号和中括号的配合\n      ，不能同时使用同一个哦。{+ ADD +] and [-delete-}\n      3、gitlab引用，@user_name,#123,等等。\n\n---\n####CmdMarkdown [^cmd]\n- 高效绘制 [流程图](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#7-流程图)，标识为flow\n```flow\nst=>start: Start\nop=>operation: Your Operation\ncond=>condition: Yes or No?\ne=>end\n\nst->op->cond\ncond(yes)->e\ncond(no)->op\n```\n\n- 高效绘制 [序列图](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#8-序列图)，其标识为sequence\n\n```sequence\nAlice->Bob: Hello Bob, how are you?\nNote right of Bob: Bob thinks\nBob-->Alice: I am good thanks!\n```\n\n----\n- 高效绘制 [甘特图](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#9-甘特图)标识为gantt\n\n```gantt\n    title 项目开发流程\n    section 项目确定\n        需求分析       :a1, 2016-06-22, 3d\n        可行性报告     :after a1, 5d\n        概念验证       : 5d\n    section 项目实施\n        概要设计      :2016-07-05  , 5d\n        详细设计      :2016-07-08, 10d\n        编码          :2016-07-15, 10d\n        测试          :2016-07-22, 5d\n    section 发布验收\n        发布: 2d\n        验收: 3d\n```\n\n[^cmd]: jiaozhu\n注：markdown可以直接使用许多html的标签，用于更为丰富的界面显示哦。\n本人记录Markdown 语法用于个人学习，难免有疏漏，请读者见谅指点\n本文参考[*Markdown*语法](http://www.appinn.com/markdown/),在此感谢。\n","source":"_posts/Markdown基本语法.md","raw":"---\ntitle: \"Markdown基本语法\"\ndate: 2016-09-26 10:57\nauthor: 冰路梦\ntag:\n    - Markdown\ncategories:\n    - 编程相关\n---\n\n\nMarkdown 基本语法\n==\n**本文没有使用csdn的markdown书写，而是原语法格式显示，便于更好的理解markdown语法。**\n目前本人发现的比较不错的markdown编辑器：tepora、atom、Haroopad、以及在线版的cmdMarkdown、马克飞象、Stack Edit等。\n文章结尾附上本文的markdown形式。\n<image url = '/path/to/image'>\n\n\n## 一、标题\n`1. 类似Setext形式，利用 = 或 - 符号，写在标题文字下一行，分别表示一级、二级 标题`\n\n\n\n注 : =或-至少也只需要两个就好。\n\n\n`2.类似Atx形式，使用 # 符号，加与标题文字前，且至少一个空格才行使用个数1～6,分别表示六级标题`\n\n\n\n注 : 标签语言讲究对称性，标题Atx模式可以在标题后加上不定个数的#，仅为美观而已。\n\n\n\nmarkdown编辑文字需要有空行，才能显示为空行，而换行需要编辑时有一个空行\n\n\n\n显示才会换行。编程通则，符号输入法英文半角。\n\n\n## 二、区块引用\n> markdown使用类似email中的 > 引用符号，标记区块\n> 区块内的每一行都会自动添加 > 符号\n> 其实也可以仅在第一行使用了 > 符号即可，不过有些编辑器会自动补上。\n\n\n但是这样的话就需要有一个空行，才能表示区块结束。若是最后一行有 > 符号，\n想要结束区块就要回车后，空一行，再回来哦，表示中断和区块编辑的联系。\n>区块内也可以使用嵌套\n> >嵌套层级应该是没有限制的\n> >>多级嵌套\n> >>也是挺好看的\n\n\n> >但是想要结束一个小区块，就得借助空行了。\n> >不然还真的不好结束呢。外层区块与其他区块之间，\n> >看来需要有非区块语法隔离才行。\n\n---\n>使用了一个分割线才和上面的区块分开来，空格，空行，回车都没用的哦。\n>区块内可以使用其他markdown的语法。\n###### 来个标题\n`背景条幅`\n\n---\n三个---即可形成一个分割线，注意和上面文字空一行，否则就成标题了哦\n## 三、列表\n+ 列表分为无序列表和有序列表，可以多级列表。\n\n\n    - 无序列表中使用 加、减、星号\n       * 来作为开启列表的标识,均需要有一个空格才生效。或者tab也行\n\n\n9. 有序列表使用数字\n   6. 和英文的句号，数字不一定就要一二三的很有序。\n\n\n7.    显示时候都是123的。\n8. 多个段落的隔开，需要每个段前tab或4空格？有点乱，感觉首列后空一行\n           则每列都会空，非首列则空其后。\n9. 列表内使用引用符号>，需要缩进\n      10. 还是列表内容\n      >引用，我似乎没感觉到？\n\n\n   7. 如果列表放入代码，该区快就要缩进两tab或8空格\n```java\n   public static void main(String[] args){\n    System.out.pringtln(\"代码高亮\");\n   }\n```\n\n\n1.可能无意间会写出列表形式，比如首行“2016. 09. 25\"出现了数字，句点和空格\n就会形成列表，如此可以加个\\来避免，或者其他符号。\n注意和普通文本的编辑不同，列表的缩进，需要在列表标识符号前加空格，最多三个。\n其后面需至少一个空格或tab\n\n\n2.文字段落前一个tab或4个空格，就会生成背景框。\n`和用``符号似乎不太一样，这个有点加黑得样子？`\n\n## 四、代码区块\n1,代码区块得建立就是面所说，一个tab或者4个空格。\n而在带码区块中，markdown的一般语法符号，将只是普通文本。\n```java\npublic static void main(String[] args){\n    System.out.pringtln(\"代码高亮\");\n}//哎呦，后面的```引号，还不到能直接放在这一行呢，否则就不算结束代码块了。\n```\n\n## 五、分割线\n在一行中使用三个或以上的星号、减号、下划线，就可以显示一个分割线\n但是需要从行首就开始,可以混用,(不同的md编辑器，也许细节不同)且不必连续，但不能掺杂文字\n\n----\n___\n\n_*-\n\n而且要注意避免形成标题哦，\n*     *     *\n\n## 六、区段元素\n\n#### 1、链接\n\nMarkdown 支持两种链接：行内式和参考式。链接文字都用[方括号]标记。\n- 行内式，[]后跟(url \"网址标题\")即可。\n  [baidu](www.baidu.com \"百度\")，前面式显示网址，\"\"内部式网址标题\n  * 似乎也可以使用路径形式,[file](/server/file/ \"FTP服务器\")。\n\n\n- 参考式，两个[name][id]，前面为显示名称，id为标记变量名，在文章内任意文本首行位置\n  声明 [id]:www.baidu.com,即可。\n  *例如，[百度][url],网址在此显示，地址声明如下，\n  注意缩进什么的不要与其他语法冲突而失效。\n\n  [url]: www.baidu.com&quot;baidu&quot;\n\n  此种链接内容的格式，选择性的3个空格，一个冒号，一个tab或空格，然后是网址，\n  后面的标题title，可以用单引号，双引号，或者括号都行。\n  注，网址可以用<>包括，标题可以另起一行。链接不区分大小写，字母数字，空白和标点。\n  隐式链接标记功能，可以省略指定连接。此时视为文字为网址，[id]就空这，name等于id了。\n- 如[Google][]\n[Google]: www.google.com\n如此形式，name可以多单词，加空格。\n[thinkpad lenovo][],\n[thinkpad lenovo]: www.lenovo.com\n参考式链接可以像文献引用一样，放于文后，便于整洁。\n## 七、强调\nMarkdown用\\*或_来标识强调，位于其包围内的文本，被强调显示，两个\\*\\*或__,会更强吗？\n此处为了显示单个的*而不是和后面的一起作用，用了\\做转义。\n+ 如下\n  - _单个强调_,和*强调单个*，是加黑斜体\n  - **双星强调**，__更厉害__\n  + ****那么三星更厉害吗****,最多可用四个，但是没啥区别了。\n    ____你____混合失效，且符号两边不能有空格。前边的不能空？\n+ *强调单个*\n- 删除线，~~nihao~~\n\n\n## 八、代码及符号\n原来背景`是用来标记小行段代码的`，用反单引号\\``标记，代码写在其中。\n要是代码内也有\\``符号，那么外围可以多用几个\\``符号\n例如````这里面还有反单引号``出现呢````，成对出现的哦。\n___\n使用反引号时候，紧跟代码语言，即可实现代码高亮\n最外围的\\```  内部各加一个空格，里面的引用就可以直接一开始添加更多的\\```了\n```  ``使用反引号 ```\n\n$$注意使用标签标识符的时候，前后的位置个数要一致，尤其小心缩进与空格的影响$$\n$d$\n#d\n\n$$你好#$$\n\n$$nihao_$$\n\n$$nihao^$$\n\n$$nihao$$\n$$nihao%$$\n$$nihao@$$\n$$nihao~$$\n$$nihao{$$\n1、markdown语法会自动规避一盒html的标签，比如&，[]之类的\n\n## 九、图片\n\n1、Markdown 使用和链接类似得方式处理图片，行内式和参考式，用！作为标记，加[name]和(path)\n+ 行内式，![img1](/path/to/img1.jpg,\"title\"),小心写成链接哦![img2](/path/to/img2.jpg)\n+ 参考式，![img2][image2]\n  [image2]: /path/to/image2.jpg\n  暂时没法指定宽高，可以用html的< image > 标签,此处加空格，否则就不显示了。颜色字体什么的\n  就看html的形式了。\n## 十、其他\n1、自动链接，Markdown  转译简短得自动链接或邮箱\n<http://www.baidu.com/>,<markdown@mk.cn>\n2、反斜杠，转义符号，可用于一下符号转义为普通\n>\\\n>`\n>*\n>_\n>{}\n>[]\n>#\n>+\n>-\n>.\n>!\n>这几种符号得转义。\n\n<! html 的标签，似乎会被隐藏,不同编辑器略有不同哦，<> >\n空格空格加回车，才是换行符。\n\n<text 这个标签就被隐藏了哦 >\n\n\n### 表格\n\n\n\n**Markdown　Extra**　表格语法：独立行开始，写title，用|分割，然后次行用－符号，并配合|，如此构成表格。\n\n\n| 项目       | 价格    |\n| -------- | ----- |\n| Computer | $1600 |\n| Phone    | $12   |\n| Pipe     | $1    |\n\n\n可以使用冒号来定义对齐方式：\n：---表示左对齐，---：表示右对齐，：---：表示居中对齐。\n\n\n| 项目       |     价格 |  数量  |\n| :------- | -----: | :--: |\n| Computer | 1600 元 |  5   |\n| Phone    |   12 元 |  12  |\n| Pipe     |    1 元 | 234  |\n\n\n- 试试表格，至少要有表头和一个－标识列才行哦。\n\n\n表头|\n-|\n\n\n- 复选框，使用空格-/*/+空格[x]空格 项目，表示选中,类似列表选项。\n  * [x] 第一条\n  * [ ] 第二条\n\n---\n- 表情，使用冒号包围表情的英文代号\n  - 猴子:monkey:,星星:stars:,:v:\n  - 表情支持，见http://emoji.codes/\n\n\n## 其他拓展\n- CSDN\n  1. 脚注，类似链接，使用[^id]声明，其他地方[^id]:解释。\n  2. 目录，[toc]标签\n  3. UML图，类似代码块，不过反单引号后面申明的不是编程语言，而是图的类型\n        1. 如\n  ```sequence\n    张三->李四: 嘿，小四儿, 写博客了没?\n    Note right of 李四: 李四愣了一下，说：\n    李四-->张三: 忙得吐血，哪有时间写。\n  ```\n       2. 流程图\n  ```flow\n  st=>start: 开始\n  e=>end: 结束\n  op=>operation: 我的操作\n  cond=>condition: 确认？\n  st->op->cond\n  cond(yes)->e\n  cond(no)->op\n  ```\n\n  4. 列表的定义与基本语法不同，使用:  项目来缩进列表项。\n  5. 数学公式，如下\n     使用MathJax渲染*LaTex* 数学公式，详见[math.stackexchange.com].\n  - 行内公式，数学公式为：$\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$。\n  - 块级公式：\n      $$x = \\dfrac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$\n\n\n- Gitlab\n\n      1、网址直译，www.baidu.com\n\n      2、文件对比，不同,使用花括号和中括号的配合\n      ，不能同时使用同一个哦。{+ ADD +] and [-delete-}\n      3、gitlab引用，@user_name,#123,等等。\n\n---\n####CmdMarkdown [^cmd]\n- 高效绘制 [流程图](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#7-流程图)，标识为flow\n```flow\nst=>start: Start\nop=>operation: Your Operation\ncond=>condition: Yes or No?\ne=>end\n\nst->op->cond\ncond(yes)->e\ncond(no)->op\n```\n\n- 高效绘制 [序列图](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#8-序列图)，其标识为sequence\n\n```sequence\nAlice->Bob: Hello Bob, how are you?\nNote right of Bob: Bob thinks\nBob-->Alice: I am good thanks!\n```\n\n----\n- 高效绘制 [甘特图](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#9-甘特图)标识为gantt\n\n```gantt\n    title 项目开发流程\n    section 项目确定\n        需求分析       :a1, 2016-06-22, 3d\n        可行性报告     :after a1, 5d\n        概念验证       : 5d\n    section 项目实施\n        概要设计      :2016-07-05  , 5d\n        详细设计      :2016-07-08, 10d\n        编码          :2016-07-15, 10d\n        测试          :2016-07-22, 5d\n    section 发布验收\n        发布: 2d\n        验收: 3d\n```\n\n[^cmd]: jiaozhu\n注：markdown可以直接使用许多html的标签，用于更为丰富的界面显示哦。\n本人记录Markdown 语法用于个人学习，难免有疏漏，请读者见谅指点\n本文参考[*Markdown*语法](http://www.appinn.com/markdown/),在此感谢。\n","slug":"Markdown基本语法","published":1,"updated":"2017-03-31T06:53:38.241Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ndxcdc001v88owk0d7fwvt","content":"<h1 id=\"Markdown-基本语法\"><a href=\"#Markdown-基本语法\" class=\"headerlink\" title=\"Markdown 基本语法\"></a>Markdown 基本语法</h1><p><strong>本文没有使用csdn的markdown书写，而是原语法格式显示，便于更好的理解markdown语法。</strong><br>目前本人发现的比较不错的markdown编辑器：tepora、atom、Haroopad、以及在线版的cmdMarkdown、马克飞象、Stack Edit等。<br>文章结尾附上本文的markdown形式。</p>\n<image url=\"/path/to/image\">\n\n\n<h2 id=\"一、标题\"><a href=\"#一、标题\" class=\"headerlink\" title=\"一、标题\"></a>一、标题</h2><p><code>1. 类似Setext形式，利用 = 或 - 符号，写在标题文字下一行，分别表示一级、二级 标题</code></p>\n<p>注 : =或-至少也只需要两个就好。</p>\n<p><code>2.类似Atx形式，使用 # 符号，加与标题文字前，且至少一个空格才行使用个数1～6,分别表示六级标题</code></p>\n<p>注 : 标签语言讲究对称性，标题Atx模式可以在标题后加上不定个数的#，仅为美观而已。</p>\n<p>markdown编辑文字需要有空行，才能显示为空行，而换行需要编辑时有一个空行</p>\n<p>显示才会换行。编程通则，符号输入法英文半角。</p>\n<h2 id=\"二、区块引用\"><a href=\"#二、区块引用\" class=\"headerlink\" title=\"二、区块引用\"></a>二、区块引用</h2><blockquote>\n<p>markdown使用类似email中的 &gt; 引用符号，标记区块<br>区块内的每一行都会自动添加 &gt; 符号<br>其实也可以仅在第一行使用了 &gt; 符号即可，不过有些编辑器会自动补上。</p>\n</blockquote>\n<p>但是这样的话就需要有一个空行，才能表示区块结束。若是最后一行有 &gt; 符号，<br>想要结束区块就要回车后，空一行，再回来哦，表示中断和区块编辑的联系。</p>\n<blockquote>\n<p>区块内也可以使用嵌套</p>\n<blockquote>\n<p>嵌套层级应该是没有限制的</p>\n<blockquote>\n<p>多级嵌套<br>也是挺好看的</p>\n</blockquote>\n<p>但是想要结束一个小区块，就得借助空行了。<br>不然还真的不好结束呢。外层区块与其他区块之间，<br>看来需要有非区块语法隔离才行。</p>\n</blockquote>\n</blockquote>\n<hr>\n<blockquote>\n<p>使用了一个分割线才和上面的区块分开来，空格，空行，回车都没用的哦。<br>区块内可以使用其他markdown的语法。</p>\n<h6 id=\"来个标题\"><a href=\"#来个标题\" class=\"headerlink\" title=\"来个标题\"></a>来个标题</h6><p><code>背景条幅</code></p>\n</blockquote>\n<hr>\n<p>三个—即可形成一个分割线，注意和上面文字空一行，否则就成标题了哦</p>\n<h2 id=\"三、列表\"><a href=\"#三、列表\" class=\"headerlink\" title=\"三、列表\"></a>三、列表</h2><ul>\n<li>列表分为无序列表和有序列表，可以多级列表。</li>\n</ul>\n<pre><code>- 无序列表中使用 加、减、星号\n   * 来作为开启列表的标识,均需要有一个空格才生效。或者tab也行\n</code></pre><ol>\n<li>有序列表使用数字<ol>\n<li>和英文的句号，数字不一定就要一二三的很有序。</li>\n</ol>\n</li>\n</ol>\n<ol>\n<li>显示时候都是123的。</li>\n<li>多个段落的隔开，需要每个段前tab或4空格？有点乱，感觉首列后空一行<pre><code>则每列都会空，非首列则空其后。\n</code></pre></li>\n<li>列表内使用引用符号&gt;，需要缩进<ol>\n<li>还是列表内容<blockquote>\n<p>引用，我似乎没感觉到？</p>\n</blockquote>\n</li>\n</ol>\n</li>\n</ol>\n<ol>\n<li>如果列表放入代码，该区快就要缩进两tab或8空格<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\"> System.out.pringtln(<span class=\"string\">\"代码高亮\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>1.可能无意间会写出列表形式，比如首行“2016. 09. 25”出现了数字，句点和空格<br>就会形成列表，如此可以加个\\来避免，或者其他符号。<br>注意和普通文本的编辑不同，列表的缩进，需要在列表标识符号前加空格，最多三个。<br>其后面需至少一个空格或tab</p>\n<p>2.文字段落前一个tab或4个空格，就会生成背景框。<br><code>和用``符号似乎不太一样，这个有点加黑得样子？</code></p>\n<h2 id=\"四、代码区块\"><a href=\"#四、代码区块\" class=\"headerlink\" title=\"四、代码区块\"></a>四、代码区块</h2><p>1,代码区块得建立就是面所说，一个tab或者4个空格。<br>而在带码区块中，markdown的一般语法符号，将只是普通文本。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\">    System.out.pringtln(<span class=\"string\">\"代码高亮\"</span>);</div><div class=\"line\">&#125;<span class=\"comment\">//哎呦，后面的```引号，还不到能直接放在这一行呢，否则就不算结束代码块了。</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"五、分割线\"><a href=\"#五、分割线\" class=\"headerlink\" title=\"五、分割线\"></a>五、分割线</h2><p>在一行中使用三个或以上的星号、减号、下划线，就可以显示一个分割线<br>但是需要从行首就开始,可以混用,(不同的md编辑器，也许细节不同)且不必连续，但不能掺杂文字</p>\n<hr>\n<hr>\n<hr>\n<p>而且要注意避免形成标题哦，</p>\n<hr>\n<h2 id=\"六、区段元素\"><a href=\"#六、区段元素\" class=\"headerlink\" title=\"六、区段元素\"></a>六、区段元素</h2><h4 id=\"1、链接\"><a href=\"#1、链接\" class=\"headerlink\" title=\"1、链接\"></a>1、链接</h4><p>Markdown 支持两种链接：行内式和参考式。链接文字都用[方括号]标记。</p>\n<ul>\n<li>行内式，[]后跟(url “网址标题”)即可。<br><a href=\"www.baidu.com\" title=\"百度\">baidu</a>，前面式显示网址，””内部式网址标题<ul>\n<li>似乎也可以使用路径形式,<a href=\"/server/file/\" title=\"FTP服务器\">file</a>。</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>参考式，两个[name][id]，前面为显示名称，id为标记变量名，在文章内任意文本首行位置<br>声明 [id]:www.baidu.com,即可。<br>*例如，<a href=\"www.baidu.com&quot;baidu&quot;\">百度</a>,网址在此显示，地址声明如下，<br>注意缩进什么的不要与其他语法冲突而失效。</li>\n</ul>\n<p>  此种链接内容的格式，选择性的3个空格，一个冒号，一个tab或空格，然后是网址，<br>  后面的标题title，可以用单引号，双引号，或者括号都行。<br>  注，网址可以用&lt;&gt;包括，标题可以另起一行。链接不区分大小写，字母数字，空白和标点。<br>  隐式链接标记功能，可以省略指定连接。此时视为文字为网址，[id]就空这，name等于id了。</p>\n<ul>\n<li>如<a href=\"www.google.com\">Google</a></li>\n</ul>\n<p>如此形式，name可以多单词，加空格。<br><a href=\"www.lenovo.com\">thinkpad lenovo</a>,</p>\n<p>参考式链接可以像文献引用一样，放于文后，便于整洁。</p>\n<h2 id=\"七、强调\"><a href=\"#七、强调\" class=\"headerlink\" title=\"七、强调\"></a>七、强调</h2><p>Markdown用*或_来标识强调，位于其包围内的文本，被强调显示，两个**或__,会更强吗？<br>此处为了显示单个的*而不是和后面的一起作用，用了\\做转义。</p>\n<ul>\n<li>如下<ul>\n<li><em>单个强调</em>,和<em>强调单个</em>，是加黑斜体</li>\n<li><strong>双星强调</strong>，<strong>更厉害</strong></li>\n</ul>\n<ul>\n<li><strong><strong>那么三星更厉害吗</strong></strong>,最多可用四个，但是没啥区别了。<br><strong><strong>你</strong></strong>混合失效，且符号两边不能有空格。前边的不能空？</li>\n</ul>\n</li>\n<li><em>强调单个</em></li>\n</ul>\n<ul>\n<li>删除线，<del>nihao</del></li>\n</ul>\n<h2 id=\"八、代码及符号\"><a href=\"#八、代码及符号\" class=\"headerlink\" title=\"八、代码及符号\"></a>八、代码及符号</h2><p>原来背景<code>是用来标记小行段代码的</code>，用反单引号``标记，代码写在其中。<br>要是代码内也有``符号，那么外围可以多用几个``符号<br>例如<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">___</div><div class=\"line\">使用反引号时候，紧跟代码语言，即可实现代码高亮</div><div class=\"line\">最外围的\\```  内部各加一个空格，里面的引用就可以直接一开始添加更多的\\```了</div><div class=\"line\">```  ``使用反引号</div></pre></td></tr></table></figure></p>\n<p>$$注意使用标签标识符的时候，前后的位置个数要一致，尤其小心缩进与空格的影响$$<br>$d$</p>\n<p>#d</p>\n<p>$$你好#$$</p>\n<p>$$nihao_$$</p>\n<p>$$nihao^$$</p>\n<p>$$nihao$$<br>$$nihao%$$<br>$$nihao@$$<br>$$nihao~$$<br>$$nihao{$$<br>1、markdown语法会自动规避一盒html的标签，比如&amp;，[]之类的</p>\n<h2 id=\"九、图片\"><a href=\"#九、图片\" class=\"headerlink\" title=\"九、图片\"></a>九、图片</h2><p>1、Markdown 使用和链接类似得方式处理图片，行内式和参考式，用！作为标记，加[name]和(path)</p>\n<ul>\n<li>行内式，<img src=\"/2016/09/26/Markdown基本语法/to/img1.jpg,&quot;title&quot;\" alt=\"img1\">,小心写成链接哦<img src=\"/2016/09/26/Markdown基本语法/to/img2.jpg\" alt=\"img2\"></li>\n<li>参考式，<img src=\"/2016/09/26/Markdown基本语法/to/image2.jpg\" alt=\"img2\"></li>\n</ul>\n<p>  暂时没法指定宽高，可以用html的&lt; image &gt; 标签,此处加空格，否则就不显示了。颜色字体什么的<br>  就看html的形式了。</p>\n<h2 id=\"十、其他\"><a href=\"#十、其他\" class=\"headerlink\" title=\"十、其他\"></a>十、其他</h2><p>1、自动链接，Markdown  转译简短得自动链接或邮箱<br><a href=\"http://www.baidu.com/\" target=\"_blank\" rel=\"external\">http://www.baidu.com/</a>,<a href=\"&#x6d;&#x61;&#105;&#x6c;&#x74;&#111;&#x3a;&#x6d;&#x61;&#x72;&#107;&#100;&#x6f;&#119;&#110;&#64;&#109;&#x6b;&#46;&#x63;&#x6e;\">&#x6d;&#x61;&#x72;&#107;&#100;&#x6f;&#119;&#110;&#64;&#109;&#x6b;&#46;&#x63;&#x6e;</a><br>2、反斜杠，转义符号，可用于一下符号转义为普通</p>\n<blockquote>\n<p>\\<br>`<br>*<br>_<br>{}<br>[]<br>#<br>+<br>-<br>.<br>!<br>这几种符号得转义。</p>\n</blockquote>\n<p>&lt;! html 的标签，似乎会被隐藏,不同编辑器略有不同哦，&lt;&gt; &gt;<br>空格空格加回车，才是换行符。</p>\n<text 这个标签就被隐藏了哦=\"\">\n\n\n<h3 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h3><p><strong>Markdown　Extra</strong>　表格语法：独立行开始，写title，用|分割，然后次行用－符号，并配合|，如此构成表格。</p>\n<table>\n<thead>\n<tr>\n<th>项目</th>\n<th>价格</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Computer</td>\n<td>$1600</td>\n</tr>\n<tr>\n<td>Phone</td>\n<td>$12</td>\n</tr>\n<tr>\n<td>Pipe</td>\n<td>$1</td>\n</tr>\n</tbody>\n</table>\n<p>可以使用冒号来定义对齐方式：<br>：—表示左对齐，—：表示右对齐，：—：表示居中对齐。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">项目</th>\n<th style=\"text-align:right\">价格</th>\n<th style=\"text-align:center\">数量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Computer</td>\n<td style=\"text-align:right\">1600 元</td>\n<td style=\"text-align:center\">5</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Phone</td>\n<td style=\"text-align:right\">12 元</td>\n<td style=\"text-align:center\">12</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Pipe</td>\n<td style=\"text-align:right\">1 元</td>\n<td style=\"text-align:center\">234</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>试试表格，至少要有表头和一个－标识列才行哦。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>表头</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>复选框，使用空格-/*/+空格[x]空格 项目，表示选中,类似列表选项。<ul>\n<li>[x] 第一条</li>\n<li>[ ] 第二条</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>表情，使用冒号包围表情的英文代号<ul>\n<li>猴子:monkey:,星星:stars:,:v:</li>\n<li>表情支持，见<a href=\"http://emoji.codes/\" target=\"_blank\" rel=\"external\">http://emoji.codes/</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"其他拓展\"><a href=\"#其他拓展\" class=\"headerlink\" title=\"其他拓展\"></a>其他拓展</h2><ul>\n<li><p>CSDN</p>\n<ol>\n<li>脚注，类似链接，使用[^id]声明，其他地方[^id]:解释。</li>\n<li>目录，[toc]标签</li>\n<li><p>UML图，类似代码块，不过反单引号后面申明的不是编程语言，而是图的类型</p>\n<ol>\n<li><p>如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">张三-&gt;李四: 嘿，小四儿, 写博客了没?</div><div class=\"line\">Note right of 李四: 李四愣了一下，说：</div><div class=\"line\">李四--&gt;张三: 忙得吐血，哪有时间写。</div></pre></td></tr></table></figure>\n<ol>\n<li>流程图<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">st=&gt;start: 开始</div><div class=\"line\">e=&gt;end: 结束</div><div class=\"line\">op=&gt;operation: 我的操作</div><div class=\"line\">cond=&gt;condition: 确认？</div><div class=\"line\">st-&gt;op-&gt;cond</div><div class=\"line\">cond(yes)-&gt;e</div><div class=\"line\">cond(no)-&gt;op</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><p>列表的定义与基本语法不同，使用:  项目来缩进列表项。</p>\n</li>\n<li>数学公式，如下<br>使用MathJax渲染<em>LaTex</em> 数学公式，详见[math.stackexchange.com].</li>\n</ol>\n<ul>\n<li>行内公式，数学公式为：$\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$。</li>\n<li>块级公式：<br>  $$x = \\dfrac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>Gitlab</p>\n<pre><code>1、网址直译，www.baidu.com\n\n2、文件对比，不同,使用花括号和中括号的配合\n，不能同时使用同一个哦。{+ ADD +] and [-delete-}\n3、gitlab引用，@user_name,#123,等等。\n</code></pre></li>\n</ul>\n<hr>\n<p>####CmdMarkdown <a href=\"jiaozhu\">^cmd</a></p>\n<ul>\n<li><p>高效绘制 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#7-流程图\" target=\"_blank\" rel=\"external\">流程图</a>，标识为flow</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">st=&gt;start: Start</div><div class=\"line\">op=&gt;operation: Your Operation</div><div class=\"line\">cond=&gt;condition: Yes or No?</div><div class=\"line\">e=&gt;end</div><div class=\"line\"></div><div class=\"line\">st-&gt;op-&gt;cond</div><div class=\"line\">cond(yes)-&gt;e</div><div class=\"line\">cond(no)-&gt;op</div></pre></td></tr></table></figure>\n</li>\n<li><p>高效绘制 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#8-序列图\" target=\"_blank\" rel=\"external\">序列图</a>，其标识为sequence</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Alice-&gt;Bob: Hello Bob, how are you?</div><div class=\"line\">Note right of Bob: Bob thinks</div><div class=\"line\">Bob--&gt;Alice: I am good thanks!</div></pre></td></tr></table></figure>\n<hr>\n<ul>\n<li>高效绘制 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#9-甘特图\" target=\"_blank\" rel=\"external\">甘特图</a>标识为gantt</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">title 项目开发流程</div><div class=\"line\">section 项目确定</div><div class=\"line\">    需求分析       :a1, 2016-06-22, 3d</div><div class=\"line\">    可行性报告     :after a1, 5d</div><div class=\"line\">    概念验证       : 5d</div><div class=\"line\">section 项目实施</div><div class=\"line\">    概要设计      :2016-07-05  , 5d</div><div class=\"line\">    详细设计      :2016-07-08, 10d</div><div class=\"line\">    编码          :2016-07-15, 10d</div><div class=\"line\">    测试          :2016-07-22, 5d</div><div class=\"line\">section 发布验收</div><div class=\"line\">    发布: 2d</div><div class=\"line\">    验收: 3d</div></pre></td></tr></table></figure>\n<p>注：markdown可以直接使用许多html的标签，用于更为丰富的界面显示哦。<br>本人记录Markdown 语法用于个人学习，难免有疏漏，请读者见谅指点<br>本文参考<a href=\"http://www.appinn.com/markdown/\" target=\"_blank\" rel=\"external\"><em>Markdown</em>语法</a>,在此感谢。</p>\n</text></image>","excerpt":"","more":"<h1 id=\"Markdown-基本语法\"><a href=\"#Markdown-基本语法\" class=\"headerlink\" title=\"Markdown 基本语法\"></a>Markdown 基本语法</h1><p><strong>本文没有使用csdn的markdown书写，而是原语法格式显示，便于更好的理解markdown语法。</strong><br>目前本人发现的比较不错的markdown编辑器：tepora、atom、Haroopad、以及在线版的cmdMarkdown、马克飞象、Stack Edit等。<br>文章结尾附上本文的markdown形式。</p>\n<image url=\"/path/to/image\">\n\n\n<h2 id=\"一、标题\"><a href=\"#一、标题\" class=\"headerlink\" title=\"一、标题\"></a>一、标题</h2><p><code>1. 类似Setext形式，利用 = 或 - 符号，写在标题文字下一行，分别表示一级、二级 标题</code></p>\n<p>注 : =或-至少也只需要两个就好。</p>\n<p><code>2.类似Atx形式，使用 # 符号，加与标题文字前，且至少一个空格才行使用个数1～6,分别表示六级标题</code></p>\n<p>注 : 标签语言讲究对称性，标题Atx模式可以在标题后加上不定个数的#，仅为美观而已。</p>\n<p>markdown编辑文字需要有空行，才能显示为空行，而换行需要编辑时有一个空行</p>\n<p>显示才会换行。编程通则，符号输入法英文半角。</p>\n<h2 id=\"二、区块引用\"><a href=\"#二、区块引用\" class=\"headerlink\" title=\"二、区块引用\"></a>二、区块引用</h2><blockquote>\n<p>markdown使用类似email中的 &gt; 引用符号，标记区块<br>区块内的每一行都会自动添加 &gt; 符号<br>其实也可以仅在第一行使用了 &gt; 符号即可，不过有些编辑器会自动补上。</p>\n</blockquote>\n<p>但是这样的话就需要有一个空行，才能表示区块结束。若是最后一行有 &gt; 符号，<br>想要结束区块就要回车后，空一行，再回来哦，表示中断和区块编辑的联系。</p>\n<blockquote>\n<p>区块内也可以使用嵌套</p>\n<blockquote>\n<p>嵌套层级应该是没有限制的</p>\n<blockquote>\n<p>多级嵌套<br>也是挺好看的</p>\n</blockquote>\n<p>但是想要结束一个小区块，就得借助空行了。<br>不然还真的不好结束呢。外层区块与其他区块之间，<br>看来需要有非区块语法隔离才行。</p>\n</blockquote>\n</blockquote>\n<hr>\n<blockquote>\n<p>使用了一个分割线才和上面的区块分开来，空格，空行，回车都没用的哦。<br>区块内可以使用其他markdown的语法。</p>\n<h6 id=\"来个标题\"><a href=\"#来个标题\" class=\"headerlink\" title=\"来个标题\"></a>来个标题</h6><p><code>背景条幅</code></p>\n</blockquote>\n<hr>\n<p>三个—即可形成一个分割线，注意和上面文字空一行，否则就成标题了哦</p>\n<h2 id=\"三、列表\"><a href=\"#三、列表\" class=\"headerlink\" title=\"三、列表\"></a>三、列表</h2><ul>\n<li>列表分为无序列表和有序列表，可以多级列表。</li>\n</ul>\n<pre><code>- 无序列表中使用 加、减、星号\n   * 来作为开启列表的标识,均需要有一个空格才生效。或者tab也行\n</code></pre><ol>\n<li>有序列表使用数字<ol>\n<li>和英文的句号，数字不一定就要一二三的很有序。</li>\n</ol>\n</li>\n</ol>\n<ol>\n<li>显示时候都是123的。</li>\n<li>多个段落的隔开，需要每个段前tab或4空格？有点乱，感觉首列后空一行<pre><code>则每列都会空，非首列则空其后。\n</code></pre></li>\n<li>列表内使用引用符号&gt;，需要缩进<ol>\n<li>还是列表内容<blockquote>\n<p>引用，我似乎没感觉到？</p>\n</blockquote>\n</li>\n</ol>\n</li>\n</ol>\n<ol>\n<li>如果列表放入代码，该区快就要缩进两tab或8空格<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\"> System.out.pringtln(<span class=\"string\">\"代码高亮\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>1.可能无意间会写出列表形式，比如首行“2016. 09. 25”出现了数字，句点和空格<br>就会形成列表，如此可以加个\\来避免，或者其他符号。<br>注意和普通文本的编辑不同，列表的缩进，需要在列表标识符号前加空格，最多三个。<br>其后面需至少一个空格或tab</p>\n<p>2.文字段落前一个tab或4个空格，就会生成背景框。<br><code>和用``符号似乎不太一样，这个有点加黑得样子？</code></p>\n<h2 id=\"四、代码区块\"><a href=\"#四、代码区块\" class=\"headerlink\" title=\"四、代码区块\"></a>四、代码区块</h2><p>1,代码区块得建立就是面所说，一个tab或者4个空格。<br>而在带码区块中，markdown的一般语法符号，将只是普通文本。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\">    System.out.pringtln(<span class=\"string\">\"代码高亮\"</span>);</div><div class=\"line\">&#125;<span class=\"comment\">//哎呦，后面的```引号，还不到能直接放在这一行呢，否则就不算结束代码块了。</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"五、分割线\"><a href=\"#五、分割线\" class=\"headerlink\" title=\"五、分割线\"></a>五、分割线</h2><p>在一行中使用三个或以上的星号、减号、下划线，就可以显示一个分割线<br>但是需要从行首就开始,可以混用,(不同的md编辑器，也许细节不同)且不必连续，但不能掺杂文字</p>\n<hr>\n<hr>\n<hr>\n<p>而且要注意避免形成标题哦，</p>\n<hr>\n<h2 id=\"六、区段元素\"><a href=\"#六、区段元素\" class=\"headerlink\" title=\"六、区段元素\"></a>六、区段元素</h2><h4 id=\"1、链接\"><a href=\"#1、链接\" class=\"headerlink\" title=\"1、链接\"></a>1、链接</h4><p>Markdown 支持两种链接：行内式和参考式。链接文字都用[方括号]标记。</p>\n<ul>\n<li>行内式，[]后跟(url “网址标题”)即可。<br><a href=\"www.baidu.com\" title=\"百度\">baidu</a>，前面式显示网址，””内部式网址标题<ul>\n<li>似乎也可以使用路径形式,<a href=\"/server/file/\" title=\"FTP服务器\">file</a>。</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>参考式，两个[name][id]，前面为显示名称，id为标记变量名，在文章内任意文本首行位置<br>声明 [id]:www.baidu.com,即可。<br>*例如，<a href=\"www.baidu.com&quot;baidu&quot;\">百度</a>,网址在此显示，地址声明如下，<br>注意缩进什么的不要与其他语法冲突而失效。</li>\n</ul>\n<p>  此种链接内容的格式，选择性的3个空格，一个冒号，一个tab或空格，然后是网址，<br>  后面的标题title，可以用单引号，双引号，或者括号都行。<br>  注，网址可以用&lt;&gt;包括，标题可以另起一行。链接不区分大小写，字母数字，空白和标点。<br>  隐式链接标记功能，可以省略指定连接。此时视为文字为网址，[id]就空这，name等于id了。</p>\n<ul>\n<li>如<a href=\"www.google.com\">Google</a></li>\n</ul>\n<p>如此形式，name可以多单词，加空格。<br><a href=\"www.lenovo.com\">thinkpad lenovo</a>,</p>\n<p>参考式链接可以像文献引用一样，放于文后，便于整洁。</p>\n<h2 id=\"七、强调\"><a href=\"#七、强调\" class=\"headerlink\" title=\"七、强调\"></a>七、强调</h2><p>Markdown用*或_来标识强调，位于其包围内的文本，被强调显示，两个**或__,会更强吗？<br>此处为了显示单个的*而不是和后面的一起作用，用了\\做转义。</p>\n<ul>\n<li>如下<ul>\n<li><em>单个强调</em>,和<em>强调单个</em>，是加黑斜体</li>\n<li><strong>双星强调</strong>，<strong>更厉害</strong></li>\n</ul>\n<ul>\n<li><strong><strong>那么三星更厉害吗</strong></strong>,最多可用四个，但是没啥区别了。<br><strong><strong>你</strong></strong>混合失效，且符号两边不能有空格。前边的不能空？</li>\n</ul>\n</li>\n<li><em>强调单个</em></li>\n</ul>\n<ul>\n<li>删除线，<del>nihao</del></li>\n</ul>\n<h2 id=\"八、代码及符号\"><a href=\"#八、代码及符号\" class=\"headerlink\" title=\"八、代码及符号\"></a>八、代码及符号</h2><p>原来背景<code>是用来标记小行段代码的</code>，用反单引号``标记，代码写在其中。<br>要是代码内也有``符号，那么外围可以多用几个``符号<br>例如<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">___</div><div class=\"line\">使用反引号时候，紧跟代码语言，即可实现代码高亮</div><div class=\"line\">最外围的\\```  内部各加一个空格，里面的引用就可以直接一开始添加更多的\\```了</div><div class=\"line\">```  ``使用反引号</div></pre></td></tr></table></figure></p>\n<p>$$注意使用标签标识符的时候，前后的位置个数要一致，尤其小心缩进与空格的影响$$<br>$d$</p>\n<p>#d</p>\n<p>$$你好#$$</p>\n<p>$$nihao_$$</p>\n<p>$$nihao^$$</p>\n<p>$$nihao$$<br>$$nihao%$$<br>$$nihao@$$<br>$$nihao~$$<br>$$nihao{$$<br>1、markdown语法会自动规避一盒html的标签，比如&amp;，[]之类的</p>\n<h2 id=\"九、图片\"><a href=\"#九、图片\" class=\"headerlink\" title=\"九、图片\"></a>九、图片</h2><p>1、Markdown 使用和链接类似得方式处理图片，行内式和参考式，用！作为标记，加[name]和(path)</p>\n<ul>\n<li>行内式，<img src=\"/2016/09/26/Markdown基本语法/to/img1.jpg,&quot;title&quot;\" alt=\"img1\">,小心写成链接哦<img src=\"/2016/09/26/Markdown基本语法/to/img2.jpg\" alt=\"img2\"></li>\n<li>参考式，<img src=\"/2016/09/26/Markdown基本语法/to/image2.jpg\" alt=\"img2\"></li>\n</ul>\n<p>  暂时没法指定宽高，可以用html的&lt; image &gt; 标签,此处加空格，否则就不显示了。颜色字体什么的<br>  就看html的形式了。</p>\n<h2 id=\"十、其他\"><a href=\"#十、其他\" class=\"headerlink\" title=\"十、其他\"></a>十、其他</h2><p>1、自动链接，Markdown  转译简短得自动链接或邮箱<br><a href=\"http://www.baidu.com/\">http://www.baidu.com/</a>,<a href=\"&#x6d;&#x61;&#105;&#x6c;&#x74;&#111;&#x3a;&#x6d;&#x61;&#x72;&#107;&#100;&#x6f;&#119;&#110;&#64;&#109;&#x6b;&#46;&#x63;&#x6e;\">&#x6d;&#x61;&#x72;&#107;&#100;&#x6f;&#119;&#110;&#64;&#109;&#x6b;&#46;&#x63;&#x6e;</a><br>2、反斜杠，转义符号，可用于一下符号转义为普通</p>\n<blockquote>\n<p>\\<br>`<br>*<br>_<br>{}<br>[]<br>#<br>+<br>-<br>.<br>!<br>这几种符号得转义。</p>\n</blockquote>\n<p>&lt;! html 的标签，似乎会被隐藏,不同编辑器略有不同哦，&lt;&gt; &gt;<br>空格空格加回车，才是换行符。</p>\n<text 这个标签就被隐藏了哦=\"\">\n\n\n<h3 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h3><p><strong>Markdown　Extra</strong>　表格语法：独立行开始，写title，用|分割，然后次行用－符号，并配合|，如此构成表格。</p>\n<table>\n<thead>\n<tr>\n<th>项目</th>\n<th>价格</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Computer</td>\n<td>$1600</td>\n</tr>\n<tr>\n<td>Phone</td>\n<td>$12</td>\n</tr>\n<tr>\n<td>Pipe</td>\n<td>$1</td>\n</tr>\n</tbody>\n</table>\n<p>可以使用冒号来定义对齐方式：<br>：—表示左对齐，—：表示右对齐，：—：表示居中对齐。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">项目</th>\n<th style=\"text-align:right\">价格</th>\n<th style=\"text-align:center\">数量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Computer</td>\n<td style=\"text-align:right\">1600 元</td>\n<td style=\"text-align:center\">5</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Phone</td>\n<td style=\"text-align:right\">12 元</td>\n<td style=\"text-align:center\">12</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Pipe</td>\n<td style=\"text-align:right\">1 元</td>\n<td style=\"text-align:center\">234</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>试试表格，至少要有表头和一个－标识列才行哦。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>表头</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>复选框，使用空格-/*/+空格[x]空格 项目，表示选中,类似列表选项。<ul>\n<li>[x] 第一条</li>\n<li>[ ] 第二条</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>表情，使用冒号包围表情的英文代号<ul>\n<li>猴子:monkey:,星星:stars:,:v:</li>\n<li>表情支持，见<a href=\"http://emoji.codes/\">http://emoji.codes/</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"其他拓展\"><a href=\"#其他拓展\" class=\"headerlink\" title=\"其他拓展\"></a>其他拓展</h2><ul>\n<li><p>CSDN</p>\n<ol>\n<li>脚注，类似链接，使用[^id]声明，其他地方[^id]:解释。</li>\n<li>目录，[toc]标签</li>\n<li><p>UML图，类似代码块，不过反单引号后面申明的不是编程语言，而是图的类型</p>\n<ol>\n<li><p>如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">张三-&gt;李四: 嘿，小四儿, 写博客了没?</div><div class=\"line\">Note right of 李四: 李四愣了一下，说：</div><div class=\"line\">李四--&gt;张三: 忙得吐血，哪有时间写。</div></pre></td></tr></table></figure>\n<ol>\n<li>流程图<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">st=&gt;start: 开始</div><div class=\"line\">e=&gt;end: 结束</div><div class=\"line\">op=&gt;operation: 我的操作</div><div class=\"line\">cond=&gt;condition: 确认？</div><div class=\"line\">st-&gt;op-&gt;cond</div><div class=\"line\">cond(yes)-&gt;e</div><div class=\"line\">cond(no)-&gt;op</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><p>列表的定义与基本语法不同，使用:  项目来缩进列表项。</p>\n</li>\n<li>数学公式，如下<br>使用MathJax渲染<em>LaTex</em> 数学公式，详见[math.stackexchange.com].</li>\n</ol>\n<ul>\n<li>行内公式，数学公式为：$\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$。</li>\n<li>块级公式：<br>  $$x = \\dfrac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>Gitlab</p>\n<pre><code>1、网址直译，www.baidu.com\n\n2、文件对比，不同,使用花括号和中括号的配合\n，不能同时使用同一个哦。{+ ADD +] and [-delete-}\n3、gitlab引用，@user_name,#123,等等。\n</code></pre></li>\n</ul>\n<hr>\n<p>####CmdMarkdown <a href=\"jiaozhu\">^cmd</a></p>\n<ul>\n<li><p>高效绘制 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#7-流程图\">流程图</a>，标识为flow</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">st=&gt;start: Start</div><div class=\"line\">op=&gt;operation: Your Operation</div><div class=\"line\">cond=&gt;condition: Yes or No?</div><div class=\"line\">e=&gt;end</div><div class=\"line\"></div><div class=\"line\">st-&gt;op-&gt;cond</div><div class=\"line\">cond(yes)-&gt;e</div><div class=\"line\">cond(no)-&gt;op</div></pre></td></tr></table></figure>\n</li>\n<li><p>高效绘制 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#8-序列图\">序列图</a>，其标识为sequence</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Alice-&gt;Bob: Hello Bob, how are you?</div><div class=\"line\">Note right of Bob: Bob thinks</div><div class=\"line\">Bob--&gt;Alice: I am good thanks!</div></pre></td></tr></table></figure>\n<hr>\n<ul>\n<li>高效绘制 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#9-甘特图\">甘特图</a>标识为gantt</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">title 项目开发流程</div><div class=\"line\">section 项目确定</div><div class=\"line\">    需求分析       :a1, 2016-06-22, 3d</div><div class=\"line\">    可行性报告     :after a1, 5d</div><div class=\"line\">    概念验证       : 5d</div><div class=\"line\">section 项目实施</div><div class=\"line\">    概要设计      :2016-07-05  , 5d</div><div class=\"line\">    详细设计      :2016-07-08, 10d</div><div class=\"line\">    编码          :2016-07-15, 10d</div><div class=\"line\">    测试          :2016-07-22, 5d</div><div class=\"line\">section 发布验收</div><div class=\"line\">    发布: 2d</div><div class=\"line\">    验收: 3d</div></pre></td></tr></table></figure>\n<p>注：markdown可以直接使用许多html的标签，用于更为丰富的界面显示哦。<br>本人记录Markdown 语法用于个人学习，难免有疏漏，请读者见谅指点<br>本文参考<a href=\"http://www.appinn.com/markdown/\"><em>Markdown</em>语法</a>,在此感谢。</p>\n</text></image>"},{"title":"Linux桌面版安装及开发环境配置","date":"2016-10-24T02:45:25.000Z","_content":"\n# Linux桌面版安装及开发环境配置\n\n## 1、安装Linux For Desktop\n\n本文所面向对象无非也是和本人一样的技术小白，和[windows](http://blog.csdn.net/binglumeng/article/details/50195649)系统以及mac不同，对于linux系统的选择却也是众说纷纭，各有喜好。目前本小白所认知范围内，服务器server多是RedHat、centos和ubuntu server。桌面版那可太多了，只列举个人所喜好和试用过的linux发行版：\n\n> Linux Mint、Ubuntu、Deepin、Fedora、Centos。估计大多数朋友和我一样都会有一个选择纠结症，不过目前来说，还是比较喜欢Linux Mint。\n\n闲言少叙，既然做开发玩Linux的朋友，想必都有点基础，下面就不过于具体描述操作。\n\n1. 首先选择个人喜好的linux发行版，在官网下载最新稳定版image镜像。\n2. 在windows下用软碟通[步骤请自行百度]，或者linux live creater、来制作安装盘。*切记安装盘会被全部格式化的哦！*<推荐使用LinuxLiveCreater>\n3. 完成安装盘的制作后，重启电脑选择启动菜单，进入U盘安装模式。\n4. 多数Linux提供了live模式，然后就是Next-->Next...安装系统了。一般我们小白级别的安装选择的Linux都比较方便的，基本都是开箱即用。若是高级玩家，使用如archLinux之类的，另当别论。\n\n## 2、系统配置\n\n以下配置说明，仅是依据个人喜好和个人所认知范围内的最佳搭档和选择，仅供参考。\n\n- 系统设置\n\n  > 1. 安装系统时候，选择中文语言环境，有的系统却并不能同时安装中文输入法，需要手动安装。在系统---设置---语言，中选择安装语言和输入配置。将ibus或者fitx程序及扩展插件选择安装，即可完成中文输入法的配置。(命令配置方式，暂不介绍)\n  > 2. 常用办公软件的安装，一般LinuxMint或者Ubuntu桌面版都会附带一些办公软件，但是个人还是选择一些喜好的[工具](http://blog.csdn.net/binglumeng/article/details/51590549)。office软件有LibreOffice、WPS，浏览器Chrome、firefox、opera、tor。便于文件传输与即时通讯，安装iptux或者飞鸽传书。流程图有libreDraw，Dia，UML有umbrello。思维导图就用Xmind咯。项目管理Planner。\n  > 3. 辅助类工具软件，ruler屏幕尺子、有道词典、网易云音乐、color-picker、有印象笔记，截图shutter，录屏RecordMyDesktop，安装chmsee看chm文档还是很好的工具。AnyDesk远程工具。redshift根据地理位置和时间调整屏幕色温的软件，挺好的。flux也一样。然后安装indicator-lockkeys（还有其他的）用于键盘状态的指示。`MarkDown`笔记编辑器有typora、cmdMarkdown、haroopad、atom和vs code也很好的支持。chrome应用形式的马克飞象、StackEdit。\n  > 4. 虚拟机的安装很有必要，linux下有时候不得不想用一下windows的软件，虽然有wine，但是感觉还是用个小虚拟机系统好些，比如有时候linux的下载速度就是不如windows，也很无奈哦。VM player、VM box各有优劣，前者支持广泛，后者运行轻便，根据本机配置和虚拟系统来选择。\n\n- 开发环境配置\n\n  > 本人入行IT开始是从Android开发入门的，所以配置环境以此为主来介绍。\n  >\n  > - 文本编辑，程序员纠结不清的选择就是编辑器和系统，呵呵，咱也不扯了，依据自己喜好来吧。geany、sublime text、atom、visual studio code。二进制查看wxHexEditor。\n  >\n  > - 各种sdk的配置，JDK(android或java开发还是不推荐openJDK)，AndroidSDK。用tomcat搭建简单的web服务器用于测试。Coding的各种IDE选择使用Eclipse，AndroidStuido（类似intellij）。\n  >\n  > - 版本控制常用还是git和svn，IDE都可集成版本控制操作。有时候还是需要额外的工具，如BeyondCompare用于文件比较。还有数据库sqlite man。\n  >\n  > - AndroidStudio插件也是很重要，这个个人装的比较多哦：\n  >\n  >   ADB Idea、ADB WIFI、ButterKnife、DPI、Drwaable Importer、Holo Colors、Material Design、Methods Count、History Mining、CodeGlance、Codota、Key Promoter、Parcelable、Postfix、Dash、Power Mode、Robotium Recorder、Shortcut Translator、SonarLint、SonarQube、xStructure。\n\n*附言* ：技术小白，记录笔记仅供参考，初稿难免潦草，有好的工具推荐或者其他建议，烦请留言，知识共享，共同学习。","source":"_posts/Linux桌面版安装及开发环境配置.md","raw":"---\ntitle: Linux桌面版安装及开发环境配置\ndate: 2016-10-24 10:45:25\ntags:\n    - Linux\n    - 开发环境\ncategories:\n    - Linux\n---\n\n# Linux桌面版安装及开发环境配置\n\n## 1、安装Linux For Desktop\n\n本文所面向对象无非也是和本人一样的技术小白，和[windows](http://blog.csdn.net/binglumeng/article/details/50195649)系统以及mac不同，对于linux系统的选择却也是众说纷纭，各有喜好。目前本小白所认知范围内，服务器server多是RedHat、centos和ubuntu server。桌面版那可太多了，只列举个人所喜好和试用过的linux发行版：\n\n> Linux Mint、Ubuntu、Deepin、Fedora、Centos。估计大多数朋友和我一样都会有一个选择纠结症，不过目前来说，还是比较喜欢Linux Mint。\n\n闲言少叙，既然做开发玩Linux的朋友，想必都有点基础，下面就不过于具体描述操作。\n\n1. 首先选择个人喜好的linux发行版，在官网下载最新稳定版image镜像。\n2. 在windows下用软碟通[步骤请自行百度]，或者linux live creater、来制作安装盘。*切记安装盘会被全部格式化的哦！*<推荐使用LinuxLiveCreater>\n3. 完成安装盘的制作后，重启电脑选择启动菜单，进入U盘安装模式。\n4. 多数Linux提供了live模式，然后就是Next-->Next...安装系统了。一般我们小白级别的安装选择的Linux都比较方便的，基本都是开箱即用。若是高级玩家，使用如archLinux之类的，另当别论。\n\n## 2、系统配置\n\n以下配置说明，仅是依据个人喜好和个人所认知范围内的最佳搭档和选择，仅供参考。\n\n- 系统设置\n\n  > 1. 安装系统时候，选择中文语言环境，有的系统却并不能同时安装中文输入法，需要手动安装。在系统---设置---语言，中选择安装语言和输入配置。将ibus或者fitx程序及扩展插件选择安装，即可完成中文输入法的配置。(命令配置方式，暂不介绍)\n  > 2. 常用办公软件的安装，一般LinuxMint或者Ubuntu桌面版都会附带一些办公软件，但是个人还是选择一些喜好的[工具](http://blog.csdn.net/binglumeng/article/details/51590549)。office软件有LibreOffice、WPS，浏览器Chrome、firefox、opera、tor。便于文件传输与即时通讯，安装iptux或者飞鸽传书。流程图有libreDraw，Dia，UML有umbrello。思维导图就用Xmind咯。项目管理Planner。\n  > 3. 辅助类工具软件，ruler屏幕尺子、有道词典、网易云音乐、color-picker、有印象笔记，截图shutter，录屏RecordMyDesktop，安装chmsee看chm文档还是很好的工具。AnyDesk远程工具。redshift根据地理位置和时间调整屏幕色温的软件，挺好的。flux也一样。然后安装indicator-lockkeys（还有其他的）用于键盘状态的指示。`MarkDown`笔记编辑器有typora、cmdMarkdown、haroopad、atom和vs code也很好的支持。chrome应用形式的马克飞象、StackEdit。\n  > 4. 虚拟机的安装很有必要，linux下有时候不得不想用一下windows的软件，虽然有wine，但是感觉还是用个小虚拟机系统好些，比如有时候linux的下载速度就是不如windows，也很无奈哦。VM player、VM box各有优劣，前者支持广泛，后者运行轻便，根据本机配置和虚拟系统来选择。\n\n- 开发环境配置\n\n  > 本人入行IT开始是从Android开发入门的，所以配置环境以此为主来介绍。\n  >\n  > - 文本编辑，程序员纠结不清的选择就是编辑器和系统，呵呵，咱也不扯了，依据自己喜好来吧。geany、sublime text、atom、visual studio code。二进制查看wxHexEditor。\n  >\n  > - 各种sdk的配置，JDK(android或java开发还是不推荐openJDK)，AndroidSDK。用tomcat搭建简单的web服务器用于测试。Coding的各种IDE选择使用Eclipse，AndroidStuido（类似intellij）。\n  >\n  > - 版本控制常用还是git和svn，IDE都可集成版本控制操作。有时候还是需要额外的工具，如BeyondCompare用于文件比较。还有数据库sqlite man。\n  >\n  > - AndroidStudio插件也是很重要，这个个人装的比较多哦：\n  >\n  >   ADB Idea、ADB WIFI、ButterKnife、DPI、Drwaable Importer、Holo Colors、Material Design、Methods Count、History Mining、CodeGlance、Codota、Key Promoter、Parcelable、Postfix、Dash、Power Mode、Robotium Recorder、Shortcut Translator、SonarLint、SonarQube、xStructure。\n\n*附言* ：技术小白，记录笔记仅供参考，初稿难免潦草，有好的工具推荐或者其他建议，烦请留言，知识共享，共同学习。","slug":"Linux桌面版安装及开发环境配置","published":1,"updated":"2017-03-31T08:06:04.130Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ndxcde001z88owree16e6c","content":"<h1 id=\"Linux桌面版安装及开发环境配置\"><a href=\"#Linux桌面版安装及开发环境配置\" class=\"headerlink\" title=\"Linux桌面版安装及开发环境配置\"></a>Linux桌面版安装及开发环境配置</h1><h2 id=\"1、安装Linux-For-Desktop\"><a href=\"#1、安装Linux-For-Desktop\" class=\"headerlink\" title=\"1、安装Linux For Desktop\"></a>1、安装Linux For Desktop</h2><p>本文所面向对象无非也是和本人一样的技术小白，和<a href=\"http://blog.csdn.net/binglumeng/article/details/50195649\" target=\"_blank\" rel=\"external\">windows</a>系统以及mac不同，对于linux系统的选择却也是众说纷纭，各有喜好。目前本小白所认知范围内，服务器server多是RedHat、centos和ubuntu server。桌面版那可太多了，只列举个人所喜好和试用过的linux发行版：</p>\n<blockquote>\n<p>Linux Mint、Ubuntu、Deepin、Fedora、Centos。估计大多数朋友和我一样都会有一个选择纠结症，不过目前来说，还是比较喜欢Linux Mint。</p>\n</blockquote>\n<p>闲言少叙，既然做开发玩Linux的朋友，想必都有点基础，下面就不过于具体描述操作。</p>\n<ol>\n<li>首先选择个人喜好的linux发行版，在官网下载最新稳定版image镜像。</li>\n<li>在windows下用软碟通[步骤请自行百度]，或者linux live creater、来制作安装盘。<em>切记安装盘会被全部格式化的哦！</em>&lt;推荐使用LinuxLiveCreater&gt;</li>\n<li>完成安装盘的制作后，重启电脑选择启动菜单，进入U盘安装模式。</li>\n<li>多数Linux提供了live模式，然后就是Next–&gt;Next…安装系统了。一般我们小白级别的安装选择的Linux都比较方便的，基本都是开箱即用。若是高级玩家，使用如archLinux之类的，另当别论。</li>\n</ol>\n<h2 id=\"2、系统配置\"><a href=\"#2、系统配置\" class=\"headerlink\" title=\"2、系统配置\"></a>2、系统配置</h2><p>以下配置说明，仅是依据个人喜好和个人所认知范围内的最佳搭档和选择，仅供参考。</p>\n<ul>\n<li><p>系统设置</p>\n<blockquote>\n<ol>\n<li>安装系统时候，选择中文语言环境，有的系统却并不能同时安装中文输入法，需要手动安装。在系统—设置—语言，中选择安装语言和输入配置。将ibus或者fitx程序及扩展插件选择安装，即可完成中文输入法的配置。(命令配置方式，暂不介绍)</li>\n<li>常用办公软件的安装，一般LinuxMint或者Ubuntu桌面版都会附带一些办公软件，但是个人还是选择一些喜好的<a href=\"http://blog.csdn.net/binglumeng/article/details/51590549\" target=\"_blank\" rel=\"external\">工具</a>。office软件有LibreOffice、WPS，浏览器Chrome、firefox、opera、tor。便于文件传输与即时通讯，安装iptux或者飞鸽传书。流程图有libreDraw，Dia，UML有umbrello。思维导图就用Xmind咯。项目管理Planner。</li>\n<li>辅助类工具软件，ruler屏幕尺子、有道词典、网易云音乐、color-picker、有印象笔记，截图shutter，录屏RecordMyDesktop，安装chmsee看chm文档还是很好的工具。AnyDesk远程工具。redshift根据地理位置和时间调整屏幕色温的软件，挺好的。flux也一样。然后安装indicator-lockkeys（还有其他的）用于键盘状态的指示。<code>MarkDown</code>笔记编辑器有typora、cmdMarkdown、haroopad、atom和vs code也很好的支持。chrome应用形式的马克飞象、StackEdit。</li>\n<li>虚拟机的安装很有必要，linux下有时候不得不想用一下windows的软件，虽然有wine，但是感觉还是用个小虚拟机系统好些，比如有时候linux的下载速度就是不如windows，也很无奈哦。VM player、VM box各有优劣，前者支持广泛，后者运行轻便，根据本机配置和虚拟系统来选择。</li>\n</ol>\n</blockquote>\n</li>\n<li><p>开发环境配置</p>\n<blockquote>\n<p>本人入行IT开始是从Android开发入门的，所以配置环境以此为主来介绍。</p>\n<ul>\n<li><p>文本编辑，程序员纠结不清的选择就是编辑器和系统，呵呵，咱也不扯了，依据自己喜好来吧。geany、sublime text、atom、visual studio code。二进制查看wxHexEditor。</p>\n</li>\n<li><p>各种sdk的配置，JDK(android或java开发还是不推荐openJDK)，AndroidSDK。用tomcat搭建简单的web服务器用于测试。Coding的各种IDE选择使用Eclipse，AndroidStuido（类似intellij）。</p>\n</li>\n<li><p>版本控制常用还是git和svn，IDE都可集成版本控制操作。有时候还是需要额外的工具，如BeyondCompare用于文件比较。还有数据库sqlite man。</p>\n</li>\n<li><p>AndroidStudio插件也是很重要，这个个人装的比较多哦：</p>\n<p>ADB Idea、ADB WIFI、ButterKnife、DPI、Drwaable Importer、Holo Colors、Material Design、Methods Count、History Mining、CodeGlance、Codota、Key Promoter、Parcelable、Postfix、Dash、Power Mode、Robotium Recorder、Shortcut Translator、SonarLint、SonarQube、xStructure。</p>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<p><em>附言</em> ：技术小白，记录笔记仅供参考，初稿难免潦草，有好的工具推荐或者其他建议，烦请留言，知识共享，共同学习。</p>\n","excerpt":"","more":"<h1 id=\"Linux桌面版安装及开发环境配置\"><a href=\"#Linux桌面版安装及开发环境配置\" class=\"headerlink\" title=\"Linux桌面版安装及开发环境配置\"></a>Linux桌面版安装及开发环境配置</h1><h2 id=\"1、安装Linux-For-Desktop\"><a href=\"#1、安装Linux-For-Desktop\" class=\"headerlink\" title=\"1、安装Linux For Desktop\"></a>1、安装Linux For Desktop</h2><p>本文所面向对象无非也是和本人一样的技术小白，和<a href=\"http://blog.csdn.net/binglumeng/article/details/50195649\">windows</a>系统以及mac不同，对于linux系统的选择却也是众说纷纭，各有喜好。目前本小白所认知范围内，服务器server多是RedHat、centos和ubuntu server。桌面版那可太多了，只列举个人所喜好和试用过的linux发行版：</p>\n<blockquote>\n<p>Linux Mint、Ubuntu、Deepin、Fedora、Centos。估计大多数朋友和我一样都会有一个选择纠结症，不过目前来说，还是比较喜欢Linux Mint。</p>\n</blockquote>\n<p>闲言少叙，既然做开发玩Linux的朋友，想必都有点基础，下面就不过于具体描述操作。</p>\n<ol>\n<li>首先选择个人喜好的linux发行版，在官网下载最新稳定版image镜像。</li>\n<li>在windows下用软碟通[步骤请自行百度]，或者linux live creater、来制作安装盘。<em>切记安装盘会被全部格式化的哦！</em>&lt;推荐使用LinuxLiveCreater&gt;</li>\n<li>完成安装盘的制作后，重启电脑选择启动菜单，进入U盘安装模式。</li>\n<li>多数Linux提供了live模式，然后就是Next–&gt;Next…安装系统了。一般我们小白级别的安装选择的Linux都比较方便的，基本都是开箱即用。若是高级玩家，使用如archLinux之类的，另当别论。</li>\n</ol>\n<h2 id=\"2、系统配置\"><a href=\"#2、系统配置\" class=\"headerlink\" title=\"2、系统配置\"></a>2、系统配置</h2><p>以下配置说明，仅是依据个人喜好和个人所认知范围内的最佳搭档和选择，仅供参考。</p>\n<ul>\n<li><p>系统设置</p>\n<blockquote>\n<ol>\n<li>安装系统时候，选择中文语言环境，有的系统却并不能同时安装中文输入法，需要手动安装。在系统—设置—语言，中选择安装语言和输入配置。将ibus或者fitx程序及扩展插件选择安装，即可完成中文输入法的配置。(命令配置方式，暂不介绍)</li>\n<li>常用办公软件的安装，一般LinuxMint或者Ubuntu桌面版都会附带一些办公软件，但是个人还是选择一些喜好的<a href=\"http://blog.csdn.net/binglumeng/article/details/51590549\">工具</a>。office软件有LibreOffice、WPS，浏览器Chrome、firefox、opera、tor。便于文件传输与即时通讯，安装iptux或者飞鸽传书。流程图有libreDraw，Dia，UML有umbrello。思维导图就用Xmind咯。项目管理Planner。</li>\n<li>辅助类工具软件，ruler屏幕尺子、有道词典、网易云音乐、color-picker、有印象笔记，截图shutter，录屏RecordMyDesktop，安装chmsee看chm文档还是很好的工具。AnyDesk远程工具。redshift根据地理位置和时间调整屏幕色温的软件，挺好的。flux也一样。然后安装indicator-lockkeys（还有其他的）用于键盘状态的指示。<code>MarkDown</code>笔记编辑器有typora、cmdMarkdown、haroopad、atom和vs code也很好的支持。chrome应用形式的马克飞象、StackEdit。</li>\n<li>虚拟机的安装很有必要，linux下有时候不得不想用一下windows的软件，虽然有wine，但是感觉还是用个小虚拟机系统好些，比如有时候linux的下载速度就是不如windows，也很无奈哦。VM player、VM box各有优劣，前者支持广泛，后者运行轻便，根据本机配置和虚拟系统来选择。</li>\n</ol>\n</blockquote>\n</li>\n<li><p>开发环境配置</p>\n<blockquote>\n<p>本人入行IT开始是从Android开发入门的，所以配置环境以此为主来介绍。</p>\n<ul>\n<li><p>文本编辑，程序员纠结不清的选择就是编辑器和系统，呵呵，咱也不扯了，依据自己喜好来吧。geany、sublime text、atom、visual studio code。二进制查看wxHexEditor。</p>\n</li>\n<li><p>各种sdk的配置，JDK(android或java开发还是不推荐openJDK)，AndroidSDK。用tomcat搭建简单的web服务器用于测试。Coding的各种IDE选择使用Eclipse，AndroidStuido（类似intellij）。</p>\n</li>\n<li><p>版本控制常用还是git和svn，IDE都可集成版本控制操作。有时候还是需要额外的工具，如BeyondCompare用于文件比较。还有数据库sqlite man。</p>\n</li>\n<li><p>AndroidStudio插件也是很重要，这个个人装的比较多哦：</p>\n<p>ADB Idea、ADB WIFI、ButterKnife、DPI、Drwaable Importer、Holo Colors、Material Design、Methods Count、History Mining、CodeGlance、Codota、Key Promoter、Parcelable、Postfix、Dash、Power Mode、Robotium Recorder、Shortcut Translator、SonarLint、SonarQube、xStructure。</p>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<p><em>附言</em> ：技术小白，记录笔记仅供参考，初稿难免潦草，有好的工具推荐或者其他建议，烦请留言，知识共享，共同学习。</p>\n"},{"title":"UbuntuServer/CentOS安装require CD-ROM问题","date":"2017-01-09T03:08:00.000Z","_content":"\n闲话少叙，直入正题。话说最近在公司帮助安装过CentOS服务器系统，自己也搭建Android编译环境--Ubuntu Server系统。想如今安装系统基本都是U盘安装或者硬盘本地安装，几乎很少用光盘安装模式。简要步骤如下：\n\n##1、制作启动盘\n使用Linux Live Creater 制作linux系统启动盘，该工具还是比较不错的，多次用于制作desktop版本的linux系统盘。\n\n另一个更为常用的便是UltraISO软碟通，该工具制作windows，linux系统盘都可以。\n##2、安装\n\n-  安装CentOS系统时候，使用LinuxLiveCreater制作启动盘，<font color=\"FF0000\"> **电脑是Dell Vostro商用台式机**</font> 该型号电脑多有奇怪，网上关于在该型电脑上引发的一些系统安装与环境配置问题也不少。使用UltraISO制作的启动盘，无法正确进入安装步骤。用linuxlivecreater制作的启动盘，在安装过程中，会出现找不到安装盘，require CD-ROM，也就是说它不认U盘中的安装文件。\n\n-  解决方法，就是在U盘中放置一个CentOS的系统镜像，然后在如上安装步骤中，选择手动指定安装盘位置，选择U盘中的iso镜像，如此即可正常完成安装。\n\nUbuntu Server的安装\n\n- 同样是Dell Vostro电脑，这次是使用LinuxLiveCreater制作的U盘无法在安装过程中找到安装文件，而这里不能放置iso镜像文件，因为在安装选项中，没有让你选择指定路径的选项。报错 require CD-ROM。\n  解决方式，是使用UltraISO来制作启动盘，安装相对就比较顺利了。\n\n虽说问题不算多么高的技术含量，但是也许能帮助到一些需要的网友，在此记录之。","source":"_posts/Linux出现require CD-ROM问题.md","raw":"---\ntitle: UbuntuServer/CentOS安装require CD-ROM问题\ndate: 2017-01-09 11:08\ntags: \n    - Linux\n    - CD-ROM\ncategories:\n    - Linux\n---\n\n闲话少叙，直入正题。话说最近在公司帮助安装过CentOS服务器系统，自己也搭建Android编译环境--Ubuntu Server系统。想如今安装系统基本都是U盘安装或者硬盘本地安装，几乎很少用光盘安装模式。简要步骤如下：\n\n##1、制作启动盘\n使用Linux Live Creater 制作linux系统启动盘，该工具还是比较不错的，多次用于制作desktop版本的linux系统盘。\n\n另一个更为常用的便是UltraISO软碟通，该工具制作windows，linux系统盘都可以。\n##2、安装\n\n-  安装CentOS系统时候，使用LinuxLiveCreater制作启动盘，<font color=\"FF0000\"> **电脑是Dell Vostro商用台式机**</font> 该型号电脑多有奇怪，网上关于在该型电脑上引发的一些系统安装与环境配置问题也不少。使用UltraISO制作的启动盘，无法正确进入安装步骤。用linuxlivecreater制作的启动盘，在安装过程中，会出现找不到安装盘，require CD-ROM，也就是说它不认U盘中的安装文件。\n\n-  解决方法，就是在U盘中放置一个CentOS的系统镜像，然后在如上安装步骤中，选择手动指定安装盘位置，选择U盘中的iso镜像，如此即可正常完成安装。\n\nUbuntu Server的安装\n\n- 同样是Dell Vostro电脑，这次是使用LinuxLiveCreater制作的U盘无法在安装过程中找到安装文件，而这里不能放置iso镜像文件，因为在安装选项中，没有让你选择指定路径的选项。报错 require CD-ROM。\n  解决方式，是使用UltraISO来制作启动盘，安装相对就比较顺利了。\n\n虽说问题不算多么高的技术含量，但是也许能帮助到一些需要的网友，在此记录之。","slug":"Linux出现require CD-ROM问题","published":1,"updated":"2017-03-31T08:44:49.798Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ndxcdh002288owtop7skud","content":"<p>闲话少叙，直入正题。话说最近在公司帮助安装过CentOS服务器系统，自己也搭建Android编译环境–Ubuntu Server系统。想如今安装系统基本都是U盘安装或者硬盘本地安装，几乎很少用光盘安装模式。简要步骤如下：</p>\n<p>##1、制作启动盘<br>使用Linux Live Creater 制作linux系统启动盘，该工具还是比较不错的，多次用于制作desktop版本的linux系统盘。</p>\n<p>另一个更为常用的便是UltraISO软碟通，该工具制作windows，linux系统盘都可以。</p>\n<p>##2、安装</p>\n<ul>\n<li><p>安装CentOS系统时候，使用LinuxLiveCreater制作启动盘，<font color=\"FF0000\"> <strong>电脑是Dell Vostro商用台式机</strong></font> 该型号电脑多有奇怪，网上关于在该型电脑上引发的一些系统安装与环境配置问题也不少。使用UltraISO制作的启动盘，无法正确进入安装步骤。用linuxlivecreater制作的启动盘，在安装过程中，会出现找不到安装盘，require CD-ROM，也就是说它不认U盘中的安装文件。</p>\n</li>\n<li><p>解决方法，就是在U盘中放置一个CentOS的系统镜像，然后在如上安装步骤中，选择手动指定安装盘位置，选择U盘中的iso镜像，如此即可正常完成安装。</p>\n</li>\n</ul>\n<p>Ubuntu Server的安装</p>\n<ul>\n<li>同样是Dell Vostro电脑，这次是使用LinuxLiveCreater制作的U盘无法在安装过程中找到安装文件，而这里不能放置iso镜像文件，因为在安装选项中，没有让你选择指定路径的选项。报错 require CD-ROM。<br>解决方式，是使用UltraISO来制作启动盘，安装相对就比较顺利了。</li>\n</ul>\n<p>虽说问题不算多么高的技术含量，但是也许能帮助到一些需要的网友，在此记录之。</p>\n","excerpt":"","more":"<p>闲话少叙，直入正题。话说最近在公司帮助安装过CentOS服务器系统，自己也搭建Android编译环境–Ubuntu Server系统。想如今安装系统基本都是U盘安装或者硬盘本地安装，几乎很少用光盘安装模式。简要步骤如下：</p>\n<p>##1、制作启动盘<br>使用Linux Live Creater 制作linux系统启动盘，该工具还是比较不错的，多次用于制作desktop版本的linux系统盘。</p>\n<p>另一个更为常用的便是UltraISO软碟通，该工具制作windows，linux系统盘都可以。</p>\n<p>##2、安装</p>\n<ul>\n<li><p>安装CentOS系统时候，使用LinuxLiveCreater制作启动盘，<font color=\"FF0000\"> <strong>电脑是Dell Vostro商用台式机</strong></font> 该型号电脑多有奇怪，网上关于在该型电脑上引发的一些系统安装与环境配置问题也不少。使用UltraISO制作的启动盘，无法正确进入安装步骤。用linuxlivecreater制作的启动盘，在安装过程中，会出现找不到安装盘，require CD-ROM，也就是说它不认U盘中的安装文件。</p>\n</li>\n<li><p>解决方法，就是在U盘中放置一个CentOS的系统镜像，然后在如上安装步骤中，选择手动指定安装盘位置，选择U盘中的iso镜像，如此即可正常完成安装。</p>\n</li>\n</ul>\n<p>Ubuntu Server的安装</p>\n<ul>\n<li>同样是Dell Vostro电脑，这次是使用LinuxLiveCreater制作的U盘无法在安装过程中找到安装文件，而这里不能放置iso镜像文件，因为在安装选项中，没有让你选择指定路径的选项。报错 require CD-ROM。<br>解决方式，是使用UltraISO来制作启动盘，安装相对就比较顺利了。</li>\n</ul>\n<p>虽说问题不算多么高的技术含量，但是也许能帮助到一些需要的网友，在此记录之。</p>\n"},{"title":"xUtils开源框架简要使用说明","date":"2017-01-11T05:08:00.000Z","_content":"\n# RK3288平台Android系统源码编译爬坑笔记\n\n博主自认为永远都是IT界的技术小白，最近开始接触Android系统源码的编译，由于工作需要，使用的是国产**瑞芯微rk3288芯片**平台的核心板，选择的服务商是阿里巴巴上相对知名的**葡萄雨科技**，虽然他们提供了系统源码和简单的操作步骤，但是实际过程中，任然很多问题，在此简要笔记之，亦希望有助于其他网友。\n\n## 1、平台环境\n\n使用Linux操作系统，搭建服务器环境以及编译系统，不同的硬件平台、软件环境，可能引发的问题也不相同，在此有必要简要列举一下本次工作的软硬件环境：\n\n- Dell Vostro 商用台式机，i7、8G\n- Ubuntu-16.04.1-server-amd64\n\n\n> Note:改型电脑安装系统时，会出现一些问题，反正对戴尔没啥好感，呵呵。Linux系统的安装步骤，在此也就不详细赘述，无非就是：1、使用**Ultra ISO软碟通、LinuxLiveCreater**等工具制作启动U盘；2、电脑USB启动U盘，进入安装，按步骤走就是了。\n>\n> [Linux系统安装](http://blog.csdn.net/binglumeng/article/details/52909645)、[Windows系统安装](http://blog.csdn.net/binglumeng/article/details/50195649)、[PE系统制作](http://blog.csdn.net/binglumeng/article/details/50195991)、有时出现CD-ROM的问题，请移步http://blog.csdn.net/binglumeng/article/details/54287010；\n\n## 2、依赖安装\n\nGoogle官方推荐使用Ubuntu LST版本的系统作为Android系统源码开发环境，虽说其他Linux发行版也可以，但是毕竟可能会出现这样那样的问题，普通开发者没必要去自找太多坑。\n\nAndroid官网的教程[Android源码编译](https://source.android.com/source/initializing.html)教程还是Ubuntu14.04，此处本人使用的是Ubuntu Server16.04，稍有不同，还是建议网友使用和官方一致的版本比较好。环境配置搭建参照了官方的教程，也有网上的[梧桐那时雨](http://blog.csdn.net/fuchaosz/article/details/51487585)的一篇博客，以及[StackOverFlow](http://stackoverflow.com/questions/36048358/building-android-from-sources-unsupported-reloc-43)上的解答。一同表示感谢。\n\n不论是RK平台、MTK平台、高通或者其他平台的Android系统编译，其实都是Google官方Android的一个定制修改，需求环境也大体相同。\n\n- 源码下载\n\n  本文简述的是RK3288芯片平台的Android系统编译，源码也基本都是服务商提供，博主使用的是**葡萄雨科技**的系统源码，而关于Android官方的系统编译，可以参照如上[源码链接](https://source.android.com/source/initializing.html)的教程。\n\n  > 使用Google源码的话，需要Out door，作为技术员这应该是基本技能哦。\n\n- 安装JDK\n\n  根据Google官方要求，5.x--6.x使用的是openjdk7、不支持Oracle的JDK，否则会提示错误，如有兴趣，你也可以去跳坑:monkey:\n\n  ```shell\n  sudo add-apt-repository ppa:openjdk-r/ppa\n  sudo apt-get update\n  sudo apt-get install openjdk-7-jdk\n  ```\n\n  可能你会安装多个jdk版本，是有时候，最好根据要求，使用对应版本\n  ```sh\n  sudo update-alternatives --config java\n  sudo update-alternatives --config javac\n  ```\n\n  然后添加到系统环境变量中\n\n  ```shell\n  sudo vim /etc/profile\n  ```\n\n  在文件末尾追加\n\n  ```shell\n  # Edit by binglumeng Add jdk environment\n  export JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64  ## 注释，此处为openjdk的安装路径，请根据自己电脑的时间安装路径来修改\n  export JRE_HOME=$JAVA_HOME/jre\n  export CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib:$JAVA_HOME/lib/tools.jar\n  export PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin\n  ```\n\n  然后保存运行\n\n  ```shell\n  source /etc/profile\n  # 运行java命令，确认环境变量配置是否成功\n  java\n  javac\n  java -version\n  ```\n\n  **注意：建议使用root用户操作Ubuntu，虽然普通用户可以使用sudo，但是有时候可能还会出现权限的问题**\n\n\n- 安装依赖指令与库\n\n  ```sh\n  sudo apt install repo bc vim gcc g++ ssh git python m4 lzop\n  sudo apt install zip unzip git-core gnupg flex bison gperf build-essential curl zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z-dev ccache libgl1-mesa-dev libxml2-utils xsltproc\n  ```\n\n  修改配置\n\n  ```sh\n  echo export  CCACHE_DIR=~/.ccache >>~/.bashrc\n  echo export USE_CCACHE=1 >> ~/.bashrc\n  ## 在源码工程根目录下,提高编译器的效率，设置缓存\n  prebuilds/misc/linux-x86/ccache/ccache -M 50G\n  ```\n\n  更新和升级系统\n\n  ```sh\n  sudo apt update\n  sudo apt upgrade\n  sudo apt autoremove\n  sudo apt autoclean\n  ```\n\n- 修改文件\n\n  此处鉴于本人编译源码过程中，所遇问题以及搜索的解决方案，在此先罗列出需要修改的文件和内容\n\n  - {project}/art/build/Android.common_build.mk\n\n    在rk3288，葡萄雨提供的源码中，暂时没有修改该文件，其实可以修改一下，找到下面内容\n\n    ```sh\n    # Host.\n    ART_HOST_CLANG := false\n    ifneq ($(WITHOUT_HOST_CLANG),true)\n      # By default, host builds use clang for better warnings.\n      ART_HOST_CLANG := true\n    endif\n    ...\n    ```\n    修改第三行的`true`为`false`\n\n  - {project}/build/core/clang/HOST_x86_common.mk\n\n    找到`CLANG_CONFIG_x86_LINUX_HOST_EXTRA_ASFLAGS`在下面增加`-B$($(clang_2nd_arch_prefix)HOST_TOOLCHAIN_FOR_CLANG)/x86_64-linux/bin \\`\n\n    ```sh\n    # Shared by HOST_x86.mk and HOST_x86_64.mk.\n\n    ifeq ($(HOST_OS),darwin)\n    # nothing required here yet\n    endif\n\n    ifeq ($(HOST_OS),linux)\n    CLANG_CONFIG_x86_LINUX_HOST_EXTRA_ASFLAGS := \\\n      --gcc-toolchain=$($(clang_2nd_arch_prefix)HOST_TOOLCHAIN_FOR_CLANG) \\\n      --sysroot=$($(clang_2nd_arch_prefix)HOST_TOOLCHAIN_FOR_CLANG)/sysroot \\\n      -B$($(clang_2nd_arch_prefix)HOST_TOOLCHAIN_FOR_CLANG)/x86_64-linux/bin \\\n      -no-integrated-as\n\n    CLANG_CONFIG_x86_LINUX_HOST_EXTRA_CFLAGS := \\\n      --gcc-toolchain=$($(clang_2nd_arch_prefix)HOST_TOOLCHAIN_FOR_CLANG) \\\n      -no-integrated-as\n    ```\n\n  - {project}/prebuilts/gcc/linux-x86/host/x86_64-linux-glibc2.11-4.6/x86_64-linux/bin\n\n    ```sh\n    #就是用linux系统的ld文件替换源码中的ld文件\n    cp /usr/bin/ld.gold /prebuilts/gcc/linux-x86/host/x86_64-linux-glibc2.11-4.6/x86_64-linux/bin/ld\n    ```\n\n## 3、系统编译\n\n  Android原生AOSP系统的编译，可以参考官方教程，主要步骤：\n\n```sh\nsource build/envsetup.sh\nlunch\nmake -j8\n```\n\n其中第二步骤，会出现选项，选择对应平台的编译对象，如`arm-eng`、`arm64-eng`等，第三步的`-j8`表示开启的线程数，一般线程数=core*2也就是cpu核数的2倍，i5一般为双核四线程，算作虚拟4核，可以用`-j8`，而i7可以用`-j16`，个人理解，呵呵。\n\n```sh\n#编译错误，重新编译\nmake clean \n# 或者\nmake clobber\n\n# 编译成功的话，可以用虚拟机看看镜像如何\ncd {project}/out/targe/product/generic/\nemulator\n```\n\n- RK3288系统编译\n\n```sh\n#在源码根目录下\nsudo vim ./mk.sh\n#修改里面的JAVA_HOME路径为本机jdk路径\n./mk.sh -u ## 编译uboot\n./mk.sh -k ## 编译kernel\n./mk.sh -s ## 编译文件系统\n```\n\n## 4、错误分析\n\n- \\<Add file> failed \n\n  先前根据Android官方编译教程，设置了`OUT_DIR_COMMON_BASE`环境变量，这个会让编译出来的文件镜像，到指定的out目录下。但是在rk3288的mk文件中，并未完全使用该变量，以致于生成的`release`和`target`目录分开了，`target`到变量指定的目录下了，`release`还在工程目录下的`out`目录下，如此就不能合并打包成功。\n\n- unsupported reloc 43\n\n  这个问题一般就是因为Android C语言编译mk文件的配置问题，也是上文所说的`/build/core/clang/HOST_x86_common.mk`中的新增那句话。注意，在Android7.0以下版本，记得要保留`-no-integrated-as`这句话。\n\n  对于这个问题的解决，有好些说法，修改`/art/build/Android.common_build.mk`和`cp /usr/bin/ld.gold`等，最好都用一下。\n\n- Api deprecation\n\n  问题好似是这么个描述，意思就是系统级的java源码，有些是不公开的，会提示要么将java文件注释`@hide`要么就运行`make update-api`一般运行一下`make update-api`即可。\n\n- 其他问题\n\n  由于硬件以及系统平台的差异，可能有些文档中没有提及一些简单的工具包的安装，rk3288平台的Android系统编译中，就需要`lzop,bc,zip,unzip`等工具，本文也在上文中列举安装了，若是平台遇到`command not found `之类的错误，根据提示，安装相应的工具，再次编译尝试。\n\n**注**：本文为简要笔记，难免不全，容后再做充实，希望对其他网友有点帮助。","source":"_posts/RK3288爬坑笔记.md","raw":"---\ntitle: xUtils开源框架简要使用说明\ndate: 2017-01-11 13:08\ntags: \n    - Android\n    - xUtils\n    - RK3288\ncategories:\n    - Android\n---\n\n# RK3288平台Android系统源码编译爬坑笔记\n\n博主自认为永远都是IT界的技术小白，最近开始接触Android系统源码的编译，由于工作需要，使用的是国产**瑞芯微rk3288芯片**平台的核心板，选择的服务商是阿里巴巴上相对知名的**葡萄雨科技**，虽然他们提供了系统源码和简单的操作步骤，但是实际过程中，任然很多问题，在此简要笔记之，亦希望有助于其他网友。\n\n## 1、平台环境\n\n使用Linux操作系统，搭建服务器环境以及编译系统，不同的硬件平台、软件环境，可能引发的问题也不相同，在此有必要简要列举一下本次工作的软硬件环境：\n\n- Dell Vostro 商用台式机，i7、8G\n- Ubuntu-16.04.1-server-amd64\n\n\n> Note:改型电脑安装系统时，会出现一些问题，反正对戴尔没啥好感，呵呵。Linux系统的安装步骤，在此也就不详细赘述，无非就是：1、使用**Ultra ISO软碟通、LinuxLiveCreater**等工具制作启动U盘；2、电脑USB启动U盘，进入安装，按步骤走就是了。\n>\n> [Linux系统安装](http://blog.csdn.net/binglumeng/article/details/52909645)、[Windows系统安装](http://blog.csdn.net/binglumeng/article/details/50195649)、[PE系统制作](http://blog.csdn.net/binglumeng/article/details/50195991)、有时出现CD-ROM的问题，请移步http://blog.csdn.net/binglumeng/article/details/54287010；\n\n## 2、依赖安装\n\nGoogle官方推荐使用Ubuntu LST版本的系统作为Android系统源码开发环境，虽说其他Linux发行版也可以，但是毕竟可能会出现这样那样的问题，普通开发者没必要去自找太多坑。\n\nAndroid官网的教程[Android源码编译](https://source.android.com/source/initializing.html)教程还是Ubuntu14.04，此处本人使用的是Ubuntu Server16.04，稍有不同，还是建议网友使用和官方一致的版本比较好。环境配置搭建参照了官方的教程，也有网上的[梧桐那时雨](http://blog.csdn.net/fuchaosz/article/details/51487585)的一篇博客，以及[StackOverFlow](http://stackoverflow.com/questions/36048358/building-android-from-sources-unsupported-reloc-43)上的解答。一同表示感谢。\n\n不论是RK平台、MTK平台、高通或者其他平台的Android系统编译，其实都是Google官方Android的一个定制修改，需求环境也大体相同。\n\n- 源码下载\n\n  本文简述的是RK3288芯片平台的Android系统编译，源码也基本都是服务商提供，博主使用的是**葡萄雨科技**的系统源码，而关于Android官方的系统编译，可以参照如上[源码链接](https://source.android.com/source/initializing.html)的教程。\n\n  > 使用Google源码的话，需要Out door，作为技术员这应该是基本技能哦。\n\n- 安装JDK\n\n  根据Google官方要求，5.x--6.x使用的是openjdk7、不支持Oracle的JDK，否则会提示错误，如有兴趣，你也可以去跳坑:monkey:\n\n  ```shell\n  sudo add-apt-repository ppa:openjdk-r/ppa\n  sudo apt-get update\n  sudo apt-get install openjdk-7-jdk\n  ```\n\n  可能你会安装多个jdk版本，是有时候，最好根据要求，使用对应版本\n  ```sh\n  sudo update-alternatives --config java\n  sudo update-alternatives --config javac\n  ```\n\n  然后添加到系统环境变量中\n\n  ```shell\n  sudo vim /etc/profile\n  ```\n\n  在文件末尾追加\n\n  ```shell\n  # Edit by binglumeng Add jdk environment\n  export JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64  ## 注释，此处为openjdk的安装路径，请根据自己电脑的时间安装路径来修改\n  export JRE_HOME=$JAVA_HOME/jre\n  export CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib:$JAVA_HOME/lib/tools.jar\n  export PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin\n  ```\n\n  然后保存运行\n\n  ```shell\n  source /etc/profile\n  # 运行java命令，确认环境变量配置是否成功\n  java\n  javac\n  java -version\n  ```\n\n  **注意：建议使用root用户操作Ubuntu，虽然普通用户可以使用sudo，但是有时候可能还会出现权限的问题**\n\n\n- 安装依赖指令与库\n\n  ```sh\n  sudo apt install repo bc vim gcc g++ ssh git python m4 lzop\n  sudo apt install zip unzip git-core gnupg flex bison gperf build-essential curl zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z-dev ccache libgl1-mesa-dev libxml2-utils xsltproc\n  ```\n\n  修改配置\n\n  ```sh\n  echo export  CCACHE_DIR=~/.ccache >>~/.bashrc\n  echo export USE_CCACHE=1 >> ~/.bashrc\n  ## 在源码工程根目录下,提高编译器的效率，设置缓存\n  prebuilds/misc/linux-x86/ccache/ccache -M 50G\n  ```\n\n  更新和升级系统\n\n  ```sh\n  sudo apt update\n  sudo apt upgrade\n  sudo apt autoremove\n  sudo apt autoclean\n  ```\n\n- 修改文件\n\n  此处鉴于本人编译源码过程中，所遇问题以及搜索的解决方案，在此先罗列出需要修改的文件和内容\n\n  - {project}/art/build/Android.common_build.mk\n\n    在rk3288，葡萄雨提供的源码中，暂时没有修改该文件，其实可以修改一下，找到下面内容\n\n    ```sh\n    # Host.\n    ART_HOST_CLANG := false\n    ifneq ($(WITHOUT_HOST_CLANG),true)\n      # By default, host builds use clang for better warnings.\n      ART_HOST_CLANG := true\n    endif\n    ...\n    ```\n    修改第三行的`true`为`false`\n\n  - {project}/build/core/clang/HOST_x86_common.mk\n\n    找到`CLANG_CONFIG_x86_LINUX_HOST_EXTRA_ASFLAGS`在下面增加`-B$($(clang_2nd_arch_prefix)HOST_TOOLCHAIN_FOR_CLANG)/x86_64-linux/bin \\`\n\n    ```sh\n    # Shared by HOST_x86.mk and HOST_x86_64.mk.\n\n    ifeq ($(HOST_OS),darwin)\n    # nothing required here yet\n    endif\n\n    ifeq ($(HOST_OS),linux)\n    CLANG_CONFIG_x86_LINUX_HOST_EXTRA_ASFLAGS := \\\n      --gcc-toolchain=$($(clang_2nd_arch_prefix)HOST_TOOLCHAIN_FOR_CLANG) \\\n      --sysroot=$($(clang_2nd_arch_prefix)HOST_TOOLCHAIN_FOR_CLANG)/sysroot \\\n      -B$($(clang_2nd_arch_prefix)HOST_TOOLCHAIN_FOR_CLANG)/x86_64-linux/bin \\\n      -no-integrated-as\n\n    CLANG_CONFIG_x86_LINUX_HOST_EXTRA_CFLAGS := \\\n      --gcc-toolchain=$($(clang_2nd_arch_prefix)HOST_TOOLCHAIN_FOR_CLANG) \\\n      -no-integrated-as\n    ```\n\n  - {project}/prebuilts/gcc/linux-x86/host/x86_64-linux-glibc2.11-4.6/x86_64-linux/bin\n\n    ```sh\n    #就是用linux系统的ld文件替换源码中的ld文件\n    cp /usr/bin/ld.gold /prebuilts/gcc/linux-x86/host/x86_64-linux-glibc2.11-4.6/x86_64-linux/bin/ld\n    ```\n\n## 3、系统编译\n\n  Android原生AOSP系统的编译，可以参考官方教程，主要步骤：\n\n```sh\nsource build/envsetup.sh\nlunch\nmake -j8\n```\n\n其中第二步骤，会出现选项，选择对应平台的编译对象，如`arm-eng`、`arm64-eng`等，第三步的`-j8`表示开启的线程数，一般线程数=core*2也就是cpu核数的2倍，i5一般为双核四线程，算作虚拟4核，可以用`-j8`，而i7可以用`-j16`，个人理解，呵呵。\n\n```sh\n#编译错误，重新编译\nmake clean \n# 或者\nmake clobber\n\n# 编译成功的话，可以用虚拟机看看镜像如何\ncd {project}/out/targe/product/generic/\nemulator\n```\n\n- RK3288系统编译\n\n```sh\n#在源码根目录下\nsudo vim ./mk.sh\n#修改里面的JAVA_HOME路径为本机jdk路径\n./mk.sh -u ## 编译uboot\n./mk.sh -k ## 编译kernel\n./mk.sh -s ## 编译文件系统\n```\n\n## 4、错误分析\n\n- \\<Add file> failed \n\n  先前根据Android官方编译教程，设置了`OUT_DIR_COMMON_BASE`环境变量，这个会让编译出来的文件镜像，到指定的out目录下。但是在rk3288的mk文件中，并未完全使用该变量，以致于生成的`release`和`target`目录分开了，`target`到变量指定的目录下了，`release`还在工程目录下的`out`目录下，如此就不能合并打包成功。\n\n- unsupported reloc 43\n\n  这个问题一般就是因为Android C语言编译mk文件的配置问题，也是上文所说的`/build/core/clang/HOST_x86_common.mk`中的新增那句话。注意，在Android7.0以下版本，记得要保留`-no-integrated-as`这句话。\n\n  对于这个问题的解决，有好些说法，修改`/art/build/Android.common_build.mk`和`cp /usr/bin/ld.gold`等，最好都用一下。\n\n- Api deprecation\n\n  问题好似是这么个描述，意思就是系统级的java源码，有些是不公开的，会提示要么将java文件注释`@hide`要么就运行`make update-api`一般运行一下`make update-api`即可。\n\n- 其他问题\n\n  由于硬件以及系统平台的差异，可能有些文档中没有提及一些简单的工具包的安装，rk3288平台的Android系统编译中，就需要`lzop,bc,zip,unzip`等工具，本文也在上文中列举安装了，若是平台遇到`command not found `之类的错误，根据提示，安装相应的工具，再次编译尝试。\n\n**注**：本文为简要笔记，难免不全，容后再做充实，希望对其他网友有点帮助。","slug":"RK3288爬坑笔记","published":1,"updated":"2017-03-31T08:45:14.853Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ndxcdj002688owg4swe95f","content":"<h1 id=\"RK3288平台Android系统源码编译爬坑笔记\"><a href=\"#RK3288平台Android系统源码编译爬坑笔记\" class=\"headerlink\" title=\"RK3288平台Android系统源码编译爬坑笔记\"></a>RK3288平台Android系统源码编译爬坑笔记</h1><p>博主自认为永远都是IT界的技术小白，最近开始接触Android系统源码的编译，由于工作需要，使用的是国产<strong>瑞芯微rk3288芯片</strong>平台的核心板，选择的服务商是阿里巴巴上相对知名的<strong>葡萄雨科技</strong>，虽然他们提供了系统源码和简单的操作步骤，但是实际过程中，任然很多问题，在此简要笔记之，亦希望有助于其他网友。</p>\n<h2 id=\"1、平台环境\"><a href=\"#1、平台环境\" class=\"headerlink\" title=\"1、平台环境\"></a>1、平台环境</h2><p>使用Linux操作系统，搭建服务器环境以及编译系统，不同的硬件平台、软件环境，可能引发的问题也不相同，在此有必要简要列举一下本次工作的软硬件环境：</p>\n<ul>\n<li>Dell Vostro 商用台式机，i7、8G</li>\n<li>Ubuntu-16.04.1-server-amd64</li>\n</ul>\n<blockquote>\n<p>Note:改型电脑安装系统时，会出现一些问题，反正对戴尔没啥好感，呵呵。Linux系统的安装步骤，在此也就不详细赘述，无非就是：1、使用<strong>Ultra ISO软碟通、LinuxLiveCreater</strong>等工具制作启动U盘；2、电脑USB启动U盘，进入安装，按步骤走就是了。</p>\n<p><a href=\"http://blog.csdn.net/binglumeng/article/details/52909645\" target=\"_blank\" rel=\"external\">Linux系统安装</a>、<a href=\"http://blog.csdn.net/binglumeng/article/details/50195649\" target=\"_blank\" rel=\"external\">Windows系统安装</a>、<a href=\"http://blog.csdn.net/binglumeng/article/details/50195991\" target=\"_blank\" rel=\"external\">PE系统制作</a>、有时出现CD-ROM的问题，请移步<a href=\"http://blog.csdn.net/binglumeng/article/details/54287010；\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/binglumeng/article/details/54287010；</a></p>\n</blockquote>\n<h2 id=\"2、依赖安装\"><a href=\"#2、依赖安装\" class=\"headerlink\" title=\"2、依赖安装\"></a>2、依赖安装</h2><p>Google官方推荐使用Ubuntu LST版本的系统作为Android系统源码开发环境，虽说其他Linux发行版也可以，但是毕竟可能会出现这样那样的问题，普通开发者没必要去自找太多坑。</p>\n<p>Android官网的教程<a href=\"https://source.android.com/source/initializing.html\" target=\"_blank\" rel=\"external\">Android源码编译</a>教程还是Ubuntu14.04，此处本人使用的是Ubuntu Server16.04，稍有不同，还是建议网友使用和官方一致的版本比较好。环境配置搭建参照了官方的教程，也有网上的<a href=\"http://blog.csdn.net/fuchaosz/article/details/51487585\" target=\"_blank\" rel=\"external\">梧桐那时雨</a>的一篇博客，以及<a href=\"http://stackoverflow.com/questions/36048358/building-android-from-sources-unsupported-reloc-43\" target=\"_blank\" rel=\"external\">StackOverFlow</a>上的解答。一同表示感谢。</p>\n<p>不论是RK平台、MTK平台、高通或者其他平台的Android系统编译，其实都是Google官方Android的一个定制修改，需求环境也大体相同。</p>\n<ul>\n<li><p>源码下载</p>\n<p>本文简述的是RK3288芯片平台的Android系统编译，源码也基本都是服务商提供，博主使用的是<strong>葡萄雨科技</strong>的系统源码，而关于Android官方的系统编译，可以参照如上<a href=\"https://source.android.com/source/initializing.html\" target=\"_blank\" rel=\"external\">源码链接</a>的教程。</p>\n<blockquote>\n<p>使用Google源码的话，需要Out door，作为技术员这应该是基本技能哦。</p>\n</blockquote>\n</li>\n<li><p>安装JDK</p>\n<p>根据Google官方要求，5.x–6.x使用的是openjdk7、不支持Oracle的JDK，否则会提示错误，如有兴趣，你也可以去跳坑:monkey:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo add-apt-repository ppa:openjdk-r/ppa</div><div class=\"line\">sudo apt-get update</div><div class=\"line\">sudo apt-get install openjdk-7-jdk</div></pre></td></tr></table></figure>\n<p>可能你会安装多个jdk版本，是有时候，最好根据要求，使用对应版本</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo update-alternatives --config java</div><div class=\"line\">sudo update-alternatives --config javac</div></pre></td></tr></table></figure>\n<p>然后添加到系统环境变量中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo vim /etc/profile</div></pre></td></tr></table></figure>\n<p>在文件末尾追加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Edit by binglumeng Add jdk environment</div><div class=\"line\">export JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64  ## 注释，此处为openjdk的安装路径，请根据自己电脑的时间安装路径来修改</div><div class=\"line\">export JRE_HOME=$JAVA_HOME/jre</div><div class=\"line\">export CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib:$JAVA_HOME/lib/tools.jar</div><div class=\"line\">export PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</div></pre></td></tr></table></figure>\n<p>然后保存运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">source /etc/profile</div><div class=\"line\"># 运行java命令，确认环境变量配置是否成功</div><div class=\"line\">java</div><div class=\"line\">javac</div><div class=\"line\">java -version</div></pre></td></tr></table></figure>\n<p><strong>注意：建议使用root用户操作Ubuntu，虽然普通用户可以使用sudo，但是有时候可能还会出现权限的问题</strong></p>\n</li>\n</ul>\n<ul>\n<li><p>安装依赖指令与库</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt install repo bc vim gcc g++ ssh git python m4 lzop</div><div class=\"line\">sudo apt install zip unzip git-core gnupg flex bison gperf build-essential curl zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z-dev ccache libgl1-mesa-dev libxml2-utils xsltproc</div></pre></td></tr></table></figure>\n<p>修改配置</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"built_in\">export</span>  CCACHE_DIR=~/.ccache &gt;&gt;~/.bashrc</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"built_in\">export</span> USE_CCACHE=1 &gt;&gt; ~/.bashrc</div><div class=\"line\"><span class=\"comment\">## 在源码工程根目录下,提高编译器的效率，设置缓存</span></div><div class=\"line\">prebuilds/misc/linux-x86/ccache/ccache -M 50G</div></pre></td></tr></table></figure>\n<p>更新和升级系统</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt update</div><div class=\"line\">sudo apt upgrade</div><div class=\"line\">sudo apt autoremove</div><div class=\"line\">sudo apt autoclean</div></pre></td></tr></table></figure>\n</li>\n<li><p>修改文件</p>\n<p>此处鉴于本人编译源码过程中，所遇问题以及搜索的解决方案，在此先罗列出需要修改的文件和内容</p>\n<ul>\n<li><p>{project}/art/build/Android.common_build.mk</p>\n<p>在rk3288，葡萄雨提供的源码中，暂时没有修改该文件，其实可以修改一下，找到下面内容</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Host.</span></div><div class=\"line\">ART_HOST_CLANG := <span class=\"literal\">false</span></div><div class=\"line\">ifneq ($(WITHOUT_HOST_CLANG),<span class=\"literal\">true</span>)</div><div class=\"line\">  <span class=\"comment\"># By default, host builds use clang for better warnings.</span></div><div class=\"line\">  ART_HOST_CLANG := <span class=\"literal\">true</span></div><div class=\"line\">endif</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>修改第三行的<code>true</code>为<code>false</code></p>\n</li>\n<li><p>{project}/build/core/clang/HOST_x86_common.mk</p>\n<p>找到<code>CLANG_CONFIG_x86_LINUX_HOST_EXTRA_ASFLAGS</code>在下面增加<code>-B$($(clang_2nd_arch_prefix)HOST_TOOLCHAIN_FOR_CLANG)/x86_64-linux/bin \\</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Shared by HOST_x86.mk and HOST_x86_64.mk.</span></div><div class=\"line\"></div><div class=\"line\">ifeq ($(HOST_OS),darwin)</div><div class=\"line\"><span class=\"comment\"># nothing required here yet</span></div><div class=\"line\">endif</div><div class=\"line\"></div><div class=\"line\">ifeq ($(HOST_OS),linux)</div><div class=\"line\">CLANG_CONFIG_x86_LINUX_HOST_EXTRA_ASFLAGS := \\</div><div class=\"line\">  --gcc-toolchain=$($(clang_2nd_arch_prefix)HOST_TOOLCHAIN_FOR_CLANG) \\</div><div class=\"line\">  --sysroot=$($(clang_2nd_arch_prefix)HOST_TOOLCHAIN_FOR_CLANG)/sysroot \\</div><div class=\"line\">  -B$($(clang_2nd_arch_prefix)HOST_TOOLCHAIN_FOR_CLANG)/x86_64-linux/bin \\</div><div class=\"line\">  -no-integrated-as</div><div class=\"line\"></div><div class=\"line\">CLANG_CONFIG_x86_LINUX_HOST_EXTRA_CFLAGS := \\</div><div class=\"line\">  --gcc-toolchain=$($(clang_2nd_arch_prefix)HOST_TOOLCHAIN_FOR_CLANG) \\</div><div class=\"line\">  -no-integrated-as</div></pre></td></tr></table></figure>\n</li>\n<li><p>{project}/prebuilts/gcc/linux-x86/host/x86_64-linux-glibc2.11-4.6/x86_64-linux/bin</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#就是用linux系统的ld文件替换源码中的ld文件</span></div><div class=\"line\">cp /usr/bin/ld.gold /prebuilts/gcc/linux-x86/host/x86_64-linux-glibc2.11-4.6/x86_64-linux/bin/ld</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3、系统编译\"><a href=\"#3、系统编译\" class=\"headerlink\" title=\"3、系统编译\"></a>3、系统编译</h2><p>  Android原生AOSP系统的编译，可以参考官方教程，主要步骤：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">source</span> build/envsetup.sh</div><div class=\"line\">lunch</div><div class=\"line\">make -j8</div></pre></td></tr></table></figure>\n<p>其中第二步骤，会出现选项，选择对应平台的编译对象，如<code>arm-eng</code>、<code>arm64-eng</code>等，第三步的<code>-j8</code>表示开启的线程数，一般线程数=core*2也就是cpu核数的2倍，i5一般为双核四线程，算作虚拟4核，可以用<code>-j8</code>，而i7可以用<code>-j16</code>，个人理解，呵呵。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#编译错误，重新编译</span></div><div class=\"line\">make clean </div><div class=\"line\"><span class=\"comment\"># 或者</span></div><div class=\"line\">make clobber</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 编译成功的话，可以用虚拟机看看镜像如何</span></div><div class=\"line\"><span class=\"built_in\">cd</span> &#123;project&#125;/out/targe/product/generic/</div><div class=\"line\">emulator</div></pre></td></tr></table></figure>\n<ul>\n<li>RK3288系统编译</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#在源码根目录下</span></div><div class=\"line\">sudo vim ./mk.sh</div><div class=\"line\"><span class=\"comment\">#修改里面的JAVA_HOME路径为本机jdk路径</span></div><div class=\"line\">./mk.sh -u <span class=\"comment\">## 编译uboot</span></div><div class=\"line\">./mk.sh -k <span class=\"comment\">## 编译kernel</span></div><div class=\"line\">./mk.sh <span class=\"_\">-s</span> <span class=\"comment\">## 编译文件系统</span></div></pre></td></tr></table></figure>\n<h2 id=\"4、错误分析\"><a href=\"#4、错误分析\" class=\"headerlink\" title=\"4、错误分析\"></a>4、错误分析</h2><ul>\n<li><p>\\<add file=\"\"> failed </add></p>\n<p>先前根据Android官方编译教程，设置了<code>OUT_DIR_COMMON_BASE</code>环境变量，这个会让编译出来的文件镜像，到指定的out目录下。但是在rk3288的mk文件中，并未完全使用该变量，以致于生成的<code>release</code>和<code>target</code>目录分开了，<code>target</code>到变量指定的目录下了，<code>release</code>还在工程目录下的<code>out</code>目录下，如此就不能合并打包成功。</p>\n</li>\n<li><p>unsupported reloc 43</p>\n<p>这个问题一般就是因为Android C语言编译mk文件的配置问题，也是上文所说的<code>/build/core/clang/HOST_x86_common.mk</code>中的新增那句话。注意，在Android7.0以下版本，记得要保留<code>-no-integrated-as</code>这句话。</p>\n<p>对于这个问题的解决，有好些说法，修改<code>/art/build/Android.common_build.mk</code>和<code>cp /usr/bin/ld.gold</code>等，最好都用一下。</p>\n</li>\n<li><p>Api deprecation</p>\n<p>问题好似是这么个描述，意思就是系统级的java源码，有些是不公开的，会提示要么将java文件注释<code>@hide</code>要么就运行<code>make update-api</code>一般运行一下<code>make update-api</code>即可。</p>\n</li>\n<li><p>其他问题</p>\n<p>由于硬件以及系统平台的差异，可能有些文档中没有提及一些简单的工具包的安装，rk3288平台的Android系统编译中，就需要<code>lzop,bc,zip,unzip</code>等工具，本文也在上文中列举安装了，若是平台遇到<code>command not found</code>之类的错误，根据提示，安装相应的工具，再次编译尝试。</p>\n</li>\n</ul>\n<p><strong>注</strong>：本文为简要笔记，难免不全，容后再做充实，希望对其他网友有点帮助。</p>\n","excerpt":"","more":"<h1 id=\"RK3288平台Android系统源码编译爬坑笔记\"><a href=\"#RK3288平台Android系统源码编译爬坑笔记\" class=\"headerlink\" title=\"RK3288平台Android系统源码编译爬坑笔记\"></a>RK3288平台Android系统源码编译爬坑笔记</h1><p>博主自认为永远都是IT界的技术小白，最近开始接触Android系统源码的编译，由于工作需要，使用的是国产<strong>瑞芯微rk3288芯片</strong>平台的核心板，选择的服务商是阿里巴巴上相对知名的<strong>葡萄雨科技</strong>，虽然他们提供了系统源码和简单的操作步骤，但是实际过程中，任然很多问题，在此简要笔记之，亦希望有助于其他网友。</p>\n<h2 id=\"1、平台环境\"><a href=\"#1、平台环境\" class=\"headerlink\" title=\"1、平台环境\"></a>1、平台环境</h2><p>使用Linux操作系统，搭建服务器环境以及编译系统，不同的硬件平台、软件环境，可能引发的问题也不相同，在此有必要简要列举一下本次工作的软硬件环境：</p>\n<ul>\n<li>Dell Vostro 商用台式机，i7、8G</li>\n<li>Ubuntu-16.04.1-server-amd64</li>\n</ul>\n<blockquote>\n<p>Note:改型电脑安装系统时，会出现一些问题，反正对戴尔没啥好感，呵呵。Linux系统的安装步骤，在此也就不详细赘述，无非就是：1、使用<strong>Ultra ISO软碟通、LinuxLiveCreater</strong>等工具制作启动U盘；2、电脑USB启动U盘，进入安装，按步骤走就是了。</p>\n<p><a href=\"http://blog.csdn.net/binglumeng/article/details/52909645\">Linux系统安装</a>、<a href=\"http://blog.csdn.net/binglumeng/article/details/50195649\">Windows系统安装</a>、<a href=\"http://blog.csdn.net/binglumeng/article/details/50195991\">PE系统制作</a>、有时出现CD-ROM的问题，请移步<a href=\"http://blog.csdn.net/binglumeng/article/details/54287010；\">http://blog.csdn.net/binglumeng/article/details/54287010；</a></p>\n</blockquote>\n<h2 id=\"2、依赖安装\"><a href=\"#2、依赖安装\" class=\"headerlink\" title=\"2、依赖安装\"></a>2、依赖安装</h2><p>Google官方推荐使用Ubuntu LST版本的系统作为Android系统源码开发环境，虽说其他Linux发行版也可以，但是毕竟可能会出现这样那样的问题，普通开发者没必要去自找太多坑。</p>\n<p>Android官网的教程<a href=\"https://source.android.com/source/initializing.html\">Android源码编译</a>教程还是Ubuntu14.04，此处本人使用的是Ubuntu Server16.04，稍有不同，还是建议网友使用和官方一致的版本比较好。环境配置搭建参照了官方的教程，也有网上的<a href=\"http://blog.csdn.net/fuchaosz/article/details/51487585\">梧桐那时雨</a>的一篇博客，以及<a href=\"http://stackoverflow.com/questions/36048358/building-android-from-sources-unsupported-reloc-43\">StackOverFlow</a>上的解答。一同表示感谢。</p>\n<p>不论是RK平台、MTK平台、高通或者其他平台的Android系统编译，其实都是Google官方Android的一个定制修改，需求环境也大体相同。</p>\n<ul>\n<li><p>源码下载</p>\n<p>本文简述的是RK3288芯片平台的Android系统编译，源码也基本都是服务商提供，博主使用的是<strong>葡萄雨科技</strong>的系统源码，而关于Android官方的系统编译，可以参照如上<a href=\"https://source.android.com/source/initializing.html\">源码链接</a>的教程。</p>\n<blockquote>\n<p>使用Google源码的话，需要Out door，作为技术员这应该是基本技能哦。</p>\n</blockquote>\n</li>\n<li><p>安装JDK</p>\n<p>根据Google官方要求，5.x–6.x使用的是openjdk7、不支持Oracle的JDK，否则会提示错误，如有兴趣，你也可以去跳坑:monkey:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo add-apt-repository ppa:openjdk-r/ppa</div><div class=\"line\">sudo apt-get update</div><div class=\"line\">sudo apt-get install openjdk-7-jdk</div></pre></td></tr></table></figure>\n<p>可能你会安装多个jdk版本，是有时候，最好根据要求，使用对应版本</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo update-alternatives --config java</div><div class=\"line\">sudo update-alternatives --config javac</div></pre></td></tr></table></figure>\n<p>然后添加到系统环境变量中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo vim /etc/profile</div></pre></td></tr></table></figure>\n<p>在文件末尾追加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Edit by binglumeng Add jdk environment</div><div class=\"line\">export JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64  ## 注释，此处为openjdk的安装路径，请根据自己电脑的时间安装路径来修改</div><div class=\"line\">export JRE_HOME=$JAVA_HOME/jre</div><div class=\"line\">export CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib:$JAVA_HOME/lib/tools.jar</div><div class=\"line\">export PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</div></pre></td></tr></table></figure>\n<p>然后保存运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">source /etc/profile</div><div class=\"line\"># 运行java命令，确认环境变量配置是否成功</div><div class=\"line\">java</div><div class=\"line\">javac</div><div class=\"line\">java -version</div></pre></td></tr></table></figure>\n<p><strong>注意：建议使用root用户操作Ubuntu，虽然普通用户可以使用sudo，但是有时候可能还会出现权限的问题</strong></p>\n</li>\n</ul>\n<ul>\n<li><p>安装依赖指令与库</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt install repo bc vim gcc g++ ssh git python m4 lzop</div><div class=\"line\">sudo apt install zip unzip git-core gnupg flex bison gperf build-essential curl zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z-dev ccache libgl1-mesa-dev libxml2-utils xsltproc</div></pre></td></tr></table></figure>\n<p>修改配置</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"built_in\">export</span>  CCACHE_DIR=~/.ccache &gt;&gt;~/.bashrc</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"built_in\">export</span> USE_CCACHE=1 &gt;&gt; ~/.bashrc</div><div class=\"line\"><span class=\"comment\">## 在源码工程根目录下,提高编译器的效率，设置缓存</span></div><div class=\"line\">prebuilds/misc/linux-x86/ccache/ccache -M 50G</div></pre></td></tr></table></figure>\n<p>更新和升级系统</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt update</div><div class=\"line\">sudo apt upgrade</div><div class=\"line\">sudo apt autoremove</div><div class=\"line\">sudo apt autoclean</div></pre></td></tr></table></figure>\n</li>\n<li><p>修改文件</p>\n<p>此处鉴于本人编译源码过程中，所遇问题以及搜索的解决方案，在此先罗列出需要修改的文件和内容</p>\n<ul>\n<li><p>{project}/art/build/Android.common_build.mk</p>\n<p>在rk3288，葡萄雨提供的源码中，暂时没有修改该文件，其实可以修改一下，找到下面内容</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Host.</span></div><div class=\"line\">ART_HOST_CLANG := <span class=\"literal\">false</span></div><div class=\"line\">ifneq ($(WITHOUT_HOST_CLANG),<span class=\"literal\">true</span>)</div><div class=\"line\">  <span class=\"comment\"># By default, host builds use clang for better warnings.</span></div><div class=\"line\">  ART_HOST_CLANG := <span class=\"literal\">true</span></div><div class=\"line\">endif</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>修改第三行的<code>true</code>为<code>false</code></p>\n</li>\n<li><p>{project}/build/core/clang/HOST_x86_common.mk</p>\n<p>找到<code>CLANG_CONFIG_x86_LINUX_HOST_EXTRA_ASFLAGS</code>在下面增加<code>-B$($(clang_2nd_arch_prefix)HOST_TOOLCHAIN_FOR_CLANG)/x86_64-linux/bin \\</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Shared by HOST_x86.mk and HOST_x86_64.mk.</span></div><div class=\"line\"></div><div class=\"line\">ifeq ($(HOST_OS),darwin)</div><div class=\"line\"><span class=\"comment\"># nothing required here yet</span></div><div class=\"line\">endif</div><div class=\"line\"></div><div class=\"line\">ifeq ($(HOST_OS),linux)</div><div class=\"line\">CLANG_CONFIG_x86_LINUX_HOST_EXTRA_ASFLAGS := \\</div><div class=\"line\">  --gcc-toolchain=$($(clang_2nd_arch_prefix)HOST_TOOLCHAIN_FOR_CLANG) \\</div><div class=\"line\">  --sysroot=$($(clang_2nd_arch_prefix)HOST_TOOLCHAIN_FOR_CLANG)/sysroot \\</div><div class=\"line\">  -B$($(clang_2nd_arch_prefix)HOST_TOOLCHAIN_FOR_CLANG)/x86_64-linux/bin \\</div><div class=\"line\">  -no-integrated-as</div><div class=\"line\"></div><div class=\"line\">CLANG_CONFIG_x86_LINUX_HOST_EXTRA_CFLAGS := \\</div><div class=\"line\">  --gcc-toolchain=$($(clang_2nd_arch_prefix)HOST_TOOLCHAIN_FOR_CLANG) \\</div><div class=\"line\">  -no-integrated-as</div></pre></td></tr></table></figure>\n</li>\n<li><p>{project}/prebuilts/gcc/linux-x86/host/x86_64-linux-glibc2.11-4.6/x86_64-linux/bin</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#就是用linux系统的ld文件替换源码中的ld文件</span></div><div class=\"line\">cp /usr/bin/ld.gold /prebuilts/gcc/linux-x86/host/x86_64-linux-glibc2.11-4.6/x86_64-linux/bin/ld</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3、系统编译\"><a href=\"#3、系统编译\" class=\"headerlink\" title=\"3、系统编译\"></a>3、系统编译</h2><p>  Android原生AOSP系统的编译，可以参考官方教程，主要步骤：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">source</span> build/envsetup.sh</div><div class=\"line\">lunch</div><div class=\"line\">make -j8</div></pre></td></tr></table></figure>\n<p>其中第二步骤，会出现选项，选择对应平台的编译对象，如<code>arm-eng</code>、<code>arm64-eng</code>等，第三步的<code>-j8</code>表示开启的线程数，一般线程数=core*2也就是cpu核数的2倍，i5一般为双核四线程，算作虚拟4核，可以用<code>-j8</code>，而i7可以用<code>-j16</code>，个人理解，呵呵。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#编译错误，重新编译</span></div><div class=\"line\">make clean </div><div class=\"line\"><span class=\"comment\"># 或者</span></div><div class=\"line\">make clobber</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 编译成功的话，可以用虚拟机看看镜像如何</span></div><div class=\"line\"><span class=\"built_in\">cd</span> &#123;project&#125;/out/targe/product/generic/</div><div class=\"line\">emulator</div></pre></td></tr></table></figure>\n<ul>\n<li>RK3288系统编译</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#在源码根目录下</span></div><div class=\"line\">sudo vim ./mk.sh</div><div class=\"line\"><span class=\"comment\">#修改里面的JAVA_HOME路径为本机jdk路径</span></div><div class=\"line\">./mk.sh -u <span class=\"comment\">## 编译uboot</span></div><div class=\"line\">./mk.sh -k <span class=\"comment\">## 编译kernel</span></div><div class=\"line\">./mk.sh <span class=\"_\">-s</span> <span class=\"comment\">## 编译文件系统</span></div></pre></td></tr></table></figure>\n<h2 id=\"4、错误分析\"><a href=\"#4、错误分析\" class=\"headerlink\" title=\"4、错误分析\"></a>4、错误分析</h2><ul>\n<li><p>\\<Add file=\"\"> failed </Add></p>\n<p>先前根据Android官方编译教程，设置了<code>OUT_DIR_COMMON_BASE</code>环境变量，这个会让编译出来的文件镜像，到指定的out目录下。但是在rk3288的mk文件中，并未完全使用该变量，以致于生成的<code>release</code>和<code>target</code>目录分开了，<code>target</code>到变量指定的目录下了，<code>release</code>还在工程目录下的<code>out</code>目录下，如此就不能合并打包成功。</p>\n</li>\n<li><p>unsupported reloc 43</p>\n<p>这个问题一般就是因为Android C语言编译mk文件的配置问题，也是上文所说的<code>/build/core/clang/HOST_x86_common.mk</code>中的新增那句话。注意，在Android7.0以下版本，记得要保留<code>-no-integrated-as</code>这句话。</p>\n<p>对于这个问题的解决，有好些说法，修改<code>/art/build/Android.common_build.mk</code>和<code>cp /usr/bin/ld.gold</code>等，最好都用一下。</p>\n</li>\n<li><p>Api deprecation</p>\n<p>问题好似是这么个描述，意思就是系统级的java源码，有些是不公开的，会提示要么将java文件注释<code>@hide</code>要么就运行<code>make update-api</code>一般运行一下<code>make update-api</code>即可。</p>\n</li>\n<li><p>其他问题</p>\n<p>由于硬件以及系统平台的差异，可能有些文档中没有提及一些简单的工具包的安装，rk3288平台的Android系统编译中，就需要<code>lzop,bc,zip,unzip</code>等工具，本文也在上文中列举安装了，若是平台遇到<code>command not found</code>之类的错误，根据提示，安装相应的工具，再次编译尝试。</p>\n</li>\n</ul>\n<p><strong>注</strong>：本文为简要笔记，难免不全，容后再做充实，希望对其他网友有点帮助。</p>\n"},{"title":"Markdown语法简要","date":"2016-10-27T12:57:00.000Z","author":"冰路梦","_content":"# Markdown语法简要\n\n<!-- TOC -->\n\n- [Markdown语法简要](#markdown语法简要)\n         - [1. 标题](#1-标题)\n         - [2. 区块引用](#2-区块引用)\n         - [3. 分割线](#3-分割线)\n         - [4. 背景框](#4-背景框)\n\n<!-- /TOC -->\n####1. 标题\n\n-    `#`标题，1--6级别，atx风格，效果：\n\n     ###### 标题6\n\n- `=`或`-`似乎只有一个级别，setext风格，效果\n\n         标题\n         ===<font color=\"#ff0000\">**csdn不支持**</font>\n\n\n#### 2. 区块引用\n\n   `>`行首位置,可嵌套，效果：\n   > 段落引用块\n   > > 内部嵌套\n\n####3. 分割线\n分割线用 `---`、`___`和`***`三个加、减、下划线，注意不要和标题的一种形式混淆。效果：\n\n   ---\n\n####4. 背景框\n```   ``  ```反引号构成背景框。效果，`背景框`\n\n####5. 列表\n有无和无序。\n\n- `-`、`+`、`*`符号位于行首，紧跟空格。有序列表只是用数字替代前述符号，数字不要求有序。效果：\n- 无序列\n   6. 有序\n   7. 有序\n\n####6. 代码块\n\n   `使用三对反引号```java  ```从行首起，中间写代码，可在三引号后声明代码语言，实现高亮`，效果：\n```java\n\tpublic void test(){\n\t//注释\n\t}\n```\n\n####7. 链接\n\n-  行内式，格式`[name](url,\"title\")`，效果：\n     [Markdown语法](http://blog.csdn.net/binglumeng/article/details/52668151)\n- 参考式，格式`[name][id]`，文章他处声明id，`[id]:url`，效果：\n         [Markdown语法][md]\n- 自动链接`< >`其中直接写网址，或者邮箱，需要有http://同类的，或@符号。效果：\n     <https://google.com>,<markdown@md.com>\n- 网址直译，www.google.com， <font color=\"#ff0000\">**csdn不支持**</font>\n\n####8. 强调\n\n-  使用一对`**`或`__`表示强调，被强调文本在其中。一对`**`或`__`是斜体\n\n   两对是粗体，三对是斜体加粗。效果：\n   _斜体_，**粗体**，***粗斜体***\n\n- 两对`~~~~`表示删除线，包裹文本。\n\n   效果：~~删除~~\n\n- 两对`====`之间高亮\n\n  效果：==高亮==\n\n- `<u></u>`之间下划线\n\n  效果：<u>下划线</u>\n\n#### 9.  符号\n\n参照第18条，其实用于数学公式更多。\n\n   一对`$$`符号，文本其中可以斜体，两对`$$$$`文本其中，居中斜体。还会有编号。(刚明白，是数学公式常用。)\n\n-  在`$$`或`$$$$`之中的文本，其首尾处有`~`产生空格；\n- 文本首尾有`#`、`{`、`}`、`&`会出现黑色边框，且包含前述符号。\n   - `^`、`_`在文本尾部效果如上，在起始出，则分别表示上下角标。\n   - `%`隐藏%号后面内容。\n\n   `\\`符号可以转义其他符号。自定义的标签`<info>`之类可能被隐藏。\n   效果：\n      一对美元符号：$one$\n      两对美元符号：$$two$$\n      带边框：$frame_$\n      上角标：$^up$，下角标$_low$\n      隐藏：`$注意百分号后面%没有了$`\n      $注意百分号后面%没有了$\n####10. 图片\n\n    类似链接，行内式和参考式\n\n- 行内式，`![name](path)`\n- 参考式，`![name][image]`，id定义其他地方[image]:image\\path\n    - 效果：![img](https://assets-cdn.github.com/images/modules/about/about-header.jpg)\n    - ![githubj][img1]\n[img1]:http://leanote.com/public/upload/536/56ac79afab64417926004444/images/logo/48c077cb768ce98ce2cacb41a3cc63b2.jpg\n\n####11. 表格\n\n    行首开始，写title，`|`符号表示分栏，减号`-`表示列宽。格式为首行写title，次行写对齐方式。至少形成表头才是表格。两列一行。\n\n```\n学号|姓名\n-|\n有的必须每行前后都要有|符号\n```\n\n- `:---`左对齐\n\n- `---:`右对齐\n\n- `:---:`居中\n\n- `---`默认对齐方式，左对齐。\n\n- 效果：第二列只有两个`|`也能分三栏\n\n  ​\n\n  | 学号   | 姓名   | 成绩   |\n  | ---- | ---- | ---- |\n  |      |      |      |\n\n  ​\n\n#### 12. 复选框\n\n    使用列表的符号，加减星，或数字，配合空格、x、和[ ]符号\n\n```java\n格式为`+或-或*`空格`[空格或x]`空格，列表内容。其中x、X都行。\n```\n效果：\n\n- [ ] 第一项\n- [x] 第二项\n\n#### 13. 表情符号\n\n    格式，一对`::`中加emoji英文代码，如:monkey:，[emoji](http://emoji.codes)\n:monkey:,:star:,:girl:\n####14. 脚注\n\n    格式`[^id]`符号，文章尾或其他处声明。`[^id]:注解`\n    效果：脚注[^footer]\n####15. 目录\n\n    格式，`[toc]`符号，效果见文章目录。\n#### 16. UML类图\n\n    格式，类似代码块，三反引号`    ```sequence  ```       `声明sequence后，单行写交互语句。\n\n​    \n    ​```A->B:hello//A对B\n    note left of B:what?//B思考,\n    B-->A:ok//B回复A，虚线。\n    ​```\n    \n    效果：\n\n```sequence\nA->B: hello\nNote right of B: what?\nB-->A:ok\n```\n\n#### 17.流程图：\n\n    类似UML图，语言标签为`flow`，用`=>`表路线，有对应代码标识。以后在慢慢整理，`先定义标签再使用操作？`\n\n    ​```java\n      ```flow\n      st=>start: 开始\n      e=>end: 结束\n      op=>operation: 我的操作\n      cond=>condition: 确认？\n      st->op->cond\n      cond(yes)->e\n      cond(no)->op\n    ​```\n    ​```\n\n效果：\n\n```flow\nst=>start: 开始\ne=>end: 结束\nop=>operation: 我的操作\ncond=>condition: 确认？\nst->op->cond\ncond(yes)->e\ncond(no)->op\n```\n\n#### 18. 甘特图：\n\n    类似代码块，语言标识`gantt`，有语法，以后慢慢总结。\n\n```gantt\n​```gantt\n    title 项目开发流程//标题\n    section 项目确定//项目阶段\n        需求分析       :a1, 2016-06-22, 3d//任务名称，日期线和时长\n        可行性报告     :after a1, 5d\n        概念验证       : 5d\n    section 项目实施\n        概要设计      :2016-07-05  , 5d\n        详细设计      :2016-07-08, 10d\n        编码          :2016-07-15, 10d\n        测试          :2016-07-22, 5d\n    section 发布验收\n        发布: 2d\n        验收: 3d\n​```\n```\n\n```gantt\n\ttitle 项目开发流程\n        section 项目确定\n            需求分析       :a1, 2016-06-22, 3d\n            可行性报告     :after a1, 5d\n            概念验证       : 5d\n        section 项目实施\n            概要设计      :2016-07-05  , 5d\n            详细设计      :2016-07-08, 10d\n            编码          :2016-07-15, 10d\n            测试          :2016-07-22, 5d\n        section 发布验收\n            发布: 2d\n            验收: 3d\n```\n\n#### 19. 数学公式：\n\n    markdown多使用LaTex数学公式，用`$`和`$$`符号标识\n\n- 行内公式，`$\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$`\n\n效果：$\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$\n\n- 块级公式，`$$x = \\dfrac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$`\n\n效果：$$x = \\dfrac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$\n\n\n*附注：本文所列举markdown语法，适合大部分markdown编辑器，仍有个别功能属增强功能，读者请留心。*\n**注意：各个语法效果之间，需要有空行，避免相互干扰。（有的编辑器会自动给你处理，有的却不会。）**\n\n*附上较详细的[markdown语法文本](http://blog.csdn.net/binglumeng/article/details/52668151)*\n[md]:http://blog.csdn.net/binglumeng/article/details/52668151\n[^footer]: 脚注\n\n","source":"_posts/Markdown语法简要.md","raw":"---\ntitle: \"Markdown语法简要\"\ndate: 2016-10-27 20:57\nauthor: 冰路梦\ntag:\n\t- Markdown\ncategories:\n\t- 编程相关\n---\n# Markdown语法简要\n\n<!-- TOC -->\n\n- [Markdown语法简要](#markdown语法简要)\n         - [1. 标题](#1-标题)\n         - [2. 区块引用](#2-区块引用)\n         - [3. 分割线](#3-分割线)\n         - [4. 背景框](#4-背景框)\n\n<!-- /TOC -->\n####1. 标题\n\n-    `#`标题，1--6级别，atx风格，效果：\n\n     ###### 标题6\n\n- `=`或`-`似乎只有一个级别，setext风格，效果\n\n         标题\n         ===<font color=\"#ff0000\">**csdn不支持**</font>\n\n\n#### 2. 区块引用\n\n   `>`行首位置,可嵌套，效果：\n   > 段落引用块\n   > > 内部嵌套\n\n####3. 分割线\n分割线用 `---`、`___`和`***`三个加、减、下划线，注意不要和标题的一种形式混淆。效果：\n\n   ---\n\n####4. 背景框\n```   ``  ```反引号构成背景框。效果，`背景框`\n\n####5. 列表\n有无和无序。\n\n- `-`、`+`、`*`符号位于行首，紧跟空格。有序列表只是用数字替代前述符号，数字不要求有序。效果：\n- 无序列\n   6. 有序\n   7. 有序\n\n####6. 代码块\n\n   `使用三对反引号```java  ```从行首起，中间写代码，可在三引号后声明代码语言，实现高亮`，效果：\n```java\n\tpublic void test(){\n\t//注释\n\t}\n```\n\n####7. 链接\n\n-  行内式，格式`[name](url,\"title\")`，效果：\n     [Markdown语法](http://blog.csdn.net/binglumeng/article/details/52668151)\n- 参考式，格式`[name][id]`，文章他处声明id，`[id]:url`，效果：\n         [Markdown语法][md]\n- 自动链接`< >`其中直接写网址，或者邮箱，需要有http://同类的，或@符号。效果：\n     <https://google.com>,<markdown@md.com>\n- 网址直译，www.google.com， <font color=\"#ff0000\">**csdn不支持**</font>\n\n####8. 强调\n\n-  使用一对`**`或`__`表示强调，被强调文本在其中。一对`**`或`__`是斜体\n\n   两对是粗体，三对是斜体加粗。效果：\n   _斜体_，**粗体**，***粗斜体***\n\n- 两对`~~~~`表示删除线，包裹文本。\n\n   效果：~~删除~~\n\n- 两对`====`之间高亮\n\n  效果：==高亮==\n\n- `<u></u>`之间下划线\n\n  效果：<u>下划线</u>\n\n#### 9.  符号\n\n参照第18条，其实用于数学公式更多。\n\n   一对`$$`符号，文本其中可以斜体，两对`$$$$`文本其中，居中斜体。还会有编号。(刚明白，是数学公式常用。)\n\n-  在`$$`或`$$$$`之中的文本，其首尾处有`~`产生空格；\n- 文本首尾有`#`、`{`、`}`、`&`会出现黑色边框，且包含前述符号。\n   - `^`、`_`在文本尾部效果如上，在起始出，则分别表示上下角标。\n   - `%`隐藏%号后面内容。\n\n   `\\`符号可以转义其他符号。自定义的标签`<info>`之类可能被隐藏。\n   效果：\n      一对美元符号：$one$\n      两对美元符号：$$two$$\n      带边框：$frame_$\n      上角标：$^up$，下角标$_low$\n      隐藏：`$注意百分号后面%没有了$`\n      $注意百分号后面%没有了$\n####10. 图片\n\n    类似链接，行内式和参考式\n\n- 行内式，`![name](path)`\n- 参考式，`![name][image]`，id定义其他地方[image]:image\\path\n    - 效果：![img](https://assets-cdn.github.com/images/modules/about/about-header.jpg)\n    - ![githubj][img1]\n[img1]:http://leanote.com/public/upload/536/56ac79afab64417926004444/images/logo/48c077cb768ce98ce2cacb41a3cc63b2.jpg\n\n####11. 表格\n\n    行首开始，写title，`|`符号表示分栏，减号`-`表示列宽。格式为首行写title，次行写对齐方式。至少形成表头才是表格。两列一行。\n\n```\n学号|姓名\n-|\n有的必须每行前后都要有|符号\n```\n\n- `:---`左对齐\n\n- `---:`右对齐\n\n- `:---:`居中\n\n- `---`默认对齐方式，左对齐。\n\n- 效果：第二列只有两个`|`也能分三栏\n\n  ​\n\n  | 学号   | 姓名   | 成绩   |\n  | ---- | ---- | ---- |\n  |      |      |      |\n\n  ​\n\n#### 12. 复选框\n\n    使用列表的符号，加减星，或数字，配合空格、x、和[ ]符号\n\n```java\n格式为`+或-或*`空格`[空格或x]`空格，列表内容。其中x、X都行。\n```\n效果：\n\n- [ ] 第一项\n- [x] 第二项\n\n#### 13. 表情符号\n\n    格式，一对`::`中加emoji英文代码，如:monkey:，[emoji](http://emoji.codes)\n:monkey:,:star:,:girl:\n####14. 脚注\n\n    格式`[^id]`符号，文章尾或其他处声明。`[^id]:注解`\n    效果：脚注[^footer]\n####15. 目录\n\n    格式，`[toc]`符号，效果见文章目录。\n#### 16. UML类图\n\n    格式，类似代码块，三反引号`    ```sequence  ```       `声明sequence后，单行写交互语句。\n\n​    \n    ​```A->B:hello//A对B\n    note left of B:what?//B思考,\n    B-->A:ok//B回复A，虚线。\n    ​```\n    \n    效果：\n\n```sequence\nA->B: hello\nNote right of B: what?\nB-->A:ok\n```\n\n#### 17.流程图：\n\n    类似UML图，语言标签为`flow`，用`=>`表路线，有对应代码标识。以后在慢慢整理，`先定义标签再使用操作？`\n\n    ​```java\n      ```flow\n      st=>start: 开始\n      e=>end: 结束\n      op=>operation: 我的操作\n      cond=>condition: 确认？\n      st->op->cond\n      cond(yes)->e\n      cond(no)->op\n    ​```\n    ​```\n\n效果：\n\n```flow\nst=>start: 开始\ne=>end: 结束\nop=>operation: 我的操作\ncond=>condition: 确认？\nst->op->cond\ncond(yes)->e\ncond(no)->op\n```\n\n#### 18. 甘特图：\n\n    类似代码块，语言标识`gantt`，有语法，以后慢慢总结。\n\n```gantt\n​```gantt\n    title 项目开发流程//标题\n    section 项目确定//项目阶段\n        需求分析       :a1, 2016-06-22, 3d//任务名称，日期线和时长\n        可行性报告     :after a1, 5d\n        概念验证       : 5d\n    section 项目实施\n        概要设计      :2016-07-05  , 5d\n        详细设计      :2016-07-08, 10d\n        编码          :2016-07-15, 10d\n        测试          :2016-07-22, 5d\n    section 发布验收\n        发布: 2d\n        验收: 3d\n​```\n```\n\n```gantt\n\ttitle 项目开发流程\n        section 项目确定\n            需求分析       :a1, 2016-06-22, 3d\n            可行性报告     :after a1, 5d\n            概念验证       : 5d\n        section 项目实施\n            概要设计      :2016-07-05  , 5d\n            详细设计      :2016-07-08, 10d\n            编码          :2016-07-15, 10d\n            测试          :2016-07-22, 5d\n        section 发布验收\n            发布: 2d\n            验收: 3d\n```\n\n#### 19. 数学公式：\n\n    markdown多使用LaTex数学公式，用`$`和`$$`符号标识\n\n- 行内公式，`$\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$`\n\n效果：$\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$\n\n- 块级公式，`$$x = \\dfrac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$`\n\n效果：$$x = \\dfrac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$\n\n\n*附注：本文所列举markdown语法，适合大部分markdown编辑器，仍有个别功能属增强功能，读者请留心。*\n**注意：各个语法效果之间，需要有空行，避免相互干扰。（有的编辑器会自动给你处理，有的却不会。）**\n\n*附上较详细的[markdown语法文本](http://blog.csdn.net/binglumeng/article/details/52668151)*\n[md]:http://blog.csdn.net/binglumeng/article/details/52668151\n[^footer]: 脚注\n\n","slug":"Markdown语法简要","published":1,"updated":"2017-03-31T02:57:24.996Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ndxcdk002988ow2azctp3t","content":"<h1 id=\"Markdown语法简要\"><a href=\"#Markdown语法简要\" class=\"headerlink\" title=\"Markdown语法简要\"></a>Markdown语法简要</h1><!-- TOC -->\n<ul>\n<li><a href=\"#markdown语法简要\">Markdown语法简要</a><pre><code>- [1. 标题](#1-标题)\n- [2. 区块引用](#2-区块引用)\n- [3. 分割线](#3-分割线)\n- [4. 背景框](#4-背景框)\n</code></pre></li>\n</ul>\n<!-- /TOC -->\n<p>####1. 标题</p>\n<ul>\n<li><p><code>#</code>标题，1–6级别，atx风格，效果：</p>\n<h6 id=\"标题6\"><a href=\"#标题6\" class=\"headerlink\" title=\"标题6\"></a>标题6</h6></li>\n<li><p><code>=</code>或<code>-</code>似乎只有一个级别，setext风格，效果</p>\n<pre><code>标题\n===&lt;font color=&quot;#ff0000&quot;&gt;**csdn不支持**&lt;/font&gt;\n</code></pre></li>\n</ul>\n<h4 id=\"2-区块引用\"><a href=\"#2-区块引用\" class=\"headerlink\" title=\"2. 区块引用\"></a>2. 区块引用</h4><p>   <code>&gt;</code>行首位置,可嵌套，效果：</p>\n<blockquote>\n<p>段落引用块</p>\n<blockquote>\n<p>内部嵌套</p>\n</blockquote>\n</blockquote>\n<p>####3. 分割线<br>分割线用 <code>---</code>、<code>___</code>和<code>***</code>三个加、减、下划线，注意不要和标题的一种形式混淆。效果：</p>\n<hr>\n<p>####4. 背景框<br><figure class=\"highlight plain\"><figcaption><span>```反引号构成背景框。效果，`背景框`</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">####5. 列表</div><div class=\"line\">有无和无序。</div><div class=\"line\"></div><div class=\"line\">- `-`、`+`、`*`符号位于行首，紧跟空格。有序列表只是用数字替代前述符号，数字不要求有序。效果：</div><div class=\"line\">- 无序列</div><div class=\"line\">   6. 有序</div><div class=\"line\">   7. 有序</div><div class=\"line\"></div><div class=\"line\">####6. 代码块</div><div class=\"line\"></div><div class=\"line\">   `使用三对反引号```java  ```从行首起，中间写代码，可在三引号后声明代码语言，实现高亮`，效果：</div><div class=\"line\">```java</div><div class=\"line\">\tpublic void test()&#123;</div><div class=\"line\">\t//注释</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure></p>\n<p>####7. 链接</p>\n<ul>\n<li>行内式，格式<code>[name](url,&quot;title&quot;)</code>，效果：<br>  <a href=\"http://blog.csdn.net/binglumeng/article/details/52668151\" target=\"_blank\" rel=\"external\">Markdown语法</a></li>\n<li>参考式，格式<code>[name][id]</code>，文章他处声明id，<code>[id]:url</code>，效果：<pre><code>[Markdown语法][md]\n</code></pre></li>\n<li>自动链接<code>&lt; &gt;</code>其中直接写网址，或者邮箱，需要有<a href=\"http://同类的，或@符号。效果：\" target=\"_blank\" rel=\"external\">http://同类的，或@符号。效果：</a><br>   <a href=\"https://google.com\" target=\"_blank\" rel=\"external\">https://google.com</a>,<a href=\"&#109;&#97;&#x69;&#108;&#116;&#111;&#x3a;&#109;&#97;&#x72;&#107;&#100;&#x6f;&#x77;&#110;&#64;&#x6d;&#x64;&#x2e;&#99;&#111;&#x6d;\">&#109;&#97;&#x72;&#107;&#100;&#x6f;&#x77;&#110;&#64;&#x6d;&#x64;&#x2e;&#99;&#111;&#x6d;</a></li>\n<li>网址直译，www.google.com， <font color=\"#ff0000\"><strong>csdn不支持</strong></font></li>\n</ul>\n<p>####8. 强调</p>\n<ul>\n<li><p>使用一对<code>**</code>或<code>__</code>表示强调，被强调文本在其中。一对<code>**</code>或<code>__</code>是斜体</p>\n<p>两对是粗体，三对是斜体加粗。效果：<br><em>斜体</em>，<strong>粗体</strong>，<strong><em>粗斜体</em></strong></p>\n</li>\n<li><p>两对<code>~~~~</code>表示删除线，包裹文本。</p>\n<p> 效果：<del>删除</del></p>\n</li>\n<li><p>两对<code>====</code>之间高亮</p>\n<p>效果：==高亮==</p>\n</li>\n<li><p><code>&lt;u&gt;&lt;/u&gt;</code>之间下划线</p>\n<p>效果：<u>下划线</u></p>\n</li>\n</ul>\n<h4 id=\"9-符号\"><a href=\"#9-符号\" class=\"headerlink\" title=\"9.  符号\"></a>9.  符号</h4><p>参照第18条，其实用于数学公式更多。</p>\n<p>   一对<code>$$</code>符号，文本其中可以斜体，两对<code>$$$$</code>文本其中，居中斜体。还会有编号。(刚明白，是数学公式常用。)</p>\n<ul>\n<li>在<code>$$</code>或<code>$$$$</code>之中的文本，其首尾处有<code>~</code>产生空格；</li>\n<li><p>文本首尾有<code>#</code>、<code>{</code>、<code>}</code>、<code>&amp;</code>会出现黑色边框，且包含前述符号。</p>\n<ul>\n<li><code>^</code>、<code>_</code>在文本尾部效果如上，在起始出，则分别表示上下角标。</li>\n<li><p><code>%</code>隐藏%号后面内容。</p>\n<p><code>\\</code>符号可以转义其他符号。自定义的标签<code>&lt;info&gt;</code>之类可能被隐藏。<br>效果：<br> 一对美元符号：$one$<br> 两对美元符号：$$two$$<br> 带边框：$frame_$<br> 上角标：$^up$，下角标$_low$<br> 隐藏：<code>$注意百分号后面%没有了$</code><br> $注意百分号后面%没有了$<br>####10. 图片</p>\n<p>类似链接，行内式和参考式</p>\n</li>\n</ul>\n</li>\n<li><p>行内式，<code>![name](path)</code></p>\n</li>\n<li>参考式，<code>![name][image]</code>，id定义其他地方[image]:image\\path<ul>\n<li>效果：<img src=\"https://assets-cdn.github.com/images/modules/about/about-header.jpg\" alt=\"img\"></li>\n<li><img src=\"http://leanote.com/public/upload/536/56ac79afab64417926004444/images/logo/48c077cb768ce98ce2cacb41a3cc63b2.jpg\" alt=\"githubj\"></li>\n</ul>\n</li>\n</ul>\n<p>####11. 表格</p>\n<pre><code>行首开始，写title，`|`符号表示分栏，减号`-`表示列宽。格式为首行写title，次行写对齐方式。至少形成表头才是表格。两列一行。\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">学号|姓名</div><div class=\"line\">-|</div><div class=\"line\">有的必须每行前后都要有|符号</div></pre></td></tr></table></figure>\n<ul>\n<li><p><code>:---</code>左对齐</p>\n</li>\n<li><p><code>---:</code>右对齐</p>\n</li>\n<li><p><code>:---:</code>居中</p>\n</li>\n<li><p><code>---</code>默认对齐方式，左对齐。</p>\n</li>\n<li><p>效果：第二列只有两个<code>|</code>也能分三栏</p>\n<p>​</p>\n<p>| 学号   | 姓名   | 成绩   |<br>| —- | —- | —- |<br>|      |      |      |</p>\n<p>​</p>\n</li>\n</ul>\n<h4 id=\"12-复选框\"><a href=\"#12-复选框\" class=\"headerlink\" title=\"12. 复选框\"></a>12. 复选框</h4><pre><code>使用列表的符号，加减星，或数字，配合空格、x、和[ ]符号\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">格式为`+或-或*`空格`[空格或x]`空格，列表内容。其中x、X都行。</div></pre></td></tr></table></figure>\n<p>效果：</p>\n<ul>\n<li>[ ] 第一项</li>\n<li>[x] 第二项</li>\n</ul>\n<h4 id=\"13-表情符号\"><a href=\"#13-表情符号\" class=\"headerlink\" title=\"13. 表情符号\"></a>13. 表情符号</h4><pre><code>格式，一对`::`中加emoji英文代码，如:monkey:，[emoji](http://emoji.codes)\n</code></pre><p>:monkey:,:star:,:girl:</p>\n<p>####14. 脚注</p>\n<pre><code>格式`[^id]`符号，文章尾或其他处声明。`[^id]:注解`\n效果：脚注[^footer]\n</code></pre><p>####15. 目录</p>\n<pre><code>格式，`[toc]`符号，效果见文章目录。\n</code></pre><h4 id=\"16-UML类图\"><a href=\"#16-UML类图\" class=\"headerlink\" title=\"16. UML类图\"></a>16. UML类图</h4><pre><code>格式，类似代码块，三反引号`    <figure class=\"highlight plain\"><figcaption><span>```       `声明sequence后，单行写交互语句。</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">​    </div><div class=\"line\">    ​```A-&gt;B:hello//A对B</div><div class=\"line\">    note left of B:what?//B思考,</div><div class=\"line\">    B--&gt;A:ok//B回复A，虚线。</div><div class=\"line\">    ​</div></pre></td></tr></table></figure>\n\n\n效果：\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">A-&gt;B: hello</div><div class=\"line\">Note right of B: what?</div><div class=\"line\">B--&gt;A:ok</div></pre></td></tr></table></figure>\n<h4 id=\"17-流程图：\"><a href=\"#17-流程图：\" class=\"headerlink\" title=\"17.流程图：\"></a>17.流程图：</h4><pre><code>类似UML图，语言标签为`flow`，用`=&gt;`表路线，有对应代码标识。以后在慢慢整理，`先定义标签再使用操作？`\n\n​<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">  ```flow</div><div class=\"line\">  st=&gt;start: 开始</div><div class=\"line\">  e=&gt;end: 结束</div><div class=\"line\">  op=&gt;operation: 我的操作</div><div class=\"line\">  cond=&gt;condition: 确认？</div><div class=\"line\">  st-&gt;op-&gt;<span class=\"function\">cond</span></div><div class=\"line\">  <span class=\"title\">cond</span><span class=\"params\">(yes)</span>-&gt;e</div><div class=\"line\">  <span class=\"title\">cond</span><span class=\"params\">(no)</span>-&gt;op</div><div class=\"line\">​</div></pre></td></tr></table></figure>\n\n​<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">效果：</div><div class=\"line\"></div><div class=\"line\">```flow</div><div class=\"line\">st=&gt;start: 开始</div><div class=\"line\">e=&gt;end: 结束</div><div class=\"line\">op=&gt;operation: 我的操作</div><div class=\"line\">cond=&gt;condition: 确认？</div><div class=\"line\">st-&gt;op-&gt;cond</div><div class=\"line\">cond(yes)-&gt;e</div><div class=\"line\">cond(no)-&gt;op</div></pre></td></tr></table></figure>\n</code></pre><h4 id=\"18-甘特图：\"><a href=\"#18-甘特图：\" class=\"headerlink\" title=\"18. 甘特图：\"></a>18. 甘特图：</h4><pre><code>类似代码块，语言标识`gantt`，有语法，以后慢慢总结。\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">​```gantt</div><div class=\"line\">    title 项目开发流程//标题</div><div class=\"line\">    section 项目确定//项目阶段</div><div class=\"line\">        需求分析       :a1, 2016-06-22, 3d//任务名称，日期线和时长</div><div class=\"line\">        可行性报告     :after a1, 5d</div><div class=\"line\">        概念验证       : 5d</div><div class=\"line\">    section 项目实施</div><div class=\"line\">        概要设计      :2016-07-05  , 5d</div><div class=\"line\">        详细设计      :2016-07-08, 10d</div><div class=\"line\">        编码          :2016-07-15, 10d</div><div class=\"line\">        测试          :2016-07-22, 5d</div><div class=\"line\">    section 发布验收</div><div class=\"line\">        发布: 2d</div><div class=\"line\">        验收: 3d</div><div class=\"line\">​</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">```gantt</div><div class=\"line\">\ttitle 项目开发流程</div><div class=\"line\">        section 项目确定</div><div class=\"line\">            需求分析       :a1, 2016-06-22, 3d</div><div class=\"line\">            可行性报告     :after a1, 5d</div><div class=\"line\">            概念验证       : 5d</div><div class=\"line\">        section 项目实施</div><div class=\"line\">            概要设计      :2016-07-05  , 5d</div><div class=\"line\">            详细设计      :2016-07-08, 10d</div><div class=\"line\">            编码          :2016-07-15, 10d</div><div class=\"line\">            测试          :2016-07-22, 5d</div><div class=\"line\">        section 发布验收</div><div class=\"line\">            发布: 2d</div><div class=\"line\">            验收: 3d</div></pre></td></tr></table></figure>\n<h4 id=\"19-数学公式：\"><a href=\"#19-数学公式：\" class=\"headerlink\" title=\"19. 数学公式：\"></a>19. 数学公式：</h4><pre><code>markdown多使用LaTex数学公式，用`$`和`$$`符号标识\n</code></pre><ul>\n<li>行内公式，<code>$\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$</code></li>\n</ul>\n<p>效果：$\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$</p>\n<ul>\n<li>块级公式，<code>$$x = \\dfrac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$</code></li>\n</ul>\n<p>效果：$$x = \\dfrac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$</p>\n<p><em>附注：本文所列举markdown语法，适合大部分markdown编辑器，仍有个别功能属增强功能，读者请留心。</em><br><strong>注意：各个语法效果之间，需要有空行，避免相互干扰。（有的编辑器会自动给你处理，有的却不会。）</strong></p>\n<p><em>附上较详细的<a href=\"http://blog.csdn.net/binglumeng/article/details/52668151\" target=\"_blank\" rel=\"external\">markdown语法文本</a></em></p>\n","excerpt":"","more":"<h1 id=\"Markdown语法简要\"><a href=\"#Markdown语法简要\" class=\"headerlink\" title=\"Markdown语法简要\"></a>Markdown语法简要</h1><!-- TOC -->\n<ul>\n<li><a href=\"#markdown语法简要\">Markdown语法简要</a><pre><code>- [1. 标题](#1-标题)\n- [2. 区块引用](#2-区块引用)\n- [3. 分割线](#3-分割线)\n- [4. 背景框](#4-背景框)\n</code></pre></li>\n</ul>\n<!-- /TOC -->\n<p>####1. 标题</p>\n<ul>\n<li><p><code>#</code>标题，1–6级别，atx风格，效果：</p>\n<h6 id=\"标题6\"><a href=\"#标题6\" class=\"headerlink\" title=\"标题6\"></a>标题6</h6></li>\n<li><p><code>=</code>或<code>-</code>似乎只有一个级别，setext风格，效果</p>\n<pre><code>标题\n===&lt;font color=&quot;#ff0000&quot;&gt;**csdn不支持**&lt;/font&gt;\n</code></pre></li>\n</ul>\n<h4 id=\"2-区块引用\"><a href=\"#2-区块引用\" class=\"headerlink\" title=\"2. 区块引用\"></a>2. 区块引用</h4><p>   <code>&gt;</code>行首位置,可嵌套，效果：</p>\n<blockquote>\n<p>段落引用块</p>\n<blockquote>\n<p>内部嵌套</p>\n</blockquote>\n</blockquote>\n<p>####3. 分割线<br>分割线用 <code>---</code>、<code>___</code>和<code>***</code>三个加、减、下划线，注意不要和标题的一种形式混淆。效果：</p>\n<hr>\n<p>####4. 背景框<br><figure class=\"highlight plain\"><figcaption><span>```反引号构成背景框。效果，`背景框`</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">####5. 列表</div><div class=\"line\">有无和无序。</div><div class=\"line\"></div><div class=\"line\">- `-`、`+`、`*`符号位于行首，紧跟空格。有序列表只是用数字替代前述符号，数字不要求有序。效果：</div><div class=\"line\">- 无序列</div><div class=\"line\">   6. 有序</div><div class=\"line\">   7. 有序</div><div class=\"line\"></div><div class=\"line\">####6. 代码块</div><div class=\"line\"></div><div class=\"line\">   `使用三对反引号```java  ```从行首起，中间写代码，可在三引号后声明代码语言，实现高亮`，效果：</div><div class=\"line\">```java</div><div class=\"line\">\tpublic void test()&#123;</div><div class=\"line\">\t//注释</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure></p>\n<p>####7. 链接</p>\n<ul>\n<li>行内式，格式<code>[name](url,&quot;title&quot;)</code>，效果：<br>  <a href=\"http://blog.csdn.net/binglumeng/article/details/52668151\">Markdown语法</a></li>\n<li>参考式，格式<code>[name][id]</code>，文章他处声明id，<code>[id]:url</code>，效果：<pre><code>[Markdown语法][md]\n</code></pre></li>\n<li>自动链接<code>&lt; &gt;</code>其中直接写网址，或者邮箱，需要有<a href=\"http://同类的，或@符号。效果：\">http://同类的，或@符号。效果：</a><br>   <a href=\"https://google.com\">https://google.com</a>,<a href=\"&#109;&#97;&#x69;&#108;&#116;&#111;&#x3a;&#109;&#97;&#x72;&#107;&#100;&#x6f;&#x77;&#110;&#64;&#x6d;&#x64;&#x2e;&#99;&#111;&#x6d;\">&#109;&#97;&#x72;&#107;&#100;&#x6f;&#x77;&#110;&#64;&#x6d;&#x64;&#x2e;&#99;&#111;&#x6d;</a></li>\n<li>网址直译，www.google.com， <font color=\"#ff0000\"><strong>csdn不支持</strong></font></li>\n</ul>\n<p>####8. 强调</p>\n<ul>\n<li><p>使用一对<code>**</code>或<code>__</code>表示强调，被强调文本在其中。一对<code>**</code>或<code>__</code>是斜体</p>\n<p>两对是粗体，三对是斜体加粗。效果：<br><em>斜体</em>，<strong>粗体</strong>，<strong><em>粗斜体</em></strong></p>\n</li>\n<li><p>两对<code>~~~~</code>表示删除线，包裹文本。</p>\n<p> 效果：<del>删除</del></p>\n</li>\n<li><p>两对<code>====</code>之间高亮</p>\n<p>效果：==高亮==</p>\n</li>\n<li><p><code>&lt;u&gt;&lt;/u&gt;</code>之间下划线</p>\n<p>效果：<u>下划线</u></p>\n</li>\n</ul>\n<h4 id=\"9-符号\"><a href=\"#9-符号\" class=\"headerlink\" title=\"9.  符号\"></a>9.  符号</h4><p>参照第18条，其实用于数学公式更多。</p>\n<p>   一对<code>$$</code>符号，文本其中可以斜体，两对<code>$$$$</code>文本其中，居中斜体。还会有编号。(刚明白，是数学公式常用。)</p>\n<ul>\n<li>在<code>$$</code>或<code>$$$$</code>之中的文本，其首尾处有<code>~</code>产生空格；</li>\n<li><p>文本首尾有<code>#</code>、<code>{</code>、<code>}</code>、<code>&amp;</code>会出现黑色边框，且包含前述符号。</p>\n<ul>\n<li><code>^</code>、<code>_</code>在文本尾部效果如上，在起始出，则分别表示上下角标。</li>\n<li><p><code>%</code>隐藏%号后面内容。</p>\n<p><code>\\</code>符号可以转义其他符号。自定义的标签<code>&lt;info&gt;</code>之类可能被隐藏。<br>效果：<br> 一对美元符号：$one$<br> 两对美元符号：$$two$$<br> 带边框：$frame_$<br> 上角标：$^up$，下角标$_low$<br> 隐藏：<code>$注意百分号后面%没有了$</code><br> $注意百分号后面%没有了$<br>####10. 图片</p>\n<p>类似链接，行内式和参考式</p>\n</li>\n</ul>\n</li>\n<li><p>行内式，<code>![name](path)</code></p>\n</li>\n<li>参考式，<code>![name][image]</code>，id定义其他地方[image]:image\\path<ul>\n<li>效果：<img src=\"https://assets-cdn.github.com/images/modules/about/about-header.jpg\" alt=\"img\"></li>\n<li><img src=\"http://leanote.com/public/upload/536/56ac79afab64417926004444/images/logo/48c077cb768ce98ce2cacb41a3cc63b2.jpg\" alt=\"githubj\"></li>\n</ul>\n</li>\n</ul>\n<p>####11. 表格</p>\n<pre><code>行首开始，写title，`|`符号表示分栏，减号`-`表示列宽。格式为首行写title，次行写对齐方式。至少形成表头才是表格。两列一行。\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">学号|姓名</div><div class=\"line\">-|</div><div class=\"line\">有的必须每行前后都要有|符号</div></pre></td></tr></table></figure>\n<ul>\n<li><p><code>:---</code>左对齐</p>\n</li>\n<li><p><code>---:</code>右对齐</p>\n</li>\n<li><p><code>:---:</code>居中</p>\n</li>\n<li><p><code>---</code>默认对齐方式，左对齐。</p>\n</li>\n<li><p>效果：第二列只有两个<code>|</code>也能分三栏</p>\n<p>​</p>\n<p>| 学号   | 姓名   | 成绩   |<br>| —- | —- | —- |<br>|      |      |      |</p>\n<p>​</p>\n</li>\n</ul>\n<h4 id=\"12-复选框\"><a href=\"#12-复选框\" class=\"headerlink\" title=\"12. 复选框\"></a>12. 复选框</h4><pre><code>使用列表的符号，加减星，或数字，配合空格、x、和[ ]符号\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">格式为`+或-或*`空格`[空格或x]`空格，列表内容。其中x、X都行。</div></pre></td></tr></table></figure>\n<p>效果：</p>\n<ul>\n<li>[ ] 第一项</li>\n<li>[x] 第二项</li>\n</ul>\n<h4 id=\"13-表情符号\"><a href=\"#13-表情符号\" class=\"headerlink\" title=\"13. 表情符号\"></a>13. 表情符号</h4><pre><code>格式，一对`::`中加emoji英文代码，如:monkey:，[emoji](http://emoji.codes)\n</code></pre><p>:monkey:,:star:,:girl:</p>\n<p>####14. 脚注</p>\n<pre><code>格式`[^id]`符号，文章尾或其他处声明。`[^id]:注解`\n效果：脚注[^footer]\n</code></pre><p>####15. 目录</p>\n<pre><code>格式，`[toc]`符号，效果见文章目录。\n</code></pre><h4 id=\"16-UML类图\"><a href=\"#16-UML类图\" class=\"headerlink\" title=\"16. UML类图\"></a>16. UML类图</h4><pre><code>格式，类似代码块，三反引号`    <figure class=\"highlight plain\"><figcaption><span>```       `声明sequence后，单行写交互语句。</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">​    </div><div class=\"line\">    ​```A-&gt;B:hello//A对B</div><div class=\"line\">    note left of B:what?//B思考,</div><div class=\"line\">    B--&gt;A:ok//B回复A，虚线。</div><div class=\"line\">    ​</div></pre></td></tr></table></figure>\n\n\n效果：\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">A-&gt;B: hello</div><div class=\"line\">Note right of B: what?</div><div class=\"line\">B--&gt;A:ok</div></pre></td></tr></table></figure>\n<h4 id=\"17-流程图：\"><a href=\"#17-流程图：\" class=\"headerlink\" title=\"17.流程图：\"></a>17.流程图：</h4><pre><code>类似UML图，语言标签为`flow`，用`=&gt;`表路线，有对应代码标识。以后在慢慢整理，`先定义标签再使用操作？`\n\n​<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">  ```flow</div><div class=\"line\">  st=&gt;start: 开始</div><div class=\"line\">  e=&gt;end: 结束</div><div class=\"line\">  op=&gt;operation: 我的操作</div><div class=\"line\">  cond=&gt;condition: 确认？</div><div class=\"line\">  st-&gt;op-&gt;<span class=\"function\">cond</span></div><div class=\"line\">  <span class=\"title\">cond</span><span class=\"params\">(yes)</span>-&gt;e</div><div class=\"line\">  <span class=\"title\">cond</span><span class=\"params\">(no)</span>-&gt;op</div><div class=\"line\">​</div></pre></td></tr></table></figure>\n\n​<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">效果：</div><div class=\"line\"></div><div class=\"line\">```flow</div><div class=\"line\">st=&gt;start: 开始</div><div class=\"line\">e=&gt;end: 结束</div><div class=\"line\">op=&gt;operation: 我的操作</div><div class=\"line\">cond=&gt;condition: 确认？</div><div class=\"line\">st-&gt;op-&gt;cond</div><div class=\"line\">cond(yes)-&gt;e</div><div class=\"line\">cond(no)-&gt;op</div></pre></td></tr></table></figure>\n</code></pre><h4 id=\"18-甘特图：\"><a href=\"#18-甘特图：\" class=\"headerlink\" title=\"18. 甘特图：\"></a>18. 甘特图：</h4><pre><code>类似代码块，语言标识`gantt`，有语法，以后慢慢总结。\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">​```gantt</div><div class=\"line\">    title 项目开发流程//标题</div><div class=\"line\">    section 项目确定//项目阶段</div><div class=\"line\">        需求分析       :a1, 2016-06-22, 3d//任务名称，日期线和时长</div><div class=\"line\">        可行性报告     :after a1, 5d</div><div class=\"line\">        概念验证       : 5d</div><div class=\"line\">    section 项目实施</div><div class=\"line\">        概要设计      :2016-07-05  , 5d</div><div class=\"line\">        详细设计      :2016-07-08, 10d</div><div class=\"line\">        编码          :2016-07-15, 10d</div><div class=\"line\">        测试          :2016-07-22, 5d</div><div class=\"line\">    section 发布验收</div><div class=\"line\">        发布: 2d</div><div class=\"line\">        验收: 3d</div><div class=\"line\">​</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">```gantt</div><div class=\"line\">\ttitle 项目开发流程</div><div class=\"line\">        section 项目确定</div><div class=\"line\">            需求分析       :a1, 2016-06-22, 3d</div><div class=\"line\">            可行性报告     :after a1, 5d</div><div class=\"line\">            概念验证       : 5d</div><div class=\"line\">        section 项目实施</div><div class=\"line\">            概要设计      :2016-07-05  , 5d</div><div class=\"line\">            详细设计      :2016-07-08, 10d</div><div class=\"line\">            编码          :2016-07-15, 10d</div><div class=\"line\">            测试          :2016-07-22, 5d</div><div class=\"line\">        section 发布验收</div><div class=\"line\">            发布: 2d</div><div class=\"line\">            验收: 3d</div></pre></td></tr></table></figure>\n<h4 id=\"19-数学公式：\"><a href=\"#19-数学公式：\" class=\"headerlink\" title=\"19. 数学公式：\"></a>19. 数学公式：</h4><pre><code>markdown多使用LaTex数学公式，用`$`和`$$`符号标识\n</code></pre><ul>\n<li>行内公式，<code>$\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$</code></li>\n</ul>\n<p>效果：$\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$</p>\n<ul>\n<li>块级公式，<code>$$x = \\dfrac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$</code></li>\n</ul>\n<p>效果：$$x = \\dfrac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$</p>\n<p><em>附注：本文所列举markdown语法，适合大部分markdown编辑器，仍有个别功能属增强功能，读者请留心。</em><br><strong>注意：各个语法效果之间，需要有空行，避免相互干扰。（有的编辑器会自动给你处理，有的却不会。）</strong></p>\n<p><em>附上较详细的<a href=\"http://blog.csdn.net/binglumeng/article/details/52668151\">markdown语法文本</a></em></p>\n"},{"title":"UML类图笔记","date":"2016-12-30T08:08:00.000Z","_content":"\n# UML類圖簡要語法\n\nUML圖形中，使用最多的應該是UML類圖了，瞭解類圖的使用與結構。**類：**封裝了數據和行爲，具有相同屬性、操作、關係的對象的集合的總稱。\n\n系統分析與設計階段，類分爲：實體類、控制類、邊界類。\n\n- 實體類：對應的是系統需求中的實體對象\n- 控制類：對應系統的執行邏輯和業務操作\n- 邊界類：對應系統的一些對外接口界面等\n\n## 1、類圖\n\n在UML中，類使用類名、屬性和操作放置與綫框内表示。`Employee`類\n\n![employee](http://img.blog.csdn.net/20161230154833148?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmluZ2x1bWVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n```java\npublic class Employee{\n  private String name;\n  private int age;\n  private String email;\n  \n  public void modifyInfo(){\n    ...\n  }\n}\n```\n\n**説明：**類圖中由三部分組成：\n\n- 類名：字符串形式的類名\n- 屬性：類的成員變量`權限  名稱：類型 [ = 默認值]`\n- 方法/函數：類的任意對象的行爲`權限  名稱(參數列表) [ : 返回類型]`\n\n其中權限有三種：public、private、protected，對應的符號是`+`、`-`、`#`\n\n![demo](http://img.blog.csdn.net/20161230154917227?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmluZ2x1bWVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\nJava語言中有内部類，也就出現了第四部分\n\n![container](http://img.blog.csdn.net/20161230154946508?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmluZ2x1bWVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n## 2、類圖之間關係\n\n軟件系統中，類多不是孤立存在的，而存在多重關係\n\n- 關聯\n\n  `實綫鏈接`表示關聯關係，Java中可以理解為，一個類中包含了另外一個類的對象，則兩者為關聯關係。\n\n  ![contains](http://img.blog.csdn.net/20161230155034685?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmluZ2x1bWVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n  ```java\n  public class LoginForm{\n    private JButton loginButton;//定為成員變量\n    ...\n  }\n\n  public class JButton{\n    ...\n  }\n  ```\n\n  - 雙向關聯\n\n    默認情況下，關聯是雙向的，顧客與商品，學生與老師。\n\n    ![shuangxiang](http://img.blog.csdn.net/20161230155104154?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmluZ2x1bWVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n    ```java\n    public class Customer {\n      private Product[] products;\n      ...\n    }\n    public class Product {\n      private Customer customer;\n      ...\n    }\n    ```\n\n  - 單向關聯\n\n    單向關聯則用帶箭頭的實綫表示\n\n  - 自關聯\n\n    包含自身的關聯模式\n\n    ![self](http://img.blog.csdn.net/20161230155221056?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmluZ2x1bWVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n  - 多重關聯\n\n    Multiplicity複雜的關聯關係，用數字對應方式表示\n\n    | 表示方式 | 多重性説明                     |\n    | ---- | ------------------------- |\n    | 1..1 | 另一類的一個對象，衹與該類的一個對象        |\n    | 0..* | 另一類的一個對象，與該類的0個或多個對象有關係   |\n    | 1..* | 另一類的一個對象，與該類的一個或多個對象有關係   |\n    | 0..1 | 另一類的一個對象，沒有或衹與該類的一個對象有關係  |\n    | m..n | 另一類的一個對象，與該類至少m，最多n個對象有關係 |\n\n    示例，一個界面可有多個Button，一個Button衹能屬於一個或者不屬于任何界面。\n\n    ![button](http://img.blog.csdn.net/20161230155342673?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmluZ2x1bWVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n    ```java\n    public class From{\n      private Button[] buttons;//button的集合\n      ...\n    }\n    public class Button{\n      ...\n    }\n    ```\n\n  - 聚合關係\n\n    整體與部分的關係，成員可以不必以來整體存在，使用菱形箭頭實綫\n\n    ![car](http://img.blog.csdn.net/20161230155624683?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmluZ2x1bWVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n    ```java\n    public class Car{\n      private Engine engine;\n      //構造函數\n      public Car(Engine engine){\n        this.engine = engine;\n      }\n      //set\n      public void setEngine(Engine engine){\n        this.engine = engine;\n      }\n      ...\n    }\n\n    public class Engine{\n      ...\n    }\n    ```\n\n  - 組合關係\n\n    表示整體與部分，但是部分不能脫離整體存在，用實心菱形箭頭實綫表示\n\n    ![human](http://img.blog.csdn.net/20161230160009245?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmluZ2x1bWVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n    ```java\n    public class Head{\n      private Mouth mouth;\n      public Head(){\n        mouth = new mouth();//實例化成員類\n      }\n      ...\n    }\n    public class Mouth {\n      ...\n    }\n    ```\n\n- 依賴關係\n\n  使用虛綫表示依賴\n\n  ![driver](http://img.blog.csdn.net/20161230160029354?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmluZ2x1bWVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n  ```java\n  public class Driver {\n    public void drive(Car car){\n      car.move();\n    }\n    ...\n  }\n  public class Car{\n    public void move(){\n      ...\n    }\n    ...\n  }\n  ```\n\n- 汎化關係\n\n  汎化關係也就是繼承關係，使用實綫空心三角箭頭表示\n\n  ![person](http://img.blog.csdn.net/20161230160114202?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmluZ2x1bWVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n  ```java\n  //父类\n  public class Person {\n  protected String name;\n  protected int age;\n\n  public void move() {\n          ……\n  }\n\n      public void say() {\n      ……\n      }\n  }\n\n  //子类\n  public class Student extends Person {\n  private String studentNo;\n\n  public void study() {\n      ……\n      }\n  }\n\n  //子类\n  public class Teacher extends Person {\n  private String teacherNo;\n\n  public void teach() {\n      ……\n      }\n  }\n  ```\n\n- 接口實現\n\n  接口是沒有屬性的抽象方法的集合，實現使用虛綫空心三角箭頭表示，接口左上角有標志。\n\n  ![interface](http://img.blog.csdn.net/20161230160146187?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmluZ2x1bWVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n  ```java\n  public interface Vehicle {\n  public void move();\n  }\n\n  public class Ship implements Vehicle {\n  public void move() {\n      ……\n      }\n  }\n\n  public class Car implements Vehicle {\n  public void move() {\n      ……\n      }\n  }\n  ```\n","source":"_posts/UML类图学习笔记.md","raw":"---\ntitle: UML类图笔记\ndate: 2016-12-30 16:08\ntags: \n    - UML\ncategories:\n    - 编程相关\n---\n\n# UML類圖簡要語法\n\nUML圖形中，使用最多的應該是UML類圖了，瞭解類圖的使用與結構。**類：**封裝了數據和行爲，具有相同屬性、操作、關係的對象的集合的總稱。\n\n系統分析與設計階段，類分爲：實體類、控制類、邊界類。\n\n- 實體類：對應的是系統需求中的實體對象\n- 控制類：對應系統的執行邏輯和業務操作\n- 邊界類：對應系統的一些對外接口界面等\n\n## 1、類圖\n\n在UML中，類使用類名、屬性和操作放置與綫框内表示。`Employee`類\n\n![employee](http://img.blog.csdn.net/20161230154833148?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmluZ2x1bWVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n```java\npublic class Employee{\n  private String name;\n  private int age;\n  private String email;\n  \n  public void modifyInfo(){\n    ...\n  }\n}\n```\n\n**説明：**類圖中由三部分組成：\n\n- 類名：字符串形式的類名\n- 屬性：類的成員變量`權限  名稱：類型 [ = 默認值]`\n- 方法/函數：類的任意對象的行爲`權限  名稱(參數列表) [ : 返回類型]`\n\n其中權限有三種：public、private、protected，對應的符號是`+`、`-`、`#`\n\n![demo](http://img.blog.csdn.net/20161230154917227?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmluZ2x1bWVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\nJava語言中有内部類，也就出現了第四部分\n\n![container](http://img.blog.csdn.net/20161230154946508?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmluZ2x1bWVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n## 2、類圖之間關係\n\n軟件系統中，類多不是孤立存在的，而存在多重關係\n\n- 關聯\n\n  `實綫鏈接`表示關聯關係，Java中可以理解為，一個類中包含了另外一個類的對象，則兩者為關聯關係。\n\n  ![contains](http://img.blog.csdn.net/20161230155034685?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmluZ2x1bWVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n  ```java\n  public class LoginForm{\n    private JButton loginButton;//定為成員變量\n    ...\n  }\n\n  public class JButton{\n    ...\n  }\n  ```\n\n  - 雙向關聯\n\n    默認情況下，關聯是雙向的，顧客與商品，學生與老師。\n\n    ![shuangxiang](http://img.blog.csdn.net/20161230155104154?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmluZ2x1bWVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n    ```java\n    public class Customer {\n      private Product[] products;\n      ...\n    }\n    public class Product {\n      private Customer customer;\n      ...\n    }\n    ```\n\n  - 單向關聯\n\n    單向關聯則用帶箭頭的實綫表示\n\n  - 自關聯\n\n    包含自身的關聯模式\n\n    ![self](http://img.blog.csdn.net/20161230155221056?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmluZ2x1bWVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n  - 多重關聯\n\n    Multiplicity複雜的關聯關係，用數字對應方式表示\n\n    | 表示方式 | 多重性説明                     |\n    | ---- | ------------------------- |\n    | 1..1 | 另一類的一個對象，衹與該類的一個對象        |\n    | 0..* | 另一類的一個對象，與該類的0個或多個對象有關係   |\n    | 1..* | 另一類的一個對象，與該類的一個或多個對象有關係   |\n    | 0..1 | 另一類的一個對象，沒有或衹與該類的一個對象有關係  |\n    | m..n | 另一類的一個對象，與該類至少m，最多n個對象有關係 |\n\n    示例，一個界面可有多個Button，一個Button衹能屬於一個或者不屬于任何界面。\n\n    ![button](http://img.blog.csdn.net/20161230155342673?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmluZ2x1bWVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n    ```java\n    public class From{\n      private Button[] buttons;//button的集合\n      ...\n    }\n    public class Button{\n      ...\n    }\n    ```\n\n  - 聚合關係\n\n    整體與部分的關係，成員可以不必以來整體存在，使用菱形箭頭實綫\n\n    ![car](http://img.blog.csdn.net/20161230155624683?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmluZ2x1bWVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n    ```java\n    public class Car{\n      private Engine engine;\n      //構造函數\n      public Car(Engine engine){\n        this.engine = engine;\n      }\n      //set\n      public void setEngine(Engine engine){\n        this.engine = engine;\n      }\n      ...\n    }\n\n    public class Engine{\n      ...\n    }\n    ```\n\n  - 組合關係\n\n    表示整體與部分，但是部分不能脫離整體存在，用實心菱形箭頭實綫表示\n\n    ![human](http://img.blog.csdn.net/20161230160009245?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmluZ2x1bWVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n    ```java\n    public class Head{\n      private Mouth mouth;\n      public Head(){\n        mouth = new mouth();//實例化成員類\n      }\n      ...\n    }\n    public class Mouth {\n      ...\n    }\n    ```\n\n- 依賴關係\n\n  使用虛綫表示依賴\n\n  ![driver](http://img.blog.csdn.net/20161230160029354?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmluZ2x1bWVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n  ```java\n  public class Driver {\n    public void drive(Car car){\n      car.move();\n    }\n    ...\n  }\n  public class Car{\n    public void move(){\n      ...\n    }\n    ...\n  }\n  ```\n\n- 汎化關係\n\n  汎化關係也就是繼承關係，使用實綫空心三角箭頭表示\n\n  ![person](http://img.blog.csdn.net/20161230160114202?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmluZ2x1bWVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n  ```java\n  //父类\n  public class Person {\n  protected String name;\n  protected int age;\n\n  public void move() {\n          ……\n  }\n\n      public void say() {\n      ……\n      }\n  }\n\n  //子类\n  public class Student extends Person {\n  private String studentNo;\n\n  public void study() {\n      ……\n      }\n  }\n\n  //子类\n  public class Teacher extends Person {\n  private String teacherNo;\n\n  public void teach() {\n      ……\n      }\n  }\n  ```\n\n- 接口實現\n\n  接口是沒有屬性的抽象方法的集合，實現使用虛綫空心三角箭頭表示，接口左上角有標志。\n\n  ![interface](http://img.blog.csdn.net/20161230160146187?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmluZ2x1bWVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n  ```java\n  public interface Vehicle {\n  public void move();\n  }\n\n  public class Ship implements Vehicle {\n  public void move() {\n      ……\n      }\n  }\n\n  public class Car implements Vehicle {\n  public void move() {\n      ……\n      }\n  }\n  ```\n","slug":"UML类图学习笔记","published":1,"updated":"2017-03-31T08:32:41.924Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ndxcdl002d88ow2kbwpb2z","content":"<h1 id=\"UML類圖簡要語法\"><a href=\"#UML類圖簡要語法\" class=\"headerlink\" title=\"UML類圖簡要語法\"></a>UML類圖簡要語法</h1><p>UML圖形中，使用最多的應該是UML類圖了，瞭解類圖的使用與結構。<strong>類：</strong>封裝了數據和行爲，具有相同屬性、操作、關係的對象的集合的總稱。</p>\n<p>系統分析與設計階段，類分爲：實體類、控制類、邊界類。</p>\n<ul>\n<li>實體類：對應的是系統需求中的實體對象</li>\n<li>控制類：對應系統的執行邏輯和業務操作</li>\n<li>邊界類：對應系統的一些對外接口界面等</li>\n</ul>\n<h2 id=\"1、類圖\"><a href=\"#1、類圖\" class=\"headerlink\" title=\"1、類圖\"></a>1、類圖</h2><p>在UML中，類使用類名、屬性和操作放置與綫框内表示。<code>Employee</code>類</p>\n<p><img src=\"http://img.blog.csdn.net/20161230154833148?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmluZ2x1bWVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"employee\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> String name;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</div><div class=\"line\">  <span class=\"keyword\">private</span> String email;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">modifyInfo</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>説明：</strong>類圖中由三部分組成：</p>\n<ul>\n<li>類名：字符串形式的類名</li>\n<li>屬性：類的成員變量<code>權限  名稱：類型 [ = 默認值]</code></li>\n<li>方法/函數：類的任意對象的行爲<code>權限  名稱(參數列表) [ : 返回類型]</code></li>\n</ul>\n<p>其中權限有三種：public、private、protected，對應的符號是<code>+</code>、<code>-</code>、<code>#</code></p>\n<p><img src=\"http://img.blog.csdn.net/20161230154917227?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmluZ2x1bWVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"demo\"></p>\n<p>Java語言中有内部類，也就出現了第四部分</p>\n<p><img src=\"http://img.blog.csdn.net/20161230154946508?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmluZ2x1bWVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"container\"></p>\n<h2 id=\"2、類圖之間關係\"><a href=\"#2、類圖之間關係\" class=\"headerlink\" title=\"2、類圖之間關係\"></a>2、類圖之間關係</h2><p>軟件系統中，類多不是孤立存在的，而存在多重關係</p>\n<ul>\n<li><p>關聯</p>\n<p><code>實綫鏈接</code>表示關聯關係，Java中可以理解為，一個類中包含了另外一個類的對象，則兩者為關聯關係。</p>\n<p><img src=\"http://img.blog.csdn.net/20161230155034685?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmluZ2x1bWVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"contains\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginForm</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> JButton loginButton;<span class=\"comment\">//定為成員變量</span></div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JButton</span></span>&#123;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>雙向關聯</p>\n<p>默認情況下，關聯是雙向的，顧客與商品，學生與老師。</p>\n<p><img src=\"http://img.blog.csdn.net/20161230155104154?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmluZ2x1bWVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"shuangxiang\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Customer</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> Product[] products;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Product</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> Customer customer;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>單向關聯</p>\n<p>單向關聯則用帶箭頭的實綫表示</p>\n</li>\n<li><p>自關聯</p>\n<p>包含自身的關聯模式</p>\n<p><img src=\"http://img.blog.csdn.net/20161230155221056?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmluZ2x1bWVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"self\"></p>\n</li>\n<li><p>多重關聯</p>\n<p>Multiplicity複雜的關聯關係，用數字對應方式表示</p>\n<p>| 表示方式 | 多重性説明                     |<br>| —- | ————————- |<br>| 1..1 | 另一類的一個對象，衹與該類的一個對象        |<br>| 0..<em> | 另一類的一個對象，與該類的0個或多個對象有關係   |<br>| 1..</em> | 另一類的一個對象，與該類的一個或多個對象有關係   |<br>| 0..1 | 另一類的一個對象，沒有或衹與該類的一個對象有關係  |<br>| m..n | 另一類的一個對象，與該類至少m，最多n個對象有關係 |</p>\n<p>示例，一個界面可有多個Button，一個Button衹能屬於一個或者不屬于任何界面。</p>\n<p><img src=\"http://img.blog.csdn.net/20161230155342673?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmluZ2x1bWVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"button\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">From</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> Button[] buttons;<span class=\"comment\">//button的集合</span></div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Button</span></span>&#123;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>聚合關係</p>\n<p>整體與部分的關係，成員可以不必以來整體存在，使用菱形箭頭實綫</p>\n<p><img src=\"http://img.blog.csdn.net/20161230155624683?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmluZ2x1bWVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"car\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> Engine engine;</div><div class=\"line\">  <span class=\"comment\">//構造函數</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Car</span><span class=\"params\">(Engine engine)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.engine = engine;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//set</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setEngine</span><span class=\"params\">(Engine engine)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.engine = engine;</div><div class=\"line\">  &#125;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Engine</span></span>&#123;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>組合關係</p>\n<p>表示整體與部分，但是部分不能脫離整體存在，用實心菱形箭頭實綫表示</p>\n<p><img src=\"http://img.blog.csdn.net/20161230160009245?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmluZ2x1bWVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"human\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Head</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> Mouth mouth;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Head</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    mouth = <span class=\"keyword\">new</span> mouth();<span class=\"comment\">//實例化成員類</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Mouth</span> </span>&#123;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>依賴關係</p>\n<p>使用虛綫表示依賴</p>\n<p><img src=\"http://img.blog.csdn.net/20161230160029354?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmluZ2x1bWVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"driver\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Driver</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drive</span><span class=\"params\">(Car car)</span></span>&#123;</div><div class=\"line\">    car.move();</div><div class=\"line\">  &#125;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span></span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">move</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">  &#125;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>汎化關係</p>\n<p>汎化關係也就是繼承關係，使用實綫空心三角箭頭表示</p>\n<p><img src=\"http://img.blog.csdn.net/20161230160114202?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmluZ2x1bWVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"person\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//父类</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\"><span class=\"keyword\">protected</span> String name;</div><div class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> age;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">move</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        ……</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    ……</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//子类</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\"><span class=\"keyword\">private</span> String studentNo;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">study</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    ……</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//子类</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Teacher</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\"><span class=\"keyword\">private</span> String teacherNo;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">teach</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    ……</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>接口實現</p>\n<p>接口是沒有屬性的抽象方法的集合，實現使用虛綫空心三角箭頭表示，接口左上角有標志。</p>\n<p><img src=\"http://img.blog.csdn.net/20161230160146187?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmluZ2x1bWVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"interface\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Vehicle</span> </span>&#123;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">move</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Ship</span> <span class=\"keyword\">implements</span> <span class=\"title\">Vehicle</span> </span>&#123;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">move</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    ……</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span> <span class=\"keyword\">implements</span> <span class=\"title\">Vehicle</span> </span>&#123;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">move</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    ……</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"UML類圖簡要語法\"><a href=\"#UML類圖簡要語法\" class=\"headerlink\" title=\"UML類圖簡要語法\"></a>UML類圖簡要語法</h1><p>UML圖形中，使用最多的應該是UML類圖了，瞭解類圖的使用與結構。<strong>類：</strong>封裝了數據和行爲，具有相同屬性、操作、關係的對象的集合的總稱。</p>\n<p>系統分析與設計階段，類分爲：實體類、控制類、邊界類。</p>\n<ul>\n<li>實體類：對應的是系統需求中的實體對象</li>\n<li>控制類：對應系統的執行邏輯和業務操作</li>\n<li>邊界類：對應系統的一些對外接口界面等</li>\n</ul>\n<h2 id=\"1、類圖\"><a href=\"#1、類圖\" class=\"headerlink\" title=\"1、類圖\"></a>1、類圖</h2><p>在UML中，類使用類名、屬性和操作放置與綫框内表示。<code>Employee</code>類</p>\n<p><img src=\"http://img.blog.csdn.net/20161230154833148?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmluZ2x1bWVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"employee\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> String name;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</div><div class=\"line\">  <span class=\"keyword\">private</span> String email;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">modifyInfo</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>説明：</strong>類圖中由三部分組成：</p>\n<ul>\n<li>類名：字符串形式的類名</li>\n<li>屬性：類的成員變量<code>權限  名稱：類型 [ = 默認值]</code></li>\n<li>方法/函數：類的任意對象的行爲<code>權限  名稱(參數列表) [ : 返回類型]</code></li>\n</ul>\n<p>其中權限有三種：public、private、protected，對應的符號是<code>+</code>、<code>-</code>、<code>#</code></p>\n<p><img src=\"http://img.blog.csdn.net/20161230154917227?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmluZ2x1bWVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"demo\"></p>\n<p>Java語言中有内部類，也就出現了第四部分</p>\n<p><img src=\"http://img.blog.csdn.net/20161230154946508?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmluZ2x1bWVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"container\"></p>\n<h2 id=\"2、類圖之間關係\"><a href=\"#2、類圖之間關係\" class=\"headerlink\" title=\"2、類圖之間關係\"></a>2、類圖之間關係</h2><p>軟件系統中，類多不是孤立存在的，而存在多重關係</p>\n<ul>\n<li><p>關聯</p>\n<p><code>實綫鏈接</code>表示關聯關係，Java中可以理解為，一個類中包含了另外一個類的對象，則兩者為關聯關係。</p>\n<p><img src=\"http://img.blog.csdn.net/20161230155034685?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmluZ2x1bWVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"contains\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginForm</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> JButton loginButton;<span class=\"comment\">//定為成員變量</span></div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JButton</span></span>&#123;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>雙向關聯</p>\n<p>默認情況下，關聯是雙向的，顧客與商品，學生與老師。</p>\n<p><img src=\"http://img.blog.csdn.net/20161230155104154?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmluZ2x1bWVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"shuangxiang\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Customer</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> Product[] products;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Product</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> Customer customer;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>單向關聯</p>\n<p>單向關聯則用帶箭頭的實綫表示</p>\n</li>\n<li><p>自關聯</p>\n<p>包含自身的關聯模式</p>\n<p><img src=\"http://img.blog.csdn.net/20161230155221056?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmluZ2x1bWVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"self\"></p>\n</li>\n<li><p>多重關聯</p>\n<p>Multiplicity複雜的關聯關係，用數字對應方式表示</p>\n<p>| 表示方式 | 多重性説明                     |<br>| —- | ————————- |<br>| 1..1 | 另一類的一個對象，衹與該類的一個對象        |<br>| 0..<em> | 另一類的一個對象，與該類的0個或多個對象有關係   |<br>| 1..</em> | 另一類的一個對象，與該類的一個或多個對象有關係   |<br>| 0..1 | 另一類的一個對象，沒有或衹與該類的一個對象有關係  |<br>| m..n | 另一類的一個對象，與該類至少m，最多n個對象有關係 |</p>\n<p>示例，一個界面可有多個Button，一個Button衹能屬於一個或者不屬于任何界面。</p>\n<p><img src=\"http://img.blog.csdn.net/20161230155342673?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmluZ2x1bWVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"button\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">From</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> Button[] buttons;<span class=\"comment\">//button的集合</span></div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Button</span></span>&#123;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>聚合關係</p>\n<p>整體與部分的關係，成員可以不必以來整體存在，使用菱形箭頭實綫</p>\n<p><img src=\"http://img.blog.csdn.net/20161230155624683?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmluZ2x1bWVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"car\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> Engine engine;</div><div class=\"line\">  <span class=\"comment\">//構造函數</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Car</span><span class=\"params\">(Engine engine)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.engine = engine;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//set</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setEngine</span><span class=\"params\">(Engine engine)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.engine = engine;</div><div class=\"line\">  &#125;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Engine</span></span>&#123;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>組合關係</p>\n<p>表示整體與部分，但是部分不能脫離整體存在，用實心菱形箭頭實綫表示</p>\n<p><img src=\"http://img.blog.csdn.net/20161230160009245?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmluZ2x1bWVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"human\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Head</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> Mouth mouth;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Head</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    mouth = <span class=\"keyword\">new</span> mouth();<span class=\"comment\">//實例化成員類</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Mouth</span> </span>&#123;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>依賴關係</p>\n<p>使用虛綫表示依賴</p>\n<p><img src=\"http://img.blog.csdn.net/20161230160029354?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmluZ2x1bWVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"driver\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Driver</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drive</span><span class=\"params\">(Car car)</span></span>&#123;</div><div class=\"line\">    car.move();</div><div class=\"line\">  &#125;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span></span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">move</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">  &#125;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>汎化關係</p>\n<p>汎化關係也就是繼承關係，使用實綫空心三角箭頭表示</p>\n<p><img src=\"http://img.blog.csdn.net/20161230160114202?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmluZ2x1bWVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"person\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//父类</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\"><span class=\"keyword\">protected</span> String name;</div><div class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> age;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">move</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        ……</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    ……</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//子类</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\"><span class=\"keyword\">private</span> String studentNo;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">study</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    ……</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//子类</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Teacher</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\"><span class=\"keyword\">private</span> String teacherNo;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">teach</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    ……</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>接口實現</p>\n<p>接口是沒有屬性的抽象方法的集合，實現使用虛綫空心三角箭頭表示，接口左上角有標志。</p>\n<p><img src=\"http://img.blog.csdn.net/20161230160146187?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmluZ2x1bWVuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"interface\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Vehicle</span> </span>&#123;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">move</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Ship</span> <span class=\"keyword\">implements</span> <span class=\"title\">Vehicle</span> </span>&#123;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">move</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    ……</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span> <span class=\"keyword\">implements</span> <span class=\"title\">Vehicle</span> </span>&#123;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">move</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    ……</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"VMtools安装与虚拟机文件共享","date":"2016-08-15T10:02:00.000Z","_content":"\n程序开发工作之余，作为调节思维也是学习技术，决定系统的学习（折腾）一下Linux。首先便是安装一个Linux系统，搭建一个学习Linux的平台环境。笔者算是技术小白，也接触了一些Linux发行版，于是选择了CentOS作为Server实验系统，ubuntu作为desktop系统。闲言少叙，直入主题。\n#### Windows下虚拟机安装linux\n\n>常用的虚拟机有Vmware和virtualbox，虽说virtualbox挺好的，内存占用也小，但是笔者还是选择了vmware，使用个人版，无须注册破解。\n>在vmware中安装centos，或者ubuntu系统。（此处不做详细介绍）\n\n#### 安装vmtools\n\n>新版的vmware虚拟机都会自动安装vmtools功能，基本上安装好linux虚拟机的同时，就可以实现屏幕分辨率的自动调整，主机与虚拟机的文件复制等功能。\n>但是在vmware设置中，开启文件共享后，重启linux系统，并未能在/mnt目录下发现主机共享的文件夹。且/mnt下没有hgfs这个目录。\n>网上很多描述主机与linux虚拟机文件夹共享的说法都未提及这个问题。或许都是因为他们自主安装vmtools，而非有vmware自动安装的缘故吧。\n\n#### 文件夹共享\n\n>在虚拟机设置里，选项中设置好文件夹的共享，然后进入虚拟的linux系统，复制一个网上下载的完整的vmtools for linux 的vmtools.tar.gz包，到linux虚拟机中，然后在linux下解压，运行vm-install.pl，安装完整版的vmtools，一路回车即可完成安装。然后就能在/mnt目录下看到hgfs目录，之前设置的主机共享目录，也会出现在下面。\n\n>补充，有时候不知懂啊怎么的，/mnt/hgfs下面不显示共享的文件夹，网上有说法是cd到/etc/vmware-tools下面，运行sudo vmware-config-tools.pl这个命令，重新配置一下。\n\n* 附上可能会用的软件工具\n* vmtools for Linux版 http://pan.baidu.com/s/1qXFTn8C\n* vmware player Windows版 http://pan.baidu.com/s/1gfBcjmj\n* vmtools for Mac版 http://pan.baidu.com/s/1pKC74UJ\n* windows 的 vmtools：http://pan.baidu.com/s/1boNfw43\n\n","source":"_posts/VMtools安装与虚拟机文件共享.md","raw":"---\ntitle: VMtools安装与虚拟机文件共享\ndate: 2016-08-15 18:02\ntags:\n    - vmtools\n    - 虚拟机\ncategories:\n    - 系统相关\n---\n\n程序开发工作之余，作为调节思维也是学习技术，决定系统的学习（折腾）一下Linux。首先便是安装一个Linux系统，搭建一个学习Linux的平台环境。笔者算是技术小白，也接触了一些Linux发行版，于是选择了CentOS作为Server实验系统，ubuntu作为desktop系统。闲言少叙，直入主题。\n#### Windows下虚拟机安装linux\n\n>常用的虚拟机有Vmware和virtualbox，虽说virtualbox挺好的，内存占用也小，但是笔者还是选择了vmware，使用个人版，无须注册破解。\n>在vmware中安装centos，或者ubuntu系统。（此处不做详细介绍）\n\n#### 安装vmtools\n\n>新版的vmware虚拟机都会自动安装vmtools功能，基本上安装好linux虚拟机的同时，就可以实现屏幕分辨率的自动调整，主机与虚拟机的文件复制等功能。\n>但是在vmware设置中，开启文件共享后，重启linux系统，并未能在/mnt目录下发现主机共享的文件夹。且/mnt下没有hgfs这个目录。\n>网上很多描述主机与linux虚拟机文件夹共享的说法都未提及这个问题。或许都是因为他们自主安装vmtools，而非有vmware自动安装的缘故吧。\n\n#### 文件夹共享\n\n>在虚拟机设置里，选项中设置好文件夹的共享，然后进入虚拟的linux系统，复制一个网上下载的完整的vmtools for linux 的vmtools.tar.gz包，到linux虚拟机中，然后在linux下解压，运行vm-install.pl，安装完整版的vmtools，一路回车即可完成安装。然后就能在/mnt目录下看到hgfs目录，之前设置的主机共享目录，也会出现在下面。\n\n>补充，有时候不知懂啊怎么的，/mnt/hgfs下面不显示共享的文件夹，网上有说法是cd到/etc/vmware-tools下面，运行sudo vmware-config-tools.pl这个命令，重新配置一下。\n\n* 附上可能会用的软件工具\n* vmtools for Linux版 http://pan.baidu.com/s/1qXFTn8C\n* vmware player Windows版 http://pan.baidu.com/s/1gfBcjmj\n* vmtools for Mac版 http://pan.baidu.com/s/1pKC74UJ\n* windows 的 vmtools：http://pan.baidu.com/s/1boNfw43\n\n","slug":"VMtools安装与虚拟机文件共享","published":1,"updated":"2017-03-31T08:00:28.189Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ndxcdn002f88owksuczia2","content":"<p>程序开发工作之余，作为调节思维也是学习技术，决定系统的学习（折腾）一下Linux。首先便是安装一个Linux系统，搭建一个学习Linux的平台环境。笔者算是技术小白，也接触了一些Linux发行版，于是选择了CentOS作为Server实验系统，ubuntu作为desktop系统。闲言少叙，直入主题。</p>\n<h4 id=\"Windows下虚拟机安装linux\"><a href=\"#Windows下虚拟机安装linux\" class=\"headerlink\" title=\"Windows下虚拟机安装linux\"></a>Windows下虚拟机安装linux</h4><blockquote>\n<p>常用的虚拟机有Vmware和virtualbox，虽说virtualbox挺好的，内存占用也小，但是笔者还是选择了vmware，使用个人版，无须注册破解。<br>在vmware中安装centos，或者ubuntu系统。（此处不做详细介绍）</p>\n</blockquote>\n<h4 id=\"安装vmtools\"><a href=\"#安装vmtools\" class=\"headerlink\" title=\"安装vmtools\"></a>安装vmtools</h4><blockquote>\n<p>新版的vmware虚拟机都会自动安装vmtools功能，基本上安装好linux虚拟机的同时，就可以实现屏幕分辨率的自动调整，主机与虚拟机的文件复制等功能。<br>但是在vmware设置中，开启文件共享后，重启linux系统，并未能在/mnt目录下发现主机共享的文件夹。且/mnt下没有hgfs这个目录。<br>网上很多描述主机与linux虚拟机文件夹共享的说法都未提及这个问题。或许都是因为他们自主安装vmtools，而非有vmware自动安装的缘故吧。</p>\n</blockquote>\n<h4 id=\"文件夹共享\"><a href=\"#文件夹共享\" class=\"headerlink\" title=\"文件夹共享\"></a>文件夹共享</h4><blockquote>\n<p>在虚拟机设置里，选项中设置好文件夹的共享，然后进入虚拟的linux系统，复制一个网上下载的完整的vmtools for linux 的vmtools.tar.gz包，到linux虚拟机中，然后在linux下解压，运行vm-install.pl，安装完整版的vmtools，一路回车即可完成安装。然后就能在/mnt目录下看到hgfs目录，之前设置的主机共享目录，也会出现在下面。</p>\n<p>补充，有时候不知懂啊怎么的，/mnt/hgfs下面不显示共享的文件夹，网上有说法是cd到/etc/vmware-tools下面，运行sudo vmware-config-tools.pl这个命令，重新配置一下。</p>\n</blockquote>\n<ul>\n<li>附上可能会用的软件工具</li>\n<li>vmtools for Linux版 <a href=\"http://pan.baidu.com/s/1qXFTn8C\" target=\"_blank\" rel=\"external\">http://pan.baidu.com/s/1qXFTn8C</a></li>\n<li>vmware player Windows版 <a href=\"http://pan.baidu.com/s/1gfBcjmj\" target=\"_blank\" rel=\"external\">http://pan.baidu.com/s/1gfBcjmj</a></li>\n<li>vmtools for Mac版 <a href=\"http://pan.baidu.com/s/1pKC74UJ\" target=\"_blank\" rel=\"external\">http://pan.baidu.com/s/1pKC74UJ</a></li>\n<li>windows 的 vmtools：<a href=\"http://pan.baidu.com/s/1boNfw43\" target=\"_blank\" rel=\"external\">http://pan.baidu.com/s/1boNfw43</a></li>\n</ul>\n","excerpt":"","more":"<p>程序开发工作之余，作为调节思维也是学习技术，决定系统的学习（折腾）一下Linux。首先便是安装一个Linux系统，搭建一个学习Linux的平台环境。笔者算是技术小白，也接触了一些Linux发行版，于是选择了CentOS作为Server实验系统，ubuntu作为desktop系统。闲言少叙，直入主题。</p>\n<h4 id=\"Windows下虚拟机安装linux\"><a href=\"#Windows下虚拟机安装linux\" class=\"headerlink\" title=\"Windows下虚拟机安装linux\"></a>Windows下虚拟机安装linux</h4><blockquote>\n<p>常用的虚拟机有Vmware和virtualbox，虽说virtualbox挺好的，内存占用也小，但是笔者还是选择了vmware，使用个人版，无须注册破解。<br>在vmware中安装centos，或者ubuntu系统。（此处不做详细介绍）</p>\n</blockquote>\n<h4 id=\"安装vmtools\"><a href=\"#安装vmtools\" class=\"headerlink\" title=\"安装vmtools\"></a>安装vmtools</h4><blockquote>\n<p>新版的vmware虚拟机都会自动安装vmtools功能，基本上安装好linux虚拟机的同时，就可以实现屏幕分辨率的自动调整，主机与虚拟机的文件复制等功能。<br>但是在vmware设置中，开启文件共享后，重启linux系统，并未能在/mnt目录下发现主机共享的文件夹。且/mnt下没有hgfs这个目录。<br>网上很多描述主机与linux虚拟机文件夹共享的说法都未提及这个问题。或许都是因为他们自主安装vmtools，而非有vmware自动安装的缘故吧。</p>\n</blockquote>\n<h4 id=\"文件夹共享\"><a href=\"#文件夹共享\" class=\"headerlink\" title=\"文件夹共享\"></a>文件夹共享</h4><blockquote>\n<p>在虚拟机设置里，选项中设置好文件夹的共享，然后进入虚拟的linux系统，复制一个网上下载的完整的vmtools for linux 的vmtools.tar.gz包，到linux虚拟机中，然后在linux下解压，运行vm-install.pl，安装完整版的vmtools，一路回车即可完成安装。然后就能在/mnt目录下看到hgfs目录，之前设置的主机共享目录，也会出现在下面。</p>\n<p>补充，有时候不知懂啊怎么的，/mnt/hgfs下面不显示共享的文件夹，网上有说法是cd到/etc/vmware-tools下面，运行sudo vmware-config-tools.pl这个命令，重新配置一下。</p>\n</blockquote>\n<ul>\n<li>附上可能会用的软件工具</li>\n<li>vmtools for Linux版 <a href=\"http://pan.baidu.com/s/1qXFTn8C\">http://pan.baidu.com/s/1qXFTn8C</a></li>\n<li>vmware player Windows版 <a href=\"http://pan.baidu.com/s/1gfBcjmj\">http://pan.baidu.com/s/1gfBcjmj</a></li>\n<li>vmtools for Mac版 <a href=\"http://pan.baidu.com/s/1pKC74UJ\">http://pan.baidu.com/s/1pKC74UJ</a></li>\n<li>windows 的 vmtools：<a href=\"http://pan.baidu.com/s/1boNfw43\">http://pan.baidu.com/s/1boNfw43</a></li>\n</ul>\n"},{"title":"Hello World","date":"2017-03-27T04:57:00.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2017-03-27 12:57\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2017-03-31T08:50:10.316Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ndxcdp002h88owjpv666gv","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"Shell学习笔记","date":"2016-11-18T11:37:00.000Z","author":"冰路梦","_content":"\n# Shell学习笔记\n\n<!-- TOC -->\n\n- [Shell学习笔记](#shell学习笔记)\n    - [简介：](#简介)\n    - [Shell教程入门](#shell教程入门)\n        - [1、shell脚本](#1shell脚本)\n        - [2、shell脚本实践](#2shell脚本实践)\n    - [Shell变量](#shell变量)\n        - [1、使用变量](#1使用变量)\n        - [2、只读变量](#2只读变量)\n        - [3、删除变量](#3删除变量)\n        - [4、变量类型](#4变量类型)\n        - [5、shell字符串](#5shell字符串)\n        - [6、Shell数组](#6shell数组)\n        - [7、Shell注释](#7shell注释)\n    - [Shell传递参数](#shell传递参数)\n        - [1、实例](#1实例)\n    - [Shell数组](#shell数组)\n    - [Shell运算符](#shell运算符)\n        - [1、算术运算符](#1算术运算符)\n        - [2、关系运算符](#2关系运算符)\n        - [3、布尔运算符](#3布尔运算符)\n        - [4、逻辑运算符](#4逻辑运算符)\n        - [5、字符串运算符](#5字符串运算符)\n        - [6、文件测试运算符](#6文件测试运算符)\n    - [Shell echo命令](#shell-echo命令)\n    - [Shell printf命令](#shell-printf命令)\n    - [Shell text命令](#shell-text命令)\n    - [Shell 流程控制](#shell-流程控制)\n        - [1、if else](#1if-else)\n        - [2、for循环](#2for循环)\n        - [3、while语句](#3while语句)\n        - [4、无限循环](#4无限循环)\n        - [5、until循环](#5until循环)\n        - [6、case](#6case)\n        - [7、跳出循环](#7跳出循环)\n        - [8、esac](#8esac)\n    - [Shell函数](#shell函数)\n    - [Shell 输入/输出重定向](#shell-输入输出重定向)\n        - [1、输出重定向](#1输出重定向)\n        - [2、输入重定向](#2输入重定向)\n        - [3、重定向深入讲解](#3重定向深入讲解)\n        - [4、Here Document](#4here-document)\n        - [5、/dev/null文件](#5devnull文件)\n    - [Shell文件包含](#shell文件包含)\n\n<!-- /TOC -->\n\n## 简介：\n\nShell 是一个用C语言编写的程序，它是用户使用Linux的桥梁。Shell既是一种命令语言，又是一种程序设计语言。\n\nShell 是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的服务。\n\nKen Thompson的sh是第一种Unix Shell，Windows Explorer是一个典型的图形界面Shell。\n\n## Shell教程入门\n\n### 1、shell脚本\n\n> shell脚本`shell script`，是一种为shell而编写的脚本程序。然而通常所说的shell却是指shell脚本，而非shell本身。\n\nLinux系统shell种类众多，常用的有`sh`和`bash`。\n\n### 2、shell脚本实践\n\nshell脚本用`#!/bin/bash`或`#!/bin/sh`之类的方式，制定运行脚本的shell,`#!`是识别符号。\n\n```sh\n#!/bin/sh\necho \"Hello World\"\n```\n\n**运行shell脚本的两种方法：**\n\n- 作为可执行程序\n\n  将shell文本保存为`.sh`格式文件，赋予执行权限\n\n  ```sh\n  chmod + x ./test.sh # 赋予可执行权限\n  ./test.sh #执行脚本，注意此处需要指明当前目录下的test.sh哦，不然会去path路径找的，呵呵。\n  ```\n\n- 作为解释其参数\n\n  直接解释运行,如此就不用写`#!/bin/sh`之类的引用注释了。\n\n  ```sh\n  /bin/sh test.sh\n  # 类似java、php、python脚本\n  /bin/php test.php\n  ```\n\n## Shell变量\n\n变量命名语法，不需要`$`符号，php需要。命名要求：\n\n- 首字母必须字母`a-z或A-Z`\n- 不能空格，可用`_`\n- 不能标点\n- 不能使用`bash`关键字\n\n```sh\n#注意，不同于其他编程语言，等号之间不要有空格。\nyour_variable=\"your,name\"\n```\n\n```shell\n# 使用语句给变量赋值，如下循环显示出/etc目录下的文件名\nfor file in 'ls /etc'\n```\n\n### 1、使用变量\n\n使用已定义变量，只需在变量前加`$`符号即可：\n\n```shell\nyour_variable='yourname'\necho $your_variable\necho $(your_variable)\n```\n\n变量名可以加`{}`来标识变量名的范围，如：\n\n```sh\nfor skill in Ada Coffe Action Java; do\n\techo \"I am good at ${skill}Script\"\ndone\n```\n\n*如果不加`{}`，`skill`就可能被认为`skillScript`而导致变量找不到*\n\n已定义的变量可重新定义：\n\n```sh\nyour_name=\"tom\"\necho $your_name\nyour_name=\"john\"\necho $your_name\n```\n\n### 2、只读变量\n\n使用`readonly`命令将变量只读，则不可再改变，否则报错。\n\n```sh\n#!/bin/bash\nmyUrl=\"http://www.w3cschool.cc\"\nreadonly myUrl\nmyUrl=\"new url\" #此处就会报错，因为变量只读了。\n```\n\n### 3、删除变量\n\n使用`unset`命令删除变量：\n\n```sh\nunset variable_name\n```\n\n==删除变量后不能再用，而`unset`不能删除只读变量==\n\n```sh\n#!/bin/sh\nmyUrl=\"http://www.google.com\"\nunset myUrl\necho $myUrl #此时输出就没接过了，因为变量被删除了。\n```\n\n### 4、变量类型\n\n运行shell时，会同时存在三种变量：\n\n- 局部变量：脚本中定义的变量，仅作用于本shell脚本内。\n- 环境变量：所有程序，包括shell启动程序都能访问的环境变量。\n- shell变量：shell程序的特殊变量。\n\n### 5、shell字符串\n\nshell常用`number`和`string`，其中`string`可以单引号、双引号或者不用引号。但是略有区别：\n\n- 单引号\n\n  ```sh\n  str='string test'\n  ```\n\n  单引号`''`之间的字符原样输出，里面的变量也会失效。其内部不能再有单引号，哪怕转义符号都失效。\n\n- 双引号\n\n  ```shell\n  your_name='your name'\n  str=\"Hello ,world ,\\\"$your_name\\\"! \\n\"\n  ```\n\n  双引号里面可以有变量，可以有转义符号。\n\n- 字符串拼接\n\n  ```sh\n  n1=\"abc\"\n  test=\"hello, \"$n1\" !\"\n  test1=\"hello, ${n1} !\"\n  echo $test $test1\n  ```\n\n- 获取字符串长度\n\n  使用`#`标识变量长度\n\n  ```sh\n  str=\"abcdef\"\n  #输出字符串长度\n  echo ${#str} \n  ```\n\n- 获取子字符串\n\n  ```sh\n  str=\"abcdef\"\n  #下标从左至右，0开始，\n  echo ${str:1:4}\n  ```\n\n- 查找子字符串\n\n  使用\\`符号\n\n  ```sh\n  str=\"hello world nihaome\"\n  #查找字符i或s的位置,反引号\n  echo `expr index \"$str\" is`\n  ```\n\n### 6、Shell数组\n\nbash仅支持一维数组，可利用下标或表达式操作元素。\n\n- 定义数组\n\n  shell中使用`()`表示数组，元素用空格来分割。\n\n  ```sh\n  array=(1 2 3 4 5 6 7)\n  #或者\n  array=(\n  a\n  b\n  c\n  )\n  #也可以单独定义,下标可以不连续，也无范围限制。\n  array[0]=1\n  array[1]=2\n  array[3]=7\n  ```\n\n- 读取数组\n\n  ```sh\n  variable=${array[index]}\n  # @符号代替index表示获取所有元素\n  echo ${variable[@]}\n  ```\n\n- 获取数组长度\n\n  类似字符串的获取\n\n  ```sh\n  #获取元素个数\n  length=${#array_name[@]}\n  #或者*通配符\n  length=${#array_name[*]}\n  #获取数组单个元素的长度\n  length_n=${#array_name[n]}\n  ```\n\n### 7、Shell注释\n\n使用`#`至于行首，表示该行注释，shell无多行注释，只能每行都`#`\n\n```sh\n#-----------------------\n#我是个多行注释\n#但是只能这么写\n#-----------------------\n```\n\n要是多行代码需要注释，可以将定义为函数，加`{}`包裹起来，该函数不被调用，则类似于注释掉。\n\n## Shell传递参数\n\n在执行shell脚本时，可以向脚本传递参数，脚本内获取参数的格式：`$n`，n代表数字编号，为脚本内需要获取的参数的编号。\n\n### 1、实例\n\n示例向脚本传递三个参数，并输出，`$0`为执行文件名：\n\n```shell\n#!/bin/bash\n#传参测试\n\necho \"Shell 传参测试\";\necho \"file name: $0\";\necho \"first variable: $1\";\necho \"second variable: $2\"\necho \"third variable: $3\";\n```\n\n通过赋予权限，或者指定执行，可实现输出：\n\n```shell\n$ chmod +x test.sh\n# $符号在次表示root用户执行，下面是传入1，2，3，三个数到脚本\n$ ./test.sh 1 2 3 \n\n#输出结果：\nShell 传参测试\nfile name: ./test.sh\nfirst variable: 1\nsecond variable 2\nthird variable 3\n```\n\n另有几个特殊字符处理参数：\n\n| 参数处理 | 说明                         |\n| ---- | -------------------------- |\n| $#   | 传递到脚本的参数的个数                |\n| $*   | 以一个单字符串显示所有向脚本传递的参数。       |\n| $$   | 脚本运行的当前进程ID号               |\n| $!   | 后台运行的最后一个进程的ID号            |\n| $@   | 类似$*，使用时许加引号，并在引号中返回每个参数。  |\n| $-   | 显示shell使用的当前选选项，类似`set`命令  |\n| $?   | 显示最后命令的退出状态。0 表示无错误。其他都是错。 |\n\n```sh\n#!/bin/sh\n\necho \"Shell 传递参数实例！\";\necho \"第一个参数为：$1\";\n\necho \"参数个数为：$#\";\necho \"传递的参数作为一个字符串显示：$*\";\n```\n\n执行效果：\n\n```shell\n$ chmod +x test.sh \n$ ./test.sh 1 2 3\nShell 传递参数实例！\n第一个参数为：1\n参数个数为：3\n传递的参数作为一个字符串显示：1 2 3\n```\n\n`$*`与`$@`的异同：\n\n- 都是应用所有参数\n\n- 不同：只有在双引号中体现。假设在脚本运行时写了三个参数 1、2、3，，则 \" * \" 等价于 \"1 2 3\"（传递了一个参数），而 \"@\" 等价于 \"1\" \"2\" \"3\"（传递了三个参数）。\n\n  ```sh\n  #!/bin/bash\n\n  echo \"-- \\$* demo ---\"\n  for i in \"$*\";do\n  \techo $i\n  done\n\n  echo \"-- \\$@ demo ---\"\n  for i in \"$@\"; do\n  \techo $i\n  done\n  ```\n\n  执行效果：\n\n  ```shell\n  $ chmod +x test.sh \n  $ ./test.sh 1 2 3\n  -- $* 演示 ---\n  1 2 3\n  -- $@ 演示 ---\n  1\n  2\n  3\n  ```\n\n## Shell数组\n\nBash shell仅支持一维数组，不限定大小，初始化时候不需要指定大小。下标0开始，`()`包裹，空格分割元素。\n\n```shell\narray=(a b c d)\n```\n\n- 读取数组\n\n  格式`${array[index]}`\n\n```shell\n#!/bin/bash\nmy_array=(a b \"c\" d)\n\necho \"first: ${my_array[0]}\"\n\n#然后执行文件，获得输出结果\n#可用@或*来代替index获取所有元素\n```\n\n- 数组长度\n\n  类似字符串的长度获取\n\n  ```shell\n  ${#array[index]}\n  ```\n\n## Shell运算符\n\nshell支持多种运算符：\n\n- 算数运算符\n- 关系运算符\n- 布尔运算符\n- 字符串运算符\n- 文件测试运算符\n\n原生Bash不支持简单的数学运算，可以用`awk`和`expr`实现。\n\n```sh\n#!/bin/sh\n\nval=`expr 2 + 2`\necho $val\n\n#注意，expr用反引号，表达式和运算符之间必须有空格，2+2就不行。\n```\n\n### 1、算术运算符\n\n若a = 10，b = 20\n\n| 运算符  | 说明               | 举例                             |\n| ---- | ---------------- | ------------------------------ |\n| +    | 加号               | \\`expr \\$a + \\$b\\`，result = 30 |\n| -    | 减号               | \\`expr \\$a - \\$b`，result = -10 |\n| *    | 乘号               | \\`expr \\$a * \\$b`，result = 200 |\n| /    | 除号               | \\`expr \\$b / \\$a`，result = 2   |\n| %    | 取余               | \\`expr \\$b % \\$a`，result=0     |\n| =    | 赋值               | a=$b，将b的值赋给a                   |\n| ==   | 相等，比较数字，同则true。  | [\\$a == \\$b]返回false            |\n| !=   | 不等，比较数字，不同的true。 | [\\$a != \\$b]返回true。            |\n\n```shell\n#!/bin/bash\n# author:菜鸟教程\n# url:www.runoob.com\n\na=10\nb=20\n\nval=`expr $a + $b`\necho \"a + b : $val\"\n\nval=`expr $a - $b`\necho \"a - b : $val\"\n\nval=`expr $a \\* $b`\necho \"a * b : $val\"\n\nval=`expr $b / $a`\necho \"b / a : $val\"\n\nval=`expr $b % $a`\necho \"b % a : $val\"\n\nif [ $a == $b ]\nthen\n   echo \"a 等于 b\"\nfi\nif [ $a != $b ]\nthen\n   echo \"a 不等于 b\"\nfi\n```\n\n执行结果：\n\n```shell\na + b : 30\na - b : -10\na * b : 200\nb / a : 2\nb % a : 0\na 不等于 b\n```\n\n\n\n**注意：**条件表达式必须在`[]`之间，且必须有空格，如**[\\$a==\\$b]**是错的！\n\n> `*`乘号需要在`expr`表达式内用`\\`转义\n>\n> Mac电脑的shell的`expr`表达式：**$((表达式))**所以它的乘号`*`不用转义\n\n### 2、关系运算符\n\n布尔类型，关系运算符仅支持数字，除非字符串的值也是数字。示例，若a = 10 ,b = 20:\n\n| 运算符  | 说明          |\n| ---- | ----------- |\n| -eq  | equal       |\n| -ne  | not equal   |\n| -gt  | great than  |\n| -lt  | less than   |\n| -ge  | great equal |\n| -le  | less equal  |\n\n### 3、布尔运算符\n\n| 运算符  | 说明                        |\n| ---- | ------------------------- |\n| !    | `非`运算，表达式为true，则返回false。  |\n| -o   | `或`运算，一个表达式为true，则返回true。 |\n| -a   | `与`运算，两个都true，才返回true。    |\n\n### 4、逻辑运算符\n\n| 运算符  | 说明    |\n| ---- | ----- |\n| &&   | 逻辑and |\n| \\|\\| | 逻辑 or |\n\n### 5、字符串运算符\n\n| 运算符  | 说明                     |\n| ---- | ---------------------- |\n| =    | 检测两字符串是否相等             |\n| !=   | 检测两字符串是否不等             |\n| -z   | zero检测字符串长度是否为0，0则true |\n| -n   | not zero检测字符串长度是否非0。   |\n| str  | 检测字符串是否为空，不空则true。     |\n\n### 6、文件测试运算符\n\n用于检测类unix 文件的各种属性\n\n| 操作符     | 说明                           |\n| ------- | ---------------------------- |\n| -b file | 是否是块设备文件，是则true              |\n| -c file | 是否是字符设备文件，是则true             |\n| -d file | 是否是目录，是则true                 |\n| -f file | 是否是普通文件(既非目录，亦非设备文件)，若是则true |\n| -g file | 是否设置了SGID位，是则true            |\n| -k file | 是否设置粘着位，是则true               |\n| -p file | 是否有名管道，是则true                |\n| -u file | 是否设置SUID，是则true              |\n| -r file | 是否可读，是则true                  |\n| -w file | 是否可写，是则true                  |\n| -x file | 是否可执行，是则true                 |\n| -s file | 是否为空或大小是否大于0，非空则true         |\n| -e file | 是否存在，是则true                  |\n\n==注意shell脚本的表达式都要在`[]`内哦==\n\n## Shell echo命令\n\n类似于php的echo，shell的echo用于输出字符串，格式`echo string`\n\n- 显示普通字符串\n\n```shell\necho \"Hello World\"\n#可以不带引号\necho Hello World\n```\n\n- 显示转义字符\n\n  ```sh\n  echo \"\\\"It is a test\\\"\"\n  #输出结果\n  \"It is a test\"\n  ```\n\n- 显示变量\n\n  `read`命令从标准输入中读取一行，并把输入行的每个字段指定给shell变量\n\n  ```shell\n  #!/bin/sh\n  read name\n  echo \"$name It is a test\"\n\n  #运行效果：\n  [root@www ~]# sh test.sh\n  OK                     #标准输入\n  OK It is a test        #输出\n  ```\n\n- 显示换行\n\n  ```shell\n  echo -e \"Ok ! \\n\" # -e 开启转义\n  echo \"It is a test\"\n  #输出结果：注意ok后面有换行\n  OK!\n\n  It it a tes\n  ```\n\n- 显示不换行\n\n  ```sh\n  #!/bin/sh\n  echo -e \"OK! \\c\" # -e 开启转义 \\c 不换行\n  echo \"It is a test\"\n  #结果：\n  OK! It is a test\n  ```\n\n- 显示结果定向至文件\n\n  ```shell\n  echo \"It is a test\" > test.txt\n  ```\n\n- 原样输出字符，不转义不取变量，需要结合单引号\n\n  ```sh\n  echo '$name\\\"'\n  #输出结果\n  $name\\\"\n  ```\n\n- 显示命令执行结果\n\n  ==命令用``  ` ``来包裹==\n\n  ```sh\n  echo `data`\n  #结果：\n  Thu Jul 24 10:08:46 CST 2014\n  ```\n\n## Shell printf命令\n\n类似C语言的printf()函数，shell使用printf会比echo更具有跨平台移植性。可以类似C的printf()函数使用一些复杂的表达式，printf不支持自动换行，需要借助`\\n`\n\n```shell\nprintf format-string [args...]\n```\n\n示例，模拟shell输出，\n\n```sh\n$ echo \"hello ,shell\"\nhello ,shell\n$ printf \"hello ,shell \\n\"\nhello ,shell\n$\n```\n\n脚本化的printf命令使用：\n\n```sh\n#!/bin/bash\n# author:菜鸟教程\n# url:www.runoob.com\n \nprintf \"%-10s %-8s %-4s\\n\" 姓名 性别 体重kg  \nprintf \"%-10s %-8s %-4.2f\\n\" 郭靖 男 66.1234 \nprintf \"%-10s %-8s %-4.2f\\n\" 杨过 男 48.6543 \nprintf \"%-10s %-8s %-4.2f\\n\" 郭芙 女 47.9876 \n```\n\n执行脚本，显示结果：\n\n```\n姓名     性别   体重kg\n郭靖     男      66.12\n杨过     男      48.65\n郭芙     女      47.99\n```\n\n`%s,%c,%d,%f`都是格式替换符，`%-10s`指一个宽度为10个字符（-表示左对齐，没有则右对齐），任何字符都会被显示在10个字符宽的字符内，如果不足则自动以空格填充，超过也会将内容全部显示出来。\n\n%-4.2f 指格式化为小数，其中.2指保留2位小数。\n\n```sh\n#!/bin/bash\n# author:菜鸟教程\n# url:www.runoob.com\n \n# format-string为双引号\nprintf \"%d %s\\n\" 1 \"abc\"\n\n# 单引号与双引号效果一样 \nprintf '%d %s\\n' 1 \"abc\" \n\n# 没有引号也可以输出\nprintf %s abcdef\n\n# 格式只指定了一个参数，但多出的参数仍然会按照该格式输出，format-string 被重用\nprintf %s abc def\n\nprintf \"%s\\n\" abc def\n\nprintf \"%s %s %s\\n\" a b c d e f g h i j\n\n# 如果没有 arguments，那么 %s 用NULL代替，%d 用 0 代替\nprintf \"%s and %d \\n\"\n```\n\n**Printf的转移序列**\n\n| 序列               | 说明                                       |\n| ---------------- | ---------------------------------------- |\n| \\a               | 警告字符，通常为ASCII的BEL字符                      |\n| \\b               | 后退                                       |\n| \\c               | 抑制不显示输出结果中任何姐wide换行字符（只在%b格式指示控制符下的参数字符串中有效），而且任何留在参数里的字符，任何接下来的采纳书以及任何留在格式字符串中的字符，都被忽略。 |\n| \\f               | 换页                                       |\n| \\n               | 换行                                       |\n| \\r               | 回车                                       |\n| \\t               | 水平tab                                    |\n| \\v               | 竖直tab                                    |\n| \\\\\\              | 转义后输出一个\\符号                               |\n| \\d     dd        | 表示1--3位的八进制字符，仅在格式字符串中有效。                |\n| \\0     dd      d | 表示1--3位的八进制字符                            |\n\n## Shell text命令\n\nshell中test命令用于测试条件是否成立，可进行数字、字符和文件的条件测试\n\n```sh\n#!/bin/bash\n\n#用之前的各种运算符，测试test\nnum1=100\nnum2=200\nif test $[num1] -eq $[num2]\nthen\n\techo 'true'\nelse\n\techo 'false'\nfi\n```\n\n## Shell 流程控制\n\n区别于其他编程语言，shell的流程控制不可为空，如\n\n```java\nif(a>b){\n  System.out.println(\"ok\");\n}else{\n  //此处不做任何事\n}\n```\n\n但是在shell中不能出现不做任何事的分支语句\n\n### 1、if else\n\n- if语句格式\n\n  ```sh\n  if condition\n  then\n  \tcommand1\n  \tcommand2\n  \t...\n  fi # 是if的倒写\n  ```\n\n  每个句子可以用`;`分号结束，可以写在一行好几个语句。\n\n- if else\n\n  ```sh\n  if condition\n  then\n  \tcommand1\n  \tcommand2\n  \t...\n  else\n  \tcommand\n  fi\n  ```\n\n- if else-if else\n\n  ```sh\n  if condition1\n  then\n  \tcommand1\n  elif condition2 #类似python中，else if是写作elif\n  then\n  \tcommand2\n  else\n  \tcommand\n  fi\n  ```\n\n### 2、for循环\n\nshell的for循环格式：\n\n```sh\nfor var in item1 item2 ... itemN\ndo\n\tcommand1\n\tcommand2\n\t...\n\t\ndone #for循环结束的标识\n#写成一行\nfor var in item1 item2 ... itemN;do command1; command2;...;done;\n```\n\n### 3、while语句\n\n格式：\n\n```sh\nwhile condition\ndo\n\tcommand\ndone\n#示例\n\n#!/bin/sh\nint=1\nwhile(( $int<=5 ))\ndo\n        echo $int\n        let \"int++\" # let是个关键命令\ndone\n```\n\n可以结合`read`命令接收输入信息\n\n### 4、无限循环\n\n```sh\nwhile :\ndo\n\tcommand\ndone\n\n#或者\nwhile true\ndo\n\tcommand\ndone\n\n#或者\nfor (( ; ; ))\n```\n\n### 5、until循环\n\nshell所有的`until`循环类似于一个特殊的for循环，知道满足条件时候才停止。一般还是`while`\n\n```sh\nuntil condition\ndo\n\tcommand\ndone\n```\n\n**条件可为任意测试条件，测试发生在循环末尾，因此循环至少执行一次—请注意这一点。**\n\n### 6、case\n\n类似其他语言的switch...case语句\n\n```sh\ncase value in\nmode1)\n\tcommand1\n\t...\n\t;; #case的结束标志\nmode2)\n\tcommand2\n\t...\n\t;;\nesac #case的反写\n```\n\nvalue只会匹配一个case，或者不匹配，则mode可用*号通配\n\n```sh\necho '输入 1 到 4 之间的数字:'\necho '你输入的数字为:'\nread aNum\ncase $aNum in\n    1)  echo '你选择了 1'\n    ;;\n    2)  echo '你选择了 2'\n    ;;\n    3)  echo '你选择了 3'\n    ;;\n    4)  echo '你选择了 4'\n    ;;\n    *)  echo '你没有输入 1 到 4 之间的数字'\n    ;;\nesac\n```\n\n### 7、跳出循环\n\nshell也使用`break`和`continue`来跳出循环。\n\n- break\n\n  跳出所有循环，终止后面的执行。\n\n  ```sh\n  #!/bin/bash\n  while :\n  do\n      echo -n \"输入 1 到 5 之间的数字:\"\n      read aNum\n      case $aNum in\n          1|2|3|4|5) echo \"你输入的数字为 $aNum!\"\n          ;;\n          *) echo \"你输入的数字不是 1 到 5 之间的! 游戏结束\"\n              break\n          ;;\n      esac\n  done\n  ```\n\n- continue\n\n  跳出本次循环，执行下一轮循环\n\n  ```sh\n  #!/bin/bash\n  while :\n  do\n      echo -n \"输入 1 到 5 之间的数字: \"\n      read aNum\n      case $aNum in\n          1|2|3|4|5) echo \"你输入的数字为 $aNum!\"\n          ;;\n          *) echo \"你输入的数字不是 1 到 5 之间的!\"\n              continue\n              echo \"游戏结束\"\n          ;;\n      esac\n  done\n  ```\n\n### 8、esac\n\ncase语句区别于C语言，用esac作为结束标志，`)`和`;;`标识每个case。\n\n\n\n## Shell函数\n\nshell可以自定义函数，然后自己调用。函数格式：\n\n```sh\n#function 关键字为可选项，参数也是可选\n[ function ] funname [()]\n\n{\n  \n  action;\n  \n  [return int;]\n  \n}\n```\n\n**说明：**\n\n1. 可以带function fun()定义，也可以fun()定义，不带参数。\n2. 参数返回，可以显示加: return 返回，若不加，则返回最后一条指令结果。\n\n```shell\n#!/bin/bash\n# author:菜鸟教程\n# url:www.runoob.com\n\ndemoFun(){\n    echo \"这是我的第一个 shell 函数!\"\n}\necho \"-----函数开始执行-----\"\ndemoFun\necho \"-----函数执行完毕-----\"\n```\n\n含有返回值的函数：\n\n```sh\n#!/bin/bash\n# author:菜鸟教程\n# url:www.runoob.com\n\nfunWithReturn(){\n    echo \"这个函数会对输入的两个数字进行相加运算...\"\n    echo \"输入第一个数字: \"\n    read aNum\n    echo \"输入第二个数字: \"\n    read anotherNum\n    echo \"两个数字分别为 $aNum 和 $anotherNum !\"\n    return $(($aNum+$anotherNum))\n}\nfunWithReturn\necho \"输入的两个数字之和为 $? !\"\n```\n\n==调用函数返回值，用`$?`符号==，函数必须在被调用前定义。\n\n- 函数参数\n\n  在Shell中，调用函数时可以向其传递参数。在函数体内部，通过 $n 的形式来获取参数的值，例如，$1表示第一个参数，$2表示第二个参数...\n\n  ```sh\n  #!/bin/bash\n  # author:菜鸟教程\n  # url:www.runoob.com\n\n  funWithParam(){\n      echo \"第一个参数为 $1 !\"\n      echo \"第二个参数为 $2 !\"\n      echo \"第十个参数为 $10 !\"\n      echo \"第十个参数为 ${10} !\"\n      echo \"第十一个参数为 ${11} !\"\n      echo \"参数总数有 $# 个!\"\n      echo \"作为一个字符串输出所有参数 $* !\"\n  }\n  funWithParam 1 2 3 4 5 6 7 8 9 34 73\n  #输出结果：\n  第一个参数为 1 !\n  第二个参数为 2 !\n  第十个参数为 10 !\n  第十个参数为 34 !\n  第十一个参数为 73 !\n  参数总数有 11 个!\n  作为一个字符串输出所有参数 1 2 3 4 5 6 7 8 9 34 73 !\n  ```\n\n  **注意：**\\$10不能获取第10个参数，因为当n>=10时候，要用\\$(n)来获取参数。\n\n## Shell 输入/输出重定向\n\n类Uinx系统中，默认标准输入输出设备就是shell终端。重定向命令列表：\n\n| 命令              | 说明                       |\n| --------------- | ------------------------ |\n| command > file  | 输出重定向到file               |\n| command < file  | 输出重定向到file               |\n| command >> file | 输出追加到file                |\n| n > file        | 文件描述符为n的文件重定向到file       |\n| n >> file       | 文件描述符为n的文件追加到file        |\n| n >& m          | 输出文件m和n合并                |\n| n <& m          | 输入文件m和n合并                |\n| << tag          | 开始标记tag和结束标记tag之间的内容作为输入 |\n\n> **注意：**需要注意的是文件描述符 0 通常是标准输入（STDIN），1 是标准输出（STDOUT），2 是标准错误输出（STDERR）。\n\n### 1、输出重定向\n\n```sh\ncommand1 > file1\n```\n\n若file1存在，则被替代。可以用`>>`追加符号，则不替代。\n\n### 2、输入重定向\n\n```sh\ncommand1 < file1\n```\n\n```\ncommand1 < infile > outfile\n```\n\n同时替换输入和输出，执行command1，从文件infile读取内容，然后将输出写入到outfile中。\n\n### 3、重定向深入讲解\n\n一般类unix系统命令运行会同时打开三个文件：\n\n- 标准输入文件(stdin)：stdin的文件描述符为0，Unix程序默认从stdin读取数据。\n- 标准输出文件(stdout)：stdout 的文件描述符为1，Unix程序默认向stdout输出数据。\n- 标准错误文件(stderr)：stderr的文件描述符为2，Unix程序会向stderr流中写入错误信息\n\n默认情况下，command > file 将 stdout 重定向到 file，command < file 将stdin 重定向到 file。\n\n如果希望 stderr 重定向到 file，可以这样写：\n\n```sh\n#模拟终端\n$ command 2 > file\n```\n\n若要追加`>>`符号，其中2代表标准错误文件的代号。\n\n如果希望将stdout和stderr合并后重定向到file\n\n```sh\ncommand > file 2>&1\n#或者\ncommand >> file 2>&1\n#如果输入、输出都重定向\ncommand <file1 >file2\n```\n\n### 4、Here Document\n\nHere Document是shell的一种特殊重定向方式，用于将输入重定向到一个交互式shell脚本或程序：\n\n```sh\ncommand << delimiter\n\tdocument\ndelimiter\n```\n\n作用将delimiter之间的document作为输入传递给command\n\n**注意：**结尾的`delimiter`前后不得有任何符号，包括tab和空格。\n\n```sh\nwc -l << EOF\n\tnihao\n\tzhendehenhao\n\tshime\n\tok\nEOF \n#输出结果，获得的EOF之间的内容的行数。\n4\n```\n\n### 5、/dev/null文件\n\n若希望执行命令不在屏幕输出，可重定向到/dev/null\n\n```sh\ncommand > /dev/null\n```\n\n`/dev/null`为特殊文件，写入的内容立即不见，不可读出。\n\n如果屏蔽stdout和stderr\n\n```sh\ncommand > /dev/null 2>&1\n```\n\n## Shell文件包含\n\nshell也可以使用外部脚本，便于封装：\n\n```sh\n. filename #注意点号(.)与文件名之间有空格\n或\nsource filename\n```\n\n示例：test1.sh\n\n```sh\n#!/bin/bash\n# author:菜鸟教程\n# url:www.runoob.com\n\nurl=\"http://www.runoob.com\"\n```\n\ntest2.sh\n\n```sh\n#!/bin/bash\n# author:菜鸟教程\n# url:www.runoob.com\n\n#使用 . 号来引用test1.sh 文件\n. ./test1.sh\n\n# 或者使用以下包含文件代码\n# source ./test1.sh\n\necho \"菜鸟教程官网地址：$url\"\n```\n\n执行时候test2.sh只需要test2.sh有执行权限即可，test1.sh不一定需要。","source":"_posts/Shell学习笔记.md","raw":"---\ntitle: \"Shell学习笔记\"\ndate: 2016-11-18 19:37\nauthor: 冰路梦\ntag:\n    - Linux\ncategories:\n    - Linux\n---\n\n# Shell学习笔记\n\n<!-- TOC -->\n\n- [Shell学习笔记](#shell学习笔记)\n    - [简介：](#简介)\n    - [Shell教程入门](#shell教程入门)\n        - [1、shell脚本](#1shell脚本)\n        - [2、shell脚本实践](#2shell脚本实践)\n    - [Shell变量](#shell变量)\n        - [1、使用变量](#1使用变量)\n        - [2、只读变量](#2只读变量)\n        - [3、删除变量](#3删除变量)\n        - [4、变量类型](#4变量类型)\n        - [5、shell字符串](#5shell字符串)\n        - [6、Shell数组](#6shell数组)\n        - [7、Shell注释](#7shell注释)\n    - [Shell传递参数](#shell传递参数)\n        - [1、实例](#1实例)\n    - [Shell数组](#shell数组)\n    - [Shell运算符](#shell运算符)\n        - [1、算术运算符](#1算术运算符)\n        - [2、关系运算符](#2关系运算符)\n        - [3、布尔运算符](#3布尔运算符)\n        - [4、逻辑运算符](#4逻辑运算符)\n        - [5、字符串运算符](#5字符串运算符)\n        - [6、文件测试运算符](#6文件测试运算符)\n    - [Shell echo命令](#shell-echo命令)\n    - [Shell printf命令](#shell-printf命令)\n    - [Shell text命令](#shell-text命令)\n    - [Shell 流程控制](#shell-流程控制)\n        - [1、if else](#1if-else)\n        - [2、for循环](#2for循环)\n        - [3、while语句](#3while语句)\n        - [4、无限循环](#4无限循环)\n        - [5、until循环](#5until循环)\n        - [6、case](#6case)\n        - [7、跳出循环](#7跳出循环)\n        - [8、esac](#8esac)\n    - [Shell函数](#shell函数)\n    - [Shell 输入/输出重定向](#shell-输入输出重定向)\n        - [1、输出重定向](#1输出重定向)\n        - [2、输入重定向](#2输入重定向)\n        - [3、重定向深入讲解](#3重定向深入讲解)\n        - [4、Here Document](#4here-document)\n        - [5、/dev/null文件](#5devnull文件)\n    - [Shell文件包含](#shell文件包含)\n\n<!-- /TOC -->\n\n## 简介：\n\nShell 是一个用C语言编写的程序，它是用户使用Linux的桥梁。Shell既是一种命令语言，又是一种程序设计语言。\n\nShell 是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的服务。\n\nKen Thompson的sh是第一种Unix Shell，Windows Explorer是一个典型的图形界面Shell。\n\n## Shell教程入门\n\n### 1、shell脚本\n\n> shell脚本`shell script`，是一种为shell而编写的脚本程序。然而通常所说的shell却是指shell脚本，而非shell本身。\n\nLinux系统shell种类众多，常用的有`sh`和`bash`。\n\n### 2、shell脚本实践\n\nshell脚本用`#!/bin/bash`或`#!/bin/sh`之类的方式，制定运行脚本的shell,`#!`是识别符号。\n\n```sh\n#!/bin/sh\necho \"Hello World\"\n```\n\n**运行shell脚本的两种方法：**\n\n- 作为可执行程序\n\n  将shell文本保存为`.sh`格式文件，赋予执行权限\n\n  ```sh\n  chmod + x ./test.sh # 赋予可执行权限\n  ./test.sh #执行脚本，注意此处需要指明当前目录下的test.sh哦，不然会去path路径找的，呵呵。\n  ```\n\n- 作为解释其参数\n\n  直接解释运行,如此就不用写`#!/bin/sh`之类的引用注释了。\n\n  ```sh\n  /bin/sh test.sh\n  # 类似java、php、python脚本\n  /bin/php test.php\n  ```\n\n## Shell变量\n\n变量命名语法，不需要`$`符号，php需要。命名要求：\n\n- 首字母必须字母`a-z或A-Z`\n- 不能空格，可用`_`\n- 不能标点\n- 不能使用`bash`关键字\n\n```sh\n#注意，不同于其他编程语言，等号之间不要有空格。\nyour_variable=\"your,name\"\n```\n\n```shell\n# 使用语句给变量赋值，如下循环显示出/etc目录下的文件名\nfor file in 'ls /etc'\n```\n\n### 1、使用变量\n\n使用已定义变量，只需在变量前加`$`符号即可：\n\n```shell\nyour_variable='yourname'\necho $your_variable\necho $(your_variable)\n```\n\n变量名可以加`{}`来标识变量名的范围，如：\n\n```sh\nfor skill in Ada Coffe Action Java; do\n\techo \"I am good at ${skill}Script\"\ndone\n```\n\n*如果不加`{}`，`skill`就可能被认为`skillScript`而导致变量找不到*\n\n已定义的变量可重新定义：\n\n```sh\nyour_name=\"tom\"\necho $your_name\nyour_name=\"john\"\necho $your_name\n```\n\n### 2、只读变量\n\n使用`readonly`命令将变量只读，则不可再改变，否则报错。\n\n```sh\n#!/bin/bash\nmyUrl=\"http://www.w3cschool.cc\"\nreadonly myUrl\nmyUrl=\"new url\" #此处就会报错，因为变量只读了。\n```\n\n### 3、删除变量\n\n使用`unset`命令删除变量：\n\n```sh\nunset variable_name\n```\n\n==删除变量后不能再用，而`unset`不能删除只读变量==\n\n```sh\n#!/bin/sh\nmyUrl=\"http://www.google.com\"\nunset myUrl\necho $myUrl #此时输出就没接过了，因为变量被删除了。\n```\n\n### 4、变量类型\n\n运行shell时，会同时存在三种变量：\n\n- 局部变量：脚本中定义的变量，仅作用于本shell脚本内。\n- 环境变量：所有程序，包括shell启动程序都能访问的环境变量。\n- shell变量：shell程序的特殊变量。\n\n### 5、shell字符串\n\nshell常用`number`和`string`，其中`string`可以单引号、双引号或者不用引号。但是略有区别：\n\n- 单引号\n\n  ```sh\n  str='string test'\n  ```\n\n  单引号`''`之间的字符原样输出，里面的变量也会失效。其内部不能再有单引号，哪怕转义符号都失效。\n\n- 双引号\n\n  ```shell\n  your_name='your name'\n  str=\"Hello ,world ,\\\"$your_name\\\"! \\n\"\n  ```\n\n  双引号里面可以有变量，可以有转义符号。\n\n- 字符串拼接\n\n  ```sh\n  n1=\"abc\"\n  test=\"hello, \"$n1\" !\"\n  test1=\"hello, ${n1} !\"\n  echo $test $test1\n  ```\n\n- 获取字符串长度\n\n  使用`#`标识变量长度\n\n  ```sh\n  str=\"abcdef\"\n  #输出字符串长度\n  echo ${#str} \n  ```\n\n- 获取子字符串\n\n  ```sh\n  str=\"abcdef\"\n  #下标从左至右，0开始，\n  echo ${str:1:4}\n  ```\n\n- 查找子字符串\n\n  使用\\`符号\n\n  ```sh\n  str=\"hello world nihaome\"\n  #查找字符i或s的位置,反引号\n  echo `expr index \"$str\" is`\n  ```\n\n### 6、Shell数组\n\nbash仅支持一维数组，可利用下标或表达式操作元素。\n\n- 定义数组\n\n  shell中使用`()`表示数组，元素用空格来分割。\n\n  ```sh\n  array=(1 2 3 4 5 6 7)\n  #或者\n  array=(\n  a\n  b\n  c\n  )\n  #也可以单独定义,下标可以不连续，也无范围限制。\n  array[0]=1\n  array[1]=2\n  array[3]=7\n  ```\n\n- 读取数组\n\n  ```sh\n  variable=${array[index]}\n  # @符号代替index表示获取所有元素\n  echo ${variable[@]}\n  ```\n\n- 获取数组长度\n\n  类似字符串的获取\n\n  ```sh\n  #获取元素个数\n  length=${#array_name[@]}\n  #或者*通配符\n  length=${#array_name[*]}\n  #获取数组单个元素的长度\n  length_n=${#array_name[n]}\n  ```\n\n### 7、Shell注释\n\n使用`#`至于行首，表示该行注释，shell无多行注释，只能每行都`#`\n\n```sh\n#-----------------------\n#我是个多行注释\n#但是只能这么写\n#-----------------------\n```\n\n要是多行代码需要注释，可以将定义为函数，加`{}`包裹起来，该函数不被调用，则类似于注释掉。\n\n## Shell传递参数\n\n在执行shell脚本时，可以向脚本传递参数，脚本内获取参数的格式：`$n`，n代表数字编号，为脚本内需要获取的参数的编号。\n\n### 1、实例\n\n示例向脚本传递三个参数，并输出，`$0`为执行文件名：\n\n```shell\n#!/bin/bash\n#传参测试\n\necho \"Shell 传参测试\";\necho \"file name: $0\";\necho \"first variable: $1\";\necho \"second variable: $2\"\necho \"third variable: $3\";\n```\n\n通过赋予权限，或者指定执行，可实现输出：\n\n```shell\n$ chmod +x test.sh\n# $符号在次表示root用户执行，下面是传入1，2，3，三个数到脚本\n$ ./test.sh 1 2 3 \n\n#输出结果：\nShell 传参测试\nfile name: ./test.sh\nfirst variable: 1\nsecond variable 2\nthird variable 3\n```\n\n另有几个特殊字符处理参数：\n\n| 参数处理 | 说明                         |\n| ---- | -------------------------- |\n| $#   | 传递到脚本的参数的个数                |\n| $*   | 以一个单字符串显示所有向脚本传递的参数。       |\n| $$   | 脚本运行的当前进程ID号               |\n| $!   | 后台运行的最后一个进程的ID号            |\n| $@   | 类似$*，使用时许加引号，并在引号中返回每个参数。  |\n| $-   | 显示shell使用的当前选选项，类似`set`命令  |\n| $?   | 显示最后命令的退出状态。0 表示无错误。其他都是错。 |\n\n```sh\n#!/bin/sh\n\necho \"Shell 传递参数实例！\";\necho \"第一个参数为：$1\";\n\necho \"参数个数为：$#\";\necho \"传递的参数作为一个字符串显示：$*\";\n```\n\n执行效果：\n\n```shell\n$ chmod +x test.sh \n$ ./test.sh 1 2 3\nShell 传递参数实例！\n第一个参数为：1\n参数个数为：3\n传递的参数作为一个字符串显示：1 2 3\n```\n\n`$*`与`$@`的异同：\n\n- 都是应用所有参数\n\n- 不同：只有在双引号中体现。假设在脚本运行时写了三个参数 1、2、3，，则 \" * \" 等价于 \"1 2 3\"（传递了一个参数），而 \"@\" 等价于 \"1\" \"2\" \"3\"（传递了三个参数）。\n\n  ```sh\n  #!/bin/bash\n\n  echo \"-- \\$* demo ---\"\n  for i in \"$*\";do\n  \techo $i\n  done\n\n  echo \"-- \\$@ demo ---\"\n  for i in \"$@\"; do\n  \techo $i\n  done\n  ```\n\n  执行效果：\n\n  ```shell\n  $ chmod +x test.sh \n  $ ./test.sh 1 2 3\n  -- $* 演示 ---\n  1 2 3\n  -- $@ 演示 ---\n  1\n  2\n  3\n  ```\n\n## Shell数组\n\nBash shell仅支持一维数组，不限定大小，初始化时候不需要指定大小。下标0开始，`()`包裹，空格分割元素。\n\n```shell\narray=(a b c d)\n```\n\n- 读取数组\n\n  格式`${array[index]}`\n\n```shell\n#!/bin/bash\nmy_array=(a b \"c\" d)\n\necho \"first: ${my_array[0]}\"\n\n#然后执行文件，获得输出结果\n#可用@或*来代替index获取所有元素\n```\n\n- 数组长度\n\n  类似字符串的长度获取\n\n  ```shell\n  ${#array[index]}\n  ```\n\n## Shell运算符\n\nshell支持多种运算符：\n\n- 算数运算符\n- 关系运算符\n- 布尔运算符\n- 字符串运算符\n- 文件测试运算符\n\n原生Bash不支持简单的数学运算，可以用`awk`和`expr`实现。\n\n```sh\n#!/bin/sh\n\nval=`expr 2 + 2`\necho $val\n\n#注意，expr用反引号，表达式和运算符之间必须有空格，2+2就不行。\n```\n\n### 1、算术运算符\n\n若a = 10，b = 20\n\n| 运算符  | 说明               | 举例                             |\n| ---- | ---------------- | ------------------------------ |\n| +    | 加号               | \\`expr \\$a + \\$b\\`，result = 30 |\n| -    | 减号               | \\`expr \\$a - \\$b`，result = -10 |\n| *    | 乘号               | \\`expr \\$a * \\$b`，result = 200 |\n| /    | 除号               | \\`expr \\$b / \\$a`，result = 2   |\n| %    | 取余               | \\`expr \\$b % \\$a`，result=0     |\n| =    | 赋值               | a=$b，将b的值赋给a                   |\n| ==   | 相等，比较数字，同则true。  | [\\$a == \\$b]返回false            |\n| !=   | 不等，比较数字，不同的true。 | [\\$a != \\$b]返回true。            |\n\n```shell\n#!/bin/bash\n# author:菜鸟教程\n# url:www.runoob.com\n\na=10\nb=20\n\nval=`expr $a + $b`\necho \"a + b : $val\"\n\nval=`expr $a - $b`\necho \"a - b : $val\"\n\nval=`expr $a \\* $b`\necho \"a * b : $val\"\n\nval=`expr $b / $a`\necho \"b / a : $val\"\n\nval=`expr $b % $a`\necho \"b % a : $val\"\n\nif [ $a == $b ]\nthen\n   echo \"a 等于 b\"\nfi\nif [ $a != $b ]\nthen\n   echo \"a 不等于 b\"\nfi\n```\n\n执行结果：\n\n```shell\na + b : 30\na - b : -10\na * b : 200\nb / a : 2\nb % a : 0\na 不等于 b\n```\n\n\n\n**注意：**条件表达式必须在`[]`之间，且必须有空格，如**[\\$a==\\$b]**是错的！\n\n> `*`乘号需要在`expr`表达式内用`\\`转义\n>\n> Mac电脑的shell的`expr`表达式：**$((表达式))**所以它的乘号`*`不用转义\n\n### 2、关系运算符\n\n布尔类型，关系运算符仅支持数字，除非字符串的值也是数字。示例，若a = 10 ,b = 20:\n\n| 运算符  | 说明          |\n| ---- | ----------- |\n| -eq  | equal       |\n| -ne  | not equal   |\n| -gt  | great than  |\n| -lt  | less than   |\n| -ge  | great equal |\n| -le  | less equal  |\n\n### 3、布尔运算符\n\n| 运算符  | 说明                        |\n| ---- | ------------------------- |\n| !    | `非`运算，表达式为true，则返回false。  |\n| -o   | `或`运算，一个表达式为true，则返回true。 |\n| -a   | `与`运算，两个都true，才返回true。    |\n\n### 4、逻辑运算符\n\n| 运算符  | 说明    |\n| ---- | ----- |\n| &&   | 逻辑and |\n| \\|\\| | 逻辑 or |\n\n### 5、字符串运算符\n\n| 运算符  | 说明                     |\n| ---- | ---------------------- |\n| =    | 检测两字符串是否相等             |\n| !=   | 检测两字符串是否不等             |\n| -z   | zero检测字符串长度是否为0，0则true |\n| -n   | not zero检测字符串长度是否非0。   |\n| str  | 检测字符串是否为空，不空则true。     |\n\n### 6、文件测试运算符\n\n用于检测类unix 文件的各种属性\n\n| 操作符     | 说明                           |\n| ------- | ---------------------------- |\n| -b file | 是否是块设备文件，是则true              |\n| -c file | 是否是字符设备文件，是则true             |\n| -d file | 是否是目录，是则true                 |\n| -f file | 是否是普通文件(既非目录，亦非设备文件)，若是则true |\n| -g file | 是否设置了SGID位，是则true            |\n| -k file | 是否设置粘着位，是则true               |\n| -p file | 是否有名管道，是则true                |\n| -u file | 是否设置SUID，是则true              |\n| -r file | 是否可读，是则true                  |\n| -w file | 是否可写，是则true                  |\n| -x file | 是否可执行，是则true                 |\n| -s file | 是否为空或大小是否大于0，非空则true         |\n| -e file | 是否存在，是则true                  |\n\n==注意shell脚本的表达式都要在`[]`内哦==\n\n## Shell echo命令\n\n类似于php的echo，shell的echo用于输出字符串，格式`echo string`\n\n- 显示普通字符串\n\n```shell\necho \"Hello World\"\n#可以不带引号\necho Hello World\n```\n\n- 显示转义字符\n\n  ```sh\n  echo \"\\\"It is a test\\\"\"\n  #输出结果\n  \"It is a test\"\n  ```\n\n- 显示变量\n\n  `read`命令从标准输入中读取一行，并把输入行的每个字段指定给shell变量\n\n  ```shell\n  #!/bin/sh\n  read name\n  echo \"$name It is a test\"\n\n  #运行效果：\n  [root@www ~]# sh test.sh\n  OK                     #标准输入\n  OK It is a test        #输出\n  ```\n\n- 显示换行\n\n  ```shell\n  echo -e \"Ok ! \\n\" # -e 开启转义\n  echo \"It is a test\"\n  #输出结果：注意ok后面有换行\n  OK!\n\n  It it a tes\n  ```\n\n- 显示不换行\n\n  ```sh\n  #!/bin/sh\n  echo -e \"OK! \\c\" # -e 开启转义 \\c 不换行\n  echo \"It is a test\"\n  #结果：\n  OK! It is a test\n  ```\n\n- 显示结果定向至文件\n\n  ```shell\n  echo \"It is a test\" > test.txt\n  ```\n\n- 原样输出字符，不转义不取变量，需要结合单引号\n\n  ```sh\n  echo '$name\\\"'\n  #输出结果\n  $name\\\"\n  ```\n\n- 显示命令执行结果\n\n  ==命令用``  ` ``来包裹==\n\n  ```sh\n  echo `data`\n  #结果：\n  Thu Jul 24 10:08:46 CST 2014\n  ```\n\n## Shell printf命令\n\n类似C语言的printf()函数，shell使用printf会比echo更具有跨平台移植性。可以类似C的printf()函数使用一些复杂的表达式，printf不支持自动换行，需要借助`\\n`\n\n```shell\nprintf format-string [args...]\n```\n\n示例，模拟shell输出，\n\n```sh\n$ echo \"hello ,shell\"\nhello ,shell\n$ printf \"hello ,shell \\n\"\nhello ,shell\n$\n```\n\n脚本化的printf命令使用：\n\n```sh\n#!/bin/bash\n# author:菜鸟教程\n# url:www.runoob.com\n \nprintf \"%-10s %-8s %-4s\\n\" 姓名 性别 体重kg  \nprintf \"%-10s %-8s %-4.2f\\n\" 郭靖 男 66.1234 \nprintf \"%-10s %-8s %-4.2f\\n\" 杨过 男 48.6543 \nprintf \"%-10s %-8s %-4.2f\\n\" 郭芙 女 47.9876 \n```\n\n执行脚本，显示结果：\n\n```\n姓名     性别   体重kg\n郭靖     男      66.12\n杨过     男      48.65\n郭芙     女      47.99\n```\n\n`%s,%c,%d,%f`都是格式替换符，`%-10s`指一个宽度为10个字符（-表示左对齐，没有则右对齐），任何字符都会被显示在10个字符宽的字符内，如果不足则自动以空格填充，超过也会将内容全部显示出来。\n\n%-4.2f 指格式化为小数，其中.2指保留2位小数。\n\n```sh\n#!/bin/bash\n# author:菜鸟教程\n# url:www.runoob.com\n \n# format-string为双引号\nprintf \"%d %s\\n\" 1 \"abc\"\n\n# 单引号与双引号效果一样 \nprintf '%d %s\\n' 1 \"abc\" \n\n# 没有引号也可以输出\nprintf %s abcdef\n\n# 格式只指定了一个参数，但多出的参数仍然会按照该格式输出，format-string 被重用\nprintf %s abc def\n\nprintf \"%s\\n\" abc def\n\nprintf \"%s %s %s\\n\" a b c d e f g h i j\n\n# 如果没有 arguments，那么 %s 用NULL代替，%d 用 0 代替\nprintf \"%s and %d \\n\"\n```\n\n**Printf的转移序列**\n\n| 序列               | 说明                                       |\n| ---------------- | ---------------------------------------- |\n| \\a               | 警告字符，通常为ASCII的BEL字符                      |\n| \\b               | 后退                                       |\n| \\c               | 抑制不显示输出结果中任何姐wide换行字符（只在%b格式指示控制符下的参数字符串中有效），而且任何留在参数里的字符，任何接下来的采纳书以及任何留在格式字符串中的字符，都被忽略。 |\n| \\f               | 换页                                       |\n| \\n               | 换行                                       |\n| \\r               | 回车                                       |\n| \\t               | 水平tab                                    |\n| \\v               | 竖直tab                                    |\n| \\\\\\              | 转义后输出一个\\符号                               |\n| \\d     dd        | 表示1--3位的八进制字符，仅在格式字符串中有效。                |\n| \\0     dd      d | 表示1--3位的八进制字符                            |\n\n## Shell text命令\n\nshell中test命令用于测试条件是否成立，可进行数字、字符和文件的条件测试\n\n```sh\n#!/bin/bash\n\n#用之前的各种运算符，测试test\nnum1=100\nnum2=200\nif test $[num1] -eq $[num2]\nthen\n\techo 'true'\nelse\n\techo 'false'\nfi\n```\n\n## Shell 流程控制\n\n区别于其他编程语言，shell的流程控制不可为空，如\n\n```java\nif(a>b){\n  System.out.println(\"ok\");\n}else{\n  //此处不做任何事\n}\n```\n\n但是在shell中不能出现不做任何事的分支语句\n\n### 1、if else\n\n- if语句格式\n\n  ```sh\n  if condition\n  then\n  \tcommand1\n  \tcommand2\n  \t...\n  fi # 是if的倒写\n  ```\n\n  每个句子可以用`;`分号结束，可以写在一行好几个语句。\n\n- if else\n\n  ```sh\n  if condition\n  then\n  \tcommand1\n  \tcommand2\n  \t...\n  else\n  \tcommand\n  fi\n  ```\n\n- if else-if else\n\n  ```sh\n  if condition1\n  then\n  \tcommand1\n  elif condition2 #类似python中，else if是写作elif\n  then\n  \tcommand2\n  else\n  \tcommand\n  fi\n  ```\n\n### 2、for循环\n\nshell的for循环格式：\n\n```sh\nfor var in item1 item2 ... itemN\ndo\n\tcommand1\n\tcommand2\n\t...\n\t\ndone #for循环结束的标识\n#写成一行\nfor var in item1 item2 ... itemN;do command1; command2;...;done;\n```\n\n### 3、while语句\n\n格式：\n\n```sh\nwhile condition\ndo\n\tcommand\ndone\n#示例\n\n#!/bin/sh\nint=1\nwhile(( $int<=5 ))\ndo\n        echo $int\n        let \"int++\" # let是个关键命令\ndone\n```\n\n可以结合`read`命令接收输入信息\n\n### 4、无限循环\n\n```sh\nwhile :\ndo\n\tcommand\ndone\n\n#或者\nwhile true\ndo\n\tcommand\ndone\n\n#或者\nfor (( ; ; ))\n```\n\n### 5、until循环\n\nshell所有的`until`循环类似于一个特殊的for循环，知道满足条件时候才停止。一般还是`while`\n\n```sh\nuntil condition\ndo\n\tcommand\ndone\n```\n\n**条件可为任意测试条件，测试发生在循环末尾，因此循环至少执行一次—请注意这一点。**\n\n### 6、case\n\n类似其他语言的switch...case语句\n\n```sh\ncase value in\nmode1)\n\tcommand1\n\t...\n\t;; #case的结束标志\nmode2)\n\tcommand2\n\t...\n\t;;\nesac #case的反写\n```\n\nvalue只会匹配一个case，或者不匹配，则mode可用*号通配\n\n```sh\necho '输入 1 到 4 之间的数字:'\necho '你输入的数字为:'\nread aNum\ncase $aNum in\n    1)  echo '你选择了 1'\n    ;;\n    2)  echo '你选择了 2'\n    ;;\n    3)  echo '你选择了 3'\n    ;;\n    4)  echo '你选择了 4'\n    ;;\n    *)  echo '你没有输入 1 到 4 之间的数字'\n    ;;\nesac\n```\n\n### 7、跳出循环\n\nshell也使用`break`和`continue`来跳出循环。\n\n- break\n\n  跳出所有循环，终止后面的执行。\n\n  ```sh\n  #!/bin/bash\n  while :\n  do\n      echo -n \"输入 1 到 5 之间的数字:\"\n      read aNum\n      case $aNum in\n          1|2|3|4|5) echo \"你输入的数字为 $aNum!\"\n          ;;\n          *) echo \"你输入的数字不是 1 到 5 之间的! 游戏结束\"\n              break\n          ;;\n      esac\n  done\n  ```\n\n- continue\n\n  跳出本次循环，执行下一轮循环\n\n  ```sh\n  #!/bin/bash\n  while :\n  do\n      echo -n \"输入 1 到 5 之间的数字: \"\n      read aNum\n      case $aNum in\n          1|2|3|4|5) echo \"你输入的数字为 $aNum!\"\n          ;;\n          *) echo \"你输入的数字不是 1 到 5 之间的!\"\n              continue\n              echo \"游戏结束\"\n          ;;\n      esac\n  done\n  ```\n\n### 8、esac\n\ncase语句区别于C语言，用esac作为结束标志，`)`和`;;`标识每个case。\n\n\n\n## Shell函数\n\nshell可以自定义函数，然后自己调用。函数格式：\n\n```sh\n#function 关键字为可选项，参数也是可选\n[ function ] funname [()]\n\n{\n  \n  action;\n  \n  [return int;]\n  \n}\n```\n\n**说明：**\n\n1. 可以带function fun()定义，也可以fun()定义，不带参数。\n2. 参数返回，可以显示加: return 返回，若不加，则返回最后一条指令结果。\n\n```shell\n#!/bin/bash\n# author:菜鸟教程\n# url:www.runoob.com\n\ndemoFun(){\n    echo \"这是我的第一个 shell 函数!\"\n}\necho \"-----函数开始执行-----\"\ndemoFun\necho \"-----函数执行完毕-----\"\n```\n\n含有返回值的函数：\n\n```sh\n#!/bin/bash\n# author:菜鸟教程\n# url:www.runoob.com\n\nfunWithReturn(){\n    echo \"这个函数会对输入的两个数字进行相加运算...\"\n    echo \"输入第一个数字: \"\n    read aNum\n    echo \"输入第二个数字: \"\n    read anotherNum\n    echo \"两个数字分别为 $aNum 和 $anotherNum !\"\n    return $(($aNum+$anotherNum))\n}\nfunWithReturn\necho \"输入的两个数字之和为 $? !\"\n```\n\n==调用函数返回值，用`$?`符号==，函数必须在被调用前定义。\n\n- 函数参数\n\n  在Shell中，调用函数时可以向其传递参数。在函数体内部，通过 $n 的形式来获取参数的值，例如，$1表示第一个参数，$2表示第二个参数...\n\n  ```sh\n  #!/bin/bash\n  # author:菜鸟教程\n  # url:www.runoob.com\n\n  funWithParam(){\n      echo \"第一个参数为 $1 !\"\n      echo \"第二个参数为 $2 !\"\n      echo \"第十个参数为 $10 !\"\n      echo \"第十个参数为 ${10} !\"\n      echo \"第十一个参数为 ${11} !\"\n      echo \"参数总数有 $# 个!\"\n      echo \"作为一个字符串输出所有参数 $* !\"\n  }\n  funWithParam 1 2 3 4 5 6 7 8 9 34 73\n  #输出结果：\n  第一个参数为 1 !\n  第二个参数为 2 !\n  第十个参数为 10 !\n  第十个参数为 34 !\n  第十一个参数为 73 !\n  参数总数有 11 个!\n  作为一个字符串输出所有参数 1 2 3 4 5 6 7 8 9 34 73 !\n  ```\n\n  **注意：**\\$10不能获取第10个参数，因为当n>=10时候，要用\\$(n)来获取参数。\n\n## Shell 输入/输出重定向\n\n类Uinx系统中，默认标准输入输出设备就是shell终端。重定向命令列表：\n\n| 命令              | 说明                       |\n| --------------- | ------------------------ |\n| command > file  | 输出重定向到file               |\n| command < file  | 输出重定向到file               |\n| command >> file | 输出追加到file                |\n| n > file        | 文件描述符为n的文件重定向到file       |\n| n >> file       | 文件描述符为n的文件追加到file        |\n| n >& m          | 输出文件m和n合并                |\n| n <& m          | 输入文件m和n合并                |\n| << tag          | 开始标记tag和结束标记tag之间的内容作为输入 |\n\n> **注意：**需要注意的是文件描述符 0 通常是标准输入（STDIN），1 是标准输出（STDOUT），2 是标准错误输出（STDERR）。\n\n### 1、输出重定向\n\n```sh\ncommand1 > file1\n```\n\n若file1存在，则被替代。可以用`>>`追加符号，则不替代。\n\n### 2、输入重定向\n\n```sh\ncommand1 < file1\n```\n\n```\ncommand1 < infile > outfile\n```\n\n同时替换输入和输出，执行command1，从文件infile读取内容，然后将输出写入到outfile中。\n\n### 3、重定向深入讲解\n\n一般类unix系统命令运行会同时打开三个文件：\n\n- 标准输入文件(stdin)：stdin的文件描述符为0，Unix程序默认从stdin读取数据。\n- 标准输出文件(stdout)：stdout 的文件描述符为1，Unix程序默认向stdout输出数据。\n- 标准错误文件(stderr)：stderr的文件描述符为2，Unix程序会向stderr流中写入错误信息\n\n默认情况下，command > file 将 stdout 重定向到 file，command < file 将stdin 重定向到 file。\n\n如果希望 stderr 重定向到 file，可以这样写：\n\n```sh\n#模拟终端\n$ command 2 > file\n```\n\n若要追加`>>`符号，其中2代表标准错误文件的代号。\n\n如果希望将stdout和stderr合并后重定向到file\n\n```sh\ncommand > file 2>&1\n#或者\ncommand >> file 2>&1\n#如果输入、输出都重定向\ncommand <file1 >file2\n```\n\n### 4、Here Document\n\nHere Document是shell的一种特殊重定向方式，用于将输入重定向到一个交互式shell脚本或程序：\n\n```sh\ncommand << delimiter\n\tdocument\ndelimiter\n```\n\n作用将delimiter之间的document作为输入传递给command\n\n**注意：**结尾的`delimiter`前后不得有任何符号，包括tab和空格。\n\n```sh\nwc -l << EOF\n\tnihao\n\tzhendehenhao\n\tshime\n\tok\nEOF \n#输出结果，获得的EOF之间的内容的行数。\n4\n```\n\n### 5、/dev/null文件\n\n若希望执行命令不在屏幕输出，可重定向到/dev/null\n\n```sh\ncommand > /dev/null\n```\n\n`/dev/null`为特殊文件，写入的内容立即不见，不可读出。\n\n如果屏蔽stdout和stderr\n\n```sh\ncommand > /dev/null 2>&1\n```\n\n## Shell文件包含\n\nshell也可以使用外部脚本，便于封装：\n\n```sh\n. filename #注意点号(.)与文件名之间有空格\n或\nsource filename\n```\n\n示例：test1.sh\n\n```sh\n#!/bin/bash\n# author:菜鸟教程\n# url:www.runoob.com\n\nurl=\"http://www.runoob.com\"\n```\n\ntest2.sh\n\n```sh\n#!/bin/bash\n# author:菜鸟教程\n# url:www.runoob.com\n\n#使用 . 号来引用test1.sh 文件\n. ./test1.sh\n\n# 或者使用以下包含文件代码\n# source ./test1.sh\n\necho \"菜鸟教程官网地址：$url\"\n```\n\n执行时候test2.sh只需要test2.sh有执行权限即可，test1.sh不一定需要。","slug":"Shell学习笔记","published":1,"updated":"2017-03-31T03:11:06.079Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ndxcdq002l88owghhf4plj","content":"<h1 id=\"Shell学习笔记\"><a href=\"#Shell学习笔记\" class=\"headerlink\" title=\"Shell学习笔记\"></a>Shell学习笔记</h1><!-- TOC -->\n<ul>\n<li><a href=\"#shell学习笔记\">Shell学习笔记</a><ul>\n<li><a href=\"#简介\">简介：</a></li>\n<li><a href=\"#shell教程入门\">Shell教程入门</a><ul>\n<li><a href=\"#1shell脚本\">1、shell脚本</a></li>\n<li><a href=\"#2shell脚本实践\">2、shell脚本实践</a></li>\n</ul>\n</li>\n<li><a href=\"#shell变量\">Shell变量</a><ul>\n<li><a href=\"#1使用变量\">1、使用变量</a></li>\n<li><a href=\"#2只读变量\">2、只读变量</a></li>\n<li><a href=\"#3删除变量\">3、删除变量</a></li>\n<li><a href=\"#4变量类型\">4、变量类型</a></li>\n<li><a href=\"#5shell字符串\">5、shell字符串</a></li>\n<li><a href=\"#6shell数组\">6、Shell数组</a></li>\n<li><a href=\"#7shell注释\">7、Shell注释</a></li>\n</ul>\n</li>\n<li><a href=\"#shell传递参数\">Shell传递参数</a><ul>\n<li><a href=\"#1实例\">1、实例</a></li>\n</ul>\n</li>\n<li><a href=\"#shell数组\">Shell数组</a></li>\n<li><a href=\"#shell运算符\">Shell运算符</a><ul>\n<li><a href=\"#1算术运算符\">1、算术运算符</a></li>\n<li><a href=\"#2关系运算符\">2、关系运算符</a></li>\n<li><a href=\"#3布尔运算符\">3、布尔运算符</a></li>\n<li><a href=\"#4逻辑运算符\">4、逻辑运算符</a></li>\n<li><a href=\"#5字符串运算符\">5、字符串运算符</a></li>\n<li><a href=\"#6文件测试运算符\">6、文件测试运算符</a></li>\n</ul>\n</li>\n<li><a href=\"#shell-echo命令\">Shell echo命令</a></li>\n<li><a href=\"#shell-printf命令\">Shell printf命令</a></li>\n<li><a href=\"#shell-text命令\">Shell text命令</a></li>\n<li><a href=\"#shell-流程控制\">Shell 流程控制</a><ul>\n<li><a href=\"#1if-else\">1、if else</a></li>\n<li><a href=\"#2for循环\">2、for循环</a></li>\n<li><a href=\"#3while语句\">3、while语句</a></li>\n<li><a href=\"#4无限循环\">4、无限循环</a></li>\n<li><a href=\"#5until循环\">5、until循环</a></li>\n<li><a href=\"#6case\">6、case</a></li>\n<li><a href=\"#7跳出循环\">7、跳出循环</a></li>\n<li><a href=\"#8esac\">8、esac</a></li>\n</ul>\n</li>\n<li><a href=\"#shell函数\">Shell函数</a></li>\n<li><a href=\"#shell-输入输出重定向\">Shell 输入/输出重定向</a><ul>\n<li><a href=\"#1输出重定向\">1、输出重定向</a></li>\n<li><a href=\"#2输入重定向\">2、输入重定向</a></li>\n<li><a href=\"#3重定向深入讲解\">3、重定向深入讲解</a></li>\n<li><a href=\"#4here-document\">4、Here Document</a></li>\n<li><a href=\"#5devnull文件\">5、/dev/null文件</a></li>\n</ul>\n</li>\n<li><a href=\"#shell文件包含\">Shell文件包含</a></li>\n</ul>\n</li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"简介：\"><a href=\"#简介：\" class=\"headerlink\" title=\"简介：\"></a>简介：</h2><p>Shell 是一个用C语言编写的程序，它是用户使用Linux的桥梁。Shell既是一种命令语言，又是一种程序设计语言。</p>\n<p>Shell 是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的服务。</p>\n<p>Ken Thompson的sh是第一种Unix Shell，Windows Explorer是一个典型的图形界面Shell。</p>\n<h2 id=\"Shell教程入门\"><a href=\"#Shell教程入门\" class=\"headerlink\" title=\"Shell教程入门\"></a>Shell教程入门</h2><h3 id=\"1、shell脚本\"><a href=\"#1、shell脚本\" class=\"headerlink\" title=\"1、shell脚本\"></a>1、shell脚本</h3><blockquote>\n<p>shell脚本<code>shell script</code>，是一种为shell而编写的脚本程序。然而通常所说的shell却是指shell脚本，而非shell本身。</p>\n</blockquote>\n<p>Linux系统shell种类众多，常用的有<code>sh</code>和<code>bash</code>。</p>\n<h3 id=\"2、shell脚本实践\"><a href=\"#2、shell脚本实践\" class=\"headerlink\" title=\"2、shell脚本实践\"></a>2、shell脚本实践</h3><p>shell脚本用<code>#!/bin/bash</code>或<code>#!/bin/sh</code>之类的方式，制定运行脚本的shell,<code>#!</code>是识别符号。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/sh</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Hello World\"</span></div></pre></td></tr></table></figure>\n<p><strong>运行shell脚本的两种方法：</strong></p>\n<ul>\n<li><p>作为可执行程序</p>\n<p>将shell文本保存为<code>.sh</code>格式文件，赋予执行权限</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">chmod + x ./test.sh <span class=\"comment\"># 赋予可执行权限</span></div><div class=\"line\">./test.sh <span class=\"comment\">#执行脚本，注意此处需要指明当前目录下的test.sh哦，不然会去path路径找的，呵呵。</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>作为解释其参数</p>\n<p>直接解释运行,如此就不用写<code>#!/bin/sh</code>之类的引用注释了。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">/bin/sh test.sh</div><div class=\"line\"><span class=\"comment\"># 类似java、php、python脚本</span></div><div class=\"line\">/bin/php test.php</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Shell变量\"><a href=\"#Shell变量\" class=\"headerlink\" title=\"Shell变量\"></a>Shell变量</h2><p>变量命名语法，不需要<code>$</code>符号，php需要。命名要求：</p>\n<ul>\n<li>首字母必须字母<code>a-z或A-Z</code></li>\n<li>不能空格，可用<code>_</code></li>\n<li>不能标点</li>\n<li>不能使用<code>bash</code>关键字</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#注意，不同于其他编程语言，等号之间不要有空格。</span></div><div class=\"line\">your_variable=<span class=\"string\">\"your,name\"</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 使用语句给变量赋值，如下循环显示出/etc目录下的文件名</div><div class=\"line\">for file in &apos;ls /etc&apos;</div></pre></td></tr></table></figure>\n<h3 id=\"1、使用变量\"><a href=\"#1、使用变量\" class=\"headerlink\" title=\"1、使用变量\"></a>1、使用变量</h3><p>使用已定义变量，只需在变量前加<code>$</code>符号即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">your_variable=&apos;yourname&apos;</div><div class=\"line\">echo $your_variable</div><div class=\"line\">echo $(your_variable)</div></pre></td></tr></table></figure>\n<p>变量名可以加<code>{}</code>来标识变量名的范围，如：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> skill <span class=\"keyword\">in</span> Ada Coffe Action Java; <span class=\"keyword\">do</span></div><div class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">\"I am good at <span class=\"variable\">$&#123;skill&#125;</span>Script\"</span></div><div class=\"line\"><span class=\"keyword\">done</span></div></pre></td></tr></table></figure>\n<p><em>如果不加<code>{}</code>，<code>skill</code>就可能被认为<code>skillScript</code>而导致变量找不到</em></p>\n<p>已定义的变量可重新定义：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">your_name=<span class=\"string\">\"tom\"</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$your_name</span></div><div class=\"line\">your_name=<span class=\"string\">\"john\"</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$your_name</span></div></pre></td></tr></table></figure>\n<h3 id=\"2、只读变量\"><a href=\"#2、只读变量\" class=\"headerlink\" title=\"2、只读变量\"></a>2、只读变量</h3><p>使用<code>readonly</code>命令将变量只读，则不可再改变，否则报错。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\">myUrl=<span class=\"string\">\"http://www.w3cschool.cc\"</span></div><div class=\"line\"><span class=\"built_in\">readonly</span> myUrl</div><div class=\"line\">myUrl=<span class=\"string\">\"new url\"</span> <span class=\"comment\">#此处就会报错，因为变量只读了。</span></div></pre></td></tr></table></figure>\n<h3 id=\"3、删除变量\"><a href=\"#3、删除变量\" class=\"headerlink\" title=\"3、删除变量\"></a>3、删除变量</h3><p>使用<code>unset</code>命令删除变量：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">unset</span> variable_name</div></pre></td></tr></table></figure>\n<p>==删除变量后不能再用，而<code>unset</code>不能删除只读变量==</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/sh</span></div><div class=\"line\">myUrl=<span class=\"string\">\"http://www.google.com\"</span></div><div class=\"line\"><span class=\"built_in\">unset</span> myUrl</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$myUrl</span> <span class=\"comment\">#此时输出就没接过了，因为变量被删除了。</span></div></pre></td></tr></table></figure>\n<h3 id=\"4、变量类型\"><a href=\"#4、变量类型\" class=\"headerlink\" title=\"4、变量类型\"></a>4、变量类型</h3><p>运行shell时，会同时存在三种变量：</p>\n<ul>\n<li>局部变量：脚本中定义的变量，仅作用于本shell脚本内。</li>\n<li>环境变量：所有程序，包括shell启动程序都能访问的环境变量。</li>\n<li>shell变量：shell程序的特殊变量。</li>\n</ul>\n<h3 id=\"5、shell字符串\"><a href=\"#5、shell字符串\" class=\"headerlink\" title=\"5、shell字符串\"></a>5、shell字符串</h3><p>shell常用<code>number</code>和<code>string</code>，其中<code>string</code>可以单引号、双引号或者不用引号。但是略有区别：</p>\n<ul>\n<li><p>单引号</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">str=<span class=\"string\">'string test'</span></div></pre></td></tr></table></figure>\n<p>单引号<code>&#39;&#39;</code>之间的字符原样输出，里面的变量也会失效。其内部不能再有单引号，哪怕转义符号都失效。</p>\n</li>\n<li><p>双引号</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">your_name=&apos;your name&apos;</div><div class=\"line\">str=&quot;Hello ,world ,\\&quot;$your_name\\&quot;! \\n&quot;</div></pre></td></tr></table></figure>\n<p>双引号里面可以有变量，可以有转义符号。</p>\n</li>\n<li><p>字符串拼接</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">n1=<span class=\"string\">\"abc\"</span></div><div class=\"line\"><span class=\"built_in\">test</span>=<span class=\"string\">\"hello, \"</span><span class=\"variable\">$n1</span><span class=\"string\">\" !\"</span></div><div class=\"line\"><span class=\"built_in\">test</span>1=<span class=\"string\">\"hello, <span class=\"variable\">$&#123;n1&#125;</span> !\"</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$test</span> <span class=\"variable\">$test1</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>获取字符串长度</p>\n<p>使用<code>#</code>标识变量长度</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">str=<span class=\"string\">\"abcdef\"</span></div><div class=\"line\"><span class=\"comment\">#输出字符串长度</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;#str&#125;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>获取子字符串</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">str=<span class=\"string\">\"abcdef\"</span></div><div class=\"line\"><span class=\"comment\">#下标从左至右，0开始，</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;str:1:4&#125;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>查找子字符串</p>\n<p>使用`符号</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">str=<span class=\"string\">\"hello world nihaome\"</span></div><div class=\"line\"><span class=\"comment\">#查找字符i或s的位置,反引号</span></div><div class=\"line\"><span class=\"built_in\">echo</span> `expr index <span class=\"string\">\"<span class=\"variable\">$str</span>\"</span> is`</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"6、Shell数组\"><a href=\"#6、Shell数组\" class=\"headerlink\" title=\"6、Shell数组\"></a>6、Shell数组</h3><p>bash仅支持一维数组，可利用下标或表达式操作元素。</p>\n<ul>\n<li><p>定义数组</p>\n<p>shell中使用<code>()</code>表示数组，元素用空格来分割。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">array=(1 2 3 4 5 6 7)</div><div class=\"line\"><span class=\"comment\">#或者</span></div><div class=\"line\">array=(</div><div class=\"line\">a</div><div class=\"line\">b</div><div class=\"line\">c</div><div class=\"line\">)</div><div class=\"line\"><span class=\"comment\">#也可以单独定义,下标可以不连续，也无范围限制。</span></div><div class=\"line\">array[0]=1</div><div class=\"line\">array[1]=2</div><div class=\"line\">array[3]=7</div></pre></td></tr></table></figure>\n</li>\n<li><p>读取数组</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">variable=<span class=\"variable\">$&#123;array[index]&#125;</span></div><div class=\"line\"><span class=\"comment\"># @符号代替index表示获取所有元素</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;variable[@]&#125;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>获取数组长度</p>\n<p>类似字符串的获取</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#获取元素个数</span></div><div class=\"line\">length=<span class=\"variable\">$&#123;#array_name[@]&#125;</span></div><div class=\"line\"><span class=\"comment\">#或者*通配符</span></div><div class=\"line\">length=<span class=\"variable\">$&#123;#array_name[*]&#125;</span></div><div class=\"line\"><span class=\"comment\">#获取数组单个元素的长度</span></div><div class=\"line\">length_n=<span class=\"variable\">$&#123;#array_name[n]&#125;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"7、Shell注释\"><a href=\"#7、Shell注释\" class=\"headerlink\" title=\"7、Shell注释\"></a>7、Shell注释</h3><p>使用<code>#</code>至于行首，表示该行注释，shell无多行注释，只能每行都<code>#</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#-----------------------</span></div><div class=\"line\"><span class=\"comment\">#我是个多行注释</span></div><div class=\"line\"><span class=\"comment\">#但是只能这么写</span></div><div class=\"line\"><span class=\"comment\">#-----------------------</span></div></pre></td></tr></table></figure>\n<p>要是多行代码需要注释，可以将定义为函数，加<code>{}</code>包裹起来，该函数不被调用，则类似于注释掉。</p>\n<h2 id=\"Shell传递参数\"><a href=\"#Shell传递参数\" class=\"headerlink\" title=\"Shell传递参数\"></a>Shell传递参数</h2><p>在执行shell脚本时，可以向脚本传递参数，脚本内获取参数的格式：<code>$n</code>，n代表数字编号，为脚本内需要获取的参数的编号。</p>\n<h3 id=\"1、实例\"><a href=\"#1、实例\" class=\"headerlink\" title=\"1、实例\"></a>1、实例</h3><p>示例向脚本传递三个参数，并输出，<code>$0</code>为执行文件名：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/bash</div><div class=\"line\">#传参测试</div><div class=\"line\"></div><div class=\"line\">echo &quot;Shell 传参测试&quot;;</div><div class=\"line\">echo &quot;file name: $0&quot;;</div><div class=\"line\">echo &quot;first variable: $1&quot;;</div><div class=\"line\">echo &quot;second variable: $2&quot;</div><div class=\"line\">echo &quot;third variable: $3&quot;;</div></pre></td></tr></table></figure>\n<p>通过赋予权限，或者指定执行，可实现输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ chmod +x test.sh</div><div class=\"line\"># $符号在次表示root用户执行，下面是传入1，2，3，三个数到脚本</div><div class=\"line\">$ ./test.sh 1 2 3 </div><div class=\"line\"></div><div class=\"line\">#输出结果：</div><div class=\"line\">Shell 传参测试</div><div class=\"line\">file name: ./test.sh</div><div class=\"line\">first variable: 1</div><div class=\"line\">second variable 2</div><div class=\"line\">third variable 3</div></pre></td></tr></table></figure>\n<p>另有几个特殊字符处理参数：</p>\n<table>\n<thead>\n<tr>\n<th>参数处理</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$#</td>\n<td>传递到脚本的参数的个数</td>\n</tr>\n<tr>\n<td>$*</td>\n<td>以一个单字符串显示所有向脚本传递的参数。</td>\n</tr>\n<tr>\n<td>$$</td>\n<td>脚本运行的当前进程ID号</td>\n</tr>\n<tr>\n<td>$!</td>\n<td>后台运行的最后一个进程的ID号</td>\n</tr>\n<tr>\n<td>$@</td>\n<td>类似$*，使用时许加引号，并在引号中返回每个参数。</td>\n</tr>\n<tr>\n<td>$-</td>\n<td>显示shell使用的当前选选项，类似<code>set</code>命令</td>\n</tr>\n<tr>\n<td>$?</td>\n<td>显示最后命令的退出状态。0 表示无错误。其他都是错。</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/sh</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Shell 传递参数实例！\"</span>;</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"第一个参数为：<span class=\"variable\">$1</span>\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"参数个数为：<span class=\"variable\">$#</span>\"</span>;</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"传递的参数作为一个字符串显示：$*\"</span>;</div></pre></td></tr></table></figure>\n<p>执行效果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ chmod +x test.sh </div><div class=\"line\">$ ./test.sh 1 2 3</div><div class=\"line\">Shell 传递参数实例！</div><div class=\"line\">第一个参数为：1</div><div class=\"line\">参数个数为：3</div><div class=\"line\">传递的参数作为一个字符串显示：1 2 3</div></pre></td></tr></table></figure>\n<p><code>$*</code>与<code>$@</code>的异同：</p>\n<ul>\n<li><p>都是应用所有参数</p>\n</li>\n<li><p>不同：只有在双引号中体现。假设在脚本运行时写了三个参数 1、2、3，，则 “ * “ 等价于 “1 2 3”（传递了一个参数），而 “@” 等价于 “1” “2” “3”（传递了三个参数）。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"-- \\$* demo ---\"</span></div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"string\">\"$*\"</span>;<span class=\"keyword\">do</span></div><div class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"variable\">$i</span></div><div class=\"line\"><span class=\"keyword\">done</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"-- \\$@ demo ---\"</span></div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span>; <span class=\"keyword\">do</span></div><div class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"variable\">$i</span></div><div class=\"line\"><span class=\"keyword\">done</span></div></pre></td></tr></table></figure>\n<p>执行效果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ chmod +x test.sh </div><div class=\"line\">$ ./test.sh 1 2 3</div><div class=\"line\">-- $* 演示 ---</div><div class=\"line\">1 2 3</div><div class=\"line\">-- $@ 演示 ---</div><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Shell数组\"><a href=\"#Shell数组\" class=\"headerlink\" title=\"Shell数组\"></a>Shell数组</h2><p>Bash shell仅支持一维数组，不限定大小，初始化时候不需要指定大小。下标0开始，<code>()</code>包裹，空格分割元素。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">array=(a b c d)</div></pre></td></tr></table></figure>\n<ul>\n<li><p>读取数组</p>\n<p>格式<code>${array[index]}</code></p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/bash</div><div class=\"line\">my_array=(a b &quot;c&quot; d)</div><div class=\"line\"></div><div class=\"line\">echo &quot;first: $&#123;my_array[0]&#125;&quot;</div><div class=\"line\"></div><div class=\"line\">#然后执行文件，获得输出结果</div><div class=\"line\">#可用@或*来代替index获取所有元素</div></pre></td></tr></table></figure>\n<ul>\n<li><p>数组长度</p>\n<p>类似字符串的长度获取</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$&#123;#array[index]&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Shell运算符\"><a href=\"#Shell运算符\" class=\"headerlink\" title=\"Shell运算符\"></a>Shell运算符</h2><p>shell支持多种运算符：</p>\n<ul>\n<li>算数运算符</li>\n<li>关系运算符</li>\n<li>布尔运算符</li>\n<li>字符串运算符</li>\n<li>文件测试运算符</li>\n</ul>\n<p>原生Bash不支持简单的数学运算，可以用<code>awk</code>和<code>expr</code>实现。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/sh</span></div><div class=\"line\"></div><div class=\"line\">val=`expr 2 + 2`</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$val</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#注意，expr用反引号，表达式和运算符之间必须有空格，2+2就不行。</span></div></pre></td></tr></table></figure>\n<h3 id=\"1、算术运算符\"><a href=\"#1、算术运算符\" class=\"headerlink\" title=\"1、算术运算符\"></a>1、算术运算符</h3><p>若a = 10，b = 20</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>+</td>\n<td>加号</td>\n<td>`expr \\$a + \\$b`，result = 30</td>\n</tr>\n<tr>\n<td>-</td>\n<td>减号</td>\n<td>`expr \\$a - \\$b`，result = -10</td>\n</tr>\n<tr>\n<td>*</td>\n<td>乘号</td>\n<td>`expr \\$a * \\$b`，result = 200</td>\n</tr>\n<tr>\n<td>/</td>\n<td>除号</td>\n<td>`expr \\$b / \\$a`，result = 2</td>\n</tr>\n<tr>\n<td>%</td>\n<td>取余</td>\n<td>`expr \\$b % \\$a`，result=0</td>\n</tr>\n<tr>\n<td>=</td>\n<td>赋值</td>\n<td>a=$b，将b的值赋给a</td>\n</tr>\n<tr>\n<td>==</td>\n<td>相等，比较数字，同则true。</td>\n<td>[\\$a == \\$b]返回false</td>\n</tr>\n<tr>\n<td>!=</td>\n<td>不等，比较数字，不同的true。</td>\n<td>[\\$a != \\$b]返回true。</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/bash</div><div class=\"line\"># author:菜鸟教程</div><div class=\"line\"># url:www.runoob.com</div><div class=\"line\"></div><div class=\"line\">a=10</div><div class=\"line\">b=20</div><div class=\"line\"></div><div class=\"line\">val=`expr $a + $b`</div><div class=\"line\">echo &quot;a + b : $val&quot;</div><div class=\"line\"></div><div class=\"line\">val=`expr $a - $b`</div><div class=\"line\">echo &quot;a - b : $val&quot;</div><div class=\"line\"></div><div class=\"line\">val=`expr $a \\* $b`</div><div class=\"line\">echo &quot;a * b : $val&quot;</div><div class=\"line\"></div><div class=\"line\">val=`expr $b / $a`</div><div class=\"line\">echo &quot;b / a : $val&quot;</div><div class=\"line\"></div><div class=\"line\">val=`expr $b % $a`</div><div class=\"line\">echo &quot;b % a : $val&quot;</div><div class=\"line\"></div><div class=\"line\">if [ $a == $b ]</div><div class=\"line\">then</div><div class=\"line\">   echo &quot;a 等于 b&quot;</div><div class=\"line\">fi</div><div class=\"line\">if [ $a != $b ]</div><div class=\"line\">then</div><div class=\"line\">   echo &quot;a 不等于 b&quot;</div><div class=\"line\">fi</div></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">a + b : 30</div><div class=\"line\">a - b : -10</div><div class=\"line\">a * b : 200</div><div class=\"line\">b / a : 2</div><div class=\"line\">b % a : 0</div><div class=\"line\">a 不等于 b</div></pre></td></tr></table></figure>\n<p><strong>注意：</strong>条件表达式必须在<code>[]</code>之间，且必须有空格，如<strong>[\\$a==\\$b]</strong>是错的！</p>\n<blockquote>\n<p><code>*</code>乘号需要在<code>expr</code>表达式内用<code>\\</code>转义</p>\n<p>Mac电脑的shell的<code>expr</code>表达式：<strong>$((表达式))</strong>所以它的乘号<code>*</code>不用转义</p>\n</blockquote>\n<h3 id=\"2、关系运算符\"><a href=\"#2、关系运算符\" class=\"headerlink\" title=\"2、关系运算符\"></a>2、关系运算符</h3><p>布尔类型，关系运算符仅支持数字，除非字符串的值也是数字。示例，若a = 10 ,b = 20:</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-eq</td>\n<td>equal</td>\n</tr>\n<tr>\n<td>-ne</td>\n<td>not equal</td>\n</tr>\n<tr>\n<td>-gt</td>\n<td>great than</td>\n</tr>\n<tr>\n<td>-lt</td>\n<td>less than</td>\n</tr>\n<tr>\n<td>-ge</td>\n<td>great equal</td>\n</tr>\n<tr>\n<td>-le</td>\n<td>less equal</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"3、布尔运算符\"><a href=\"#3、布尔运算符\" class=\"headerlink\" title=\"3、布尔运算符\"></a>3、布尔运算符</h3><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>!</td>\n<td><code>非</code>运算，表达式为true，则返回false。</td>\n</tr>\n<tr>\n<td>-o</td>\n<td><code>或</code>运算，一个表达式为true，则返回true。</td>\n</tr>\n<tr>\n<td>-a</td>\n<td><code>与</code>运算，两个都true，才返回true。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"4、逻辑运算符\"><a href=\"#4、逻辑运算符\" class=\"headerlink\" title=\"4、逻辑运算符\"></a>4、逻辑运算符</h3><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&amp;&amp;</td>\n<td>逻辑and</td>\n</tr>\n<tr>\n<td>\\</td>\n<td>\\</td>\n<td></td>\n<td>逻辑 or</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"5、字符串运算符\"><a href=\"#5、字符串运算符\" class=\"headerlink\" title=\"5、字符串运算符\"></a>5、字符串运算符</h3><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>=</td>\n<td>检测两字符串是否相等</td>\n</tr>\n<tr>\n<td>!=</td>\n<td>检测两字符串是否不等</td>\n</tr>\n<tr>\n<td>-z</td>\n<td>zero检测字符串长度是否为0，0则true</td>\n</tr>\n<tr>\n<td>-n</td>\n<td>not zero检测字符串长度是否非0。</td>\n</tr>\n<tr>\n<td>str</td>\n<td>检测字符串是否为空，不空则true。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"6、文件测试运算符\"><a href=\"#6、文件测试运算符\" class=\"headerlink\" title=\"6、文件测试运算符\"></a>6、文件测试运算符</h3><p>用于检测类unix 文件的各种属性</p>\n<table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-b file</td>\n<td>是否是块设备文件，是则true</td>\n</tr>\n<tr>\n<td>-c file</td>\n<td>是否是字符设备文件，是则true</td>\n</tr>\n<tr>\n<td>-d file</td>\n<td>是否是目录，是则true</td>\n</tr>\n<tr>\n<td>-f file</td>\n<td>是否是普通文件(既非目录，亦非设备文件)，若是则true</td>\n</tr>\n<tr>\n<td>-g file</td>\n<td>是否设置了SGID位，是则true</td>\n</tr>\n<tr>\n<td>-k file</td>\n<td>是否设置粘着位，是则true</td>\n</tr>\n<tr>\n<td>-p file</td>\n<td>是否有名管道，是则true</td>\n</tr>\n<tr>\n<td>-u file</td>\n<td>是否设置SUID，是则true</td>\n</tr>\n<tr>\n<td>-r file</td>\n<td>是否可读，是则true</td>\n</tr>\n<tr>\n<td>-w file</td>\n<td>是否可写，是则true</td>\n</tr>\n<tr>\n<td>-x file</td>\n<td>是否可执行，是则true</td>\n</tr>\n<tr>\n<td>-s file</td>\n<td>是否为空或大小是否大于0，非空则true</td>\n</tr>\n<tr>\n<td>-e file</td>\n<td>是否存在，是则true</td>\n</tr>\n</tbody>\n</table>\n<p>==注意shell脚本的表达式都要在<code>[]</code>内哦==</p>\n<h2 id=\"Shell-echo命令\"><a href=\"#Shell-echo命令\" class=\"headerlink\" title=\"Shell echo命令\"></a>Shell echo命令</h2><p>类似于php的echo，shell的echo用于输出字符串，格式<code>echo string</code></p>\n<ul>\n<li>显示普通字符串</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo &quot;Hello World&quot;</div><div class=\"line\">#可以不带引号</div><div class=\"line\">echo Hello World</div></pre></td></tr></table></figure>\n<ul>\n<li><p>显示转义字符</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"\\\"It is a test\\\"\"</span></div><div class=\"line\"><span class=\"comment\">#输出结果</span></div><div class=\"line\"><span class=\"string\">\"It is a test\"</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>显示变量</p>\n<p><code>read</code>命令从标准输入中读取一行，并把输入行的每个字段指定给shell变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/sh</div><div class=\"line\">read name</div><div class=\"line\">echo &quot;$name It is a test&quot;</div><div class=\"line\"></div><div class=\"line\">#运行效果：</div><div class=\"line\">[root@www ~]# sh test.sh</div><div class=\"line\">OK                     #标准输入</div><div class=\"line\">OK It is a test        #输出</div></pre></td></tr></table></figure>\n</li>\n<li><p>显示换行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo -e &quot;Ok ! \\n&quot; # -e 开启转义</div><div class=\"line\">echo &quot;It is a test&quot;</div><div class=\"line\">#输出结果：注意ok后面有换行</div><div class=\"line\">OK!</div><div class=\"line\"></div><div class=\"line\">It it a tes</div></pre></td></tr></table></figure>\n</li>\n<li><p>显示不换行</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/sh</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"_\">-e</span> <span class=\"string\">\"OK! \\c\"</span> <span class=\"comment\"># -e 开启转义 \\c 不换行</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"It is a test\"</span></div><div class=\"line\"><span class=\"comment\">#结果：</span></div><div class=\"line\">OK! It is a <span class=\"built_in\">test</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>显示结果定向至文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo &quot;It is a test&quot; &gt; test.txt</div></pre></td></tr></table></figure>\n</li>\n<li><p>原样输出字符，不转义不取变量，需要结合单引号</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'$name\\\"'</span></div><div class=\"line\"><span class=\"comment\">#输出结果</span></div><div class=\"line\"><span class=\"variable\">$name</span>\\<span class=\"string\">\"</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>显示命令执行结果</p>\n<p>==命令用<code>` </code>来包裹==</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">echo</span> `data`</div><div class=\"line\"><span class=\"comment\">#结果：</span></div><div class=\"line\">Thu Jul 24 10:08:46 CST 2014</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Shell-printf命令\"><a href=\"#Shell-printf命令\" class=\"headerlink\" title=\"Shell printf命令\"></a>Shell printf命令</h2><p>类似C语言的printf()函数，shell使用printf会比echo更具有跨平台移植性。可以类似C的printf()函数使用一些复杂的表达式，printf不支持自动换行，需要借助<code>\\n</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">printf format-string [args...]</div></pre></td></tr></table></figure>\n<p>示例，模拟shell输出，</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">\"hello ,shell\"</span></div><div class=\"line\">hello ,shell</div><div class=\"line\">$ <span class=\"built_in\">printf</span> <span class=\"string\">\"hello ,shell \\n\"</span></div><div class=\"line\">hello ,shell</div><div class=\"line\">$</div></pre></td></tr></table></figure>\n<p>脚本化的printf命令使用：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"><span class=\"comment\"># author:菜鸟教程</span></div><div class=\"line\"><span class=\"comment\"># url:www.runoob.com</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">\"%-10s %-8s %-4s\\n\"</span> 姓名 性别 体重kg  </div><div class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">\"%-10s %-8s %-4.2f\\n\"</span> 郭靖 男 66.1234 </div><div class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">\"%-10s %-8s %-4.2f\\n\"</span> 杨过 男 48.6543 </div><div class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">\"%-10s %-8s %-4.2f\\n\"</span> 郭芙 女 47.9876</div></pre></td></tr></table></figure>\n<p>执行脚本，显示结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">姓名     性别   体重kg</div><div class=\"line\">郭靖     男      66.12</div><div class=\"line\">杨过     男      48.65</div><div class=\"line\">郭芙     女      47.99</div></pre></td></tr></table></figure>\n<p><code>%s,%c,%d,%f</code>都是格式替换符，<code>%-10s</code>指一个宽度为10个字符（-表示左对齐，没有则右对齐），任何字符都会被显示在10个字符宽的字符内，如果不足则自动以空格填充，超过也会将内容全部显示出来。</p>\n<p>%-4.2f 指格式化为小数，其中.2指保留2位小数。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"><span class=\"comment\"># author:菜鸟教程</span></div><div class=\"line\"><span class=\"comment\"># url:www.runoob.com</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># format-string为双引号</span></div><div class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">\"%d %s\\n\"</span> 1 <span class=\"string\">\"abc\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 单引号与双引号效果一样 </span></div><div class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">'%d %s\\n'</span> 1 <span class=\"string\">\"abc\"</span> </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 没有引号也可以输出</span></div><div class=\"line\"><span class=\"built_in\">printf</span> %s abcdef</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 格式只指定了一个参数，但多出的参数仍然会按照该格式输出，format-string 被重用</span></div><div class=\"line\"><span class=\"built_in\">printf</span> %s abc def</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">\"%s\\n\"</span> abc def</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">\"%s %s %s\\n\"</span> a b c d e f g h i j</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 如果没有 arguments，那么 %s 用NULL代替，%d 用 0 代替</span></div><div class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">\"%s and %d \\n\"</span></div></pre></td></tr></table></figure>\n<p><strong>Printf的转移序列</strong></p>\n<table>\n<thead>\n<tr>\n<th>序列</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\a</td>\n<td>警告字符，通常为ASCII的BEL字符</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>后退</td>\n</tr>\n<tr>\n<td>\\c</td>\n<td>抑制不显示输出结果中任何姐wide换行字符（只在%b格式指示控制符下的参数字符串中有效），而且任何留在参数里的字符，任何接下来的采纳书以及任何留在格式字符串中的字符，都被忽略。</td>\n</tr>\n<tr>\n<td>\\f</td>\n<td>换页</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td>换行</td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>回车</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td>水平tab</td>\n</tr>\n<tr>\n<td>\\v</td>\n<td>竖直tab</td>\n</tr>\n<tr>\n<td>\\\\</td>\n<td>转义后输出一个\\符号</td>\n</tr>\n<tr>\n<td>\\d     dd</td>\n<td>表示1–3位的八进制字符，仅在格式字符串中有效。</td>\n</tr>\n<tr>\n<td>\\0     dd      d</td>\n<td>表示1–3位的八进制字符</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Shell-text命令\"><a href=\"#Shell-text命令\" class=\"headerlink\" title=\"Shell text命令\"></a>Shell text命令</h2><p>shell中test命令用于测试条件是否成立，可进行数字、字符和文件的条件测试</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#用之前的各种运算符，测试test</span></div><div class=\"line\">num1=100</div><div class=\"line\">num2=200</div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">test</span> $[num1] <span class=\"_\">-eq</span> $[num2]</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">'true'</span></div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">'false'</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div></pre></td></tr></table></figure>\n<h2 id=\"Shell-流程控制\"><a href=\"#Shell-流程控制\" class=\"headerlink\" title=\"Shell 流程控制\"></a>Shell 流程控制</h2><p>区别于其他编程语言，shell的流程控制不可为空，如</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>(a&gt;b)&#123;</div><div class=\"line\">  System.out.println(<span class=\"string\">\"ok\"</span>);</div><div class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">  <span class=\"comment\">//此处不做任何事</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>但是在shell中不能出现不做任何事的分支语句</p>\n<h3 id=\"1、if-else\"><a href=\"#1、if-else\" class=\"headerlink\" title=\"1、if else\"></a>1、if else</h3><ul>\n<li><p>if语句格式</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> condition</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">\t<span class=\"built_in\">command</span>1</div><div class=\"line\">\t<span class=\"built_in\">command</span>2</div><div class=\"line\">\t...</div><div class=\"line\"><span class=\"keyword\">fi</span> <span class=\"comment\"># 是if的倒写</span></div></pre></td></tr></table></figure>\n<p>每个句子可以用<code>;</code>分号结束，可以写在一行好几个语句。</p>\n</li>\n<li><p>if else</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> condition</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">\t<span class=\"built_in\">command</span>1</div><div class=\"line\">\t<span class=\"built_in\">command</span>2</div><div class=\"line\">\t...</div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">\t<span class=\"built_in\">command</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>if else-if else</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> condition1</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">\t<span class=\"built_in\">command</span>1</div><div class=\"line\"><span class=\"keyword\">elif</span> condition2 <span class=\"comment\">#类似python中，else if是写作elif</span></div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">\t<span class=\"built_in\">command</span>2</div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">\t<span class=\"built_in\">command</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"2、for循环\"><a href=\"#2、for循环\" class=\"headerlink\" title=\"2、for循环\"></a>2、for循环</h3><p>shell的for循环格式：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> item1 item2 ... itemN</div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">\t<span class=\"built_in\">command</span>1</div><div class=\"line\">\t<span class=\"built_in\">command</span>2</div><div class=\"line\">\t...</div><div class=\"line\">\t</div><div class=\"line\"><span class=\"keyword\">done</span> <span class=\"comment\">#for循环结束的标识</span></div><div class=\"line\"><span class=\"comment\">#写成一行</span></div><div class=\"line\"><span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> item1 item2 ... itemN;<span class=\"keyword\">do</span> <span class=\"built_in\">command</span>1; <span class=\"built_in\">command</span>2;...;<span class=\"keyword\">done</span>;</div></pre></td></tr></table></figure>\n<h3 id=\"3、while语句\"><a href=\"#3、while语句\" class=\"headerlink\" title=\"3、while语句\"></a>3、while语句</h3><p>格式：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">while</span> condition</div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">\t<span class=\"built_in\">command</span></div><div class=\"line\"><span class=\"keyword\">done</span></div><div class=\"line\"><span class=\"comment\">#示例</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#!/bin/sh</span></div><div class=\"line\">int=1</div><div class=\"line\"><span class=\"keyword\">while</span>(( <span class=\"variable\">$int</span>&lt;=5 ))</div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"variable\">$int</span></div><div class=\"line\">        <span class=\"built_in\">let</span> <span class=\"string\">\"int++\"</span> <span class=\"comment\"># let是个关键命令</span></div><div class=\"line\"><span class=\"keyword\">done</span></div></pre></td></tr></table></figure>\n<p>可以结合<code>read</code>命令接收输入信息</p>\n<h3 id=\"4、无限循环\"><a href=\"#4、无限循环\" class=\"headerlink\" title=\"4、无限循环\"></a>4、无限循环</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">while</span> :</div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">\t<span class=\"built_in\">command</span></div><div class=\"line\"><span class=\"keyword\">done</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#或者</span></div><div class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">\t<span class=\"built_in\">command</span></div><div class=\"line\"><span class=\"keyword\">done</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#或者</span></div><div class=\"line\"><span class=\"keyword\">for</span> (( ; ; ))</div></pre></td></tr></table></figure>\n<h3 id=\"5、until循环\"><a href=\"#5、until循环\" class=\"headerlink\" title=\"5、until循环\"></a>5、until循环</h3><p>shell所有的<code>until</code>循环类似于一个特殊的for循环，知道满足条件时候才停止。一般还是<code>while</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">until condition</div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">\t<span class=\"built_in\">command</span></div><div class=\"line\"><span class=\"keyword\">done</span></div></pre></td></tr></table></figure>\n<p><strong>条件可为任意测试条件，测试发生在循环末尾，因此循环至少执行一次—请注意这一点。</strong></p>\n<h3 id=\"6、case\"><a href=\"#6、case\" class=\"headerlink\" title=\"6、case\"></a>6、case</h3><p>类似其他语言的switch…case语句</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">case</span> value <span class=\"keyword\">in</span></div><div class=\"line\">mode1)</div><div class=\"line\">\t<span class=\"built_in\">command</span>1</div><div class=\"line\">\t...</div><div class=\"line\">\t;; <span class=\"comment\">#case的结束标志</span></div><div class=\"line\">mode2)</div><div class=\"line\">\t<span class=\"built_in\">command</span>2</div><div class=\"line\">\t...</div><div class=\"line\">\t;;</div><div class=\"line\"><span class=\"keyword\">esac</span> <span class=\"comment\">#case的反写</span></div></pre></td></tr></table></figure>\n<p>value只会匹配一个case，或者不匹配，则mode可用*号通配</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'输入 1 到 4 之间的数字:'</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'你输入的数字为:'</span></div><div class=\"line\"><span class=\"built_in\">read</span> aNum</div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"variable\">$aNum</span> <span class=\"keyword\">in</span></div><div class=\"line\">    1)  <span class=\"built_in\">echo</span> <span class=\"string\">'你选择了 1'</span></div><div class=\"line\">    ;;</div><div class=\"line\">    2)  <span class=\"built_in\">echo</span> <span class=\"string\">'你选择了 2'</span></div><div class=\"line\">    ;;</div><div class=\"line\">    3)  <span class=\"built_in\">echo</span> <span class=\"string\">'你选择了 3'</span></div><div class=\"line\">    ;;</div><div class=\"line\">    4)  <span class=\"built_in\">echo</span> <span class=\"string\">'你选择了 4'</span></div><div class=\"line\">    ;;</div><div class=\"line\">    *)  <span class=\"built_in\">echo</span> <span class=\"string\">'你没有输入 1 到 4 之间的数字'</span></div><div class=\"line\">    ;;</div><div class=\"line\"><span class=\"keyword\">esac</span></div></pre></td></tr></table></figure>\n<h3 id=\"7、跳出循环\"><a href=\"#7、跳出循环\" class=\"headerlink\" title=\"7、跳出循环\"></a>7、跳出循环</h3><p>shell也使用<code>break</code>和<code>continue</code>来跳出循环。</p>\n<ul>\n<li><p>break</p>\n<p>跳出所有循环，终止后面的执行。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"><span class=\"keyword\">while</span> :</div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> -n <span class=\"string\">\"输入 1 到 5 之间的数字:\"</span></div><div class=\"line\">    <span class=\"built_in\">read</span> aNum</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"variable\">$aNum</span> <span class=\"keyword\">in</span></div><div class=\"line\">        1|2|3|4|5) <span class=\"built_in\">echo</span> <span class=\"string\">\"你输入的数字为 <span class=\"variable\">$aNum</span>!\"</span></div><div class=\"line\">        ;;</div><div class=\"line\">        *) <span class=\"built_in\">echo</span> <span class=\"string\">\"你输入的数字不是 1 到 5 之间的! 游戏结束\"</span></div><div class=\"line\">            <span class=\"built_in\">break</span></div><div class=\"line\">        ;;</div><div class=\"line\">    <span class=\"keyword\">esac</span></div><div class=\"line\"><span class=\"keyword\">done</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>continue</p>\n<p>跳出本次循环，执行下一轮循环</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"><span class=\"keyword\">while</span> :</div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> -n <span class=\"string\">\"输入 1 到 5 之间的数字: \"</span></div><div class=\"line\">    <span class=\"built_in\">read</span> aNum</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"variable\">$aNum</span> <span class=\"keyword\">in</span></div><div class=\"line\">        1|2|3|4|5) <span class=\"built_in\">echo</span> <span class=\"string\">\"你输入的数字为 <span class=\"variable\">$aNum</span>!\"</span></div><div class=\"line\">        ;;</div><div class=\"line\">        *) <span class=\"built_in\">echo</span> <span class=\"string\">\"你输入的数字不是 1 到 5 之间的!\"</span></div><div class=\"line\">            <span class=\"built_in\">continue</span></div><div class=\"line\">            <span class=\"built_in\">echo</span> <span class=\"string\">\"游戏结束\"</span></div><div class=\"line\">        ;;</div><div class=\"line\">    <span class=\"keyword\">esac</span></div><div class=\"line\"><span class=\"keyword\">done</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"8、esac\"><a href=\"#8、esac\" class=\"headerlink\" title=\"8、esac\"></a>8、esac</h3><p>case语句区别于C语言，用esac作为结束标志，<code>)</code>和<code>;;</code>标识每个case。</p>\n<h2 id=\"Shell函数\"><a href=\"#Shell函数\" class=\"headerlink\" title=\"Shell函数\"></a>Shell函数</h2><p>shell可以自定义函数，然后自己调用。函数格式：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#function 关键字为可选项，参数也是可选</span></div><div class=\"line\">[ <span class=\"keyword\">function</span> ] funname [()]</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">  </div><div class=\"line\">  action;</div><div class=\"line\">  </div><div class=\"line\">  [<span class=\"built_in\">return</span> int;]</div><div class=\"line\">  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>说明：</strong></p>\n<ol>\n<li>可以带function fun()定义，也可以fun()定义，不带参数。</li>\n<li>参数返回，可以显示加: return 返回，若不加，则返回最后一条指令结果。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/bash</div><div class=\"line\"># author:菜鸟教程</div><div class=\"line\"># url:www.runoob.com</div><div class=\"line\"></div><div class=\"line\">demoFun()&#123;</div><div class=\"line\">    echo &quot;这是我的第一个 shell 函数!&quot;</div><div class=\"line\">&#125;</div><div class=\"line\">echo &quot;-----函数开始执行-----&quot;</div><div class=\"line\">demoFun</div><div class=\"line\">echo &quot;-----函数执行完毕-----&quot;</div></pre></td></tr></table></figure>\n<p>含有返回值的函数：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"><span class=\"comment\"># author:菜鸟教程</span></div><div class=\"line\"><span class=\"comment\"># url:www.runoob.com</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"title\">funWithReturn</span></span>()&#123;</div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"这个函数会对输入的两个数字进行相加运算...\"</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"输入第一个数字: \"</span></div><div class=\"line\">    <span class=\"built_in\">read</span> aNum</div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"输入第二个数字: \"</span></div><div class=\"line\">    <span class=\"built_in\">read</span> anotherNum</div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"两个数字分别为 <span class=\"variable\">$aNum</span> 和 <span class=\"variable\">$anotherNum</span> !\"</span></div><div class=\"line\">    <span class=\"built_in\">return</span> $((<span class=\"variable\">$aNum</span>+<span class=\"variable\">$anotherNum</span>))</div><div class=\"line\">&#125;</div><div class=\"line\">funWithReturn</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"输入的两个数字之和为 $? !\"</span></div></pre></td></tr></table></figure>\n<p>==调用函数返回值，用<code>$?</code>符号==，函数必须在被调用前定义。</p>\n<ul>\n<li><p>函数参数</p>\n<p>在Shell中，调用函数时可以向其传递参数。在函数体内部，通过 $n 的形式来获取参数的值，例如，$1表示第一个参数，$2表示第二个参数…</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"><span class=\"comment\"># author:菜鸟教程</span></div><div class=\"line\"><span class=\"comment\"># url:www.runoob.com</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"title\">funWithParam</span></span>()&#123;</div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"第一个参数为 <span class=\"variable\">$1</span> !\"</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"第二个参数为 <span class=\"variable\">$2</span> !\"</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"第十个参数为 <span class=\"variable\">$10</span> !\"</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"第十个参数为 <span class=\"variable\">$&#123;10&#125;</span> !\"</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"第十一个参数为 <span class=\"variable\">$&#123;11&#125;</span> !\"</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"参数总数有 <span class=\"variable\">$#</span> 个!\"</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"作为一个字符串输出所有参数 $* !\"</span></div><div class=\"line\">&#125;</div><div class=\"line\">funWithParam 1 2 3 4 5 6 7 8 9 34 73</div><div class=\"line\"><span class=\"comment\">#输出结果：</span></div><div class=\"line\">第一个参数为 1 !</div><div class=\"line\">第二个参数为 2 !</div><div class=\"line\">第十个参数为 10 !</div><div class=\"line\">第十个参数为 34 !</div><div class=\"line\">第十一个参数为 73 !</div><div class=\"line\">参数总数有 11 个!</div><div class=\"line\">作为一个字符串输出所有参数 1 2 3 4 5 6 7 8 9 34 73 !</div></pre></td></tr></table></figure>\n<p><strong>注意：</strong>\\$10不能获取第10个参数，因为当n&gt;=10时候，要用\\$(n)来获取参数。</p>\n</li>\n</ul>\n<h2 id=\"Shell-输入-输出重定向\"><a href=\"#Shell-输入-输出重定向\" class=\"headerlink\" title=\"Shell 输入/输出重定向\"></a>Shell 输入/输出重定向</h2><p>类Uinx系统中，默认标准输入输出设备就是shell终端。重定向命令列表：</p>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>command &gt; file</td>\n<td>输出重定向到file</td>\n</tr>\n<tr>\n<td>command &lt; file</td>\n<td>输出重定向到file</td>\n</tr>\n<tr>\n<td>command &gt;&gt; file</td>\n<td>输出追加到file</td>\n</tr>\n<tr>\n<td>n &gt; file</td>\n<td>文件描述符为n的文件重定向到file</td>\n</tr>\n<tr>\n<td>n &gt;&gt; file</td>\n<td>文件描述符为n的文件追加到file</td>\n</tr>\n<tr>\n<td>n &gt;&amp; m</td>\n<td>输出文件m和n合并</td>\n</tr>\n<tr>\n<td>n &lt;&amp; m</td>\n<td>输入文件m和n合并</td>\n</tr>\n<tr>\n<td>&lt;&lt; tag</td>\n<td>开始标记tag和结束标记tag之间的内容作为输入</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p><strong>注意：</strong>需要注意的是文件描述符 0 通常是标准输入（STDIN），1 是标准输出（STDOUT），2 是标准错误输出（STDERR）。</p>\n</blockquote>\n<h3 id=\"1、输出重定向\"><a href=\"#1、输出重定向\" class=\"headerlink\" title=\"1、输出重定向\"></a>1、输出重定向</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">command</span>1 &gt; file1</div></pre></td></tr></table></figure>\n<p>若file1存在，则被替代。可以用<code>&gt;&gt;</code>追加符号，则不替代。</p>\n<h3 id=\"2、输入重定向\"><a href=\"#2、输入重定向\" class=\"headerlink\" title=\"2、输入重定向\"></a>2、输入重定向</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">command</span>1 &lt; file1</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">command1 &lt; infile &gt; outfile</div></pre></td></tr></table></figure>\n<p>同时替换输入和输出，执行command1，从文件infile读取内容，然后将输出写入到outfile中。</p>\n<h3 id=\"3、重定向深入讲解\"><a href=\"#3、重定向深入讲解\" class=\"headerlink\" title=\"3、重定向深入讲解\"></a>3、重定向深入讲解</h3><p>一般类unix系统命令运行会同时打开三个文件：</p>\n<ul>\n<li>标准输入文件(stdin)：stdin的文件描述符为0，Unix程序默认从stdin读取数据。</li>\n<li>标准输出文件(stdout)：stdout 的文件描述符为1，Unix程序默认向stdout输出数据。</li>\n<li>标准错误文件(stderr)：stderr的文件描述符为2，Unix程序会向stderr流中写入错误信息</li>\n</ul>\n<p>默认情况下，command &gt; file 将 stdout 重定向到 file，command &lt; file 将stdin 重定向到 file。</p>\n<p>如果希望 stderr 重定向到 file，可以这样写：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#模拟终端</span></div><div class=\"line\">$ <span class=\"built_in\">command</span> 2 &gt; file</div></pre></td></tr></table></figure>\n<p>若要追加<code>&gt;&gt;</code>符号，其中2代表标准错误文件的代号。</p>\n<p>如果希望将stdout和stderr合并后重定向到file</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">command</span> &gt; file 2&gt;&amp;1</div><div class=\"line\"><span class=\"comment\">#或者</span></div><div class=\"line\"><span class=\"built_in\">command</span> &gt;&gt; file 2&gt;&amp;1</div><div class=\"line\"><span class=\"comment\">#如果输入、输出都重定向</span></div><div class=\"line\"><span class=\"built_in\">command</span> &lt;file1 &gt;file2</div></pre></td></tr></table></figure>\n<h3 id=\"4、Here-Document\"><a href=\"#4、Here-Document\" class=\"headerlink\" title=\"4、Here Document\"></a>4、Here Document</h3><p>Here Document是shell的一种特殊重定向方式，用于将输入重定向到一个交互式shell脚本或程序：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">command</span> &lt;&lt; delimiter</div><div class=\"line\">\tdocument</div><div class=\"line\">delimiter</div></pre></td></tr></table></figure>\n<p>作用将delimiter之间的document作为输入传递给command</p>\n<p><strong>注意：</strong>结尾的<code>delimiter</code>前后不得有任何符号，包括tab和空格。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">wc <span class=\"_\">-l</span> &lt;&lt; EOF</div><div class=\"line\">\tnihao</div><div class=\"line\">\tzhendehenhao</div><div class=\"line\">\tshime</div><div class=\"line\">\tok</div><div class=\"line\">EOF </div><div class=\"line\"><span class=\"comment\">#输出结果，获得的EOF之间的内容的行数。</span></div><div class=\"line\">4</div></pre></td></tr></table></figure>\n<h3 id=\"5、-dev-null文件\"><a href=\"#5、-dev-null文件\" class=\"headerlink\" title=\"5、/dev/null文件\"></a>5、/dev/null文件</h3><p>若希望执行命令不在屏幕输出，可重定向到/dev/null</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">command</span> &gt; /dev/null</div></pre></td></tr></table></figure>\n<p><code>/dev/null</code>为特殊文件，写入的内容立即不见，不可读出。</p>\n<p>如果屏蔽stdout和stderr</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">command</span> &gt; /dev/null 2&gt;&amp;1</div></pre></td></tr></table></figure>\n<h2 id=\"Shell文件包含\"><a href=\"#Shell文件包含\" class=\"headerlink\" title=\"Shell文件包含\"></a>Shell文件包含</h2><p>shell也可以使用外部脚本，便于封装：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">. filename <span class=\"comment\">#注意点号(.)与文件名之间有空格</span></div><div class=\"line\">或</div><div class=\"line\"><span class=\"built_in\">source</span> filename</div></pre></td></tr></table></figure>\n<p>示例：test1.sh</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"><span class=\"comment\"># author:菜鸟教程</span></div><div class=\"line\"><span class=\"comment\"># url:www.runoob.com</span></div><div class=\"line\"></div><div class=\"line\">url=<span class=\"string\">\"http://www.runoob.com\"</span></div></pre></td></tr></table></figure>\n<p>test2.sh</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"><span class=\"comment\"># author:菜鸟教程</span></div><div class=\"line\"><span class=\"comment\"># url:www.runoob.com</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#使用 . 号来引用test1.sh 文件</span></div><div class=\"line\">. ./<span class=\"built_in\">test</span>1.sh</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 或者使用以下包含文件代码</span></div><div class=\"line\"><span class=\"comment\"># source ./test1.sh</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"菜鸟教程官网地址：<span class=\"variable\">$url</span>\"</span></div></pre></td></tr></table></figure>\n<p>执行时候test2.sh只需要test2.sh有执行权限即可，test1.sh不一定需要。</p>\n","excerpt":"","more":"<h1 id=\"Shell学习笔记\"><a href=\"#Shell学习笔记\" class=\"headerlink\" title=\"Shell学习笔记\"></a>Shell学习笔记</h1><!-- TOC -->\n<ul>\n<li><a href=\"#shell学习笔记\">Shell学习笔记</a><ul>\n<li><a href=\"#简介\">简介：</a></li>\n<li><a href=\"#shell教程入门\">Shell教程入门</a><ul>\n<li><a href=\"#1shell脚本\">1、shell脚本</a></li>\n<li><a href=\"#2shell脚本实践\">2、shell脚本实践</a></li>\n</ul>\n</li>\n<li><a href=\"#shell变量\">Shell变量</a><ul>\n<li><a href=\"#1使用变量\">1、使用变量</a></li>\n<li><a href=\"#2只读变量\">2、只读变量</a></li>\n<li><a href=\"#3删除变量\">3、删除变量</a></li>\n<li><a href=\"#4变量类型\">4、变量类型</a></li>\n<li><a href=\"#5shell字符串\">5、shell字符串</a></li>\n<li><a href=\"#6shell数组\">6、Shell数组</a></li>\n<li><a href=\"#7shell注释\">7、Shell注释</a></li>\n</ul>\n</li>\n<li><a href=\"#shell传递参数\">Shell传递参数</a><ul>\n<li><a href=\"#1实例\">1、实例</a></li>\n</ul>\n</li>\n<li><a href=\"#shell数组\">Shell数组</a></li>\n<li><a href=\"#shell运算符\">Shell运算符</a><ul>\n<li><a href=\"#1算术运算符\">1、算术运算符</a></li>\n<li><a href=\"#2关系运算符\">2、关系运算符</a></li>\n<li><a href=\"#3布尔运算符\">3、布尔运算符</a></li>\n<li><a href=\"#4逻辑运算符\">4、逻辑运算符</a></li>\n<li><a href=\"#5字符串运算符\">5、字符串运算符</a></li>\n<li><a href=\"#6文件测试运算符\">6、文件测试运算符</a></li>\n</ul>\n</li>\n<li><a href=\"#shell-echo命令\">Shell echo命令</a></li>\n<li><a href=\"#shell-printf命令\">Shell printf命令</a></li>\n<li><a href=\"#shell-text命令\">Shell text命令</a></li>\n<li><a href=\"#shell-流程控制\">Shell 流程控制</a><ul>\n<li><a href=\"#1if-else\">1、if else</a></li>\n<li><a href=\"#2for循环\">2、for循环</a></li>\n<li><a href=\"#3while语句\">3、while语句</a></li>\n<li><a href=\"#4无限循环\">4、无限循环</a></li>\n<li><a href=\"#5until循环\">5、until循环</a></li>\n<li><a href=\"#6case\">6、case</a></li>\n<li><a href=\"#7跳出循环\">7、跳出循环</a></li>\n<li><a href=\"#8esac\">8、esac</a></li>\n</ul>\n</li>\n<li><a href=\"#shell函数\">Shell函数</a></li>\n<li><a href=\"#shell-输入输出重定向\">Shell 输入/输出重定向</a><ul>\n<li><a href=\"#1输出重定向\">1、输出重定向</a></li>\n<li><a href=\"#2输入重定向\">2、输入重定向</a></li>\n<li><a href=\"#3重定向深入讲解\">3、重定向深入讲解</a></li>\n<li><a href=\"#4here-document\">4、Here Document</a></li>\n<li><a href=\"#5devnull文件\">5、/dev/null文件</a></li>\n</ul>\n</li>\n<li><a href=\"#shell文件包含\">Shell文件包含</a></li>\n</ul>\n</li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"简介：\"><a href=\"#简介：\" class=\"headerlink\" title=\"简介：\"></a>简介：</h2><p>Shell 是一个用C语言编写的程序，它是用户使用Linux的桥梁。Shell既是一种命令语言，又是一种程序设计语言。</p>\n<p>Shell 是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的服务。</p>\n<p>Ken Thompson的sh是第一种Unix Shell，Windows Explorer是一个典型的图形界面Shell。</p>\n<h2 id=\"Shell教程入门\"><a href=\"#Shell教程入门\" class=\"headerlink\" title=\"Shell教程入门\"></a>Shell教程入门</h2><h3 id=\"1、shell脚本\"><a href=\"#1、shell脚本\" class=\"headerlink\" title=\"1、shell脚本\"></a>1、shell脚本</h3><blockquote>\n<p>shell脚本<code>shell script</code>，是一种为shell而编写的脚本程序。然而通常所说的shell却是指shell脚本，而非shell本身。</p>\n</blockquote>\n<p>Linux系统shell种类众多，常用的有<code>sh</code>和<code>bash</code>。</p>\n<h3 id=\"2、shell脚本实践\"><a href=\"#2、shell脚本实践\" class=\"headerlink\" title=\"2、shell脚本实践\"></a>2、shell脚本实践</h3><p>shell脚本用<code>#!/bin/bash</code>或<code>#!/bin/sh</code>之类的方式，制定运行脚本的shell,<code>#!</code>是识别符号。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/sh</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Hello World\"</span></div></pre></td></tr></table></figure>\n<p><strong>运行shell脚本的两种方法：</strong></p>\n<ul>\n<li><p>作为可执行程序</p>\n<p>将shell文本保存为<code>.sh</code>格式文件，赋予执行权限</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">chmod + x ./test.sh <span class=\"comment\"># 赋予可执行权限</span></div><div class=\"line\">./test.sh <span class=\"comment\">#执行脚本，注意此处需要指明当前目录下的test.sh哦，不然会去path路径找的，呵呵。</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>作为解释其参数</p>\n<p>直接解释运行,如此就不用写<code>#!/bin/sh</code>之类的引用注释了。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">/bin/sh test.sh</div><div class=\"line\"><span class=\"comment\"># 类似java、php、python脚本</span></div><div class=\"line\">/bin/php test.php</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Shell变量\"><a href=\"#Shell变量\" class=\"headerlink\" title=\"Shell变量\"></a>Shell变量</h2><p>变量命名语法，不需要<code>$</code>符号，php需要。命名要求：</p>\n<ul>\n<li>首字母必须字母<code>a-z或A-Z</code></li>\n<li>不能空格，可用<code>_</code></li>\n<li>不能标点</li>\n<li>不能使用<code>bash</code>关键字</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#注意，不同于其他编程语言，等号之间不要有空格。</span></div><div class=\"line\">your_variable=<span class=\"string\">\"your,name\"</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 使用语句给变量赋值，如下循环显示出/etc目录下的文件名</div><div class=\"line\">for file in &apos;ls /etc&apos;</div></pre></td></tr></table></figure>\n<h3 id=\"1、使用变量\"><a href=\"#1、使用变量\" class=\"headerlink\" title=\"1、使用变量\"></a>1、使用变量</h3><p>使用已定义变量，只需在变量前加<code>$</code>符号即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">your_variable=&apos;yourname&apos;</div><div class=\"line\">echo $your_variable</div><div class=\"line\">echo $(your_variable)</div></pre></td></tr></table></figure>\n<p>变量名可以加<code>{}</code>来标识变量名的范围，如：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> skill <span class=\"keyword\">in</span> Ada Coffe Action Java; <span class=\"keyword\">do</span></div><div class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">\"I am good at <span class=\"variable\">$&#123;skill&#125;</span>Script\"</span></div><div class=\"line\"><span class=\"keyword\">done</span></div></pre></td></tr></table></figure>\n<p><em>如果不加<code>{}</code>，<code>skill</code>就可能被认为<code>skillScript</code>而导致变量找不到</em></p>\n<p>已定义的变量可重新定义：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">your_name=<span class=\"string\">\"tom\"</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$your_name</span></div><div class=\"line\">your_name=<span class=\"string\">\"john\"</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$your_name</span></div></pre></td></tr></table></figure>\n<h3 id=\"2、只读变量\"><a href=\"#2、只读变量\" class=\"headerlink\" title=\"2、只读变量\"></a>2、只读变量</h3><p>使用<code>readonly</code>命令将变量只读，则不可再改变，否则报错。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\">myUrl=<span class=\"string\">\"http://www.w3cschool.cc\"</span></div><div class=\"line\"><span class=\"built_in\">readonly</span> myUrl</div><div class=\"line\">myUrl=<span class=\"string\">\"new url\"</span> <span class=\"comment\">#此处就会报错，因为变量只读了。</span></div></pre></td></tr></table></figure>\n<h3 id=\"3、删除变量\"><a href=\"#3、删除变量\" class=\"headerlink\" title=\"3、删除变量\"></a>3、删除变量</h3><p>使用<code>unset</code>命令删除变量：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">unset</span> variable_name</div></pre></td></tr></table></figure>\n<p>==删除变量后不能再用，而<code>unset</code>不能删除只读变量==</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/sh</span></div><div class=\"line\">myUrl=<span class=\"string\">\"http://www.google.com\"</span></div><div class=\"line\"><span class=\"built_in\">unset</span> myUrl</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$myUrl</span> <span class=\"comment\">#此时输出就没接过了，因为变量被删除了。</span></div></pre></td></tr></table></figure>\n<h3 id=\"4、变量类型\"><a href=\"#4、变量类型\" class=\"headerlink\" title=\"4、变量类型\"></a>4、变量类型</h3><p>运行shell时，会同时存在三种变量：</p>\n<ul>\n<li>局部变量：脚本中定义的变量，仅作用于本shell脚本内。</li>\n<li>环境变量：所有程序，包括shell启动程序都能访问的环境变量。</li>\n<li>shell变量：shell程序的特殊变量。</li>\n</ul>\n<h3 id=\"5、shell字符串\"><a href=\"#5、shell字符串\" class=\"headerlink\" title=\"5、shell字符串\"></a>5、shell字符串</h3><p>shell常用<code>number</code>和<code>string</code>，其中<code>string</code>可以单引号、双引号或者不用引号。但是略有区别：</p>\n<ul>\n<li><p>单引号</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">str=<span class=\"string\">'string test'</span></div></pre></td></tr></table></figure>\n<p>单引号<code>&#39;&#39;</code>之间的字符原样输出，里面的变量也会失效。其内部不能再有单引号，哪怕转义符号都失效。</p>\n</li>\n<li><p>双引号</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">your_name=&apos;your name&apos;</div><div class=\"line\">str=&quot;Hello ,world ,\\&quot;$your_name\\&quot;! \\n&quot;</div></pre></td></tr></table></figure>\n<p>双引号里面可以有变量，可以有转义符号。</p>\n</li>\n<li><p>字符串拼接</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">n1=<span class=\"string\">\"abc\"</span></div><div class=\"line\"><span class=\"built_in\">test</span>=<span class=\"string\">\"hello, \"</span><span class=\"variable\">$n1</span><span class=\"string\">\" !\"</span></div><div class=\"line\"><span class=\"built_in\">test</span>1=<span class=\"string\">\"hello, <span class=\"variable\">$&#123;n1&#125;</span> !\"</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$test</span> <span class=\"variable\">$test1</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>获取字符串长度</p>\n<p>使用<code>#</code>标识变量长度</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">str=<span class=\"string\">\"abcdef\"</span></div><div class=\"line\"><span class=\"comment\">#输出字符串长度</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;#str&#125;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>获取子字符串</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">str=<span class=\"string\">\"abcdef\"</span></div><div class=\"line\"><span class=\"comment\">#下标从左至右，0开始，</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;str:1:4&#125;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>查找子字符串</p>\n<p>使用`符号</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">str=<span class=\"string\">\"hello world nihaome\"</span></div><div class=\"line\"><span class=\"comment\">#查找字符i或s的位置,反引号</span></div><div class=\"line\"><span class=\"built_in\">echo</span> `expr index <span class=\"string\">\"<span class=\"variable\">$str</span>\"</span> is`</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"6、Shell数组\"><a href=\"#6、Shell数组\" class=\"headerlink\" title=\"6、Shell数组\"></a>6、Shell数组</h3><p>bash仅支持一维数组，可利用下标或表达式操作元素。</p>\n<ul>\n<li><p>定义数组</p>\n<p>shell中使用<code>()</code>表示数组，元素用空格来分割。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">array=(1 2 3 4 5 6 7)</div><div class=\"line\"><span class=\"comment\">#或者</span></div><div class=\"line\">array=(</div><div class=\"line\">a</div><div class=\"line\">b</div><div class=\"line\">c</div><div class=\"line\">)</div><div class=\"line\"><span class=\"comment\">#也可以单独定义,下标可以不连续，也无范围限制。</span></div><div class=\"line\">array[0]=1</div><div class=\"line\">array[1]=2</div><div class=\"line\">array[3]=7</div></pre></td></tr></table></figure>\n</li>\n<li><p>读取数组</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">variable=<span class=\"variable\">$&#123;array[index]&#125;</span></div><div class=\"line\"><span class=\"comment\"># @符号代替index表示获取所有元素</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;variable[@]&#125;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>获取数组长度</p>\n<p>类似字符串的获取</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#获取元素个数</span></div><div class=\"line\">length=<span class=\"variable\">$&#123;#array_name[@]&#125;</span></div><div class=\"line\"><span class=\"comment\">#或者*通配符</span></div><div class=\"line\">length=<span class=\"variable\">$&#123;#array_name[*]&#125;</span></div><div class=\"line\"><span class=\"comment\">#获取数组单个元素的长度</span></div><div class=\"line\">length_n=<span class=\"variable\">$&#123;#array_name[n]&#125;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"7、Shell注释\"><a href=\"#7、Shell注释\" class=\"headerlink\" title=\"7、Shell注释\"></a>7、Shell注释</h3><p>使用<code>#</code>至于行首，表示该行注释，shell无多行注释，只能每行都<code>#</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#-----------------------</span></div><div class=\"line\"><span class=\"comment\">#我是个多行注释</span></div><div class=\"line\"><span class=\"comment\">#但是只能这么写</span></div><div class=\"line\"><span class=\"comment\">#-----------------------</span></div></pre></td></tr></table></figure>\n<p>要是多行代码需要注释，可以将定义为函数，加<code>{}</code>包裹起来，该函数不被调用，则类似于注释掉。</p>\n<h2 id=\"Shell传递参数\"><a href=\"#Shell传递参数\" class=\"headerlink\" title=\"Shell传递参数\"></a>Shell传递参数</h2><p>在执行shell脚本时，可以向脚本传递参数，脚本内获取参数的格式：<code>$n</code>，n代表数字编号，为脚本内需要获取的参数的编号。</p>\n<h3 id=\"1、实例\"><a href=\"#1、实例\" class=\"headerlink\" title=\"1、实例\"></a>1、实例</h3><p>示例向脚本传递三个参数，并输出，<code>$0</code>为执行文件名：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/bash</div><div class=\"line\">#传参测试</div><div class=\"line\"></div><div class=\"line\">echo &quot;Shell 传参测试&quot;;</div><div class=\"line\">echo &quot;file name: $0&quot;;</div><div class=\"line\">echo &quot;first variable: $1&quot;;</div><div class=\"line\">echo &quot;second variable: $2&quot;</div><div class=\"line\">echo &quot;third variable: $3&quot;;</div></pre></td></tr></table></figure>\n<p>通过赋予权限，或者指定执行，可实现输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ chmod +x test.sh</div><div class=\"line\"># $符号在次表示root用户执行，下面是传入1，2，3，三个数到脚本</div><div class=\"line\">$ ./test.sh 1 2 3 </div><div class=\"line\"></div><div class=\"line\">#输出结果：</div><div class=\"line\">Shell 传参测试</div><div class=\"line\">file name: ./test.sh</div><div class=\"line\">first variable: 1</div><div class=\"line\">second variable 2</div><div class=\"line\">third variable 3</div></pre></td></tr></table></figure>\n<p>另有几个特殊字符处理参数：</p>\n<table>\n<thead>\n<tr>\n<th>参数处理</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$#</td>\n<td>传递到脚本的参数的个数</td>\n</tr>\n<tr>\n<td>$*</td>\n<td>以一个单字符串显示所有向脚本传递的参数。</td>\n</tr>\n<tr>\n<td>$$</td>\n<td>脚本运行的当前进程ID号</td>\n</tr>\n<tr>\n<td>$!</td>\n<td>后台运行的最后一个进程的ID号</td>\n</tr>\n<tr>\n<td>$@</td>\n<td>类似$*，使用时许加引号，并在引号中返回每个参数。</td>\n</tr>\n<tr>\n<td>$-</td>\n<td>显示shell使用的当前选选项，类似<code>set</code>命令</td>\n</tr>\n<tr>\n<td>$?</td>\n<td>显示最后命令的退出状态。0 表示无错误。其他都是错。</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/sh</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Shell 传递参数实例！\"</span>;</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"第一个参数为：<span class=\"variable\">$1</span>\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"参数个数为：<span class=\"variable\">$#</span>\"</span>;</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"传递的参数作为一个字符串显示：$*\"</span>;</div></pre></td></tr></table></figure>\n<p>执行效果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ chmod +x test.sh </div><div class=\"line\">$ ./test.sh 1 2 3</div><div class=\"line\">Shell 传递参数实例！</div><div class=\"line\">第一个参数为：1</div><div class=\"line\">参数个数为：3</div><div class=\"line\">传递的参数作为一个字符串显示：1 2 3</div></pre></td></tr></table></figure>\n<p><code>$*</code>与<code>$@</code>的异同：</p>\n<ul>\n<li><p>都是应用所有参数</p>\n</li>\n<li><p>不同：只有在双引号中体现。假设在脚本运行时写了三个参数 1、2、3，，则 “ * “ 等价于 “1 2 3”（传递了一个参数），而 “@” 等价于 “1” “2” “3”（传递了三个参数）。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"-- \\$* demo ---\"</span></div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"string\">\"$*\"</span>;<span class=\"keyword\">do</span></div><div class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"variable\">$i</span></div><div class=\"line\"><span class=\"keyword\">done</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"-- \\$@ demo ---\"</span></div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span>; <span class=\"keyword\">do</span></div><div class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"variable\">$i</span></div><div class=\"line\"><span class=\"keyword\">done</span></div></pre></td></tr></table></figure>\n<p>执行效果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ chmod +x test.sh </div><div class=\"line\">$ ./test.sh 1 2 3</div><div class=\"line\">-- $* 演示 ---</div><div class=\"line\">1 2 3</div><div class=\"line\">-- $@ 演示 ---</div><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Shell数组\"><a href=\"#Shell数组\" class=\"headerlink\" title=\"Shell数组\"></a>Shell数组</h2><p>Bash shell仅支持一维数组，不限定大小，初始化时候不需要指定大小。下标0开始，<code>()</code>包裹，空格分割元素。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">array=(a b c d)</div></pre></td></tr></table></figure>\n<ul>\n<li><p>读取数组</p>\n<p>格式<code>${array[index]}</code></p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/bash</div><div class=\"line\">my_array=(a b &quot;c&quot; d)</div><div class=\"line\"></div><div class=\"line\">echo &quot;first: $&#123;my_array[0]&#125;&quot;</div><div class=\"line\"></div><div class=\"line\">#然后执行文件，获得输出结果</div><div class=\"line\">#可用@或*来代替index获取所有元素</div></pre></td></tr></table></figure>\n<ul>\n<li><p>数组长度</p>\n<p>类似字符串的长度获取</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$&#123;#array[index]&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Shell运算符\"><a href=\"#Shell运算符\" class=\"headerlink\" title=\"Shell运算符\"></a>Shell运算符</h2><p>shell支持多种运算符：</p>\n<ul>\n<li>算数运算符</li>\n<li>关系运算符</li>\n<li>布尔运算符</li>\n<li>字符串运算符</li>\n<li>文件测试运算符</li>\n</ul>\n<p>原生Bash不支持简单的数学运算，可以用<code>awk</code>和<code>expr</code>实现。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/sh</span></div><div class=\"line\"></div><div class=\"line\">val=`expr 2 + 2`</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$val</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#注意，expr用反引号，表达式和运算符之间必须有空格，2+2就不行。</span></div></pre></td></tr></table></figure>\n<h3 id=\"1、算术运算符\"><a href=\"#1、算术运算符\" class=\"headerlink\" title=\"1、算术运算符\"></a>1、算术运算符</h3><p>若a = 10，b = 20</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>+</td>\n<td>加号</td>\n<td>`expr \\$a + \\$b`，result = 30</td>\n</tr>\n<tr>\n<td>-</td>\n<td>减号</td>\n<td>`expr \\$a - \\$b`，result = -10</td>\n</tr>\n<tr>\n<td>*</td>\n<td>乘号</td>\n<td>`expr \\$a * \\$b`，result = 200</td>\n</tr>\n<tr>\n<td>/</td>\n<td>除号</td>\n<td>`expr \\$b / \\$a`，result = 2</td>\n</tr>\n<tr>\n<td>%</td>\n<td>取余</td>\n<td>`expr \\$b % \\$a`，result=0</td>\n</tr>\n<tr>\n<td>=</td>\n<td>赋值</td>\n<td>a=$b，将b的值赋给a</td>\n</tr>\n<tr>\n<td>==</td>\n<td>相等，比较数字，同则true。</td>\n<td>[\\$a == \\$b]返回false</td>\n</tr>\n<tr>\n<td>!=</td>\n<td>不等，比较数字，不同的true。</td>\n<td>[\\$a != \\$b]返回true。</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/bash</div><div class=\"line\"># author:菜鸟教程</div><div class=\"line\"># url:www.runoob.com</div><div class=\"line\"></div><div class=\"line\">a=10</div><div class=\"line\">b=20</div><div class=\"line\"></div><div class=\"line\">val=`expr $a + $b`</div><div class=\"line\">echo &quot;a + b : $val&quot;</div><div class=\"line\"></div><div class=\"line\">val=`expr $a - $b`</div><div class=\"line\">echo &quot;a - b : $val&quot;</div><div class=\"line\"></div><div class=\"line\">val=`expr $a \\* $b`</div><div class=\"line\">echo &quot;a * b : $val&quot;</div><div class=\"line\"></div><div class=\"line\">val=`expr $b / $a`</div><div class=\"line\">echo &quot;b / a : $val&quot;</div><div class=\"line\"></div><div class=\"line\">val=`expr $b % $a`</div><div class=\"line\">echo &quot;b % a : $val&quot;</div><div class=\"line\"></div><div class=\"line\">if [ $a == $b ]</div><div class=\"line\">then</div><div class=\"line\">   echo &quot;a 等于 b&quot;</div><div class=\"line\">fi</div><div class=\"line\">if [ $a != $b ]</div><div class=\"line\">then</div><div class=\"line\">   echo &quot;a 不等于 b&quot;</div><div class=\"line\">fi</div></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">a + b : 30</div><div class=\"line\">a - b : -10</div><div class=\"line\">a * b : 200</div><div class=\"line\">b / a : 2</div><div class=\"line\">b % a : 0</div><div class=\"line\">a 不等于 b</div></pre></td></tr></table></figure>\n<p><strong>注意：</strong>条件表达式必须在<code>[]</code>之间，且必须有空格，如<strong>[\\$a==\\$b]</strong>是错的！</p>\n<blockquote>\n<p><code>*</code>乘号需要在<code>expr</code>表达式内用<code>\\</code>转义</p>\n<p>Mac电脑的shell的<code>expr</code>表达式：<strong>$((表达式))</strong>所以它的乘号<code>*</code>不用转义</p>\n</blockquote>\n<h3 id=\"2、关系运算符\"><a href=\"#2、关系运算符\" class=\"headerlink\" title=\"2、关系运算符\"></a>2、关系运算符</h3><p>布尔类型，关系运算符仅支持数字，除非字符串的值也是数字。示例，若a = 10 ,b = 20:</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-eq</td>\n<td>equal</td>\n</tr>\n<tr>\n<td>-ne</td>\n<td>not equal</td>\n</tr>\n<tr>\n<td>-gt</td>\n<td>great than</td>\n</tr>\n<tr>\n<td>-lt</td>\n<td>less than</td>\n</tr>\n<tr>\n<td>-ge</td>\n<td>great equal</td>\n</tr>\n<tr>\n<td>-le</td>\n<td>less equal</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"3、布尔运算符\"><a href=\"#3、布尔运算符\" class=\"headerlink\" title=\"3、布尔运算符\"></a>3、布尔运算符</h3><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>!</td>\n<td><code>非</code>运算，表达式为true，则返回false。</td>\n</tr>\n<tr>\n<td>-o</td>\n<td><code>或</code>运算，一个表达式为true，则返回true。</td>\n</tr>\n<tr>\n<td>-a</td>\n<td><code>与</code>运算，两个都true，才返回true。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"4、逻辑运算符\"><a href=\"#4、逻辑运算符\" class=\"headerlink\" title=\"4、逻辑运算符\"></a>4、逻辑运算符</h3><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&amp;&amp;</td>\n<td>逻辑and</td>\n</tr>\n<tr>\n<td>\\</td>\n<td>\\</td>\n<td></td>\n<td>逻辑 or</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"5、字符串运算符\"><a href=\"#5、字符串运算符\" class=\"headerlink\" title=\"5、字符串运算符\"></a>5、字符串运算符</h3><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>=</td>\n<td>检测两字符串是否相等</td>\n</tr>\n<tr>\n<td>!=</td>\n<td>检测两字符串是否不等</td>\n</tr>\n<tr>\n<td>-z</td>\n<td>zero检测字符串长度是否为0，0则true</td>\n</tr>\n<tr>\n<td>-n</td>\n<td>not zero检测字符串长度是否非0。</td>\n</tr>\n<tr>\n<td>str</td>\n<td>检测字符串是否为空，不空则true。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"6、文件测试运算符\"><a href=\"#6、文件测试运算符\" class=\"headerlink\" title=\"6、文件测试运算符\"></a>6、文件测试运算符</h3><p>用于检测类unix 文件的各种属性</p>\n<table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-b file</td>\n<td>是否是块设备文件，是则true</td>\n</tr>\n<tr>\n<td>-c file</td>\n<td>是否是字符设备文件，是则true</td>\n</tr>\n<tr>\n<td>-d file</td>\n<td>是否是目录，是则true</td>\n</tr>\n<tr>\n<td>-f file</td>\n<td>是否是普通文件(既非目录，亦非设备文件)，若是则true</td>\n</tr>\n<tr>\n<td>-g file</td>\n<td>是否设置了SGID位，是则true</td>\n</tr>\n<tr>\n<td>-k file</td>\n<td>是否设置粘着位，是则true</td>\n</tr>\n<tr>\n<td>-p file</td>\n<td>是否有名管道，是则true</td>\n</tr>\n<tr>\n<td>-u file</td>\n<td>是否设置SUID，是则true</td>\n</tr>\n<tr>\n<td>-r file</td>\n<td>是否可读，是则true</td>\n</tr>\n<tr>\n<td>-w file</td>\n<td>是否可写，是则true</td>\n</tr>\n<tr>\n<td>-x file</td>\n<td>是否可执行，是则true</td>\n</tr>\n<tr>\n<td>-s file</td>\n<td>是否为空或大小是否大于0，非空则true</td>\n</tr>\n<tr>\n<td>-e file</td>\n<td>是否存在，是则true</td>\n</tr>\n</tbody>\n</table>\n<p>==注意shell脚本的表达式都要在<code>[]</code>内哦==</p>\n<h2 id=\"Shell-echo命令\"><a href=\"#Shell-echo命令\" class=\"headerlink\" title=\"Shell echo命令\"></a>Shell echo命令</h2><p>类似于php的echo，shell的echo用于输出字符串，格式<code>echo string</code></p>\n<ul>\n<li>显示普通字符串</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo &quot;Hello World&quot;</div><div class=\"line\">#可以不带引号</div><div class=\"line\">echo Hello World</div></pre></td></tr></table></figure>\n<ul>\n<li><p>显示转义字符</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"\\\"It is a test\\\"\"</span></div><div class=\"line\"><span class=\"comment\">#输出结果</span></div><div class=\"line\"><span class=\"string\">\"It is a test\"</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>显示变量</p>\n<p><code>read</code>命令从标准输入中读取一行，并把输入行的每个字段指定给shell变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/sh</div><div class=\"line\">read name</div><div class=\"line\">echo &quot;$name It is a test&quot;</div><div class=\"line\"></div><div class=\"line\">#运行效果：</div><div class=\"line\">[root@www ~]# sh test.sh</div><div class=\"line\">OK                     #标准输入</div><div class=\"line\">OK It is a test        #输出</div></pre></td></tr></table></figure>\n</li>\n<li><p>显示换行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo -e &quot;Ok ! \\n&quot; # -e 开启转义</div><div class=\"line\">echo &quot;It is a test&quot;</div><div class=\"line\">#输出结果：注意ok后面有换行</div><div class=\"line\">OK!</div><div class=\"line\"></div><div class=\"line\">It it a tes</div></pre></td></tr></table></figure>\n</li>\n<li><p>显示不换行</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/sh</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"_\">-e</span> <span class=\"string\">\"OK! \\c\"</span> <span class=\"comment\"># -e 开启转义 \\c 不换行</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"It is a test\"</span></div><div class=\"line\"><span class=\"comment\">#结果：</span></div><div class=\"line\">OK! It is a <span class=\"built_in\">test</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>显示结果定向至文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo &quot;It is a test&quot; &gt; test.txt</div></pre></td></tr></table></figure>\n</li>\n<li><p>原样输出字符，不转义不取变量，需要结合单引号</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'$name\\\"'</span></div><div class=\"line\"><span class=\"comment\">#输出结果</span></div><div class=\"line\"><span class=\"variable\">$name</span>\\<span class=\"string\">\"</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>显示命令执行结果</p>\n<p>==命令用<code>` </code>来包裹==</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">echo</span> `data`</div><div class=\"line\"><span class=\"comment\">#结果：</span></div><div class=\"line\">Thu Jul 24 10:08:46 CST 2014</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Shell-printf命令\"><a href=\"#Shell-printf命令\" class=\"headerlink\" title=\"Shell printf命令\"></a>Shell printf命令</h2><p>类似C语言的printf()函数，shell使用printf会比echo更具有跨平台移植性。可以类似C的printf()函数使用一些复杂的表达式，printf不支持自动换行，需要借助<code>\\n</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">printf format-string [args...]</div></pre></td></tr></table></figure>\n<p>示例，模拟shell输出，</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">\"hello ,shell\"</span></div><div class=\"line\">hello ,shell</div><div class=\"line\">$ <span class=\"built_in\">printf</span> <span class=\"string\">\"hello ,shell \\n\"</span></div><div class=\"line\">hello ,shell</div><div class=\"line\">$</div></pre></td></tr></table></figure>\n<p>脚本化的printf命令使用：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"><span class=\"comment\"># author:菜鸟教程</span></div><div class=\"line\"><span class=\"comment\"># url:www.runoob.com</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">\"%-10s %-8s %-4s\\n\"</span> 姓名 性别 体重kg  </div><div class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">\"%-10s %-8s %-4.2f\\n\"</span> 郭靖 男 66.1234 </div><div class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">\"%-10s %-8s %-4.2f\\n\"</span> 杨过 男 48.6543 </div><div class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">\"%-10s %-8s %-4.2f\\n\"</span> 郭芙 女 47.9876</div></pre></td></tr></table></figure>\n<p>执行脚本，显示结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">姓名     性别   体重kg</div><div class=\"line\">郭靖     男      66.12</div><div class=\"line\">杨过     男      48.65</div><div class=\"line\">郭芙     女      47.99</div></pre></td></tr></table></figure>\n<p><code>%s,%c,%d,%f</code>都是格式替换符，<code>%-10s</code>指一个宽度为10个字符（-表示左对齐，没有则右对齐），任何字符都会被显示在10个字符宽的字符内，如果不足则自动以空格填充，超过也会将内容全部显示出来。</p>\n<p>%-4.2f 指格式化为小数，其中.2指保留2位小数。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"><span class=\"comment\"># author:菜鸟教程</span></div><div class=\"line\"><span class=\"comment\"># url:www.runoob.com</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># format-string为双引号</span></div><div class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">\"%d %s\\n\"</span> 1 <span class=\"string\">\"abc\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 单引号与双引号效果一样 </span></div><div class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">'%d %s\\n'</span> 1 <span class=\"string\">\"abc\"</span> </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 没有引号也可以输出</span></div><div class=\"line\"><span class=\"built_in\">printf</span> %s abcdef</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 格式只指定了一个参数，但多出的参数仍然会按照该格式输出，format-string 被重用</span></div><div class=\"line\"><span class=\"built_in\">printf</span> %s abc def</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">\"%s\\n\"</span> abc def</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">\"%s %s %s\\n\"</span> a b c d e f g h i j</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 如果没有 arguments，那么 %s 用NULL代替，%d 用 0 代替</span></div><div class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">\"%s and %d \\n\"</span></div></pre></td></tr></table></figure>\n<p><strong>Printf的转移序列</strong></p>\n<table>\n<thead>\n<tr>\n<th>序列</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\a</td>\n<td>警告字符，通常为ASCII的BEL字符</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>后退</td>\n</tr>\n<tr>\n<td>\\c</td>\n<td>抑制不显示输出结果中任何姐wide换行字符（只在%b格式指示控制符下的参数字符串中有效），而且任何留在参数里的字符，任何接下来的采纳书以及任何留在格式字符串中的字符，都被忽略。</td>\n</tr>\n<tr>\n<td>\\f</td>\n<td>换页</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td>换行</td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>回车</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td>水平tab</td>\n</tr>\n<tr>\n<td>\\v</td>\n<td>竖直tab</td>\n</tr>\n<tr>\n<td>\\\\</td>\n<td>转义后输出一个\\符号</td>\n</tr>\n<tr>\n<td>\\d     dd</td>\n<td>表示1–3位的八进制字符，仅在格式字符串中有效。</td>\n</tr>\n<tr>\n<td>\\0     dd      d</td>\n<td>表示1–3位的八进制字符</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Shell-text命令\"><a href=\"#Shell-text命令\" class=\"headerlink\" title=\"Shell text命令\"></a>Shell text命令</h2><p>shell中test命令用于测试条件是否成立，可进行数字、字符和文件的条件测试</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#用之前的各种运算符，测试test</span></div><div class=\"line\">num1=100</div><div class=\"line\">num2=200</div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">test</span> $[num1] <span class=\"_\">-eq</span> $[num2]</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">'true'</span></div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">'false'</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div></pre></td></tr></table></figure>\n<h2 id=\"Shell-流程控制\"><a href=\"#Shell-流程控制\" class=\"headerlink\" title=\"Shell 流程控制\"></a>Shell 流程控制</h2><p>区别于其他编程语言，shell的流程控制不可为空，如</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>(a&gt;b)&#123;</div><div class=\"line\">  System.out.println(<span class=\"string\">\"ok\"</span>);</div><div class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">  <span class=\"comment\">//此处不做任何事</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>但是在shell中不能出现不做任何事的分支语句</p>\n<h3 id=\"1、if-else\"><a href=\"#1、if-else\" class=\"headerlink\" title=\"1、if else\"></a>1、if else</h3><ul>\n<li><p>if语句格式</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> condition</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">\t<span class=\"built_in\">command</span>1</div><div class=\"line\">\t<span class=\"built_in\">command</span>2</div><div class=\"line\">\t...</div><div class=\"line\"><span class=\"keyword\">fi</span> <span class=\"comment\"># 是if的倒写</span></div></pre></td></tr></table></figure>\n<p>每个句子可以用<code>;</code>分号结束，可以写在一行好几个语句。</p>\n</li>\n<li><p>if else</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> condition</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">\t<span class=\"built_in\">command</span>1</div><div class=\"line\">\t<span class=\"built_in\">command</span>2</div><div class=\"line\">\t...</div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">\t<span class=\"built_in\">command</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>if else-if else</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> condition1</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">\t<span class=\"built_in\">command</span>1</div><div class=\"line\"><span class=\"keyword\">elif</span> condition2 <span class=\"comment\">#类似python中，else if是写作elif</span></div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">\t<span class=\"built_in\">command</span>2</div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">\t<span class=\"built_in\">command</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"2、for循环\"><a href=\"#2、for循环\" class=\"headerlink\" title=\"2、for循环\"></a>2、for循环</h3><p>shell的for循环格式：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> item1 item2 ... itemN</div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">\t<span class=\"built_in\">command</span>1</div><div class=\"line\">\t<span class=\"built_in\">command</span>2</div><div class=\"line\">\t...</div><div class=\"line\">\t</div><div class=\"line\"><span class=\"keyword\">done</span> <span class=\"comment\">#for循环结束的标识</span></div><div class=\"line\"><span class=\"comment\">#写成一行</span></div><div class=\"line\"><span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> item1 item2 ... itemN;<span class=\"keyword\">do</span> <span class=\"built_in\">command</span>1; <span class=\"built_in\">command</span>2;...;<span class=\"keyword\">done</span>;</div></pre></td></tr></table></figure>\n<h3 id=\"3、while语句\"><a href=\"#3、while语句\" class=\"headerlink\" title=\"3、while语句\"></a>3、while语句</h3><p>格式：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">while</span> condition</div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">\t<span class=\"built_in\">command</span></div><div class=\"line\"><span class=\"keyword\">done</span></div><div class=\"line\"><span class=\"comment\">#示例</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#!/bin/sh</span></div><div class=\"line\">int=1</div><div class=\"line\"><span class=\"keyword\">while</span>(( <span class=\"variable\">$int</span>&lt;=5 ))</div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"variable\">$int</span></div><div class=\"line\">        <span class=\"built_in\">let</span> <span class=\"string\">\"int++\"</span> <span class=\"comment\"># let是个关键命令</span></div><div class=\"line\"><span class=\"keyword\">done</span></div></pre></td></tr></table></figure>\n<p>可以结合<code>read</code>命令接收输入信息</p>\n<h3 id=\"4、无限循环\"><a href=\"#4、无限循环\" class=\"headerlink\" title=\"4、无限循环\"></a>4、无限循环</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">while</span> :</div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">\t<span class=\"built_in\">command</span></div><div class=\"line\"><span class=\"keyword\">done</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#或者</span></div><div class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">\t<span class=\"built_in\">command</span></div><div class=\"line\"><span class=\"keyword\">done</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#或者</span></div><div class=\"line\"><span class=\"keyword\">for</span> (( ; ; ))</div></pre></td></tr></table></figure>\n<h3 id=\"5、until循环\"><a href=\"#5、until循环\" class=\"headerlink\" title=\"5、until循环\"></a>5、until循环</h3><p>shell所有的<code>until</code>循环类似于一个特殊的for循环，知道满足条件时候才停止。一般还是<code>while</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">until condition</div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">\t<span class=\"built_in\">command</span></div><div class=\"line\"><span class=\"keyword\">done</span></div></pre></td></tr></table></figure>\n<p><strong>条件可为任意测试条件，测试发生在循环末尾，因此循环至少执行一次—请注意这一点。</strong></p>\n<h3 id=\"6、case\"><a href=\"#6、case\" class=\"headerlink\" title=\"6、case\"></a>6、case</h3><p>类似其他语言的switch…case语句</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">case</span> value <span class=\"keyword\">in</span></div><div class=\"line\">mode1)</div><div class=\"line\">\t<span class=\"built_in\">command</span>1</div><div class=\"line\">\t...</div><div class=\"line\">\t;; <span class=\"comment\">#case的结束标志</span></div><div class=\"line\">mode2)</div><div class=\"line\">\t<span class=\"built_in\">command</span>2</div><div class=\"line\">\t...</div><div class=\"line\">\t;;</div><div class=\"line\"><span class=\"keyword\">esac</span> <span class=\"comment\">#case的反写</span></div></pre></td></tr></table></figure>\n<p>value只会匹配一个case，或者不匹配，则mode可用*号通配</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'输入 1 到 4 之间的数字:'</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'你输入的数字为:'</span></div><div class=\"line\"><span class=\"built_in\">read</span> aNum</div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"variable\">$aNum</span> <span class=\"keyword\">in</span></div><div class=\"line\">    1)  <span class=\"built_in\">echo</span> <span class=\"string\">'你选择了 1'</span></div><div class=\"line\">    ;;</div><div class=\"line\">    2)  <span class=\"built_in\">echo</span> <span class=\"string\">'你选择了 2'</span></div><div class=\"line\">    ;;</div><div class=\"line\">    3)  <span class=\"built_in\">echo</span> <span class=\"string\">'你选择了 3'</span></div><div class=\"line\">    ;;</div><div class=\"line\">    4)  <span class=\"built_in\">echo</span> <span class=\"string\">'你选择了 4'</span></div><div class=\"line\">    ;;</div><div class=\"line\">    *)  <span class=\"built_in\">echo</span> <span class=\"string\">'你没有输入 1 到 4 之间的数字'</span></div><div class=\"line\">    ;;</div><div class=\"line\"><span class=\"keyword\">esac</span></div></pre></td></tr></table></figure>\n<h3 id=\"7、跳出循环\"><a href=\"#7、跳出循环\" class=\"headerlink\" title=\"7、跳出循环\"></a>7、跳出循环</h3><p>shell也使用<code>break</code>和<code>continue</code>来跳出循环。</p>\n<ul>\n<li><p>break</p>\n<p>跳出所有循环，终止后面的执行。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"><span class=\"keyword\">while</span> :</div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> -n <span class=\"string\">\"输入 1 到 5 之间的数字:\"</span></div><div class=\"line\">    <span class=\"built_in\">read</span> aNum</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"variable\">$aNum</span> <span class=\"keyword\">in</span></div><div class=\"line\">        1|2|3|4|5) <span class=\"built_in\">echo</span> <span class=\"string\">\"你输入的数字为 <span class=\"variable\">$aNum</span>!\"</span></div><div class=\"line\">        ;;</div><div class=\"line\">        *) <span class=\"built_in\">echo</span> <span class=\"string\">\"你输入的数字不是 1 到 5 之间的! 游戏结束\"</span></div><div class=\"line\">            <span class=\"built_in\">break</span></div><div class=\"line\">        ;;</div><div class=\"line\">    <span class=\"keyword\">esac</span></div><div class=\"line\"><span class=\"keyword\">done</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>continue</p>\n<p>跳出本次循环，执行下一轮循环</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"><span class=\"keyword\">while</span> :</div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> -n <span class=\"string\">\"输入 1 到 5 之间的数字: \"</span></div><div class=\"line\">    <span class=\"built_in\">read</span> aNum</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"variable\">$aNum</span> <span class=\"keyword\">in</span></div><div class=\"line\">        1|2|3|4|5) <span class=\"built_in\">echo</span> <span class=\"string\">\"你输入的数字为 <span class=\"variable\">$aNum</span>!\"</span></div><div class=\"line\">        ;;</div><div class=\"line\">        *) <span class=\"built_in\">echo</span> <span class=\"string\">\"你输入的数字不是 1 到 5 之间的!\"</span></div><div class=\"line\">            <span class=\"built_in\">continue</span></div><div class=\"line\">            <span class=\"built_in\">echo</span> <span class=\"string\">\"游戏结束\"</span></div><div class=\"line\">        ;;</div><div class=\"line\">    <span class=\"keyword\">esac</span></div><div class=\"line\"><span class=\"keyword\">done</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"8、esac\"><a href=\"#8、esac\" class=\"headerlink\" title=\"8、esac\"></a>8、esac</h3><p>case语句区别于C语言，用esac作为结束标志，<code>)</code>和<code>;;</code>标识每个case。</p>\n<h2 id=\"Shell函数\"><a href=\"#Shell函数\" class=\"headerlink\" title=\"Shell函数\"></a>Shell函数</h2><p>shell可以自定义函数，然后自己调用。函数格式：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#function 关键字为可选项，参数也是可选</span></div><div class=\"line\">[ <span class=\"keyword\">function</span> ] funname [()]</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">  </div><div class=\"line\">  action;</div><div class=\"line\">  </div><div class=\"line\">  [<span class=\"built_in\">return</span> int;]</div><div class=\"line\">  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>说明：</strong></p>\n<ol>\n<li>可以带function fun()定义，也可以fun()定义，不带参数。</li>\n<li>参数返回，可以显示加: return 返回，若不加，则返回最后一条指令结果。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/bash</div><div class=\"line\"># author:菜鸟教程</div><div class=\"line\"># url:www.runoob.com</div><div class=\"line\"></div><div class=\"line\">demoFun()&#123;</div><div class=\"line\">    echo &quot;这是我的第一个 shell 函数!&quot;</div><div class=\"line\">&#125;</div><div class=\"line\">echo &quot;-----函数开始执行-----&quot;</div><div class=\"line\">demoFun</div><div class=\"line\">echo &quot;-----函数执行完毕-----&quot;</div></pre></td></tr></table></figure>\n<p>含有返回值的函数：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"><span class=\"comment\"># author:菜鸟教程</span></div><div class=\"line\"><span class=\"comment\"># url:www.runoob.com</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"title\">funWithReturn</span></span>()&#123;</div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"这个函数会对输入的两个数字进行相加运算...\"</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"输入第一个数字: \"</span></div><div class=\"line\">    <span class=\"built_in\">read</span> aNum</div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"输入第二个数字: \"</span></div><div class=\"line\">    <span class=\"built_in\">read</span> anotherNum</div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"两个数字分别为 <span class=\"variable\">$aNum</span> 和 <span class=\"variable\">$anotherNum</span> !\"</span></div><div class=\"line\">    <span class=\"built_in\">return</span> $((<span class=\"variable\">$aNum</span>+<span class=\"variable\">$anotherNum</span>))</div><div class=\"line\">&#125;</div><div class=\"line\">funWithReturn</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"输入的两个数字之和为 $? !\"</span></div></pre></td></tr></table></figure>\n<p>==调用函数返回值，用<code>$?</code>符号==，函数必须在被调用前定义。</p>\n<ul>\n<li><p>函数参数</p>\n<p>在Shell中，调用函数时可以向其传递参数。在函数体内部，通过 $n 的形式来获取参数的值，例如，$1表示第一个参数，$2表示第二个参数…</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"><span class=\"comment\"># author:菜鸟教程</span></div><div class=\"line\"><span class=\"comment\"># url:www.runoob.com</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"title\">funWithParam</span></span>()&#123;</div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"第一个参数为 <span class=\"variable\">$1</span> !\"</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"第二个参数为 <span class=\"variable\">$2</span> !\"</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"第十个参数为 <span class=\"variable\">$10</span> !\"</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"第十个参数为 <span class=\"variable\">$&#123;10&#125;</span> !\"</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"第十一个参数为 <span class=\"variable\">$&#123;11&#125;</span> !\"</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"参数总数有 <span class=\"variable\">$#</span> 个!\"</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"作为一个字符串输出所有参数 $* !\"</span></div><div class=\"line\">&#125;</div><div class=\"line\">funWithParam 1 2 3 4 5 6 7 8 9 34 73</div><div class=\"line\"><span class=\"comment\">#输出结果：</span></div><div class=\"line\">第一个参数为 1 !</div><div class=\"line\">第二个参数为 2 !</div><div class=\"line\">第十个参数为 10 !</div><div class=\"line\">第十个参数为 34 !</div><div class=\"line\">第十一个参数为 73 !</div><div class=\"line\">参数总数有 11 个!</div><div class=\"line\">作为一个字符串输出所有参数 1 2 3 4 5 6 7 8 9 34 73 !</div></pre></td></tr></table></figure>\n<p><strong>注意：</strong>\\$10不能获取第10个参数，因为当n&gt;=10时候，要用\\$(n)来获取参数。</p>\n</li>\n</ul>\n<h2 id=\"Shell-输入-输出重定向\"><a href=\"#Shell-输入-输出重定向\" class=\"headerlink\" title=\"Shell 输入/输出重定向\"></a>Shell 输入/输出重定向</h2><p>类Uinx系统中，默认标准输入输出设备就是shell终端。重定向命令列表：</p>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>command &gt; file</td>\n<td>输出重定向到file</td>\n</tr>\n<tr>\n<td>command &lt; file</td>\n<td>输出重定向到file</td>\n</tr>\n<tr>\n<td>command &gt;&gt; file</td>\n<td>输出追加到file</td>\n</tr>\n<tr>\n<td>n &gt; file</td>\n<td>文件描述符为n的文件重定向到file</td>\n</tr>\n<tr>\n<td>n &gt;&gt; file</td>\n<td>文件描述符为n的文件追加到file</td>\n</tr>\n<tr>\n<td>n &gt;&amp; m</td>\n<td>输出文件m和n合并</td>\n</tr>\n<tr>\n<td>n &lt;&amp; m</td>\n<td>输入文件m和n合并</td>\n</tr>\n<tr>\n<td>&lt;&lt; tag</td>\n<td>开始标记tag和结束标记tag之间的内容作为输入</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p><strong>注意：</strong>需要注意的是文件描述符 0 通常是标准输入（STDIN），1 是标准输出（STDOUT），2 是标准错误输出（STDERR）。</p>\n</blockquote>\n<h3 id=\"1、输出重定向\"><a href=\"#1、输出重定向\" class=\"headerlink\" title=\"1、输出重定向\"></a>1、输出重定向</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">command</span>1 &gt; file1</div></pre></td></tr></table></figure>\n<p>若file1存在，则被替代。可以用<code>&gt;&gt;</code>追加符号，则不替代。</p>\n<h3 id=\"2、输入重定向\"><a href=\"#2、输入重定向\" class=\"headerlink\" title=\"2、输入重定向\"></a>2、输入重定向</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">command</span>1 &lt; file1</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">command1 &lt; infile &gt; outfile</div></pre></td></tr></table></figure>\n<p>同时替换输入和输出，执行command1，从文件infile读取内容，然后将输出写入到outfile中。</p>\n<h3 id=\"3、重定向深入讲解\"><a href=\"#3、重定向深入讲解\" class=\"headerlink\" title=\"3、重定向深入讲解\"></a>3、重定向深入讲解</h3><p>一般类unix系统命令运行会同时打开三个文件：</p>\n<ul>\n<li>标准输入文件(stdin)：stdin的文件描述符为0，Unix程序默认从stdin读取数据。</li>\n<li>标准输出文件(stdout)：stdout 的文件描述符为1，Unix程序默认向stdout输出数据。</li>\n<li>标准错误文件(stderr)：stderr的文件描述符为2，Unix程序会向stderr流中写入错误信息</li>\n</ul>\n<p>默认情况下，command &gt; file 将 stdout 重定向到 file，command &lt; file 将stdin 重定向到 file。</p>\n<p>如果希望 stderr 重定向到 file，可以这样写：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#模拟终端</span></div><div class=\"line\">$ <span class=\"built_in\">command</span> 2 &gt; file</div></pre></td></tr></table></figure>\n<p>若要追加<code>&gt;&gt;</code>符号，其中2代表标准错误文件的代号。</p>\n<p>如果希望将stdout和stderr合并后重定向到file</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">command</span> &gt; file 2&gt;&amp;1</div><div class=\"line\"><span class=\"comment\">#或者</span></div><div class=\"line\"><span class=\"built_in\">command</span> &gt;&gt; file 2&gt;&amp;1</div><div class=\"line\"><span class=\"comment\">#如果输入、输出都重定向</span></div><div class=\"line\"><span class=\"built_in\">command</span> &lt;file1 &gt;file2</div></pre></td></tr></table></figure>\n<h3 id=\"4、Here-Document\"><a href=\"#4、Here-Document\" class=\"headerlink\" title=\"4、Here Document\"></a>4、Here Document</h3><p>Here Document是shell的一种特殊重定向方式，用于将输入重定向到一个交互式shell脚本或程序：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">command</span> &lt;&lt; delimiter</div><div class=\"line\">\tdocument</div><div class=\"line\">delimiter</div></pre></td></tr></table></figure>\n<p>作用将delimiter之间的document作为输入传递给command</p>\n<p><strong>注意：</strong>结尾的<code>delimiter</code>前后不得有任何符号，包括tab和空格。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">wc <span class=\"_\">-l</span> &lt;&lt; EOF</div><div class=\"line\">\tnihao</div><div class=\"line\">\tzhendehenhao</div><div class=\"line\">\tshime</div><div class=\"line\">\tok</div><div class=\"line\">EOF </div><div class=\"line\"><span class=\"comment\">#输出结果，获得的EOF之间的内容的行数。</span></div><div class=\"line\">4</div></pre></td></tr></table></figure>\n<h3 id=\"5、-dev-null文件\"><a href=\"#5、-dev-null文件\" class=\"headerlink\" title=\"5、/dev/null文件\"></a>5、/dev/null文件</h3><p>若希望执行命令不在屏幕输出，可重定向到/dev/null</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">command</span> &gt; /dev/null</div></pre></td></tr></table></figure>\n<p><code>/dev/null</code>为特殊文件，写入的内容立即不见，不可读出。</p>\n<p>如果屏蔽stdout和stderr</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">command</span> &gt; /dev/null 2&gt;&amp;1</div></pre></td></tr></table></figure>\n<h2 id=\"Shell文件包含\"><a href=\"#Shell文件包含\" class=\"headerlink\" title=\"Shell文件包含\"></a>Shell文件包含</h2><p>shell也可以使用外部脚本，便于封装：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">. filename <span class=\"comment\">#注意点号(.)与文件名之间有空格</span></div><div class=\"line\">或</div><div class=\"line\"><span class=\"built_in\">source</span> filename</div></pre></td></tr></table></figure>\n<p>示例：test1.sh</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"><span class=\"comment\"># author:菜鸟教程</span></div><div class=\"line\"><span class=\"comment\"># url:www.runoob.com</span></div><div class=\"line\"></div><div class=\"line\">url=<span class=\"string\">\"http://www.runoob.com\"</span></div></pre></td></tr></table></figure>\n<p>test2.sh</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"><span class=\"comment\"># author:菜鸟教程</span></div><div class=\"line\"><span class=\"comment\"># url:www.runoob.com</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#使用 . 号来引用test1.sh 文件</span></div><div class=\"line\">. ./<span class=\"built_in\">test</span>1.sh</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 或者使用以下包含文件代码</span></div><div class=\"line\"><span class=\"comment\"># source ./test1.sh</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"菜鸟教程官网地址：<span class=\"variable\">$url</span>\"</span></div></pre></td></tr></table></figure>\n<p>执行时候test2.sh只需要test2.sh有执行权限即可，test1.sh不一定需要。</p>\n"},{"title":"Windows系统安装","date":"2015-12-06T08:28:00.000Z","author":"冰路梦","_content":"# Windows系统安装\n\n声明：本文仅用于技术交流，按照文章操作理论上不会出现故障和问题，但可能由于不同机器、不同人员的不同的偶然的操作失误，会引起不同的未知问题，则不属于本文技术指导的责任，按照本文操作，则视为操作者责任自负。\n\n \n\n一、安装准备\n\n1、系统源的选择（三种方式）\n\n①、微软官方系统镜像，纯净正版，从源头避免系统附带木马病毒等流氓软件。\n\n[http://msdn.itellyou.cn/](http://msdn.itellyou.cn/)\n\n[http://www.msdn.hk/](http://www.msdn.hk/)\n\n以上为两个常用的原版系统下载网址，在操作系统栏选择所需系统，下载对应的发行版，注意x86和x64的选择。（如今新机器基本都是x64，2010年前的多是x86）\n\n ![img](windows系统安装/msdn.png)\n\n②、第三方Ghost系统，安装简便，免激活，不敢保证无病毒和捆绑软件等。\n\n百度一下Ghost系统，太多下载网址，系统之家相对还算不错。\n\n③、官方OEM系统，相对纯净，免激活，只是不太好找资源。\n\n可根据个人笔记本品牌搜索对应oem系统，如百度“联想win7 oem系统”。\n\n2、安装盘制作（三种方式）\n\n①、光盘刻录，需要空白光盘，使用光驱刻录。刻录工具很多，此处使用软碟通UltralIOS工具刻录：\n\na）、选择下载好的iso格式的系统镜像，打开。\n\n ![img](windows系统安装/ultralISO.png)\n\nb）、放置空光盘入光驱后，点击如下图位置，刻录光盘。\n\n![img](windows系统安装/刻录.png)\n\nc）、刻录镜像到光盘，等待完成，可选择刻录校验，以保证刻录的完整正确。此处注意光盘的大小空间要大于镜像的大小。一般xp原镜像用cd光碟700M大小即可。Win7或者之后系统需要DVD光碟4.7G大小。\n\n![img](windows系统安装/校验.png)\n\nd）、刻录完成后，即可进入安装步骤。\n\n②、U盘刻录，较光盘安装效率更高，U盘大小需要大于iso镜像。依然用UltralISO刻录。\n\na)、打开下载后的iso系统镜像。\n\nb)、选择启动--写入硬盘镜像。\n\n![img](windows系统安装/写入.png)\n\nc)、放入空白U盘（会被格式化，U盘上资料提前备份到他处），写入usb-hdd+引导。写入方式也选择usb-hdd+\n\n ![img](windows系统安装/引导.png) \n\nd)、格式化，写入完成后进入安装步骤。\n\n③、硬盘安装，安装速度快，对新手操作略繁琐（主要指PE系统的使用）\n\na)、xp-->win7，或者类似的低版本系统升级高版本系统，且两个系统都是x86或者x64的，可以将下载后的iso系统镜像文件，用winRAR之类的解压缩工具解压到非C盘的磁盘目录下，然后双击运行Setup.exe即可进入安装步骤。\n\nb)、上一步也可以用虚拟光驱工具，加载iso系统镜像，然后再“我的电脑”下找到加载后的系统安装盘，双击运行其中的setup.exe进入安装步骤。\n\n ![img](windows系统安装/镜像.png)\n\n ![img](windows系统安装/镜像2.png)\n\nc)、如上两条均需要当前系统可用的前提下，满足一定条件才可实现。倘若系统崩溃无法进入系统，则需要使用其他电脑制作安装光盘/U盘，放于本电脑来安装。亦或者，有PE系统，进入PE系统环境安装。（PE系统的制作，稍后再讲）\n\n三、系统安装\n\n1、将制作好的安装光盘/U盘连接电脑\n\n2、开机选择进入启动选择菜单，不同品牌电脑的进入方式不同，一般在开机显示品牌LOGO时，下面会有提示。Lenovo是按F12进入快速选择启动项，其他品牌自行百度，如“联想进入开机选项方式”。一般为Delete，Esc，F2等。\n\n3、进入启动项菜单后，若是光盘为安装盘，一般不用上一步就会进入安装界面，但有的也需要在此步骤选择光驱启动，回车即可。U盘为安装盘，则选择对应的USB启动项。\n\n4、如上无误则进入安装界面，一路下一步即可\n\n ![img](windows系统安装/安装语言.png) \n\n5、在下图步骤时，非全新硬盘则选择C盘，可以点击高级选项中，可以格式化，分区等，C盘数据会丢失，所以安装系统前备份好个人C盘的重要资料，如我的文档，桌面等等上面的资料。（崩溃后的系统可以在PE环境下备份数据）\n\n![img](windows系统安装/选择分区.png)\n\n6、几乎一路下一步就可完成安装，系统可能会让提供安装密钥，可百度相应系统的序列号即可。（在第一步中选择的不同系统源，决定安装步骤的差异，一般大致相同）\n\n ![img](http://img.blog.csdn.net/20151206161206568?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n ![img](windows系统安装/安装完成.png)\n\n四、系统设置及优化\n\n至此即可完成系统的安装，windows系列的安装大同小异，安装好系统仅仅是一个好的桌面系统环境的第一步，之后需要打补丁，装软件，优化设置，其重要性不亚于系统的安装，有一个良好的使用习惯，会让你的电脑保持较为长久的流畅和高效状态。\n\n纯净初装系统并无集成驱动，甚至无法联网，用户需要从他处下载带网卡驱动的驱动精灵或驱动人生等，安装后一键安装所有必须的驱动，同时安装必要的软件，安装补丁等。\n\n需要注意的是下载软件尽可能都在官网下载，安装时候注意选择自定安装，留心去掉需要没用的默认勾选，否则可能会被附带安装太多不要的东西。安装软件建议安装到D盘下自建一个公用目录，最好英文无空格，以免极个别奇葩软件无法运行。\n\n任何软件的安装后，都需要进行设置，更改其设置中暗含的默认选项，免除流氓广告和其他无关行为。\n\n系统装好驱动和补丁后，及时清理系统垃圾，优化设置，具体优化无法一篇概论，提供一些个人用的优化工具，请自行使用，优化工具需要善用，错误操作责任自负。\n\n另：建议系统设置优化完成后，安装一个Ghost备份工具，备份系统，或者是本地PE系统，以备不时之需。\n\n ![img](windows系统安装/onekey.png)![img](windows系统安装/pe.png)\n\n附件：本文所需工具均可自行在网上下载官方版本。---UltralISO：OneKey：微PE：魔方优化：--- ","source":"_posts/windows系统安装.md","raw":"---\ntitle: \"Windows系统安装\"\ndate: 2015-12-06 16:28\nauthor: 冰路梦\ntag:\n    - Windows\ncategories:\n    - Windows\n---\n# Windows系统安装\n\n声明：本文仅用于技术交流，按照文章操作理论上不会出现故障和问题，但可能由于不同机器、不同人员的不同的偶然的操作失误，会引起不同的未知问题，则不属于本文技术指导的责任，按照本文操作，则视为操作者责任自负。\n\n \n\n一、安装准备\n\n1、系统源的选择（三种方式）\n\n①、微软官方系统镜像，纯净正版，从源头避免系统附带木马病毒等流氓软件。\n\n[http://msdn.itellyou.cn/](http://msdn.itellyou.cn/)\n\n[http://www.msdn.hk/](http://www.msdn.hk/)\n\n以上为两个常用的原版系统下载网址，在操作系统栏选择所需系统，下载对应的发行版，注意x86和x64的选择。（如今新机器基本都是x64，2010年前的多是x86）\n\n ![img](windows系统安装/msdn.png)\n\n②、第三方Ghost系统，安装简便，免激活，不敢保证无病毒和捆绑软件等。\n\n百度一下Ghost系统，太多下载网址，系统之家相对还算不错。\n\n③、官方OEM系统，相对纯净，免激活，只是不太好找资源。\n\n可根据个人笔记本品牌搜索对应oem系统，如百度“联想win7 oem系统”。\n\n2、安装盘制作（三种方式）\n\n①、光盘刻录，需要空白光盘，使用光驱刻录。刻录工具很多，此处使用软碟通UltralIOS工具刻录：\n\na）、选择下载好的iso格式的系统镜像，打开。\n\n ![img](windows系统安装/ultralISO.png)\n\nb）、放置空光盘入光驱后，点击如下图位置，刻录光盘。\n\n![img](windows系统安装/刻录.png)\n\nc）、刻录镜像到光盘，等待完成，可选择刻录校验，以保证刻录的完整正确。此处注意光盘的大小空间要大于镜像的大小。一般xp原镜像用cd光碟700M大小即可。Win7或者之后系统需要DVD光碟4.7G大小。\n\n![img](windows系统安装/校验.png)\n\nd）、刻录完成后，即可进入安装步骤。\n\n②、U盘刻录，较光盘安装效率更高，U盘大小需要大于iso镜像。依然用UltralISO刻录。\n\na)、打开下载后的iso系统镜像。\n\nb)、选择启动--写入硬盘镜像。\n\n![img](windows系统安装/写入.png)\n\nc)、放入空白U盘（会被格式化，U盘上资料提前备份到他处），写入usb-hdd+引导。写入方式也选择usb-hdd+\n\n ![img](windows系统安装/引导.png) \n\nd)、格式化，写入完成后进入安装步骤。\n\n③、硬盘安装，安装速度快，对新手操作略繁琐（主要指PE系统的使用）\n\na)、xp-->win7，或者类似的低版本系统升级高版本系统，且两个系统都是x86或者x64的，可以将下载后的iso系统镜像文件，用winRAR之类的解压缩工具解压到非C盘的磁盘目录下，然后双击运行Setup.exe即可进入安装步骤。\n\nb)、上一步也可以用虚拟光驱工具，加载iso系统镜像，然后再“我的电脑”下找到加载后的系统安装盘，双击运行其中的setup.exe进入安装步骤。\n\n ![img](windows系统安装/镜像.png)\n\n ![img](windows系统安装/镜像2.png)\n\nc)、如上两条均需要当前系统可用的前提下，满足一定条件才可实现。倘若系统崩溃无法进入系统，则需要使用其他电脑制作安装光盘/U盘，放于本电脑来安装。亦或者，有PE系统，进入PE系统环境安装。（PE系统的制作，稍后再讲）\n\n三、系统安装\n\n1、将制作好的安装光盘/U盘连接电脑\n\n2、开机选择进入启动选择菜单，不同品牌电脑的进入方式不同，一般在开机显示品牌LOGO时，下面会有提示。Lenovo是按F12进入快速选择启动项，其他品牌自行百度，如“联想进入开机选项方式”。一般为Delete，Esc，F2等。\n\n3、进入启动项菜单后，若是光盘为安装盘，一般不用上一步就会进入安装界面，但有的也需要在此步骤选择光驱启动，回车即可。U盘为安装盘，则选择对应的USB启动项。\n\n4、如上无误则进入安装界面，一路下一步即可\n\n ![img](windows系统安装/安装语言.png) \n\n5、在下图步骤时，非全新硬盘则选择C盘，可以点击高级选项中，可以格式化，分区等，C盘数据会丢失，所以安装系统前备份好个人C盘的重要资料，如我的文档，桌面等等上面的资料。（崩溃后的系统可以在PE环境下备份数据）\n\n![img](windows系统安装/选择分区.png)\n\n6、几乎一路下一步就可完成安装，系统可能会让提供安装密钥，可百度相应系统的序列号即可。（在第一步中选择的不同系统源，决定安装步骤的差异，一般大致相同）\n\n ![img](http://img.blog.csdn.net/20151206161206568?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n ![img](windows系统安装/安装完成.png)\n\n四、系统设置及优化\n\n至此即可完成系统的安装，windows系列的安装大同小异，安装好系统仅仅是一个好的桌面系统环境的第一步，之后需要打补丁，装软件，优化设置，其重要性不亚于系统的安装，有一个良好的使用习惯，会让你的电脑保持较为长久的流畅和高效状态。\n\n纯净初装系统并无集成驱动，甚至无法联网，用户需要从他处下载带网卡驱动的驱动精灵或驱动人生等，安装后一键安装所有必须的驱动，同时安装必要的软件，安装补丁等。\n\n需要注意的是下载软件尽可能都在官网下载，安装时候注意选择自定安装，留心去掉需要没用的默认勾选，否则可能会被附带安装太多不要的东西。安装软件建议安装到D盘下自建一个公用目录，最好英文无空格，以免极个别奇葩软件无法运行。\n\n任何软件的安装后，都需要进行设置，更改其设置中暗含的默认选项，免除流氓广告和其他无关行为。\n\n系统装好驱动和补丁后，及时清理系统垃圾，优化设置，具体优化无法一篇概论，提供一些个人用的优化工具，请自行使用，优化工具需要善用，错误操作责任自负。\n\n另：建议系统设置优化完成后，安装一个Ghost备份工具，备份系统，或者是本地PE系统，以备不时之需。\n\n ![img](windows系统安装/onekey.png)![img](windows系统安装/pe.png)\n\n附件：本文所需工具均可自行在网上下载官方版本。---UltralISO：OneKey：微PE：魔方优化：--- ","slug":"windows系统安装","published":1,"updated":"2017-03-31T06:03:23.285Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ndxcdr002n88ow8xxn4lsq","content":"<h1 id=\"Windows系统安装\"><a href=\"#Windows系统安装\" class=\"headerlink\" title=\"Windows系统安装\"></a>Windows系统安装</h1><p>声明：本文仅用于技术交流，按照文章操作理论上不会出现故障和问题，但可能由于不同机器、不同人员的不同的偶然的操作失误，会引起不同的未知问题，则不属于本文技术指导的责任，按照本文操作，则视为操作者责任自负。</p>\n<p>一、安装准备</p>\n<p>1、系统源的选择（三种方式）</p>\n<p>①、微软官方系统镜像，纯净正版，从源头避免系统附带木马病毒等流氓软件。</p>\n<p><a href=\"http://msdn.itellyou.cn/\" target=\"_blank\" rel=\"external\">http://msdn.itellyou.cn/</a></p>\n<p><a href=\"http://www.msdn.hk/\" target=\"_blank\" rel=\"external\">http://www.msdn.hk/</a></p>\n<p>以上为两个常用的原版系统下载网址，在操作系统栏选择所需系统，下载对应的发行版，注意x86和x64的选择。（如今新机器基本都是x64，2010年前的多是x86）</p>\n<p> <img src=\"/2015/12/06/windows系统安装/msdn.png\" alt=\"img\"></p>\n<p>②、第三方Ghost系统，安装简便，免激活，不敢保证无病毒和捆绑软件等。</p>\n<p>百度一下Ghost系统，太多下载网址，系统之家相对还算不错。</p>\n<p>③、官方OEM系统，相对纯净，免激活，只是不太好找资源。</p>\n<p>可根据个人笔记本品牌搜索对应oem系统，如百度“联想win7 oem系统”。</p>\n<p>2、安装盘制作（三种方式）</p>\n<p>①、光盘刻录，需要空白光盘，使用光驱刻录。刻录工具很多，此处使用软碟通UltralIOS工具刻录：</p>\n<p>a）、选择下载好的iso格式的系统镜像，打开。</p>\n<p> <img src=\"/2015/12/06/windows系统安装/ultralISO.png\" alt=\"img\"></p>\n<p>b）、放置空光盘入光驱后，点击如下图位置，刻录光盘。</p>\n<p><img src=\"/2015/12/06/windows系统安装/刻录.png\" alt=\"img\"></p>\n<p>c）、刻录镜像到光盘，等待完成，可选择刻录校验，以保证刻录的完整正确。此处注意光盘的大小空间要大于镜像的大小。一般xp原镜像用cd光碟700M大小即可。Win7或者之后系统需要DVD光碟4.7G大小。</p>\n<p><img src=\"/2015/12/06/windows系统安装/校验.png\" alt=\"img\"></p>\n<p>d）、刻录完成后，即可进入安装步骤。</p>\n<p>②、U盘刻录，较光盘安装效率更高，U盘大小需要大于iso镜像。依然用UltralISO刻录。</p>\n<p>a)、打开下载后的iso系统镜像。</p>\n<p>b)、选择启动–写入硬盘镜像。</p>\n<p><img src=\"/2015/12/06/windows系统安装/写入.png\" alt=\"img\"></p>\n<p>c)、放入空白U盘（会被格式化，U盘上资料提前备份到他处），写入usb-hdd+引导。写入方式也选择usb-hdd+</p>\n<p> <img src=\"/2015/12/06/windows系统安装/引导.png\" alt=\"img\"> </p>\n<p>d)、格式化，写入完成后进入安装步骤。</p>\n<p>③、硬盘安装，安装速度快，对新手操作略繁琐（主要指PE系统的使用）</p>\n<p>a)、xp–&gt;win7，或者类似的低版本系统升级高版本系统，且两个系统都是x86或者x64的，可以将下载后的iso系统镜像文件，用winRAR之类的解压缩工具解压到非C盘的磁盘目录下，然后双击运行Setup.exe即可进入安装步骤。</p>\n<p>b)、上一步也可以用虚拟光驱工具，加载iso系统镜像，然后再“我的电脑”下找到加载后的系统安装盘，双击运行其中的setup.exe进入安装步骤。</p>\n<p> <img src=\"/2015/12/06/windows系统安装/镜像.png\" alt=\"img\"></p>\n<p> <img src=\"/2015/12/06/windows系统安装/镜像2.png\" alt=\"img\"></p>\n<p>c)、如上两条均需要当前系统可用的前提下，满足一定条件才可实现。倘若系统崩溃无法进入系统，则需要使用其他电脑制作安装光盘/U盘，放于本电脑来安装。亦或者，有PE系统，进入PE系统环境安装。（PE系统的制作，稍后再讲）</p>\n<p>三、系统安装</p>\n<p>1、将制作好的安装光盘/U盘连接电脑</p>\n<p>2、开机选择进入启动选择菜单，不同品牌电脑的进入方式不同，一般在开机显示品牌LOGO时，下面会有提示。Lenovo是按F12进入快速选择启动项，其他品牌自行百度，如“联想进入开机选项方式”。一般为Delete，Esc，F2等。</p>\n<p>3、进入启动项菜单后，若是光盘为安装盘，一般不用上一步就会进入安装界面，但有的也需要在此步骤选择光驱启动，回车即可。U盘为安装盘，则选择对应的USB启动项。</p>\n<p>4、如上无误则进入安装界面，一路下一步即可</p>\n<p> <img src=\"/2015/12/06/windows系统安装/安装语言.png\" alt=\"img\"> </p>\n<p>5、在下图步骤时，非全新硬盘则选择C盘，可以点击高级选项中，可以格式化，分区等，C盘数据会丢失，所以安装系统前备份好个人C盘的重要资料，如我的文档，桌面等等上面的资料。（崩溃后的系统可以在PE环境下备份数据）</p>\n<p><img src=\"/2015/12/06/windows系统安装/选择分区.png\" alt=\"img\"></p>\n<p>6、几乎一路下一步就可完成安装，系统可能会让提供安装密钥，可百度相应系统的序列号即可。（在第一步中选择的不同系统源，决定安装步骤的差异，一般大致相同）</p>\n<p> <img src=\"http://img.blog.csdn.net/20151206161206568?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"img\"></p>\n<p> <img src=\"/2015/12/06/windows系统安装/安装完成.png\" alt=\"img\"></p>\n<p>四、系统设置及优化</p>\n<p>至此即可完成系统的安装，windows系列的安装大同小异，安装好系统仅仅是一个好的桌面系统环境的第一步，之后需要打补丁，装软件，优化设置，其重要性不亚于系统的安装，有一个良好的使用习惯，会让你的电脑保持较为长久的流畅和高效状态。</p>\n<p>纯净初装系统并无集成驱动，甚至无法联网，用户需要从他处下载带网卡驱动的驱动精灵或驱动人生等，安装后一键安装所有必须的驱动，同时安装必要的软件，安装补丁等。</p>\n<p>需要注意的是下载软件尽可能都在官网下载，安装时候注意选择自定安装，留心去掉需要没用的默认勾选，否则可能会被附带安装太多不要的东西。安装软件建议安装到D盘下自建一个公用目录，最好英文无空格，以免极个别奇葩软件无法运行。</p>\n<p>任何软件的安装后，都需要进行设置，更改其设置中暗含的默认选项，免除流氓广告和其他无关行为。</p>\n<p>系统装好驱动和补丁后，及时清理系统垃圾，优化设置，具体优化无法一篇概论，提供一些个人用的优化工具，请自行使用，优化工具需要善用，错误操作责任自负。</p>\n<p>另：建议系统设置优化完成后，安装一个Ghost备份工具，备份系统，或者是本地PE系统，以备不时之需。</p>\n<p> <img src=\"/2015/12/06/windows系统安装/onekey.png\" alt=\"img\"><img src=\"/2015/12/06/windows系统安装/pe.png\" alt=\"img\"></p>\n<p>附件：本文所需工具均可自行在网上下载官方版本。—UltralISO：OneKey：微PE：魔方优化：— </p>\n","excerpt":"","more":"<h1 id=\"Windows系统安装\"><a href=\"#Windows系统安装\" class=\"headerlink\" title=\"Windows系统安装\"></a>Windows系统安装</h1><p>声明：本文仅用于技术交流，按照文章操作理论上不会出现故障和问题，但可能由于不同机器、不同人员的不同的偶然的操作失误，会引起不同的未知问题，则不属于本文技术指导的责任，按照本文操作，则视为操作者责任自负。</p>\n<p>一、安装准备</p>\n<p>1、系统源的选择（三种方式）</p>\n<p>①、微软官方系统镜像，纯净正版，从源头避免系统附带木马病毒等流氓软件。</p>\n<p><a href=\"http://msdn.itellyou.cn/\">http://msdn.itellyou.cn/</a></p>\n<p><a href=\"http://www.msdn.hk/\">http://www.msdn.hk/</a></p>\n<p>以上为两个常用的原版系统下载网址，在操作系统栏选择所需系统，下载对应的发行版，注意x86和x64的选择。（如今新机器基本都是x64，2010年前的多是x86）</p>\n<p> <img src=\"/2015/12/06/windows系统安装/msdn.png\" alt=\"img\"></p>\n<p>②、第三方Ghost系统，安装简便，免激活，不敢保证无病毒和捆绑软件等。</p>\n<p>百度一下Ghost系统，太多下载网址，系统之家相对还算不错。</p>\n<p>③、官方OEM系统，相对纯净，免激活，只是不太好找资源。</p>\n<p>可根据个人笔记本品牌搜索对应oem系统，如百度“联想win7 oem系统”。</p>\n<p>2、安装盘制作（三种方式）</p>\n<p>①、光盘刻录，需要空白光盘，使用光驱刻录。刻录工具很多，此处使用软碟通UltralIOS工具刻录：</p>\n<p>a）、选择下载好的iso格式的系统镜像，打开。</p>\n<p> <img src=\"/2015/12/06/windows系统安装/ultralISO.png\" alt=\"img\"></p>\n<p>b）、放置空光盘入光驱后，点击如下图位置，刻录光盘。</p>\n<p><img src=\"/2015/12/06/windows系统安装/刻录.png\" alt=\"img\"></p>\n<p>c）、刻录镜像到光盘，等待完成，可选择刻录校验，以保证刻录的完整正确。此处注意光盘的大小空间要大于镜像的大小。一般xp原镜像用cd光碟700M大小即可。Win7或者之后系统需要DVD光碟4.7G大小。</p>\n<p><img src=\"/2015/12/06/windows系统安装/校验.png\" alt=\"img\"></p>\n<p>d）、刻录完成后，即可进入安装步骤。</p>\n<p>②、U盘刻录，较光盘安装效率更高，U盘大小需要大于iso镜像。依然用UltralISO刻录。</p>\n<p>a)、打开下载后的iso系统镜像。</p>\n<p>b)、选择启动–写入硬盘镜像。</p>\n<p><img src=\"/2015/12/06/windows系统安装/写入.png\" alt=\"img\"></p>\n<p>c)、放入空白U盘（会被格式化，U盘上资料提前备份到他处），写入usb-hdd+引导。写入方式也选择usb-hdd+</p>\n<p> <img src=\"/2015/12/06/windows系统安装/引导.png\" alt=\"img\"> </p>\n<p>d)、格式化，写入完成后进入安装步骤。</p>\n<p>③、硬盘安装，安装速度快，对新手操作略繁琐（主要指PE系统的使用）</p>\n<p>a)、xp–&gt;win7，或者类似的低版本系统升级高版本系统，且两个系统都是x86或者x64的，可以将下载后的iso系统镜像文件，用winRAR之类的解压缩工具解压到非C盘的磁盘目录下，然后双击运行Setup.exe即可进入安装步骤。</p>\n<p>b)、上一步也可以用虚拟光驱工具，加载iso系统镜像，然后再“我的电脑”下找到加载后的系统安装盘，双击运行其中的setup.exe进入安装步骤。</p>\n<p> <img src=\"/2015/12/06/windows系统安装/镜像.png\" alt=\"img\"></p>\n<p> <img src=\"/2015/12/06/windows系统安装/镜像2.png\" alt=\"img\"></p>\n<p>c)、如上两条均需要当前系统可用的前提下，满足一定条件才可实现。倘若系统崩溃无法进入系统，则需要使用其他电脑制作安装光盘/U盘，放于本电脑来安装。亦或者，有PE系统，进入PE系统环境安装。（PE系统的制作，稍后再讲）</p>\n<p>三、系统安装</p>\n<p>1、将制作好的安装光盘/U盘连接电脑</p>\n<p>2、开机选择进入启动选择菜单，不同品牌电脑的进入方式不同，一般在开机显示品牌LOGO时，下面会有提示。Lenovo是按F12进入快速选择启动项，其他品牌自行百度，如“联想进入开机选项方式”。一般为Delete，Esc，F2等。</p>\n<p>3、进入启动项菜单后，若是光盘为安装盘，一般不用上一步就会进入安装界面，但有的也需要在此步骤选择光驱启动，回车即可。U盘为安装盘，则选择对应的USB启动项。</p>\n<p>4、如上无误则进入安装界面，一路下一步即可</p>\n<p> <img src=\"/2015/12/06/windows系统安装/安装语言.png\" alt=\"img\"> </p>\n<p>5、在下图步骤时，非全新硬盘则选择C盘，可以点击高级选项中，可以格式化，分区等，C盘数据会丢失，所以安装系统前备份好个人C盘的重要资料，如我的文档，桌面等等上面的资料。（崩溃后的系统可以在PE环境下备份数据）</p>\n<p><img src=\"/2015/12/06/windows系统安装/选择分区.png\" alt=\"img\"></p>\n<p>6、几乎一路下一步就可完成安装，系统可能会让提供安装密钥，可百度相应系统的序列号即可。（在第一步中选择的不同系统源，决定安装步骤的差异，一般大致相同）</p>\n<p> <img src=\"http://img.blog.csdn.net/20151206161206568?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"img\"></p>\n<p> <img src=\"/2015/12/06/windows系统安装/安装完成.png\" alt=\"img\"></p>\n<p>四、系统设置及优化</p>\n<p>至此即可完成系统的安装，windows系列的安装大同小异，安装好系统仅仅是一个好的桌面系统环境的第一步，之后需要打补丁，装软件，优化设置，其重要性不亚于系统的安装，有一个良好的使用习惯，会让你的电脑保持较为长久的流畅和高效状态。</p>\n<p>纯净初装系统并无集成驱动，甚至无法联网，用户需要从他处下载带网卡驱动的驱动精灵或驱动人生等，安装后一键安装所有必须的驱动，同时安装必要的软件，安装补丁等。</p>\n<p>需要注意的是下载软件尽可能都在官网下载，安装时候注意选择自定安装，留心去掉需要没用的默认勾选，否则可能会被附带安装太多不要的东西。安装软件建议安装到D盘下自建一个公用目录，最好英文无空格，以免极个别奇葩软件无法运行。</p>\n<p>任何软件的安装后，都需要进行设置，更改其设置中暗含的默认选项，免除流氓广告和其他无关行为。</p>\n<p>系统装好驱动和补丁后，及时清理系统垃圾，优化设置，具体优化无法一篇概论，提供一些个人用的优化工具，请自行使用，优化工具需要善用，错误操作责任自负。</p>\n<p>另：建议系统设置优化完成后，安装一个Ghost备份工具，备份系统，或者是本地PE系统，以备不时之需。</p>\n<p> <img src=\"/2015/12/06/windows系统安装/onekey.png\" alt=\"img\"><img src=\"/2015/12/06/windows系统安装/pe.png\" alt=\"img\"></p>\n<p>附件：本文所需工具均可自行在网上下载官方版本。—UltralISO：OneKey：微PE：魔方优化：— </p>\n"},{"title":"windowsPE系统制作","date":"2015-12-06T08:28:00.000Z","_content":"\nPE系统的制作\n一般作为IT工作者或者技术折腾爱好者，都会配备一个PE系统，以备不时之需。PE系统可用于系统维护和紧急救援等，网上PE系统太多，常见的有电脑店、老毛桃、大白菜、微PE等，而其中不少都出于商业目的会在你用其PE安装系统后附带安装一些软件，或者更改主页设置等，个人比较喜欢纯洁的PE系统，本文使用微PE用于演示\n一、下载PE系统制作工具\n![微PE安装](windowsPE系统制作/pe.png)\n微PE可以安装到U盘，移动硬盘或者生成iso镜像。可以安装到电脑的系统下，启动时就会多出一个启动选项，以备系统崩溃时候进入PE系统即可进行维护。\n二、使用空白U盘制作PE系统\n![制作PE系统](windowsPE系统制作/upan.png)\n三、PE系统的使用\n用做好的PE系统U盘，连接电脑，开机启动时进入启动选择菜单，选择USB启动，即可进入相应的PE系统。\n另：附上电脑店PE系统的相关制作图片\n![电脑店PE](windowsPE系统制作/zhizuo.png)\n![制作PE](windowsPE系统制作/zhizuo2.png)\n如上制作的PE会包含捆绑软件和主页设置，在其个性化设置中，取消选项勾选，也许可能消除捆绑的软件安装。（国内软件流氓的太多，没法）\n![自定界面](windowsPE系统制作/view.png)\n去掉箭头所指的两个勾选，需要输入密码，dnd2012，或者是2012dnd。\n文中所需软件可自行在其官网下载，附上个人使用版本：\n微PE：\n电脑店PE：","source":"_posts/windowsPE系统制作.md","raw":"---\ntitle: windowsPE系统制作\ndate: 2015-12-06 16:28\ntags:\n    - Windows\ncategories: \n    - Windows\n---\n\nPE系统的制作\n一般作为IT工作者或者技术折腾爱好者，都会配备一个PE系统，以备不时之需。PE系统可用于系统维护和紧急救援等，网上PE系统太多，常见的有电脑店、老毛桃、大白菜、微PE等，而其中不少都出于商业目的会在你用其PE安装系统后附带安装一些软件，或者更改主页设置等，个人比较喜欢纯洁的PE系统，本文使用微PE用于演示\n一、下载PE系统制作工具\n![微PE安装](windowsPE系统制作/pe.png)\n微PE可以安装到U盘，移动硬盘或者生成iso镜像。可以安装到电脑的系统下，启动时就会多出一个启动选项，以备系统崩溃时候进入PE系统即可进行维护。\n二、使用空白U盘制作PE系统\n![制作PE系统](windowsPE系统制作/upan.png)\n三、PE系统的使用\n用做好的PE系统U盘，连接电脑，开机启动时进入启动选择菜单，选择USB启动，即可进入相应的PE系统。\n另：附上电脑店PE系统的相关制作图片\n![电脑店PE](windowsPE系统制作/zhizuo.png)\n![制作PE](windowsPE系统制作/zhizuo2.png)\n如上制作的PE会包含捆绑软件和主页设置，在其个性化设置中，取消选项勾选，也许可能消除捆绑的软件安装。（国内软件流氓的太多，没法）\n![自定界面](windowsPE系统制作/view.png)\n去掉箭头所指的两个勾选，需要输入密码，dnd2012，或者是2012dnd。\n文中所需软件可自行在其官网下载，附上个人使用版本：\n微PE：\n电脑店PE：","slug":"windowsPE系统制作","published":1,"updated":"2017-03-31T06:02:47.637Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ndxcds002r88owes6r5839","content":"<p>PE系统的制作<br>一般作为IT工作者或者技术折腾爱好者，都会配备一个PE系统，以备不时之需。PE系统可用于系统维护和紧急救援等，网上PE系统太多，常见的有电脑店、老毛桃、大白菜、微PE等，而其中不少都出于商业目的会在你用其PE安装系统后附带安装一些软件，或者更改主页设置等，个人比较喜欢纯洁的PE系统，本文使用微PE用于演示<br>一、下载PE系统制作工具<br><img src=\"/2015/12/06/windowsPE系统制作/pe.png\" alt=\"微PE安装\"><br>微PE可以安装到U盘，移动硬盘或者生成iso镜像。可以安装到电脑的系统下，启动时就会多出一个启动选项，以备系统崩溃时候进入PE系统即可进行维护。<br>二、使用空白U盘制作PE系统<br><img src=\"/2015/12/06/windowsPE系统制作/upan.png\" alt=\"制作PE系统\"><br>三、PE系统的使用<br>用做好的PE系统U盘，连接电脑，开机启动时进入启动选择菜单，选择USB启动，即可进入相应的PE系统。<br>另：附上电脑店PE系统的相关制作图片<br><img src=\"/2015/12/06/windowsPE系统制作/zhizuo.png\" alt=\"电脑店PE\"><br><img src=\"/2015/12/06/windowsPE系统制作/zhizuo2.png\" alt=\"制作PE\"><br>如上制作的PE会包含捆绑软件和主页设置，在其个性化设置中，取消选项勾选，也许可能消除捆绑的软件安装。（国内软件流氓的太多，没法）<br><img src=\"/2015/12/06/windowsPE系统制作/view.png\" alt=\"自定界面\"><br>去掉箭头所指的两个勾选，需要输入密码，dnd2012，或者是2012dnd。<br>文中所需软件可自行在其官网下载，附上个人使用版本：<br>微PE：<br>电脑店PE：</p>\n","excerpt":"","more":"<p>PE系统的制作<br>一般作为IT工作者或者技术折腾爱好者，都会配备一个PE系统，以备不时之需。PE系统可用于系统维护和紧急救援等，网上PE系统太多，常见的有电脑店、老毛桃、大白菜、微PE等，而其中不少都出于商业目的会在你用其PE安装系统后附带安装一些软件，或者更改主页设置等，个人比较喜欢纯洁的PE系统，本文使用微PE用于演示<br>一、下载PE系统制作工具<br><img src=\"/2015/12/06/windowsPE系统制作/pe.png\" alt=\"微PE安装\"><br>微PE可以安装到U盘，移动硬盘或者生成iso镜像。可以安装到电脑的系统下，启动时就会多出一个启动选项，以备系统崩溃时候进入PE系统即可进行维护。<br>二、使用空白U盘制作PE系统<br><img src=\"/2015/12/06/windowsPE系统制作/upan.png\" alt=\"制作PE系统\"><br>三、PE系统的使用<br>用做好的PE系统U盘，连接电脑，开机启动时进入启动选择菜单，选择USB启动，即可进入相应的PE系统。<br>另：附上电脑店PE系统的相关制作图片<br><img src=\"/2015/12/06/windowsPE系统制作/zhizuo.png\" alt=\"电脑店PE\"><br><img src=\"/2015/12/06/windowsPE系统制作/zhizuo2.png\" alt=\"制作PE\"><br>如上制作的PE会包含捆绑软件和主页设置，在其个性化设置中，取消选项勾选，也许可能消除捆绑的软件安装。（国内软件流氓的太多，没法）<br><img src=\"/2015/12/06/windowsPE系统制作/view.png\" alt=\"自定界面\"><br>去掉箭头所指的两个勾选，需要输入密码，dnd2012，或者是2012dnd。<br>文中所需软件可自行在其官网下载，附上个人使用版本：<br>微PE：<br>电脑店PE：</p>\n"},{"title":"个人开发工具集","date":"2016-06-05T09:57:00.000Z","_content":"\n## windows平台：\n\n​\t1、文本编辑：notepad++、sublime text,miu,typora，ultraEdit\n​\t2、开发工具：JDK、ndk、Android sdk、C free、tomcat\n​\t3、编程IDE：Ecipse、myEclipse、AndroidStudio、visual studio\n​\t4、代码编辑：atom、github for windows、source insight、visual studio code\n​\t5、版本控制：git、SVN\n​\t6、数据库：sqliteman、sqlite developer,native premium\n​\t7、浏览器：chrome、firefox、opera、Torbrowser\n​\t8、虚拟机：vmplayer、virtualbox\n​\t9、通讯工具：飞秋、QQ\n​\t10、办公软件：office、WPS、Adobe Acrobat、AcmeCADsee、SetupOfficeTabEnterprise\n​\t11、设计工具：Photoshop、PXcook、Axure、mockup\n​\t12、反编译工具：apkdb\n​\t13、终端工具：xmanager{xshell、xftp}\n​\t14、流程图：PowerDesigner、visio、亿图图示\n​\t15、文件对比：beyond compare\n​\t16、思维导图：xmind、mind manager、mind map\n​\t17、项目管理：project\n​\t18、快速搜索：everything,光速搜索、findstr\n​\t19、笔记工具：印象笔记、为知笔记\n​\t20、系统增强：Q-dir、Totalcmd、\n​\t辅助工具：柠檬桌面、橙子护眼、有道词典、folder marker、刻度尺、ARGBHex、color-beta、gifcam、game protector、screen to gif、ipscanner、Synergy/mouse without borders、AnyDesk、xsearch、faststone、image2ascii、colorpicker、HiJson、netAssist、Pointofix\n​\t\n## Linux平台：\n\n​\t1、文本编辑：gedit、sublime text、typora,geany,vim,emacs(一直在膜拜，从未使用过)，ultraEdit、wxhexEditor\n​\t2、开发工具：JDK/open JDK、Android SDK、tomcat\n​\t3、编程IDE：Eclilpse、myEclipse、AndroidStudio、intellij\n​\t4、代码编辑：atom、visual studio code\n​\t5、数据库:sqlite man,native premium\n​\t6、版本控制：git\n​\t7、办公软件：libreoffice、WPS\n​\t8、浏览器：chrome、firefox、opera、Torbrowser\n​\t9、虚拟机：vmplayer、virtualbox\n​\t10、通讯工具：iptux\n​\t11、设计工具：gimp、inscape\n​\t12、流程图：Dia、libreDraw、umbrello\n​\t13、文件对比：beyond compare\n​\t14、思维导图：xmind\n​\t15、项目管理：Planner\n​\t16、笔记工具：为知笔记、印象笔记\n​\t辅助工具：shutter、RecordMyDesktop、chm see、Synergy、AnyDesk、zsh、clementine、fingerprint、indicator-lockkeys、redshift、flux","source":"_posts/个人开发工具集.md","raw":"---\ntitle: 个人开发工具集\ndate: 2016-06-05 17:57\ntags:\n    - Windows\n    - Linux\ncategories:\n    - Tools\n---\n\n## windows平台：\n\n​\t1、文本编辑：notepad++、sublime text,miu,typora，ultraEdit\n​\t2、开发工具：JDK、ndk、Android sdk、C free、tomcat\n​\t3、编程IDE：Ecipse、myEclipse、AndroidStudio、visual studio\n​\t4、代码编辑：atom、github for windows、source insight、visual studio code\n​\t5、版本控制：git、SVN\n​\t6、数据库：sqliteman、sqlite developer,native premium\n​\t7、浏览器：chrome、firefox、opera、Torbrowser\n​\t8、虚拟机：vmplayer、virtualbox\n​\t9、通讯工具：飞秋、QQ\n​\t10、办公软件：office、WPS、Adobe Acrobat、AcmeCADsee、SetupOfficeTabEnterprise\n​\t11、设计工具：Photoshop、PXcook、Axure、mockup\n​\t12、反编译工具：apkdb\n​\t13、终端工具：xmanager{xshell、xftp}\n​\t14、流程图：PowerDesigner、visio、亿图图示\n​\t15、文件对比：beyond compare\n​\t16、思维导图：xmind、mind manager、mind map\n​\t17、项目管理：project\n​\t18、快速搜索：everything,光速搜索、findstr\n​\t19、笔记工具：印象笔记、为知笔记\n​\t20、系统增强：Q-dir、Totalcmd、\n​\t辅助工具：柠檬桌面、橙子护眼、有道词典、folder marker、刻度尺、ARGBHex、color-beta、gifcam、game protector、screen to gif、ipscanner、Synergy/mouse without borders、AnyDesk、xsearch、faststone、image2ascii、colorpicker、HiJson、netAssist、Pointofix\n​\t\n## Linux平台：\n\n​\t1、文本编辑：gedit、sublime text、typora,geany,vim,emacs(一直在膜拜，从未使用过)，ultraEdit、wxhexEditor\n​\t2、开发工具：JDK/open JDK、Android SDK、tomcat\n​\t3、编程IDE：Eclilpse、myEclipse、AndroidStudio、intellij\n​\t4、代码编辑：atom、visual studio code\n​\t5、数据库:sqlite man,native premium\n​\t6、版本控制：git\n​\t7、办公软件：libreoffice、WPS\n​\t8、浏览器：chrome、firefox、opera、Torbrowser\n​\t9、虚拟机：vmplayer、virtualbox\n​\t10、通讯工具：iptux\n​\t11、设计工具：gimp、inscape\n​\t12、流程图：Dia、libreDraw、umbrello\n​\t13、文件对比：beyond compare\n​\t14、思维导图：xmind\n​\t15、项目管理：Planner\n​\t16、笔记工具：为知笔记、印象笔记\n​\t辅助工具：shutter、RecordMyDesktop、chm see、Synergy、AnyDesk、zsh、clementine、fingerprint、indicator-lockkeys、redshift、flux","slug":"个人开发工具集","published":1,"updated":"2017-03-31T08:01:10.017Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ndxcdt002v88ow1au3olgl","content":"<h2 id=\"windows平台：\"><a href=\"#windows平台：\" class=\"headerlink\" title=\"windows平台：\"></a>windows平台：</h2><p>​    1、文本编辑：notepad++、sublime text,miu,typora，ultraEdit<br>​    2、开发工具：JDK、ndk、Android sdk、C free、tomcat<br>​    3、编程IDE：Ecipse、myEclipse、AndroidStudio、visual studio<br>​    4、代码编辑：atom、github for windows、source insight、visual studio code<br>​    5、版本控制：git、SVN<br>​    6、数据库：sqliteman、sqlite developer,native premium<br>​    7、浏览器：chrome、firefox、opera、Torbrowser<br>​    8、虚拟机：vmplayer、virtualbox<br>​    9、通讯工具：飞秋、QQ<br>​    10、办公软件：office、WPS、Adobe Acrobat、AcmeCADsee、SetupOfficeTabEnterprise<br>​    11、设计工具：Photoshop、PXcook、Axure、mockup<br>​    12、反编译工具：apkdb<br>​    13、终端工具：xmanager{xshell、xftp}<br>​    14、流程图：PowerDesigner、visio、亿图图示<br>​    15、文件对比：beyond compare<br>​    16、思维导图：xmind、mind manager、mind map<br>​    17、项目管理：project<br>​    18、快速搜索：everything,光速搜索、findstr<br>​    19、笔记工具：印象笔记、为知笔记<br>​    20、系统增强：Q-dir、Totalcmd、<br>​    辅助工具：柠檬桌面、橙子护眼、有道词典、folder marker、刻度尺、ARGBHex、color-beta、gifcam、game protector、screen to gif、ipscanner、Synergy/mouse without borders、AnyDesk、xsearch、faststone、image2ascii、colorpicker、HiJson、netAssist、Pointofix<br>​    </p>\n<h2 id=\"Linux平台：\"><a href=\"#Linux平台：\" class=\"headerlink\" title=\"Linux平台：\"></a>Linux平台：</h2><p>​    1、文本编辑：gedit、sublime text、typora,geany,vim,emacs(一直在膜拜，从未使用过)，ultraEdit、wxhexEditor<br>​    2、开发工具：JDK/open JDK、Android SDK、tomcat<br>​    3、编程IDE：Eclilpse、myEclipse、AndroidStudio、intellij<br>​    4、代码编辑：atom、visual studio code<br>​    5、数据库:sqlite man,native premium<br>​    6、版本控制：git<br>​    7、办公软件：libreoffice、WPS<br>​    8、浏览器：chrome、firefox、opera、Torbrowser<br>​    9、虚拟机：vmplayer、virtualbox<br>​    10、通讯工具：iptux<br>​    11、设计工具：gimp、inscape<br>​    12、流程图：Dia、libreDraw、umbrello<br>​    13、文件对比：beyond compare<br>​    14、思维导图：xmind<br>​    15、项目管理：Planner<br>​    16、笔记工具：为知笔记、印象笔记<br>​    辅助工具：shutter、RecordMyDesktop、chm see、Synergy、AnyDesk、zsh、clementine、fingerprint、indicator-lockkeys、redshift、flux</p>\n","excerpt":"","more":"<h2 id=\"windows平台：\"><a href=\"#windows平台：\" class=\"headerlink\" title=\"windows平台：\"></a>windows平台：</h2><p>​    1、文本编辑：notepad++、sublime text,miu,typora，ultraEdit<br>​    2、开发工具：JDK、ndk、Android sdk、C free、tomcat<br>​    3、编程IDE：Ecipse、myEclipse、AndroidStudio、visual studio<br>​    4、代码编辑：atom、github for windows、source insight、visual studio code<br>​    5、版本控制：git、SVN<br>​    6、数据库：sqliteman、sqlite developer,native premium<br>​    7、浏览器：chrome、firefox、opera、Torbrowser<br>​    8、虚拟机：vmplayer、virtualbox<br>​    9、通讯工具：飞秋、QQ<br>​    10、办公软件：office、WPS、Adobe Acrobat、AcmeCADsee、SetupOfficeTabEnterprise<br>​    11、设计工具：Photoshop、PXcook、Axure、mockup<br>​    12、反编译工具：apkdb<br>​    13、终端工具：xmanager{xshell、xftp}<br>​    14、流程图：PowerDesigner、visio、亿图图示<br>​    15、文件对比：beyond compare<br>​    16、思维导图：xmind、mind manager、mind map<br>​    17、项目管理：project<br>​    18、快速搜索：everything,光速搜索、findstr<br>​    19、笔记工具：印象笔记、为知笔记<br>​    20、系统增强：Q-dir、Totalcmd、<br>​    辅助工具：柠檬桌面、橙子护眼、有道词典、folder marker、刻度尺、ARGBHex、color-beta、gifcam、game protector、screen to gif、ipscanner、Synergy/mouse without borders、AnyDesk、xsearch、faststone、image2ascii、colorpicker、HiJson、netAssist、Pointofix<br>​    </p>\n<h2 id=\"Linux平台：\"><a href=\"#Linux平台：\" class=\"headerlink\" title=\"Linux平台：\"></a>Linux平台：</h2><p>​    1、文本编辑：gedit、sublime text、typora,geany,vim,emacs(一直在膜拜，从未使用过)，ultraEdit、wxhexEditor<br>​    2、开发工具：JDK/open JDK、Android SDK、tomcat<br>​    3、编程IDE：Eclilpse、myEclipse、AndroidStudio、intellij<br>​    4、代码编辑：atom、visual studio code<br>​    5、数据库:sqlite man,native premium<br>​    6、版本控制：git<br>​    7、办公软件：libreoffice、WPS<br>​    8、浏览器：chrome、firefox、opera、Torbrowser<br>​    9、虚拟机：vmplayer、virtualbox<br>​    10、通讯工具：iptux<br>​    11、设计工具：gimp、inscape<br>​    12、流程图：Dia、libreDraw、umbrello<br>​    13、文件对比：beyond compare<br>​    14、思维导图：xmind<br>​    15、项目管理：Planner<br>​    16、笔记工具：为知笔记、印象笔记<br>​    辅助工具：shutter、RecordMyDesktop、chm see、Synergy、AnyDesk、zsh、clementine、fingerprint、indicator-lockkeys、redshift、flux</p>\n"},{"title":"图片缓存LruCache和DiskLruCache的使用","date":"2017-03-21T07:26:00.000Z","_content":"##前言\n\n作为一个Android技术小白，感觉自己各方面知识与技能都存在欠缺、不足，知识体系不够系统。是时候整理一下学习知识和技术点，慢慢梳理，架构体系，如此才能有利于自身技术的更好发展。Android属于开源操作系统，若要快速开发App，最好是学会很好的使用各种优秀的开源框架，一方面完成工作项目，同行也是提升自己代码能力。\n今天就先从内存缓存的优秀框架DiskLruCache和LruCache开始学习，毕竟Android新手开发都会经历一个OOM的处理问题，一个优秀的App开发中必须考虑资源优化的问题。闲言少续，言归正传。\n这里声明学习了[郭霖](http://blog.csdn.net/guolin_blog)大神的几篇文章[LruCache](http://blog.csdn.net/guolin_blog/article/details/9316683)、[DiskLruCache](http://blog.csdn.net/guolin_blog/article/details/28863651)以及两者结合使用的[Demo解析](http://blog.csdn.net/guolin_blog/article/details/34093441)。\n在此膜拜一下~~。\n##LruCache\nAndroid开发中我们都知道，大量的加载图片会导致内存泄露，也就是OOM，通常我们都会根据原始图片尺寸、设备屏幕尺寸、分辨率以及显示图片的view控件的大小，来使用图片压缩方式，减少资源占用。\n然而尽管如此，大量的图片资源消耗的内存也是相当惊人的。不论是listView还是GridView中，我们都会做定期的资源缓存和无用资源清理。\n若是从网络段加载图片，我们就要考虑到用户流量的问题，流量也是资源！除了使用图片压缩，就需要结合使用图片内存缓存技术了。\n```java\n/**\n * 解析图片，生成Bitmap对象。\n */\npublic static Bitmap decodeSampledBitmapFromResource(Resources res, int resId,  \n        int reqWidth, int reqHeight) {  \n    // 第一次解析将inJustDecodeBounds设置为true，来获取图片大小  \n    final BitmapFactory.Options options = new BitmapFactory.Options();  \n    options.inJustDecodeBounds = true;  \n    BitmapFactory.decodeResource(res, resId, options);  \n    // 调用下面定义的方法计算inSampleSize值  \n    options.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);  \n    // 使用获取到的inSampleSize值再次解析图片  \n    options.inJustDecodeBounds = false;  \n    return BitmapFactory.decodeResource(res, resId, options);  \n}  \n/**\n * 计算图片缩放比例\n */\npublic static int calculateInSampleSize(BitmapFactory.Options options,  \n        int reqWidth, int reqHeight) {  \n    // 源图片的高度和宽度  \n    final int height = options.outHeight;  \n    final int width = options.outWidth;  \n    int inSampleSize = 1;  \n    if (height > reqHeight || width > reqWidth) {  \n        // 计算出实际宽高和目标宽高的比率  \n        final int heightRatio = Math.round((float) height / (float) reqHeight);  \n        final int widthRatio = Math.round((float) width / (float) reqWidth);  \n        // 选择宽和高中最小的比率作为inSampleSize的值，这样可以保证最终图片的宽和高  \n        // 一定都会大于等于目标的宽和高。  \n        inSampleSize = heightRatio < widthRatio ? heightRatio : widthRatio;  \n    }  \n    return inSampleSize;  \n}  \n```\n**注：**此处找到一个关于图片压缩的比较不错的博客[一叶飘舟--Bitmap压缩](http://blog.csdn.net/jdsjlzx/article/details/44228935)。\nLruCache是Google官方提供的内存缓存类，其内部源码详解请移步上面大牛的博客。此处仅作简单的使用说明：\n```java\nprivate LruCache<String, Bitmap> mMemoryCache;  //LruCache对象\n  \n@Override  \nprotected void onCreate(Bundle savedInstanceState) {  \n    // 获取到可用内存的最大值，使用内存超出这个值会引起OutOfMemory异常。  \n    // LruCache通过构造函数传入缓存值，以KB为单位。  \n    int maxMemory = (int) (Runtime.getRuntime().maxMemory() / 1024);  \n    // 使用最大可用内存值的1/8作为缓存的大小。  \n    int cacheSize = maxMemory / 8;  \n    mMemoryCache = new LruCache<String, Bitmap>(cacheSize) {  \n        @Override  \n        protected int sizeOf(String key, Bitmap bitmap) {  \n            // 重写此方法来衡量每张图片的大小，默认返回图片数量。  \n            return bitmap.getByteCount() / 1024;  \n        }  \n    };  \n}  \n//首次使用，将图片资源添加到内存中\npublic void addBitmapToMemoryCache(String key, Bitmap bitmap) {  \n    if (getBitmapFromMemCache(key) == null) {  \n        mMemoryCache.put(key, bitmap);  \n    }  \n}  \n//从内存缓存获取图片资源\npublic Bitmap getBitmapFromMemCache(String key) {  \n    return mMemoryCache.get(key);  \n}  \n\n//加载图片时候，会看看有没有缓存，没有的话，在重新构建，有则使用缓存\npublic void loadBitmap(int resId, ImageView imageView) {  \n    final String imageKey = String.valueOf(resId);  \n    final Bitmap bitmap = getBitmapFromMemCache(imageKey);  \n    if (bitmap != null) {  \n        imageView.setImageBitmap(bitmap);  \n    } else {  \n        imageView.setImageResource(R.drawable.image_placeholder);  \n        BitmapWorkerTask task = new BitmapWorkerTask(imageView);  \n        task.execute(resId);  \n    }  \n}  \n\n//后台Task加载图片资源\nclass BitmapWorkerTask extends AsyncTask<Integer, Void, Bitmap> {  \n    // 在后台加载图片。  \n    @Override  \n    protected Bitmap doInBackground(Integer... params) {  \n        final Bitmap bitmap = decodeSampledBitmapFromResource(  \n                getResources(), params[0], 100, 100);  \n        addBitmapToMemoryCache(String.valueOf(params[0]), bitmap);  \n        return bitmap;  \n    }  \n}\n```\n在此说明一下，以前认为的使用什么软引用、弱引用来保存资源引用的方式，不再提倡，而且也不能保证优化效果了，因为高版本的Android中Java回收机制，会偏向于回收这些引用，从而并不能很好的起到缓存的作用。\n\n##DiskLruCache\nDiskLruCache类似于LruCache，其是将资源缓存在外部存储磁盘上，而不是内存，这样就可以有相对更为充足的资源空间，缓存更多的数据。具体的原理介绍，同样烦请移步上面大神的博客。此处仅作简要使用说明：\n\n- 先贴出DiskLruCache中使用到的工具类文件\n```java\n//DiskLruCache中使用到的工具方法\npublic class Utils {\n    /**\n     * 获取缓存文件夹，这里优先选择SD卡下面的android/data/packageName/cache/路径，若没有SD卡，就选择data/data/packageName/cache\n     *\n     * @param context    上下文环境\n     * @param uniqueName 缓存文件夹名称\n     * @return 返回缓存文件\n     */\n    public static File getDiskCacheDir(Context context, String uniqueName) {\n        String cachePath;\n        if (Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())\n                || !Environment.isExternalStorageRemovable()) {\n            cachePath = context.getExternalCacheDir().getPath();\n        } else {\n            cachePath = context.getCacheDir().getPath();\n        }\n        return new File(cachePath + File.separator + uniqueName);\n    }\n\n    /**\n     * 获取本App的版本号\n     *\n     * @param context context上下文\n     * @return 返回版本号\n     */\n    public static int getAppVersion(Context context) {\n        try {\n            PackageInfo info = context.getPackageManager().getPackageInfo(context.getPackageName(), 0);\n            return info.versionCode;\n        } catch (PackageManager.NameNotFoundException e) {\n            e.printStackTrace();\n        }\n        return 1;\n    }\n\n    /**\n     * 给字符串来个md5加密，\n     * @param key 需要加密的string\n     * @return 返回加密后的string ，或者加密失败，就返回string的哈希值\n     */\n    public static String hashKeyForDisk(String key) {\n        String cacheKey;\n        try {\n            //md5加密\n            MessageDigest mDigest = MessageDigest.getInstance(\"MD5\");\n            mDigest.update(key.getBytes());\n            cacheKey = bytesToHexString(mDigest.digest());\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n            //若md5加密失败，就用哈希值\n            cacheKey = String.valueOf(key.hashCode());\n        }\n        return cacheKey;\n    }\n\n    /**\n     * 字节数组转为十六进制字符串\n     * @param bytes 字节数组\n     * @return 返回十六进制字符串\n     */\n    private static String bytesToHexString(byte[] bytes) {\n        StringBuilder sb = new StringBuilder();\n        for (byte b : bytes) {\n            String hex = Integer.toHexString(0xFF & b);\n            if (hex.length()==1){\n                sb.append('0');\n            }\n            sb.append(hex);\n        }\n        return sb.toString();\n    }\n}\n```\n- DiskLruCache的使用\n```java\n\npublic class MainActivity extends AppCompatActivity {\n    DiskLruCache mDiskLruCache = null;//diskLruCache的对象\n    String imgUrl = \"http://img.my.csdn.net/uploads/201309/01/1378037235_7476.jpg\";//图片链接\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        //初始化缓存配置\n        openCache();\n    }\n\n    /**\n     * 初始化缓存配置\n     */\n    private void openCache() {\n        try {\n            //缓存图片数据的文件夹\n            File cacheDir = Utils.getDiskCacheDir(this, \"bitmap\");\n            if (!cacheDir.exists()) {\n                //使用mkdirs可以连同上级文件夹一同创建，否则mkdir可能会报错\n                cacheDir.mkdirs();\n            }\n            //参数，1、缓存目录；2、app版本号，因为它认为版本升级，缓存就没必要保存。3、一个key值对应多少个缓存文件，一般1个。4、单个缓存多大，10M就够了。\n            //超过最大缓存限制的，就会被自动清除了，所以一般不用程序中调用removeCache。\n            mDiskLruCache = DiskLruCache.open(cacheDir, Utils.getAppVersion(this), 1, 10 * 1024 * 1024);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * 写入缓存\n     */\n    public void writeCache(View view) {\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                //将图片的url地址md5 加密后，生成的key来作为缓存的唯一标志key，那么就可以实现图片和缓存对应起来。\n                String key = Utils.hashKeyForDisk(imgUrl);\n                try {\n                    DiskLruCache.Editor editor = mDiskLruCache.edit(key);\n                    if (editor != null) {\n                        //此处传入0参数的含义是，缓存的编号，因为DiskLruCache.open时候，传入了最大缓存个数为1，所以次数就是0就好。\n                        OutputStream outputStream = editor.newOutputStream(0);\n                        //根据现在成功与否，来决定是否提交缓存\n                        if (downloadImage(imgUrl, outputStream)) {\n                            editor.commit();\n                        } else {\n                            editor.abort();\n                        }\n                    }\n                    //刷新，写入\n                    mDiskLruCache.flush();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }).start();\n    }\n\n\n    /**\n     * 下载图片\n     *\n     * @param imgUrl       图片网址链接\n     * @param outputStream 输出流对象\n     * @return 返回时候完成下载成功\n     */\n    private boolean downloadImage(String imgUrl, OutputStream outputStream) {\n        HttpURLConnection urlConnection = null;\n        BufferedOutputStream out = null;\n        BufferedInputStream in = null;\n\n        try {\n            URL url = new URL(imgUrl);\n            urlConnection = (HttpURLConnection) url.openConnection();\n            in = new BufferedInputStream(urlConnection.getInputStream(), 8 * 1024);//Buffer输入流，8M大小的缓存\n            out = new BufferedOutputStream(outputStream, 8 * 1024);\n            int b;//正在读取的byte\n            while ((b = in.read()) != -1) {\n                out.write(b);\n            }\n            return true;\n        } catch (MalformedURLException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        //关闭资源\n        finally {\n            if (urlConnection != null) {\n                urlConnection.disconnect();\n            }\n            if (out != null) {\n                try {\n                    out.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n            if (in != null) {\n                try {\n                    in.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * 读取缓存\n     *\n     * @param view\n     */\n    public void readCache(View view) {\n        //使用DiskLruCache获取缓存，需要传入key，而key是imageUrl加密后的字符串，\n        String key = Utils.hashKeyForDisk(imgUrl);\n        try {\n            //通过key获取的只是一个快照，需要从快照获取输入流，转化为数据对象\n            DiskLruCache.Snapshot snapshot = mDiskLruCache.get(key);\n            if (snapshot != null) {\n                InputStream inputStream = snapshot.getInputStream(0);//类似写缓存时候，传入的是缓存的编号\n                //可以使用bitmapFactory\n                Drawable drawable = Drawable.createFromStream(inputStream, \"drawable\");\n                ImageView imageView = (ImageView) findViewById(R.id.iv_cache);\n                imageView.setImageDrawable(drawable);\n            }\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n    }\n\n    /**\n     * 清除缓存\n     *\n     * @param view\n     */\n    public void removeCache(View view) {\n        String key = Utils.hashKeyForDisk(imgUrl);\n        try {\n            //清除指定key的缓存\n            mDiskLruCache.remove(key);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * 演示DiskLruCache的其他api\n     */\n    public void otherAPI() {\n        //缓存目录大小\n        mDiskLruCache.size();\n        //将内存中的操作记录，同步到日志文件（journal），一般不要频繁操作，在Activity的onPause中调用于此就好。\n        try {\n            mDiskLruCache.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        //关闭缓存,一般在Activity的onDestroy中调用就好\n        try {\n            mDiskLruCache.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        //清空缓存，不同于remove，这是清空全部缓存\n        try {\n            mDiskLruCache.delete();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        /*\n         * journal文件分析\n         * 前五行基本就是open相关的参数的配置信息\n         * 第六行开始，DIRTY开头的，表示脏数据记录，每次调用DiskLruCache.edit都会有一个记录，\n         * 调用commit时候，会写入CLEAN记录，而调用abort，则写入REMOVE记录。\n         * 日志里item还会记录缓存的大小。READ就是调用get时候写入的记录。journal的记录不知无止境的，2000条左右计数，就会重构。\n         */\n    }\n```\n\n单独的使用内存缓存或者外部缓存，都未必是是最好的，一个优秀的开发者，必然会考虑到两者的结合使用。上面大神也有提供一个演示用的demo，在其博客中也有简介。","source":"_posts/图片缓存LruCache和DiskLruCache使用.md","raw":"---\ntitle: 图片缓存LruCache和DiskLruCache的使用\ndate: 2017-03-21 15:26\ntags:\n    - Lrucache\n    - Android\ncategories:\n    - Android\n---\n##前言\n\n作为一个Android技术小白，感觉自己各方面知识与技能都存在欠缺、不足，知识体系不够系统。是时候整理一下学习知识和技术点，慢慢梳理，架构体系，如此才能有利于自身技术的更好发展。Android属于开源操作系统，若要快速开发App，最好是学会很好的使用各种优秀的开源框架，一方面完成工作项目，同行也是提升自己代码能力。\n今天就先从内存缓存的优秀框架DiskLruCache和LruCache开始学习，毕竟Android新手开发都会经历一个OOM的处理问题，一个优秀的App开发中必须考虑资源优化的问题。闲言少续，言归正传。\n这里声明学习了[郭霖](http://blog.csdn.net/guolin_blog)大神的几篇文章[LruCache](http://blog.csdn.net/guolin_blog/article/details/9316683)、[DiskLruCache](http://blog.csdn.net/guolin_blog/article/details/28863651)以及两者结合使用的[Demo解析](http://blog.csdn.net/guolin_blog/article/details/34093441)。\n在此膜拜一下~~。\n##LruCache\nAndroid开发中我们都知道，大量的加载图片会导致内存泄露，也就是OOM，通常我们都会根据原始图片尺寸、设备屏幕尺寸、分辨率以及显示图片的view控件的大小，来使用图片压缩方式，减少资源占用。\n然而尽管如此，大量的图片资源消耗的内存也是相当惊人的。不论是listView还是GridView中，我们都会做定期的资源缓存和无用资源清理。\n若是从网络段加载图片，我们就要考虑到用户流量的问题，流量也是资源！除了使用图片压缩，就需要结合使用图片内存缓存技术了。\n```java\n/**\n * 解析图片，生成Bitmap对象。\n */\npublic static Bitmap decodeSampledBitmapFromResource(Resources res, int resId,  \n        int reqWidth, int reqHeight) {  \n    // 第一次解析将inJustDecodeBounds设置为true，来获取图片大小  \n    final BitmapFactory.Options options = new BitmapFactory.Options();  \n    options.inJustDecodeBounds = true;  \n    BitmapFactory.decodeResource(res, resId, options);  \n    // 调用下面定义的方法计算inSampleSize值  \n    options.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);  \n    // 使用获取到的inSampleSize值再次解析图片  \n    options.inJustDecodeBounds = false;  \n    return BitmapFactory.decodeResource(res, resId, options);  \n}  \n/**\n * 计算图片缩放比例\n */\npublic static int calculateInSampleSize(BitmapFactory.Options options,  \n        int reqWidth, int reqHeight) {  \n    // 源图片的高度和宽度  \n    final int height = options.outHeight;  \n    final int width = options.outWidth;  \n    int inSampleSize = 1;  \n    if (height > reqHeight || width > reqWidth) {  \n        // 计算出实际宽高和目标宽高的比率  \n        final int heightRatio = Math.round((float) height / (float) reqHeight);  \n        final int widthRatio = Math.round((float) width / (float) reqWidth);  \n        // 选择宽和高中最小的比率作为inSampleSize的值，这样可以保证最终图片的宽和高  \n        // 一定都会大于等于目标的宽和高。  \n        inSampleSize = heightRatio < widthRatio ? heightRatio : widthRatio;  \n    }  \n    return inSampleSize;  \n}  \n```\n**注：**此处找到一个关于图片压缩的比较不错的博客[一叶飘舟--Bitmap压缩](http://blog.csdn.net/jdsjlzx/article/details/44228935)。\nLruCache是Google官方提供的内存缓存类，其内部源码详解请移步上面大牛的博客。此处仅作简单的使用说明：\n```java\nprivate LruCache<String, Bitmap> mMemoryCache;  //LruCache对象\n  \n@Override  \nprotected void onCreate(Bundle savedInstanceState) {  \n    // 获取到可用内存的最大值，使用内存超出这个值会引起OutOfMemory异常。  \n    // LruCache通过构造函数传入缓存值，以KB为单位。  \n    int maxMemory = (int) (Runtime.getRuntime().maxMemory() / 1024);  \n    // 使用最大可用内存值的1/8作为缓存的大小。  \n    int cacheSize = maxMemory / 8;  \n    mMemoryCache = new LruCache<String, Bitmap>(cacheSize) {  \n        @Override  \n        protected int sizeOf(String key, Bitmap bitmap) {  \n            // 重写此方法来衡量每张图片的大小，默认返回图片数量。  \n            return bitmap.getByteCount() / 1024;  \n        }  \n    };  \n}  \n//首次使用，将图片资源添加到内存中\npublic void addBitmapToMemoryCache(String key, Bitmap bitmap) {  \n    if (getBitmapFromMemCache(key) == null) {  \n        mMemoryCache.put(key, bitmap);  \n    }  \n}  \n//从内存缓存获取图片资源\npublic Bitmap getBitmapFromMemCache(String key) {  \n    return mMemoryCache.get(key);  \n}  \n\n//加载图片时候，会看看有没有缓存，没有的话，在重新构建，有则使用缓存\npublic void loadBitmap(int resId, ImageView imageView) {  \n    final String imageKey = String.valueOf(resId);  \n    final Bitmap bitmap = getBitmapFromMemCache(imageKey);  \n    if (bitmap != null) {  \n        imageView.setImageBitmap(bitmap);  \n    } else {  \n        imageView.setImageResource(R.drawable.image_placeholder);  \n        BitmapWorkerTask task = new BitmapWorkerTask(imageView);  \n        task.execute(resId);  \n    }  \n}  \n\n//后台Task加载图片资源\nclass BitmapWorkerTask extends AsyncTask<Integer, Void, Bitmap> {  \n    // 在后台加载图片。  \n    @Override  \n    protected Bitmap doInBackground(Integer... params) {  \n        final Bitmap bitmap = decodeSampledBitmapFromResource(  \n                getResources(), params[0], 100, 100);  \n        addBitmapToMemoryCache(String.valueOf(params[0]), bitmap);  \n        return bitmap;  \n    }  \n}\n```\n在此说明一下，以前认为的使用什么软引用、弱引用来保存资源引用的方式，不再提倡，而且也不能保证优化效果了，因为高版本的Android中Java回收机制，会偏向于回收这些引用，从而并不能很好的起到缓存的作用。\n\n##DiskLruCache\nDiskLruCache类似于LruCache，其是将资源缓存在外部存储磁盘上，而不是内存，这样就可以有相对更为充足的资源空间，缓存更多的数据。具体的原理介绍，同样烦请移步上面大神的博客。此处仅作简要使用说明：\n\n- 先贴出DiskLruCache中使用到的工具类文件\n```java\n//DiskLruCache中使用到的工具方法\npublic class Utils {\n    /**\n     * 获取缓存文件夹，这里优先选择SD卡下面的android/data/packageName/cache/路径，若没有SD卡，就选择data/data/packageName/cache\n     *\n     * @param context    上下文环境\n     * @param uniqueName 缓存文件夹名称\n     * @return 返回缓存文件\n     */\n    public static File getDiskCacheDir(Context context, String uniqueName) {\n        String cachePath;\n        if (Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())\n                || !Environment.isExternalStorageRemovable()) {\n            cachePath = context.getExternalCacheDir().getPath();\n        } else {\n            cachePath = context.getCacheDir().getPath();\n        }\n        return new File(cachePath + File.separator + uniqueName);\n    }\n\n    /**\n     * 获取本App的版本号\n     *\n     * @param context context上下文\n     * @return 返回版本号\n     */\n    public static int getAppVersion(Context context) {\n        try {\n            PackageInfo info = context.getPackageManager().getPackageInfo(context.getPackageName(), 0);\n            return info.versionCode;\n        } catch (PackageManager.NameNotFoundException e) {\n            e.printStackTrace();\n        }\n        return 1;\n    }\n\n    /**\n     * 给字符串来个md5加密，\n     * @param key 需要加密的string\n     * @return 返回加密后的string ，或者加密失败，就返回string的哈希值\n     */\n    public static String hashKeyForDisk(String key) {\n        String cacheKey;\n        try {\n            //md5加密\n            MessageDigest mDigest = MessageDigest.getInstance(\"MD5\");\n            mDigest.update(key.getBytes());\n            cacheKey = bytesToHexString(mDigest.digest());\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n            //若md5加密失败，就用哈希值\n            cacheKey = String.valueOf(key.hashCode());\n        }\n        return cacheKey;\n    }\n\n    /**\n     * 字节数组转为十六进制字符串\n     * @param bytes 字节数组\n     * @return 返回十六进制字符串\n     */\n    private static String bytesToHexString(byte[] bytes) {\n        StringBuilder sb = new StringBuilder();\n        for (byte b : bytes) {\n            String hex = Integer.toHexString(0xFF & b);\n            if (hex.length()==1){\n                sb.append('0');\n            }\n            sb.append(hex);\n        }\n        return sb.toString();\n    }\n}\n```\n- DiskLruCache的使用\n```java\n\npublic class MainActivity extends AppCompatActivity {\n    DiskLruCache mDiskLruCache = null;//diskLruCache的对象\n    String imgUrl = \"http://img.my.csdn.net/uploads/201309/01/1378037235_7476.jpg\";//图片链接\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        //初始化缓存配置\n        openCache();\n    }\n\n    /**\n     * 初始化缓存配置\n     */\n    private void openCache() {\n        try {\n            //缓存图片数据的文件夹\n            File cacheDir = Utils.getDiskCacheDir(this, \"bitmap\");\n            if (!cacheDir.exists()) {\n                //使用mkdirs可以连同上级文件夹一同创建，否则mkdir可能会报错\n                cacheDir.mkdirs();\n            }\n            //参数，1、缓存目录；2、app版本号，因为它认为版本升级，缓存就没必要保存。3、一个key值对应多少个缓存文件，一般1个。4、单个缓存多大，10M就够了。\n            //超过最大缓存限制的，就会被自动清除了，所以一般不用程序中调用removeCache。\n            mDiskLruCache = DiskLruCache.open(cacheDir, Utils.getAppVersion(this), 1, 10 * 1024 * 1024);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * 写入缓存\n     */\n    public void writeCache(View view) {\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                //将图片的url地址md5 加密后，生成的key来作为缓存的唯一标志key，那么就可以实现图片和缓存对应起来。\n                String key = Utils.hashKeyForDisk(imgUrl);\n                try {\n                    DiskLruCache.Editor editor = mDiskLruCache.edit(key);\n                    if (editor != null) {\n                        //此处传入0参数的含义是，缓存的编号，因为DiskLruCache.open时候，传入了最大缓存个数为1，所以次数就是0就好。\n                        OutputStream outputStream = editor.newOutputStream(0);\n                        //根据现在成功与否，来决定是否提交缓存\n                        if (downloadImage(imgUrl, outputStream)) {\n                            editor.commit();\n                        } else {\n                            editor.abort();\n                        }\n                    }\n                    //刷新，写入\n                    mDiskLruCache.flush();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }).start();\n    }\n\n\n    /**\n     * 下载图片\n     *\n     * @param imgUrl       图片网址链接\n     * @param outputStream 输出流对象\n     * @return 返回时候完成下载成功\n     */\n    private boolean downloadImage(String imgUrl, OutputStream outputStream) {\n        HttpURLConnection urlConnection = null;\n        BufferedOutputStream out = null;\n        BufferedInputStream in = null;\n\n        try {\n            URL url = new URL(imgUrl);\n            urlConnection = (HttpURLConnection) url.openConnection();\n            in = new BufferedInputStream(urlConnection.getInputStream(), 8 * 1024);//Buffer输入流，8M大小的缓存\n            out = new BufferedOutputStream(outputStream, 8 * 1024);\n            int b;//正在读取的byte\n            while ((b = in.read()) != -1) {\n                out.write(b);\n            }\n            return true;\n        } catch (MalformedURLException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        //关闭资源\n        finally {\n            if (urlConnection != null) {\n                urlConnection.disconnect();\n            }\n            if (out != null) {\n                try {\n                    out.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n            if (in != null) {\n                try {\n                    in.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * 读取缓存\n     *\n     * @param view\n     */\n    public void readCache(View view) {\n        //使用DiskLruCache获取缓存，需要传入key，而key是imageUrl加密后的字符串，\n        String key = Utils.hashKeyForDisk(imgUrl);\n        try {\n            //通过key获取的只是一个快照，需要从快照获取输入流，转化为数据对象\n            DiskLruCache.Snapshot snapshot = mDiskLruCache.get(key);\n            if (snapshot != null) {\n                InputStream inputStream = snapshot.getInputStream(0);//类似写缓存时候，传入的是缓存的编号\n                //可以使用bitmapFactory\n                Drawable drawable = Drawable.createFromStream(inputStream, \"drawable\");\n                ImageView imageView = (ImageView) findViewById(R.id.iv_cache);\n                imageView.setImageDrawable(drawable);\n            }\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n    }\n\n    /**\n     * 清除缓存\n     *\n     * @param view\n     */\n    public void removeCache(View view) {\n        String key = Utils.hashKeyForDisk(imgUrl);\n        try {\n            //清除指定key的缓存\n            mDiskLruCache.remove(key);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * 演示DiskLruCache的其他api\n     */\n    public void otherAPI() {\n        //缓存目录大小\n        mDiskLruCache.size();\n        //将内存中的操作记录，同步到日志文件（journal），一般不要频繁操作，在Activity的onPause中调用于此就好。\n        try {\n            mDiskLruCache.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        //关闭缓存,一般在Activity的onDestroy中调用就好\n        try {\n            mDiskLruCache.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        //清空缓存，不同于remove，这是清空全部缓存\n        try {\n            mDiskLruCache.delete();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        /*\n         * journal文件分析\n         * 前五行基本就是open相关的参数的配置信息\n         * 第六行开始，DIRTY开头的，表示脏数据记录，每次调用DiskLruCache.edit都会有一个记录，\n         * 调用commit时候，会写入CLEAN记录，而调用abort，则写入REMOVE记录。\n         * 日志里item还会记录缓存的大小。READ就是调用get时候写入的记录。journal的记录不知无止境的，2000条左右计数，就会重构。\n         */\n    }\n```\n\n单独的使用内存缓存或者外部缓存，都未必是是最好的，一个优秀的开发者，必然会考虑到两者的结合使用。上面大神也有提供一个演示用的demo，在其博客中也有简介。","slug":"图片缓存LruCache和DiskLruCache使用","published":1,"updated":"2017-03-31T08:53:50.356Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ndxcdv002z88owllmlpuu5","content":"<p>##前言</p>\n<p>作为一个Android技术小白，感觉自己各方面知识与技能都存在欠缺、不足，知识体系不够系统。是时候整理一下学习知识和技术点，慢慢梳理，架构体系，如此才能有利于自身技术的更好发展。Android属于开源操作系统，若要快速开发App，最好是学会很好的使用各种优秀的开源框架，一方面完成工作项目，同行也是提升自己代码能力。<br>今天就先从内存缓存的优秀框架DiskLruCache和LruCache开始学习，毕竟Android新手开发都会经历一个OOM的处理问题，一个优秀的App开发中必须考虑资源优化的问题。闲言少续，言归正传。<br>这里声明学习了<a href=\"http://blog.csdn.net/guolin_blog\" target=\"_blank\" rel=\"external\">郭霖</a>大神的几篇文章<a href=\"http://blog.csdn.net/guolin_blog/article/details/9316683\" target=\"_blank\" rel=\"external\">LruCache</a>、<a href=\"http://blog.csdn.net/guolin_blog/article/details/28863651\" target=\"_blank\" rel=\"external\">DiskLruCache</a>以及两者结合使用的<a href=\"http://blog.csdn.net/guolin_blog/article/details/34093441\" target=\"_blank\" rel=\"external\">Demo解析</a>。<br>在此膜拜一下~~。</p>\n<p>##LruCache<br>Android开发中我们都知道，大量的加载图片会导致内存泄露，也就是OOM，通常我们都会根据原始图片尺寸、设备屏幕尺寸、分辨率以及显示图片的view控件的大小，来使用图片压缩方式，减少资源占用。<br>然而尽管如此，大量的图片资源消耗的内存也是相当惊人的。不论是listView还是GridView中，我们都会做定期的资源缓存和无用资源清理。<br>若是从网络段加载图片，我们就要考虑到用户流量的问题，流量也是资源！除了使用图片压缩，就需要结合使用图片内存缓存技术了。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 解析图片，生成Bitmap对象。</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Bitmap <span class=\"title\">decodeSampledBitmapFromResource</span><span class=\"params\">(Resources res, <span class=\"keyword\">int</span> resId,  </span></span></div><div class=\"line\">        <span class=\"keyword\">int</span> reqWidth, <span class=\"keyword\">int</span> reqHeight) &#123;  </div><div class=\"line\">    <span class=\"comment\">// 第一次解析将inJustDecodeBounds设置为true，来获取图片大小  </span></div><div class=\"line\">    <span class=\"keyword\">final</span> BitmapFactory.Options options = <span class=\"keyword\">new</span> BitmapFactory.Options();  </div><div class=\"line\">    options.inJustDecodeBounds = <span class=\"keyword\">true</span>;  </div><div class=\"line\">    BitmapFactory.decodeResource(res, resId, options);  </div><div class=\"line\">    <span class=\"comment\">// 调用下面定义的方法计算inSampleSize值  </span></div><div class=\"line\">    options.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);  </div><div class=\"line\">    <span class=\"comment\">// 使用获取到的inSampleSize值再次解析图片  </span></div><div class=\"line\">    options.inJustDecodeBounds = <span class=\"keyword\">false</span>;  </div><div class=\"line\">    <span class=\"keyword\">return</span> BitmapFactory.decodeResource(res, resId, options);  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 计算图片缩放比例</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">calculateInSampleSize</span><span class=\"params\">(BitmapFactory.Options options,  </span></span></div><div class=\"line\">        <span class=\"keyword\">int</span> reqWidth, <span class=\"keyword\">int</span> reqHeight) &#123;  </div><div class=\"line\">    <span class=\"comment\">// 源图片的高度和宽度  </span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> height = options.outHeight;  </div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> width = options.outWidth;  </div><div class=\"line\">    <span class=\"keyword\">int</span> inSampleSize = <span class=\"number\">1</span>;  </div><div class=\"line\">    <span class=\"keyword\">if</span> (height &gt; reqHeight || width &gt; reqWidth) &#123;  </div><div class=\"line\">        <span class=\"comment\">// 计算出实际宽高和目标宽高的比率  </span></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> heightRatio = Math.round((<span class=\"keyword\">float</span>) height / (<span class=\"keyword\">float</span>) reqHeight);  </div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> widthRatio = Math.round((<span class=\"keyword\">float</span>) width / (<span class=\"keyword\">float</span>) reqWidth);  </div><div class=\"line\">        <span class=\"comment\">// 选择宽和高中最小的比率作为inSampleSize的值，这样可以保证最终图片的宽和高  </span></div><div class=\"line\">        <span class=\"comment\">// 一定都会大于等于目标的宽和高。  </span></div><div class=\"line\">        inSampleSize = heightRatio &lt; widthRatio ? heightRatio : widthRatio;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"keyword\">return</span> inSampleSize;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>注：</strong>此处找到一个关于图片压缩的比较不错的博客<a href=\"http://blog.csdn.net/jdsjlzx/article/details/44228935\" target=\"_blank\" rel=\"external\">一叶飘舟–Bitmap压缩</a>。<br>LruCache是Google官方提供的内存缓存类，其内部源码详解请移步上面大牛的博客。此处仅作简单的使用说明：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> LruCache&lt;String, Bitmap&gt; mMemoryCache;  <span class=\"comment\">//LruCache对象</span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"meta\">@Override</span>  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;  </div><div class=\"line\">    <span class=\"comment\">// 获取到可用内存的最大值，使用内存超出这个值会引起OutOfMemory异常。  </span></div><div class=\"line\">    <span class=\"comment\">// LruCache通过构造函数传入缓存值，以KB为单位。  </span></div><div class=\"line\">    <span class=\"keyword\">int</span> maxMemory = (<span class=\"keyword\">int</span>) (Runtime.getRuntime().maxMemory() / <span class=\"number\">1024</span>);  </div><div class=\"line\">    <span class=\"comment\">// 使用最大可用内存值的1/8作为缓存的大小。  </span></div><div class=\"line\">    <span class=\"keyword\">int</span> cacheSize = maxMemory / <span class=\"number\">8</span>;  </div><div class=\"line\">    mMemoryCache = <span class=\"keyword\">new</span> LruCache&lt;String, Bitmap&gt;(cacheSize) &#123;  </div><div class=\"line\">        <span class=\"meta\">@Override</span>  </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> <span class=\"title\">sizeOf</span><span class=\"params\">(String key, Bitmap bitmap)</span> </span>&#123;  </div><div class=\"line\">            <span class=\"comment\">// 重写此方法来衡量每张图片的大小，默认返回图片数量。  </span></div><div class=\"line\">            <span class=\"keyword\">return</span> bitmap.getByteCount() / <span class=\"number\">1024</span>;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;;  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"comment\">//首次使用，将图片资源添加到内存中</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addBitmapToMemoryCache</span><span class=\"params\">(String key, Bitmap bitmap)</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span> (getBitmapFromMemCache(key) == <span class=\"keyword\">null</span>) &#123;  </div><div class=\"line\">        mMemoryCache.put(key, bitmap);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"comment\">//从内存缓存获取图片资源</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Bitmap <span class=\"title\">getBitmapFromMemCache</span><span class=\"params\">(String key)</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">return</span> mMemoryCache.get(key);  </div><div class=\"line\">&#125;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//加载图片时候，会看看有没有缓存，没有的话，在重新构建，有则使用缓存</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">loadBitmap</span><span class=\"params\">(<span class=\"keyword\">int</span> resId, ImageView imageView)</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">final</span> String imageKey = String.valueOf(resId);  </div><div class=\"line\">    <span class=\"keyword\">final</span> Bitmap bitmap = getBitmapFromMemCache(imageKey);  </div><div class=\"line\">    <span class=\"keyword\">if</span> (bitmap != <span class=\"keyword\">null</span>) &#123;  </div><div class=\"line\">        imageView.setImageBitmap(bitmap);  </div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;  </div><div class=\"line\">        imageView.setImageResource(R.drawable.image_placeholder);  </div><div class=\"line\">        BitmapWorkerTask task = <span class=\"keyword\">new</span> BitmapWorkerTask(imageView);  </div><div class=\"line\">        task.execute(resId);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//后台Task加载图片资源</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BitmapWorkerTask</span> <span class=\"keyword\">extends</span> <span class=\"title\">AsyncTask</span>&lt;<span class=\"title\">Integer</span>, <span class=\"title\">Void</span>, <span class=\"title\">Bitmap</span>&gt; </span>&#123;  </div><div class=\"line\">    <span class=\"comment\">// 在后台加载图片。  </span></div><div class=\"line\">    <span class=\"meta\">@Override</span>  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Bitmap <span class=\"title\">doInBackground</span><span class=\"params\">(Integer... params)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">final</span> Bitmap bitmap = decodeSampledBitmapFromResource(  </div><div class=\"line\">                getResources(), params[<span class=\"number\">0</span>], <span class=\"number\">100</span>, <span class=\"number\">100</span>);  </div><div class=\"line\">        addBitmapToMemoryCache(String.valueOf(params[<span class=\"number\">0</span>]), bitmap);  </div><div class=\"line\">        <span class=\"keyword\">return</span> bitmap;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在此说明一下，以前认为的使用什么软引用、弱引用来保存资源引用的方式，不再提倡，而且也不能保证优化效果了，因为高版本的Android中Java回收机制，会偏向于回收这些引用，从而并不能很好的起到缓存的作用。</p>\n<p>##DiskLruCache<br>DiskLruCache类似于LruCache，其是将资源缓存在外部存储磁盘上，而不是内存，这样就可以有相对更为充足的资源空间，缓存更多的数据。具体的原理介绍，同样烦请移步上面大神的博客。此处仅作简要使用说明：</p>\n<ul>\n<li><p>先贴出DiskLruCache中使用到的工具类文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//DiskLruCache中使用到的工具方法</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Utils</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 获取缓存文件夹，这里优先选择SD卡下面的android/data/packageName/cache/路径，若没有SD卡，就选择data/data/packageName/cache</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> context    上下文环境</div><div class=\"line\">     * <span class=\"doctag\">@param</span> uniqueName 缓存文件夹名称</div><div class=\"line\">     * <span class=\"doctag\">@return</span> 返回缓存文件</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> File <span class=\"title\">getDiskCacheDir</span><span class=\"params\">(Context context, String uniqueName)</span> </span>&#123;</div><div class=\"line\">        String cachePath;</div><div class=\"line\">        <span class=\"keyword\">if</span> (Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())</div><div class=\"line\">                || !Environment.isExternalStorageRemovable()) &#123;</div><div class=\"line\">            cachePath = context.getExternalCacheDir().getPath();</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            cachePath = context.getCacheDir().getPath();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> File(cachePath + File.separator + uniqueName);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 获取本App的版本号</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> context context上下文</div><div class=\"line\">     * <span class=\"doctag\">@return</span> 返回版本号</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getAppVersion</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            PackageInfo info = context.getPackageManager().getPackageInfo(context.getPackageName(), <span class=\"number\">0</span>);</div><div class=\"line\">            <span class=\"keyword\">return</span> info.versionCode;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (PackageManager.NameNotFoundException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 给字符串来个md5加密，</div><div class=\"line\">     * <span class=\"doctag\">@param</span> key 需要加密的string</div><div class=\"line\">     * <span class=\"doctag\">@return</span> 返回加密后的string ，或者加密失败，就返回string的哈希值</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">hashKeyForDisk</span><span class=\"params\">(String key)</span> </span>&#123;</div><div class=\"line\">        String cacheKey;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"comment\">//md5加密</span></div><div class=\"line\">            MessageDigest mDigest = MessageDigest.getInstance(<span class=\"string\">\"MD5\"</span>);</div><div class=\"line\">            mDigest.update(key.getBytes());</div><div class=\"line\">            cacheKey = bytesToHexString(mDigest.digest());</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">            <span class=\"comment\">//若md5加密失败，就用哈希值</span></div><div class=\"line\">            cacheKey = String.valueOf(key.hashCode());</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> cacheKey;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 字节数组转为十六进制字符串</div><div class=\"line\">     * <span class=\"doctag\">@param</span> bytes 字节数组</div><div class=\"line\">     * <span class=\"doctag\">@return</span> 返回十六进制字符串</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title\">bytesToHexString</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] bytes)</span> </span>&#123;</div><div class=\"line\">        StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">byte</span> b : bytes) &#123;</div><div class=\"line\">            String hex = Integer.toHexString(<span class=\"number\">0xFF</span> &amp; b);</div><div class=\"line\">            <span class=\"keyword\">if</span> (hex.length()==<span class=\"number\">1</span>)&#123;</div><div class=\"line\">                sb.append(<span class=\"string\">'0'</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            sb.append(hex);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> sb.toString();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>DiskLruCache的使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\">    DiskLruCache mDiskLruCache = <span class=\"keyword\">null</span>;<span class=\"comment\">//diskLruCache的对象</span></div><div class=\"line\">    String imgUrl = <span class=\"string\">\"http://img.my.csdn.net/uploads/201309/01/1378037235_7476.jpg\"</span>;<span class=\"comment\">//图片链接</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\">        <span class=\"comment\">//初始化缓存配置</span></div><div class=\"line\">        openCache();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 初始化缓存配置</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">openCache</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"comment\">//缓存图片数据的文件夹</span></div><div class=\"line\">            File cacheDir = Utils.getDiskCacheDir(<span class=\"keyword\">this</span>, <span class=\"string\">\"bitmap\"</span>);</div><div class=\"line\">            <span class=\"keyword\">if</span> (!cacheDir.exists()) &#123;</div><div class=\"line\">                <span class=\"comment\">//使用mkdirs可以连同上级文件夹一同创建，否则mkdir可能会报错</span></div><div class=\"line\">                cacheDir.mkdirs();</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">//参数，1、缓存目录；2、app版本号，因为它认为版本升级，缓存就没必要保存。3、一个key值对应多少个缓存文件，一般1个。4、单个缓存多大，10M就够了。</span></div><div class=\"line\">            <span class=\"comment\">//超过最大缓存限制的，就会被自动清除了，所以一般不用程序中调用removeCache。</span></div><div class=\"line\">            mDiskLruCache = DiskLruCache.open(cacheDir, Utils.getAppVersion(<span class=\"keyword\">this</span>), <span class=\"number\">1</span>, <span class=\"number\">10</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 写入缓存</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">writeCache</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                <span class=\"comment\">//将图片的url地址md5 加密后，生成的key来作为缓存的唯一标志key，那么就可以实现图片和缓存对应起来。</span></div><div class=\"line\">                String key = Utils.hashKeyForDisk(imgUrl);</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    DiskLruCache.Editor editor = mDiskLruCache.edit(key);</div><div class=\"line\">                    <span class=\"keyword\">if</span> (editor != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                        <span class=\"comment\">//此处传入0参数的含义是，缓存的编号，因为DiskLruCache.open时候，传入了最大缓存个数为1，所以次数就是0就好。</span></div><div class=\"line\">                        OutputStream outputStream = editor.newOutputStream(<span class=\"number\">0</span>);</div><div class=\"line\">                        <span class=\"comment\">//根据现在成功与否，来决定是否提交缓存</span></div><div class=\"line\">                        <span class=\"keyword\">if</span> (downloadImage(imgUrl, outputStream)) &#123;</div><div class=\"line\">                            editor.commit();</div><div class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                            editor.abort();</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"comment\">//刷新，写入</span></div><div class=\"line\">                    mDiskLruCache.flush();</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">                    e.printStackTrace();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;).start();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 下载图片</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> imgUrl       图片网址链接</div><div class=\"line\">     * <span class=\"doctag\">@param</span> outputStream 输出流对象</div><div class=\"line\">     * <span class=\"doctag\">@return</span> 返回时候完成下载成功</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">downloadImage</span><span class=\"params\">(String imgUrl, OutputStream outputStream)</span> </span>&#123;</div><div class=\"line\">        HttpURLConnection urlConnection = <span class=\"keyword\">null</span>;</div><div class=\"line\">        BufferedOutputStream out = <span class=\"keyword\">null</span>;</div><div class=\"line\">        BufferedInputStream in = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            URL url = <span class=\"keyword\">new</span> URL(imgUrl);</div><div class=\"line\">            urlConnection = (HttpURLConnection) url.openConnection();</div><div class=\"line\">            in = <span class=\"keyword\">new</span> BufferedInputStream(urlConnection.getInputStream(), <span class=\"number\">8</span> * <span class=\"number\">1024</span>);<span class=\"comment\">//Buffer输入流，8M大小的缓存</span></div><div class=\"line\">            out = <span class=\"keyword\">new</span> BufferedOutputStream(outputStream, <span class=\"number\">8</span> * <span class=\"number\">1024</span>);</div><div class=\"line\">            <span class=\"keyword\">int</span> b;<span class=\"comment\">//正在读取的byte</span></div><div class=\"line\">            <span class=\"keyword\">while</span> ((b = in.read()) != -<span class=\"number\">1</span>) &#123;</div><div class=\"line\">                out.write(b);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (MalformedURLException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//关闭资源</span></div><div class=\"line\">        <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (urlConnection != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                urlConnection.disconnect();</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (out != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    out.close();</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">                    e.printStackTrace();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (in != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    in.close();</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">                    e.printStackTrace();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 读取缓存</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> view</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">readCache</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//使用DiskLruCache获取缓存，需要传入key，而key是imageUrl加密后的字符串，</span></div><div class=\"line\">        String key = Utils.hashKeyForDisk(imgUrl);</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"comment\">//通过key获取的只是一个快照，需要从快照获取输入流，转化为数据对象</span></div><div class=\"line\">            DiskLruCache.Snapshot snapshot = mDiskLruCache.get(key);</div><div class=\"line\">            <span class=\"keyword\">if</span> (snapshot != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                InputStream inputStream = snapshot.getInputStream(<span class=\"number\">0</span>);<span class=\"comment\">//类似写缓存时候，传入的是缓存的编号</span></div><div class=\"line\">                <span class=\"comment\">//可以使用bitmapFactory</span></div><div class=\"line\">                Drawable drawable = Drawable.createFromStream(inputStream, <span class=\"string\">\"drawable\"</span>);</div><div class=\"line\">                ImageView imageView = (ImageView) findViewById(R.id.iv_cache);</div><div class=\"line\">                imageView.setImageDrawable(drawable);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 清除缓存</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> view</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeCache</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">        String key = Utils.hashKeyForDisk(imgUrl);</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"comment\">//清除指定key的缓存</span></div><div class=\"line\">            mDiskLruCache.remove(key);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 演示DiskLruCache的其他api</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">otherAPI</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//缓存目录大小</span></div><div class=\"line\">        mDiskLruCache.size();</div><div class=\"line\">        <span class=\"comment\">//将内存中的操作记录，同步到日志文件（journal），一般不要频繁操作，在Activity的onPause中调用于此就好。</span></div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            mDiskLruCache.flush();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//关闭缓存,一般在Activity的onDestroy中调用就好</span></div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            mDiskLruCache.close();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//清空缓存，不同于remove，这是清空全部缓存</span></div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            mDiskLruCache.delete();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/*</span></div><div class=\"line\">         * journal文件分析</div><div class=\"line\">         * 前五行基本就是open相关的参数的配置信息</div><div class=\"line\">         * 第六行开始，DIRTY开头的，表示脏数据记录，每次调用DiskLruCache.edit都会有一个记录，</div><div class=\"line\">         * 调用commit时候，会写入CLEAN记录，而调用abort，则写入REMOVE记录。</div><div class=\"line\">         * 日志里item还会记录缓存的大小。READ就是调用get时候写入的记录。journal的记录不知无止境的，2000条左右计数，就会重构。</div><div class=\"line\">         */</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>单独的使用内存缓存或者外部缓存，都未必是是最好的，一个优秀的开发者，必然会考虑到两者的结合使用。上面大神也有提供一个演示用的demo，在其博客中也有简介。</p>\n","excerpt":"","more":"<p>##前言</p>\n<p>作为一个Android技术小白，感觉自己各方面知识与技能都存在欠缺、不足，知识体系不够系统。是时候整理一下学习知识和技术点，慢慢梳理，架构体系，如此才能有利于自身技术的更好发展。Android属于开源操作系统，若要快速开发App，最好是学会很好的使用各种优秀的开源框架，一方面完成工作项目，同行也是提升自己代码能力。<br>今天就先从内存缓存的优秀框架DiskLruCache和LruCache开始学习，毕竟Android新手开发都会经历一个OOM的处理问题，一个优秀的App开发中必须考虑资源优化的问题。闲言少续，言归正传。<br>这里声明学习了<a href=\"http://blog.csdn.net/guolin_blog\">郭霖</a>大神的几篇文章<a href=\"http://blog.csdn.net/guolin_blog/article/details/9316683\">LruCache</a>、<a href=\"http://blog.csdn.net/guolin_blog/article/details/28863651\">DiskLruCache</a>以及两者结合使用的<a href=\"http://blog.csdn.net/guolin_blog/article/details/34093441\">Demo解析</a>。<br>在此膜拜一下~~。</p>\n<p>##LruCache<br>Android开发中我们都知道，大量的加载图片会导致内存泄露，也就是OOM，通常我们都会根据原始图片尺寸、设备屏幕尺寸、分辨率以及显示图片的view控件的大小，来使用图片压缩方式，减少资源占用。<br>然而尽管如此，大量的图片资源消耗的内存也是相当惊人的。不论是listView还是GridView中，我们都会做定期的资源缓存和无用资源清理。<br>若是从网络段加载图片，我们就要考虑到用户流量的问题，流量也是资源！除了使用图片压缩，就需要结合使用图片内存缓存技术了。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 解析图片，生成Bitmap对象。</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Bitmap <span class=\"title\">decodeSampledBitmapFromResource</span><span class=\"params\">(Resources res, <span class=\"keyword\">int</span> resId,  </span></span></div><div class=\"line\">        <span class=\"keyword\">int</span> reqWidth, <span class=\"keyword\">int</span> reqHeight) &#123;  </div><div class=\"line\">    <span class=\"comment\">// 第一次解析将inJustDecodeBounds设置为true，来获取图片大小  </span></div><div class=\"line\">    <span class=\"keyword\">final</span> BitmapFactory.Options options = <span class=\"keyword\">new</span> BitmapFactory.Options();  </div><div class=\"line\">    options.inJustDecodeBounds = <span class=\"keyword\">true</span>;  </div><div class=\"line\">    BitmapFactory.decodeResource(res, resId, options);  </div><div class=\"line\">    <span class=\"comment\">// 调用下面定义的方法计算inSampleSize值  </span></div><div class=\"line\">    options.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);  </div><div class=\"line\">    <span class=\"comment\">// 使用获取到的inSampleSize值再次解析图片  </span></div><div class=\"line\">    options.inJustDecodeBounds = <span class=\"keyword\">false</span>;  </div><div class=\"line\">    <span class=\"keyword\">return</span> BitmapFactory.decodeResource(res, resId, options);  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 计算图片缩放比例</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">calculateInSampleSize</span><span class=\"params\">(BitmapFactory.Options options,  </span></span></div><div class=\"line\">        <span class=\"keyword\">int</span> reqWidth, <span class=\"keyword\">int</span> reqHeight) &#123;  </div><div class=\"line\">    <span class=\"comment\">// 源图片的高度和宽度  </span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> height = options.outHeight;  </div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> width = options.outWidth;  </div><div class=\"line\">    <span class=\"keyword\">int</span> inSampleSize = <span class=\"number\">1</span>;  </div><div class=\"line\">    <span class=\"keyword\">if</span> (height &gt; reqHeight || width &gt; reqWidth) &#123;  </div><div class=\"line\">        <span class=\"comment\">// 计算出实际宽高和目标宽高的比率  </span></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> heightRatio = Math.round((<span class=\"keyword\">float</span>) height / (<span class=\"keyword\">float</span>) reqHeight);  </div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> widthRatio = Math.round((<span class=\"keyword\">float</span>) width / (<span class=\"keyword\">float</span>) reqWidth);  </div><div class=\"line\">        <span class=\"comment\">// 选择宽和高中最小的比率作为inSampleSize的值，这样可以保证最终图片的宽和高  </span></div><div class=\"line\">        <span class=\"comment\">// 一定都会大于等于目标的宽和高。  </span></div><div class=\"line\">        inSampleSize = heightRatio &lt; widthRatio ? heightRatio : widthRatio;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"keyword\">return</span> inSampleSize;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>注：</strong>此处找到一个关于图片压缩的比较不错的博客<a href=\"http://blog.csdn.net/jdsjlzx/article/details/44228935\">一叶飘舟–Bitmap压缩</a>。<br>LruCache是Google官方提供的内存缓存类，其内部源码详解请移步上面大牛的博客。此处仅作简单的使用说明：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> LruCache&lt;String, Bitmap&gt; mMemoryCache;  <span class=\"comment\">//LruCache对象</span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"meta\">@Override</span>  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;  </div><div class=\"line\">    <span class=\"comment\">// 获取到可用内存的最大值，使用内存超出这个值会引起OutOfMemory异常。  </span></div><div class=\"line\">    <span class=\"comment\">// LruCache通过构造函数传入缓存值，以KB为单位。  </span></div><div class=\"line\">    <span class=\"keyword\">int</span> maxMemory = (<span class=\"keyword\">int</span>) (Runtime.getRuntime().maxMemory() / <span class=\"number\">1024</span>);  </div><div class=\"line\">    <span class=\"comment\">// 使用最大可用内存值的1/8作为缓存的大小。  </span></div><div class=\"line\">    <span class=\"keyword\">int</span> cacheSize = maxMemory / <span class=\"number\">8</span>;  </div><div class=\"line\">    mMemoryCache = <span class=\"keyword\">new</span> LruCache&lt;String, Bitmap&gt;(cacheSize) &#123;  </div><div class=\"line\">        <span class=\"meta\">@Override</span>  </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> <span class=\"title\">sizeOf</span><span class=\"params\">(String key, Bitmap bitmap)</span> </span>&#123;  </div><div class=\"line\">            <span class=\"comment\">// 重写此方法来衡量每张图片的大小，默认返回图片数量。  </span></div><div class=\"line\">            <span class=\"keyword\">return</span> bitmap.getByteCount() / <span class=\"number\">1024</span>;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;;  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"comment\">//首次使用，将图片资源添加到内存中</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addBitmapToMemoryCache</span><span class=\"params\">(String key, Bitmap bitmap)</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span> (getBitmapFromMemCache(key) == <span class=\"keyword\">null</span>) &#123;  </div><div class=\"line\">        mMemoryCache.put(key, bitmap);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"comment\">//从内存缓存获取图片资源</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Bitmap <span class=\"title\">getBitmapFromMemCache</span><span class=\"params\">(String key)</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">return</span> mMemoryCache.get(key);  </div><div class=\"line\">&#125;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//加载图片时候，会看看有没有缓存，没有的话，在重新构建，有则使用缓存</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">loadBitmap</span><span class=\"params\">(<span class=\"keyword\">int</span> resId, ImageView imageView)</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">final</span> String imageKey = String.valueOf(resId);  </div><div class=\"line\">    <span class=\"keyword\">final</span> Bitmap bitmap = getBitmapFromMemCache(imageKey);  </div><div class=\"line\">    <span class=\"keyword\">if</span> (bitmap != <span class=\"keyword\">null</span>) &#123;  </div><div class=\"line\">        imageView.setImageBitmap(bitmap);  </div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;  </div><div class=\"line\">        imageView.setImageResource(R.drawable.image_placeholder);  </div><div class=\"line\">        BitmapWorkerTask task = <span class=\"keyword\">new</span> BitmapWorkerTask(imageView);  </div><div class=\"line\">        task.execute(resId);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//后台Task加载图片资源</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BitmapWorkerTask</span> <span class=\"keyword\">extends</span> <span class=\"title\">AsyncTask</span>&lt;<span class=\"title\">Integer</span>, <span class=\"title\">Void</span>, <span class=\"title\">Bitmap</span>&gt; </span>&#123;  </div><div class=\"line\">    <span class=\"comment\">// 在后台加载图片。  </span></div><div class=\"line\">    <span class=\"meta\">@Override</span>  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Bitmap <span class=\"title\">doInBackground</span><span class=\"params\">(Integer... params)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">final</span> Bitmap bitmap = decodeSampledBitmapFromResource(  </div><div class=\"line\">                getResources(), params[<span class=\"number\">0</span>], <span class=\"number\">100</span>, <span class=\"number\">100</span>);  </div><div class=\"line\">        addBitmapToMemoryCache(String.valueOf(params[<span class=\"number\">0</span>]), bitmap);  </div><div class=\"line\">        <span class=\"keyword\">return</span> bitmap;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在此说明一下，以前认为的使用什么软引用、弱引用来保存资源引用的方式，不再提倡，而且也不能保证优化效果了，因为高版本的Android中Java回收机制，会偏向于回收这些引用，从而并不能很好的起到缓存的作用。</p>\n<p>##DiskLruCache<br>DiskLruCache类似于LruCache，其是将资源缓存在外部存储磁盘上，而不是内存，这样就可以有相对更为充足的资源空间，缓存更多的数据。具体的原理介绍，同样烦请移步上面大神的博客。此处仅作简要使用说明：</p>\n<ul>\n<li><p>先贴出DiskLruCache中使用到的工具类文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//DiskLruCache中使用到的工具方法</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Utils</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 获取缓存文件夹，这里优先选择SD卡下面的android/data/packageName/cache/路径，若没有SD卡，就选择data/data/packageName/cache</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> context    上下文环境</div><div class=\"line\">     * <span class=\"doctag\">@param</span> uniqueName 缓存文件夹名称</div><div class=\"line\">     * <span class=\"doctag\">@return</span> 返回缓存文件</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> File <span class=\"title\">getDiskCacheDir</span><span class=\"params\">(Context context, String uniqueName)</span> </span>&#123;</div><div class=\"line\">        String cachePath;</div><div class=\"line\">        <span class=\"keyword\">if</span> (Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())</div><div class=\"line\">                || !Environment.isExternalStorageRemovable()) &#123;</div><div class=\"line\">            cachePath = context.getExternalCacheDir().getPath();</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            cachePath = context.getCacheDir().getPath();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> File(cachePath + File.separator + uniqueName);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 获取本App的版本号</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> context context上下文</div><div class=\"line\">     * <span class=\"doctag\">@return</span> 返回版本号</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getAppVersion</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            PackageInfo info = context.getPackageManager().getPackageInfo(context.getPackageName(), <span class=\"number\">0</span>);</div><div class=\"line\">            <span class=\"keyword\">return</span> info.versionCode;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (PackageManager.NameNotFoundException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 给字符串来个md5加密，</div><div class=\"line\">     * <span class=\"doctag\">@param</span> key 需要加密的string</div><div class=\"line\">     * <span class=\"doctag\">@return</span> 返回加密后的string ，或者加密失败，就返回string的哈希值</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">hashKeyForDisk</span><span class=\"params\">(String key)</span> </span>&#123;</div><div class=\"line\">        String cacheKey;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"comment\">//md5加密</span></div><div class=\"line\">            MessageDigest mDigest = MessageDigest.getInstance(<span class=\"string\">\"MD5\"</span>);</div><div class=\"line\">            mDigest.update(key.getBytes());</div><div class=\"line\">            cacheKey = bytesToHexString(mDigest.digest());</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">            <span class=\"comment\">//若md5加密失败，就用哈希值</span></div><div class=\"line\">            cacheKey = String.valueOf(key.hashCode());</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> cacheKey;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 字节数组转为十六进制字符串</div><div class=\"line\">     * <span class=\"doctag\">@param</span> bytes 字节数组</div><div class=\"line\">     * <span class=\"doctag\">@return</span> 返回十六进制字符串</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title\">bytesToHexString</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] bytes)</span> </span>&#123;</div><div class=\"line\">        StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">byte</span> b : bytes) &#123;</div><div class=\"line\">            String hex = Integer.toHexString(<span class=\"number\">0xFF</span> &amp; b);</div><div class=\"line\">            <span class=\"keyword\">if</span> (hex.length()==<span class=\"number\">1</span>)&#123;</div><div class=\"line\">                sb.append(<span class=\"string\">'0'</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            sb.append(hex);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> sb.toString();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>DiskLruCache的使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\">    DiskLruCache mDiskLruCache = <span class=\"keyword\">null</span>;<span class=\"comment\">//diskLruCache的对象</span></div><div class=\"line\">    String imgUrl = <span class=\"string\">\"http://img.my.csdn.net/uploads/201309/01/1378037235_7476.jpg\"</span>;<span class=\"comment\">//图片链接</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\">        <span class=\"comment\">//初始化缓存配置</span></div><div class=\"line\">        openCache();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 初始化缓存配置</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">openCache</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"comment\">//缓存图片数据的文件夹</span></div><div class=\"line\">            File cacheDir = Utils.getDiskCacheDir(<span class=\"keyword\">this</span>, <span class=\"string\">\"bitmap\"</span>);</div><div class=\"line\">            <span class=\"keyword\">if</span> (!cacheDir.exists()) &#123;</div><div class=\"line\">                <span class=\"comment\">//使用mkdirs可以连同上级文件夹一同创建，否则mkdir可能会报错</span></div><div class=\"line\">                cacheDir.mkdirs();</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">//参数，1、缓存目录；2、app版本号，因为它认为版本升级，缓存就没必要保存。3、一个key值对应多少个缓存文件，一般1个。4、单个缓存多大，10M就够了。</span></div><div class=\"line\">            <span class=\"comment\">//超过最大缓存限制的，就会被自动清除了，所以一般不用程序中调用removeCache。</span></div><div class=\"line\">            mDiskLruCache = DiskLruCache.open(cacheDir, Utils.getAppVersion(<span class=\"keyword\">this</span>), <span class=\"number\">1</span>, <span class=\"number\">10</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 写入缓存</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">writeCache</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                <span class=\"comment\">//将图片的url地址md5 加密后，生成的key来作为缓存的唯一标志key，那么就可以实现图片和缓存对应起来。</span></div><div class=\"line\">                String key = Utils.hashKeyForDisk(imgUrl);</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    DiskLruCache.Editor editor = mDiskLruCache.edit(key);</div><div class=\"line\">                    <span class=\"keyword\">if</span> (editor != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                        <span class=\"comment\">//此处传入0参数的含义是，缓存的编号，因为DiskLruCache.open时候，传入了最大缓存个数为1，所以次数就是0就好。</span></div><div class=\"line\">                        OutputStream outputStream = editor.newOutputStream(<span class=\"number\">0</span>);</div><div class=\"line\">                        <span class=\"comment\">//根据现在成功与否，来决定是否提交缓存</span></div><div class=\"line\">                        <span class=\"keyword\">if</span> (downloadImage(imgUrl, outputStream)) &#123;</div><div class=\"line\">                            editor.commit();</div><div class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                            editor.abort();</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"comment\">//刷新，写入</span></div><div class=\"line\">                    mDiskLruCache.flush();</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">                    e.printStackTrace();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;).start();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 下载图片</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> imgUrl       图片网址链接</div><div class=\"line\">     * <span class=\"doctag\">@param</span> outputStream 输出流对象</div><div class=\"line\">     * <span class=\"doctag\">@return</span> 返回时候完成下载成功</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">downloadImage</span><span class=\"params\">(String imgUrl, OutputStream outputStream)</span> </span>&#123;</div><div class=\"line\">        HttpURLConnection urlConnection = <span class=\"keyword\">null</span>;</div><div class=\"line\">        BufferedOutputStream out = <span class=\"keyword\">null</span>;</div><div class=\"line\">        BufferedInputStream in = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            URL url = <span class=\"keyword\">new</span> URL(imgUrl);</div><div class=\"line\">            urlConnection = (HttpURLConnection) url.openConnection();</div><div class=\"line\">            in = <span class=\"keyword\">new</span> BufferedInputStream(urlConnection.getInputStream(), <span class=\"number\">8</span> * <span class=\"number\">1024</span>);<span class=\"comment\">//Buffer输入流，8M大小的缓存</span></div><div class=\"line\">            out = <span class=\"keyword\">new</span> BufferedOutputStream(outputStream, <span class=\"number\">8</span> * <span class=\"number\">1024</span>);</div><div class=\"line\">            <span class=\"keyword\">int</span> b;<span class=\"comment\">//正在读取的byte</span></div><div class=\"line\">            <span class=\"keyword\">while</span> ((b = in.read()) != -<span class=\"number\">1</span>) &#123;</div><div class=\"line\">                out.write(b);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (MalformedURLException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//关闭资源</span></div><div class=\"line\">        <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (urlConnection != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                urlConnection.disconnect();</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (out != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    out.close();</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">                    e.printStackTrace();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (in != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    in.close();</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">                    e.printStackTrace();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 读取缓存</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> view</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">readCache</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//使用DiskLruCache获取缓存，需要传入key，而key是imageUrl加密后的字符串，</span></div><div class=\"line\">        String key = Utils.hashKeyForDisk(imgUrl);</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"comment\">//通过key获取的只是一个快照，需要从快照获取输入流，转化为数据对象</span></div><div class=\"line\">            DiskLruCache.Snapshot snapshot = mDiskLruCache.get(key);</div><div class=\"line\">            <span class=\"keyword\">if</span> (snapshot != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                InputStream inputStream = snapshot.getInputStream(<span class=\"number\">0</span>);<span class=\"comment\">//类似写缓存时候，传入的是缓存的编号</span></div><div class=\"line\">                <span class=\"comment\">//可以使用bitmapFactory</span></div><div class=\"line\">                Drawable drawable = Drawable.createFromStream(inputStream, <span class=\"string\">\"drawable\"</span>);</div><div class=\"line\">                ImageView imageView = (ImageView) findViewById(R.id.iv_cache);</div><div class=\"line\">                imageView.setImageDrawable(drawable);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 清除缓存</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> view</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeCache</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">        String key = Utils.hashKeyForDisk(imgUrl);</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"comment\">//清除指定key的缓存</span></div><div class=\"line\">            mDiskLruCache.remove(key);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 演示DiskLruCache的其他api</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">otherAPI</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//缓存目录大小</span></div><div class=\"line\">        mDiskLruCache.size();</div><div class=\"line\">        <span class=\"comment\">//将内存中的操作记录，同步到日志文件（journal），一般不要频繁操作，在Activity的onPause中调用于此就好。</span></div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            mDiskLruCache.flush();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//关闭缓存,一般在Activity的onDestroy中调用就好</span></div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            mDiskLruCache.close();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//清空缓存，不同于remove，这是清空全部缓存</span></div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            mDiskLruCache.delete();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/*</span></div><div class=\"line\">         * journal文件分析</div><div class=\"line\">         * 前五行基本就是open相关的参数的配置信息</div><div class=\"line\">         * 第六行开始，DIRTY开头的，表示脏数据记录，每次调用DiskLruCache.edit都会有一个记录，</div><div class=\"line\">         * 调用commit时候，会写入CLEAN记录，而调用abort，则写入REMOVE记录。</div><div class=\"line\">         * 日志里item还会记录缓存的大小。READ就是调用get时候写入的记录。journal的记录不知无止境的，2000条左右计数，就会重构。</div><div class=\"line\">         */</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>单独的使用内存缓存或者外部缓存，都未必是是最好的，一个优秀的开发者，必然会考虑到两者的结合使用。上面大神也有提供一个演示用的demo，在其博客中也有简介。</p>\n"},{"title":"斐波那契数列","date":"2016-11-17T06:41:00.000Z","_content":"\n前言：<font color=\"ff0000\">作为IT行业的技术小白，深知需要不断学习的技术和知识很多很多，最近学习Python语言，便想起做学习笔记，本人博客多数均是个人原创文章，然而技术内容并非都是原创，写入博客仅作为个人学习笔记知识整理，亦希望有助于其他初级网友，技术大牛与大神们请绕道，不喜勿喷。</font>\n\n###经典故事\n有一对兔子，从出生后第3个月起每个月都生一对兔子，\n小兔子长到第三个月后每个月又生一对兔子，假如兔子都不死，问每个月的兔子总数为多少？\n\n其实如上问题也便是本文所要讲述的 `斐波那契` 数列的问题，斐波那契数列是这么一组数，\n> 斐波那契数列（Fibonacci sequence），又称黄金分割数列\n> 0、1、1、2、3、5、8、13、21、34、…...\n> 在数学上，费波那契数列是以递归的方法来定义：\n> $$F_0 = 0,(n=0)$$\n> $$F_1 = 1 ,  (n=1)$$\n> $$F_n = F[n-1]+ F[n-2] , (n=>2)$$\n\n如此依据上述公式，有如下计算方法：\n###python\n方式1，\n```python\n# 定义一个函数，计算第n个fibonacci数\ndef fib(n):\n\t# 定义两个变量\n\ta,b = 1,1\n\t# 循环遍历整个数目范围，计算对应的fibonacci数，依次赋值给a,b\n\tfor i in range(n-1):\n\t\ta,b = b,a+b\n\t# 返回更新后的a值，既是第n个fibonacci数\n\treturn a\n# 输出第10个fibonacci数\nprint(fib(10))\n```\n方式2\n```python\n# 递归方式\ndef fib(n):\n\tif n == 1 or n == 2 :\n\t\treturn 1\n\t# 返回第n个数，等于其前两项之和\n\treturn fib(n-1)+fib(n-2)\n#输出第10个fibonacci数\nprint(fib(10))\n```\n方式3\n\n```python\n# 输出指定项目数的fibonacci数列\ndef fib(n):\n\tif n == 1 :\n\t\treturn [1]\n\tif n == 2 :\n\t\treturn [1,1]\n\tfibs = [1,1]\n\tfor i in range(2,n):\n\t\t# 追加新的fib数字，到fibs中，该新数字等于fibs列表的后两项之和\n\t\tfibs.append(fibs[-1],fibs[-2])\n\treturn fibs\n# 输出前10项fibonacci数列的元素\nprint(fib(10))\n# 其结果如下：\n[1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n```\n\n### java\n```java\n//定义一个方法\npublic int fib(int n){\n\tif(n<0){\n\t\treturn 0;\n\t}\n\tif(n==1||n==2){\n\t\treturn 1;\n\t}\n\treturn fib(n-1)+fib(n-2)\n}\n//其实和python中差不多，算法才是精髓，此处也未做各种数字格式校验，仅提供算法而已。\n```\n\n","source":"_posts/斐波那契数列.md","raw":"---\ntitle: 斐波那契数列\ndate: 2016-11-17 14:41\ntags:\n    - 斐波那契\n    - 算法\n    - 兔子\ncategories:\n    - 算法相关\n---\n\n前言：<font color=\"ff0000\">作为IT行业的技术小白，深知需要不断学习的技术和知识很多很多，最近学习Python语言，便想起做学习笔记，本人博客多数均是个人原创文章，然而技术内容并非都是原创，写入博客仅作为个人学习笔记知识整理，亦希望有助于其他初级网友，技术大牛与大神们请绕道，不喜勿喷。</font>\n\n###经典故事\n有一对兔子，从出生后第3个月起每个月都生一对兔子，\n小兔子长到第三个月后每个月又生一对兔子，假如兔子都不死，问每个月的兔子总数为多少？\n\n其实如上问题也便是本文所要讲述的 `斐波那契` 数列的问题，斐波那契数列是这么一组数，\n> 斐波那契数列（Fibonacci sequence），又称黄金分割数列\n> 0、1、1、2、3、5、8、13、21、34、…...\n> 在数学上，费波那契数列是以递归的方法来定义：\n> $$F_0 = 0,(n=0)$$\n> $$F_1 = 1 ,  (n=1)$$\n> $$F_n = F[n-1]+ F[n-2] , (n=>2)$$\n\n如此依据上述公式，有如下计算方法：\n###python\n方式1，\n```python\n# 定义一个函数，计算第n个fibonacci数\ndef fib(n):\n\t# 定义两个变量\n\ta,b = 1,1\n\t# 循环遍历整个数目范围，计算对应的fibonacci数，依次赋值给a,b\n\tfor i in range(n-1):\n\t\ta,b = b,a+b\n\t# 返回更新后的a值，既是第n个fibonacci数\n\treturn a\n# 输出第10个fibonacci数\nprint(fib(10))\n```\n方式2\n```python\n# 递归方式\ndef fib(n):\n\tif n == 1 or n == 2 :\n\t\treturn 1\n\t# 返回第n个数，等于其前两项之和\n\treturn fib(n-1)+fib(n-2)\n#输出第10个fibonacci数\nprint(fib(10))\n```\n方式3\n\n```python\n# 输出指定项目数的fibonacci数列\ndef fib(n):\n\tif n == 1 :\n\t\treturn [1]\n\tif n == 2 :\n\t\treturn [1,1]\n\tfibs = [1,1]\n\tfor i in range(2,n):\n\t\t# 追加新的fib数字，到fibs中，该新数字等于fibs列表的后两项之和\n\t\tfibs.append(fibs[-1],fibs[-2])\n\treturn fibs\n# 输出前10项fibonacci数列的元素\nprint(fib(10))\n# 其结果如下：\n[1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n```\n\n### java\n```java\n//定义一个方法\npublic int fib(int n){\n\tif(n<0){\n\t\treturn 0;\n\t}\n\tif(n==1||n==2){\n\t\treturn 1;\n\t}\n\treturn fib(n-1)+fib(n-2)\n}\n//其实和python中差不多，算法才是精髓，此处也未做各种数字格式校验，仅提供算法而已。\n```\n\n","slug":"斐波那契数列","published":1,"updated":"2017-03-31T08:46:04.527Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ndxcdw003288ow0z31pani","content":"<p>前言：<font color=\"ff0000\">作为IT行业的技术小白，深知需要不断学习的技术和知识很多很多，最近学习Python语言，便想起做学习笔记，本人博客多数均是个人原创文章，然而技术内容并非都是原创，写入博客仅作为个人学习笔记知识整理，亦希望有助于其他初级网友，技术大牛与大神们请绕道，不喜勿喷。</font></p>\n<p>###经典故事<br>有一对兔子，从出生后第3个月起每个月都生一对兔子，<br>小兔子长到第三个月后每个月又生一对兔子，假如兔子都不死，问每个月的兔子总数为多少？</p>\n<p>其实如上问题也便是本文所要讲述的 <code>斐波那契</code> 数列的问题，斐波那契数列是这么一组数，</p>\n<blockquote>\n<p>斐波那契数列（Fibonacci sequence），又称黄金分割数列<br>0、1、1、2、3、5、8、13、21、34、……<br>在数学上，费波那契数列是以递归的方法来定义：<br>$$F_0 = 0,(n=0)$$<br>$$F_1 = 1 ,  (n=1)$$<br>$$F_n = F[n-1]+ F[n-2] , (n=&gt;2)$$</p>\n</blockquote>\n<p>如此依据上述公式，有如下计算方法：</p>\n<p>###python<br>方式1，<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 定义一个函数，计算第n个fibonacci数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fib</span><span class=\"params\">(n)</span>:</span></div><div class=\"line\">\t<span class=\"comment\"># 定义两个变量</span></div><div class=\"line\">\ta,b = <span class=\"number\">1</span>,<span class=\"number\">1</span></div><div class=\"line\">\t<span class=\"comment\"># 循环遍历整个数目范围，计算对应的fibonacci数，依次赋值给a,b</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n<span class=\"number\">-1</span>):</div><div class=\"line\">\t\ta,b = b,a+b</div><div class=\"line\">\t<span class=\"comment\"># 返回更新后的a值，既是第n个fibonacci数</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> a</div><div class=\"line\"><span class=\"comment\"># 输出第10个fibonacci数</span></div><div class=\"line\">print(fib(<span class=\"number\">10</span>))</div></pre></td></tr></table></figure></p>\n<p>方式2<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 递归方式</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fib</span><span class=\"params\">(n)</span>:</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> n == <span class=\"number\">1</span> <span class=\"keyword\">or</span> n == <span class=\"number\">2</span> :</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span></div><div class=\"line\">\t<span class=\"comment\"># 返回第n个数，等于其前两项之和</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> fib(n<span class=\"number\">-1</span>)+fib(n<span class=\"number\">-2</span>)</div><div class=\"line\"><span class=\"comment\">#输出第10个fibonacci数</span></div><div class=\"line\">print(fib(<span class=\"number\">10</span>))</div></pre></td></tr></table></figure></p>\n<p>方式3</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 输出指定项目数的fibonacci数列</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fib</span><span class=\"params\">(n)</span>:</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> n == <span class=\"number\">1</span> :</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> [<span class=\"number\">1</span>]</div><div class=\"line\">\t<span class=\"keyword\">if</span> n == <span class=\"number\">2</span> :</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> [<span class=\"number\">1</span>,<span class=\"number\">1</span>]</div><div class=\"line\">\tfibs = [<span class=\"number\">1</span>,<span class=\"number\">1</span>]</div><div class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">2</span>,n):</div><div class=\"line\">\t\t<span class=\"comment\"># 追加新的fib数字，到fibs中，该新数字等于fibs列表的后两项之和</span></div><div class=\"line\">\t\tfibs.append(fibs[<span class=\"number\">-1</span>],fibs[<span class=\"number\">-2</span>])</div><div class=\"line\">\t<span class=\"keyword\">return</span> fibs</div><div class=\"line\"><span class=\"comment\"># 输出前10项fibonacci数列的元素</span></div><div class=\"line\">print(fib(<span class=\"number\">10</span>))</div><div class=\"line\"><span class=\"comment\"># 其结果如下：</span></div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">13</span>, <span class=\"number\">21</span>, <span class=\"number\">34</span>, <span class=\"number\">55</span>]</div></pre></td></tr></table></figure>\n<h3 id=\"java\"><a href=\"#java\" class=\"headerlink\" title=\"java\"></a>java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//定义一个方法</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">fib</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(n&lt;<span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>||n==<span class=\"number\">2</span>)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> fib(n-<span class=\"number\">1</span>)+fib(n-<span class=\"number\">2</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//其实和python中差不多，算法才是精髓，此处也未做各种数字格式校验，仅提供算法而已。</span></div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>前言：<font color=\"ff0000\">作为IT行业的技术小白，深知需要不断学习的技术和知识很多很多，最近学习Python语言，便想起做学习笔记，本人博客多数均是个人原创文章，然而技术内容并非都是原创，写入博客仅作为个人学习笔记知识整理，亦希望有助于其他初级网友，技术大牛与大神们请绕道，不喜勿喷。</font></p>\n<p>###经典故事<br>有一对兔子，从出生后第3个月起每个月都生一对兔子，<br>小兔子长到第三个月后每个月又生一对兔子，假如兔子都不死，问每个月的兔子总数为多少？</p>\n<p>其实如上问题也便是本文所要讲述的 <code>斐波那契</code> 数列的问题，斐波那契数列是这么一组数，</p>\n<blockquote>\n<p>斐波那契数列（Fibonacci sequence），又称黄金分割数列<br>0、1、1、2、3、5、8、13、21、34、……<br>在数学上，费波那契数列是以递归的方法来定义：<br>$$F_0 = 0,(n=0)$$<br>$$F_1 = 1 ,  (n=1)$$<br>$$F_n = F[n-1]+ F[n-2] , (n=&gt;2)$$</p>\n</blockquote>\n<p>如此依据上述公式，有如下计算方法：</p>\n<p>###python<br>方式1，<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 定义一个函数，计算第n个fibonacci数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fib</span><span class=\"params\">(n)</span>:</span></div><div class=\"line\">\t<span class=\"comment\"># 定义两个变量</span></div><div class=\"line\">\ta,b = <span class=\"number\">1</span>,<span class=\"number\">1</span></div><div class=\"line\">\t<span class=\"comment\"># 循环遍历整个数目范围，计算对应的fibonacci数，依次赋值给a,b</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n<span class=\"number\">-1</span>):</div><div class=\"line\">\t\ta,b = b,a+b</div><div class=\"line\">\t<span class=\"comment\"># 返回更新后的a值，既是第n个fibonacci数</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> a</div><div class=\"line\"><span class=\"comment\"># 输出第10个fibonacci数</span></div><div class=\"line\">print(fib(<span class=\"number\">10</span>))</div></pre></td></tr></table></figure></p>\n<p>方式2<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 递归方式</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fib</span><span class=\"params\">(n)</span>:</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> n == <span class=\"number\">1</span> <span class=\"keyword\">or</span> n == <span class=\"number\">2</span> :</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span></div><div class=\"line\">\t<span class=\"comment\"># 返回第n个数，等于其前两项之和</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> fib(n<span class=\"number\">-1</span>)+fib(n<span class=\"number\">-2</span>)</div><div class=\"line\"><span class=\"comment\">#输出第10个fibonacci数</span></div><div class=\"line\">print(fib(<span class=\"number\">10</span>))</div></pre></td></tr></table></figure></p>\n<p>方式3</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 输出指定项目数的fibonacci数列</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fib</span><span class=\"params\">(n)</span>:</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> n == <span class=\"number\">1</span> :</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> [<span class=\"number\">1</span>]</div><div class=\"line\">\t<span class=\"keyword\">if</span> n == <span class=\"number\">2</span> :</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> [<span class=\"number\">1</span>,<span class=\"number\">1</span>]</div><div class=\"line\">\tfibs = [<span class=\"number\">1</span>,<span class=\"number\">1</span>]</div><div class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">2</span>,n):</div><div class=\"line\">\t\t<span class=\"comment\"># 追加新的fib数字，到fibs中，该新数字等于fibs列表的后两项之和</span></div><div class=\"line\">\t\tfibs.append(fibs[<span class=\"number\">-1</span>],fibs[<span class=\"number\">-2</span>])</div><div class=\"line\">\t<span class=\"keyword\">return</span> fibs</div><div class=\"line\"><span class=\"comment\"># 输出前10项fibonacci数列的元素</span></div><div class=\"line\">print(fib(<span class=\"number\">10</span>))</div><div class=\"line\"><span class=\"comment\"># 其结果如下：</span></div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">13</span>, <span class=\"number\">21</span>, <span class=\"number\">34</span>, <span class=\"number\">55</span>]</div></pre></td></tr></table></figure>\n<h3 id=\"java\"><a href=\"#java\" class=\"headerlink\" title=\"java\"></a>java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//定义一个方法</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">fib</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(n&lt;<span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>||n==<span class=\"number\">2</span>)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> fib(n-<span class=\"number\">1</span>)+fib(n-<span class=\"number\">2</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//其实和python中差不多，算法才是精髓，此处也未做各种数字格式校验，仅提供算法而已。</span></div></pre></td></tr></table></figure>\n"},{"title":"xUtils3开源框架简要使用说明","date":"2017-01-21T07:38:00.000Z","_content":"\n\n> 前言：开源技术对于当前便捷开发的重要性，自不必言明。不重复造轮子，去学习和使用已有的开源框架和类库，有利于我们的产品快速开发与迭代实现。\n\nxUtils3是基于xUtils的一个开源框架升级版，不再兼容Android4.0以下版本，虽然不如2016年的RxJava、retrofit等框架那么热门，但是也算是一个小而综合的开源框架，适合初学者学习使用。\n\n## 1、xUtils3简介\n\nxUtils是github上`wyouflf`作者的一个开源项目，继承了很多Android app开发常用的功能模块框架，主要有四大模块：DbUtils、ViewUtils、HttpUtils、BitmapUtils模块。包含了ORM框架、IOC框架，是的开发更为快捷。更为详细的介绍请异步github上的项目主页。[xUtils](https://github.com/wyouflf/xUtils),[xUtils3](https://github.com/wyouflf/xUtils3)以及在开源中国上发现的有简要的注释代码的[xUtils3](http://git.oschina.net/guozhiwei/xUtils3/tree/master)和[api文档](http://xutilsapi.oschina.mopaas.com/).感谢这些热心同学，感谢伟大的开源共享精神！\n\n## 2、xUtils3使用\n\n目前Android项目开发主流都在使用AndroidStudio为开发工具了，还在使用eclipse的同学，真心需要改变了，优势太多，无法一一赘述，简言之就是便捷、高效。Gralde中配置依赖\n\n```groovy\ncompile 'org.xutils:xutils:3.3.40'\n```\n\n建议使用最新版本的依赖库。详情请看xUtils的github地址[xUtils3](https://github.com/wyouflf/xUtils3)，Eclipse的使用，可以下载对应提供的aar文件，去除jar包和so文件到`lib`文件中使用。\n\n### 项目配置\n\n- 权限，xUtils3中使用数据库存储和网络请求，所以需要以下权限\n\n```xml\n<uses-permission android:name=\"android.permission.INTERNET\" />\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n```\n\n- 初始化，在Application的onCreate中初始化\n\n```java\n//自定义MyApplication 继承 Application\n@Override\npublic void onCreate(){\n  super.onCreate();\n  x.Ext.init(this);\n  x.Ext.setDebug(BuildConfig.DEBUG);//是否输出debug日志，开启日志输出，会影响一部分性能\n  ...\n}\n```\n\n### ViewUtils注解使用\n\n- 注解来绑定UI和事件\n- 免除`findViewById`和`setOnClickListener`等\n\n```java\n@ContentView(R.layout.activit_main)\npublic MainActivity extends Activity {\n  @ViewInject(R.id.text)\n  private TextView tvTest;\n  ...\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n      super.onCreate(savedInstanceState);\n      x.view().inject(this);//注入View的初始化，如此，方能在Activity的java文件中使用@ContentView、@ViewInject等注解\n      //需要说明的是，x.view().inject()有几个方法重载呢，可以注入fragment，也可在adapter中注入，或者其他自定义类中，需要使用x.view().inject(this,view);或者x.view().inject(holder,view);\n    ...\n  }\n  //此处需要说明的是，@Event默认的即使View的onClick事件，所以其最简实现形式如下，省略了许多参数\n  @Event(R.id.btnTest)\n  private void toClick(View view){\n    //点击事件响应处理\n    ...\n  }\n  //而下面为完整实现形式，value可以是多个控件的数组，type表示该组控件的事件响应方式，以及设置注册这类事件的setter方式，事件响应的函数的方法名，对应的自定义的这个方法，名称无所谓，但是需要private以及方法签名中的参数，要保持和所使用控件原有的方法参数的一致性。\n  \n  /**\n * 1. 方法必须私有限定,\n * 2. 方法参数形式必须和type对应的Listener接口一致.\n * 3. 注解参数value支持数组: value={id1, id2, id3}\n * 4. 其它参数说明见{@link org.xutils.event.annotation.Event}类的说明.\n **/\n  @Event(value = {R.id.btnSend、R.id.btnReceive},type = View.OnClickListener.class,setter=\"setOnClickListener\",method=\"onClickListener\")\n  private void doClick(View view){//此处方法参数，(View view)是因为onClickListerner的方法参数就是（View view），若是其他方法，则换成对应的参数列表。\n    ...\n  }\n  ...\n}\n```\n\n### HttpUtils访问网络\n\n- 便捷的下载、上传文件或提交数据，如下简单的使用方式，更多的可以参照项目`sample`和githbu上的说明。\n\n```java\n@Event(value = R.id.btn_test_baidu2)\nprivate void onTestBaidu2Click(View view) {\n    RequestParams params = new RequestParams(\"https://www.baidu.com/s\");\n    params.setSslSocketFactory(...); // 设置ssl\n    params.addQueryStringParameter(\"wd\", \"xUtils\");\n    //或者其他参数设置，比如超时，读取时长，请记住这里需要网络权限，若是忘了添加，可能就报错，但是提示不明显，会让你蒙头。返回的result结果，需要在这里面处理，尽量不要拿出外面线程处理，因为是网络异步，可能会出现到外面数据一时间为空。\n    x.http().get(params, new Callback.CommonCallback<String>() {\n        @Override\n        public void onSuccess(String result) {\n            Toast.makeText(x.app(), result, Toast.LENGTH_LONG).show();\n        }\n\n        @Override\n        public void onError(Throwable ex, boolean isOnCallback) {\n            Toast.makeText(x.app(), ex.getMessage(), Toast.LENGTH_LONG).show();\n        }\n\n        @Override\n        public void onCancelled(CancelledException cex) {\n            Toast.makeText(x.app(), \"cancelled\", Toast.LENGTH_LONG).show();\n        }\n\n        @Override\n        public void onFinished() {\n\n        }\n    });\n}\n```\n\n### DbUtils数据库的使用\n\n- 使用了orm框架更为简便的代码实现数据CURD\n- 各种检索方式，支持事务等\n\n```java\nprivate String dbPath = Environment.getExternalStorageDirectory() + \"/database\";\n    private final String DB_NAME = \"test.db\";\n    //数据库业务层配置信息的初始化\n    private DbManager.DaoConfig daoConfig = new DbManager.DaoConfig()\n            .setDbName(DB_NAME)//数据库名称\n            // 不设置dbDir时, 默认存储在app的私有目录.\n            .setDbDir(new File(dbPath)) // \"sdcard\"的写法并非最佳实践, 这里为了简单, 先这样写了.\n            .setDbVersion(1)//版本\n            .setDbOpenListener(new DbManager.DbOpenListener() {\n                @Override\n                public void onDbOpened(DbManager db) {\n                    // 开启WAL, 对写入加速提升巨大\n                    db.getDatabase().enableWriteAheadLogging();\n                }\n            })\n            .setDbUpgradeListener(new DbManager.DbUpgradeListener() {\n                @Override\n                public void onUpgrade(DbManager db, int oldVersion, int newVersion) {\n                    // db.addColumn(...);\n                    // db.dropTable(...);\n                    // ...\n                    // or\n                    // db.dropDb();\n                }\n            });\n\n    private final DbManager db = x.getDb(daoConfig);//DB manager的对象\n\n    /**\n     * 新增数据对象到数据库\n     *\n     * @param object\n     * @return\n     */\n    public boolean add(Object object) {\n        try {\n            db.saveOrUpdate(object);\n        } catch (DbException e) {\n            e.printStackTrace();\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * 绑定id形式的新增数据\n     *\n     * @param object\n     * @return\n     */\n    public boolean saveBindId(Object object) {\n        try {\n            return db.saveBindingId(object);\n        } catch (DbException e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n   /**\n     * 删除学生信息\n     *\n     * @param id 学生的学号\n     * @return 返回删除结果，true为成功，false为失败\n     */\n    public boolean deleteChild(int id) {\n        try {\n            db.deleteById(Child.class, id);\n        } catch (DbException e) {\n            e.printStackTrace();\n            return false;\n        }\n        return true;\n    }\n    /**\n     * 更新\n     *\n     * @param object 数据对象\n     * @return\n     */\n    public boolean update(Object object) {\n        try {\n            db.saveOrUpdate(object);\n            return true;\n        } catch (DbException e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n    /**\n     * 查询所有学生信息\n     *\n     * @return\n     */\n    public List<Child> searchChild() {\n        try {\n            return db.findAll(Child.class);\n        } catch (DbException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n    /**\n     * 根据学号查询学生信息\n     *\n     * @param id 学生学号\n     * @return\n     */\n    public Child searchChildById(int id) {\n        try {\n            return db.findById(Child.class, id);\n        } catch (DbException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n\n    /**\n     * 删除Child表\n     *\n     * @return\n     */\n    public boolean dropChildTable() {\n        try {\n            db.dropTable(Child.class);\n        } catch (DbException e) {\n            e.printStackTrace();\n            return false;\n        }\n        return true;\n    }\n```\n\n`Child.java`注意，此文件删除了一写get、set方法和属性，只作为说明演示，特别需要注意的就是**构造函数**那块，个人经验总结\n\n```java\n//创建child表的方式，使用@Table注解，只有一个参数就是name\n@Table(name = \"child\")\npublic class Child {\n  //创建表格中的列，使用@Column注解，包含name，isId，autoGen，property等属性，也就是sql语句中的属性字段等。\n    @Column(name = \"cNum\", isId = true, autoGen = false)\n    private int cNum;//学号\n    @Column(name = \"cName\")\n    private String cName;//学生姓名\n   \n    @Column(name = \"ic_num\", property = \"unique\")\n    private String icNum;//幼儿卡号码,唯一\n\n    /**\n     * 无参数构造法不可私有化，否则数据库表格创建异常\n     * 且不设置自增，若使用无参构造，容易引起数据插入只有一条。\n     */\n    public Child() {\n\n    }\n\n    /**\n     * 多参数构造函数，创建Child类的对象\n     *\n     * @param cNum  学号\n     * @param name  姓名\n     * @param sex   性别\n     * @param grade 班级\n     * @param age   年龄\n     */\n    public Child(int cNum, String name, String sex, String grade, int age) {\n        this.cNum = cNum;\n        this.cName = name;\n        this.sex = sex;\n        this.grade = grade;\n        this.age = age;\n    }\n\n    /**\n     * 获取幼儿学号\n     *\n     * @return\n     */\n    public int getCNum() {\n        return cNum;\n    }\n\n    /**\n     * 设置幼儿学号\n     *\n     * @param cNum\n     */\n    public void setNum(int cNum) {\n        this.cNum = cNum;\n    }\n\n  \n}\n```\n\n### BitmapUtils图片使用\n\n- 使用`lru`算法，缓存以及多线程等，便于更好的管理图片下载，和加载操作。\n\n```java\nx.image().bind(imageView, url, imageOptions);\n\n// assets file\nx.image().bind(imageView, \"assets://test.gif\", imageOptions);\n\n// local file\nx.image().bind(imageView, new File(\"/sdcard/test.gif\").toURI().toString(), imageOptions);\nx.image().bind(imageView, \"/sdcard/test.gif\", imageOptions);\nx.image().bind(imageView, \"file:///sdcard/test.gif\", imageOptions);\nx.image().bind(imageView, \"file:/sdcard/test.gif\", imageOptions);\n\nx.image().bind(imageView, url, imageOptions, new Callback.CommonCallback<Drawable>() {...});\nx.image().loadDrawable(url, imageOptions, new Callback.CommonCallback<Drawable>() {...});\nx.image().loadFile(url, imageOptions, new Callback.CommonCallback<File>() {...});\n```\n\n### LogUtils输出日志\n\n```java\n// 自动添加TAG，格式： className.methodName(L:lineNumber)\n// 可设置全局的LogUtils.allowD = false，LogUtils.allowI = false...，控制是否输出log。\n// 自定义log输出LogUtils.customLogger = new xxxLogger();\nLogUtils.d(\"wyouflf\");\n```\n\n### 混淆时注意事项：\n\n- 添加Android默认混淆配置${sdk.dir}/tools/proguard/proguard-android.txt\n- 不要混淆xUtils中的注解类型，添加混淆配置：-keep class * extends java.lang.annotation.Annotation { *; }\n- 对使用DbUtils模块持久化的实体类不要混淆，或者注解所有表和列名称@Table(name=\"xxx\")，@Id(column=\"xxx\")，@Column(column=\"xxx\"),@Foreign(column=\"xxx\",foreign=\"xxx\");\n\n\n\n附言：本人算是IT技术小白，使用xUtils尚且不熟悉，且与此做个笔记记录，希望于人于己有所帮助。","source":"_posts/xUtils3简要说明.md","raw":"---\ntitle: xUtils3开源框架简要使用说明\ndate: 2017-01-21 15:38\ntags: \n    - Android\n    - xUtils\ncategories:\n    - Android\n---\n\n\n> 前言：开源技术对于当前便捷开发的重要性，自不必言明。不重复造轮子，去学习和使用已有的开源框架和类库，有利于我们的产品快速开发与迭代实现。\n\nxUtils3是基于xUtils的一个开源框架升级版，不再兼容Android4.0以下版本，虽然不如2016年的RxJava、retrofit等框架那么热门，但是也算是一个小而综合的开源框架，适合初学者学习使用。\n\n## 1、xUtils3简介\n\nxUtils是github上`wyouflf`作者的一个开源项目，继承了很多Android app开发常用的功能模块框架，主要有四大模块：DbUtils、ViewUtils、HttpUtils、BitmapUtils模块。包含了ORM框架、IOC框架，是的开发更为快捷。更为详细的介绍请异步github上的项目主页。[xUtils](https://github.com/wyouflf/xUtils),[xUtils3](https://github.com/wyouflf/xUtils3)以及在开源中国上发现的有简要的注释代码的[xUtils3](http://git.oschina.net/guozhiwei/xUtils3/tree/master)和[api文档](http://xutilsapi.oschina.mopaas.com/).感谢这些热心同学，感谢伟大的开源共享精神！\n\n## 2、xUtils3使用\n\n目前Android项目开发主流都在使用AndroidStudio为开发工具了，还在使用eclipse的同学，真心需要改变了，优势太多，无法一一赘述，简言之就是便捷、高效。Gralde中配置依赖\n\n```groovy\ncompile 'org.xutils:xutils:3.3.40'\n```\n\n建议使用最新版本的依赖库。详情请看xUtils的github地址[xUtils3](https://github.com/wyouflf/xUtils3)，Eclipse的使用，可以下载对应提供的aar文件，去除jar包和so文件到`lib`文件中使用。\n\n### 项目配置\n\n- 权限，xUtils3中使用数据库存储和网络请求，所以需要以下权限\n\n```xml\n<uses-permission android:name=\"android.permission.INTERNET\" />\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n```\n\n- 初始化，在Application的onCreate中初始化\n\n```java\n//自定义MyApplication 继承 Application\n@Override\npublic void onCreate(){\n  super.onCreate();\n  x.Ext.init(this);\n  x.Ext.setDebug(BuildConfig.DEBUG);//是否输出debug日志，开启日志输出，会影响一部分性能\n  ...\n}\n```\n\n### ViewUtils注解使用\n\n- 注解来绑定UI和事件\n- 免除`findViewById`和`setOnClickListener`等\n\n```java\n@ContentView(R.layout.activit_main)\npublic MainActivity extends Activity {\n  @ViewInject(R.id.text)\n  private TextView tvTest;\n  ...\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n      super.onCreate(savedInstanceState);\n      x.view().inject(this);//注入View的初始化，如此，方能在Activity的java文件中使用@ContentView、@ViewInject等注解\n      //需要说明的是，x.view().inject()有几个方法重载呢，可以注入fragment，也可在adapter中注入，或者其他自定义类中，需要使用x.view().inject(this,view);或者x.view().inject(holder,view);\n    ...\n  }\n  //此处需要说明的是，@Event默认的即使View的onClick事件，所以其最简实现形式如下，省略了许多参数\n  @Event(R.id.btnTest)\n  private void toClick(View view){\n    //点击事件响应处理\n    ...\n  }\n  //而下面为完整实现形式，value可以是多个控件的数组，type表示该组控件的事件响应方式，以及设置注册这类事件的setter方式，事件响应的函数的方法名，对应的自定义的这个方法，名称无所谓，但是需要private以及方法签名中的参数，要保持和所使用控件原有的方法参数的一致性。\n  \n  /**\n * 1. 方法必须私有限定,\n * 2. 方法参数形式必须和type对应的Listener接口一致.\n * 3. 注解参数value支持数组: value={id1, id2, id3}\n * 4. 其它参数说明见{@link org.xutils.event.annotation.Event}类的说明.\n **/\n  @Event(value = {R.id.btnSend、R.id.btnReceive},type = View.OnClickListener.class,setter=\"setOnClickListener\",method=\"onClickListener\")\n  private void doClick(View view){//此处方法参数，(View view)是因为onClickListerner的方法参数就是（View view），若是其他方法，则换成对应的参数列表。\n    ...\n  }\n  ...\n}\n```\n\n### HttpUtils访问网络\n\n- 便捷的下载、上传文件或提交数据，如下简单的使用方式，更多的可以参照项目`sample`和githbu上的说明。\n\n```java\n@Event(value = R.id.btn_test_baidu2)\nprivate void onTestBaidu2Click(View view) {\n    RequestParams params = new RequestParams(\"https://www.baidu.com/s\");\n    params.setSslSocketFactory(...); // 设置ssl\n    params.addQueryStringParameter(\"wd\", \"xUtils\");\n    //或者其他参数设置，比如超时，读取时长，请记住这里需要网络权限，若是忘了添加，可能就报错，但是提示不明显，会让你蒙头。返回的result结果，需要在这里面处理，尽量不要拿出外面线程处理，因为是网络异步，可能会出现到外面数据一时间为空。\n    x.http().get(params, new Callback.CommonCallback<String>() {\n        @Override\n        public void onSuccess(String result) {\n            Toast.makeText(x.app(), result, Toast.LENGTH_LONG).show();\n        }\n\n        @Override\n        public void onError(Throwable ex, boolean isOnCallback) {\n            Toast.makeText(x.app(), ex.getMessage(), Toast.LENGTH_LONG).show();\n        }\n\n        @Override\n        public void onCancelled(CancelledException cex) {\n            Toast.makeText(x.app(), \"cancelled\", Toast.LENGTH_LONG).show();\n        }\n\n        @Override\n        public void onFinished() {\n\n        }\n    });\n}\n```\n\n### DbUtils数据库的使用\n\n- 使用了orm框架更为简便的代码实现数据CURD\n- 各种检索方式，支持事务等\n\n```java\nprivate String dbPath = Environment.getExternalStorageDirectory() + \"/database\";\n    private final String DB_NAME = \"test.db\";\n    //数据库业务层配置信息的初始化\n    private DbManager.DaoConfig daoConfig = new DbManager.DaoConfig()\n            .setDbName(DB_NAME)//数据库名称\n            // 不设置dbDir时, 默认存储在app的私有目录.\n            .setDbDir(new File(dbPath)) // \"sdcard\"的写法并非最佳实践, 这里为了简单, 先这样写了.\n            .setDbVersion(1)//版本\n            .setDbOpenListener(new DbManager.DbOpenListener() {\n                @Override\n                public void onDbOpened(DbManager db) {\n                    // 开启WAL, 对写入加速提升巨大\n                    db.getDatabase().enableWriteAheadLogging();\n                }\n            })\n            .setDbUpgradeListener(new DbManager.DbUpgradeListener() {\n                @Override\n                public void onUpgrade(DbManager db, int oldVersion, int newVersion) {\n                    // db.addColumn(...);\n                    // db.dropTable(...);\n                    // ...\n                    // or\n                    // db.dropDb();\n                }\n            });\n\n    private final DbManager db = x.getDb(daoConfig);//DB manager的对象\n\n    /**\n     * 新增数据对象到数据库\n     *\n     * @param object\n     * @return\n     */\n    public boolean add(Object object) {\n        try {\n            db.saveOrUpdate(object);\n        } catch (DbException e) {\n            e.printStackTrace();\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * 绑定id形式的新增数据\n     *\n     * @param object\n     * @return\n     */\n    public boolean saveBindId(Object object) {\n        try {\n            return db.saveBindingId(object);\n        } catch (DbException e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n   /**\n     * 删除学生信息\n     *\n     * @param id 学生的学号\n     * @return 返回删除结果，true为成功，false为失败\n     */\n    public boolean deleteChild(int id) {\n        try {\n            db.deleteById(Child.class, id);\n        } catch (DbException e) {\n            e.printStackTrace();\n            return false;\n        }\n        return true;\n    }\n    /**\n     * 更新\n     *\n     * @param object 数据对象\n     * @return\n     */\n    public boolean update(Object object) {\n        try {\n            db.saveOrUpdate(object);\n            return true;\n        } catch (DbException e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n    /**\n     * 查询所有学生信息\n     *\n     * @return\n     */\n    public List<Child> searchChild() {\n        try {\n            return db.findAll(Child.class);\n        } catch (DbException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n    /**\n     * 根据学号查询学生信息\n     *\n     * @param id 学生学号\n     * @return\n     */\n    public Child searchChildById(int id) {\n        try {\n            return db.findById(Child.class, id);\n        } catch (DbException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n\n    /**\n     * 删除Child表\n     *\n     * @return\n     */\n    public boolean dropChildTable() {\n        try {\n            db.dropTable(Child.class);\n        } catch (DbException e) {\n            e.printStackTrace();\n            return false;\n        }\n        return true;\n    }\n```\n\n`Child.java`注意，此文件删除了一写get、set方法和属性，只作为说明演示，特别需要注意的就是**构造函数**那块，个人经验总结\n\n```java\n//创建child表的方式，使用@Table注解，只有一个参数就是name\n@Table(name = \"child\")\npublic class Child {\n  //创建表格中的列，使用@Column注解，包含name，isId，autoGen，property等属性，也就是sql语句中的属性字段等。\n    @Column(name = \"cNum\", isId = true, autoGen = false)\n    private int cNum;//学号\n    @Column(name = \"cName\")\n    private String cName;//学生姓名\n   \n    @Column(name = \"ic_num\", property = \"unique\")\n    private String icNum;//幼儿卡号码,唯一\n\n    /**\n     * 无参数构造法不可私有化，否则数据库表格创建异常\n     * 且不设置自增，若使用无参构造，容易引起数据插入只有一条。\n     */\n    public Child() {\n\n    }\n\n    /**\n     * 多参数构造函数，创建Child类的对象\n     *\n     * @param cNum  学号\n     * @param name  姓名\n     * @param sex   性别\n     * @param grade 班级\n     * @param age   年龄\n     */\n    public Child(int cNum, String name, String sex, String grade, int age) {\n        this.cNum = cNum;\n        this.cName = name;\n        this.sex = sex;\n        this.grade = grade;\n        this.age = age;\n    }\n\n    /**\n     * 获取幼儿学号\n     *\n     * @return\n     */\n    public int getCNum() {\n        return cNum;\n    }\n\n    /**\n     * 设置幼儿学号\n     *\n     * @param cNum\n     */\n    public void setNum(int cNum) {\n        this.cNum = cNum;\n    }\n\n  \n}\n```\n\n### BitmapUtils图片使用\n\n- 使用`lru`算法，缓存以及多线程等，便于更好的管理图片下载，和加载操作。\n\n```java\nx.image().bind(imageView, url, imageOptions);\n\n// assets file\nx.image().bind(imageView, \"assets://test.gif\", imageOptions);\n\n// local file\nx.image().bind(imageView, new File(\"/sdcard/test.gif\").toURI().toString(), imageOptions);\nx.image().bind(imageView, \"/sdcard/test.gif\", imageOptions);\nx.image().bind(imageView, \"file:///sdcard/test.gif\", imageOptions);\nx.image().bind(imageView, \"file:/sdcard/test.gif\", imageOptions);\n\nx.image().bind(imageView, url, imageOptions, new Callback.CommonCallback<Drawable>() {...});\nx.image().loadDrawable(url, imageOptions, new Callback.CommonCallback<Drawable>() {...});\nx.image().loadFile(url, imageOptions, new Callback.CommonCallback<File>() {...});\n```\n\n### LogUtils输出日志\n\n```java\n// 自动添加TAG，格式： className.methodName(L:lineNumber)\n// 可设置全局的LogUtils.allowD = false，LogUtils.allowI = false...，控制是否输出log。\n// 自定义log输出LogUtils.customLogger = new xxxLogger();\nLogUtils.d(\"wyouflf\");\n```\n\n### 混淆时注意事项：\n\n- 添加Android默认混淆配置${sdk.dir}/tools/proguard/proguard-android.txt\n- 不要混淆xUtils中的注解类型，添加混淆配置：-keep class * extends java.lang.annotation.Annotation { *; }\n- 对使用DbUtils模块持久化的实体类不要混淆，或者注解所有表和列名称@Table(name=\"xxx\")，@Id(column=\"xxx\")，@Column(column=\"xxx\"),@Foreign(column=\"xxx\",foreign=\"xxx\");\n\n\n\n附言：本人算是IT技术小白，使用xUtils尚且不熟悉，且与此做个笔记记录，希望于人于己有所帮助。","slug":"xUtils3简要说明","published":1,"updated":"2017-03-31T08:56:25.907Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ndxcdy003688owgkjfjlty","content":"<blockquote>\n<p>前言：开源技术对于当前便捷开发的重要性，自不必言明。不重复造轮子，去学习和使用已有的开源框架和类库，有利于我们的产品快速开发与迭代实现。</p>\n</blockquote>\n<p>xUtils3是基于xUtils的一个开源框架升级版，不再兼容Android4.0以下版本，虽然不如2016年的RxJava、retrofit等框架那么热门，但是也算是一个小而综合的开源框架，适合初学者学习使用。</p>\n<h2 id=\"1、xUtils3简介\"><a href=\"#1、xUtils3简介\" class=\"headerlink\" title=\"1、xUtils3简介\"></a>1、xUtils3简介</h2><p>xUtils是github上<code>wyouflf</code>作者的一个开源项目，继承了很多Android app开发常用的功能模块框架，主要有四大模块：DbUtils、ViewUtils、HttpUtils、BitmapUtils模块。包含了ORM框架、IOC框架，是的开发更为快捷。更为详细的介绍请异步github上的项目主页。<a href=\"https://github.com/wyouflf/xUtils\" target=\"_blank\" rel=\"external\">xUtils</a>,<a href=\"https://github.com/wyouflf/xUtils3\" target=\"_blank\" rel=\"external\">xUtils3</a>以及在开源中国上发现的有简要的注释代码的<a href=\"http://git.oschina.net/guozhiwei/xUtils3/tree/master\" target=\"_blank\" rel=\"external\">xUtils3</a>和<a href=\"http://xutilsapi.oschina.mopaas.com/\" target=\"_blank\" rel=\"external\">api文档</a>.感谢这些热心同学，感谢伟大的开源共享精神！</p>\n<h2 id=\"2、xUtils3使用\"><a href=\"#2、xUtils3使用\" class=\"headerlink\" title=\"2、xUtils3使用\"></a>2、xUtils3使用</h2><p>目前Android项目开发主流都在使用AndroidStudio为开发工具了，还在使用eclipse的同学，真心需要改变了，优势太多，无法一一赘述，简言之就是便捷、高效。Gralde中配置依赖</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile <span class=\"string\">'org.xutils:xutils:3.3.40'</span></div></pre></td></tr></table></figure>\n<p>建议使用最新版本的依赖库。详情请看xUtils的github地址<a href=\"https://github.com/wyouflf/xUtils3\" target=\"_blank\" rel=\"external\">xUtils3</a>，Eclipse的使用，可以下载对应提供的aar文件，去除jar包和so文件到<code>lib</code>文件中使用。</p>\n<h3 id=\"项目配置\"><a href=\"#项目配置\" class=\"headerlink\" title=\"项目配置\"></a>项目配置</h3><ul>\n<li>权限，xUtils3中使用数据库存储和网络请求，所以需要以下权限</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.INTERNET\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.WRITE_EXTERNAL_STORAGE\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>初始化，在Application的onCreate中初始化</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//自定义MyApplication 继承 Application</span></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">super</span>.onCreate();</div><div class=\"line\">  x.Ext.init(<span class=\"keyword\">this</span>);</div><div class=\"line\">  x.Ext.setDebug(BuildConfig.DEBUG);<span class=\"comment\">//是否输出debug日志，开启日志输出，会影响一部分性能</span></div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"ViewUtils注解使用\"><a href=\"#ViewUtils注解使用\" class=\"headerlink\" title=\"ViewUtils注解使用\"></a>ViewUtils注解使用</h3><ul>\n<li>注解来绑定UI和事件</li>\n<li>免除<code>findViewById</code>和<code>setOnClickListener</code>等</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@ContentView</span>(R.layout.activit_main)</div><div class=\"line\"><span class=\"keyword\">public</span> MainActivity extends Activity &#123;</div><div class=\"line\">  <span class=\"meta\">@ViewInject</span>(R.id.text)</div><div class=\"line\">  <span class=\"keyword\">private</span> TextView tvTest;</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">      x.view().inject(<span class=\"keyword\">this</span>);<span class=\"comment\">//注入View的初始化，如此，方能在Activity的java文件中使用@ContentView、@ViewInject等注解</span></div><div class=\"line\">      <span class=\"comment\">//需要说明的是，x.view().inject()有几个方法重载呢，可以注入fragment，也可在adapter中注入，或者其他自定义类中，需要使用x.view().inject(this,view);或者x.view().inject(holder,view);</span></div><div class=\"line\">    ...</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//此处需要说明的是，@Event默认的即使View的onClick事件，所以其最简实现形式如下，省略了许多参数</span></div><div class=\"line\">  <span class=\"meta\">@Event</span>(R.id.btnTest)</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">toClick</span><span class=\"params\">(View view)</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">//点击事件响应处理</span></div><div class=\"line\">    ...</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//而下面为完整实现形式，value可以是多个控件的数组，type表示该组控件的事件响应方式，以及设置注册这类事件的setter方式，事件响应的函数的方法名，对应的自定义的这个方法，名称无所谓，但是需要private以及方法签名中的参数，要保持和所使用控件原有的方法参数的一致性。</span></div><div class=\"line\">  </div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\"> * 1. 方法必须私有限定,</div><div class=\"line\"> * 2. 方法参数形式必须和type对应的Listener接口一致.</div><div class=\"line\"> * 3. 注解参数value支持数组: value=&#123;id1, id2, id3&#125;</div><div class=\"line\"> * 4. 其它参数说明见&#123;<span class=\"doctag\">@link</span> org.xutils.event.annotation.Event&#125;类的说明.</div><div class=\"line\"> **/</div><div class=\"line\">  <span class=\"meta\">@Event</span>(value = &#123;R.id.btnSend、R.id.btnReceive&#125;,type = View.OnClickListener.class,setter=<span class=\"string\">\"setOnClickListener\"</span>,method=<span class=\"string\">\"onClickListener\"</span>)</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">doClick</span><span class=\"params\">(View view)</span></span>&#123;<span class=\"comment\">//此处方法参数，(View view)是因为onClickListerner的方法参数就是（View view），若是其他方法，则换成对应的参数列表。</span></div><div class=\"line\">    ...</div><div class=\"line\">  &#125;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"HttpUtils访问网络\"><a href=\"#HttpUtils访问网络\" class=\"headerlink\" title=\"HttpUtils访问网络\"></a>HttpUtils访问网络</h3><ul>\n<li>便捷的下载、上传文件或提交数据，如下简单的使用方式，更多的可以参照项目<code>sample</code>和githbu上的说明。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Event</span>(value = R.id.btn_test_baidu2)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">onTestBaidu2Click</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">    RequestParams params = <span class=\"keyword\">new</span> RequestParams(<span class=\"string\">\"https://www.baidu.com/s\"</span>);</div><div class=\"line\">    params.setSslSocketFactory(...); <span class=\"comment\">// 设置ssl</span></div><div class=\"line\">    params.addQueryStringParameter(<span class=\"string\">\"wd\"</span>, <span class=\"string\">\"xUtils\"</span>);</div><div class=\"line\">    <span class=\"comment\">//或者其他参数设置，比如超时，读取时长，请记住这里需要网络权限，若是忘了添加，可能就报错，但是提示不明显，会让你蒙头。返回的result结果，需要在这里面处理，尽量不要拿出外面线程处理，因为是网络异步，可能会出现到外面数据一时间为空。</span></div><div class=\"line\">    x.http().get(params, <span class=\"keyword\">new</span> Callback.CommonCallback&lt;String&gt;() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSuccess</span><span class=\"params\">(String result)</span> </span>&#123;</div><div class=\"line\">            Toast.makeText(x.app(), result, Toast.LENGTH_LONG).show();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable ex, <span class=\"keyword\">boolean</span> isOnCallback)</span> </span>&#123;</div><div class=\"line\">            Toast.makeText(x.app(), ex.getMessage(), Toast.LENGTH_LONG).show();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCancelled</span><span class=\"params\">(CancelledException cex)</span> </span>&#123;</div><div class=\"line\">            Toast.makeText(x.app(), <span class=\"string\">\"cancelled\"</span>, Toast.LENGTH_LONG).show();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFinished</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"DbUtils数据库的使用\"><a href=\"#DbUtils数据库的使用\" class=\"headerlink\" title=\"DbUtils数据库的使用\"></a>DbUtils数据库的使用</h3><ul>\n<li>使用了orm框架更为简便的代码实现数据CURD</li>\n<li>各种检索方式，支持事务等</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> String dbPath = Environment.getExternalStorageDirectory() + <span class=\"string\">\"/database\"</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String DB_NAME = <span class=\"string\">\"test.db\"</span>;</div><div class=\"line\">    <span class=\"comment\">//数据库业务层配置信息的初始化</span></div><div class=\"line\">    <span class=\"keyword\">private</span> DbManager.DaoConfig daoConfig = <span class=\"keyword\">new</span> DbManager.DaoConfig()</div><div class=\"line\">            .setDbName(DB_NAME)<span class=\"comment\">//数据库名称</span></div><div class=\"line\">            <span class=\"comment\">// 不设置dbDir时, 默认存储在app的私有目录.</span></div><div class=\"line\">            .setDbDir(<span class=\"keyword\">new</span> File(dbPath)) <span class=\"comment\">// \"sdcard\"的写法并非最佳实践, 这里为了简单, 先这样写了.</span></div><div class=\"line\">            .setDbVersion(<span class=\"number\">1</span>)<span class=\"comment\">//版本</span></div><div class=\"line\">            .setDbOpenListener(<span class=\"keyword\">new</span> DbManager.DbOpenListener() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDbOpened</span><span class=\"params\">(DbManager db)</span> </span>&#123;</div><div class=\"line\">                    <span class=\"comment\">// 开启WAL, 对写入加速提升巨大</span></div><div class=\"line\">                    db.getDatabase().enableWriteAheadLogging();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;)</div><div class=\"line\">            .setDbUpgradeListener(<span class=\"keyword\">new</span> DbManager.DbUpgradeListener() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onUpgrade</span><span class=\"params\">(DbManager db, <span class=\"keyword\">int</span> oldVersion, <span class=\"keyword\">int</span> newVersion)</span> </span>&#123;</div><div class=\"line\">                    <span class=\"comment\">// db.addColumn(...);</span></div><div class=\"line\">                    <span class=\"comment\">// db.dropTable(...);</span></div><div class=\"line\">                    <span class=\"comment\">// ...</span></div><div class=\"line\">                    <span class=\"comment\">// or</span></div><div class=\"line\">                    <span class=\"comment\">// db.dropDb();</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> DbManager db = x.getDb(daoConfig);<span class=\"comment\">//DB manager的对象</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 新增数据对象到数据库</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> object</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(Object object)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            db.saveOrUpdate(object);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (DbException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 绑定id形式的新增数据</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> object</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">saveBindId</span><span class=\"params\">(Object object)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> db.saveBindingId(object);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (DbException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">   <span class=\"comment\">/**</span></div><div class=\"line\">     * 删除学生信息</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> id 学生的学号</div><div class=\"line\">     * <span class=\"doctag\">@return</span> 返回删除结果，true为成功，false为失败</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">deleteChild</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            db.deleteById(Child.class, id);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (DbException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 更新</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> object 数据对象</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">update</span><span class=\"params\">(Object object)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            db.saveOrUpdate(object);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (DbException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 查询所有学生信息</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Child&gt; <span class=\"title\">searchChild</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> db.findAll(Child.class);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (DbException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 根据学号查询学生信息</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> id 学生学号</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Child <span class=\"title\">searchChildById</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> db.findById(Child.class, id);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (DbException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 删除Child表</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dropChildTable</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            db.dropTable(Child.class);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (DbException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p><code>Child.java</code>注意，此文件删除了一写get、set方法和属性，只作为说明演示，特别需要注意的就是<strong>构造函数</strong>那块，个人经验总结</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//创建child表的方式，使用@Table注解，只有一个参数就是name</span></div><div class=\"line\"><span class=\"meta\">@Table</span>(name = <span class=\"string\">\"child\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">//创建表格中的列，使用@Column注解，包含name，isId，autoGen，property等属性，也就是sql语句中的属性字段等。</span></div><div class=\"line\">    <span class=\"meta\">@Column</span>(name = <span class=\"string\">\"cNum\"</span>, isId = <span class=\"keyword\">true</span>, autoGen = <span class=\"keyword\">false</span>)</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> cNum;<span class=\"comment\">//学号</span></div><div class=\"line\">    <span class=\"meta\">@Column</span>(name = <span class=\"string\">\"cName\"</span>)</div><div class=\"line\">    <span class=\"keyword\">private</span> String cName;<span class=\"comment\">//学生姓名</span></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"meta\">@Column</span>(name = <span class=\"string\">\"ic_num\"</span>, property = <span class=\"string\">\"unique\"</span>)</div><div class=\"line\">    <span class=\"keyword\">private</span> String icNum;<span class=\"comment\">//幼儿卡号码,唯一</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 无参数构造法不可私有化，否则数据库表格创建异常</div><div class=\"line\">     * 且不设置自增，若使用无参构造，容易引起数据插入只有一条。</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Child</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 多参数构造函数，创建Child类的对象</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> cNum  学号</div><div class=\"line\">     * <span class=\"doctag\">@param</span> name  姓名</div><div class=\"line\">     * <span class=\"doctag\">@param</span> sex   性别</div><div class=\"line\">     * <span class=\"doctag\">@param</span> grade 班级</div><div class=\"line\">     * <span class=\"doctag\">@param</span> age   年龄</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Child</span><span class=\"params\">(<span class=\"keyword\">int</span> cNum, String name, String sex, String grade, <span class=\"keyword\">int</span> age)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.cNum = cNum;</div><div class=\"line\">        <span class=\"keyword\">this</span>.cName = name;</div><div class=\"line\">        <span class=\"keyword\">this</span>.sex = sex;</div><div class=\"line\">        <span class=\"keyword\">this</span>.grade = grade;</div><div class=\"line\">        <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 获取幼儿学号</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getCNum</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> cNum;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 设置幼儿学号</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> cNum</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setNum</span><span class=\"params\">(<span class=\"keyword\">int</span> cNum)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.cNum = cNum;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"BitmapUtils图片使用\"><a href=\"#BitmapUtils图片使用\" class=\"headerlink\" title=\"BitmapUtils图片使用\"></a>BitmapUtils图片使用</h3><ul>\n<li>使用<code>lru</code>算法，缓存以及多线程等，便于更好的管理图片下载，和加载操作。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">x.image().bind(imageView, url, imageOptions);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// assets file</span></div><div class=\"line\">x.image().bind(imageView, <span class=\"string\">\"assets://test.gif\"</span>, imageOptions);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// local file</span></div><div class=\"line\">x.image().bind(imageView, <span class=\"keyword\">new</span> File(<span class=\"string\">\"/sdcard/test.gif\"</span>).toURI().toString(), imageOptions);</div><div class=\"line\">x.image().bind(imageView, <span class=\"string\">\"/sdcard/test.gif\"</span>, imageOptions);</div><div class=\"line\">x.image().bind(imageView, <span class=\"string\">\"file:///sdcard/test.gif\"</span>, imageOptions);</div><div class=\"line\">x.image().bind(imageView, <span class=\"string\">\"file:/sdcard/test.gif\"</span>, imageOptions);</div><div class=\"line\"></div><div class=\"line\">x.image().bind(imageView, url, imageOptions, <span class=\"keyword\">new</span> Callback.CommonCallback&lt;Drawable&gt;() &#123;...&#125;);</div><div class=\"line\">x.image().loadDrawable(url, imageOptions, <span class=\"keyword\">new</span> Callback.CommonCallback&lt;Drawable&gt;() &#123;...&#125;);</div><div class=\"line\">x.image().loadFile(url, imageOptions, <span class=\"keyword\">new</span> Callback.CommonCallback&lt;File&gt;() &#123;...&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"LogUtils输出日志\"><a href=\"#LogUtils输出日志\" class=\"headerlink\" title=\"LogUtils输出日志\"></a>LogUtils输出日志</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 自动添加TAG，格式： className.methodName(L:lineNumber)</span></div><div class=\"line\"><span class=\"comment\">// 可设置全局的LogUtils.allowD = false，LogUtils.allowI = false...，控制是否输出log。</span></div><div class=\"line\"><span class=\"comment\">// 自定义log输出LogUtils.customLogger = new xxxLogger();</span></div><div class=\"line\">LogUtils.d(<span class=\"string\">\"wyouflf\"</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"混淆时注意事项：\"><a href=\"#混淆时注意事项：\" class=\"headerlink\" title=\"混淆时注意事项：\"></a>混淆时注意事项：</h3><ul>\n<li>添加Android默认混淆配置${sdk.dir}/tools/proguard/proguard-android.txt</li>\n<li>不要混淆xUtils中的注解类型，添加混淆配置：-keep class <em> extends java.lang.annotation.Annotation { </em>; }</li>\n<li>对使用DbUtils模块持久化的实体类不要混淆，或者注解所有表和列名称@Table(name=”xxx”)，@Id(column=”xxx”)，@Column(column=”xxx”),@Foreign(column=”xxx”,foreign=”xxx”);</li>\n</ul>\n<p>附言：本人算是IT技术小白，使用xUtils尚且不熟悉，且与此做个笔记记录，希望于人于己有所帮助。</p>\n","excerpt":"","more":"<blockquote>\n<p>前言：开源技术对于当前便捷开发的重要性，自不必言明。不重复造轮子，去学习和使用已有的开源框架和类库，有利于我们的产品快速开发与迭代实现。</p>\n</blockquote>\n<p>xUtils3是基于xUtils的一个开源框架升级版，不再兼容Android4.0以下版本，虽然不如2016年的RxJava、retrofit等框架那么热门，但是也算是一个小而综合的开源框架，适合初学者学习使用。</p>\n<h2 id=\"1、xUtils3简介\"><a href=\"#1、xUtils3简介\" class=\"headerlink\" title=\"1、xUtils3简介\"></a>1、xUtils3简介</h2><p>xUtils是github上<code>wyouflf</code>作者的一个开源项目，继承了很多Android app开发常用的功能模块框架，主要有四大模块：DbUtils、ViewUtils、HttpUtils、BitmapUtils模块。包含了ORM框架、IOC框架，是的开发更为快捷。更为详细的介绍请异步github上的项目主页。<a href=\"https://github.com/wyouflf/xUtils\">xUtils</a>,<a href=\"https://github.com/wyouflf/xUtils3\">xUtils3</a>以及在开源中国上发现的有简要的注释代码的<a href=\"http://git.oschina.net/guozhiwei/xUtils3/tree/master\">xUtils3</a>和<a href=\"http://xutilsapi.oschina.mopaas.com/\">api文档</a>.感谢这些热心同学，感谢伟大的开源共享精神！</p>\n<h2 id=\"2、xUtils3使用\"><a href=\"#2、xUtils3使用\" class=\"headerlink\" title=\"2、xUtils3使用\"></a>2、xUtils3使用</h2><p>目前Android项目开发主流都在使用AndroidStudio为开发工具了，还在使用eclipse的同学，真心需要改变了，优势太多，无法一一赘述，简言之就是便捷、高效。Gralde中配置依赖</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile <span class=\"string\">'org.xutils:xutils:3.3.40'</span></div></pre></td></tr></table></figure>\n<p>建议使用最新版本的依赖库。详情请看xUtils的github地址<a href=\"https://github.com/wyouflf/xUtils3\">xUtils3</a>，Eclipse的使用，可以下载对应提供的aar文件，去除jar包和so文件到<code>lib</code>文件中使用。</p>\n<h3 id=\"项目配置\"><a href=\"#项目配置\" class=\"headerlink\" title=\"项目配置\"></a>项目配置</h3><ul>\n<li>权限，xUtils3中使用数据库存储和网络请求，所以需要以下权限</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.INTERNET\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.WRITE_EXTERNAL_STORAGE\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>初始化，在Application的onCreate中初始化</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//自定义MyApplication 继承 Application</span></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">super</span>.onCreate();</div><div class=\"line\">  x.Ext.init(<span class=\"keyword\">this</span>);</div><div class=\"line\">  x.Ext.setDebug(BuildConfig.DEBUG);<span class=\"comment\">//是否输出debug日志，开启日志输出，会影响一部分性能</span></div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"ViewUtils注解使用\"><a href=\"#ViewUtils注解使用\" class=\"headerlink\" title=\"ViewUtils注解使用\"></a>ViewUtils注解使用</h3><ul>\n<li>注解来绑定UI和事件</li>\n<li>免除<code>findViewById</code>和<code>setOnClickListener</code>等</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@ContentView</span>(R.layout.activit_main)</div><div class=\"line\"><span class=\"keyword\">public</span> MainActivity extends Activity &#123;</div><div class=\"line\">  <span class=\"meta\">@ViewInject</span>(R.id.text)</div><div class=\"line\">  <span class=\"keyword\">private</span> TextView tvTest;</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">      x.view().inject(<span class=\"keyword\">this</span>);<span class=\"comment\">//注入View的初始化，如此，方能在Activity的java文件中使用@ContentView、@ViewInject等注解</span></div><div class=\"line\">      <span class=\"comment\">//需要说明的是，x.view().inject()有几个方法重载呢，可以注入fragment，也可在adapter中注入，或者其他自定义类中，需要使用x.view().inject(this,view);或者x.view().inject(holder,view);</span></div><div class=\"line\">    ...</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//此处需要说明的是，@Event默认的即使View的onClick事件，所以其最简实现形式如下，省略了许多参数</span></div><div class=\"line\">  <span class=\"meta\">@Event</span>(R.id.btnTest)</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">toClick</span><span class=\"params\">(View view)</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">//点击事件响应处理</span></div><div class=\"line\">    ...</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//而下面为完整实现形式，value可以是多个控件的数组，type表示该组控件的事件响应方式，以及设置注册这类事件的setter方式，事件响应的函数的方法名，对应的自定义的这个方法，名称无所谓，但是需要private以及方法签名中的参数，要保持和所使用控件原有的方法参数的一致性。</span></div><div class=\"line\">  </div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\"> * 1. 方法必须私有限定,</div><div class=\"line\"> * 2. 方法参数形式必须和type对应的Listener接口一致.</div><div class=\"line\"> * 3. 注解参数value支持数组: value=&#123;id1, id2, id3&#125;</div><div class=\"line\"> * 4. 其它参数说明见&#123;<span class=\"doctag\">@link</span> org.xutils.event.annotation.Event&#125;类的说明.</div><div class=\"line\"> **/</div><div class=\"line\">  <span class=\"meta\">@Event</span>(value = &#123;R.id.btnSend、R.id.btnReceive&#125;,type = View.OnClickListener.class,setter=<span class=\"string\">\"setOnClickListener\"</span>,method=<span class=\"string\">\"onClickListener\"</span>)</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">doClick</span><span class=\"params\">(View view)</span></span>&#123;<span class=\"comment\">//此处方法参数，(View view)是因为onClickListerner的方法参数就是（View view），若是其他方法，则换成对应的参数列表。</span></div><div class=\"line\">    ...</div><div class=\"line\">  &#125;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"HttpUtils访问网络\"><a href=\"#HttpUtils访问网络\" class=\"headerlink\" title=\"HttpUtils访问网络\"></a>HttpUtils访问网络</h3><ul>\n<li>便捷的下载、上传文件或提交数据，如下简单的使用方式，更多的可以参照项目<code>sample</code>和githbu上的说明。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Event</span>(value = R.id.btn_test_baidu2)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">onTestBaidu2Click</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">    RequestParams params = <span class=\"keyword\">new</span> RequestParams(<span class=\"string\">\"https://www.baidu.com/s\"</span>);</div><div class=\"line\">    params.setSslSocketFactory(...); <span class=\"comment\">// 设置ssl</span></div><div class=\"line\">    params.addQueryStringParameter(<span class=\"string\">\"wd\"</span>, <span class=\"string\">\"xUtils\"</span>);</div><div class=\"line\">    <span class=\"comment\">//或者其他参数设置，比如超时，读取时长，请记住这里需要网络权限，若是忘了添加，可能就报错，但是提示不明显，会让你蒙头。返回的result结果，需要在这里面处理，尽量不要拿出外面线程处理，因为是网络异步，可能会出现到外面数据一时间为空。</span></div><div class=\"line\">    x.http().get(params, <span class=\"keyword\">new</span> Callback.CommonCallback&lt;String&gt;() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSuccess</span><span class=\"params\">(String result)</span> </span>&#123;</div><div class=\"line\">            Toast.makeText(x.app(), result, Toast.LENGTH_LONG).show();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable ex, <span class=\"keyword\">boolean</span> isOnCallback)</span> </span>&#123;</div><div class=\"line\">            Toast.makeText(x.app(), ex.getMessage(), Toast.LENGTH_LONG).show();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCancelled</span><span class=\"params\">(CancelledException cex)</span> </span>&#123;</div><div class=\"line\">            Toast.makeText(x.app(), <span class=\"string\">\"cancelled\"</span>, Toast.LENGTH_LONG).show();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFinished</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"DbUtils数据库的使用\"><a href=\"#DbUtils数据库的使用\" class=\"headerlink\" title=\"DbUtils数据库的使用\"></a>DbUtils数据库的使用</h3><ul>\n<li>使用了orm框架更为简便的代码实现数据CURD</li>\n<li>各种检索方式，支持事务等</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> String dbPath = Environment.getExternalStorageDirectory() + <span class=\"string\">\"/database\"</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String DB_NAME = <span class=\"string\">\"test.db\"</span>;</div><div class=\"line\">    <span class=\"comment\">//数据库业务层配置信息的初始化</span></div><div class=\"line\">    <span class=\"keyword\">private</span> DbManager.DaoConfig daoConfig = <span class=\"keyword\">new</span> DbManager.DaoConfig()</div><div class=\"line\">            .setDbName(DB_NAME)<span class=\"comment\">//数据库名称</span></div><div class=\"line\">            <span class=\"comment\">// 不设置dbDir时, 默认存储在app的私有目录.</span></div><div class=\"line\">            .setDbDir(<span class=\"keyword\">new</span> File(dbPath)) <span class=\"comment\">// \"sdcard\"的写法并非最佳实践, 这里为了简单, 先这样写了.</span></div><div class=\"line\">            .setDbVersion(<span class=\"number\">1</span>)<span class=\"comment\">//版本</span></div><div class=\"line\">            .setDbOpenListener(<span class=\"keyword\">new</span> DbManager.DbOpenListener() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDbOpened</span><span class=\"params\">(DbManager db)</span> </span>&#123;</div><div class=\"line\">                    <span class=\"comment\">// 开启WAL, 对写入加速提升巨大</span></div><div class=\"line\">                    db.getDatabase().enableWriteAheadLogging();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;)</div><div class=\"line\">            .setDbUpgradeListener(<span class=\"keyword\">new</span> DbManager.DbUpgradeListener() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onUpgrade</span><span class=\"params\">(DbManager db, <span class=\"keyword\">int</span> oldVersion, <span class=\"keyword\">int</span> newVersion)</span> </span>&#123;</div><div class=\"line\">                    <span class=\"comment\">// db.addColumn(...);</span></div><div class=\"line\">                    <span class=\"comment\">// db.dropTable(...);</span></div><div class=\"line\">                    <span class=\"comment\">// ...</span></div><div class=\"line\">                    <span class=\"comment\">// or</span></div><div class=\"line\">                    <span class=\"comment\">// db.dropDb();</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> DbManager db = x.getDb(daoConfig);<span class=\"comment\">//DB manager的对象</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 新增数据对象到数据库</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> object</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(Object object)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            db.saveOrUpdate(object);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (DbException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 绑定id形式的新增数据</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> object</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">saveBindId</span><span class=\"params\">(Object object)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> db.saveBindingId(object);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (DbException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">   <span class=\"comment\">/**</span></div><div class=\"line\">     * 删除学生信息</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> id 学生的学号</div><div class=\"line\">     * <span class=\"doctag\">@return</span> 返回删除结果，true为成功，false为失败</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">deleteChild</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            db.deleteById(Child.class, id);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (DbException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 更新</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> object 数据对象</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">update</span><span class=\"params\">(Object object)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            db.saveOrUpdate(object);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (DbException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 查询所有学生信息</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Child&gt; <span class=\"title\">searchChild</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> db.findAll(Child.class);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (DbException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 根据学号查询学生信息</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> id 学生学号</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Child <span class=\"title\">searchChildById</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> db.findById(Child.class, id);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (DbException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 删除Child表</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dropChildTable</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            db.dropTable(Child.class);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (DbException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p><code>Child.java</code>注意，此文件删除了一写get、set方法和属性，只作为说明演示，特别需要注意的就是<strong>构造函数</strong>那块，个人经验总结</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//创建child表的方式，使用@Table注解，只有一个参数就是name</span></div><div class=\"line\"><span class=\"meta\">@Table</span>(name = <span class=\"string\">\"child\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">//创建表格中的列，使用@Column注解，包含name，isId，autoGen，property等属性，也就是sql语句中的属性字段等。</span></div><div class=\"line\">    <span class=\"meta\">@Column</span>(name = <span class=\"string\">\"cNum\"</span>, isId = <span class=\"keyword\">true</span>, autoGen = <span class=\"keyword\">false</span>)</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> cNum;<span class=\"comment\">//学号</span></div><div class=\"line\">    <span class=\"meta\">@Column</span>(name = <span class=\"string\">\"cName\"</span>)</div><div class=\"line\">    <span class=\"keyword\">private</span> String cName;<span class=\"comment\">//学生姓名</span></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"meta\">@Column</span>(name = <span class=\"string\">\"ic_num\"</span>, property = <span class=\"string\">\"unique\"</span>)</div><div class=\"line\">    <span class=\"keyword\">private</span> String icNum;<span class=\"comment\">//幼儿卡号码,唯一</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 无参数构造法不可私有化，否则数据库表格创建异常</div><div class=\"line\">     * 且不设置自增，若使用无参构造，容易引起数据插入只有一条。</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Child</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 多参数构造函数，创建Child类的对象</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> cNum  学号</div><div class=\"line\">     * <span class=\"doctag\">@param</span> name  姓名</div><div class=\"line\">     * <span class=\"doctag\">@param</span> sex   性别</div><div class=\"line\">     * <span class=\"doctag\">@param</span> grade 班级</div><div class=\"line\">     * <span class=\"doctag\">@param</span> age   年龄</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Child</span><span class=\"params\">(<span class=\"keyword\">int</span> cNum, String name, String sex, String grade, <span class=\"keyword\">int</span> age)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.cNum = cNum;</div><div class=\"line\">        <span class=\"keyword\">this</span>.cName = name;</div><div class=\"line\">        <span class=\"keyword\">this</span>.sex = sex;</div><div class=\"line\">        <span class=\"keyword\">this</span>.grade = grade;</div><div class=\"line\">        <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 获取幼儿学号</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getCNum</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> cNum;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 设置幼儿学号</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> cNum</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setNum</span><span class=\"params\">(<span class=\"keyword\">int</span> cNum)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.cNum = cNum;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"BitmapUtils图片使用\"><a href=\"#BitmapUtils图片使用\" class=\"headerlink\" title=\"BitmapUtils图片使用\"></a>BitmapUtils图片使用</h3><ul>\n<li>使用<code>lru</code>算法，缓存以及多线程等，便于更好的管理图片下载，和加载操作。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">x.image().bind(imageView, url, imageOptions);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// assets file</span></div><div class=\"line\">x.image().bind(imageView, <span class=\"string\">\"assets://test.gif\"</span>, imageOptions);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// local file</span></div><div class=\"line\">x.image().bind(imageView, <span class=\"keyword\">new</span> File(<span class=\"string\">\"/sdcard/test.gif\"</span>).toURI().toString(), imageOptions);</div><div class=\"line\">x.image().bind(imageView, <span class=\"string\">\"/sdcard/test.gif\"</span>, imageOptions);</div><div class=\"line\">x.image().bind(imageView, <span class=\"string\">\"file:///sdcard/test.gif\"</span>, imageOptions);</div><div class=\"line\">x.image().bind(imageView, <span class=\"string\">\"file:/sdcard/test.gif\"</span>, imageOptions);</div><div class=\"line\"></div><div class=\"line\">x.image().bind(imageView, url, imageOptions, <span class=\"keyword\">new</span> Callback.CommonCallback&lt;Drawable&gt;() &#123;...&#125;);</div><div class=\"line\">x.image().loadDrawable(url, imageOptions, <span class=\"keyword\">new</span> Callback.CommonCallback&lt;Drawable&gt;() &#123;...&#125;);</div><div class=\"line\">x.image().loadFile(url, imageOptions, <span class=\"keyword\">new</span> Callback.CommonCallback&lt;File&gt;() &#123;...&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"LogUtils输出日志\"><a href=\"#LogUtils输出日志\" class=\"headerlink\" title=\"LogUtils输出日志\"></a>LogUtils输出日志</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 自动添加TAG，格式： className.methodName(L:lineNumber)</span></div><div class=\"line\"><span class=\"comment\">// 可设置全局的LogUtils.allowD = false，LogUtils.allowI = false...，控制是否输出log。</span></div><div class=\"line\"><span class=\"comment\">// 自定义log输出LogUtils.customLogger = new xxxLogger();</span></div><div class=\"line\">LogUtils.d(<span class=\"string\">\"wyouflf\"</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"混淆时注意事项：\"><a href=\"#混淆时注意事项：\" class=\"headerlink\" title=\"混淆时注意事项：\"></a>混淆时注意事项：</h3><ul>\n<li>添加Android默认混淆配置${sdk.dir}/tools/proguard/proguard-android.txt</li>\n<li>不要混淆xUtils中的注解类型，添加混淆配置：-keep class <em> extends java.lang.annotation.Annotation { </em>; }</li>\n<li>对使用DbUtils模块持久化的实体类不要混淆，或者注解所有表和列名称@Table(name=”xxx”)，@Id(column=”xxx”)，@Column(column=”xxx”),@Foreign(column=”xxx”,foreign=”xxx”);</li>\n</ul>\n<p>附言：本人算是IT技术小白，使用xUtils尚且不熟悉，且与此做个笔记记录，希望于人于己有所帮助。</p>\n"},{"title":"Android入门基础","date":"2017-03-27T08:57:00.000Z","author":"冰路梦","_content":"## 第一章、Android入门基础\n\n### 1.$建立App$\n\nIntent 启动activity。传递参数。有显示和隐式的区分。explicit intent和implicit intent。\n\n### 2.$ActionBar$\n\n- 声明父类Activity，在AndroidManifest.xml文件中,Activity节点下，有activity:parentActivityName的属性，并在ActionBar中调用getSupportActionBar().setDisplayHomeAsUpEnabled(true);方法，如此点击ActionBar的返回键，会跳转到其声明的super Activity而不会返回到启动它的那个activity了。\n- 在application节点或者activity节点下，配置theme属性，可以更改actionbar的主题，可以自定义主题style.xml文件，一般要继承parent一个theme，然后item各个属性，配置自定义的颜色或者图片样式。可以自定义selector美化样式。\n- actionbar可以调用hide和show方法，达到隐藏显示的效果，通过android:windowActionBarOverlay设置为true的属性方法，来启动叠加。避免隐藏和显示actionbar而造成界面大小的调整重绘。`兼容低版本，有support库，好多属性和高版本属性一样名称，但是前面没有android:如android:paddingTop=\"?attr/actionBarSize\"问号后就没有android:表明这是support库的属性。`\n\n### 3.$Compatibile Devices$\n\n- 语言：res下的value目录，建立不同的value，适配不同的语言。如value-en,value-zh\n- 屏幕尺寸：res下layout配置不同，有四种尺寸和分辨率小(small)，普通(normal)，大(large)，超大(xlarge)；低精度(ldpi), 中精度(mdpi), 高精度(hdpi), 超高精度(xhdpi)；如layout-large,layout-land,layout-large-land等等。其中分辨率和屏幕密度有关，ldpi=0.75,mdpi=1,hdpi=1.5,xhdpi=2;\n\n### 4.$ActivityLifeCircle$\n\n- Activity生命周期金字塔![base_life_circle](第一篇、Android入门基础/basic-lifecycle.png \"Activity生命周期图\")\n\n  > 如果在onCreated方法中调用了finish方法，则会直接调用onDestoryed方法，而不会走其他流程。\n  >\n  > 在onPaused方法中做一些资源释放比较好，数据保存之类的可以放在onStoped方法中。对应的在onResumed方法中恢复一些资源。**Activity的非正常销毁，并不一定会被调用onDestoryed方法**  \n  >\n  > Activity会自动保存一些view控件类的状态到bundle中，用于异常时候恢复。然而其他数据则需要手动保存。onSaveInstanceState()重写来保存数据(Activity需要重建才会调用它)，在activity重建时候，会将数据传递到bundle给oncreate或者onRestoreInstanceState()。  \n  >\n  > 跳转到其他activity或者按home键，都会调用onSaveInstanceState方法，然而从被跳转Activity返回上一个activity，其不会调用onSaveInstanceState。`在onCreated中需要判断bundle是否为空，而在onRestoreInstanceState中，不需要。`\n\n### 5.Fragment\n\n- Fragment 必须复写onCreateView方法，inflate布局文件或view。但是xml布局写fragment的方式不能动态删减fragment。所以可以在代码中添加fragment，但是需要在布局拥有一个layout容器。\n\n   用fragment manager来管理，需要启用事务，transaction例如\n\n```java\nFragmentTransaction transaction= getSupportFragmentManager().beginTransaction();\ntransaction.replace(R.id.fragment_container, newFragment);//可以add,hide\ntransaction.addToBackStack(null);//设置用于用户回退操作。参数为事务名。\n// Commit the transaction\ntransaction.commit();\n```\n- Fragments之间交互，要通过Activity，在Fragment中定义接口和方法，activity实现。然后fragment调用方法后，会传递到activity中。\n\n### 6.保存数据\n\n- context.getSharedPreferences()，需要设置名称，而activity.getPreferences()获得默认的。似乎还有个getDefaultPreferences();的方法。写用sp的editor，commit。读取用sp的get。\n- 保存到文件，有内部外部之分，内部和外部的getExternalFilesDir()会与app共存亡，而getPublicFile。内部有getFile和cache。可以通过createCacheFile方法创建缓存文件。外部public文件夹，需要指明类别DIRECTORY_PICTURES等。使用前需要判断sd卡状态，和空间getFreeSpace(),getTotalSpace().删除文件可以context.deletefile().\n- getWriteable和getReadable，都是可读写的对象，不过getReadable先尝试获取可写，不行，再只读。而writeable就报错了。\n\n### 7.与其他应用交互\n\n- #### Intent的发送\n\n  > 1. intent发送出去，一般情况下Android会保证有应用接收intent，但是若真的没有应用接收intent，那么app会崩溃。此时可以检测是否有接收intent的应用，若没有，可提供下载链接或者终止操作。\n  >\n  >    ```java\n  >    PackageManager packageManager = getPackageManager();\n  >    List<ResolveInfo> activities = packageManager.queryIntentActivities(intent, 0);\n  >    boolean isIntentSafe = activities.size() > 0;\n  >    ```\n  >\n  > 2. 一般start Activity有多个响应的话，用户可以选择默认程序，下次就不会弹出选择。然而分享功能，就需要必须显示所有响应的app，可用如下代码：createChooser来创建intent，还能设置标题，并在无应用响应时候提示。\n  >\n  > ```java\n  > Intent intent = new Intent(Intent.ACTION_SEND);\n  > ...\n  > // Always use string resources for UI text. This says something like \"Share this photo with\"\n  > String title = getResources().getText(R.string.chooser_title);\n  > // Create and start the chooser\n  > Intent chooser = Intent.createChooser(intent, title);\n  > startActivity(chooser);\n  > ```\n\n- #### 接收Activity返回的结果\n\n  > requestCode，ResultCode,请求码和返回码，要知道返回数据类型结构，才能正确使用。\n\n- #### Intent过滤\n\n  > 1. Intent设置Action调用相应的app，对应的app需要在android manifest清单文件中，activity节点注册相应的action，intent-filter。Data属性可以更为具体细致的过滤action的数据请求。而category一般少用，都是默认。但是也必须声明.\n  >\n  >    ```xml\n  >    <activity android:name=\"ShareActivity\">\n  >        <intent-filter>\n  >            <action android:name=\"android.intent.action.SEND\"/>\n  >            <category android:name=\"android.intent.category.DEFAULT\"/>\n  >            <data android:mimeType=\"text/plain\"/>\n  >            <data android:mimeType=\"image/*\"/>\n  >        </intent-filter>\n  >    </activity>\n  >    ```\n  >\n  >    *若是不同的action拥有不同的data，则需要分开写两个intent-filter*\n  >\n  > 2. 一般onCreate或onStart中getIntent接收intent，做数据处理。其他地方可set Result来返回结果给调用该Activity的Activity。一般要指定result Code，若是没处理setResult，比如按了back则会有默认的ResultCancel返回。\n  >\n  > 3. setResult也不一定非得是返回码标志，若是请求结果就要int数值，则可以直接返回一个>0的int数值回去。本Activity不必在意是被start Activity还是forResult，系统会判断。\n  >\n  > ```java\n  > setResult(RESULT_COLOR_RED);\n  > finish();\n  > ```\n","source":"_posts/第一篇、Android入门基础.md","raw":"---\ntitle: \"Android入门基础\"\ndate: 2017-03-27 16:57\nauthor: 冰路梦\ntag:\n    - Android\ncategories:\n    - Android\n---\n## 第一章、Android入门基础\n\n### 1.$建立App$\n\nIntent 启动activity。传递参数。有显示和隐式的区分。explicit intent和implicit intent。\n\n### 2.$ActionBar$\n\n- 声明父类Activity，在AndroidManifest.xml文件中,Activity节点下，有activity:parentActivityName的属性，并在ActionBar中调用getSupportActionBar().setDisplayHomeAsUpEnabled(true);方法，如此点击ActionBar的返回键，会跳转到其声明的super Activity而不会返回到启动它的那个activity了。\n- 在application节点或者activity节点下，配置theme属性，可以更改actionbar的主题，可以自定义主题style.xml文件，一般要继承parent一个theme，然后item各个属性，配置自定义的颜色或者图片样式。可以自定义selector美化样式。\n- actionbar可以调用hide和show方法，达到隐藏显示的效果，通过android:windowActionBarOverlay设置为true的属性方法，来启动叠加。避免隐藏和显示actionbar而造成界面大小的调整重绘。`兼容低版本，有support库，好多属性和高版本属性一样名称，但是前面没有android:如android:paddingTop=\"?attr/actionBarSize\"问号后就没有android:表明这是support库的属性。`\n\n### 3.$Compatibile Devices$\n\n- 语言：res下的value目录，建立不同的value，适配不同的语言。如value-en,value-zh\n- 屏幕尺寸：res下layout配置不同，有四种尺寸和分辨率小(small)，普通(normal)，大(large)，超大(xlarge)；低精度(ldpi), 中精度(mdpi), 高精度(hdpi), 超高精度(xhdpi)；如layout-large,layout-land,layout-large-land等等。其中分辨率和屏幕密度有关，ldpi=0.75,mdpi=1,hdpi=1.5,xhdpi=2;\n\n### 4.$ActivityLifeCircle$\n\n- Activity生命周期金字塔![base_life_circle](第一篇、Android入门基础/basic-lifecycle.png \"Activity生命周期图\")\n\n  > 如果在onCreated方法中调用了finish方法，则会直接调用onDestoryed方法，而不会走其他流程。\n  >\n  > 在onPaused方法中做一些资源释放比较好，数据保存之类的可以放在onStoped方法中。对应的在onResumed方法中恢复一些资源。**Activity的非正常销毁，并不一定会被调用onDestoryed方法**  \n  >\n  > Activity会自动保存一些view控件类的状态到bundle中，用于异常时候恢复。然而其他数据则需要手动保存。onSaveInstanceState()重写来保存数据(Activity需要重建才会调用它)，在activity重建时候，会将数据传递到bundle给oncreate或者onRestoreInstanceState()。  \n  >\n  > 跳转到其他activity或者按home键，都会调用onSaveInstanceState方法，然而从被跳转Activity返回上一个activity，其不会调用onSaveInstanceState。`在onCreated中需要判断bundle是否为空，而在onRestoreInstanceState中，不需要。`\n\n### 5.Fragment\n\n- Fragment 必须复写onCreateView方法，inflate布局文件或view。但是xml布局写fragment的方式不能动态删减fragment。所以可以在代码中添加fragment，但是需要在布局拥有一个layout容器。\n\n   用fragment manager来管理，需要启用事务，transaction例如\n\n```java\nFragmentTransaction transaction= getSupportFragmentManager().beginTransaction();\ntransaction.replace(R.id.fragment_container, newFragment);//可以add,hide\ntransaction.addToBackStack(null);//设置用于用户回退操作。参数为事务名。\n// Commit the transaction\ntransaction.commit();\n```\n- Fragments之间交互，要通过Activity，在Fragment中定义接口和方法，activity实现。然后fragment调用方法后，会传递到activity中。\n\n### 6.保存数据\n\n- context.getSharedPreferences()，需要设置名称，而activity.getPreferences()获得默认的。似乎还有个getDefaultPreferences();的方法。写用sp的editor，commit。读取用sp的get。\n- 保存到文件，有内部外部之分，内部和外部的getExternalFilesDir()会与app共存亡，而getPublicFile。内部有getFile和cache。可以通过createCacheFile方法创建缓存文件。外部public文件夹，需要指明类别DIRECTORY_PICTURES等。使用前需要判断sd卡状态，和空间getFreeSpace(),getTotalSpace().删除文件可以context.deletefile().\n- getWriteable和getReadable，都是可读写的对象，不过getReadable先尝试获取可写，不行，再只读。而writeable就报错了。\n\n### 7.与其他应用交互\n\n- #### Intent的发送\n\n  > 1. intent发送出去，一般情况下Android会保证有应用接收intent，但是若真的没有应用接收intent，那么app会崩溃。此时可以检测是否有接收intent的应用，若没有，可提供下载链接或者终止操作。\n  >\n  >    ```java\n  >    PackageManager packageManager = getPackageManager();\n  >    List<ResolveInfo> activities = packageManager.queryIntentActivities(intent, 0);\n  >    boolean isIntentSafe = activities.size() > 0;\n  >    ```\n  >\n  > 2. 一般start Activity有多个响应的话，用户可以选择默认程序，下次就不会弹出选择。然而分享功能，就需要必须显示所有响应的app，可用如下代码：createChooser来创建intent，还能设置标题，并在无应用响应时候提示。\n  >\n  > ```java\n  > Intent intent = new Intent(Intent.ACTION_SEND);\n  > ...\n  > // Always use string resources for UI text. This says something like \"Share this photo with\"\n  > String title = getResources().getText(R.string.chooser_title);\n  > // Create and start the chooser\n  > Intent chooser = Intent.createChooser(intent, title);\n  > startActivity(chooser);\n  > ```\n\n- #### 接收Activity返回的结果\n\n  > requestCode，ResultCode,请求码和返回码，要知道返回数据类型结构，才能正确使用。\n\n- #### Intent过滤\n\n  > 1. Intent设置Action调用相应的app，对应的app需要在android manifest清单文件中，activity节点注册相应的action，intent-filter。Data属性可以更为具体细致的过滤action的数据请求。而category一般少用，都是默认。但是也必须声明.\n  >\n  >    ```xml\n  >    <activity android:name=\"ShareActivity\">\n  >        <intent-filter>\n  >            <action android:name=\"android.intent.action.SEND\"/>\n  >            <category android:name=\"android.intent.category.DEFAULT\"/>\n  >            <data android:mimeType=\"text/plain\"/>\n  >            <data android:mimeType=\"image/*\"/>\n  >        </intent-filter>\n  >    </activity>\n  >    ```\n  >\n  >    *若是不同的action拥有不同的data，则需要分开写两个intent-filter*\n  >\n  > 2. 一般onCreate或onStart中getIntent接收intent，做数据处理。其他地方可set Result来返回结果给调用该Activity的Activity。一般要指定result Code，若是没处理setResult，比如按了back则会有默认的ResultCancel返回。\n  >\n  > 3. setResult也不一定非得是返回码标志，若是请求结果就要int数值，则可以直接返回一个>0的int数值回去。本Activity不必在意是被start Activity还是forResult，系统会判断。\n  >\n  > ```java\n  > setResult(RESULT_COLOR_RED);\n  > finish();\n  > ```\n","slug":"第一篇、Android入门基础","published":1,"updated":"2017-03-28T10:14:48.552Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ndxcdz003988ow87zbjnjx","content":"<h2 id=\"第一章、Android入门基础\"><a href=\"#第一章、Android入门基础\" class=\"headerlink\" title=\"第一章、Android入门基础\"></a>第一章、Android入门基础</h2><h3 id=\"1-建立App\"><a href=\"#1-建立App\" class=\"headerlink\" title=\"1.$建立App$\"></a>1.$建立App$</h3><p>Intent 启动activity。传递参数。有显示和隐式的区分。explicit intent和implicit intent。</p>\n<h3 id=\"2-ActionBar\"><a href=\"#2-ActionBar\" class=\"headerlink\" title=\"2.$ActionBar$\"></a>2.$ActionBar$</h3><ul>\n<li>声明父类Activity，在AndroidManifest.xml文件中,Activity节点下，有activity:parentActivityName的属性，并在ActionBar中调用getSupportActionBar().setDisplayHomeAsUpEnabled(true);方法，如此点击ActionBar的返回键，会跳转到其声明的super Activity而不会返回到启动它的那个activity了。</li>\n<li>在application节点或者activity节点下，配置theme属性，可以更改actionbar的主题，可以自定义主题style.xml文件，一般要继承parent一个theme，然后item各个属性，配置自定义的颜色或者图片样式。可以自定义selector美化样式。</li>\n<li>actionbar可以调用hide和show方法，达到隐藏显示的效果，通过android:windowActionBarOverlay设置为true的属性方法，来启动叠加。避免隐藏和显示actionbar而造成界面大小的调整重绘。<code>兼容低版本，有support库，好多属性和高版本属性一样名称，但是前面没有android:如android:paddingTop=&quot;?attr/actionBarSize&quot;问号后就没有android:表明这是support库的属性。</code></li>\n</ul>\n<h3 id=\"3-Compatibile-Devices\"><a href=\"#3-Compatibile-Devices\" class=\"headerlink\" title=\"3.$Compatibile Devices$\"></a>3.$Compatibile Devices$</h3><ul>\n<li>语言：res下的value目录，建立不同的value，适配不同的语言。如value-en,value-zh</li>\n<li>屏幕尺寸：res下layout配置不同，有四种尺寸和分辨率小(small)，普通(normal)，大(large)，超大(xlarge)；低精度(ldpi), 中精度(mdpi), 高精度(hdpi), 超高精度(xhdpi)；如layout-large,layout-land,layout-large-land等等。其中分辨率和屏幕密度有关，ldpi=0.75,mdpi=1,hdpi=1.5,xhdpi=2;</li>\n</ul>\n<h3 id=\"4-ActivityLifeCircle\"><a href=\"#4-ActivityLifeCircle\" class=\"headerlink\" title=\"4.$ActivityLifeCircle$\"></a>4.$ActivityLifeCircle$</h3><ul>\n<li><p>Activity生命周期金字塔<img src=\"/2017/03/27/第一篇、Android入门基础/basic-lifecycle.png\" alt=\"base_life_circle\" title=\"Activity生命周期图\"></p>\n<blockquote>\n<p>如果在onCreated方法中调用了finish方法，则会直接调用onDestoryed方法，而不会走其他流程。</p>\n<p>在onPaused方法中做一些资源释放比较好，数据保存之类的可以放在onStoped方法中。对应的在onResumed方法中恢复一些资源。<strong>Activity的非正常销毁，并不一定会被调用onDestoryed方法</strong>  </p>\n<p>Activity会自动保存一些view控件类的状态到bundle中，用于异常时候恢复。然而其他数据则需要手动保存。onSaveInstanceState()重写来保存数据(Activity需要重建才会调用它)，在activity重建时候，会将数据传递到bundle给oncreate或者onRestoreInstanceState()。  </p>\n<p>跳转到其他activity或者按home键，都会调用onSaveInstanceState方法，然而从被跳转Activity返回上一个activity，其不会调用onSaveInstanceState。<code>在onCreated中需要判断bundle是否为空，而在onRestoreInstanceState中，不需要。</code></p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"5-Fragment\"><a href=\"#5-Fragment\" class=\"headerlink\" title=\"5.Fragment\"></a>5.Fragment</h3><ul>\n<li><p>Fragment 必须复写onCreateView方法，inflate布局文件或view。但是xml布局写fragment的方式不能动态删减fragment。所以可以在代码中添加fragment，但是需要在布局拥有一个layout容器。</p>\n<p> 用fragment manager来管理，需要启用事务，transaction例如</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">FragmentTransaction transaction= getSupportFragmentManager().beginTransaction();</div><div class=\"line\">transaction.replace(R.id.fragment_container, newFragment);<span class=\"comment\">//可以add,hide</span></div><div class=\"line\">transaction.addToBackStack(<span class=\"keyword\">null</span>);<span class=\"comment\">//设置用于用户回退操作。参数为事务名。</span></div><div class=\"line\"><span class=\"comment\">// Commit the transaction</span></div><div class=\"line\">transaction.commit();</div></pre></td></tr></table></figure>\n<ul>\n<li>Fragments之间交互，要通过Activity，在Fragment中定义接口和方法，activity实现。然后fragment调用方法后，会传递到activity中。</li>\n</ul>\n<h3 id=\"6-保存数据\"><a href=\"#6-保存数据\" class=\"headerlink\" title=\"6.保存数据\"></a>6.保存数据</h3><ul>\n<li>context.getSharedPreferences()，需要设置名称，而activity.getPreferences()获得默认的。似乎还有个getDefaultPreferences();的方法。写用sp的editor，commit。读取用sp的get。</li>\n<li>保存到文件，有内部外部之分，内部和外部的getExternalFilesDir()会与app共存亡，而getPublicFile。内部有getFile和cache。可以通过createCacheFile方法创建缓存文件。外部public文件夹，需要指明类别DIRECTORY_PICTURES等。使用前需要判断sd卡状态，和空间getFreeSpace(),getTotalSpace().删除文件可以context.deletefile().</li>\n<li>getWriteable和getReadable，都是可读写的对象，不过getReadable先尝试获取可写，不行，再只读。而writeable就报错了。</li>\n</ul>\n<h3 id=\"7-与其他应用交互\"><a href=\"#7-与其他应用交互\" class=\"headerlink\" title=\"7.与其他应用交互\"></a>7.与其他应用交互</h3><ul>\n<li><h4 id=\"Intent的发送\"><a href=\"#Intent的发送\" class=\"headerlink\" title=\"Intent的发送\"></a>Intent的发送</h4><blockquote>\n<ol>\n<li><p>intent发送出去，一般情况下Android会保证有应用接收intent，但是若真的没有应用接收intent，那么app会崩溃。此时可以检测是否有接收intent的应用，若没有，可提供下载链接或者终止操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    PackageManager packageManager = getPackageManager();</div><div class=\"line\">&gt;    List&lt;ResolveInfo&gt; activities = packageManager.queryIntentActivities(intent, <span class=\"number\">0</span>);</div><div class=\"line\">&gt;    <span class=\"keyword\">boolean</span> isIntentSafe = activities.size() &gt; <span class=\"number\">0</span>;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li>一般start Activity有多个响应的话，用户可以选择默认程序，下次就不会弹出选择。然而分享功能，就需要必须显示所有响应的app，可用如下代码：createChooser来创建intent，还能设置标题，并在无应用响应时候提示。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; Intent intent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_SEND);</div><div class=\"line\">&gt; ...</div><div class=\"line\">&gt; <span class=\"comment\">// Always use string resources for UI text. This says something like \"Share this photo with\"</span></div><div class=\"line\">&gt; String title = getResources().getText(R.string.chooser_title);</div><div class=\"line\">&gt; <span class=\"comment\">// Create and start the chooser</span></div><div class=\"line\">&gt; Intent chooser = Intent.createChooser(intent, title);</div><div class=\"line\">&gt; startActivity(chooser);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><h4 id=\"接收Activity返回的结果\"><a href=\"#接收Activity返回的结果\" class=\"headerlink\" title=\"接收Activity返回的结果\"></a>接收Activity返回的结果</h4><blockquote>\n<p>requestCode，ResultCode,请求码和返回码，要知道返回数据类型结构，才能正确使用。</p>\n</blockquote>\n</li>\n<li><h4 id=\"Intent过滤\"><a href=\"#Intent过滤\" class=\"headerlink\" title=\"Intent过滤\"></a>Intent过滤</h4><blockquote>\n<ol>\n<li><p>Intent设置Action调用相应的app，对应的app需要在android manifest清单文件中，activity节点注册相应的action，intent-filter。Data属性可以更为具体细致的过滤action的数据请求。而category一般少用，都是默认。但是也必须声明.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    <span class=\"tag\">&lt;<span class=\"name\">activity</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"ShareActivity\"</span>&gt;</span></div><div class=\"line\">&gt;        <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">&gt;            <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.SEND\"</span>/&gt;</span></div><div class=\"line\">&gt;            <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.DEFAULT\"</span>/&gt;</span></div><div class=\"line\">&gt;            <span class=\"tag\">&lt;<span class=\"name\">data</span> <span class=\"attr\">android:mimeType</span>=<span class=\"string\">\"text/plain\"</span>/&gt;</span></div><div class=\"line\">&gt;            <span class=\"tag\">&lt;<span class=\"name\">data</span> <span class=\"attr\">android:mimeType</span>=<span class=\"string\">\"image/*\"</span>/&gt;</span></div><div class=\"line\">&gt;        <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">&gt;    <span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>   <em>若是不同的action拥有不同的data，则需要分开写两个intent-filter</em></p>\n<ol>\n<li><p>一般onCreate或onStart中getIntent接收intent，做数据处理。其他地方可set Result来返回结果给调用该Activity的Activity。一般要指定result Code，若是没处理setResult，比如按了back则会有默认的ResultCancel返回。</p>\n</li>\n<li><p>setResult也不一定非得是返回码标志，若是请求结果就要int数值，则可以直接返回一个&gt;0的int数值回去。本Activity不必在意是被start Activity还是forResult，系统会判断。</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; setResult(RESULT_COLOR_RED);</div><div class=\"line\">&gt; finish();</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"第一章、Android入门基础\"><a href=\"#第一章、Android入门基础\" class=\"headerlink\" title=\"第一章、Android入门基础\"></a>第一章、Android入门基础</h2><h3 id=\"1-建立App\"><a href=\"#1-建立App\" class=\"headerlink\" title=\"1.$建立App$\"></a>1.$建立App$</h3><p>Intent 启动activity。传递参数。有显示和隐式的区分。explicit intent和implicit intent。</p>\n<h3 id=\"2-ActionBar\"><a href=\"#2-ActionBar\" class=\"headerlink\" title=\"2.$ActionBar$\"></a>2.$ActionBar$</h3><ul>\n<li>声明父类Activity，在AndroidManifest.xml文件中,Activity节点下，有activity:parentActivityName的属性，并在ActionBar中调用getSupportActionBar().setDisplayHomeAsUpEnabled(true);方法，如此点击ActionBar的返回键，会跳转到其声明的super Activity而不会返回到启动它的那个activity了。</li>\n<li>在application节点或者activity节点下，配置theme属性，可以更改actionbar的主题，可以自定义主题style.xml文件，一般要继承parent一个theme，然后item各个属性，配置自定义的颜色或者图片样式。可以自定义selector美化样式。</li>\n<li>actionbar可以调用hide和show方法，达到隐藏显示的效果，通过android:windowActionBarOverlay设置为true的属性方法，来启动叠加。避免隐藏和显示actionbar而造成界面大小的调整重绘。<code>兼容低版本，有support库，好多属性和高版本属性一样名称，但是前面没有android:如android:paddingTop=&quot;?attr/actionBarSize&quot;问号后就没有android:表明这是support库的属性。</code></li>\n</ul>\n<h3 id=\"3-Compatibile-Devices\"><a href=\"#3-Compatibile-Devices\" class=\"headerlink\" title=\"3.$Compatibile Devices$\"></a>3.$Compatibile Devices$</h3><ul>\n<li>语言：res下的value目录，建立不同的value，适配不同的语言。如value-en,value-zh</li>\n<li>屏幕尺寸：res下layout配置不同，有四种尺寸和分辨率小(small)，普通(normal)，大(large)，超大(xlarge)；低精度(ldpi), 中精度(mdpi), 高精度(hdpi), 超高精度(xhdpi)；如layout-large,layout-land,layout-large-land等等。其中分辨率和屏幕密度有关，ldpi=0.75,mdpi=1,hdpi=1.5,xhdpi=2;</li>\n</ul>\n<h3 id=\"4-ActivityLifeCircle\"><a href=\"#4-ActivityLifeCircle\" class=\"headerlink\" title=\"4.$ActivityLifeCircle$\"></a>4.$ActivityLifeCircle$</h3><ul>\n<li><p>Activity生命周期金字塔<img src=\"/2017/03/27/第一篇、Android入门基础/basic-lifecycle.png\" alt=\"base_life_circle\" title=\"Activity生命周期图\"></p>\n<blockquote>\n<p>如果在onCreated方法中调用了finish方法，则会直接调用onDestoryed方法，而不会走其他流程。</p>\n<p>在onPaused方法中做一些资源释放比较好，数据保存之类的可以放在onStoped方法中。对应的在onResumed方法中恢复一些资源。<strong>Activity的非正常销毁，并不一定会被调用onDestoryed方法</strong>  </p>\n<p>Activity会自动保存一些view控件类的状态到bundle中，用于异常时候恢复。然而其他数据则需要手动保存。onSaveInstanceState()重写来保存数据(Activity需要重建才会调用它)，在activity重建时候，会将数据传递到bundle给oncreate或者onRestoreInstanceState()。  </p>\n<p>跳转到其他activity或者按home键，都会调用onSaveInstanceState方法，然而从被跳转Activity返回上一个activity，其不会调用onSaveInstanceState。<code>在onCreated中需要判断bundle是否为空，而在onRestoreInstanceState中，不需要。</code></p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"5-Fragment\"><a href=\"#5-Fragment\" class=\"headerlink\" title=\"5.Fragment\"></a>5.Fragment</h3><ul>\n<li><p>Fragment 必须复写onCreateView方法，inflate布局文件或view。但是xml布局写fragment的方式不能动态删减fragment。所以可以在代码中添加fragment，但是需要在布局拥有一个layout容器。</p>\n<p> 用fragment manager来管理，需要启用事务，transaction例如</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">FragmentTransaction transaction= getSupportFragmentManager().beginTransaction();</div><div class=\"line\">transaction.replace(R.id.fragment_container, newFragment);<span class=\"comment\">//可以add,hide</span></div><div class=\"line\">transaction.addToBackStack(<span class=\"keyword\">null</span>);<span class=\"comment\">//设置用于用户回退操作。参数为事务名。</span></div><div class=\"line\"><span class=\"comment\">// Commit the transaction</span></div><div class=\"line\">transaction.commit();</div></pre></td></tr></table></figure>\n<ul>\n<li>Fragments之间交互，要通过Activity，在Fragment中定义接口和方法，activity实现。然后fragment调用方法后，会传递到activity中。</li>\n</ul>\n<h3 id=\"6-保存数据\"><a href=\"#6-保存数据\" class=\"headerlink\" title=\"6.保存数据\"></a>6.保存数据</h3><ul>\n<li>context.getSharedPreferences()，需要设置名称，而activity.getPreferences()获得默认的。似乎还有个getDefaultPreferences();的方法。写用sp的editor，commit。读取用sp的get。</li>\n<li>保存到文件，有内部外部之分，内部和外部的getExternalFilesDir()会与app共存亡，而getPublicFile。内部有getFile和cache。可以通过createCacheFile方法创建缓存文件。外部public文件夹，需要指明类别DIRECTORY_PICTURES等。使用前需要判断sd卡状态，和空间getFreeSpace(),getTotalSpace().删除文件可以context.deletefile().</li>\n<li>getWriteable和getReadable，都是可读写的对象，不过getReadable先尝试获取可写，不行，再只读。而writeable就报错了。</li>\n</ul>\n<h3 id=\"7-与其他应用交互\"><a href=\"#7-与其他应用交互\" class=\"headerlink\" title=\"7.与其他应用交互\"></a>7.与其他应用交互</h3><ul>\n<li><h4 id=\"Intent的发送\"><a href=\"#Intent的发送\" class=\"headerlink\" title=\"Intent的发送\"></a>Intent的发送</h4><blockquote>\n<ol>\n<li><p>intent发送出去，一般情况下Android会保证有应用接收intent，但是若真的没有应用接收intent，那么app会崩溃。此时可以检测是否有接收intent的应用，若没有，可提供下载链接或者终止操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    PackageManager packageManager = getPackageManager();</div><div class=\"line\">&gt;    List&lt;ResolveInfo&gt; activities = packageManager.queryIntentActivities(intent, <span class=\"number\">0</span>);</div><div class=\"line\">&gt;    <span class=\"keyword\">boolean</span> isIntentSafe = activities.size() &gt; <span class=\"number\">0</span>;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li>一般start Activity有多个响应的话，用户可以选择默认程序，下次就不会弹出选择。然而分享功能，就需要必须显示所有响应的app，可用如下代码：createChooser来创建intent，还能设置标题，并在无应用响应时候提示。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; Intent intent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_SEND);</div><div class=\"line\">&gt; ...</div><div class=\"line\">&gt; <span class=\"comment\">// Always use string resources for UI text. This says something like \"Share this photo with\"</span></div><div class=\"line\">&gt; String title = getResources().getText(R.string.chooser_title);</div><div class=\"line\">&gt; <span class=\"comment\">// Create and start the chooser</span></div><div class=\"line\">&gt; Intent chooser = Intent.createChooser(intent, title);</div><div class=\"line\">&gt; startActivity(chooser);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><h4 id=\"接收Activity返回的结果\"><a href=\"#接收Activity返回的结果\" class=\"headerlink\" title=\"接收Activity返回的结果\"></a>接收Activity返回的结果</h4><blockquote>\n<p>requestCode，ResultCode,请求码和返回码，要知道返回数据类型结构，才能正确使用。</p>\n</blockquote>\n</li>\n<li><h4 id=\"Intent过滤\"><a href=\"#Intent过滤\" class=\"headerlink\" title=\"Intent过滤\"></a>Intent过滤</h4><blockquote>\n<ol>\n<li><p>Intent设置Action调用相应的app，对应的app需要在android manifest清单文件中，activity节点注册相应的action，intent-filter。Data属性可以更为具体细致的过滤action的数据请求。而category一般少用，都是默认。但是也必须声明.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    <span class=\"tag\">&lt;<span class=\"name\">activity</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"ShareActivity\"</span>&gt;</span></div><div class=\"line\">&gt;        <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">&gt;            <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.SEND\"</span>/&gt;</span></div><div class=\"line\">&gt;            <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.DEFAULT\"</span>/&gt;</span></div><div class=\"line\">&gt;            <span class=\"tag\">&lt;<span class=\"name\">data</span> <span class=\"attr\">android:mimeType</span>=<span class=\"string\">\"text/plain\"</span>/&gt;</span></div><div class=\"line\">&gt;            <span class=\"tag\">&lt;<span class=\"name\">data</span> <span class=\"attr\">android:mimeType</span>=<span class=\"string\">\"image/*\"</span>/&gt;</span></div><div class=\"line\">&gt;        <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">&gt;    <span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>   <em>若是不同的action拥有不同的data，则需要分开写两个intent-filter</em></p>\n<ol>\n<li><p>一般onCreate或onStart中getIntent接收intent，做数据处理。其他地方可set Result来返回结果给调用该Activity的Activity。一般要指定result Code，若是没处理setResult，比如按了back则会有默认的ResultCancel返回。</p>\n</li>\n<li><p>setResult也不一定非得是返回码标志，若是请求结果就要int数值，则可以直接返回一个&gt;0的int数值回去。本Activity不必在意是被start Activity还是forResult，系统会判断。</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; setResult(RESULT_COLOR_RED);</div><div class=\"line\">&gt; finish();</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n"},{"title":"正则表达式","date":"2016-11-21T08:26:00.000Z","_content":"\n# 正则表达式学习笔记\n<!-- TOC -->\n\n- [正则表达式学习笔记](#正则表达式学习笔记)\n    - [一、简介](#一简介)\n        - [1、为什么是用正则表达式](#1为什么是用正则表达式)\n        - [2、发展历史](#2发展历史)\n        - [3、应用领域](#3应用领域)\n    - [二、语法](#二语法)\n        - [1、普通字符](#1普通字符)\n        - [2、非打印字符](#2非打印字符)\n        - [3、特殊字符](#3特殊字符)\n        - [4、限定符](#4限定符)\n        - [5、定位符](#5定位符)\n        - [6、选择和反向引用](#6选择和反向引用)\n    - [三、元字符](#三元字符)\n    - [四、运算符优先级](#四运算符优先级)\n    - [五、匹配规则](#五匹配规则)\n        - [1、基本模式匹配](#1基本模式匹配)\n        - [2、字符簇](#2字符簇)\n        - [3、确定重复出现](#3确定重复出现)\n    - [六、示例](#六示例)\n\n<!-- /TOC -->\n\nRegular Expression正则表达式，是一种文本模式，包括普通字符（a-z，A-Z）和特殊字符（元字符）。\n\n正则表达式使用打个字符来描述、匹配一系列匹配某个句法规则的字符串。\n\n## 一、简介\n\n初学者一般都不太熟悉正则表达式的专业术语，但一般程序员都会用过`*`和`?`两个符号，作为通配符，分别是配多个和单个字符。\n\n```sh\ndata1.dat\ndata2.dat\n#可以用data?.dat同时匹配如上两个\ndata3.dat\ndata4.dat\ndata123.dat\n#如上，则需要data*.dat才能匹配到data123.dat这个。\n```\n\n### 1、为什么是用正则表达式\n\n典型的搜索和替换操作，需要提供确切的匹配文本。正则表达式相比具有更高的灵活性：\n\n- 测试字符串内的模式\n\n  例如可以测试输入的字符串，是否包含特定格式，此种称为数据验证。\n\n- 替换文本\n\n  正则表达式来识别特定文本、删除和替换。\n\n- 基于模式匹配从字符串中提取子字符串。\n\n  可以查找文档内或者输入域内的特定字符。\n\n### 2、发展历史\n\n正则表达式雏形出现于生理学神经系统的研究中。后来被数学家`Stephen Kleene`用于描述`正则集的代数`表示，而形成`正则表达式`这个术语，虽有有应用于Unix系统的搜索算法，于是开始了计算机领域内的正则表达式的使用。\n\n### 3、应用领域\n\n正则表达式在许多软件中得到广泛应用，类Unix系统、HP系统，php、c#、java等。\n\n## 二、语法\n\n正则表达式(regular expression)描述的是一种字符串匹配模式，可用于检查是否包含、替换或取出符合条件的字符串。\n\n- 列表目录时，使用`*`通配符的做法不属于正则表达式的范畴，因为在RegExp中`*`的含义不同\n- 构造正则表达式的方式类似数学表达式。\n\n### 1、普通字符\n\n普通字符是指没有显式指定为元字符的所有可打印和不可打印字符，大小写字母、数字、表达符号和一些其他符号。\n\n### 2、非打印字符\n\n非打印字符也可以是正则表达式的组成部分，如下列转义序列的非打印字符：\n\n| 字符   | 描述                                       |\n| ---- | ---------------------------------------- |\n| \\cx  | 匹配由x指明的控制字符。例如，\\cM匹配一个`Control-M`或`回车符`。x必须为A-Z(a-z)。否则c将是为原意的\\`c\\`字符。 |\n| \\f   | 匹配换页符。等价于`\\x0c`和`\\cL`。                   |\n| \\n   | 匹配换行符。等价于`\\x0a`和`\\cJ`。                   |\n| \\r   | 匹配回车符。等价于`\\x0d`和`\\cM`。                   |\n| \\s   | 匹配任何空白字符，包括空格，制表符、换页符等等。等价于[\\f\\n\\r\\t\\v]。 |\n| \\S   | 撇陪任何非空白字符。等价于\\[^ \\f\\n\\t\\v\\]。             |\n| \\t   | 匹配一个制表符。等价于`\\x09`和`\\cl`。                 |\n| \\v   | 匹配一个垂直制表符。等价于`\\x0b`和`\\cK`。               |\n\n### 3、特殊字符\n\n包含特殊含义的字符，如`*`符号，通配符，若搜索本身的`*`符号，就需要转义匹配`\\*`。特殊字符可以理解为正则表达式的关键字，若要匹配它们自己本身，就要用转义符`\\`。\n\n| 特殊字符 | 描述                                       |\n| ---- | ---------------------------------------- |\n| \\$   | 匹配输入字符的结尾位置。如果设置了RegExp对象的Multiline属性，则\\$也匹配`\\n`或`\\r`。若要匹配`$`本身，就要用`\\$`转义。 |\n| ()   | 标识一个子表达式的首末位置。子表达式可以获取供以后使用。匹配符号本身用`\\(`和`\\)`。 |\n| *    | 匹配前面的子表达式零次或多次。匹配自身用`\\*`。                |\n| +    | 匹配前面的子表达式一次或多次。匹配自身用`\\+`。                |\n| .    | 匹配除换行符`\\n`之外的任何单字符。匹配自身用`\\.`。            |\n| [    | 标记中括号表达式的开始。匹配自身用`\\[`。                   |\n| ?    | 匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。匹配自身用`\\?`。    |\n| \\    | 将下一个字符标记为特殊字符、原义字符、向后引用、八进制转义等等。如`n`匹配`n`，`\\n`匹配换行符。`\\\\`匹配`\\`。 |\n| ^    | 匹配输入字符串的开始位置，除非在方括号表达式中使用，此时他表示不接受该字符集合。匹配自身用`\\^`。 |\n| {    | 标记限定符表达式的开始。匹配自身用`{`。                    |\n| \\|   | 之名亮相之间的一个选择。匹配自身用`\\|`。                   |\n\n### 4、限定符\n\n限定符用来指定正则表达式的一个给顶组件，必须要出现多少次才能满足匹配。有一下六种\n\n| 字符    | 描述                                       |\n| ----- | ---------------------------------------- |\n| *     | 匹配前面的子表达式零次或多次。例如，`zo*`能匹配\"z\"以及\"zoo\"，*等价于{0,}。 |\n| +     | 匹配前面的子表达式一次或多次。例如，`zo+`能匹配\"zo\"以及\"zoo\"，不能匹配\"z\"。+等价于{1,}。 |\n| ?     | 匹配前面的子表达式零次或一次。例如，`do(es)?`可匹配\"do\"或\"does\"中的\"do\"。?等价于{0,1}。 |\n| {n}   | n是一个非负整数。匹配确定的n次。例如，`o{2}`不能匹配\"Bob\"中的o，能匹配\"food\"中的两个o。 |\n| {n,}  | 你是一个非负整数。至少匹配n次。例如，`o{2,}`不能匹配\"Bob\"中的o,能匹配\"foooood\"中所有的o。`o{1,}`等价于`o+`。`o{0,}`等价于`o*`。 |\n| {n,m} | m、n均为非负整数。n<=m。最少匹配n次切最多匹配m次。例如，`o{1,3}`将匹配\"foooood\"中的前三个o。`o{0,1}`等价于`o?`。==注意逗号与数字间不能有空格== |\n\n章节编号亦可能大于9，正则表达式匹配正解标题\n\n```reStructuredText\n/Chapter [1-9](0-9)*/\n```\n\n**\\*、+和?限定符都是贪婪的，尽可能多的匹配文字，在其后加上一个?则可实现非贪婪或最小匹配**\n\n```sh\n#匹配<开始到>结束之间的所有内容。\n/<.*>/\n```\n\n### 5、定位符\n\n定位符可以是正则表达式固定到行首或行尾。用于描述字符串或单词的边界，`^`和`$`分别表示字符串的开始和结束。`\\b`表示单词的前或后边界，`\\B`表示非单词的边界。\n\n| 字符   | 描述                                       |\n| ---- | ---------------------------------------- |\n| ^    | 匹配输入字符的开始位置。如果RegExp设置了Multiple属性，^还会与\\n或\\r之后的位置匹配。 |\n| \\$   | 匹配输入字符串的结尾位置。若RegExp设置了Multiple属性，$还会匹配\\n或\\r之前的位置。 |\n| \\b   | 匹配一个字边界，即字与空格之间的位置。                      |\n| \\B   | 非字边界匹配。                                  |\n\n**注意**：不能将限定符与定位点一起使用。由于在紧靠换行或者字边界的前面或后面不能有==**一个以上**==位置，因此不允许诸如`^*`之类的表达式。\n\n- 匹配一行文本开始处的文本，在RegExp开始使用`^`字符。这与`()`内的`^`意思不同。\n- 匹配一行文本结束处的文本，在RegExp结尾使用`$`字符。\n\n示例：\n\n```sh\n#匹配章节标题，其只含两个尾随数字\n/^Chapter [1-9][0-9]{0,1}/\n#匹配真正标题，而非包含交叉引用，则标题独占一行。\n/^Chapter [1-9][0-9]{0,1}$/\n#字符边界匹配，以下两个分别匹配Chapter的前三和后三个字符。\n/\\bCha/\n/ter\\b/\n#非字符边界，匹配Chapter中的apt，而不匹配边界的aptitude中的apt\n/\\Bapt/\n```\n\n### 6、选择和反向引用\n\n用圆括号`()`括起来所有选择项，相邻选择项用`|`分隔。如此有副作用，相关的匹配会被缓存，则用`?:`放在第一选项前来消除副作用。\n\n**`?:`、`?=`、`?!`属于非捕获元，而`?=`还表示正向预查，在任何开始匹配圆括号内正则表达式模式的位置来匹配搜索字符串。`?!`反向预查，在任何开始不匹配该正则表达式模式的位置来匹配搜索字符串。**\n\n正则表达式模式添加`()`会导致相关匹配存储到一个临时缓冲区，所有匹配子项都按照正则模式从左到右存储。1开始到99个子表达式缓存。缓冲区都可以用`\\n`访问，其中`n`表示特定缓冲区的一位或两位十进制数。\n\n反向引用，常用相邻单词的匹配，\n\n```sh\nIs is the cost of of gasoline going up up?\n#如上句子包含重复单词，若不需要重复单词而定位到该句子\n/\\b([a-z]+) \\1\\b/gi\n#如上捕获表达式，[a-z]+指定一个或多个字母。单词的第二个匹配项正好由括号表达式匹配。\\1指定第一个字匹配项。\\b保证了只检测整个单词。全局标记g和忽略大小写标记i\n```\n\n如上示例中使用到全局标记`g`和大小写忽略标记`i`\n\n反向引用还可以分解资源指示符`URI`组件\n\n```sh\nhttp://www.google.com:80/android/index.html\n#使用正则表达式\n/(\\w+):\\/\\/([^/:]+)(:\\d*)?([^# ])/\n```\n\n说明：第一个括号用于获取http协议部分，在://之前。第二个表达式，捕获域名地址，匹配/和:之外的一个或多个字符。第三个捕获端口号，:后面的0个或多个只能重复一次该表达式，最后的括号补货地址路径/符号的页面信息。\n\n## 三、元字符\n\n下表包含元字符的完整列表以及他们在正则表达式上下文中的行为：\n\n| 字符          | 描述                                       |\n| ----------- | ---------------------------------------- |\n| \\           | 将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、或一个八进制转义符。例如，'n' 匹配字符 \"n\"。'\\n' 匹配一个换行符。序列 '\\\\' 匹配 \"\\\" 而 \"\\(\" 则匹配 \"(\"。 |\n| ^           | 匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 '\\n' 或 '\\r' 之后的位置。 |\n| \\$          | 匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 '\\n' 或 '\\r' 之前的位置。 |\n| *           | 匹配前面的子表达式零次或多次。例如，zo* 能匹配 \"z\" 以及 \"zoo\"。* 等价于{0,}。 |\n| +           | 匹配前面的子表达式一次或多次。例如，'zo+' 能匹配 \"zo\" 以及 \"zoo\"，但不能匹配 \"z\"。+ 等价于 {1,}。 |\n| ?           | 匹配前面的子表达式零次或一次。例如，\"do(es)?\" 可以匹配 \"do\" 或 \"does\" 中的\"do\" 。? 等价于 {0,1}。 |\n| {n}         | n 是一个非负整数。匹配确定的 n 次。例如，'o{2}' 不能匹配 \"Bob\" 中的 'o'，但是能匹配 \"food\" 中的两个 o。 |\n| {n,}        | n 是一个非负整数。至少匹配n 次。例如，'o{2,}' 不能匹配 \"Bob\" 中的 'o'，但能匹配 \"foooood\" 中的所有 o。'o{1,}' 等价于 'o+'。'o{0,}' 则等价于 'o*'。 |\n| {n,m}       | m 和 n 均为非负整数，其中n <= m。最少匹配 n 次且最多匹配 m 次。例如，\"o{1,3}\" 将匹配 \"fooooood\" 中的前三个 o。'o{0,1}' 等价于 'o?'。请注意在逗号和两个数之间不能有空格。 |\n| ?           | 当该字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 \"oooo\"，'o+?' 将匹配单个 \"o\"，而 'o+' 将匹配所有 'o'。 |\n| .           | 匹配除 \"\\n\" 之外的任何单个字符。要匹配包括 '\\n' 在内的任何字符，请使用像\"**(. |\n| (pattern)   | 匹配 pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在VBScript 中使用 SubMatches 集合，在JScript 中则使用 $0…$9 属性。要匹配圆括号字符，请使用 '\\(' 或 '\\)'。 |\n| (?:pattern) | 匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用 \"或\" 字符 ( |\n| (?=pattern) | 正向预查，在任何匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，'Windows (?=95 |\n| (?!pattern) | 负向预查，在任何不匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如'Windows (?!95 |\n| x           | y                                        |\n| [xyz]       | 字符集合。匹配所包含的任意一个字符。例如， '[abc]' 可以匹配 \"plain\" 中的 'a'。 |\n| [^xyz]      | 负值字符集合。匹配未包含的任意字符。例如， '[^abc]' 可以匹配 \"plain\" 中的'p'、'l'、'i'、'n'。 |\n| [a-z]       | 字符范围。匹配指定范围内的任意字符。例如，'[a-z]' 可以匹配 'a' 到 'z' 范围内的任意小写字母字符。 |\n| [^a-z]      | 负值字符范围。匹配任何不在指定范围内的任意字符。例如，'[^a-z]' 可以匹配任何不在 'a' 到 'z' 范围内的任意字符。 |\n| \\b          | 匹配一个单词边界，也就是指单词和空格间的位置。例如， 'er\\b' 可以匹配\"never\" 中的 'er'，但不能匹配 \"verb\" 中的 'er'。 |\n| \\B          | 匹配非单词边界。'er\\B' 能匹配 \"verb\" 中的 'er'，但不能匹配 \"never\" 中的 'er'。 |\n| \\cx         | 匹配由 x 指明的控制字符。例如， \\cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 'c' 字符。 |\n| \\d          | 匹配一个数字字符。等价于 [0-9]。                      |\n| \\D          | 匹配一个非数字字符。等价于 [^0-9]。                    |\n| \\f          | 匹配一个换页符。等价于 \\x0c 和 \\cL。                  |\n| \\n          | 匹配一个换行符。等价于 \\x0a 和 \\cJ。                  |\n| \\r          | 匹配一个回车符。等价于 \\x0d 和 \\cM。                  |\n| \\s          | 匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \\f\\n\\r\\t\\v]。 |\n| \\S          | 匹配任何非空白字符。等价于 [^ \\f\\n\\r\\t\\v]。            |\n| \\t          | 匹配一个制表符。等价于 \\x09 和 \\cI。                  |\n| \\v          | 匹配一个垂直制表符。等价于 \\x0b 和 \\cK。                |\n| \\w          | 匹配包括下划线的任何单词字符。等价于'[A-Za-z0-9_]'。        |\n| \\W          | 匹配任何非单词字符。等价于 '[^A-Za-z0-9_]'。           |\n| \\xn         | 匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，'\\x41' 匹配 \"A\"。'\\x041' 则等价于 '\\x04' & \"1\"。正则表达式中可以使用 ASCII 编码。 |\n| \\num        | 匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，'(.)\\1' 匹配两个连续的相同字符。 |\n| \\n          | 标识一个八进制转义值或一个向后引用。如果 \\n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字 (0-7)，则 n 为一个八进制转义值。 |\n| \\nm         | 标识一个八进制转义值或一个向后引用。如果 \\nm 之前至少有 nm 个获得子表达式，则 nm 为向后引用。如果 \\nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的向后引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字 (0-7)，则 \\nm 将匹配八进制转义值 nm。 |\n| \\nml        | 如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml。 |\n| \\un         | 匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如， \\u00A9 匹配版权符号 (?)。 |\n\n## 四、运算符优先级\n\n正则表达式从左到右进行计算，类似算术运算，遵循优先级：\n\n| 运算符                  | 描述                                       |\n| -------------------- | ---------------------------------------- |\n| \\                    | 转义符                                      |\n| (),(?:),(?=),[]      | 圆括号和方括号                                  |\n| *,+,?,{n},{n,},{n,m} | 限定符                                      |\n| ^,$,\\任何元字符、任何字符      | 定位点和序列(即：位置和顺序)                          |\n| \\|                   | 替换，\"或\"操作，字符具有高于替换运算符的优先级，使得\"m\\|food\"匹配\"m\"或\"food\"。若要匹配\"mood\"或\"food\"，请使用括号创建子表达式，从而产生\"(m\\|f)ood\"。 |\n\n## 五、匹配规则\n\n### 1、基本模式匹配\n\n模式是正则表达式最基本的元素，它们是一组描述字符串特征的字符。可以很简单，有普通字符组成，也可以很复杂由特殊字符构成。\n\n```sh\n^once\n```\n\n如上模式，包含特殊字符`^`表示该模式只匹配以`once`开头的字符串。\"once upon a time\"匹配，\"There once was a man from NewYork\"则不匹配。\n\n```sh\nbucket$\n```\n\n`$`符号表示结尾，如上匹配\"Who kept all of this cash in a bucket\"，则不匹配\"buckets\"。如果`^`和`$`同时使用，则精准匹配。\n\n```sh\n^bucket$\n```\n\n如上只能匹配`bucket`这个单词，如果不适用特殊字符，仅用普通字符，如once，则匹配所有包含once的字符串。这里的字符是普通字符，有的特殊字符，如空格、制表符、标点等，可能就需要用转义符配合来匹配。\n\n```sh\n#匹配制表符，则不是匹配\\t这两个字符的字面意思，若匹配\\t本义，则用\\\\t转义后的表示法。\n^\\t\n```\n\n### 2、字符簇\n\n用方括号构建字符簇，用于更为自由的使用正则表达式来实现我们需要的搜索与验证功能。\n\n```sh\n#元音字符簇\n[AaEeIiOoUu]\n#如上则匹配所有元音字符，但只能匹配一个。\n[a-z]#匹配所有小写字母\n[A-Z]#匹配所有大写字母\n[a-zA-Z]#匹配所有字母\n[0-9]#匹配所有数字\n[0-9\\.\\-]#匹配所有数字，句号和减号\n[ \\f\\r\\t\\n]#匹配所有空白字符\n#字符簇可以结合^和$符号使用，做精准匹配。\n```\n\n`^`在方括号内，表示`非`的意思，用于排除，剔除\n\n```c\n//如下，则表示第一个字符不能是数字\n^[^0-9][0-9]$\n[^a-z] //除了小写字母以外的所有字符 \n[^\\\\\\/\\^] //除了(\\)(/)(^)之外的所有字符 \n[^\\\"\\'] //除了双引号(\")和单引号(')之外的所有字符\n```\n\n特殊字符`.`表示除了`新行`之外的所有字符。\".\"模式，则可以匹配除了空串和仅有”新行“的之外字符串。\n\nPHP正则表达式有一些内置的字符簇。\n\n| 字符簇          | 描述                      |\n| ------------ | ----------------------- |\n| [[:alpha:]]  | 所有字母                    |\n| [[:digit:]]  | 所有数字                    |\n| [[:alnum:]]  | 所有字母和数字                 |\n| [[:space:]]  | 所有空白符                   |\n| [[:upper:]]  | 所有大写字母                  |\n| [[:lower:]]  | 所有小写字母                  |\n| [[:punct:]]  | 所有标点                    |\n| [[:xdigit:]] | 所有十六进制数字，相当于[0-9a-fA-F] |\n\n### 3、确定重复出现\n\n匹配一个单词或一组数字就需要使用可重复的匹配方式，在字符或字符簇后用`{}`来确定重复出现的次数。\n\n| 字符簇              | 描述                        |\n| ---------------- | ------------------------- |\n| ^[a-zA-Z_]$      | 所有字母和下划线                  |\n| ^[[:alpha:]]{3}$ | 所有的3个字母的单词                |\n| ^a$              | 字母a                       |\n| ^a{4}$           | aaaa                      |\n| ^a{2,4}$         | aa,aaa或aaaa               |\n| ^a{1,3}$         | a,aa或aaa                  |\n| ^a{2,}$          | 包含多于两个a的字符串，都是a           |\n| ^a{2,}           | 包含多于两个a的字符串，不要求都是a，但在开头是。 |\n| a{2,}            | 含有两个以上的a的字符串              |\n| \\t{2}            | 两个制表符                     |\n| .{2}             | 所有两个字符，不含新行               |\n\n`{}`表示集合，内部的数字结构，确定结合的范围或者元素次数。\n\n```c\n^[a-zA-Z0-9_]{1,}$ //所有包含一个以上的字母、数字或下划线的字符串 \n^[1-9][0-9]*$ //所有的正整数 \n^\\-{0,1}[0-9]{1,}$ //所有的整数 \n^[-]?[0-9]+\\.?[0-9]+$ //所有的浮点数\n```\n\n如上最后一个较为复杂，`-`表示负号，可选。`.`表示小数点，通过`^`与`$`符号配合，限定数字的结构，浮点数。其实`?`代表的是`{0,1}`表示一个或者没有，所以用`?`代替了`{}`来限定范围个数。\n\n```c\n//一样的\n^\\-?[0-9]{1,}\\.?[0-9]{1,}$\n```\n\n而`*`与`{0,}`相等，表示0个或多个前面的元素。`+`与`{1,}`相等，表示一个或多个前面的内容，如此上面简化为：\n\n```C\n^[a-zA-Z0-9_]+$ //所有包含一个以上的字母、数字或下划线的字符串 \n^[0-9]+$ //所有的正整数 \n^\\-?[0-9]+$ //所有的整数 \n^\\-?[0-9]+\\.?[0-9]*$ //所有的浮点数\n```\n\n## 六、示例\n\n- 简单表达式\n\n  ```shell\n  #单字匹配\n  /a/\n  /7/\n  /M/\n  #多匹配的单字符\n  /a7M/\n  ```\n\n  注意没有字符串联符号，只须在字符后直接写字符就可以。\n\n- 字符匹配\n\n  `.`匹配除`\\n`之外的所有字符。\n\n  ```sh\n  #匹配a开头c结尾的三个字符\n  /a.c/\n  #要匹配文件名，带后缀的，那么.需要转义\n  /filename\\.txt/\n  ```\n\n- 中括号表达式\n\n  方括号`[]`构建字符簇，但是注意两个特殊字符：\n\n  - `]`由于右方括号也是表达式的一个符号，若要匹配原本它自身，则放在字符簇的第一位。\n  - `\\`斜杠符号，要匹配自身，需要转义`\\\\`。\n\n  ```sh\n  #这两种写法等效。格式中空格是不可缺少的。但是指定范围的方式，需要字符的Unicode码大小顺序来写范围。\n  /Chapter [12345]/\n  /Chapter [1-5]/\n\n  #连接符\n  [\\-]\n  [-a-z]\n  [a-z-]\n  #开始值小于连字符，结束字符大于或等于连字符，\n  [!--]\n  [!-~]\n  ```\n\n  - `^`在中括号内表示`非`，用于排除\n\n- 替换和分组\n\n  `|`符号用于替换。如下表示出现在行首或行尾，后面跟一个或两个数字的Chapter或Section：\n\n  ```sh\n  #需要用()来限定需要替换的范围，如果不加()，那么会将Chapter与|后面所有的等价位置，而不是和Section等价。\n  /^(Chapter|Section) [1-9][0-9]{0,1}$/\n  #如上搜索结果会被捕获并存储，有时候多个子表达式，会引起误会。需要清除缓存。\n  /^(?:Chapter|Section) [1-9][0-9]{0,1}$/\n  ```\n\n- 其他示例\n\n  | 正则表达式                                    | 描述                                       |\n  | ---------------------------------------- | ---------------------------------------- |\n  | /\\b([a-z]+)\\1\\b/gi                       | 一个单词连续出现的位置                              |\n  | /(\\w+):\\/\\/(\\[^/:]+)(:\\d\\*)?(\\[^#\\*])/   | 将一个URL解析为协议、域、端口、相对路径                    |\n  | /^(?:Chapter\\|Section)[1-9]\\[0-9]{0,1}$/ | 定位章节位置                                   |\n  | /[-a-z]/                                 | a-z和-                                    |\n  | /ter\\b/                                  | 末尾边界符                                    |\n  | /\\Bapt/                                  | 非边界符                                     |\n  | /Windows(?=95\\|98\\|NT)/                  | 可匹配Windows95或Windows98或WindowsNT，当找到一个匹配后，从Windows后面开始进行下一次的检索匹配。 |\n  | /^\\s*$/                                  | 匹配空行                                     |\n  | /\\d{2}-\\d{5}/                            | 验证由两位数、一个连字符、5位数组成的ID号。                  |\n  | /<\\s\\*(\\S+)(\\s\\[^>]\\*)?>[\\s\\S]\\*<\\s\\*\\/\\1\\s\\*>/ | 匹配HTML标记。                                |\n\n\n**Note:**各个编程语言中的正则表达式可能略微还有差异，如java中特殊元字符可能就需要`\\\\b`来代替`\\b`符号，用双斜杠代替原有的单斜杠。使用中稍加注意。","source":"_posts/正则表达式学习笔记.md","raw":"---\ntitle: 正则表达式\ndate: 2016-11-21 16:26\ntags:\n    - 正则表达式\n    - regular\ncategories:\n    - 算法相关\n---\n\n# 正则表达式学习笔记\n<!-- TOC -->\n\n- [正则表达式学习笔记](#正则表达式学习笔记)\n    - [一、简介](#一简介)\n        - [1、为什么是用正则表达式](#1为什么是用正则表达式)\n        - [2、发展历史](#2发展历史)\n        - [3、应用领域](#3应用领域)\n    - [二、语法](#二语法)\n        - [1、普通字符](#1普通字符)\n        - [2、非打印字符](#2非打印字符)\n        - [3、特殊字符](#3特殊字符)\n        - [4、限定符](#4限定符)\n        - [5、定位符](#5定位符)\n        - [6、选择和反向引用](#6选择和反向引用)\n    - [三、元字符](#三元字符)\n    - [四、运算符优先级](#四运算符优先级)\n    - [五、匹配规则](#五匹配规则)\n        - [1、基本模式匹配](#1基本模式匹配)\n        - [2、字符簇](#2字符簇)\n        - [3、确定重复出现](#3确定重复出现)\n    - [六、示例](#六示例)\n\n<!-- /TOC -->\n\nRegular Expression正则表达式，是一种文本模式，包括普通字符（a-z，A-Z）和特殊字符（元字符）。\n\n正则表达式使用打个字符来描述、匹配一系列匹配某个句法规则的字符串。\n\n## 一、简介\n\n初学者一般都不太熟悉正则表达式的专业术语，但一般程序员都会用过`*`和`?`两个符号，作为通配符，分别是配多个和单个字符。\n\n```sh\ndata1.dat\ndata2.dat\n#可以用data?.dat同时匹配如上两个\ndata3.dat\ndata4.dat\ndata123.dat\n#如上，则需要data*.dat才能匹配到data123.dat这个。\n```\n\n### 1、为什么是用正则表达式\n\n典型的搜索和替换操作，需要提供确切的匹配文本。正则表达式相比具有更高的灵活性：\n\n- 测试字符串内的模式\n\n  例如可以测试输入的字符串，是否包含特定格式，此种称为数据验证。\n\n- 替换文本\n\n  正则表达式来识别特定文本、删除和替换。\n\n- 基于模式匹配从字符串中提取子字符串。\n\n  可以查找文档内或者输入域内的特定字符。\n\n### 2、发展历史\n\n正则表达式雏形出现于生理学神经系统的研究中。后来被数学家`Stephen Kleene`用于描述`正则集的代数`表示，而形成`正则表达式`这个术语，虽有有应用于Unix系统的搜索算法，于是开始了计算机领域内的正则表达式的使用。\n\n### 3、应用领域\n\n正则表达式在许多软件中得到广泛应用，类Unix系统、HP系统，php、c#、java等。\n\n## 二、语法\n\n正则表达式(regular expression)描述的是一种字符串匹配模式，可用于检查是否包含、替换或取出符合条件的字符串。\n\n- 列表目录时，使用`*`通配符的做法不属于正则表达式的范畴，因为在RegExp中`*`的含义不同\n- 构造正则表达式的方式类似数学表达式。\n\n### 1、普通字符\n\n普通字符是指没有显式指定为元字符的所有可打印和不可打印字符，大小写字母、数字、表达符号和一些其他符号。\n\n### 2、非打印字符\n\n非打印字符也可以是正则表达式的组成部分，如下列转义序列的非打印字符：\n\n| 字符   | 描述                                       |\n| ---- | ---------------------------------------- |\n| \\cx  | 匹配由x指明的控制字符。例如，\\cM匹配一个`Control-M`或`回车符`。x必须为A-Z(a-z)。否则c将是为原意的\\`c\\`字符。 |\n| \\f   | 匹配换页符。等价于`\\x0c`和`\\cL`。                   |\n| \\n   | 匹配换行符。等价于`\\x0a`和`\\cJ`。                   |\n| \\r   | 匹配回车符。等价于`\\x0d`和`\\cM`。                   |\n| \\s   | 匹配任何空白字符，包括空格，制表符、换页符等等。等价于[\\f\\n\\r\\t\\v]。 |\n| \\S   | 撇陪任何非空白字符。等价于\\[^ \\f\\n\\t\\v\\]。             |\n| \\t   | 匹配一个制表符。等价于`\\x09`和`\\cl`。                 |\n| \\v   | 匹配一个垂直制表符。等价于`\\x0b`和`\\cK`。               |\n\n### 3、特殊字符\n\n包含特殊含义的字符，如`*`符号，通配符，若搜索本身的`*`符号，就需要转义匹配`\\*`。特殊字符可以理解为正则表达式的关键字，若要匹配它们自己本身，就要用转义符`\\`。\n\n| 特殊字符 | 描述                                       |\n| ---- | ---------------------------------------- |\n| \\$   | 匹配输入字符的结尾位置。如果设置了RegExp对象的Multiline属性，则\\$也匹配`\\n`或`\\r`。若要匹配`$`本身，就要用`\\$`转义。 |\n| ()   | 标识一个子表达式的首末位置。子表达式可以获取供以后使用。匹配符号本身用`\\(`和`\\)`。 |\n| *    | 匹配前面的子表达式零次或多次。匹配自身用`\\*`。                |\n| +    | 匹配前面的子表达式一次或多次。匹配自身用`\\+`。                |\n| .    | 匹配除换行符`\\n`之外的任何单字符。匹配自身用`\\.`。            |\n| [    | 标记中括号表达式的开始。匹配自身用`\\[`。                   |\n| ?    | 匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。匹配自身用`\\?`。    |\n| \\    | 将下一个字符标记为特殊字符、原义字符、向后引用、八进制转义等等。如`n`匹配`n`，`\\n`匹配换行符。`\\\\`匹配`\\`。 |\n| ^    | 匹配输入字符串的开始位置，除非在方括号表达式中使用，此时他表示不接受该字符集合。匹配自身用`\\^`。 |\n| {    | 标记限定符表达式的开始。匹配自身用`{`。                    |\n| \\|   | 之名亮相之间的一个选择。匹配自身用`\\|`。                   |\n\n### 4、限定符\n\n限定符用来指定正则表达式的一个给顶组件，必须要出现多少次才能满足匹配。有一下六种\n\n| 字符    | 描述                                       |\n| ----- | ---------------------------------------- |\n| *     | 匹配前面的子表达式零次或多次。例如，`zo*`能匹配\"z\"以及\"zoo\"，*等价于{0,}。 |\n| +     | 匹配前面的子表达式一次或多次。例如，`zo+`能匹配\"zo\"以及\"zoo\"，不能匹配\"z\"。+等价于{1,}。 |\n| ?     | 匹配前面的子表达式零次或一次。例如，`do(es)?`可匹配\"do\"或\"does\"中的\"do\"。?等价于{0,1}。 |\n| {n}   | n是一个非负整数。匹配确定的n次。例如，`o{2}`不能匹配\"Bob\"中的o，能匹配\"food\"中的两个o。 |\n| {n,}  | 你是一个非负整数。至少匹配n次。例如，`o{2,}`不能匹配\"Bob\"中的o,能匹配\"foooood\"中所有的o。`o{1,}`等价于`o+`。`o{0,}`等价于`o*`。 |\n| {n,m} | m、n均为非负整数。n<=m。最少匹配n次切最多匹配m次。例如，`o{1,3}`将匹配\"foooood\"中的前三个o。`o{0,1}`等价于`o?`。==注意逗号与数字间不能有空格== |\n\n章节编号亦可能大于9，正则表达式匹配正解标题\n\n```reStructuredText\n/Chapter [1-9](0-9)*/\n```\n\n**\\*、+和?限定符都是贪婪的，尽可能多的匹配文字，在其后加上一个?则可实现非贪婪或最小匹配**\n\n```sh\n#匹配<开始到>结束之间的所有内容。\n/<.*>/\n```\n\n### 5、定位符\n\n定位符可以是正则表达式固定到行首或行尾。用于描述字符串或单词的边界，`^`和`$`分别表示字符串的开始和结束。`\\b`表示单词的前或后边界，`\\B`表示非单词的边界。\n\n| 字符   | 描述                                       |\n| ---- | ---------------------------------------- |\n| ^    | 匹配输入字符的开始位置。如果RegExp设置了Multiple属性，^还会与\\n或\\r之后的位置匹配。 |\n| \\$   | 匹配输入字符串的结尾位置。若RegExp设置了Multiple属性，$还会匹配\\n或\\r之前的位置。 |\n| \\b   | 匹配一个字边界，即字与空格之间的位置。                      |\n| \\B   | 非字边界匹配。                                  |\n\n**注意**：不能将限定符与定位点一起使用。由于在紧靠换行或者字边界的前面或后面不能有==**一个以上**==位置，因此不允许诸如`^*`之类的表达式。\n\n- 匹配一行文本开始处的文本，在RegExp开始使用`^`字符。这与`()`内的`^`意思不同。\n- 匹配一行文本结束处的文本，在RegExp结尾使用`$`字符。\n\n示例：\n\n```sh\n#匹配章节标题，其只含两个尾随数字\n/^Chapter [1-9][0-9]{0,1}/\n#匹配真正标题，而非包含交叉引用，则标题独占一行。\n/^Chapter [1-9][0-9]{0,1}$/\n#字符边界匹配，以下两个分别匹配Chapter的前三和后三个字符。\n/\\bCha/\n/ter\\b/\n#非字符边界，匹配Chapter中的apt，而不匹配边界的aptitude中的apt\n/\\Bapt/\n```\n\n### 6、选择和反向引用\n\n用圆括号`()`括起来所有选择项，相邻选择项用`|`分隔。如此有副作用，相关的匹配会被缓存，则用`?:`放在第一选项前来消除副作用。\n\n**`?:`、`?=`、`?!`属于非捕获元，而`?=`还表示正向预查，在任何开始匹配圆括号内正则表达式模式的位置来匹配搜索字符串。`?!`反向预查，在任何开始不匹配该正则表达式模式的位置来匹配搜索字符串。**\n\n正则表达式模式添加`()`会导致相关匹配存储到一个临时缓冲区，所有匹配子项都按照正则模式从左到右存储。1开始到99个子表达式缓存。缓冲区都可以用`\\n`访问，其中`n`表示特定缓冲区的一位或两位十进制数。\n\n反向引用，常用相邻单词的匹配，\n\n```sh\nIs is the cost of of gasoline going up up?\n#如上句子包含重复单词，若不需要重复单词而定位到该句子\n/\\b([a-z]+) \\1\\b/gi\n#如上捕获表达式，[a-z]+指定一个或多个字母。单词的第二个匹配项正好由括号表达式匹配。\\1指定第一个字匹配项。\\b保证了只检测整个单词。全局标记g和忽略大小写标记i\n```\n\n如上示例中使用到全局标记`g`和大小写忽略标记`i`\n\n反向引用还可以分解资源指示符`URI`组件\n\n```sh\nhttp://www.google.com:80/android/index.html\n#使用正则表达式\n/(\\w+):\\/\\/([^/:]+)(:\\d*)?([^# ])/\n```\n\n说明：第一个括号用于获取http协议部分，在://之前。第二个表达式，捕获域名地址，匹配/和:之外的一个或多个字符。第三个捕获端口号，:后面的0个或多个只能重复一次该表达式，最后的括号补货地址路径/符号的页面信息。\n\n## 三、元字符\n\n下表包含元字符的完整列表以及他们在正则表达式上下文中的行为：\n\n| 字符          | 描述                                       |\n| ----------- | ---------------------------------------- |\n| \\           | 将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、或一个八进制转义符。例如，'n' 匹配字符 \"n\"。'\\n' 匹配一个换行符。序列 '\\\\' 匹配 \"\\\" 而 \"\\(\" 则匹配 \"(\"。 |\n| ^           | 匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 '\\n' 或 '\\r' 之后的位置。 |\n| \\$          | 匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 '\\n' 或 '\\r' 之前的位置。 |\n| *           | 匹配前面的子表达式零次或多次。例如，zo* 能匹配 \"z\" 以及 \"zoo\"。* 等价于{0,}。 |\n| +           | 匹配前面的子表达式一次或多次。例如，'zo+' 能匹配 \"zo\" 以及 \"zoo\"，但不能匹配 \"z\"。+ 等价于 {1,}。 |\n| ?           | 匹配前面的子表达式零次或一次。例如，\"do(es)?\" 可以匹配 \"do\" 或 \"does\" 中的\"do\" 。? 等价于 {0,1}。 |\n| {n}         | n 是一个非负整数。匹配确定的 n 次。例如，'o{2}' 不能匹配 \"Bob\" 中的 'o'，但是能匹配 \"food\" 中的两个 o。 |\n| {n,}        | n 是一个非负整数。至少匹配n 次。例如，'o{2,}' 不能匹配 \"Bob\" 中的 'o'，但能匹配 \"foooood\" 中的所有 o。'o{1,}' 等价于 'o+'。'o{0,}' 则等价于 'o*'。 |\n| {n,m}       | m 和 n 均为非负整数，其中n <= m。最少匹配 n 次且最多匹配 m 次。例如，\"o{1,3}\" 将匹配 \"fooooood\" 中的前三个 o。'o{0,1}' 等价于 'o?'。请注意在逗号和两个数之间不能有空格。 |\n| ?           | 当该字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 \"oooo\"，'o+?' 将匹配单个 \"o\"，而 'o+' 将匹配所有 'o'。 |\n| .           | 匹配除 \"\\n\" 之外的任何单个字符。要匹配包括 '\\n' 在内的任何字符，请使用像\"**(. |\n| (pattern)   | 匹配 pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在VBScript 中使用 SubMatches 集合，在JScript 中则使用 $0…$9 属性。要匹配圆括号字符，请使用 '\\(' 或 '\\)'。 |\n| (?:pattern) | 匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用 \"或\" 字符 ( |\n| (?=pattern) | 正向预查，在任何匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，'Windows (?=95 |\n| (?!pattern) | 负向预查，在任何不匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如'Windows (?!95 |\n| x           | y                                        |\n| [xyz]       | 字符集合。匹配所包含的任意一个字符。例如， '[abc]' 可以匹配 \"plain\" 中的 'a'。 |\n| [^xyz]      | 负值字符集合。匹配未包含的任意字符。例如， '[^abc]' 可以匹配 \"plain\" 中的'p'、'l'、'i'、'n'。 |\n| [a-z]       | 字符范围。匹配指定范围内的任意字符。例如，'[a-z]' 可以匹配 'a' 到 'z' 范围内的任意小写字母字符。 |\n| [^a-z]      | 负值字符范围。匹配任何不在指定范围内的任意字符。例如，'[^a-z]' 可以匹配任何不在 'a' 到 'z' 范围内的任意字符。 |\n| \\b          | 匹配一个单词边界，也就是指单词和空格间的位置。例如， 'er\\b' 可以匹配\"never\" 中的 'er'，但不能匹配 \"verb\" 中的 'er'。 |\n| \\B          | 匹配非单词边界。'er\\B' 能匹配 \"verb\" 中的 'er'，但不能匹配 \"never\" 中的 'er'。 |\n| \\cx         | 匹配由 x 指明的控制字符。例如， \\cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 'c' 字符。 |\n| \\d          | 匹配一个数字字符。等价于 [0-9]。                      |\n| \\D          | 匹配一个非数字字符。等价于 [^0-9]。                    |\n| \\f          | 匹配一个换页符。等价于 \\x0c 和 \\cL。                  |\n| \\n          | 匹配一个换行符。等价于 \\x0a 和 \\cJ。                  |\n| \\r          | 匹配一个回车符。等价于 \\x0d 和 \\cM。                  |\n| \\s          | 匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \\f\\n\\r\\t\\v]。 |\n| \\S          | 匹配任何非空白字符。等价于 [^ \\f\\n\\r\\t\\v]。            |\n| \\t          | 匹配一个制表符。等价于 \\x09 和 \\cI。                  |\n| \\v          | 匹配一个垂直制表符。等价于 \\x0b 和 \\cK。                |\n| \\w          | 匹配包括下划线的任何单词字符。等价于'[A-Za-z0-9_]'。        |\n| \\W          | 匹配任何非单词字符。等价于 '[^A-Za-z0-9_]'。           |\n| \\xn         | 匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，'\\x41' 匹配 \"A\"。'\\x041' 则等价于 '\\x04' & \"1\"。正则表达式中可以使用 ASCII 编码。 |\n| \\num        | 匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，'(.)\\1' 匹配两个连续的相同字符。 |\n| \\n          | 标识一个八进制转义值或一个向后引用。如果 \\n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字 (0-7)，则 n 为一个八进制转义值。 |\n| \\nm         | 标识一个八进制转义值或一个向后引用。如果 \\nm 之前至少有 nm 个获得子表达式，则 nm 为向后引用。如果 \\nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的向后引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字 (0-7)，则 \\nm 将匹配八进制转义值 nm。 |\n| \\nml        | 如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml。 |\n| \\un         | 匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如， \\u00A9 匹配版权符号 (?)。 |\n\n## 四、运算符优先级\n\n正则表达式从左到右进行计算，类似算术运算，遵循优先级：\n\n| 运算符                  | 描述                                       |\n| -------------------- | ---------------------------------------- |\n| \\                    | 转义符                                      |\n| (),(?:),(?=),[]      | 圆括号和方括号                                  |\n| *,+,?,{n},{n,},{n,m} | 限定符                                      |\n| ^,$,\\任何元字符、任何字符      | 定位点和序列(即：位置和顺序)                          |\n| \\|                   | 替换，\"或\"操作，字符具有高于替换运算符的优先级，使得\"m\\|food\"匹配\"m\"或\"food\"。若要匹配\"mood\"或\"food\"，请使用括号创建子表达式，从而产生\"(m\\|f)ood\"。 |\n\n## 五、匹配规则\n\n### 1、基本模式匹配\n\n模式是正则表达式最基本的元素，它们是一组描述字符串特征的字符。可以很简单，有普通字符组成，也可以很复杂由特殊字符构成。\n\n```sh\n^once\n```\n\n如上模式，包含特殊字符`^`表示该模式只匹配以`once`开头的字符串。\"once upon a time\"匹配，\"There once was a man from NewYork\"则不匹配。\n\n```sh\nbucket$\n```\n\n`$`符号表示结尾，如上匹配\"Who kept all of this cash in a bucket\"，则不匹配\"buckets\"。如果`^`和`$`同时使用，则精准匹配。\n\n```sh\n^bucket$\n```\n\n如上只能匹配`bucket`这个单词，如果不适用特殊字符，仅用普通字符，如once，则匹配所有包含once的字符串。这里的字符是普通字符，有的特殊字符，如空格、制表符、标点等，可能就需要用转义符配合来匹配。\n\n```sh\n#匹配制表符，则不是匹配\\t这两个字符的字面意思，若匹配\\t本义，则用\\\\t转义后的表示法。\n^\\t\n```\n\n### 2、字符簇\n\n用方括号构建字符簇，用于更为自由的使用正则表达式来实现我们需要的搜索与验证功能。\n\n```sh\n#元音字符簇\n[AaEeIiOoUu]\n#如上则匹配所有元音字符，但只能匹配一个。\n[a-z]#匹配所有小写字母\n[A-Z]#匹配所有大写字母\n[a-zA-Z]#匹配所有字母\n[0-9]#匹配所有数字\n[0-9\\.\\-]#匹配所有数字，句号和减号\n[ \\f\\r\\t\\n]#匹配所有空白字符\n#字符簇可以结合^和$符号使用，做精准匹配。\n```\n\n`^`在方括号内，表示`非`的意思，用于排除，剔除\n\n```c\n//如下，则表示第一个字符不能是数字\n^[^0-9][0-9]$\n[^a-z] //除了小写字母以外的所有字符 \n[^\\\\\\/\\^] //除了(\\)(/)(^)之外的所有字符 \n[^\\\"\\'] //除了双引号(\")和单引号(')之外的所有字符\n```\n\n特殊字符`.`表示除了`新行`之外的所有字符。\".\"模式，则可以匹配除了空串和仅有”新行“的之外字符串。\n\nPHP正则表达式有一些内置的字符簇。\n\n| 字符簇          | 描述                      |\n| ------------ | ----------------------- |\n| [[:alpha:]]  | 所有字母                    |\n| [[:digit:]]  | 所有数字                    |\n| [[:alnum:]]  | 所有字母和数字                 |\n| [[:space:]]  | 所有空白符                   |\n| [[:upper:]]  | 所有大写字母                  |\n| [[:lower:]]  | 所有小写字母                  |\n| [[:punct:]]  | 所有标点                    |\n| [[:xdigit:]] | 所有十六进制数字，相当于[0-9a-fA-F] |\n\n### 3、确定重复出现\n\n匹配一个单词或一组数字就需要使用可重复的匹配方式，在字符或字符簇后用`{}`来确定重复出现的次数。\n\n| 字符簇              | 描述                        |\n| ---------------- | ------------------------- |\n| ^[a-zA-Z_]$      | 所有字母和下划线                  |\n| ^[[:alpha:]]{3}$ | 所有的3个字母的单词                |\n| ^a$              | 字母a                       |\n| ^a{4}$           | aaaa                      |\n| ^a{2,4}$         | aa,aaa或aaaa               |\n| ^a{1,3}$         | a,aa或aaa                  |\n| ^a{2,}$          | 包含多于两个a的字符串，都是a           |\n| ^a{2,}           | 包含多于两个a的字符串，不要求都是a，但在开头是。 |\n| a{2,}            | 含有两个以上的a的字符串              |\n| \\t{2}            | 两个制表符                     |\n| .{2}             | 所有两个字符，不含新行               |\n\n`{}`表示集合，内部的数字结构，确定结合的范围或者元素次数。\n\n```c\n^[a-zA-Z0-9_]{1,}$ //所有包含一个以上的字母、数字或下划线的字符串 \n^[1-9][0-9]*$ //所有的正整数 \n^\\-{0,1}[0-9]{1,}$ //所有的整数 \n^[-]?[0-9]+\\.?[0-9]+$ //所有的浮点数\n```\n\n如上最后一个较为复杂，`-`表示负号，可选。`.`表示小数点，通过`^`与`$`符号配合，限定数字的结构，浮点数。其实`?`代表的是`{0,1}`表示一个或者没有，所以用`?`代替了`{}`来限定范围个数。\n\n```c\n//一样的\n^\\-?[0-9]{1,}\\.?[0-9]{1,}$\n```\n\n而`*`与`{0,}`相等，表示0个或多个前面的元素。`+`与`{1,}`相等，表示一个或多个前面的内容，如此上面简化为：\n\n```C\n^[a-zA-Z0-9_]+$ //所有包含一个以上的字母、数字或下划线的字符串 \n^[0-9]+$ //所有的正整数 \n^\\-?[0-9]+$ //所有的整数 \n^\\-?[0-9]+\\.?[0-9]*$ //所有的浮点数\n```\n\n## 六、示例\n\n- 简单表达式\n\n  ```shell\n  #单字匹配\n  /a/\n  /7/\n  /M/\n  #多匹配的单字符\n  /a7M/\n  ```\n\n  注意没有字符串联符号，只须在字符后直接写字符就可以。\n\n- 字符匹配\n\n  `.`匹配除`\\n`之外的所有字符。\n\n  ```sh\n  #匹配a开头c结尾的三个字符\n  /a.c/\n  #要匹配文件名，带后缀的，那么.需要转义\n  /filename\\.txt/\n  ```\n\n- 中括号表达式\n\n  方括号`[]`构建字符簇，但是注意两个特殊字符：\n\n  - `]`由于右方括号也是表达式的一个符号，若要匹配原本它自身，则放在字符簇的第一位。\n  - `\\`斜杠符号，要匹配自身，需要转义`\\\\`。\n\n  ```sh\n  #这两种写法等效。格式中空格是不可缺少的。但是指定范围的方式，需要字符的Unicode码大小顺序来写范围。\n  /Chapter [12345]/\n  /Chapter [1-5]/\n\n  #连接符\n  [\\-]\n  [-a-z]\n  [a-z-]\n  #开始值小于连字符，结束字符大于或等于连字符，\n  [!--]\n  [!-~]\n  ```\n\n  - `^`在中括号内表示`非`，用于排除\n\n- 替换和分组\n\n  `|`符号用于替换。如下表示出现在行首或行尾，后面跟一个或两个数字的Chapter或Section：\n\n  ```sh\n  #需要用()来限定需要替换的范围，如果不加()，那么会将Chapter与|后面所有的等价位置，而不是和Section等价。\n  /^(Chapter|Section) [1-9][0-9]{0,1}$/\n  #如上搜索结果会被捕获并存储，有时候多个子表达式，会引起误会。需要清除缓存。\n  /^(?:Chapter|Section) [1-9][0-9]{0,1}$/\n  ```\n\n- 其他示例\n\n  | 正则表达式                                    | 描述                                       |\n  | ---------------------------------------- | ---------------------------------------- |\n  | /\\b([a-z]+)\\1\\b/gi                       | 一个单词连续出现的位置                              |\n  | /(\\w+):\\/\\/(\\[^/:]+)(:\\d\\*)?(\\[^#\\*])/   | 将一个URL解析为协议、域、端口、相对路径                    |\n  | /^(?:Chapter\\|Section)[1-9]\\[0-9]{0,1}$/ | 定位章节位置                                   |\n  | /[-a-z]/                                 | a-z和-                                    |\n  | /ter\\b/                                  | 末尾边界符                                    |\n  | /\\Bapt/                                  | 非边界符                                     |\n  | /Windows(?=95\\|98\\|NT)/                  | 可匹配Windows95或Windows98或WindowsNT，当找到一个匹配后，从Windows后面开始进行下一次的检索匹配。 |\n  | /^\\s*$/                                  | 匹配空行                                     |\n  | /\\d{2}-\\d{5}/                            | 验证由两位数、一个连字符、5位数组成的ID号。                  |\n  | /<\\s\\*(\\S+)(\\s\\[^>]\\*)?>[\\s\\S]\\*<\\s\\*\\/\\1\\s\\*>/ | 匹配HTML标记。                                |\n\n\n**Note:**各个编程语言中的正则表达式可能略微还有差异，如java中特殊元字符可能就需要`\\\\b`来代替`\\b`符号，用双斜杠代替原有的单斜杠。使用中稍加注意。","slug":"正则表达式学习笔记","published":1,"updated":"2017-03-31T09:05:49.395Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ndxce1003d88owkt9mxzqm","content":"<h1 id=\"正则表达式学习笔记\"><a href=\"#正则表达式学习笔记\" class=\"headerlink\" title=\"正则表达式学习笔记\"></a>正则表达式学习笔记</h1><!-- TOC -->\n<ul>\n<li><a href=\"#正则表达式学习笔记\">正则表达式学习笔记</a><ul>\n<li><a href=\"#一简介\">一、简介</a><ul>\n<li><a href=\"#1为什么是用正则表达式\">1、为什么是用正则表达式</a></li>\n<li><a href=\"#2发展历史\">2、发展历史</a></li>\n<li><a href=\"#3应用领域\">3、应用领域</a></li>\n</ul>\n</li>\n<li><a href=\"#二语法\">二、语法</a><ul>\n<li><a href=\"#1普通字符\">1、普通字符</a></li>\n<li><a href=\"#2非打印字符\">2、非打印字符</a></li>\n<li><a href=\"#3特殊字符\">3、特殊字符</a></li>\n<li><a href=\"#4限定符\">4、限定符</a></li>\n<li><a href=\"#5定位符\">5、定位符</a></li>\n<li><a href=\"#6选择和反向引用\">6、选择和反向引用</a></li>\n</ul>\n</li>\n<li><a href=\"#三元字符\">三、元字符</a></li>\n<li><a href=\"#四运算符优先级\">四、运算符优先级</a></li>\n<li><a href=\"#五匹配规则\">五、匹配规则</a><ul>\n<li><a href=\"#1基本模式匹配\">1、基本模式匹配</a></li>\n<li><a href=\"#2字符簇\">2、字符簇</a></li>\n<li><a href=\"#3确定重复出现\">3、确定重复出现</a></li>\n</ul>\n</li>\n<li><a href=\"#六示例\">六、示例</a></li>\n</ul>\n</li>\n</ul>\n<!-- /TOC -->\n<p>Regular Expression正则表达式，是一种文本模式，包括普通字符（a-z，A-Z）和特殊字符（元字符）。</p>\n<p>正则表达式使用打个字符来描述、匹配一系列匹配某个句法规则的字符串。</p>\n<h2 id=\"一、简介\"><a href=\"#一、简介\" class=\"headerlink\" title=\"一、简介\"></a>一、简介</h2><p>初学者一般都不太熟悉正则表达式的专业术语，但一般程序员都会用过<code>*</code>和<code>?</code>两个符号，作为通配符，分别是配多个和单个字符。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">data1.dat</div><div class=\"line\">data2.dat</div><div class=\"line\"><span class=\"comment\">#可以用data?.dat同时匹配如上两个</span></div><div class=\"line\">data3.dat</div><div class=\"line\">data4.dat</div><div class=\"line\">data123.dat</div><div class=\"line\"><span class=\"comment\">#如上，则需要data*.dat才能匹配到data123.dat这个。</span></div></pre></td></tr></table></figure>\n<h3 id=\"1、为什么是用正则表达式\"><a href=\"#1、为什么是用正则表达式\" class=\"headerlink\" title=\"1、为什么是用正则表达式\"></a>1、为什么是用正则表达式</h3><p>典型的搜索和替换操作，需要提供确切的匹配文本。正则表达式相比具有更高的灵活性：</p>\n<ul>\n<li><p>测试字符串内的模式</p>\n<p>例如可以测试输入的字符串，是否包含特定格式，此种称为数据验证。</p>\n</li>\n<li><p>替换文本</p>\n<p>正则表达式来识别特定文本、删除和替换。</p>\n</li>\n<li><p>基于模式匹配从字符串中提取子字符串。</p>\n<p>可以查找文档内或者输入域内的特定字符。</p>\n</li>\n</ul>\n<h3 id=\"2、发展历史\"><a href=\"#2、发展历史\" class=\"headerlink\" title=\"2、发展历史\"></a>2、发展历史</h3><p>正则表达式雏形出现于生理学神经系统的研究中。后来被数学家<code>Stephen Kleene</code>用于描述<code>正则集的代数</code>表示，而形成<code>正则表达式</code>这个术语，虽有有应用于Unix系统的搜索算法，于是开始了计算机领域内的正则表达式的使用。</p>\n<h3 id=\"3、应用领域\"><a href=\"#3、应用领域\" class=\"headerlink\" title=\"3、应用领域\"></a>3、应用领域</h3><p>正则表达式在许多软件中得到广泛应用，类Unix系统、HP系统，php、c#、java等。</p>\n<h2 id=\"二、语法\"><a href=\"#二、语法\" class=\"headerlink\" title=\"二、语法\"></a>二、语法</h2><p>正则表达式(regular expression)描述的是一种字符串匹配模式，可用于检查是否包含、替换或取出符合条件的字符串。</p>\n<ul>\n<li>列表目录时，使用<code>*</code>通配符的做法不属于正则表达式的范畴，因为在RegExp中<code>*</code>的含义不同</li>\n<li>构造正则表达式的方式类似数学表达式。</li>\n</ul>\n<h3 id=\"1、普通字符\"><a href=\"#1、普通字符\" class=\"headerlink\" title=\"1、普通字符\"></a>1、普通字符</h3><p>普通字符是指没有显式指定为元字符的所有可打印和不可打印字符，大小写字母、数字、表达符号和一些其他符号。</p>\n<h3 id=\"2、非打印字符\"><a href=\"#2、非打印字符\" class=\"headerlink\" title=\"2、非打印字符\"></a>2、非打印字符</h3><p>非打印字符也可以是正则表达式的组成部分，如下列转义序列的非打印字符：</p>\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\cx</td>\n<td>匹配由x指明的控制字符。例如，\\cM匹配一个<code>Control-M</code>或<code>回车符</code>。x必须为A-Z(a-z)。否则c将是为原意的`c`字符。</td>\n</tr>\n<tr>\n<td>\\f</td>\n<td>匹配换页符。等价于<code>\\x0c</code>和<code>\\cL</code>。</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td>匹配换行符。等价于<code>\\x0a</code>和<code>\\cJ</code>。</td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>匹配回车符。等价于<code>\\x0d</code>和<code>\\cM</code>。</td>\n</tr>\n<tr>\n<td>\\s</td>\n<td>匹配任何空白字符，包括空格，制表符、换页符等等。等价于[\\f\\n\\r\\t\\v]。</td>\n</tr>\n<tr>\n<td>\\S</td>\n<td>撇陪任何非空白字符。等价于[^ \\f\\n\\t\\v]。</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td>匹配一个制表符。等价于<code>\\x09</code>和<code>\\cl</code>。</td>\n</tr>\n<tr>\n<td>\\v</td>\n<td>匹配一个垂直制表符。等价于<code>\\x0b</code>和<code>\\cK</code>。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"3、特殊字符\"><a href=\"#3、特殊字符\" class=\"headerlink\" title=\"3、特殊字符\"></a>3、特殊字符</h3><p>包含特殊含义的字符，如<code>*</code>符号，通配符，若搜索本身的<code>*</code>符号，就需要转义匹配<code>\\*</code>。特殊字符可以理解为正则表达式的关键字，若要匹配它们自己本身，就要用转义符<code>\\</code>。</p>\n<table>\n<thead>\n<tr>\n<th>特殊字符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\$</td>\n<td>匹配输入字符的结尾位置。如果设置了RegExp对象的Multiline属性，则\\$也匹配<code>\\n</code>或<code>\\r</code>。若要匹配<code>$</code>本身，就要用<code>\\$</code>转义。</td>\n</tr>\n<tr>\n<td>()</td>\n<td>标识一个子表达式的首末位置。子表达式可以获取供以后使用。匹配符号本身用<code>\\(</code>和<code>\\)</code>。</td>\n</tr>\n<tr>\n<td>*</td>\n<td>匹配前面的子表达式零次或多次。匹配自身用<code>\\*</code>。</td>\n</tr>\n<tr>\n<td>+</td>\n<td>匹配前面的子表达式一次或多次。匹配自身用<code>\\+</code>。</td>\n</tr>\n<tr>\n<td>.</td>\n<td>匹配除换行符<code>\\n</code>之外的任何单字符。匹配自身用<code>\\.</code>。</td>\n</tr>\n<tr>\n<td>[</td>\n<td>标记中括号表达式的开始。匹配自身用<code>\\[</code>。</td>\n</tr>\n<tr>\n<td>?</td>\n<td>匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。匹配自身用<code>\\?</code>。</td>\n</tr>\n<tr>\n<td>\\</td>\n<td>将下一个字符标记为特殊字符、原义字符、向后引用、八进制转义等等。如<code>n</code>匹配<code>n</code>，<code>\\n</code>匹配换行符。<code>\\\\</code>匹配<code>\\</code>。</td>\n</tr>\n<tr>\n<td>^</td>\n<td>匹配输入字符串的开始位置，除非在方括号表达式中使用，此时他表示不接受该字符集合。匹配自身用<code>\\^</code>。</td>\n</tr>\n<tr>\n<td>{</td>\n<td>标记限定符表达式的开始。匹配自身用<code>{</code>。</td>\n</tr>\n<tr>\n<td>\\</td>\n<td></td>\n<td>之名亮相之间的一个选择。匹配自身用`\\</td>\n<td>`。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"4、限定符\"><a href=\"#4、限定符\" class=\"headerlink\" title=\"4、限定符\"></a>4、限定符</h3><p>限定符用来指定正则表达式的一个给顶组件，必须要出现多少次才能满足匹配。有一下六种</p>\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>*</td>\n<td>匹配前面的子表达式零次或多次。例如，<code>zo*</code>能匹配”z”以及”zoo”，*等价于{0,}。</td>\n</tr>\n<tr>\n<td>+</td>\n<td>匹配前面的子表达式一次或多次。例如，<code>zo+</code>能匹配”zo”以及”zoo”，不能匹配”z”。+等价于{1,}。</td>\n</tr>\n<tr>\n<td>?</td>\n<td>匹配前面的子表达式零次或一次。例如，<code>do(es)?</code>可匹配”do”或”does”中的”do”。?等价于{0,1}。</td>\n</tr>\n<tr>\n<td>{n}</td>\n<td>n是一个非负整数。匹配确定的n次。例如，<code>o{2}</code>不能匹配”Bob”中的o，能匹配”food”中的两个o。</td>\n</tr>\n<tr>\n<td>{n,}</td>\n<td>你是一个非负整数。至少匹配n次。例如，<code>o{2,}</code>不能匹配”Bob”中的o,能匹配”foooood”中所有的o。<code>o{1,}</code>等价于<code>o+</code>。<code>o{0,}</code>等价于<code>o*</code>。</td>\n</tr>\n<tr>\n<td>{n,m}</td>\n<td>m、n均为非负整数。n&lt;=m。最少匹配n次切最多匹配m次。例如，<code>o{1,3}</code>将匹配”foooood”中的前三个o。<code>o{0,1}</code>等价于<code>o?</code>。==注意逗号与数字间不能有空格==</td>\n</tr>\n</tbody>\n</table>\n<p>章节编号亦可能大于9，正则表达式匹配正解标题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/Chapter [1-9](0-9)*/</div></pre></td></tr></table></figure>\n<p><strong>*、+和?限定符都是贪婪的，尽可能多的匹配文字，在其后加上一个?则可实现非贪婪或最小匹配</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#匹配&lt;开始到&gt;结束之间的所有内容。</span></div><div class=\"line\">/&lt;.*&gt;/</div></pre></td></tr></table></figure>\n<h3 id=\"5、定位符\"><a href=\"#5、定位符\" class=\"headerlink\" title=\"5、定位符\"></a>5、定位符</h3><p>定位符可以是正则表达式固定到行首或行尾。用于描述字符串或单词的边界，<code>^</code>和<code>$</code>分别表示字符串的开始和结束。<code>\\b</code>表示单词的前或后边界，<code>\\B</code>表示非单词的边界。</p>\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>^</td>\n<td>匹配输入字符的开始位置。如果RegExp设置了Multiple属性，^还会与\\n或\\r之后的位置匹配。</td>\n</tr>\n<tr>\n<td>\\$</td>\n<td>匹配输入字符串的结尾位置。若RegExp设置了Multiple属性，$还会匹配\\n或\\r之前的位置。</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>匹配一个字边界，即字与空格之间的位置。</td>\n</tr>\n<tr>\n<td>\\B</td>\n<td>非字边界匹配。</td>\n</tr>\n</tbody>\n</table>\n<p><strong>注意</strong>：不能将限定符与定位点一起使用。由于在紧靠换行或者字边界的前面或后面不能有==<strong>一个以上</strong>==位置，因此不允许诸如<code>^*</code>之类的表达式。</p>\n<ul>\n<li>匹配一行文本开始处的文本，在RegExp开始使用<code>^</code>字符。这与<code>()</code>内的<code>^</code>意思不同。</li>\n<li>匹配一行文本结束处的文本，在RegExp结尾使用<code>$</code>字符。</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#匹配章节标题，其只含两个尾随数字</span></div><div class=\"line\">/^Chapter [1-9][0-9]&#123;0,1&#125;/</div><div class=\"line\"><span class=\"comment\">#匹配真正标题，而非包含交叉引用，则标题独占一行。</span></div><div class=\"line\">/^Chapter [1-9][0-9]&#123;0,1&#125;$/</div><div class=\"line\"><span class=\"comment\">#字符边界匹配，以下两个分别匹配Chapter的前三和后三个字符。</span></div><div class=\"line\">/\\bCha/</div><div class=\"line\">/ter\\b/</div><div class=\"line\"><span class=\"comment\">#非字符边界，匹配Chapter中的apt，而不匹配边界的aptitude中的apt</span></div><div class=\"line\">/\\Bapt/</div></pre></td></tr></table></figure>\n<h3 id=\"6、选择和反向引用\"><a href=\"#6、选择和反向引用\" class=\"headerlink\" title=\"6、选择和反向引用\"></a>6、选择和反向引用</h3><p>用圆括号<code>()</code>括起来所有选择项，相邻选择项用<code>|</code>分隔。如此有副作用，相关的匹配会被缓存，则用<code>?:</code>放在第一选项前来消除副作用。</p>\n<p><strong><code>?:</code>、<code>?=</code>、<code>?!</code>属于非捕获元，而<code>?=</code>还表示正向预查，在任何开始匹配圆括号内正则表达式模式的位置来匹配搜索字符串。<code>?!</code>反向预查，在任何开始不匹配该正则表达式模式的位置来匹配搜索字符串。</strong></p>\n<p>正则表达式模式添加<code>()</code>会导致相关匹配存储到一个临时缓冲区，所有匹配子项都按照正则模式从左到右存储。1开始到99个子表达式缓存。缓冲区都可以用<code>\\n</code>访问，其中<code>n</code>表示特定缓冲区的一位或两位十进制数。</p>\n<p>反向引用，常用相邻单词的匹配，</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Is is the cost of of gasoline going up up?</div><div class=\"line\"><span class=\"comment\">#如上句子包含重复单词，若不需要重复单词而定位到该句子</span></div><div class=\"line\">/\\b([a-z]+) \\1\\b/gi</div><div class=\"line\"><span class=\"comment\">#如上捕获表达式，[a-z]+指定一个或多个字母。单词的第二个匹配项正好由括号表达式匹配。\\1指定第一个字匹配项。\\b保证了只检测整个单词。全局标记g和忽略大小写标记i</span></div></pre></td></tr></table></figure>\n<p>如上示例中使用到全局标记<code>g</code>和大小写忽略标记<code>i</code></p>\n<p>反向引用还可以分解资源指示符<code>URI</code>组件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://www.google.com:80/android/index.html</div><div class=\"line\"><span class=\"comment\">#使用正则表达式</span></div><div class=\"line\">/(\\w+):\\/\\/([^/:]+)(:\\d*)?([^<span class=\"comment\"># ])/</span></div></pre></td></tr></table></figure>\n<p>说明：第一个括号用于获取http协议部分，在://之前。第二个表达式，捕获域名地址，匹配/和:之外的一个或多个字符。第三个捕获端口号，:后面的0个或多个只能重复一次该表达式，最后的括号补货地址路径/符号的页面信息。</p>\n<h2 id=\"三、元字符\"><a href=\"#三、元字符\" class=\"headerlink\" title=\"三、元字符\"></a>三、元字符</h2><p>下表包含元字符的完整列表以及他们在正则表达式上下文中的行为：</p>\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\</td>\n<td>将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、或一个八进制转义符。例如，’n’ 匹配字符 “n”。’\\n’ 匹配一个换行符。序列 ‘\\‘ 匹配 “\\” 而 “(“ 则匹配 “(“。</td>\n</tr>\n<tr>\n<td>^</td>\n<td>匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 ‘\\n’ 或 ‘\\r’ 之后的位置。</td>\n</tr>\n<tr>\n<td>\\$</td>\n<td>匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 ‘\\n’ 或 ‘\\r’ 之前的位置。</td>\n</tr>\n<tr>\n<td>*</td>\n<td>匹配前面的子表达式零次或多次。例如，zo<em> 能匹配 “z” 以及 “zoo”。</em> 等价于{0,}。</td>\n</tr>\n<tr>\n<td>+</td>\n<td>匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td>\n</tr>\n<tr>\n<td>?</td>\n<td>匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 或 “does” 中的”do” 。? 等价于 {0,1}。</td>\n</tr>\n<tr>\n<td>{n}</td>\n<td>n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td>\n</tr>\n<tr>\n<td>{n,}</td>\n<td>n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。</td>\n</tr>\n<tr>\n<td>{n,m}</td>\n<td>m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</td>\n</tr>\n<tr>\n<td>?</td>\n<td>当该字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 “oooo”，’o+?’ 将匹配单个 “o”，而 ‘o+’ 将匹配所有 ‘o’。</td>\n</tr>\n<tr>\n<td>.</td>\n<td>匹配除 “\\n” 之外的任何单个字符。要匹配包括 ‘\\n’ 在内的任何字符，请使用像”**(.</td>\n</tr>\n<tr>\n<td>(pattern)</td>\n<td>匹配 pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在VBScript 中使用 SubMatches 集合，在JScript 中则使用 $0…$9 属性。要匹配圆括号字符，请使用 ‘(‘ 或 ‘)‘。</td>\n</tr>\n<tr>\n<td>(?:pattern)</td>\n<td>匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用 “或” 字符 (</td>\n</tr>\n<tr>\n<td>(?=pattern)</td>\n<td>正向预查，在任何匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，’Windows (?=95</td>\n</tr>\n<tr>\n<td>(?!pattern)</td>\n<td>负向预查，在任何不匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如’Windows (?!95</td>\n</tr>\n<tr>\n<td>x</td>\n<td>y</td>\n</tr>\n<tr>\n<td>[xyz]</td>\n<td>字符集合。匹配所包含的任意一个字符。例如， ‘[abc]’ 可以匹配 “plain” 中的 ‘a’。</td>\n</tr>\n<tr>\n<td>[^xyz]</td>\n<td>负值字符集合。匹配未包含的任意字符。例如， ‘[^abc]’ 可以匹配 “plain” 中的’p’、’l’、’i’、’n’。</td>\n</tr>\n<tr>\n<td>[a-z]</td>\n<td>字符范围。匹配指定范围内的任意字符。例如，’[a-z]’ 可以匹配 ‘a’ 到 ‘z’ 范围内的任意小写字母字符。</td>\n</tr>\n<tr>\n<td>[^a-z]</td>\n<td>负值字符范围。匹配任何不在指定范围内的任意字符。例如，’[^a-z]’ 可以匹配任何不在 ‘a’ 到 ‘z’ 范围内的任意字符。</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>匹配一个单词边界，也就是指单词和空格间的位置。例如， ‘er\\b’ 可以匹配”never” 中的 ‘er’，但不能匹配 “verb” 中的 ‘er’。</td>\n</tr>\n<tr>\n<td>\\B</td>\n<td>匹配非单词边界。’er\\B’ 能匹配 “verb” 中的 ‘er’，但不能匹配 “never” 中的 ‘er’。</td>\n</tr>\n<tr>\n<td>\\cx</td>\n<td>匹配由 x 指明的控制字符。例如， \\cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。</td>\n</tr>\n<tr>\n<td>\\d</td>\n<td>匹配一个数字字符。等价于 [0-9]。</td>\n</tr>\n<tr>\n<td>\\D</td>\n<td>匹配一个非数字字符。等价于 [^0-9]。</td>\n</tr>\n<tr>\n<td>\\f</td>\n<td>匹配一个换页符。等价于 \\x0c 和 \\cL。</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td>匹配一个换行符。等价于 \\x0a 和 \\cJ。</td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>匹配一个回车符。等价于 \\x0d 和 \\cM。</td>\n</tr>\n<tr>\n<td>\\s</td>\n<td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \\f\\n\\r\\t\\v]。</td>\n</tr>\n<tr>\n<td>\\S</td>\n<td>匹配任何非空白字符。等价于 [^ \\f\\n\\r\\t\\v]。</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td>匹配一个制表符。等价于 \\x09 和 \\cI。</td>\n</tr>\n<tr>\n<td>\\v</td>\n<td>匹配一个垂直制表符。等价于 \\x0b 和 \\cK。</td>\n</tr>\n<tr>\n<td>\\w</td>\n<td>匹配包括下划线的任何单词字符。等价于’[A-Za-z0-9_]’。</td>\n</tr>\n<tr>\n<td>\\W</td>\n<td>匹配任何非单词字符。等价于 ‘[^A-Za-z0-9_]’。</td>\n</tr>\n<tr>\n<td>\\xn</td>\n<td>匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，’\\x41’ 匹配 “A”。’\\x041’ 则等价于 ‘\\x04’ &amp; “1”。正则表达式中可以使用 ASCII 编码。</td>\n</tr>\n<tr>\n<td>\\num</td>\n<td>匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，’(.)\\1’ 匹配两个连续的相同字符。</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td>标识一个八进制转义值或一个向后引用。如果 \\n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字 (0-7)，则 n 为一个八进制转义值。</td>\n</tr>\n<tr>\n<td>\\nm</td>\n<td>标识一个八进制转义值或一个向后引用。如果 \\nm 之前至少有 nm 个获得子表达式，则 nm 为向后引用。如果 \\nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的向后引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字 (0-7)，则 \\nm 将匹配八进制转义值 nm。</td>\n</tr>\n<tr>\n<td>\\nml</td>\n<td>如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml。</td>\n</tr>\n<tr>\n<td>\\un</td>\n<td>匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如， \\u00A9 匹配版权符号 (?)。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"四、运算符优先级\"><a href=\"#四、运算符优先级\" class=\"headerlink\" title=\"四、运算符优先级\"></a>四、运算符优先级</h2><p>正则表达式从左到右进行计算，类似算术运算，遵循优先级：</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\</td>\n<td>转义符</td>\n</tr>\n<tr>\n<td>(),(?:),(?=),[]</td>\n<td>圆括号和方括号</td>\n</tr>\n<tr>\n<td>*,+,?,{n},{n,},{n,m}</td>\n<td>限定符</td>\n</tr>\n<tr>\n<td>^,$,\\任何元字符、任何字符</td>\n<td>定位点和序列(即：位置和顺序)</td>\n</tr>\n<tr>\n<td>\\</td>\n<td></td>\n<td>替换，”或”操作，字符具有高于替换运算符的优先级，使得”m\\</td>\n<td>food”匹配”m”或”food”。若要匹配”mood”或”food”，请使用括号创建子表达式，从而产生”(m\\</td>\n<td>f)ood”。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"五、匹配规则\"><a href=\"#五、匹配规则\" class=\"headerlink\" title=\"五、匹配规则\"></a>五、匹配规则</h2><h3 id=\"1、基本模式匹配\"><a href=\"#1、基本模式匹配\" class=\"headerlink\" title=\"1、基本模式匹配\"></a>1、基本模式匹配</h3><p>模式是正则表达式最基本的元素，它们是一组描述字符串特征的字符。可以很简单，有普通字符组成，也可以很复杂由特殊字符构成。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">^once</div></pre></td></tr></table></figure>\n<p>如上模式，包含特殊字符<code>^</code>表示该模式只匹配以<code>once</code>开头的字符串。”once upon a time”匹配，”There once was a man from NewYork”则不匹配。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bucket$</div></pre></td></tr></table></figure>\n<p><code>$</code>符号表示结尾，如上匹配”Who kept all of this cash in a bucket”，则不匹配”buckets”。如果<code>^</code>和<code>$</code>同时使用，则精准匹配。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">^bucket$</div></pre></td></tr></table></figure>\n<p>如上只能匹配<code>bucket</code>这个单词，如果不适用特殊字符，仅用普通字符，如once，则匹配所有包含once的字符串。这里的字符是普通字符，有的特殊字符，如空格、制表符、标点等，可能就需要用转义符配合来匹配。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#匹配制表符，则不是匹配\\t这两个字符的字面意思，若匹配\\t本义，则用\\\\t转义后的表示法。</span></div><div class=\"line\">^\\t</div></pre></td></tr></table></figure>\n<h3 id=\"2、字符簇\"><a href=\"#2、字符簇\" class=\"headerlink\" title=\"2、字符簇\"></a>2、字符簇</h3><p>用方括号构建字符簇，用于更为自由的使用正则表达式来实现我们需要的搜索与验证功能。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#元音字符簇</span></div><div class=\"line\">[AaEeIiOoUu]</div><div class=\"line\"><span class=\"comment\">#如上则匹配所有元音字符，但只能匹配一个。</span></div><div class=\"line\">[a-z]<span class=\"comment\">#匹配所有小写字母</span></div><div class=\"line\">[A-Z]<span class=\"comment\">#匹配所有大写字母</span></div><div class=\"line\">[a-zA-Z]<span class=\"comment\">#匹配所有字母</span></div><div class=\"line\">[0-9]<span class=\"comment\">#匹配所有数字</span></div><div class=\"line\">[0-9\\.\\-]<span class=\"comment\">#匹配所有数字，句号和减号</span></div><div class=\"line\">[ \\f\\r\\t\\n]<span class=\"comment\">#匹配所有空白字符</span></div><div class=\"line\"><span class=\"comment\">#字符簇可以结合^和$符号使用，做精准匹配。</span></div></pre></td></tr></table></figure>\n<p><code>^</code>在方括号内，表示<code>非</code>的意思，用于排除，剔除</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">//如下，则表示第一个字符不能是数字</div><div class=\"line\">^[^0-9][0-9]$</div><div class=\"line\">[^a-z] //除了小写字母以外的所有字符 </div><div class=\"line\">[^\\\\\\/\\^] //除了(\\)(/)(^)之外的所有字符 </div><div class=\"line\">[^\\\"\\'] //除了双引号(\")和单引号(')之外的所有字符</div></pre></td></tr></table></figure>\n<p>特殊字符<code>.</code>表示除了<code>新行</code>之外的所有字符。”.”模式，则可以匹配除了空串和仅有”新行“的之外字符串。</p>\n<p>PHP正则表达式有一些内置的字符簇。</p>\n<table>\n<thead>\n<tr>\n<th>字符簇</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[[:alpha:]]</td>\n<td>所有字母</td>\n</tr>\n<tr>\n<td>[[:digit:]]</td>\n<td>所有数字</td>\n</tr>\n<tr>\n<td>[[:alnum:]]</td>\n<td>所有字母和数字</td>\n</tr>\n<tr>\n<td>[[:space:]]</td>\n<td>所有空白符</td>\n</tr>\n<tr>\n<td>[[:upper:]]</td>\n<td>所有大写字母</td>\n</tr>\n<tr>\n<td>[[:lower:]]</td>\n<td>所有小写字母</td>\n</tr>\n<tr>\n<td>[[:punct:]]</td>\n<td>所有标点</td>\n</tr>\n<tr>\n<td>[[:xdigit:]]</td>\n<td>所有十六进制数字，相当于[0-9a-fA-F]</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"3、确定重复出现\"><a href=\"#3、确定重复出现\" class=\"headerlink\" title=\"3、确定重复出现\"></a>3、确定重复出现</h3><p>匹配一个单词或一组数字就需要使用可重复的匹配方式，在字符或字符簇后用<code>{}</code>来确定重复出现的次数。</p>\n<table>\n<thead>\n<tr>\n<th>字符簇</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>^[a-zA-Z_]$</td>\n<td>所有字母和下划线</td>\n</tr>\n<tr>\n<td>^[[:alpha:]]{3}$</td>\n<td>所有的3个字母的单词</td>\n</tr>\n<tr>\n<td>^a$</td>\n<td>字母a</td>\n</tr>\n<tr>\n<td>^a{4}$</td>\n<td>aaaa</td>\n</tr>\n<tr>\n<td>^a{2,4}$</td>\n<td>aa,aaa或aaaa</td>\n</tr>\n<tr>\n<td>^a{1,3}$</td>\n<td>a,aa或aaa</td>\n</tr>\n<tr>\n<td>^a{2,}$</td>\n<td>包含多于两个a的字符串，都是a</td>\n</tr>\n<tr>\n<td>^a{2,}</td>\n<td>包含多于两个a的字符串，不要求都是a，但在开头是。</td>\n</tr>\n<tr>\n<td>a{2,}</td>\n<td>含有两个以上的a的字符串</td>\n</tr>\n<tr>\n<td>\\t{2}</td>\n<td>两个制表符</td>\n</tr>\n<tr>\n<td>.{2}</td>\n<td>所有两个字符，不含新行</td>\n</tr>\n</tbody>\n</table>\n<p><code>{}</code>表示集合，内部的数字结构，确定结合的范围或者元素次数。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">^[a-zA-Z0<span class=\"number\">-9</span>_]&#123;<span class=\"number\">1</span>,&#125;$ <span class=\"comment\">//所有包含一个以上的字母、数字或下划线的字符串 </span></div><div class=\"line\">^[<span class=\"number\">1</span><span class=\"number\">-9</span>][<span class=\"number\">0</span><span class=\"number\">-9</span>]*$ <span class=\"comment\">//所有的正整数 </span></div><div class=\"line\">^\\-&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>&#125;[<span class=\"number\">0</span><span class=\"number\">-9</span>]&#123;<span class=\"number\">1</span>,&#125;$ <span class=\"comment\">//所有的整数 </span></div><div class=\"line\">^[-]?[<span class=\"number\">0</span><span class=\"number\">-9</span>]+\\.?[<span class=\"number\">0</span><span class=\"number\">-9</span>]+$ <span class=\"comment\">//所有的浮点数</span></div></pre></td></tr></table></figure>\n<p>如上最后一个较为复杂，<code>-</code>表示负号，可选。<code>.</code>表示小数点，通过<code>^</code>与<code>$</code>符号配合，限定数字的结构，浮点数。其实<code>?</code>代表的是<code>{0,1}</code>表示一个或者没有，所以用<code>?</code>代替了<code>{}</code>来限定范围个数。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//一样的</span></div><div class=\"line\">^\\-?[<span class=\"number\">0</span><span class=\"number\">-9</span>]&#123;<span class=\"number\">1</span>,&#125;\\.?[<span class=\"number\">0</span><span class=\"number\">-9</span>]&#123;<span class=\"number\">1</span>,&#125;$</div></pre></td></tr></table></figure>\n<p>而<code>*</code>与<code>{0,}</code>相等，表示0个或多个前面的元素。<code>+</code>与<code>{1,}</code>相等，表示一个或多个前面的内容，如此上面简化为：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">^[a-zA-Z0<span class=\"number\">-9</span>_]+$ <span class=\"comment\">//所有包含一个以上的字母、数字或下划线的字符串 </span></div><div class=\"line\">^[<span class=\"number\">0</span><span class=\"number\">-9</span>]+$ <span class=\"comment\">//所有的正整数 </span></div><div class=\"line\">^\\-?[<span class=\"number\">0</span><span class=\"number\">-9</span>]+$ <span class=\"comment\">//所有的整数 </span></div><div class=\"line\">^\\-?[<span class=\"number\">0</span><span class=\"number\">-9</span>]+\\.?[<span class=\"number\">0</span><span class=\"number\">-9</span>]*$ <span class=\"comment\">//所有的浮点数</span></div></pre></td></tr></table></figure>\n<h2 id=\"六、示例\"><a href=\"#六、示例\" class=\"headerlink\" title=\"六、示例\"></a>六、示例</h2><ul>\n<li><p>简单表达式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">#单字匹配</div><div class=\"line\">/a/</div><div class=\"line\">/7/</div><div class=\"line\">/M/</div><div class=\"line\">#多匹配的单字符</div><div class=\"line\">/a7M/</div></pre></td></tr></table></figure>\n<p>注意没有字符串联符号，只须在字符后直接写字符就可以。</p>\n</li>\n<li><p>字符匹配</p>\n<p><code>.</code>匹配除<code>\\n</code>之外的所有字符。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#匹配a开头c结尾的三个字符</span></div><div class=\"line\">/a.c/</div><div class=\"line\"><span class=\"comment\">#要匹配文件名，带后缀的，那么.需要转义</span></div><div class=\"line\">/filename\\.txt/</div></pre></td></tr></table></figure>\n</li>\n<li><p>中括号表达式</p>\n<p>方括号<code>[]</code>构建字符簇，但是注意两个特殊字符：</p>\n<ul>\n<li><code>]</code>由于右方括号也是表达式的一个符号，若要匹配原本它自身，则放在字符簇的第一位。</li>\n<li><code>\\</code>斜杠符号，要匹配自身，需要转义<code>\\\\</code>。</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#这两种写法等效。格式中空格是不可缺少的。但是指定范围的方式，需要字符的Unicode码大小顺序来写范围。</span></div><div class=\"line\">/Chapter [12345]/</div><div class=\"line\">/Chapter [1-5]/</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#连接符</span></div><div class=\"line\">[\\-]</div><div class=\"line\">[<span class=\"_\">-a</span>-z]</div><div class=\"line\">[a-z-]</div><div class=\"line\"><span class=\"comment\">#开始值小于连字符，结束字符大于或等于连字符，</span></div><div class=\"line\">[!--]</div><div class=\"line\">[!-~]</div></pre></td></tr></table></figure>\n<ul>\n<li><code>^</code>在中括号内表示<code>非</code>，用于排除</li>\n</ul>\n</li>\n<li><p>替换和分组</p>\n<p><code>|</code>符号用于替换。如下表示出现在行首或行尾，后面跟一个或两个数字的Chapter或Section：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#需要用()来限定需要替换的范围，如果不加()，那么会将Chapter与|后面所有的等价位置，而不是和Section等价。</span></div><div class=\"line\">/^(Chapter|Section) [1-9][0-9]&#123;0,1&#125;$/</div><div class=\"line\"><span class=\"comment\">#如上搜索结果会被捕获并存储，有时候多个子表达式，会引起误会。需要清除缓存。</span></div><div class=\"line\">/^(?:Chapter|Section) [1-9][0-9]&#123;0,1&#125;$/</div></pre></td></tr></table></figure>\n</li>\n<li><p>其他示例</p>\n<p>| 正则表达式                                    | 描述                                       |<br>| —————————————- | —————————————- |<br>| /\\b([a-z]+)\\1\\b/gi                       | 一个单词连续出现的位置                              |<br>| /(\\w+):\\/\\/([^/:]+)(:\\d*)?([^#*])/   | 将一个URL解析为协议、域、端口、相对路径                    |<br>| /^(?:Chapter|Section)[1-9][0-9]{0,1}$/ | 定位章节位置                                   |<br>| /[-a-z]/                                 | a-z和-                                    |<br>| /ter\\b/                                  | 末尾边界符                                    |<br>| /\\Bapt/                                  | 非边界符                                     |<br>| /Windows(?=95|98|NT)/                  | 可匹配Windows95或Windows98或WindowsNT，当找到一个匹配后，从Windows后面开始进行下一次的检索匹配。 |<br>| /^\\s<em>$/                                  | 匹配空行                                     |<br>| /\\d{2}-\\d{5}/                            | 验证由两位数、一个连字符、5位数组成的ID号。                  |<br>| /&lt;\\s\\</em>(\\S+)(\\s[^&gt;]*)?&gt;[\\s\\S]*&lt;\\s*\\/\\1\\s*&gt;/ | 匹配HTML标记。                                |</p>\n</li>\n</ul>\n<p><strong>Note:</strong>各个编程语言中的正则表达式可能略微还有差异，如java中特殊元字符可能就需要<code>\\\\b</code>来代替<code>\\b</code>符号，用双斜杠代替原有的单斜杠。使用中稍加注意。</p>\n","excerpt":"","more":"<h1 id=\"正则表达式学习笔记\"><a href=\"#正则表达式学习笔记\" class=\"headerlink\" title=\"正则表达式学习笔记\"></a>正则表达式学习笔记</h1><!-- TOC -->\n<ul>\n<li><a href=\"#正则表达式学习笔记\">正则表达式学习笔记</a><ul>\n<li><a href=\"#一简介\">一、简介</a><ul>\n<li><a href=\"#1为什么是用正则表达式\">1、为什么是用正则表达式</a></li>\n<li><a href=\"#2发展历史\">2、发展历史</a></li>\n<li><a href=\"#3应用领域\">3、应用领域</a></li>\n</ul>\n</li>\n<li><a href=\"#二语法\">二、语法</a><ul>\n<li><a href=\"#1普通字符\">1、普通字符</a></li>\n<li><a href=\"#2非打印字符\">2、非打印字符</a></li>\n<li><a href=\"#3特殊字符\">3、特殊字符</a></li>\n<li><a href=\"#4限定符\">4、限定符</a></li>\n<li><a href=\"#5定位符\">5、定位符</a></li>\n<li><a href=\"#6选择和反向引用\">6、选择和反向引用</a></li>\n</ul>\n</li>\n<li><a href=\"#三元字符\">三、元字符</a></li>\n<li><a href=\"#四运算符优先级\">四、运算符优先级</a></li>\n<li><a href=\"#五匹配规则\">五、匹配规则</a><ul>\n<li><a href=\"#1基本模式匹配\">1、基本模式匹配</a></li>\n<li><a href=\"#2字符簇\">2、字符簇</a></li>\n<li><a href=\"#3确定重复出现\">3、确定重复出现</a></li>\n</ul>\n</li>\n<li><a href=\"#六示例\">六、示例</a></li>\n</ul>\n</li>\n</ul>\n<!-- /TOC -->\n<p>Regular Expression正则表达式，是一种文本模式，包括普通字符（a-z，A-Z）和特殊字符（元字符）。</p>\n<p>正则表达式使用打个字符来描述、匹配一系列匹配某个句法规则的字符串。</p>\n<h2 id=\"一、简介\"><a href=\"#一、简介\" class=\"headerlink\" title=\"一、简介\"></a>一、简介</h2><p>初学者一般都不太熟悉正则表达式的专业术语，但一般程序员都会用过<code>*</code>和<code>?</code>两个符号，作为通配符，分别是配多个和单个字符。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">data1.dat</div><div class=\"line\">data2.dat</div><div class=\"line\"><span class=\"comment\">#可以用data?.dat同时匹配如上两个</span></div><div class=\"line\">data3.dat</div><div class=\"line\">data4.dat</div><div class=\"line\">data123.dat</div><div class=\"line\"><span class=\"comment\">#如上，则需要data*.dat才能匹配到data123.dat这个。</span></div></pre></td></tr></table></figure>\n<h3 id=\"1、为什么是用正则表达式\"><a href=\"#1、为什么是用正则表达式\" class=\"headerlink\" title=\"1、为什么是用正则表达式\"></a>1、为什么是用正则表达式</h3><p>典型的搜索和替换操作，需要提供确切的匹配文本。正则表达式相比具有更高的灵活性：</p>\n<ul>\n<li><p>测试字符串内的模式</p>\n<p>例如可以测试输入的字符串，是否包含特定格式，此种称为数据验证。</p>\n</li>\n<li><p>替换文本</p>\n<p>正则表达式来识别特定文本、删除和替换。</p>\n</li>\n<li><p>基于模式匹配从字符串中提取子字符串。</p>\n<p>可以查找文档内或者输入域内的特定字符。</p>\n</li>\n</ul>\n<h3 id=\"2、发展历史\"><a href=\"#2、发展历史\" class=\"headerlink\" title=\"2、发展历史\"></a>2、发展历史</h3><p>正则表达式雏形出现于生理学神经系统的研究中。后来被数学家<code>Stephen Kleene</code>用于描述<code>正则集的代数</code>表示，而形成<code>正则表达式</code>这个术语，虽有有应用于Unix系统的搜索算法，于是开始了计算机领域内的正则表达式的使用。</p>\n<h3 id=\"3、应用领域\"><a href=\"#3、应用领域\" class=\"headerlink\" title=\"3、应用领域\"></a>3、应用领域</h3><p>正则表达式在许多软件中得到广泛应用，类Unix系统、HP系统，php、c#、java等。</p>\n<h2 id=\"二、语法\"><a href=\"#二、语法\" class=\"headerlink\" title=\"二、语法\"></a>二、语法</h2><p>正则表达式(regular expression)描述的是一种字符串匹配模式，可用于检查是否包含、替换或取出符合条件的字符串。</p>\n<ul>\n<li>列表目录时，使用<code>*</code>通配符的做法不属于正则表达式的范畴，因为在RegExp中<code>*</code>的含义不同</li>\n<li>构造正则表达式的方式类似数学表达式。</li>\n</ul>\n<h3 id=\"1、普通字符\"><a href=\"#1、普通字符\" class=\"headerlink\" title=\"1、普通字符\"></a>1、普通字符</h3><p>普通字符是指没有显式指定为元字符的所有可打印和不可打印字符，大小写字母、数字、表达符号和一些其他符号。</p>\n<h3 id=\"2、非打印字符\"><a href=\"#2、非打印字符\" class=\"headerlink\" title=\"2、非打印字符\"></a>2、非打印字符</h3><p>非打印字符也可以是正则表达式的组成部分，如下列转义序列的非打印字符：</p>\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\cx</td>\n<td>匹配由x指明的控制字符。例如，\\cM匹配一个<code>Control-M</code>或<code>回车符</code>。x必须为A-Z(a-z)。否则c将是为原意的`c`字符。</td>\n</tr>\n<tr>\n<td>\\f</td>\n<td>匹配换页符。等价于<code>\\x0c</code>和<code>\\cL</code>。</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td>匹配换行符。等价于<code>\\x0a</code>和<code>\\cJ</code>。</td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>匹配回车符。等价于<code>\\x0d</code>和<code>\\cM</code>。</td>\n</tr>\n<tr>\n<td>\\s</td>\n<td>匹配任何空白字符，包括空格，制表符、换页符等等。等价于[\\f\\n\\r\\t\\v]。</td>\n</tr>\n<tr>\n<td>\\S</td>\n<td>撇陪任何非空白字符。等价于[^ \\f\\n\\t\\v]。</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td>匹配一个制表符。等价于<code>\\x09</code>和<code>\\cl</code>。</td>\n</tr>\n<tr>\n<td>\\v</td>\n<td>匹配一个垂直制表符。等价于<code>\\x0b</code>和<code>\\cK</code>。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"3、特殊字符\"><a href=\"#3、特殊字符\" class=\"headerlink\" title=\"3、特殊字符\"></a>3、特殊字符</h3><p>包含特殊含义的字符，如<code>*</code>符号，通配符，若搜索本身的<code>*</code>符号，就需要转义匹配<code>\\*</code>。特殊字符可以理解为正则表达式的关键字，若要匹配它们自己本身，就要用转义符<code>\\</code>。</p>\n<table>\n<thead>\n<tr>\n<th>特殊字符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\$</td>\n<td>匹配输入字符的结尾位置。如果设置了RegExp对象的Multiline属性，则\\$也匹配<code>\\n</code>或<code>\\r</code>。若要匹配<code>$</code>本身，就要用<code>\\$</code>转义。</td>\n</tr>\n<tr>\n<td>()</td>\n<td>标识一个子表达式的首末位置。子表达式可以获取供以后使用。匹配符号本身用<code>\\(</code>和<code>\\)</code>。</td>\n</tr>\n<tr>\n<td>*</td>\n<td>匹配前面的子表达式零次或多次。匹配自身用<code>\\*</code>。</td>\n</tr>\n<tr>\n<td>+</td>\n<td>匹配前面的子表达式一次或多次。匹配自身用<code>\\+</code>。</td>\n</tr>\n<tr>\n<td>.</td>\n<td>匹配除换行符<code>\\n</code>之外的任何单字符。匹配自身用<code>\\.</code>。</td>\n</tr>\n<tr>\n<td>[</td>\n<td>标记中括号表达式的开始。匹配自身用<code>\\[</code>。</td>\n</tr>\n<tr>\n<td>?</td>\n<td>匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。匹配自身用<code>\\?</code>。</td>\n</tr>\n<tr>\n<td>\\</td>\n<td>将下一个字符标记为特殊字符、原义字符、向后引用、八进制转义等等。如<code>n</code>匹配<code>n</code>，<code>\\n</code>匹配换行符。<code>\\\\</code>匹配<code>\\</code>。</td>\n</tr>\n<tr>\n<td>^</td>\n<td>匹配输入字符串的开始位置，除非在方括号表达式中使用，此时他表示不接受该字符集合。匹配自身用<code>\\^</code>。</td>\n</tr>\n<tr>\n<td>{</td>\n<td>标记限定符表达式的开始。匹配自身用<code>{</code>。</td>\n</tr>\n<tr>\n<td>\\</td>\n<td></td>\n<td>之名亮相之间的一个选择。匹配自身用`\\</td>\n<td>`。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"4、限定符\"><a href=\"#4、限定符\" class=\"headerlink\" title=\"4、限定符\"></a>4、限定符</h3><p>限定符用来指定正则表达式的一个给顶组件，必须要出现多少次才能满足匹配。有一下六种</p>\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>*</td>\n<td>匹配前面的子表达式零次或多次。例如，<code>zo*</code>能匹配”z”以及”zoo”，*等价于{0,}。</td>\n</tr>\n<tr>\n<td>+</td>\n<td>匹配前面的子表达式一次或多次。例如，<code>zo+</code>能匹配”zo”以及”zoo”，不能匹配”z”。+等价于{1,}。</td>\n</tr>\n<tr>\n<td>?</td>\n<td>匹配前面的子表达式零次或一次。例如，<code>do(es)?</code>可匹配”do”或”does”中的”do”。?等价于{0,1}。</td>\n</tr>\n<tr>\n<td>{n}</td>\n<td>n是一个非负整数。匹配确定的n次。例如，<code>o{2}</code>不能匹配”Bob”中的o，能匹配”food”中的两个o。</td>\n</tr>\n<tr>\n<td>{n,}</td>\n<td>你是一个非负整数。至少匹配n次。例如，<code>o{2,}</code>不能匹配”Bob”中的o,能匹配”foooood”中所有的o。<code>o{1,}</code>等价于<code>o+</code>。<code>o{0,}</code>等价于<code>o*</code>。</td>\n</tr>\n<tr>\n<td>{n,m}</td>\n<td>m、n均为非负整数。n&lt;=m。最少匹配n次切最多匹配m次。例如，<code>o{1,3}</code>将匹配”foooood”中的前三个o。<code>o{0,1}</code>等价于<code>o?</code>。==注意逗号与数字间不能有空格==</td>\n</tr>\n</tbody>\n</table>\n<p>章节编号亦可能大于9，正则表达式匹配正解标题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/Chapter [1-9](0-9)*/</div></pre></td></tr></table></figure>\n<p><strong>*、+和?限定符都是贪婪的，尽可能多的匹配文字，在其后加上一个?则可实现非贪婪或最小匹配</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#匹配&lt;开始到&gt;结束之间的所有内容。</span></div><div class=\"line\">/&lt;.*&gt;/</div></pre></td></tr></table></figure>\n<h3 id=\"5、定位符\"><a href=\"#5、定位符\" class=\"headerlink\" title=\"5、定位符\"></a>5、定位符</h3><p>定位符可以是正则表达式固定到行首或行尾。用于描述字符串或单词的边界，<code>^</code>和<code>$</code>分别表示字符串的开始和结束。<code>\\b</code>表示单词的前或后边界，<code>\\B</code>表示非单词的边界。</p>\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>^</td>\n<td>匹配输入字符的开始位置。如果RegExp设置了Multiple属性，^还会与\\n或\\r之后的位置匹配。</td>\n</tr>\n<tr>\n<td>\\$</td>\n<td>匹配输入字符串的结尾位置。若RegExp设置了Multiple属性，$还会匹配\\n或\\r之前的位置。</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>匹配一个字边界，即字与空格之间的位置。</td>\n</tr>\n<tr>\n<td>\\B</td>\n<td>非字边界匹配。</td>\n</tr>\n</tbody>\n</table>\n<p><strong>注意</strong>：不能将限定符与定位点一起使用。由于在紧靠换行或者字边界的前面或后面不能有==<strong>一个以上</strong>==位置，因此不允许诸如<code>^*</code>之类的表达式。</p>\n<ul>\n<li>匹配一行文本开始处的文本，在RegExp开始使用<code>^</code>字符。这与<code>()</code>内的<code>^</code>意思不同。</li>\n<li>匹配一行文本结束处的文本，在RegExp结尾使用<code>$</code>字符。</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#匹配章节标题，其只含两个尾随数字</span></div><div class=\"line\">/^Chapter [1-9][0-9]&#123;0,1&#125;/</div><div class=\"line\"><span class=\"comment\">#匹配真正标题，而非包含交叉引用，则标题独占一行。</span></div><div class=\"line\">/^Chapter [1-9][0-9]&#123;0,1&#125;$/</div><div class=\"line\"><span class=\"comment\">#字符边界匹配，以下两个分别匹配Chapter的前三和后三个字符。</span></div><div class=\"line\">/\\bCha/</div><div class=\"line\">/ter\\b/</div><div class=\"line\"><span class=\"comment\">#非字符边界，匹配Chapter中的apt，而不匹配边界的aptitude中的apt</span></div><div class=\"line\">/\\Bapt/</div></pre></td></tr></table></figure>\n<h3 id=\"6、选择和反向引用\"><a href=\"#6、选择和反向引用\" class=\"headerlink\" title=\"6、选择和反向引用\"></a>6、选择和反向引用</h3><p>用圆括号<code>()</code>括起来所有选择项，相邻选择项用<code>|</code>分隔。如此有副作用，相关的匹配会被缓存，则用<code>?:</code>放在第一选项前来消除副作用。</p>\n<p><strong><code>?:</code>、<code>?=</code>、<code>?!</code>属于非捕获元，而<code>?=</code>还表示正向预查，在任何开始匹配圆括号内正则表达式模式的位置来匹配搜索字符串。<code>?!</code>反向预查，在任何开始不匹配该正则表达式模式的位置来匹配搜索字符串。</strong></p>\n<p>正则表达式模式添加<code>()</code>会导致相关匹配存储到一个临时缓冲区，所有匹配子项都按照正则模式从左到右存储。1开始到99个子表达式缓存。缓冲区都可以用<code>\\n</code>访问，其中<code>n</code>表示特定缓冲区的一位或两位十进制数。</p>\n<p>反向引用，常用相邻单词的匹配，</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Is is the cost of of gasoline going up up?</div><div class=\"line\"><span class=\"comment\">#如上句子包含重复单词，若不需要重复单词而定位到该句子</span></div><div class=\"line\">/\\b([a-z]+) \\1\\b/gi</div><div class=\"line\"><span class=\"comment\">#如上捕获表达式，[a-z]+指定一个或多个字母。单词的第二个匹配项正好由括号表达式匹配。\\1指定第一个字匹配项。\\b保证了只检测整个单词。全局标记g和忽略大小写标记i</span></div></pre></td></tr></table></figure>\n<p>如上示例中使用到全局标记<code>g</code>和大小写忽略标记<code>i</code></p>\n<p>反向引用还可以分解资源指示符<code>URI</code>组件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://www.google.com:80/android/index.html</div><div class=\"line\"><span class=\"comment\">#使用正则表达式</span></div><div class=\"line\">/(\\w+):\\/\\/([^/:]+)(:\\d*)?([^<span class=\"comment\"># ])/</span></div></pre></td></tr></table></figure>\n<p>说明：第一个括号用于获取http协议部分，在://之前。第二个表达式，捕获域名地址，匹配/和:之外的一个或多个字符。第三个捕获端口号，:后面的0个或多个只能重复一次该表达式，最后的括号补货地址路径/符号的页面信息。</p>\n<h2 id=\"三、元字符\"><a href=\"#三、元字符\" class=\"headerlink\" title=\"三、元字符\"></a>三、元字符</h2><p>下表包含元字符的完整列表以及他们在正则表达式上下文中的行为：</p>\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\</td>\n<td>将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、或一个八进制转义符。例如，’n’ 匹配字符 “n”。’\\n’ 匹配一个换行符。序列 ‘\\‘ 匹配 “\\” 而 “(“ 则匹配 “(“。</td>\n</tr>\n<tr>\n<td>^</td>\n<td>匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 ‘\\n’ 或 ‘\\r’ 之后的位置。</td>\n</tr>\n<tr>\n<td>\\$</td>\n<td>匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 ‘\\n’ 或 ‘\\r’ 之前的位置。</td>\n</tr>\n<tr>\n<td>*</td>\n<td>匹配前面的子表达式零次或多次。例如，zo<em> 能匹配 “z” 以及 “zoo”。</em> 等价于{0,}。</td>\n</tr>\n<tr>\n<td>+</td>\n<td>匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td>\n</tr>\n<tr>\n<td>?</td>\n<td>匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 或 “does” 中的”do” 。? 等价于 {0,1}。</td>\n</tr>\n<tr>\n<td>{n}</td>\n<td>n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td>\n</tr>\n<tr>\n<td>{n,}</td>\n<td>n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。</td>\n</tr>\n<tr>\n<td>{n,m}</td>\n<td>m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</td>\n</tr>\n<tr>\n<td>?</td>\n<td>当该字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 “oooo”，’o+?’ 将匹配单个 “o”，而 ‘o+’ 将匹配所有 ‘o’。</td>\n</tr>\n<tr>\n<td>.</td>\n<td>匹配除 “\\n” 之外的任何单个字符。要匹配包括 ‘\\n’ 在内的任何字符，请使用像”**(.</td>\n</tr>\n<tr>\n<td>(pattern)</td>\n<td>匹配 pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在VBScript 中使用 SubMatches 集合，在JScript 中则使用 $0…$9 属性。要匹配圆括号字符，请使用 ‘(‘ 或 ‘)‘。</td>\n</tr>\n<tr>\n<td>(?:pattern)</td>\n<td>匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用 “或” 字符 (</td>\n</tr>\n<tr>\n<td>(?=pattern)</td>\n<td>正向预查，在任何匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，’Windows (?=95</td>\n</tr>\n<tr>\n<td>(?!pattern)</td>\n<td>负向预查，在任何不匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如’Windows (?!95</td>\n</tr>\n<tr>\n<td>x</td>\n<td>y</td>\n</tr>\n<tr>\n<td>[xyz]</td>\n<td>字符集合。匹配所包含的任意一个字符。例如， ‘[abc]’ 可以匹配 “plain” 中的 ‘a’。</td>\n</tr>\n<tr>\n<td>[^xyz]</td>\n<td>负值字符集合。匹配未包含的任意字符。例如， ‘[^abc]’ 可以匹配 “plain” 中的’p’、’l’、’i’、’n’。</td>\n</tr>\n<tr>\n<td>[a-z]</td>\n<td>字符范围。匹配指定范围内的任意字符。例如，’[a-z]’ 可以匹配 ‘a’ 到 ‘z’ 范围内的任意小写字母字符。</td>\n</tr>\n<tr>\n<td>[^a-z]</td>\n<td>负值字符范围。匹配任何不在指定范围内的任意字符。例如，’[^a-z]’ 可以匹配任何不在 ‘a’ 到 ‘z’ 范围内的任意字符。</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>匹配一个单词边界，也就是指单词和空格间的位置。例如， ‘er\\b’ 可以匹配”never” 中的 ‘er’，但不能匹配 “verb” 中的 ‘er’。</td>\n</tr>\n<tr>\n<td>\\B</td>\n<td>匹配非单词边界。’er\\B’ 能匹配 “verb” 中的 ‘er’，但不能匹配 “never” 中的 ‘er’。</td>\n</tr>\n<tr>\n<td>\\cx</td>\n<td>匹配由 x 指明的控制字符。例如， \\cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。</td>\n</tr>\n<tr>\n<td>\\d</td>\n<td>匹配一个数字字符。等价于 [0-9]。</td>\n</tr>\n<tr>\n<td>\\D</td>\n<td>匹配一个非数字字符。等价于 [^0-9]。</td>\n</tr>\n<tr>\n<td>\\f</td>\n<td>匹配一个换页符。等价于 \\x0c 和 \\cL。</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td>匹配一个换行符。等价于 \\x0a 和 \\cJ。</td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>匹配一个回车符。等价于 \\x0d 和 \\cM。</td>\n</tr>\n<tr>\n<td>\\s</td>\n<td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \\f\\n\\r\\t\\v]。</td>\n</tr>\n<tr>\n<td>\\S</td>\n<td>匹配任何非空白字符。等价于 [^ \\f\\n\\r\\t\\v]。</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td>匹配一个制表符。等价于 \\x09 和 \\cI。</td>\n</tr>\n<tr>\n<td>\\v</td>\n<td>匹配一个垂直制表符。等价于 \\x0b 和 \\cK。</td>\n</tr>\n<tr>\n<td>\\w</td>\n<td>匹配包括下划线的任何单词字符。等价于’[A-Za-z0-9_]’。</td>\n</tr>\n<tr>\n<td>\\W</td>\n<td>匹配任何非单词字符。等价于 ‘[^A-Za-z0-9_]’。</td>\n</tr>\n<tr>\n<td>\\xn</td>\n<td>匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，’\\x41’ 匹配 “A”。’\\x041’ 则等价于 ‘\\x04’ &amp; “1”。正则表达式中可以使用 ASCII 编码。</td>\n</tr>\n<tr>\n<td>\\num</td>\n<td>匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，’(.)\\1’ 匹配两个连续的相同字符。</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td>标识一个八进制转义值或一个向后引用。如果 \\n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字 (0-7)，则 n 为一个八进制转义值。</td>\n</tr>\n<tr>\n<td>\\nm</td>\n<td>标识一个八进制转义值或一个向后引用。如果 \\nm 之前至少有 nm 个获得子表达式，则 nm 为向后引用。如果 \\nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的向后引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字 (0-7)，则 \\nm 将匹配八进制转义值 nm。</td>\n</tr>\n<tr>\n<td>\\nml</td>\n<td>如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml。</td>\n</tr>\n<tr>\n<td>\\un</td>\n<td>匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如， \\u00A9 匹配版权符号 (?)。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"四、运算符优先级\"><a href=\"#四、运算符优先级\" class=\"headerlink\" title=\"四、运算符优先级\"></a>四、运算符优先级</h2><p>正则表达式从左到右进行计算，类似算术运算，遵循优先级：</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\</td>\n<td>转义符</td>\n</tr>\n<tr>\n<td>(),(?:),(?=),[]</td>\n<td>圆括号和方括号</td>\n</tr>\n<tr>\n<td>*,+,?,{n},{n,},{n,m}</td>\n<td>限定符</td>\n</tr>\n<tr>\n<td>^,$,\\任何元字符、任何字符</td>\n<td>定位点和序列(即：位置和顺序)</td>\n</tr>\n<tr>\n<td>\\</td>\n<td></td>\n<td>替换，”或”操作，字符具有高于替换运算符的优先级，使得”m\\</td>\n<td>food”匹配”m”或”food”。若要匹配”mood”或”food”，请使用括号创建子表达式，从而产生”(m\\</td>\n<td>f)ood”。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"五、匹配规则\"><a href=\"#五、匹配规则\" class=\"headerlink\" title=\"五、匹配规则\"></a>五、匹配规则</h2><h3 id=\"1、基本模式匹配\"><a href=\"#1、基本模式匹配\" class=\"headerlink\" title=\"1、基本模式匹配\"></a>1、基本模式匹配</h3><p>模式是正则表达式最基本的元素，它们是一组描述字符串特征的字符。可以很简单，有普通字符组成，也可以很复杂由特殊字符构成。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">^once</div></pre></td></tr></table></figure>\n<p>如上模式，包含特殊字符<code>^</code>表示该模式只匹配以<code>once</code>开头的字符串。”once upon a time”匹配，”There once was a man from NewYork”则不匹配。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bucket$</div></pre></td></tr></table></figure>\n<p><code>$</code>符号表示结尾，如上匹配”Who kept all of this cash in a bucket”，则不匹配”buckets”。如果<code>^</code>和<code>$</code>同时使用，则精准匹配。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">^bucket$</div></pre></td></tr></table></figure>\n<p>如上只能匹配<code>bucket</code>这个单词，如果不适用特殊字符，仅用普通字符，如once，则匹配所有包含once的字符串。这里的字符是普通字符，有的特殊字符，如空格、制表符、标点等，可能就需要用转义符配合来匹配。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#匹配制表符，则不是匹配\\t这两个字符的字面意思，若匹配\\t本义，则用\\\\t转义后的表示法。</span></div><div class=\"line\">^\\t</div></pre></td></tr></table></figure>\n<h3 id=\"2、字符簇\"><a href=\"#2、字符簇\" class=\"headerlink\" title=\"2、字符簇\"></a>2、字符簇</h3><p>用方括号构建字符簇，用于更为自由的使用正则表达式来实现我们需要的搜索与验证功能。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#元音字符簇</span></div><div class=\"line\">[AaEeIiOoUu]</div><div class=\"line\"><span class=\"comment\">#如上则匹配所有元音字符，但只能匹配一个。</span></div><div class=\"line\">[a-z]<span class=\"comment\">#匹配所有小写字母</span></div><div class=\"line\">[A-Z]<span class=\"comment\">#匹配所有大写字母</span></div><div class=\"line\">[a-zA-Z]<span class=\"comment\">#匹配所有字母</span></div><div class=\"line\">[0-9]<span class=\"comment\">#匹配所有数字</span></div><div class=\"line\">[0-9\\.\\-]<span class=\"comment\">#匹配所有数字，句号和减号</span></div><div class=\"line\">[ \\f\\r\\t\\n]<span class=\"comment\">#匹配所有空白字符</span></div><div class=\"line\"><span class=\"comment\">#字符簇可以结合^和$符号使用，做精准匹配。</span></div></pre></td></tr></table></figure>\n<p><code>^</code>在方括号内，表示<code>非</code>的意思，用于排除，剔除</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">//如下，则表示第一个字符不能是数字</div><div class=\"line\">^[^0-9][0-9]$</div><div class=\"line\">[^a-z] //除了小写字母以外的所有字符 </div><div class=\"line\">[^\\\\\\/\\^] //除了(\\)(/)(^)之外的所有字符 </div><div class=\"line\">[^\\\"\\'] //除了双引号(\")和单引号(')之外的所有字符</div></pre></td></tr></table></figure>\n<p>特殊字符<code>.</code>表示除了<code>新行</code>之外的所有字符。”.”模式，则可以匹配除了空串和仅有”新行“的之外字符串。</p>\n<p>PHP正则表达式有一些内置的字符簇。</p>\n<table>\n<thead>\n<tr>\n<th>字符簇</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[[:alpha:]]</td>\n<td>所有字母</td>\n</tr>\n<tr>\n<td>[[:digit:]]</td>\n<td>所有数字</td>\n</tr>\n<tr>\n<td>[[:alnum:]]</td>\n<td>所有字母和数字</td>\n</tr>\n<tr>\n<td>[[:space:]]</td>\n<td>所有空白符</td>\n</tr>\n<tr>\n<td>[[:upper:]]</td>\n<td>所有大写字母</td>\n</tr>\n<tr>\n<td>[[:lower:]]</td>\n<td>所有小写字母</td>\n</tr>\n<tr>\n<td>[[:punct:]]</td>\n<td>所有标点</td>\n</tr>\n<tr>\n<td>[[:xdigit:]]</td>\n<td>所有十六进制数字，相当于[0-9a-fA-F]</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"3、确定重复出现\"><a href=\"#3、确定重复出现\" class=\"headerlink\" title=\"3、确定重复出现\"></a>3、确定重复出现</h3><p>匹配一个单词或一组数字就需要使用可重复的匹配方式，在字符或字符簇后用<code>{}</code>来确定重复出现的次数。</p>\n<table>\n<thead>\n<tr>\n<th>字符簇</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>^[a-zA-Z_]$</td>\n<td>所有字母和下划线</td>\n</tr>\n<tr>\n<td>^[[:alpha:]]{3}$</td>\n<td>所有的3个字母的单词</td>\n</tr>\n<tr>\n<td>^a$</td>\n<td>字母a</td>\n</tr>\n<tr>\n<td>^a{4}$</td>\n<td>aaaa</td>\n</tr>\n<tr>\n<td>^a{2,4}$</td>\n<td>aa,aaa或aaaa</td>\n</tr>\n<tr>\n<td>^a{1,3}$</td>\n<td>a,aa或aaa</td>\n</tr>\n<tr>\n<td>^a{2,}$</td>\n<td>包含多于两个a的字符串，都是a</td>\n</tr>\n<tr>\n<td>^a{2,}</td>\n<td>包含多于两个a的字符串，不要求都是a，但在开头是。</td>\n</tr>\n<tr>\n<td>a{2,}</td>\n<td>含有两个以上的a的字符串</td>\n</tr>\n<tr>\n<td>\\t{2}</td>\n<td>两个制表符</td>\n</tr>\n<tr>\n<td>.{2}</td>\n<td>所有两个字符，不含新行</td>\n</tr>\n</tbody>\n</table>\n<p><code>{}</code>表示集合，内部的数字结构，确定结合的范围或者元素次数。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">^[a-zA-Z0<span class=\"number\">-9</span>_]&#123;<span class=\"number\">1</span>,&#125;$ <span class=\"comment\">//所有包含一个以上的字母、数字或下划线的字符串 </span></div><div class=\"line\">^[<span class=\"number\">1</span><span class=\"number\">-9</span>][<span class=\"number\">0</span><span class=\"number\">-9</span>]*$ <span class=\"comment\">//所有的正整数 </span></div><div class=\"line\">^\\-&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>&#125;[<span class=\"number\">0</span><span class=\"number\">-9</span>]&#123;<span class=\"number\">1</span>,&#125;$ <span class=\"comment\">//所有的整数 </span></div><div class=\"line\">^[-]?[<span class=\"number\">0</span><span class=\"number\">-9</span>]+\\.?[<span class=\"number\">0</span><span class=\"number\">-9</span>]+$ <span class=\"comment\">//所有的浮点数</span></div></pre></td></tr></table></figure>\n<p>如上最后一个较为复杂，<code>-</code>表示负号，可选。<code>.</code>表示小数点，通过<code>^</code>与<code>$</code>符号配合，限定数字的结构，浮点数。其实<code>?</code>代表的是<code>{0,1}</code>表示一个或者没有，所以用<code>?</code>代替了<code>{}</code>来限定范围个数。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//一样的</span></div><div class=\"line\">^\\-?[<span class=\"number\">0</span><span class=\"number\">-9</span>]&#123;<span class=\"number\">1</span>,&#125;\\.?[<span class=\"number\">0</span><span class=\"number\">-9</span>]&#123;<span class=\"number\">1</span>,&#125;$</div></pre></td></tr></table></figure>\n<p>而<code>*</code>与<code>{0,}</code>相等，表示0个或多个前面的元素。<code>+</code>与<code>{1,}</code>相等，表示一个或多个前面的内容，如此上面简化为：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">^[a-zA-Z0<span class=\"number\">-9</span>_]+$ <span class=\"comment\">//所有包含一个以上的字母、数字或下划线的字符串 </span></div><div class=\"line\">^[<span class=\"number\">0</span><span class=\"number\">-9</span>]+$ <span class=\"comment\">//所有的正整数 </span></div><div class=\"line\">^\\-?[<span class=\"number\">0</span><span class=\"number\">-9</span>]+$ <span class=\"comment\">//所有的整数 </span></div><div class=\"line\">^\\-?[<span class=\"number\">0</span><span class=\"number\">-9</span>]+\\.?[<span class=\"number\">0</span><span class=\"number\">-9</span>]*$ <span class=\"comment\">//所有的浮点数</span></div></pre></td></tr></table></figure>\n<h2 id=\"六、示例\"><a href=\"#六、示例\" class=\"headerlink\" title=\"六、示例\"></a>六、示例</h2><ul>\n<li><p>简单表达式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">#单字匹配</div><div class=\"line\">/a/</div><div class=\"line\">/7/</div><div class=\"line\">/M/</div><div class=\"line\">#多匹配的单字符</div><div class=\"line\">/a7M/</div></pre></td></tr></table></figure>\n<p>注意没有字符串联符号，只须在字符后直接写字符就可以。</p>\n</li>\n<li><p>字符匹配</p>\n<p><code>.</code>匹配除<code>\\n</code>之外的所有字符。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#匹配a开头c结尾的三个字符</span></div><div class=\"line\">/a.c/</div><div class=\"line\"><span class=\"comment\">#要匹配文件名，带后缀的，那么.需要转义</span></div><div class=\"line\">/filename\\.txt/</div></pre></td></tr></table></figure>\n</li>\n<li><p>中括号表达式</p>\n<p>方括号<code>[]</code>构建字符簇，但是注意两个特殊字符：</p>\n<ul>\n<li><code>]</code>由于右方括号也是表达式的一个符号，若要匹配原本它自身，则放在字符簇的第一位。</li>\n<li><code>\\</code>斜杠符号，要匹配自身，需要转义<code>\\\\</code>。</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#这两种写法等效。格式中空格是不可缺少的。但是指定范围的方式，需要字符的Unicode码大小顺序来写范围。</span></div><div class=\"line\">/Chapter [12345]/</div><div class=\"line\">/Chapter [1-5]/</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#连接符</span></div><div class=\"line\">[\\-]</div><div class=\"line\">[<span class=\"_\">-a</span>-z]</div><div class=\"line\">[a-z-]</div><div class=\"line\"><span class=\"comment\">#开始值小于连字符，结束字符大于或等于连字符，</span></div><div class=\"line\">[!--]</div><div class=\"line\">[!-~]</div></pre></td></tr></table></figure>\n<ul>\n<li><code>^</code>在中括号内表示<code>非</code>，用于排除</li>\n</ul>\n</li>\n<li><p>替换和分组</p>\n<p><code>|</code>符号用于替换。如下表示出现在行首或行尾，后面跟一个或两个数字的Chapter或Section：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#需要用()来限定需要替换的范围，如果不加()，那么会将Chapter与|后面所有的等价位置，而不是和Section等价。</span></div><div class=\"line\">/^(Chapter|Section) [1-9][0-9]&#123;0,1&#125;$/</div><div class=\"line\"><span class=\"comment\">#如上搜索结果会被捕获并存储，有时候多个子表达式，会引起误会。需要清除缓存。</span></div><div class=\"line\">/^(?:Chapter|Section) [1-9][0-9]&#123;0,1&#125;$/</div></pre></td></tr></table></figure>\n</li>\n<li><p>其他示例</p>\n<p>| 正则表达式                                    | 描述                                       |<br>| —————————————- | —————————————- |<br>| /\\b([a-z]+)\\1\\b/gi                       | 一个单词连续出现的位置                              |<br>| /(\\w+):\\/\\/([^/:]+)(:\\d*)?([^#*])/   | 将一个URL解析为协议、域、端口、相对路径                    |<br>| /^(?:Chapter|Section)[1-9][0-9]{0,1}$/ | 定位章节位置                                   |<br>| /[-a-z]/                                 | a-z和-                                    |<br>| /ter\\b/                                  | 末尾边界符                                    |<br>| /\\Bapt/                                  | 非边界符                                     |<br>| /Windows(?=95|98|NT)/                  | 可匹配Windows95或Windows98或WindowsNT，当找到一个匹配后，从Windows后面开始进行下一次的检索匹配。 |<br>| /^\\s<em>$/                                  | 匹配空行                                     |<br>| /\\d{2}-\\d{5}/                            | 验证由两位数、一个连字符、5位数组成的ID号。                  |<br>| /&lt;\\s\\</em>(\\S+)(\\s[^&gt;]*)?&gt;[\\s\\S]*&lt;\\s*\\/\\1\\s*&gt;/ | 匹配HTML标记。                                |</p>\n</li>\n</ul>\n<p><strong>Note:</strong>各个编程语言中的正则表达式可能略微还有差异，如java中特殊元字符可能就需要<code>\\\\b</code>来代替<code>\\b</code>符号，用双斜杠代替原有的单斜杠。使用中稍加注意。</p>\n"},{"title":"Android多媒体","date":"2017-03-27T08:57:00.000Z","author":"冰路梦","_content":"## 第三章、Android多媒体\n\n### 1. 管理音频播放\n\n- #### 控制音量与音频播放\n\n  应用若使用音频功能，应保证App获取音频焦点，不造成多个应用声音混杂，且可响应音频按钮事件。\n\n  > - Android有播放音乐、闹铃、通知、来电等等不同的音频流，需要独立鉴别。\n  >\n  >   音量按钮会调节当前音频流，若无，则调节响铃。Android 中`setVolumeControlStream()`方法控制音频流。一般在Activity或Fragment的`onCreate()`中调用它。如：\n  >\n  > ```java\n  > setVolumeControlStream(AudioManager.STREAM_MUSIC);\n  > ```\n  >\n  > - **响应按键事件**，硬件的音控按钮会激活系统广播`ACTION_MEDIA_BUTTON`的Intent，App需要有receiver在manifest中：\n  >\n  > ```xml\n  > <receiver android:name=\".RemoteControlReceiver\">\n  > \t<intent-filter>\n  >   \t\t<action android:name=\"android.intent.action.MEDIA_BUTTON\"/>\n  >   \t</intent-filter>\n  > </receiver>\n  > ```\n  >\n  > - *Receiver接收广播，过滤Action，可以通过`EXTRA_KEY_EVENT`区分按钮*，如：\n  >\n  > ```java\n  > public class RemoteControlReceiver extends BroadcastReceiver{\n  >   @override\n  >   public void onReceive(Context context,Intent intent){\n  >     KeyEvent event = (KeyEvent)intent.getParcelableExtra(Intent,EXTRA_KEY_EVENT);\n  >     if(KeyEvent.KEYCODE_MEDIA_PLAY==event.getKeyCode()){\n  >       //处理按钮Play的点击事件\n  >       ...\n  >     }\n  >   }\n  > }\n  > ```\n  >\n  > `注意，可能有多个程序监听按钮`，可以通过AudioManager管理App注册监听与取消。\n  >\n  > ```java\n  > AudioManager am = mContext.getSystemService(Context.AUDIO_SERVICE);\n  > ...\n  >   //开启监听\n  > am.registerMediaButtonEventReceiver(RemoteControlReceiver);\n  > ...\n  >   //取消监听\n  > am.unregisterMediaButtonEventReceiver(RemoteControlReceiver);\n  > ```\n  >\n  > **音频的控制，并不一定是Activity可见不可见来决定**，正确的方法是判断App获取/失去音频流焦点的状态。\n\n- #####  管理音频焦点\n\n  Android中只有获取音频流焦点的App方能控制音频。\n\n  - 注意点：1、请求焦点；2、获取焦点；3、监控焦点状态，并作相应处理。\n\n  > ```java\n  > requestAudioFocus();//请求焦点，成功则返回AUDIOFOCUS_REQUEST_GRANTED\n  > //需要制定当前音频流，并明确焦点获取是临时`Transient`，还是永久`Permanent`。\n  > AudioManager am = mContext.getSystemService(Context.AUDIO_SERVICE);\n  > ...\n  > // 请求音频焦点，指定当前音频流为music，传入请求参数。\n  > int result = am.requestAudioFocus(afChangeListener,AudioManager.STREAM_MUSIC,AudioManager.AUDIOFOCUS_GAIN);\n  > if (result == AudioManager.AUDIOFOCUS_REQUEST_GRANTED) {  am.registerMediaButtonEventReceiver(RemoteControlReceiver);\n  >     // 开始播放\n  > }\n  > ...\n  > //释放焦点的方法\n  >   am.abandonAudioFocus(afChangeListener);\n  > ```\n  >\n  > 一旦结束播放，确保调用`abandonAudioFocus()`来释放焦点和监听AudioManager.OnAudioFocusChangeListener。\n  >\n  > - **在使用临时焦点时候，可选择设置`Ducking`开启，则其他音频流不会停止，而只是变为背景音**\n  >\n  > ```java\n  > int result = am.requestAudioFocus(afChangeListener,AudioManager.STERAM_MUSIC,AudioManager.AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK);//开启Ducking\n  > if(result == AudioManager.AUDIOFOCUS_REQUEST_GRANTED){\n  >   //paly music And other app maybe playing too。\n  > }//若其他app也是Ducking，则本App可以监听它的焦点状态。\n  > ```\n  >\n  > _音频焦点状态变化的监听_ `onAudioFocusChange()`，三种状态，永久，临时，Ducking式。\n  >\n  > ```java\n  > OnAudioFocusChangeListener afChangeListener = new OnAudioFocusChangeListener(){\n  >   public void onAudioFocusChange(int focusChange){\n  >     if(focusChange == AUDIOFOCUS_LOSS_TRANSIENT){\n  >       //暂停播放\n  >       \n  >     }else if(focusChange == AudioManger.AUDIOFOCUS_GAIN){\n  >       //重新播放\n  >     }else if(focusChange == AudioManager.AUDIOFOCUS_LOSS){\n  >      am.unregisterMediaButtonEventReceiver(RemoteControlReceiver);\n  >       am.abandonAudioFocus(afChangeListener);\n  >       //停止播放\n  >     }\n  >   }\n  > }\n  > ```\n  >\n  > - **Duck！**\n  >\n  > 对音频流使用Ducking状态，会是之变为背景式音频。\n  >\n  > ```java\n  > OnAudioFocusChangeListener afChangeListener = new OnAudioFocusChangeListener() {\n  >     public void onAudioFocusChange(int focusChange) {\n  >         if (focusChange == AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK) {\n  >             //Ducking 状态，降低音量，背景音播放\n  >         } else if (focusChange == AudioManager.AUDIOFOCUS_GAIN) {\n  >             // 恢复正常音量播放\n  >         }\n  >     }\n  > };\n  > ```\n\n- ###### 兼容音频输出设备\n\n  检测正使用的硬件设备:`Audio Manager`\n\n  > ```java\n  > if (isBluetoothA2dpOn()) {\n  >     // Adjust output for Bluetooth.\n  > } else if (isSpeakerphoneOn()) {\n  >     // Adjust output for Speakerphone.\n  > } else if (isWiredHeadsetOn()) {\n  >     // Adjust output for headsets\n  > } else { \n  >     // If audio plays and noone can hear it, is it still playing?\n  > }\n  > ```\n  >\n  > 当音频设备变化时候，要监听改变`ACTION_AUDIO_BECOMING_NOISY`系统广播的intent。App需要有receiver\n  >\n  > ```java\n  > private class NoisyAudioStreamReceiver extends BroadcastReceiver{\n  >   @override\n  >   public void onReceive(Context context,Intent intent){\n  >     if(AudioManager.ACTION_AUDIO_BECOMING_NOISY.equals(intent.getAction())){\n  >      //接收到音频输出设备变化，暂停播放 \n  >     }\n  >   }\n  > }\n  > private IntentFilter intentFilter = new IntentFilter(AudioManager.ACITON_AUDIO_BECOMING_NOISY);\n  > private void startPlayback() {\n  >     registerReceiver(myNoisyAudioStreamReceiver(), intentFilter);\n  > }\n  >\n  > private void stopPlayback() {\n  >     unregisterReceiver(myNoisyAudioStreamReceiver);\n  > }\n  > ```\n\n### 2.拍照\n\n- #### 简单的拍照\n\n  >1、请求相机权限\n  >\n  >```xml\n  ><manifest ...>\n  >  <!-- 在清单文件中加入该属性，向用户声明本App需要相机权限。 -->\n  >\t<uses-feature android:name=\"android.hardware.camera\"\n  >                  android:required=\"true\"/>\n  >  <!-- 自动聚焦 -->\n  >   <uses-feature android:name=\"android.hardware.camera.autofocus\" />\n  >  <!-- 调用相机需要的权限 -->\n  >  \n  >  <uses-permission android:name=\"android.permission.CAMERA\" />\n  ></manifest>\n  >```\n  >\n  >本App若非必须有相机，`required`可以设置false。代码中可以用`hasSystemFeature(PackageManager.FEATURE_CAMERA)`来检查是否有camera硬件。\n  >\n  >2、调用系统相机拍照。\n  >\n  >```java\n  >static final int REQUEST_IMAGE_CAPTURE=1;//请求码\n  >private void dispatchTakePictureIntent(){\n  >  //调用相机的intent\n  >  Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\n  >  //检查有没有能处理该intent的Activity，以免下面startActivity会空指针，而崩溃\n  >  if(takePictureIntent.resolveActivity(getPackageManager()) !=null){\n  >    startActivityForResult(takePictureIntent,REQUEST_IMAGE_CAPTURE);\n  >  }\n  >}\n  >```\n  >\n  >3、获取缩略图\n  >\n  >Android相机将拍摄好的照片缩小为Bitmap，返回给调用的activity，`key-value`键值对形式将数据绑定到intent返回。`data` key值\n  >\n  >```java\n  >@Override\n  >protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n  >    if (requestCode == REQUEST_IMAGE_CAPTURE && resultCode == RESULT_OK) {\n  >        Bundle extras = data.getExtras();//获取bundle对象\n  >        Bitmap imageBitmap = (Bitmap) extras.get(\"data\");//key值，获取缩略图\n  >        mImageView.setImageBitmap(imageBitmap);\n  >    }\n  >}\n  >```\n  >\n  >4、获取全尺寸照片\n  >\n  >Android一般会保存原始照片数据到指定文件夹下。通常为`DIRECTORY_PICTURES`对应的文件目录，需要读写SD卡的权限。\n  >\n  >```xml\n  ><manifest ...>\n  >\t<uses_permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"/>\n  >  \t<!-- 一般有写入权限，就默认会有读取权限了 -->\n  ></manifest>\n  >```\n  >\n  >`getExternalFilesDir()`私有目录，`getExternalStoragePublicDirectory()`共有目录，接收参数`DIRECTORY_PICTURES`标明是图片文件夹。\n  >\n  >**注意文件的保存，需要防止命名冲突，一般会加入时间戳来避免该问题。**\n  >\n  >```java\n  >String mCurrentPhotoPath;\n  >\n  >private File createImageFile() throws IOException {\n  >    // 创建图片文件\n  >    String timeStamp = new SimpleDateFormat(\"yyyyMMdd_HHmmss\").format(new Date());\n  >    String imageFileName = \"JPEG_\" + timeStamp + \"_\";\n  >    File storageDir = Environment.getExternalStoragePublicDirectory(\n  >            Environment.DIRECTORY_PICTURES);\n  >    File image = File.createTempFile(\n  >        imageFileName,  /* prefix */\n  >        \".jpg\",         /* suffix */\n  >        storageDir      /* directory */\n  >    );\n  >\n  >    // Save a file: path for use with ACTION_VIEW intents\n  >    mCurrentPhotoPath = \"file:\" + image.getAbsolutePath();\n  >    return image;\n  >}\n  >```\n  >\n  >使用如上方法，来创建新的照片文件：\n  >\n  >```java\n  >static final int REQUEST_TAKE_PHOTO = 1;\n  >\n  >private void dispatchTakePictureIntent() {\n  >    Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\n  >    // 判断是否有可以处理拍照的Activity\n  >    if (takePictureIntent.resolveActivity(getPackageManager()) != null) {\n  >        // 创建照片文件\n  >        File photoFile = null;\n  >        try {\n  >            photoFile = createImageFile();\n  >        } catch (IOException ex) {\n  >            // 创建文件异常\n  >            ...\n  >        }\n  >        // 照片创建成功的话，完成照片存储。\n  >        if (photoFile != null) {\n  >            takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT,\n  >                    Uri.fromFile(photoFile));\n  >            startActivityForResult(takePictureIntent, REQUEST_TAKE_PHOTO);\n  >        }\n  >    }\n  >}\n  >```\n  >\n  >5、如果照片目录不是私有，那么需要通知系统，将照片显示到公开目录中,让mediaScanner可以扫描到。\n  >\n  >```java\n  >private void galleryAddPic() {\n  >  //intent\n  >    Intent mediaScanIntent = new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE);\n  >    File f = new File(mCurrentPhotoPath);\n  >    Uri contentUri = Uri.fromFile(f);\n  >  //发送广播，\n  >    mediaScanIntent.setData(contentUri);\n  >    this.sendBroadcast(mediaScanIntent);\n  >}\n  >```\n  >\n  >6、图片缩放\n  >\n  >多数情况下不需要全尺寸的清晰图片显示，也为了避免内存消耗，使用图片缩放：\n  >\n  >```java\n  >private void setPic() {\n  >    // 1、获取需要显示图片的view控件的大小。\n  >    int targetW = mImageView.getWidth();\n  >    int targetH = mImageView.getHeight();\n  >\n  >    // 2、获取需要显示的图片的尺寸\n  >    BitmapFactory.Options bmOptions = new BitmapFactory.Options();\n  >    bmOptions.inJustDecodeBounds = true;\n  >    BitmapFactory.decodeFile(mCurrentPhotoPath, bmOptions);\n  >    int photoW = bmOptions.outWidth;\n  >    int photoH = bmOptions.outHeight;\n  >\n  >    // 3、计算缩放比，根据宽高\n  >    int scaleFactor = Math.min(photoW/targetW, photoH/targetH);\n  >\n  >    // 4、缩放图片\n  >    bmOptions.inJustDecodeBounds = false;//\n  >    bmOptions.inSampleSize = scaleFactor;//缩放比\n  >    bmOptions.inPurgeable = true;//\n  >\t//完成图片缩放\n  >    Bitmap bitmap = BitmapFactory.decodeFile(mCurrentPhotoPath, bmOptions);\n  >    mImageView.setImageBitmap(bitmap);\n  >}\n  >```\n\n- #### 简单的录像\n\n  > 1、请求相机权限\n  >\n  > ```xml\n  > <manifest ... >\n  >     <uses-feature android:name=\"android.hardware.camera\"\n  >                   android:required=\"true\" />\n  >    <uses-feature android:name=\"android.hardware.camera.autofocus\" />\n  >     ...\n  > </manifest>\n  > ```\n  >\n  > 2、通过Intent来录制视频,Action是`MediaStore.ACTION_VIDEO_CAPTURE`\n  >\n  > ```java\n  > static final int REQUEST_VIDEO_CAPTURE = 1;\n  >\n  > private void dispatchTakeVideoIntent() {\n  >     Intent takeVideoIntent = new Intent(MediaStore.ACTION_VIDEO_CAPTURE);\n  >   //判断是否有可用录像程序\n  >     if (takeVideoIntent.resolveActivity(getPackageManager()) != null) {\n  >         startActivityForResult(takeVideoIntent, REQUEST_VIDEO_CAPTURE);\n  >     }\n  > }\n  > ```\n  >\n  > 3、接收返回的视频数据\n  >\n  > ```java\n  > @Override\n  > protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n  >     if (requestCode == REQUEST_VIDEO_CAPTURE && resultCode == RESULT_OK) {\n  >       //获取视频文件保存的uri\n  >         Uri videoUri = intent.getData();\n  >         mVideoView.setVideoURI(videoUri);\n  >     }\n  > }\n  > ```\n\n- #### 控制相机硬件\n\n  > 1、此处提供给有特殊需要的app来调用Camera硬件，实现自定义的拍照与录像功能。\n  >\n  > - `onCreate()`中开启线程打开相机。\n  >\n  > - 或者在`onResume()`中开启相机\n  >\n  > - 要检测Camera是否可用，被占用\n  >\n  >   ```java\n  >   private boolean safeCameraOpen(int id) {\n  >       boolean qOpened = false;\n  >       try {\n  >         //先释放，再打开，在此捕获异常\n  >           releaseCameraAndPreview();\n  >           mCamera = Camera.open(id);//相机id，默认后置摄像头。\n  >           qOpened = (mCamera != null);\n  >       } catch (Exception e) {\n  >           Log.e(getString(R.string.app_name), \"failed to open Camera\");\n  >           e.printStackTrace();\n  >       }\n  >\n  >       return qOpened;    \n  >   }\n  >   //释放相机资源\n  >   private void releaseCameraAndPreview() {\n  >       mPreview.setCamera(null);\n  >       if (mCamera != null) {\n  >           mCamera.release();\n  >           mCamera = null;\n  >       }\n  >   }\n  >   ```\n  >\n  > 2、创建相机预览界面，使用`SurfaceView`实现\n  >\n  > ```java\n  > class Preview extends ViewGroup implements SurfaceHolder.Callback {\n  >\n  >     SurfaceView mSurfaceView;//surface view\n  >     SurfaceHolder mHolder;// surface holder\n  > \t//构造函数，初始化数据\n  >     Preview(Context context) {\n  >         super(context);\n  >\n  >         mSurfaceView = new SurfaceView(context);\n  >         addView(mSurfaceView);\n  >\n  >         // 注册surfaceholder的callback，监控surfaceView的创建与销毁。\n  >         mHolder = mSurfaceView.getHolder();\n  >         mHolder.addCallback(this);\n  >         mHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);\n  >     }\n  > ...\n  > }\n  > ```\n  >\n  > ==Preview类的对象，必须在开始预览之前就传递给Camera对象。==\n  >\n  > $Camera 和Preview必须依照特定顺序来创建$。首先创建Camera对象，示例：\n  >\n  > ```java\n  > public void setCamera(Camera camera) {\n  >     if (mCamera == camera) { return; }\n  > \t//停止预览，释放camera对象\n  >     stopPreviewAndFreeCamera();\n  > \t//重新引用camera\n  >     mCamera = camera;\n  > \t//对象非空时候，开启预览\n  >     if (mCamera != null) {\n  >         List<Size> localSizes = mCamera.getParameters().getSupportedPreviewSizes();\n  >         mSupportedPreviewSizes = localSizes;\n  >         requestLayout();\n  >         try {\n  >             mCamera.setPreviewDisplay(mHolder);\n  >         } catch (IOException e) {\n  >             e.printStackTrace();\n  >         }\n  >         // 重要：开启预览，才能拍照。\n  >         mCamera.startPreview();\n  >     }\n  > }\n  > ```\n  >\n  > 3、修改相机设置\n  >\n  > 由于是控制camera硬件，可以设置拍照方式、曝光补偿等。\n  >\n  > ```java\n  > public void surfaceChanged(SurfaceHolder holder, int format, int w, int h) {\n  >     // 设置预览大小\n  >     Camera.Parameters parameters = mCamera.getParameters();\n  >     parameters.setPreviewSize(mPreviewSize.width, mPreviewSize.height);\n  >     requestLayout();\n  >     mCamera.setParameters(parameters);\n  > \t\n  >     //先开启预览，才能调用拍照。\n  >     mCamera.startPreview();\n  > }\n  > //set CameraDisplayOrientation()设置预览方向，横竖屏。\n  > ```\n  >\n  > 4、拍照\n  >\n  > 预览后，才能调用拍照。`Camera.takePicture()`方法。创建`Camera.PictureCallback`和`Camera.ShutterCallback`对象，传递给`Camera.takePicture()`。\n  >\n  > 若要连续拍摄，创建`Camera.PreviewCallback`实现`onPreviewFrame()`方法。如此可以拍摄选定的预览帧，或调用`takePicture()`建立延迟。\n  >\n  > 5、重启Preview\n  >\n  > ==拍照后，需要重启预览==\n  >\n  > ```java\n  > @Override\n  > public void onClick(View v) {\n  >     switch(mPreviewState) {\n  >     case K_STATE_FROZEN://预览\n  >         mCamera.startPreview();\n  >         mPreviewState = K_STATE_PREVIEW;\n  >         break;\n  >     default://拍照\n  >         mCamera.takePicture( null, rawCallback, null);\n  >         mPreviewState = K_STATE_BUSY;\n  >     } // switch\n  >     shutterBtnConfig();\n  > }\n  > ```\n  >\n  > 6、停止预览并释放相机\n  >\n  > 使用Camera后，必须释放资源，以备下次调用或者其他应用使用。一般在Surface被毁后，释放预览和相机。\n  >\n  > ```java\n  > public void surfaceDestroyed(SurfaceHolder holder) {\n  >     // Surface将会销毁，需在此停止预览\n  >     if (mCamera != null) {\n  >         // 停止预览\n  >         mCamera.stopPreview();\n  >     }\n  > }\n  > /**\n  >  * 释放Camera资源\n  >  */\n  > private void stopPreviewAndFreeCamera() {\n  >     if (mCamera != null) {\n  >         //停止预览\n  >         mCamera.stopPreview();\n  >         //重要，停止使用Camera后，必须释放对象资源，在onPause()释放，onResume()重启。\n  >         mCamera.release();\n  >         mCamera = null;\n  >     }\n  > }\n  > ```\n\n### 3、打印\n\nAndroid支持创建pdf文件，打印图片，html和文字。\n\n- #### 打印照片\n\n  > *PrintHelper*类打印图片，AndroidSupportLibrary提供的类库。\n  >\n  > 1、打印一幅图片\n  >\n  > `setScaleMode()`方法，接收两个选项之一：\n  >\n  > - SCALE_MODE_FIT,图片适应打印纸\n  > - SCALE_MODE_FILL,充满整个纸张，可能会与部分图片无法显示出来。\n  >\n  > ```java\n  > private void doPhotoPrint(){\n  >   PrintHelper photoPrinter = new PrintHelper(getActivity());\n  >   photoPrinter.setScaleMode(PrintHelper.SCALE_MODE_FIT);\n  >   Bitmap bitmap = BitmapFactory.decodeResource(getResource(),R.drawable.iclauncher);\n  >   photoPrinter.printBitmap(\"icLaunchetr.jpg 测试打印\",bitmap);\n  > }\n  > ```\n\n- #### 打印html文档\n\n  > android提供了html文档方式，来实现更为丰富的文本打印输出。\n  >\n  > 1、加载Html文档\n  >\n  > 使用`webView`加载html资源，`webview`被作为activity布局的一部分，若是app没有用到该view，则需要创建该对象，来实现html文档：\n  >\n  > - 加载html文档后，创建一个`WebViewClient`对象，来启动打印任务。\n  > - 加载html到`WebView`对象中。\n  >\n  > ```java\n  > private WebView mWebView;\n  > private void doWebViewPrint(){\n  >   //创建webview对象，用于打印\n  >   WebView webView = new WebView(getActivity());\n  >   webView.setWebViewClient(new WebViewClient(){\n  >     public boolean shouldOverrideUrlLoading(WebView view,String url){\n  >       return false;\n  >     }\n  >     @override\n  >     public void onPageFinished(WebView view ,String url){\n  >       Log.i(TAG,\"html页面加载完毕\"+url);\n  >       //调用打印，加载完毕后才调用，否则会不完整，或者失败。\n  >       createWebPrintJob(view);\n  >       mWebView = null;\n  >     }\n  >   });\n  >   //创建一个html文档\n  >     String htmlDocument = \"<html><body><h1>Test Content</h1><p>Testing, \" +\n  >             \"testing, testing...</p></body></html>\";\n  >     webView.loadDataWithBaseURL(null, htmlDocument, \"text/HTML\", \"UTF-8\", null);\n  >\n  >     // 保持web View的对象引用，知道适配器打印完毕。\n  >     mWebView = webView;\n  > }\n  > //要是html需要包含图像，放在“assets/”目录下,指定URL，\n  > webView.loadDataWithBaseURL(\"file:///android_asset/images/\",htmlBody,\"text/HTML\",\"utf-8\",null);\n  > //或者加载一个网页，需要网络权限。\n  > webView.loadUrl(\"http://developer.android.com/about/index.html\");\n  > ```\n  >\n  > ==Web View打印文档会有限制：==\n  >\n  > - 不能添加页眉、页脚、页码\n  > - 不能指定打印页码范围\n  > - 一个Web View对象，只能同时处理一个任务。\n  > - 不支持html的css属性。\n  > - html的javaScript无法调用打印。\n  >\n  > 2、创建打印任务\n  >\n  > ```java\n  > private void createWebPrintJob(WebView webView) {\n  >     // 获取Print Manager实例\n  >     PrintManager printManager = (PrintManager) getActivity()\n  >             .getSystemService(Context.PRINT_SERVICE);\n  >     // 获取PrintAdapter实例\n  >     PrintDocumentAdapter printAdapter = webView.createPrintDocumentAdapter();\n  >     // 创建打印任务，传递给Printadapter，\n  >     String jobName = getString(R.string.app_name) + \" Document\";\n  >     PrintJob printJob = printManager.print(jobName, printAdapter,\n  >             new PrintAttributes.Builder().build());\n  >     // 完成任务配置，加入打印列表。\n  >     mPrintJobs.add(printJob);\n  > }\n  > ```\n\n- #### 打印自定义文档\n\n  > 1、连接打印管理器，来创建打印任务\n  >\n  > ```java\n  > private void doPrint() {\n  >     // Get a PrintManager instance\n  >     PrintManager printManager = (PrintManager) getActivity()\n  >             .getSystemService(Context.PRINT_SERVICE);\n  >     // Set job name, which will be displayed in the print queue\n  >     String jobName = getActivity().getString(R.string.app_name) + \" Document\";\n  >     // Start a print job, passing in a PrintDocumentAdapter implementation\n  >     // to handle the generation of a print document\n  >     printManager.print(jobName, new MyPrintDocumentAdapter(getActivity()),\n  >             null); //最后的参数是PrintAttributes，打印机属性设置。\n  > }\n  > ```\n  >\n  > 2、创建打印机适配器\n  >\n  > `PrintDocumentAdapter`负责打印生命周期，\n  >\n  > - onStart():开始打印，非必需实现的方法，因为总会被调用。\n  > - onLayout(): 用户设置页面布局，尺寸之类的，会调用该函数。\n  > - onWrite(): 将打印文件渲染成待打印状态，可以在onLayout()中多次调用该方法。\n  > - onFinish(): 完成打印，非必需实现。\n  >\n  > 调用onLayout()和onWrite()，尽量写入一个异步进程中，因为可能耗时。\n  >\n  > 3、计算打印文档信息\n  >\n  > 在Print Document Adapter的实现时，需要指定文档类型，计算页数，尺寸之类的信息。\n  >\n  > 在onLayout()中计算这些数据，可从PrintDocumentInfo中获取。\n  >\n  > ```java\n  > @Override\n  > public void onLayout(PrintAttributes oldAttributes,\n  >                      PrintAttributes newAttributes,\n  >                      CancellationSignal cancellationSignal,\n  >                      LayoutResultCallback callback,\n  >                      Bundle metadata) {\n  >     // Create a new PdfDocument with the requested page attributes\n  >     mPdfDocument = new PrintedPdfDocument(getActivity(), newAttributes);\n  >\n  >     // Respond to cancellation request\n  >     if (cancellationSignal.isCancelled() ) {\n  >         callback.onLayoutCancelled();\n  >         return;\n  >     }\n  >\n  >     // Compute the expected number of printed pages\n  >     int pages = computePageCount(newAttributes);\n  >\n  >     if (pages > 0) {\n  >         // Return print information to print framework\n  >         PrintDocumentInfo info = new PrintDocumentInfo\n  >                 .Builder(\"print_output.pdf\")\n  >                 .setContentType(PrintDocumentInfo.CONTENT_TYPE_DOCUMENT)\n  >                 .setPageCount(pages);\n  >                 .build();\n  >         // Content layout reflow is complete\n  >         callback.onLayoutFinished(info, true);\n  >     } else {\n  >         // Otherwise report an error to the print framework\n  >         callback.onLayoutFailed(\"Page count calculation failed.\");\n  >     }\n  > }\n  > ```\n  >\n  > `onLayout()`方法返回结果：完成、取消、失败。必须通过调用PrintDocumentAdapter.LayoutResultCallback对象中的方法指定结果。在`onLayoutFinished()`方法中==boolean的参数==，指明是否与上次布局不同，来决定时候再次调用`onWrite()`方法。\n  >\n  > `onLayout()`计算文档相关数据\n  >\n  > ```java\n  > private int computePageCount(PrintAttributes printAttributes) {\n  >     int itemsPerPage = 4; // default item count for portrait mode\n  >\n  >     MediaSize pageSize = printAttributes.getMediaSize();\n  >     if (!pageSize.isPortrait()) {\n  >         // Six items per page in landscape orientation\n  >         itemsPerPage = 6;\n  >     }\n  >\n  >     // Determine number of print items\n  >     int printItemCount = getPrintItemCount();\n  >\n  >     return (int) Math.ceil(printItemCount / itemsPerPage);\n  > }\n  > ```\n  >\n  > 4、将打印文档写入文件\n  >\n  > 如下代码展示使用`PrintedPdfDocument`类创建pdf文档的基本原理\n  >\n  > ```java\n  > @Override\n  > public void onWrite(final PageRange[] pageRanges,\n  >                     final ParcelFileDescriptor destination,\n  >                     final CancellationSignal cancellationSignal,\n  >                     final WriteResultCallback callback) {\n  >     // Iterate over each page of the document,\n  >     // check if it's in the output range.\n  >     for (int i = 0; i < totalPages; i++) {\n  >         // Check to see if this page is in the output range.\n  >         if (containsPage(pageRanges, i)) {\n  >             // If so, add it to writtenPagesArray. writtenPagesArray.size()\n  >             // is used to compute the next output page index.\n  >             writtenPagesArray.append(writtenPagesArray.size(), i);\n  >             PdfDocument.Page page = mPdfDocument.startPage(i);\n  >\n  >             // check for cancellation\n  >             if (cancellationSignal.isCancelled()) {\n  >                 callback.onWriteCancelled();\n  >                 mPdfDocument.close();\n  >                 mPdfDocument = null;\n  >                 return;\n  >             }\n  >\n  >             // Draw page content for printing\n  >             drawPage(page);\n  >\n  >             // Rendering is complete, so page can be finalized.\n  >             mPdfDocument.finishPage(page);\n  >         }\n  >     }\n  >\n  >     // Write PDF document to file\n  >     try {\n  >         mPdfDocument.writeTo(new FileOutputStream(\n  >                 destination.getFileDescriptor()));\n  >     } catch (IOException e) {\n  >         callback.onWriteFailed(e.toString());\n  >         return;\n  >     } finally {\n  >         mPdfDocument.close();\n  >         mPdfDocument = null;\n  >     }\n  >     PageRange[] writtenPages = computeWrittenPages();\n  >     // Signal the print framework the document is complete\n  >     callback.onWriteFinished(writtenPages);\n  >\n  >     ...\n  > }\n  > ```\n  >\n  > Pdf文档生成\n  >\n  > ```java\n  > private void drawPage(PdfDocument.Page page) {\n  >     Canvas canvas = page.getCanvas();\n  >\n  >     // units are in points (1/72 of an inch)\n  >     int titleBaseLine = 72;\n  >     int leftMargin = 54;\n  >\n  >     Paint paint = new Paint();\n  >     paint.setColor(Color.BLACK);\n  >     paint.setTextSize(36);\n  >     canvas.drawText(\"Test Title\", leftMargin, titleBaseLine, paint);\n  >\n  >     paint.setTextSize(11);\n  >     canvas.drawText(\"Test paragraph\", leftMargin, titleBaseLine + 25, paint);\n  >\n  >     paint.setColor(Color.BLUE);\n  >     canvas.drawRect(100, 100, 172, 172, paint);\n  > }\n  > ```\n  >\n  > **注意，canvas绘图使用point为单位**\n\n","source":"_posts/第三篇、Android多媒体.md","raw":"---\ntitle: \"Android多媒体\"\ndate: 2017-03-27 16:57\nauthor: 冰路梦\ntag:\n    - Android\ncategories:\n    - Android\n---\n## 第三章、Android多媒体\n\n### 1. 管理音频播放\n\n- #### 控制音量与音频播放\n\n  应用若使用音频功能，应保证App获取音频焦点，不造成多个应用声音混杂，且可响应音频按钮事件。\n\n  > - Android有播放音乐、闹铃、通知、来电等等不同的音频流，需要独立鉴别。\n  >\n  >   音量按钮会调节当前音频流，若无，则调节响铃。Android 中`setVolumeControlStream()`方法控制音频流。一般在Activity或Fragment的`onCreate()`中调用它。如：\n  >\n  > ```java\n  > setVolumeControlStream(AudioManager.STREAM_MUSIC);\n  > ```\n  >\n  > - **响应按键事件**，硬件的音控按钮会激活系统广播`ACTION_MEDIA_BUTTON`的Intent，App需要有receiver在manifest中：\n  >\n  > ```xml\n  > <receiver android:name=\".RemoteControlReceiver\">\n  > \t<intent-filter>\n  >   \t\t<action android:name=\"android.intent.action.MEDIA_BUTTON\"/>\n  >   \t</intent-filter>\n  > </receiver>\n  > ```\n  >\n  > - *Receiver接收广播，过滤Action，可以通过`EXTRA_KEY_EVENT`区分按钮*，如：\n  >\n  > ```java\n  > public class RemoteControlReceiver extends BroadcastReceiver{\n  >   @override\n  >   public void onReceive(Context context,Intent intent){\n  >     KeyEvent event = (KeyEvent)intent.getParcelableExtra(Intent,EXTRA_KEY_EVENT);\n  >     if(KeyEvent.KEYCODE_MEDIA_PLAY==event.getKeyCode()){\n  >       //处理按钮Play的点击事件\n  >       ...\n  >     }\n  >   }\n  > }\n  > ```\n  >\n  > `注意，可能有多个程序监听按钮`，可以通过AudioManager管理App注册监听与取消。\n  >\n  > ```java\n  > AudioManager am = mContext.getSystemService(Context.AUDIO_SERVICE);\n  > ...\n  >   //开启监听\n  > am.registerMediaButtonEventReceiver(RemoteControlReceiver);\n  > ...\n  >   //取消监听\n  > am.unregisterMediaButtonEventReceiver(RemoteControlReceiver);\n  > ```\n  >\n  > **音频的控制，并不一定是Activity可见不可见来决定**，正确的方法是判断App获取/失去音频流焦点的状态。\n\n- #####  管理音频焦点\n\n  Android中只有获取音频流焦点的App方能控制音频。\n\n  - 注意点：1、请求焦点；2、获取焦点；3、监控焦点状态，并作相应处理。\n\n  > ```java\n  > requestAudioFocus();//请求焦点，成功则返回AUDIOFOCUS_REQUEST_GRANTED\n  > //需要制定当前音频流，并明确焦点获取是临时`Transient`，还是永久`Permanent`。\n  > AudioManager am = mContext.getSystemService(Context.AUDIO_SERVICE);\n  > ...\n  > // 请求音频焦点，指定当前音频流为music，传入请求参数。\n  > int result = am.requestAudioFocus(afChangeListener,AudioManager.STREAM_MUSIC,AudioManager.AUDIOFOCUS_GAIN);\n  > if (result == AudioManager.AUDIOFOCUS_REQUEST_GRANTED) {  am.registerMediaButtonEventReceiver(RemoteControlReceiver);\n  >     // 开始播放\n  > }\n  > ...\n  > //释放焦点的方法\n  >   am.abandonAudioFocus(afChangeListener);\n  > ```\n  >\n  > 一旦结束播放，确保调用`abandonAudioFocus()`来释放焦点和监听AudioManager.OnAudioFocusChangeListener。\n  >\n  > - **在使用临时焦点时候，可选择设置`Ducking`开启，则其他音频流不会停止，而只是变为背景音**\n  >\n  > ```java\n  > int result = am.requestAudioFocus(afChangeListener,AudioManager.STERAM_MUSIC,AudioManager.AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK);//开启Ducking\n  > if(result == AudioManager.AUDIOFOCUS_REQUEST_GRANTED){\n  >   //paly music And other app maybe playing too。\n  > }//若其他app也是Ducking，则本App可以监听它的焦点状态。\n  > ```\n  >\n  > _音频焦点状态变化的监听_ `onAudioFocusChange()`，三种状态，永久，临时，Ducking式。\n  >\n  > ```java\n  > OnAudioFocusChangeListener afChangeListener = new OnAudioFocusChangeListener(){\n  >   public void onAudioFocusChange(int focusChange){\n  >     if(focusChange == AUDIOFOCUS_LOSS_TRANSIENT){\n  >       //暂停播放\n  >       \n  >     }else if(focusChange == AudioManger.AUDIOFOCUS_GAIN){\n  >       //重新播放\n  >     }else if(focusChange == AudioManager.AUDIOFOCUS_LOSS){\n  >      am.unregisterMediaButtonEventReceiver(RemoteControlReceiver);\n  >       am.abandonAudioFocus(afChangeListener);\n  >       //停止播放\n  >     }\n  >   }\n  > }\n  > ```\n  >\n  > - **Duck！**\n  >\n  > 对音频流使用Ducking状态，会是之变为背景式音频。\n  >\n  > ```java\n  > OnAudioFocusChangeListener afChangeListener = new OnAudioFocusChangeListener() {\n  >     public void onAudioFocusChange(int focusChange) {\n  >         if (focusChange == AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK) {\n  >             //Ducking 状态，降低音量，背景音播放\n  >         } else if (focusChange == AudioManager.AUDIOFOCUS_GAIN) {\n  >             // 恢复正常音量播放\n  >         }\n  >     }\n  > };\n  > ```\n\n- ###### 兼容音频输出设备\n\n  检测正使用的硬件设备:`Audio Manager`\n\n  > ```java\n  > if (isBluetoothA2dpOn()) {\n  >     // Adjust output for Bluetooth.\n  > } else if (isSpeakerphoneOn()) {\n  >     // Adjust output for Speakerphone.\n  > } else if (isWiredHeadsetOn()) {\n  >     // Adjust output for headsets\n  > } else { \n  >     // If audio plays and noone can hear it, is it still playing?\n  > }\n  > ```\n  >\n  > 当音频设备变化时候，要监听改变`ACTION_AUDIO_BECOMING_NOISY`系统广播的intent。App需要有receiver\n  >\n  > ```java\n  > private class NoisyAudioStreamReceiver extends BroadcastReceiver{\n  >   @override\n  >   public void onReceive(Context context,Intent intent){\n  >     if(AudioManager.ACTION_AUDIO_BECOMING_NOISY.equals(intent.getAction())){\n  >      //接收到音频输出设备变化，暂停播放 \n  >     }\n  >   }\n  > }\n  > private IntentFilter intentFilter = new IntentFilter(AudioManager.ACITON_AUDIO_BECOMING_NOISY);\n  > private void startPlayback() {\n  >     registerReceiver(myNoisyAudioStreamReceiver(), intentFilter);\n  > }\n  >\n  > private void stopPlayback() {\n  >     unregisterReceiver(myNoisyAudioStreamReceiver);\n  > }\n  > ```\n\n### 2.拍照\n\n- #### 简单的拍照\n\n  >1、请求相机权限\n  >\n  >```xml\n  ><manifest ...>\n  >  <!-- 在清单文件中加入该属性，向用户声明本App需要相机权限。 -->\n  >\t<uses-feature android:name=\"android.hardware.camera\"\n  >                  android:required=\"true\"/>\n  >  <!-- 自动聚焦 -->\n  >   <uses-feature android:name=\"android.hardware.camera.autofocus\" />\n  >  <!-- 调用相机需要的权限 -->\n  >  \n  >  <uses-permission android:name=\"android.permission.CAMERA\" />\n  ></manifest>\n  >```\n  >\n  >本App若非必须有相机，`required`可以设置false。代码中可以用`hasSystemFeature(PackageManager.FEATURE_CAMERA)`来检查是否有camera硬件。\n  >\n  >2、调用系统相机拍照。\n  >\n  >```java\n  >static final int REQUEST_IMAGE_CAPTURE=1;//请求码\n  >private void dispatchTakePictureIntent(){\n  >  //调用相机的intent\n  >  Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\n  >  //检查有没有能处理该intent的Activity，以免下面startActivity会空指针，而崩溃\n  >  if(takePictureIntent.resolveActivity(getPackageManager()) !=null){\n  >    startActivityForResult(takePictureIntent,REQUEST_IMAGE_CAPTURE);\n  >  }\n  >}\n  >```\n  >\n  >3、获取缩略图\n  >\n  >Android相机将拍摄好的照片缩小为Bitmap，返回给调用的activity，`key-value`键值对形式将数据绑定到intent返回。`data` key值\n  >\n  >```java\n  >@Override\n  >protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n  >    if (requestCode == REQUEST_IMAGE_CAPTURE && resultCode == RESULT_OK) {\n  >        Bundle extras = data.getExtras();//获取bundle对象\n  >        Bitmap imageBitmap = (Bitmap) extras.get(\"data\");//key值，获取缩略图\n  >        mImageView.setImageBitmap(imageBitmap);\n  >    }\n  >}\n  >```\n  >\n  >4、获取全尺寸照片\n  >\n  >Android一般会保存原始照片数据到指定文件夹下。通常为`DIRECTORY_PICTURES`对应的文件目录，需要读写SD卡的权限。\n  >\n  >```xml\n  ><manifest ...>\n  >\t<uses_permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"/>\n  >  \t<!-- 一般有写入权限，就默认会有读取权限了 -->\n  ></manifest>\n  >```\n  >\n  >`getExternalFilesDir()`私有目录，`getExternalStoragePublicDirectory()`共有目录，接收参数`DIRECTORY_PICTURES`标明是图片文件夹。\n  >\n  >**注意文件的保存，需要防止命名冲突，一般会加入时间戳来避免该问题。**\n  >\n  >```java\n  >String mCurrentPhotoPath;\n  >\n  >private File createImageFile() throws IOException {\n  >    // 创建图片文件\n  >    String timeStamp = new SimpleDateFormat(\"yyyyMMdd_HHmmss\").format(new Date());\n  >    String imageFileName = \"JPEG_\" + timeStamp + \"_\";\n  >    File storageDir = Environment.getExternalStoragePublicDirectory(\n  >            Environment.DIRECTORY_PICTURES);\n  >    File image = File.createTempFile(\n  >        imageFileName,  /* prefix */\n  >        \".jpg\",         /* suffix */\n  >        storageDir      /* directory */\n  >    );\n  >\n  >    // Save a file: path for use with ACTION_VIEW intents\n  >    mCurrentPhotoPath = \"file:\" + image.getAbsolutePath();\n  >    return image;\n  >}\n  >```\n  >\n  >使用如上方法，来创建新的照片文件：\n  >\n  >```java\n  >static final int REQUEST_TAKE_PHOTO = 1;\n  >\n  >private void dispatchTakePictureIntent() {\n  >    Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\n  >    // 判断是否有可以处理拍照的Activity\n  >    if (takePictureIntent.resolveActivity(getPackageManager()) != null) {\n  >        // 创建照片文件\n  >        File photoFile = null;\n  >        try {\n  >            photoFile = createImageFile();\n  >        } catch (IOException ex) {\n  >            // 创建文件异常\n  >            ...\n  >        }\n  >        // 照片创建成功的话，完成照片存储。\n  >        if (photoFile != null) {\n  >            takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT,\n  >                    Uri.fromFile(photoFile));\n  >            startActivityForResult(takePictureIntent, REQUEST_TAKE_PHOTO);\n  >        }\n  >    }\n  >}\n  >```\n  >\n  >5、如果照片目录不是私有，那么需要通知系统，将照片显示到公开目录中,让mediaScanner可以扫描到。\n  >\n  >```java\n  >private void galleryAddPic() {\n  >  //intent\n  >    Intent mediaScanIntent = new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE);\n  >    File f = new File(mCurrentPhotoPath);\n  >    Uri contentUri = Uri.fromFile(f);\n  >  //发送广播，\n  >    mediaScanIntent.setData(contentUri);\n  >    this.sendBroadcast(mediaScanIntent);\n  >}\n  >```\n  >\n  >6、图片缩放\n  >\n  >多数情况下不需要全尺寸的清晰图片显示，也为了避免内存消耗，使用图片缩放：\n  >\n  >```java\n  >private void setPic() {\n  >    // 1、获取需要显示图片的view控件的大小。\n  >    int targetW = mImageView.getWidth();\n  >    int targetH = mImageView.getHeight();\n  >\n  >    // 2、获取需要显示的图片的尺寸\n  >    BitmapFactory.Options bmOptions = new BitmapFactory.Options();\n  >    bmOptions.inJustDecodeBounds = true;\n  >    BitmapFactory.decodeFile(mCurrentPhotoPath, bmOptions);\n  >    int photoW = bmOptions.outWidth;\n  >    int photoH = bmOptions.outHeight;\n  >\n  >    // 3、计算缩放比，根据宽高\n  >    int scaleFactor = Math.min(photoW/targetW, photoH/targetH);\n  >\n  >    // 4、缩放图片\n  >    bmOptions.inJustDecodeBounds = false;//\n  >    bmOptions.inSampleSize = scaleFactor;//缩放比\n  >    bmOptions.inPurgeable = true;//\n  >\t//完成图片缩放\n  >    Bitmap bitmap = BitmapFactory.decodeFile(mCurrentPhotoPath, bmOptions);\n  >    mImageView.setImageBitmap(bitmap);\n  >}\n  >```\n\n- #### 简单的录像\n\n  > 1、请求相机权限\n  >\n  > ```xml\n  > <manifest ... >\n  >     <uses-feature android:name=\"android.hardware.camera\"\n  >                   android:required=\"true\" />\n  >    <uses-feature android:name=\"android.hardware.camera.autofocus\" />\n  >     ...\n  > </manifest>\n  > ```\n  >\n  > 2、通过Intent来录制视频,Action是`MediaStore.ACTION_VIDEO_CAPTURE`\n  >\n  > ```java\n  > static final int REQUEST_VIDEO_CAPTURE = 1;\n  >\n  > private void dispatchTakeVideoIntent() {\n  >     Intent takeVideoIntent = new Intent(MediaStore.ACTION_VIDEO_CAPTURE);\n  >   //判断是否有可用录像程序\n  >     if (takeVideoIntent.resolveActivity(getPackageManager()) != null) {\n  >         startActivityForResult(takeVideoIntent, REQUEST_VIDEO_CAPTURE);\n  >     }\n  > }\n  > ```\n  >\n  > 3、接收返回的视频数据\n  >\n  > ```java\n  > @Override\n  > protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n  >     if (requestCode == REQUEST_VIDEO_CAPTURE && resultCode == RESULT_OK) {\n  >       //获取视频文件保存的uri\n  >         Uri videoUri = intent.getData();\n  >         mVideoView.setVideoURI(videoUri);\n  >     }\n  > }\n  > ```\n\n- #### 控制相机硬件\n\n  > 1、此处提供给有特殊需要的app来调用Camera硬件，实现自定义的拍照与录像功能。\n  >\n  > - `onCreate()`中开启线程打开相机。\n  >\n  > - 或者在`onResume()`中开启相机\n  >\n  > - 要检测Camera是否可用，被占用\n  >\n  >   ```java\n  >   private boolean safeCameraOpen(int id) {\n  >       boolean qOpened = false;\n  >       try {\n  >         //先释放，再打开，在此捕获异常\n  >           releaseCameraAndPreview();\n  >           mCamera = Camera.open(id);//相机id，默认后置摄像头。\n  >           qOpened = (mCamera != null);\n  >       } catch (Exception e) {\n  >           Log.e(getString(R.string.app_name), \"failed to open Camera\");\n  >           e.printStackTrace();\n  >       }\n  >\n  >       return qOpened;    \n  >   }\n  >   //释放相机资源\n  >   private void releaseCameraAndPreview() {\n  >       mPreview.setCamera(null);\n  >       if (mCamera != null) {\n  >           mCamera.release();\n  >           mCamera = null;\n  >       }\n  >   }\n  >   ```\n  >\n  > 2、创建相机预览界面，使用`SurfaceView`实现\n  >\n  > ```java\n  > class Preview extends ViewGroup implements SurfaceHolder.Callback {\n  >\n  >     SurfaceView mSurfaceView;//surface view\n  >     SurfaceHolder mHolder;// surface holder\n  > \t//构造函数，初始化数据\n  >     Preview(Context context) {\n  >         super(context);\n  >\n  >         mSurfaceView = new SurfaceView(context);\n  >         addView(mSurfaceView);\n  >\n  >         // 注册surfaceholder的callback，监控surfaceView的创建与销毁。\n  >         mHolder = mSurfaceView.getHolder();\n  >         mHolder.addCallback(this);\n  >         mHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);\n  >     }\n  > ...\n  > }\n  > ```\n  >\n  > ==Preview类的对象，必须在开始预览之前就传递给Camera对象。==\n  >\n  > $Camera 和Preview必须依照特定顺序来创建$。首先创建Camera对象，示例：\n  >\n  > ```java\n  > public void setCamera(Camera camera) {\n  >     if (mCamera == camera) { return; }\n  > \t//停止预览，释放camera对象\n  >     stopPreviewAndFreeCamera();\n  > \t//重新引用camera\n  >     mCamera = camera;\n  > \t//对象非空时候，开启预览\n  >     if (mCamera != null) {\n  >         List<Size> localSizes = mCamera.getParameters().getSupportedPreviewSizes();\n  >         mSupportedPreviewSizes = localSizes;\n  >         requestLayout();\n  >         try {\n  >             mCamera.setPreviewDisplay(mHolder);\n  >         } catch (IOException e) {\n  >             e.printStackTrace();\n  >         }\n  >         // 重要：开启预览，才能拍照。\n  >         mCamera.startPreview();\n  >     }\n  > }\n  > ```\n  >\n  > 3、修改相机设置\n  >\n  > 由于是控制camera硬件，可以设置拍照方式、曝光补偿等。\n  >\n  > ```java\n  > public void surfaceChanged(SurfaceHolder holder, int format, int w, int h) {\n  >     // 设置预览大小\n  >     Camera.Parameters parameters = mCamera.getParameters();\n  >     parameters.setPreviewSize(mPreviewSize.width, mPreviewSize.height);\n  >     requestLayout();\n  >     mCamera.setParameters(parameters);\n  > \t\n  >     //先开启预览，才能调用拍照。\n  >     mCamera.startPreview();\n  > }\n  > //set CameraDisplayOrientation()设置预览方向，横竖屏。\n  > ```\n  >\n  > 4、拍照\n  >\n  > 预览后，才能调用拍照。`Camera.takePicture()`方法。创建`Camera.PictureCallback`和`Camera.ShutterCallback`对象，传递给`Camera.takePicture()`。\n  >\n  > 若要连续拍摄，创建`Camera.PreviewCallback`实现`onPreviewFrame()`方法。如此可以拍摄选定的预览帧，或调用`takePicture()`建立延迟。\n  >\n  > 5、重启Preview\n  >\n  > ==拍照后，需要重启预览==\n  >\n  > ```java\n  > @Override\n  > public void onClick(View v) {\n  >     switch(mPreviewState) {\n  >     case K_STATE_FROZEN://预览\n  >         mCamera.startPreview();\n  >         mPreviewState = K_STATE_PREVIEW;\n  >         break;\n  >     default://拍照\n  >         mCamera.takePicture( null, rawCallback, null);\n  >         mPreviewState = K_STATE_BUSY;\n  >     } // switch\n  >     shutterBtnConfig();\n  > }\n  > ```\n  >\n  > 6、停止预览并释放相机\n  >\n  > 使用Camera后，必须释放资源，以备下次调用或者其他应用使用。一般在Surface被毁后，释放预览和相机。\n  >\n  > ```java\n  > public void surfaceDestroyed(SurfaceHolder holder) {\n  >     // Surface将会销毁，需在此停止预览\n  >     if (mCamera != null) {\n  >         // 停止预览\n  >         mCamera.stopPreview();\n  >     }\n  > }\n  > /**\n  >  * 释放Camera资源\n  >  */\n  > private void stopPreviewAndFreeCamera() {\n  >     if (mCamera != null) {\n  >         //停止预览\n  >         mCamera.stopPreview();\n  >         //重要，停止使用Camera后，必须释放对象资源，在onPause()释放，onResume()重启。\n  >         mCamera.release();\n  >         mCamera = null;\n  >     }\n  > }\n  > ```\n\n### 3、打印\n\nAndroid支持创建pdf文件，打印图片，html和文字。\n\n- #### 打印照片\n\n  > *PrintHelper*类打印图片，AndroidSupportLibrary提供的类库。\n  >\n  > 1、打印一幅图片\n  >\n  > `setScaleMode()`方法，接收两个选项之一：\n  >\n  > - SCALE_MODE_FIT,图片适应打印纸\n  > - SCALE_MODE_FILL,充满整个纸张，可能会与部分图片无法显示出来。\n  >\n  > ```java\n  > private void doPhotoPrint(){\n  >   PrintHelper photoPrinter = new PrintHelper(getActivity());\n  >   photoPrinter.setScaleMode(PrintHelper.SCALE_MODE_FIT);\n  >   Bitmap bitmap = BitmapFactory.decodeResource(getResource(),R.drawable.iclauncher);\n  >   photoPrinter.printBitmap(\"icLaunchetr.jpg 测试打印\",bitmap);\n  > }\n  > ```\n\n- #### 打印html文档\n\n  > android提供了html文档方式，来实现更为丰富的文本打印输出。\n  >\n  > 1、加载Html文档\n  >\n  > 使用`webView`加载html资源，`webview`被作为activity布局的一部分，若是app没有用到该view，则需要创建该对象，来实现html文档：\n  >\n  > - 加载html文档后，创建一个`WebViewClient`对象，来启动打印任务。\n  > - 加载html到`WebView`对象中。\n  >\n  > ```java\n  > private WebView mWebView;\n  > private void doWebViewPrint(){\n  >   //创建webview对象，用于打印\n  >   WebView webView = new WebView(getActivity());\n  >   webView.setWebViewClient(new WebViewClient(){\n  >     public boolean shouldOverrideUrlLoading(WebView view,String url){\n  >       return false;\n  >     }\n  >     @override\n  >     public void onPageFinished(WebView view ,String url){\n  >       Log.i(TAG,\"html页面加载完毕\"+url);\n  >       //调用打印，加载完毕后才调用，否则会不完整，或者失败。\n  >       createWebPrintJob(view);\n  >       mWebView = null;\n  >     }\n  >   });\n  >   //创建一个html文档\n  >     String htmlDocument = \"<html><body><h1>Test Content</h1><p>Testing, \" +\n  >             \"testing, testing...</p></body></html>\";\n  >     webView.loadDataWithBaseURL(null, htmlDocument, \"text/HTML\", \"UTF-8\", null);\n  >\n  >     // 保持web View的对象引用，知道适配器打印完毕。\n  >     mWebView = webView;\n  > }\n  > //要是html需要包含图像，放在“assets/”目录下,指定URL，\n  > webView.loadDataWithBaseURL(\"file:///android_asset/images/\",htmlBody,\"text/HTML\",\"utf-8\",null);\n  > //或者加载一个网页，需要网络权限。\n  > webView.loadUrl(\"http://developer.android.com/about/index.html\");\n  > ```\n  >\n  > ==Web View打印文档会有限制：==\n  >\n  > - 不能添加页眉、页脚、页码\n  > - 不能指定打印页码范围\n  > - 一个Web View对象，只能同时处理一个任务。\n  > - 不支持html的css属性。\n  > - html的javaScript无法调用打印。\n  >\n  > 2、创建打印任务\n  >\n  > ```java\n  > private void createWebPrintJob(WebView webView) {\n  >     // 获取Print Manager实例\n  >     PrintManager printManager = (PrintManager) getActivity()\n  >             .getSystemService(Context.PRINT_SERVICE);\n  >     // 获取PrintAdapter实例\n  >     PrintDocumentAdapter printAdapter = webView.createPrintDocumentAdapter();\n  >     // 创建打印任务，传递给Printadapter，\n  >     String jobName = getString(R.string.app_name) + \" Document\";\n  >     PrintJob printJob = printManager.print(jobName, printAdapter,\n  >             new PrintAttributes.Builder().build());\n  >     // 完成任务配置，加入打印列表。\n  >     mPrintJobs.add(printJob);\n  > }\n  > ```\n\n- #### 打印自定义文档\n\n  > 1、连接打印管理器，来创建打印任务\n  >\n  > ```java\n  > private void doPrint() {\n  >     // Get a PrintManager instance\n  >     PrintManager printManager = (PrintManager) getActivity()\n  >             .getSystemService(Context.PRINT_SERVICE);\n  >     // Set job name, which will be displayed in the print queue\n  >     String jobName = getActivity().getString(R.string.app_name) + \" Document\";\n  >     // Start a print job, passing in a PrintDocumentAdapter implementation\n  >     // to handle the generation of a print document\n  >     printManager.print(jobName, new MyPrintDocumentAdapter(getActivity()),\n  >             null); //最后的参数是PrintAttributes，打印机属性设置。\n  > }\n  > ```\n  >\n  > 2、创建打印机适配器\n  >\n  > `PrintDocumentAdapter`负责打印生命周期，\n  >\n  > - onStart():开始打印，非必需实现的方法，因为总会被调用。\n  > - onLayout(): 用户设置页面布局，尺寸之类的，会调用该函数。\n  > - onWrite(): 将打印文件渲染成待打印状态，可以在onLayout()中多次调用该方法。\n  > - onFinish(): 完成打印，非必需实现。\n  >\n  > 调用onLayout()和onWrite()，尽量写入一个异步进程中，因为可能耗时。\n  >\n  > 3、计算打印文档信息\n  >\n  > 在Print Document Adapter的实现时，需要指定文档类型，计算页数，尺寸之类的信息。\n  >\n  > 在onLayout()中计算这些数据，可从PrintDocumentInfo中获取。\n  >\n  > ```java\n  > @Override\n  > public void onLayout(PrintAttributes oldAttributes,\n  >                      PrintAttributes newAttributes,\n  >                      CancellationSignal cancellationSignal,\n  >                      LayoutResultCallback callback,\n  >                      Bundle metadata) {\n  >     // Create a new PdfDocument with the requested page attributes\n  >     mPdfDocument = new PrintedPdfDocument(getActivity(), newAttributes);\n  >\n  >     // Respond to cancellation request\n  >     if (cancellationSignal.isCancelled() ) {\n  >         callback.onLayoutCancelled();\n  >         return;\n  >     }\n  >\n  >     // Compute the expected number of printed pages\n  >     int pages = computePageCount(newAttributes);\n  >\n  >     if (pages > 0) {\n  >         // Return print information to print framework\n  >         PrintDocumentInfo info = new PrintDocumentInfo\n  >                 .Builder(\"print_output.pdf\")\n  >                 .setContentType(PrintDocumentInfo.CONTENT_TYPE_DOCUMENT)\n  >                 .setPageCount(pages);\n  >                 .build();\n  >         // Content layout reflow is complete\n  >         callback.onLayoutFinished(info, true);\n  >     } else {\n  >         // Otherwise report an error to the print framework\n  >         callback.onLayoutFailed(\"Page count calculation failed.\");\n  >     }\n  > }\n  > ```\n  >\n  > `onLayout()`方法返回结果：完成、取消、失败。必须通过调用PrintDocumentAdapter.LayoutResultCallback对象中的方法指定结果。在`onLayoutFinished()`方法中==boolean的参数==，指明是否与上次布局不同，来决定时候再次调用`onWrite()`方法。\n  >\n  > `onLayout()`计算文档相关数据\n  >\n  > ```java\n  > private int computePageCount(PrintAttributes printAttributes) {\n  >     int itemsPerPage = 4; // default item count for portrait mode\n  >\n  >     MediaSize pageSize = printAttributes.getMediaSize();\n  >     if (!pageSize.isPortrait()) {\n  >         // Six items per page in landscape orientation\n  >         itemsPerPage = 6;\n  >     }\n  >\n  >     // Determine number of print items\n  >     int printItemCount = getPrintItemCount();\n  >\n  >     return (int) Math.ceil(printItemCount / itemsPerPage);\n  > }\n  > ```\n  >\n  > 4、将打印文档写入文件\n  >\n  > 如下代码展示使用`PrintedPdfDocument`类创建pdf文档的基本原理\n  >\n  > ```java\n  > @Override\n  > public void onWrite(final PageRange[] pageRanges,\n  >                     final ParcelFileDescriptor destination,\n  >                     final CancellationSignal cancellationSignal,\n  >                     final WriteResultCallback callback) {\n  >     // Iterate over each page of the document,\n  >     // check if it's in the output range.\n  >     for (int i = 0; i < totalPages; i++) {\n  >         // Check to see if this page is in the output range.\n  >         if (containsPage(pageRanges, i)) {\n  >             // If so, add it to writtenPagesArray. writtenPagesArray.size()\n  >             // is used to compute the next output page index.\n  >             writtenPagesArray.append(writtenPagesArray.size(), i);\n  >             PdfDocument.Page page = mPdfDocument.startPage(i);\n  >\n  >             // check for cancellation\n  >             if (cancellationSignal.isCancelled()) {\n  >                 callback.onWriteCancelled();\n  >                 mPdfDocument.close();\n  >                 mPdfDocument = null;\n  >                 return;\n  >             }\n  >\n  >             // Draw page content for printing\n  >             drawPage(page);\n  >\n  >             // Rendering is complete, so page can be finalized.\n  >             mPdfDocument.finishPage(page);\n  >         }\n  >     }\n  >\n  >     // Write PDF document to file\n  >     try {\n  >         mPdfDocument.writeTo(new FileOutputStream(\n  >                 destination.getFileDescriptor()));\n  >     } catch (IOException e) {\n  >         callback.onWriteFailed(e.toString());\n  >         return;\n  >     } finally {\n  >         mPdfDocument.close();\n  >         mPdfDocument = null;\n  >     }\n  >     PageRange[] writtenPages = computeWrittenPages();\n  >     // Signal the print framework the document is complete\n  >     callback.onWriteFinished(writtenPages);\n  >\n  >     ...\n  > }\n  > ```\n  >\n  > Pdf文档生成\n  >\n  > ```java\n  > private void drawPage(PdfDocument.Page page) {\n  >     Canvas canvas = page.getCanvas();\n  >\n  >     // units are in points (1/72 of an inch)\n  >     int titleBaseLine = 72;\n  >     int leftMargin = 54;\n  >\n  >     Paint paint = new Paint();\n  >     paint.setColor(Color.BLACK);\n  >     paint.setTextSize(36);\n  >     canvas.drawText(\"Test Title\", leftMargin, titleBaseLine, paint);\n  >\n  >     paint.setTextSize(11);\n  >     canvas.drawText(\"Test paragraph\", leftMargin, titleBaseLine + 25, paint);\n  >\n  >     paint.setColor(Color.BLUE);\n  >     canvas.drawRect(100, 100, 172, 172, paint);\n  > }\n  > ```\n  >\n  > **注意，canvas绘图使用point为单位**\n\n","slug":"第三篇、Android多媒体","published":1,"updated":"2017-03-28T09:42:27.486Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ndxce2003g88owh3mgfod1","content":"<h2 id=\"第三章、Android多媒体\"><a href=\"#第三章、Android多媒体\" class=\"headerlink\" title=\"第三章、Android多媒体\"></a>第三章、Android多媒体</h2><h3 id=\"1-管理音频播放\"><a href=\"#1-管理音频播放\" class=\"headerlink\" title=\"1. 管理音频播放\"></a>1. 管理音频播放</h3><ul>\n<li><h4 id=\"控制音量与音频播放\"><a href=\"#控制音量与音频播放\" class=\"headerlink\" title=\"控制音量与音频播放\"></a>控制音量与音频播放</h4><p>应用若使用音频功能，应保证App获取音频焦点，不造成多个应用声音混杂，且可响应音频按钮事件。</p>\n<blockquote>\n<ul>\n<li><p>Android有播放音乐、闹铃、通知、来电等等不同的音频流，需要独立鉴别。</p>\n<p>音量按钮会调节当前音频流，若无，则调节响铃。Android 中<code>setVolumeControlStream()</code>方法控制音频流。一般在Activity或Fragment的<code>onCreate()</code>中调用它。如：</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; setVolumeControlStream(AudioManager.STREAM_MUSIC);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><strong>响应按键事件</strong>，硬件的音控按钮会激活系统广播<code>ACTION_MEDIA_BUTTON</code>的Intent，App需要有receiver在manifest中：</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"tag\">&lt;<span class=\"name\">receiver</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\".RemoteControlReceiver\"</span>&gt;</span></div><div class=\"line\">&gt; \t<span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">&gt;   \t\t<span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.MEDIA_BUTTON\"</span>/&gt;</span></div><div class=\"line\">&gt;   \t<span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">&gt; <span class=\"tag\">&lt;/<span class=\"name\">receiver</span>&gt;</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><em>Receiver接收广播，过滤Action，可以通过<code>EXTRA_KEY_EVENT</code>区分按钮</em>，如：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RemoteControlReceiver</span> <span class=\"keyword\">extends</span> <span class=\"title\">BroadcastReceiver</span></span>&#123;</div><div class=\"line\">&gt;   <span class=\"meta\">@override</span></div><div class=\"line\">&gt;   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceive</span><span class=\"params\">(Context context,Intent intent)</span></span>&#123;</div><div class=\"line\">&gt;     KeyEvent event = (KeyEvent)intent.getParcelableExtra(Intent,EXTRA_KEY_EVENT);</div><div class=\"line\">&gt;     <span class=\"keyword\">if</span>(KeyEvent.KEYCODE_MEDIA_PLAY==event.getKeyCode())&#123;</div><div class=\"line\">&gt;       <span class=\"comment\">//处理按钮Play的点击事件</span></div><div class=\"line\">&gt;       ...</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt;   &#125;</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><code>注意，可能有多个程序监听按钮</code>，可以通过AudioManager管理App注册监听与取消。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; AudioManager am = mContext.getSystemService(Context.AUDIO_SERVICE);</div><div class=\"line\">&gt; ...</div><div class=\"line\">&gt;   <span class=\"comment\">//开启监听</span></div><div class=\"line\">&gt; am.registerMediaButtonEventReceiver(RemoteControlReceiver);</div><div class=\"line\">&gt; ...</div><div class=\"line\">&gt;   <span class=\"comment\">//取消监听</span></div><div class=\"line\">&gt; am.unregisterMediaButtonEventReceiver(RemoteControlReceiver);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><strong>音频的控制，并不一定是Activity可见不可见来决定</strong>，正确的方法是判断App获取/失去音频流焦点的状态。</p>\n</blockquote>\n</li>\n<li><h5 id=\"管理音频焦点\"><a href=\"#管理音频焦点\" class=\"headerlink\" title=\"管理音频焦点\"></a>管理音频焦点</h5><p>Android中只有获取音频流焦点的App方能控制音频。</p>\n<ul>\n<li>注意点：1、请求焦点；2、获取焦点；3、监控焦点状态，并作相应处理。</li>\n</ul>\n<blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; requestAudioFocus();<span class=\"comment\">//请求焦点，成功则返回AUDIOFOCUS_REQUEST_GRANTED</span></div><div class=\"line\">&gt; <span class=\"comment\">//需要制定当前音频流，并明确焦点获取是临时`Transient`，还是永久`Permanent`。</span></div><div class=\"line\">&gt; AudioManager am = mContext.getSystemService(Context.AUDIO_SERVICE);</div><div class=\"line\">&gt; ...</div><div class=\"line\">&gt; <span class=\"comment\">// 请求音频焦点，指定当前音频流为music，传入请求参数。</span></div><div class=\"line\">&gt; <span class=\"keyword\">int</span> result = am.requestAudioFocus(afChangeListener,AudioManager.STREAM_MUSIC,AudioManager.AUDIOFOCUS_GAIN);</div><div class=\"line\">&gt; <span class=\"keyword\">if</span> (result == AudioManager.AUDIOFOCUS_REQUEST_GRANTED) &#123;  am.registerMediaButtonEventReceiver(RemoteControlReceiver);</div><div class=\"line\">&gt;     <span class=\"comment\">// 开始播放</span></div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt; ...</div><div class=\"line\">&gt; <span class=\"comment\">//释放焦点的方法</span></div><div class=\"line\">&gt;   am.abandonAudioFocus(afChangeListener);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>一旦结束播放，确保调用<code>abandonAudioFocus()</code>来释放焦点和监听AudioManager.OnAudioFocusChangeListener。</p>\n<ul>\n<li><strong>在使用临时焦点时候，可选择设置<code>Ducking</code>开启，则其他音频流不会停止，而只是变为背景音</strong></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">int</span> result = am.requestAudioFocus(afChangeListener,AudioManager.STERAM_MUSIC,AudioManager.AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK);<span class=\"comment\">//开启Ducking</span></div><div class=\"line\">&gt; <span class=\"keyword\">if</span>(result == AudioManager.AUDIOFOCUS_REQUEST_GRANTED)&#123;</div><div class=\"line\">&gt;   <span class=\"comment\">//paly music And other app maybe playing too。</span></div><div class=\"line\">&gt; &#125;<span class=\"comment\">//若其他app也是Ducking，则本App可以监听它的焦点状态。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><em>音频焦点状态变化的监听</em> <code>onAudioFocusChange()</code>，三种状态，永久，临时，Ducking式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; OnAudioFocusChangeListener afChangeListener = <span class=\"keyword\">new</span> OnAudioFocusChangeListener()&#123;</div><div class=\"line\">&gt;   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAudioFocusChange</span><span class=\"params\">(<span class=\"keyword\">int</span> focusChange)</span></span>&#123;</div><div class=\"line\">&gt;     <span class=\"keyword\">if</span>(focusChange == AUDIOFOCUS_LOSS_TRANSIENT)&#123;</div><div class=\"line\">&gt;       <span class=\"comment\">//暂停播放</span></div><div class=\"line\">&gt;       </div><div class=\"line\">&gt;     &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(focusChange == AudioManger.AUDIOFOCUS_GAIN)&#123;</div><div class=\"line\">&gt;       <span class=\"comment\">//重新播放</span></div><div class=\"line\">&gt;     &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(focusChange == AudioManager.AUDIOFOCUS_LOSS)&#123;</div><div class=\"line\">&gt;      am.unregisterMediaButtonEventReceiver(RemoteControlReceiver);</div><div class=\"line\">&gt;       am.abandonAudioFocus(afChangeListener);</div><div class=\"line\">&gt;       <span class=\"comment\">//停止播放</span></div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt;   &#125;</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><strong>Duck！</strong></li>\n</ul>\n<p>对音频流使用Ducking状态，会是之变为背景式音频。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; OnAudioFocusChangeListener afChangeListener = <span class=\"keyword\">new</span> OnAudioFocusChangeListener() &#123;</div><div class=\"line\">&gt;     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAudioFocusChange</span><span class=\"params\">(<span class=\"keyword\">int</span> focusChange)</span> </span>&#123;</div><div class=\"line\">&gt;         <span class=\"keyword\">if</span> (focusChange == AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK) &#123;</div><div class=\"line\">&gt;             <span class=\"comment\">//Ducking 状态，降低音量，背景音播放</span></div><div class=\"line\">&gt;         &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (focusChange == AudioManager.AUDIOFOCUS_GAIN) &#123;</div><div class=\"line\">&gt;             <span class=\"comment\">// 恢复正常音量播放</span></div><div class=\"line\">&gt;         &#125;</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt; &#125;;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><h6 id=\"兼容音频输出设备\"><a href=\"#兼容音频输出设备\" class=\"headerlink\" title=\"兼容音频输出设备\"></a>兼容音频输出设备</h6><p>检测正使用的硬件设备:<code>Audio Manager</code></p>\n<blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">if</span> (isBluetoothA2dpOn()) &#123;</div><div class=\"line\">&gt;     <span class=\"comment\">// Adjust output for Bluetooth.</span></div><div class=\"line\">&gt; &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isSpeakerphoneOn()) &#123;</div><div class=\"line\">&gt;     <span class=\"comment\">// Adjust output for Speakerphone.</span></div><div class=\"line\">&gt; &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isWiredHeadsetOn()) &#123;</div><div class=\"line\">&gt;     <span class=\"comment\">// Adjust output for headsets</span></div><div class=\"line\">&gt; &#125; <span class=\"keyword\">else</span> &#123; </div><div class=\"line\">&gt;     <span class=\"comment\">// If audio plays and noone can hear it, is it still playing?</span></div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>当音频设备变化时候，要监听改变<code>ACTION_AUDIO_BECOMING_NOISY</code>系统广播的intent。App需要有receiver</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NoisyAudioStreamReceiver</span> <span class=\"keyword\">extends</span> <span class=\"title\">BroadcastReceiver</span></span>&#123;</div><div class=\"line\">&gt;   <span class=\"meta\">@override</span></div><div class=\"line\">&gt;   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceive</span><span class=\"params\">(Context context,Intent intent)</span></span>&#123;</div><div class=\"line\">&gt;     <span class=\"keyword\">if</span>(AudioManager.ACTION_AUDIO_BECOMING_NOISY.equals(intent.getAction()))&#123;</div><div class=\"line\">&gt;      <span class=\"comment\">//接收到音频输出设备变化，暂停播放 </span></div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt;   &#125;</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt; <span class=\"keyword\">private</span> IntentFilter intentFilter = <span class=\"keyword\">new</span> IntentFilter(AudioManager.ACITON_AUDIO_BECOMING_NOISY);</div><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">startPlayback</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">&gt;     registerReceiver(myNoisyAudioStreamReceiver(), intentFilter);</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">stopPlayback</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">&gt;     unregisterReceiver(myNoisyAudioStreamReceiver);</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"2-拍照\"><a href=\"#2-拍照\" class=\"headerlink\" title=\"2.拍照\"></a>2.拍照</h3><ul>\n<li><h4 id=\"简单的拍照\"><a href=\"#简单的拍照\" class=\"headerlink\" title=\"简单的拍照\"></a>简单的拍照</h4><blockquote>\n<p>1、请求相机权限</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;<span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">...</span>&gt;</span></div><div class=\"line\">&gt;  <span class=\"comment\">&lt;!-- 在清单文件中加入该属性，向用户声明本App需要相机权限。 --&gt;</span></div><div class=\"line\">&gt;\t<span class=\"tag\">&lt;<span class=\"name\">uses-feature</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.hardware.camera\"</span></span></div><div class=\"line\">&gt;                  android:required=\"true\"/&gt;</div><div class=\"line\">&gt;  <span class=\"comment\">&lt;!-- 自动聚焦 --&gt;</span></div><div class=\"line\">&gt;   <span class=\"tag\">&lt;<span class=\"name\">uses-feature</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.hardware.camera.autofocus\"</span> /&gt;</span></div><div class=\"line\">&gt;  <span class=\"comment\">&lt;!-- 调用相机需要的权限 --&gt;</span></div><div class=\"line\">&gt;  </div><div class=\"line\">&gt;  <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.CAMERA\"</span> /&gt;</span></div><div class=\"line\">&gt;<span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>本App若非必须有相机，<code>required</code>可以设置false。代码中可以用<code>hasSystemFeature(PackageManager.FEATURE_CAMERA)</code>来检查是否有camera硬件。</p>\n<p>2、调用系统相机拍照。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;<span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> REQUEST_IMAGE_CAPTURE=<span class=\"number\">1</span>;<span class=\"comment\">//请求码</span></div><div class=\"line\">&gt;<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchTakePictureIntent</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">&gt;  <span class=\"comment\">//调用相机的intent</span></div><div class=\"line\">&gt;  Intent takePictureIntent = <span class=\"keyword\">new</span> Intent(MediaStore.ACTION_IMAGE_CAPTURE);</div><div class=\"line\">&gt;  <span class=\"comment\">//检查有没有能处理该intent的Activity，以免下面startActivity会空指针，而崩溃</span></div><div class=\"line\">&gt;  <span class=\"keyword\">if</span>(takePictureIntent.resolveActivity(getPackageManager()) !=<span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">&gt;    startActivityForResult(takePictureIntent,REQUEST_IMAGE_CAPTURE);</div><div class=\"line\">&gt;  &#125;</div><div class=\"line\">&gt;&#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>3、获取缩略图</p>\n<p>Android相机将拍摄好的照片缩小为Bitmap，返回给调用的activity，<code>key-value</code>键值对形式将数据绑定到intent返回。<code>data</code> key值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;<span class=\"meta\">@Override</span></div><div class=\"line\">&gt;<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityResult</span><span class=\"params\">(<span class=\"keyword\">int</span> requestCode, <span class=\"keyword\">int</span> resultCode, Intent data)</span> </span>&#123;</div><div class=\"line\">&gt;    <span class=\"keyword\">if</span> (requestCode == REQUEST_IMAGE_CAPTURE &amp;&amp; resultCode == RESULT_OK) &#123;</div><div class=\"line\">&gt;        Bundle extras = data.getExtras();<span class=\"comment\">//获取bundle对象</span></div><div class=\"line\">&gt;        Bitmap imageBitmap = (Bitmap) extras.get(<span class=\"string\">\"data\"</span>);<span class=\"comment\">//key值，获取缩略图</span></div><div class=\"line\">&gt;        mImageView.setImageBitmap(imageBitmap);</div><div class=\"line\">&gt;    &#125;</div><div class=\"line\">&gt;&#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>4、获取全尺寸照片</p>\n<p>Android一般会保存原始照片数据到指定文件夹下。通常为<code>DIRECTORY_PICTURES</code>对应的文件目录，需要读写SD卡的权限。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;<span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">...</span>&gt;</span></div><div class=\"line\">&gt;\t<span class=\"tag\">&lt;<span class=\"name\">uses_permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.WRITE_EXTERNAL_STORAGE\"</span>/&gt;</span></div><div class=\"line\">&gt;  \t<span class=\"comment\">&lt;!-- 一般有写入权限，就默认会有读取权限了 --&gt;</span></div><div class=\"line\">&gt;<span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><code>getExternalFilesDir()</code>私有目录，<code>getExternalStoragePublicDirectory()</code>共有目录，接收参数<code>DIRECTORY_PICTURES</code>标明是图片文件夹。</p>\n<p><strong>注意文件的保存，需要防止命名冲突，一般会加入时间戳来避免该问题。</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;String mCurrentPhotoPath;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;<span class=\"function\"><span class=\"keyword\">private</span> File <span class=\"title\">createImageFile</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">&gt;    <span class=\"comment\">// 创建图片文件</span></div><div class=\"line\">&gt;    String timeStamp = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyyMMdd_HHmmss\"</span>).format(<span class=\"keyword\">new</span> Date());</div><div class=\"line\">&gt;    String imageFileName = <span class=\"string\">\"JPEG_\"</span> + timeStamp + <span class=\"string\">\"_\"</span>;</div><div class=\"line\">&gt;    File storageDir = Environment.getExternalStoragePublicDirectory(</div><div class=\"line\">&gt;            Environment.DIRECTORY_PICTURES);</div><div class=\"line\">&gt;    File image = File.createTempFile(</div><div class=\"line\">&gt;        imageFileName,  <span class=\"comment\">/* prefix */</span></div><div class=\"line\">&gt;        <span class=\"string\">\".jpg\"</span>,         <span class=\"comment\">/* suffix */</span></div><div class=\"line\">&gt;        storageDir      <span class=\"comment\">/* directory */</span></div><div class=\"line\">&gt;    );</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\">// Save a file: path for use with ACTION_VIEW intents</span></div><div class=\"line\">&gt;    mCurrentPhotoPath = <span class=\"string\">\"file:\"</span> + image.getAbsolutePath();</div><div class=\"line\">&gt;    <span class=\"keyword\">return</span> image;</div><div class=\"line\">&gt;&#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>使用如上方法，来创建新的照片文件：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;<span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> REQUEST_TAKE_PHOTO = <span class=\"number\">1</span>;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchTakePictureIntent</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">&gt;    Intent takePictureIntent = <span class=\"keyword\">new</span> Intent(MediaStore.ACTION_IMAGE_CAPTURE);</div><div class=\"line\">&gt;    <span class=\"comment\">// 判断是否有可以处理拍照的Activity</span></div><div class=\"line\">&gt;    <span class=\"keyword\">if</span> (takePictureIntent.resolveActivity(getPackageManager()) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">&gt;        <span class=\"comment\">// 创建照片文件</span></div><div class=\"line\">&gt;        File photoFile = <span class=\"keyword\">null</span>;</div><div class=\"line\">&gt;        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">&gt;            photoFile = createImageFile();</div><div class=\"line\">&gt;        &#125; <span class=\"keyword\">catch</span> (IOException ex) &#123;</div><div class=\"line\">&gt;            <span class=\"comment\">// 创建文件异常</span></div><div class=\"line\">&gt;            ...</div><div class=\"line\">&gt;        &#125;</div><div class=\"line\">&gt;        <span class=\"comment\">// 照片创建成功的话，完成照片存储。</span></div><div class=\"line\">&gt;        <span class=\"keyword\">if</span> (photoFile != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">&gt;            takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT,</div><div class=\"line\">&gt;                    Uri.fromFile(photoFile));</div><div class=\"line\">&gt;            startActivityForResult(takePictureIntent, REQUEST_TAKE_PHOTO);</div><div class=\"line\">&gt;        &#125;</div><div class=\"line\">&gt;    &#125;</div><div class=\"line\">&gt;&#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>5、如果照片目录不是私有，那么需要通知系统，将照片显示到公开目录中,让mediaScanner可以扫描到。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">galleryAddPic</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">&gt;  <span class=\"comment\">//intent</span></div><div class=\"line\">&gt;    Intent mediaScanIntent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE);</div><div class=\"line\">&gt;    File f = <span class=\"keyword\">new</span> File(mCurrentPhotoPath);</div><div class=\"line\">&gt;    Uri contentUri = Uri.fromFile(f);</div><div class=\"line\">&gt;  <span class=\"comment\">//发送广播，</span></div><div class=\"line\">&gt;    mediaScanIntent.setData(contentUri);</div><div class=\"line\">&gt;    <span class=\"keyword\">this</span>.sendBroadcast(mediaScanIntent);</div><div class=\"line\">&gt;&#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>6、图片缩放</p>\n<p>多数情况下不需要全尺寸的清晰图片显示，也为了避免内存消耗，使用图片缩放：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setPic</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">&gt;    <span class=\"comment\">// 1、获取需要显示图片的view控件的大小。</span></div><div class=\"line\">&gt;    <span class=\"keyword\">int</span> targetW = mImageView.getWidth();</div><div class=\"line\">&gt;    <span class=\"keyword\">int</span> targetH = mImageView.getHeight();</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\">// 2、获取需要显示的图片的尺寸</span></div><div class=\"line\">&gt;    BitmapFactory.Options bmOptions = <span class=\"keyword\">new</span> BitmapFactory.Options();</div><div class=\"line\">&gt;    bmOptions.inJustDecodeBounds = <span class=\"keyword\">true</span>;</div><div class=\"line\">&gt;    BitmapFactory.decodeFile(mCurrentPhotoPath, bmOptions);</div><div class=\"line\">&gt;    <span class=\"keyword\">int</span> photoW = bmOptions.outWidth;</div><div class=\"line\">&gt;    <span class=\"keyword\">int</span> photoH = bmOptions.outHeight;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\">// 3、计算缩放比，根据宽高</span></div><div class=\"line\">&gt;    <span class=\"keyword\">int</span> scaleFactor = Math.min(photoW/targetW, photoH/targetH);</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\">// 4、缩放图片</span></div><div class=\"line\">&gt;    bmOptions.inJustDecodeBounds = <span class=\"keyword\">false</span>;<span class=\"comment\">//</span></div><div class=\"line\">&gt;    bmOptions.inSampleSize = scaleFactor;<span class=\"comment\">//缩放比</span></div><div class=\"line\">&gt;    bmOptions.inPurgeable = <span class=\"keyword\">true</span>;<span class=\"comment\">//</span></div><div class=\"line\">&gt;\t<span class=\"comment\">//完成图片缩放</span></div><div class=\"line\">&gt;    Bitmap bitmap = BitmapFactory.decodeFile(mCurrentPhotoPath, bmOptions);</div><div class=\"line\">&gt;    mImageView.setImageBitmap(bitmap);</div><div class=\"line\">&gt;&#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><h4 id=\"简单的录像\"><a href=\"#简单的录像\" class=\"headerlink\" title=\"简单的录像\"></a>简单的录像</h4><blockquote>\n<p>1、请求相机权限</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">...</span> &gt;</span></div><div class=\"line\">&gt;     <span class=\"tag\">&lt;<span class=\"name\">uses-feature</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.hardware.camera\"</span></span></div><div class=\"line\">&gt;                   android:required=\"true\" /&gt;</div><div class=\"line\">&gt;    <span class=\"tag\">&lt;<span class=\"name\">uses-feature</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.hardware.camera.autofocus\"</span> /&gt;</span></div><div class=\"line\">&gt;     ...</div><div class=\"line\">&gt; <span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>2、通过Intent来录制视频,Action是<code>MediaStore.ACTION_VIDEO_CAPTURE</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> REQUEST_VIDEO_CAPTURE = <span class=\"number\">1</span>;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchTakeVideoIntent</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">&gt;     Intent takeVideoIntent = <span class=\"keyword\">new</span> Intent(MediaStore.ACTION_VIDEO_CAPTURE);</div><div class=\"line\">&gt;   <span class=\"comment\">//判断是否有可用录像程序</span></div><div class=\"line\">&gt;     <span class=\"keyword\">if</span> (takeVideoIntent.resolveActivity(getPackageManager()) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">&gt;         startActivityForResult(takeVideoIntent, REQUEST_VIDEO_CAPTURE);</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>3、接收返回的视频数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"meta\">@Override</span></div><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityResult</span><span class=\"params\">(<span class=\"keyword\">int</span> requestCode, <span class=\"keyword\">int</span> resultCode, Intent data)</span> </span>&#123;</div><div class=\"line\">&gt;     <span class=\"keyword\">if</span> (requestCode == REQUEST_VIDEO_CAPTURE &amp;&amp; resultCode == RESULT_OK) &#123;</div><div class=\"line\">&gt;       <span class=\"comment\">//获取视频文件保存的uri</span></div><div class=\"line\">&gt;         Uri videoUri = intent.getData();</div><div class=\"line\">&gt;         mVideoView.setVideoURI(videoUri);</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><h4 id=\"控制相机硬件\"><a href=\"#控制相机硬件\" class=\"headerlink\" title=\"控制相机硬件\"></a>控制相机硬件</h4><blockquote>\n<p>1、此处提供给有特殊需要的app来调用Camera硬件，实现自定义的拍照与录像功能。</p>\n<ul>\n<li><p><code>onCreate()</code>中开启线程打开相机。</p>\n</li>\n<li><p>或者在<code>onResume()</code>中开启相机</p>\n</li>\n<li><p>要检测Camera是否可用，被占用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">safeCameraOpen</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</div><div class=\"line\">&gt;       <span class=\"keyword\">boolean</span> qOpened = <span class=\"keyword\">false</span>;</div><div class=\"line\">&gt;       <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">&gt;         <span class=\"comment\">//先释放，再打开，在此捕获异常</span></div><div class=\"line\">&gt;           releaseCameraAndPreview();</div><div class=\"line\">&gt;           mCamera = Camera.open(id);<span class=\"comment\">//相机id，默认后置摄像头。</span></div><div class=\"line\">&gt;           qOpened = (mCamera != <span class=\"keyword\">null</span>);</div><div class=\"line\">&gt;       &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">&gt;           Log.e(getString(R.string.app_name), <span class=\"string\">\"failed to open Camera\"</span>);</div><div class=\"line\">&gt;           e.printStackTrace();</div><div class=\"line\">&gt;       &#125;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;       <span class=\"keyword\">return</span> qOpened;    </div><div class=\"line\">&gt;   &#125;</div><div class=\"line\">&gt;   <span class=\"comment\">//释放相机资源</span></div><div class=\"line\">&gt;   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">releaseCameraAndPreview</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">&gt;       mPreview.setCamera(<span class=\"keyword\">null</span>);</div><div class=\"line\">&gt;       <span class=\"keyword\">if</span> (mCamera != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">&gt;           mCamera.release();</div><div class=\"line\">&gt;           mCamera = <span class=\"keyword\">null</span>;</div><div class=\"line\">&gt;       &#125;</div><div class=\"line\">&gt;   &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>2、创建相机预览界面，使用<code>SurfaceView</code>实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Preview</span> <span class=\"keyword\">extends</span> <span class=\"title\">ViewGroup</span> <span class=\"keyword\">implements</span> <span class=\"title\">SurfaceHolder</span>.<span class=\"title\">Callback</span> </span>&#123;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     SurfaceView mSurfaceView;<span class=\"comment\">//surface view</span></div><div class=\"line\">&gt;     SurfaceHolder mHolder;<span class=\"comment\">// surface holder</span></div><div class=\"line\">&gt; \t<span class=\"comment\">//构造函数，初始化数据</span></div><div class=\"line\">&gt;     Preview(Context context) &#123;</div><div class=\"line\">&gt;         <span class=\"keyword\">super</span>(context);</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;         mSurfaceView = <span class=\"keyword\">new</span> SurfaceView(context);</div><div class=\"line\">&gt;         addView(mSurfaceView);</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;         <span class=\"comment\">// 注册surfaceholder的callback，监控surfaceView的创建与销毁。</span></div><div class=\"line\">&gt;         mHolder = mSurfaceView.getHolder();</div><div class=\"line\">&gt;         mHolder.addCallback(<span class=\"keyword\">this</span>);</div><div class=\"line\">&gt;         mHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt; ...</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>==Preview类的对象，必须在开始预览之前就传递给Camera对象。==</p>\n<p>$Camera 和Preview必须依照特定顺序来创建$。首先创建Camera对象，示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setCamera</span><span class=\"params\">(Camera camera)</span> </span>&#123;</div><div class=\"line\">&gt;     <span class=\"keyword\">if</span> (mCamera == camera) &#123; <span class=\"keyword\">return</span>; &#125;</div><div class=\"line\">&gt; \t<span class=\"comment\">//停止预览，释放camera对象</span></div><div class=\"line\">&gt;     stopPreviewAndFreeCamera();</div><div class=\"line\">&gt; \t<span class=\"comment\">//重新引用camera</span></div><div class=\"line\">&gt;     mCamera = camera;</div><div class=\"line\">&gt; \t<span class=\"comment\">//对象非空时候，开启预览</span></div><div class=\"line\">&gt;     <span class=\"keyword\">if</span> (mCamera != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">&gt;         List&lt;Size&gt; localSizes = mCamera.getParameters().getSupportedPreviewSizes();</div><div class=\"line\">&gt;         mSupportedPreviewSizes = localSizes;</div><div class=\"line\">&gt;         requestLayout();</div><div class=\"line\">&gt;         <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">&gt;             mCamera.setPreviewDisplay(mHolder);</div><div class=\"line\">&gt;         &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">&gt;             e.printStackTrace();</div><div class=\"line\">&gt;         &#125;</div><div class=\"line\">&gt;         <span class=\"comment\">// 重要：开启预览，才能拍照。</span></div><div class=\"line\">&gt;         mCamera.startPreview();</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>3、修改相机设置</p>\n<p>由于是控制camera硬件，可以设置拍照方式、曝光补偿等。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">surfaceChanged</span><span class=\"params\">(SurfaceHolder holder, <span class=\"keyword\">int</span> format, <span class=\"keyword\">int</span> w, <span class=\"keyword\">int</span> h)</span> </span>&#123;</div><div class=\"line\">&gt;     <span class=\"comment\">// 设置预览大小</span></div><div class=\"line\">&gt;     Camera.Parameters parameters = mCamera.getParameters();</div><div class=\"line\">&gt;     parameters.setPreviewSize(mPreviewSize.width, mPreviewSize.height);</div><div class=\"line\">&gt;     requestLayout();</div><div class=\"line\">&gt;     mCamera.setParameters(parameters);</div><div class=\"line\">&gt; \t</div><div class=\"line\">&gt;     <span class=\"comment\">//先开启预览，才能调用拍照。</span></div><div class=\"line\">&gt;     mCamera.startPreview();</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt; <span class=\"comment\">//set CameraDisplayOrientation()设置预览方向，横竖屏。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>4、拍照</p>\n<p>预览后，才能调用拍照。<code>Camera.takePicture()</code>方法。创建<code>Camera.PictureCallback</code>和<code>Camera.ShutterCallback</code>对象，传递给<code>Camera.takePicture()</code>。</p>\n<p>若要连续拍摄，创建<code>Camera.PreviewCallback</code>实现<code>onPreviewFrame()</code>方法。如此可以拍摄选定的预览帧，或调用<code>takePicture()</code>建立延迟。</p>\n<p>5、重启Preview</p>\n<p>==拍照后，需要重启预览==</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"meta\">@Override</span></div><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">&gt;     <span class=\"keyword\">switch</span>(mPreviewState) &#123;</div><div class=\"line\">&gt;     <span class=\"keyword\">case</span> K_STATE_FROZEN:<span class=\"comment\">//预览</span></div><div class=\"line\">&gt;         mCamera.startPreview();</div><div class=\"line\">&gt;         mPreviewState = K_STATE_PREVIEW;</div><div class=\"line\">&gt;         <span class=\"keyword\">break</span>;</div><div class=\"line\">&gt;     <span class=\"keyword\">default</span>:<span class=\"comment\">//拍照</span></div><div class=\"line\">&gt;         mCamera.takePicture( <span class=\"keyword\">null</span>, rawCallback, <span class=\"keyword\">null</span>);</div><div class=\"line\">&gt;         mPreviewState = K_STATE_BUSY;</div><div class=\"line\">&gt;     &#125; <span class=\"comment\">// switch</span></div><div class=\"line\">&gt;     shutterBtnConfig();</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>6、停止预览并释放相机</p>\n<p>使用Camera后，必须释放资源，以备下次调用或者其他应用使用。一般在Surface被毁后，释放预览和相机。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">surfaceDestroyed</span><span class=\"params\">(SurfaceHolder holder)</span> </span>&#123;</div><div class=\"line\">&gt;     <span class=\"comment\">// Surface将会销毁，需在此停止预览</span></div><div class=\"line\">&gt;     <span class=\"keyword\">if</span> (mCamera != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">&gt;         <span class=\"comment\">// 停止预览</span></div><div class=\"line\">&gt;         mCamera.stopPreview();</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt; <span class=\"comment\">/**</span></div><div class=\"line\">&gt;  * 释放Camera资源</div><div class=\"line\">&gt;  */</div><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">stopPreviewAndFreeCamera</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">&gt;     <span class=\"keyword\">if</span> (mCamera != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">&gt;         <span class=\"comment\">//停止预览</span></div><div class=\"line\">&gt;         mCamera.stopPreview();</div><div class=\"line\">&gt;         <span class=\"comment\">//重要，停止使用Camera后，必须释放对象资源，在onPause()释放，onResume()重启。</span></div><div class=\"line\">&gt;         mCamera.release();</div><div class=\"line\">&gt;         mCamera = <span class=\"keyword\">null</span>;</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"3、打印\"><a href=\"#3、打印\" class=\"headerlink\" title=\"3、打印\"></a>3、打印</h3><p>Android支持创建pdf文件，打印图片，html和文字。</p>\n<ul>\n<li><h4 id=\"打印照片\"><a href=\"#打印照片\" class=\"headerlink\" title=\"打印照片\"></a>打印照片</h4><blockquote>\n<p><em>PrintHelper</em>类打印图片，AndroidSupportLibrary提供的类库。</p>\n<p>1、打印一幅图片</p>\n<p><code>setScaleMode()</code>方法，接收两个选项之一：</p>\n<ul>\n<li>SCALE_MODE_FIT,图片适应打印纸</li>\n<li>SCALE_MODE_FILL,充满整个纸张，可能会与部分图片无法显示出来。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">doPhotoPrint</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">&gt;   PrintHelper photoPrinter = <span class=\"keyword\">new</span> PrintHelper(getActivity());</div><div class=\"line\">&gt;   photoPrinter.setScaleMode(PrintHelper.SCALE_MODE_FIT);</div><div class=\"line\">&gt;   Bitmap bitmap = BitmapFactory.decodeResource(getResource(),R.drawable.iclauncher);</div><div class=\"line\">&gt;   photoPrinter.printBitmap(<span class=\"string\">\"icLaunchetr.jpg 测试打印\"</span>,bitmap);</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><h4 id=\"打印html文档\"><a href=\"#打印html文档\" class=\"headerlink\" title=\"打印html文档\"></a>打印html文档</h4><blockquote>\n<p>android提供了html文档方式，来实现更为丰富的文本打印输出。</p>\n<p>1、加载Html文档</p>\n<p>使用<code>webView</code>加载html资源，<code>webview</code>被作为activity布局的一部分，若是app没有用到该view，则需要创建该对象，来实现html文档：</p>\n<ul>\n<li>加载html文档后，创建一个<code>WebViewClient</code>对象，来启动打印任务。</li>\n<li>加载html到<code>WebView</code>对象中。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">private</span> WebView mWebView;</div><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">doWebViewPrint</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">&gt;   <span class=\"comment\">//创建webview对象，用于打印</span></div><div class=\"line\">&gt;   WebView webView = <span class=\"keyword\">new</span> WebView(getActivity());</div><div class=\"line\">&gt;   webView.setWebViewClient(<span class=\"keyword\">new</span> WebViewClient()&#123;</div><div class=\"line\">&gt;     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldOverrideUrlLoading</span><span class=\"params\">(WebView view,String url)</span></span>&#123;</div><div class=\"line\">&gt;       <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt;     <span class=\"meta\">@override</span></div><div class=\"line\">&gt;     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPageFinished</span><span class=\"params\">(WebView view ,String url)</span></span>&#123;</div><div class=\"line\">&gt;       Log.i(TAG,<span class=\"string\">\"html页面加载完毕\"</span>+url);</div><div class=\"line\">&gt;       <span class=\"comment\">//调用打印，加载完毕后才调用，否则会不完整，或者失败。</span></div><div class=\"line\">&gt;       createWebPrintJob(view);</div><div class=\"line\">&gt;       mWebView = <span class=\"keyword\">null</span>;</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt;   &#125;);</div><div class=\"line\">&gt;   <span class=\"comment\">//创建一个html文档</span></div><div class=\"line\">&gt;     String htmlDocument = <span class=\"string\">\"&lt;html&gt;&lt;body&gt;&lt;h1&gt;Test Content&lt;/h1&gt;&lt;p&gt;Testing, \"</span> +</div><div class=\"line\">&gt;             <span class=\"string\">\"testing, testing...&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;\"</span>;</div><div class=\"line\">&gt;     webView.loadDataWithBaseURL(<span class=\"keyword\">null</span>, htmlDocument, <span class=\"string\">\"text/HTML\"</span>, <span class=\"string\">\"UTF-8\"</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     <span class=\"comment\">// 保持web View的对象引用，知道适配器打印完毕。</span></div><div class=\"line\">&gt;     mWebView = webView;</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt; <span class=\"comment\">//要是html需要包含图像，放在“assets/”目录下,指定URL，</span></div><div class=\"line\">&gt; webView.loadDataWithBaseURL(<span class=\"string\">\"file:///android_asset/images/\"</span>,htmlBody,<span class=\"string\">\"text/HTML\"</span>,<span class=\"string\">\"utf-8\"</span>,<span class=\"keyword\">null</span>);</div><div class=\"line\">&gt; <span class=\"comment\">//或者加载一个网页，需要网络权限。</span></div><div class=\"line\">&gt; webView.loadUrl(<span class=\"string\">\"http://developer.android.com/about/index.html\"</span>);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>==Web View打印文档会有限制：==</p>\n<ul>\n<li>不能添加页眉、页脚、页码</li>\n<li>不能指定打印页码范围</li>\n<li>一个Web View对象，只能同时处理一个任务。</li>\n<li>不支持html的css属性。</li>\n<li>html的javaScript无法调用打印。</li>\n</ul>\n<p>2、创建打印任务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">createWebPrintJob</span><span class=\"params\">(WebView webView)</span> </span>&#123;</div><div class=\"line\">&gt;     <span class=\"comment\">// 获取Print Manager实例</span></div><div class=\"line\">&gt;     PrintManager printManager = (PrintManager) getActivity()</div><div class=\"line\">&gt;             .getSystemService(Context.PRINT_SERVICE);</div><div class=\"line\">&gt;     <span class=\"comment\">// 获取PrintAdapter实例</span></div><div class=\"line\">&gt;     PrintDocumentAdapter printAdapter = webView.createPrintDocumentAdapter();</div><div class=\"line\">&gt;     <span class=\"comment\">// 创建打印任务，传递给Printadapter，</span></div><div class=\"line\">&gt;     String jobName = getString(R.string.app_name) + <span class=\"string\">\" Document\"</span>;</div><div class=\"line\">&gt;     PrintJob printJob = printManager.print(jobName, printAdapter,</div><div class=\"line\">&gt;             <span class=\"keyword\">new</span> PrintAttributes.Builder().build());</div><div class=\"line\">&gt;     <span class=\"comment\">// 完成任务配置，加入打印列表。</span></div><div class=\"line\">&gt;     mPrintJobs.add(printJob);</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><h4 id=\"打印自定义文档\"><a href=\"#打印自定义文档\" class=\"headerlink\" title=\"打印自定义文档\"></a>打印自定义文档</h4><blockquote>\n<p>1、连接打印管理器，来创建打印任务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">doPrint</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">&gt;     <span class=\"comment\">// Get a PrintManager instance</span></div><div class=\"line\">&gt;     PrintManager printManager = (PrintManager) getActivity()</div><div class=\"line\">&gt;             .getSystemService(Context.PRINT_SERVICE);</div><div class=\"line\">&gt;     <span class=\"comment\">// Set job name, which will be displayed in the print queue</span></div><div class=\"line\">&gt;     String jobName = getActivity().getString(R.string.app_name) + <span class=\"string\">\" Document\"</span>;</div><div class=\"line\">&gt;     <span class=\"comment\">// Start a print job, passing in a PrintDocumentAdapter implementation</span></div><div class=\"line\">&gt;     <span class=\"comment\">// to handle the generation of a print document</span></div><div class=\"line\">&gt;     printManager.print(jobName, <span class=\"keyword\">new</span> MyPrintDocumentAdapter(getActivity()),</div><div class=\"line\">&gt;             <span class=\"keyword\">null</span>); <span class=\"comment\">//最后的参数是PrintAttributes，打印机属性设置。</span></div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>2、创建打印机适配器</p>\n<p><code>PrintDocumentAdapter</code>负责打印生命周期，</p>\n<ul>\n<li>onStart():开始打印，非必需实现的方法，因为总会被调用。</li>\n<li>onLayout(): 用户设置页面布局，尺寸之类的，会调用该函数。</li>\n<li>onWrite(): 将打印文件渲染成待打印状态，可以在onLayout()中多次调用该方法。</li>\n<li>onFinish(): 完成打印，非必需实现。</li>\n</ul>\n<p>调用onLayout()和onWrite()，尽量写入一个异步进程中，因为可能耗时。</p>\n<p>3、计算打印文档信息</p>\n<p>在Print Document Adapter的实现时，需要指定文档类型，计算页数，尺寸之类的信息。</p>\n<p>在onLayout()中计算这些数据，可从PrintDocumentInfo中获取。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"meta\">@Override</span></div><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayout</span><span class=\"params\">(PrintAttributes oldAttributes,</span></span></div><div class=\"line\">&gt;                      PrintAttributes newAttributes,</div><div class=\"line\">&gt;                      CancellationSignal cancellationSignal,</div><div class=\"line\">&gt;                      LayoutResultCallback callback,</div><div class=\"line\">&gt;                      Bundle metadata) &#123;</div><div class=\"line\">&gt;     <span class=\"comment\">// Create a new PdfDocument with the requested page attributes</span></div><div class=\"line\">&gt;     mPdfDocument = <span class=\"keyword\">new</span> PrintedPdfDocument(getActivity(), newAttributes);</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     <span class=\"comment\">// Respond to cancellation request</span></div><div class=\"line\">&gt;     <span class=\"keyword\">if</span> (cancellationSignal.isCancelled() ) &#123;</div><div class=\"line\">&gt;         callback.onLayoutCancelled();</div><div class=\"line\">&gt;         <span class=\"keyword\">return</span>;</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     <span class=\"comment\">// Compute the expected number of printed pages</span></div><div class=\"line\">&gt;     <span class=\"keyword\">int</span> pages = computePageCount(newAttributes);</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     <span class=\"keyword\">if</span> (pages &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">&gt;         <span class=\"comment\">// Return print information to print framework</span></div><div class=\"line\">&gt;         PrintDocumentInfo info = <span class=\"keyword\">new</span> PrintDocumentInfo</div><div class=\"line\">&gt;                 .Builder(<span class=\"string\">\"print_output.pdf\"</span>)</div><div class=\"line\">&gt;                 .setContentType(PrintDocumentInfo.CONTENT_TYPE_DOCUMENT)</div><div class=\"line\">&gt;                 .setPageCount(pages);</div><div class=\"line\">&gt;                 .build();</div><div class=\"line\">&gt;         <span class=\"comment\">// Content layout reflow is complete</span></div><div class=\"line\">&gt;         callback.onLayoutFinished(info, <span class=\"keyword\">true</span>);</div><div class=\"line\">&gt;     &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">&gt;         <span class=\"comment\">// Otherwise report an error to the print framework</span></div><div class=\"line\">&gt;         callback.onLayoutFailed(<span class=\"string\">\"Page count calculation failed.\"</span>);</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><code>onLayout()</code>方法返回结果：完成、取消、失败。必须通过调用PrintDocumentAdapter.LayoutResultCallback对象中的方法指定结果。在<code>onLayoutFinished()</code>方法中==boolean的参数==，指明是否与上次布局不同，来决定时候再次调用<code>onWrite()</code>方法。</p>\n<p><code>onLayout()</code>计算文档相关数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">computePageCount</span><span class=\"params\">(PrintAttributes printAttributes)</span> </span>&#123;</div><div class=\"line\">&gt;     <span class=\"keyword\">int</span> itemsPerPage = <span class=\"number\">4</span>; <span class=\"comment\">// default item count for portrait mode</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     MediaSize pageSize = printAttributes.getMediaSize();</div><div class=\"line\">&gt;     <span class=\"keyword\">if</span> (!pageSize.isPortrait()) &#123;</div><div class=\"line\">&gt;         <span class=\"comment\">// Six items per page in landscape orientation</span></div><div class=\"line\">&gt;         itemsPerPage = <span class=\"number\">6</span>;</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     <span class=\"comment\">// Determine number of print items</span></div><div class=\"line\">&gt;     <span class=\"keyword\">int</span> printItemCount = getPrintItemCount();</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>) Math.ceil(printItemCount / itemsPerPage);</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>4、将打印文档写入文件</p>\n<p>如下代码展示使用<code>PrintedPdfDocument</code>类创建pdf文档的基本原理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"meta\">@Override</span></div><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onWrite</span><span class=\"params\">(<span class=\"keyword\">final</span> PageRange[] pageRanges,</span></span></div><div class=\"line\">&gt;                     <span class=\"keyword\">final</span> ParcelFileDescriptor destination,</div><div class=\"line\">&gt;                     <span class=\"keyword\">final</span> CancellationSignal cancellationSignal,</div><div class=\"line\">&gt;                     <span class=\"keyword\">final</span> WriteResultCallback callback) &#123;</div><div class=\"line\">&gt;     <span class=\"comment\">// Iterate over each page of the document,</span></div><div class=\"line\">&gt;     <span class=\"comment\">// check if it's in the output range.</span></div><div class=\"line\">&gt;     <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; totalPages; i++) &#123;</div><div class=\"line\">&gt;         <span class=\"comment\">// Check to see if this page is in the output range.</span></div><div class=\"line\">&gt;         <span class=\"keyword\">if</span> (containsPage(pageRanges, i)) &#123;</div><div class=\"line\">&gt;             <span class=\"comment\">// If so, add it to writtenPagesArray. writtenPagesArray.size()</span></div><div class=\"line\">&gt;             <span class=\"comment\">// is used to compute the next output page index.</span></div><div class=\"line\">&gt;             writtenPagesArray.append(writtenPagesArray.size(), i);</div><div class=\"line\">&gt;             PdfDocument.Page page = mPdfDocument.startPage(i);</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;             <span class=\"comment\">// check for cancellation</span></div><div class=\"line\">&gt;             <span class=\"keyword\">if</span> (cancellationSignal.isCancelled()) &#123;</div><div class=\"line\">&gt;                 callback.onWriteCancelled();</div><div class=\"line\">&gt;                 mPdfDocument.close();</div><div class=\"line\">&gt;                 mPdfDocument = <span class=\"keyword\">null</span>;</div><div class=\"line\">&gt;                 <span class=\"keyword\">return</span>;</div><div class=\"line\">&gt;             &#125;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;             <span class=\"comment\">// Draw page content for printing</span></div><div class=\"line\">&gt;             drawPage(page);</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;             <span class=\"comment\">// Rendering is complete, so page can be finalized.</span></div><div class=\"line\">&gt;             mPdfDocument.finishPage(page);</div><div class=\"line\">&gt;         &#125;</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     <span class=\"comment\">// Write PDF document to file</span></div><div class=\"line\">&gt;     <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">&gt;         mPdfDocument.writeTo(<span class=\"keyword\">new</span> FileOutputStream(</div><div class=\"line\">&gt;                 destination.getFileDescriptor()));</div><div class=\"line\">&gt;     &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">&gt;         callback.onWriteFailed(e.toString());</div><div class=\"line\">&gt;         <span class=\"keyword\">return</span>;</div><div class=\"line\">&gt;     &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">&gt;         mPdfDocument.close();</div><div class=\"line\">&gt;         mPdfDocument = <span class=\"keyword\">null</span>;</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt;     PageRange[] writtenPages = computeWrittenPages();</div><div class=\"line\">&gt;     <span class=\"comment\">// Signal the print framework the document is complete</span></div><div class=\"line\">&gt;     callback.onWriteFinished(writtenPages);</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     ...</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>Pdf文档生成</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">drawPage</span><span class=\"params\">(PdfDocument.Page page)</span> </span>&#123;</div><div class=\"line\">&gt;     Canvas canvas = page.getCanvas();</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     <span class=\"comment\">// units are in points (1/72 of an inch)</span></div><div class=\"line\">&gt;     <span class=\"keyword\">int</span> titleBaseLine = <span class=\"number\">72</span>;</div><div class=\"line\">&gt;     <span class=\"keyword\">int</span> leftMargin = <span class=\"number\">54</span>;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     Paint paint = <span class=\"keyword\">new</span> Paint();</div><div class=\"line\">&gt;     paint.setColor(Color.BLACK);</div><div class=\"line\">&gt;     paint.setTextSize(<span class=\"number\">36</span>);</div><div class=\"line\">&gt;     canvas.drawText(<span class=\"string\">\"Test Title\"</span>, leftMargin, titleBaseLine, paint);</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     paint.setTextSize(<span class=\"number\">11</span>);</div><div class=\"line\">&gt;     canvas.drawText(<span class=\"string\">\"Test paragraph\"</span>, leftMargin, titleBaseLine + <span class=\"number\">25</span>, paint);</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     paint.setColor(Color.BLUE);</div><div class=\"line\">&gt;     canvas.drawRect(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">172</span>, <span class=\"number\">172</span>, paint);</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><strong>注意，canvas绘图使用point为单位</strong></p>\n</blockquote>\n</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"第三章、Android多媒体\"><a href=\"#第三章、Android多媒体\" class=\"headerlink\" title=\"第三章、Android多媒体\"></a>第三章、Android多媒体</h2><h3 id=\"1-管理音频播放\"><a href=\"#1-管理音频播放\" class=\"headerlink\" title=\"1. 管理音频播放\"></a>1. 管理音频播放</h3><ul>\n<li><h4 id=\"控制音量与音频播放\"><a href=\"#控制音量与音频播放\" class=\"headerlink\" title=\"控制音量与音频播放\"></a>控制音量与音频播放</h4><p>应用若使用音频功能，应保证App获取音频焦点，不造成多个应用声音混杂，且可响应音频按钮事件。</p>\n<blockquote>\n<ul>\n<li><p>Android有播放音乐、闹铃、通知、来电等等不同的音频流，需要独立鉴别。</p>\n<p>音量按钮会调节当前音频流，若无，则调节响铃。Android 中<code>setVolumeControlStream()</code>方法控制音频流。一般在Activity或Fragment的<code>onCreate()</code>中调用它。如：</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; setVolumeControlStream(AudioManager.STREAM_MUSIC);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><strong>响应按键事件</strong>，硬件的音控按钮会激活系统广播<code>ACTION_MEDIA_BUTTON</code>的Intent，App需要有receiver在manifest中：</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"tag\">&lt;<span class=\"name\">receiver</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\".RemoteControlReceiver\"</span>&gt;</span></div><div class=\"line\">&gt; \t<span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">&gt;   \t\t<span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.MEDIA_BUTTON\"</span>/&gt;</span></div><div class=\"line\">&gt;   \t<span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">&gt; <span class=\"tag\">&lt;/<span class=\"name\">receiver</span>&gt;</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><em>Receiver接收广播，过滤Action，可以通过<code>EXTRA_KEY_EVENT</code>区分按钮</em>，如：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RemoteControlReceiver</span> <span class=\"keyword\">extends</span> <span class=\"title\">BroadcastReceiver</span></span>&#123;</div><div class=\"line\">&gt;   <span class=\"meta\">@override</span></div><div class=\"line\">&gt;   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceive</span><span class=\"params\">(Context context,Intent intent)</span></span>&#123;</div><div class=\"line\">&gt;     KeyEvent event = (KeyEvent)intent.getParcelableExtra(Intent,EXTRA_KEY_EVENT);</div><div class=\"line\">&gt;     <span class=\"keyword\">if</span>(KeyEvent.KEYCODE_MEDIA_PLAY==event.getKeyCode())&#123;</div><div class=\"line\">&gt;       <span class=\"comment\">//处理按钮Play的点击事件</span></div><div class=\"line\">&gt;       ...</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt;   &#125;</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><code>注意，可能有多个程序监听按钮</code>，可以通过AudioManager管理App注册监听与取消。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; AudioManager am = mContext.getSystemService(Context.AUDIO_SERVICE);</div><div class=\"line\">&gt; ...</div><div class=\"line\">&gt;   <span class=\"comment\">//开启监听</span></div><div class=\"line\">&gt; am.registerMediaButtonEventReceiver(RemoteControlReceiver);</div><div class=\"line\">&gt; ...</div><div class=\"line\">&gt;   <span class=\"comment\">//取消监听</span></div><div class=\"line\">&gt; am.unregisterMediaButtonEventReceiver(RemoteControlReceiver);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><strong>音频的控制，并不一定是Activity可见不可见来决定</strong>，正确的方法是判断App获取/失去音频流焦点的状态。</p>\n</blockquote>\n</li>\n<li><h5 id=\"管理音频焦点\"><a href=\"#管理音频焦点\" class=\"headerlink\" title=\"管理音频焦点\"></a>管理音频焦点</h5><p>Android中只有获取音频流焦点的App方能控制音频。</p>\n<ul>\n<li>注意点：1、请求焦点；2、获取焦点；3、监控焦点状态，并作相应处理。</li>\n</ul>\n<blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; requestAudioFocus();<span class=\"comment\">//请求焦点，成功则返回AUDIOFOCUS_REQUEST_GRANTED</span></div><div class=\"line\">&gt; <span class=\"comment\">//需要制定当前音频流，并明确焦点获取是临时`Transient`，还是永久`Permanent`。</span></div><div class=\"line\">&gt; AudioManager am = mContext.getSystemService(Context.AUDIO_SERVICE);</div><div class=\"line\">&gt; ...</div><div class=\"line\">&gt; <span class=\"comment\">// 请求音频焦点，指定当前音频流为music，传入请求参数。</span></div><div class=\"line\">&gt; <span class=\"keyword\">int</span> result = am.requestAudioFocus(afChangeListener,AudioManager.STREAM_MUSIC,AudioManager.AUDIOFOCUS_GAIN);</div><div class=\"line\">&gt; <span class=\"keyword\">if</span> (result == AudioManager.AUDIOFOCUS_REQUEST_GRANTED) &#123;  am.registerMediaButtonEventReceiver(RemoteControlReceiver);</div><div class=\"line\">&gt;     <span class=\"comment\">// 开始播放</span></div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt; ...</div><div class=\"line\">&gt; <span class=\"comment\">//释放焦点的方法</span></div><div class=\"line\">&gt;   am.abandonAudioFocus(afChangeListener);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>一旦结束播放，确保调用<code>abandonAudioFocus()</code>来释放焦点和监听AudioManager.OnAudioFocusChangeListener。</p>\n<ul>\n<li><strong>在使用临时焦点时候，可选择设置<code>Ducking</code>开启，则其他音频流不会停止，而只是变为背景音</strong></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">int</span> result = am.requestAudioFocus(afChangeListener,AudioManager.STERAM_MUSIC,AudioManager.AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK);<span class=\"comment\">//开启Ducking</span></div><div class=\"line\">&gt; <span class=\"keyword\">if</span>(result == AudioManager.AUDIOFOCUS_REQUEST_GRANTED)&#123;</div><div class=\"line\">&gt;   <span class=\"comment\">//paly music And other app maybe playing too。</span></div><div class=\"line\">&gt; &#125;<span class=\"comment\">//若其他app也是Ducking，则本App可以监听它的焦点状态。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><em>音频焦点状态变化的监听</em> <code>onAudioFocusChange()</code>，三种状态，永久，临时，Ducking式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; OnAudioFocusChangeListener afChangeListener = <span class=\"keyword\">new</span> OnAudioFocusChangeListener()&#123;</div><div class=\"line\">&gt;   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAudioFocusChange</span><span class=\"params\">(<span class=\"keyword\">int</span> focusChange)</span></span>&#123;</div><div class=\"line\">&gt;     <span class=\"keyword\">if</span>(focusChange == AUDIOFOCUS_LOSS_TRANSIENT)&#123;</div><div class=\"line\">&gt;       <span class=\"comment\">//暂停播放</span></div><div class=\"line\">&gt;       </div><div class=\"line\">&gt;     &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(focusChange == AudioManger.AUDIOFOCUS_GAIN)&#123;</div><div class=\"line\">&gt;       <span class=\"comment\">//重新播放</span></div><div class=\"line\">&gt;     &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(focusChange == AudioManager.AUDIOFOCUS_LOSS)&#123;</div><div class=\"line\">&gt;      am.unregisterMediaButtonEventReceiver(RemoteControlReceiver);</div><div class=\"line\">&gt;       am.abandonAudioFocus(afChangeListener);</div><div class=\"line\">&gt;       <span class=\"comment\">//停止播放</span></div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt;   &#125;</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><strong>Duck！</strong></li>\n</ul>\n<p>对音频流使用Ducking状态，会是之变为背景式音频。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; OnAudioFocusChangeListener afChangeListener = <span class=\"keyword\">new</span> OnAudioFocusChangeListener() &#123;</div><div class=\"line\">&gt;     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAudioFocusChange</span><span class=\"params\">(<span class=\"keyword\">int</span> focusChange)</span> </span>&#123;</div><div class=\"line\">&gt;         <span class=\"keyword\">if</span> (focusChange == AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK) &#123;</div><div class=\"line\">&gt;             <span class=\"comment\">//Ducking 状态，降低音量，背景音播放</span></div><div class=\"line\">&gt;         &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (focusChange == AudioManager.AUDIOFOCUS_GAIN) &#123;</div><div class=\"line\">&gt;             <span class=\"comment\">// 恢复正常音量播放</span></div><div class=\"line\">&gt;         &#125;</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt; &#125;;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><h6 id=\"兼容音频输出设备\"><a href=\"#兼容音频输出设备\" class=\"headerlink\" title=\"兼容音频输出设备\"></a>兼容音频输出设备</h6><p>检测正使用的硬件设备:<code>Audio Manager</code></p>\n<blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">if</span> (isBluetoothA2dpOn()) &#123;</div><div class=\"line\">&gt;     <span class=\"comment\">// Adjust output for Bluetooth.</span></div><div class=\"line\">&gt; &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isSpeakerphoneOn()) &#123;</div><div class=\"line\">&gt;     <span class=\"comment\">// Adjust output for Speakerphone.</span></div><div class=\"line\">&gt; &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isWiredHeadsetOn()) &#123;</div><div class=\"line\">&gt;     <span class=\"comment\">// Adjust output for headsets</span></div><div class=\"line\">&gt; &#125; <span class=\"keyword\">else</span> &#123; </div><div class=\"line\">&gt;     <span class=\"comment\">// If audio plays and noone can hear it, is it still playing?</span></div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>当音频设备变化时候，要监听改变<code>ACTION_AUDIO_BECOMING_NOISY</code>系统广播的intent。App需要有receiver</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NoisyAudioStreamReceiver</span> <span class=\"keyword\">extends</span> <span class=\"title\">BroadcastReceiver</span></span>&#123;</div><div class=\"line\">&gt;   <span class=\"meta\">@override</span></div><div class=\"line\">&gt;   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceive</span><span class=\"params\">(Context context,Intent intent)</span></span>&#123;</div><div class=\"line\">&gt;     <span class=\"keyword\">if</span>(AudioManager.ACTION_AUDIO_BECOMING_NOISY.equals(intent.getAction()))&#123;</div><div class=\"line\">&gt;      <span class=\"comment\">//接收到音频输出设备变化，暂停播放 </span></div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt;   &#125;</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt; <span class=\"keyword\">private</span> IntentFilter intentFilter = <span class=\"keyword\">new</span> IntentFilter(AudioManager.ACITON_AUDIO_BECOMING_NOISY);</div><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">startPlayback</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">&gt;     registerReceiver(myNoisyAudioStreamReceiver(), intentFilter);</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">stopPlayback</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">&gt;     unregisterReceiver(myNoisyAudioStreamReceiver);</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"2-拍照\"><a href=\"#2-拍照\" class=\"headerlink\" title=\"2.拍照\"></a>2.拍照</h3><ul>\n<li><h4 id=\"简单的拍照\"><a href=\"#简单的拍照\" class=\"headerlink\" title=\"简单的拍照\"></a>简单的拍照</h4><blockquote>\n<p>1、请求相机权限</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;<span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">...</span>&gt;</span></div><div class=\"line\">&gt;  <span class=\"comment\">&lt;!-- 在清单文件中加入该属性，向用户声明本App需要相机权限。 --&gt;</span></div><div class=\"line\">&gt;\t<span class=\"tag\">&lt;<span class=\"name\">uses-feature</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.hardware.camera\"</span></span></div><div class=\"line\">&gt;                  android:required=\"true\"/&gt;</div><div class=\"line\">&gt;  <span class=\"comment\">&lt;!-- 自动聚焦 --&gt;</span></div><div class=\"line\">&gt;   <span class=\"tag\">&lt;<span class=\"name\">uses-feature</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.hardware.camera.autofocus\"</span> /&gt;</span></div><div class=\"line\">&gt;  <span class=\"comment\">&lt;!-- 调用相机需要的权限 --&gt;</span></div><div class=\"line\">&gt;  </div><div class=\"line\">&gt;  <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.CAMERA\"</span> /&gt;</span></div><div class=\"line\">&gt;<span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>本App若非必须有相机，<code>required</code>可以设置false。代码中可以用<code>hasSystemFeature(PackageManager.FEATURE_CAMERA)</code>来检查是否有camera硬件。</p>\n<p>2、调用系统相机拍照。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;<span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> REQUEST_IMAGE_CAPTURE=<span class=\"number\">1</span>;<span class=\"comment\">//请求码</span></div><div class=\"line\">&gt;<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchTakePictureIntent</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">&gt;  <span class=\"comment\">//调用相机的intent</span></div><div class=\"line\">&gt;  Intent takePictureIntent = <span class=\"keyword\">new</span> Intent(MediaStore.ACTION_IMAGE_CAPTURE);</div><div class=\"line\">&gt;  <span class=\"comment\">//检查有没有能处理该intent的Activity，以免下面startActivity会空指针，而崩溃</span></div><div class=\"line\">&gt;  <span class=\"keyword\">if</span>(takePictureIntent.resolveActivity(getPackageManager()) !=<span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">&gt;    startActivityForResult(takePictureIntent,REQUEST_IMAGE_CAPTURE);</div><div class=\"line\">&gt;  &#125;</div><div class=\"line\">&gt;&#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>3、获取缩略图</p>\n<p>Android相机将拍摄好的照片缩小为Bitmap，返回给调用的activity，<code>key-value</code>键值对形式将数据绑定到intent返回。<code>data</code> key值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;<span class=\"meta\">@Override</span></div><div class=\"line\">&gt;<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityResult</span><span class=\"params\">(<span class=\"keyword\">int</span> requestCode, <span class=\"keyword\">int</span> resultCode, Intent data)</span> </span>&#123;</div><div class=\"line\">&gt;    <span class=\"keyword\">if</span> (requestCode == REQUEST_IMAGE_CAPTURE &amp;&amp; resultCode == RESULT_OK) &#123;</div><div class=\"line\">&gt;        Bundle extras = data.getExtras();<span class=\"comment\">//获取bundle对象</span></div><div class=\"line\">&gt;        Bitmap imageBitmap = (Bitmap) extras.get(<span class=\"string\">\"data\"</span>);<span class=\"comment\">//key值，获取缩略图</span></div><div class=\"line\">&gt;        mImageView.setImageBitmap(imageBitmap);</div><div class=\"line\">&gt;    &#125;</div><div class=\"line\">&gt;&#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>4、获取全尺寸照片</p>\n<p>Android一般会保存原始照片数据到指定文件夹下。通常为<code>DIRECTORY_PICTURES</code>对应的文件目录，需要读写SD卡的权限。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;<span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">...</span>&gt;</span></div><div class=\"line\">&gt;\t<span class=\"tag\">&lt;<span class=\"name\">uses_permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.WRITE_EXTERNAL_STORAGE\"</span>/&gt;</span></div><div class=\"line\">&gt;  \t<span class=\"comment\">&lt;!-- 一般有写入权限，就默认会有读取权限了 --&gt;</span></div><div class=\"line\">&gt;<span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><code>getExternalFilesDir()</code>私有目录，<code>getExternalStoragePublicDirectory()</code>共有目录，接收参数<code>DIRECTORY_PICTURES</code>标明是图片文件夹。</p>\n<p><strong>注意文件的保存，需要防止命名冲突，一般会加入时间戳来避免该问题。</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;String mCurrentPhotoPath;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;<span class=\"function\"><span class=\"keyword\">private</span> File <span class=\"title\">createImageFile</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">&gt;    <span class=\"comment\">// 创建图片文件</span></div><div class=\"line\">&gt;    String timeStamp = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyyMMdd_HHmmss\"</span>).format(<span class=\"keyword\">new</span> Date());</div><div class=\"line\">&gt;    String imageFileName = <span class=\"string\">\"JPEG_\"</span> + timeStamp + <span class=\"string\">\"_\"</span>;</div><div class=\"line\">&gt;    File storageDir = Environment.getExternalStoragePublicDirectory(</div><div class=\"line\">&gt;            Environment.DIRECTORY_PICTURES);</div><div class=\"line\">&gt;    File image = File.createTempFile(</div><div class=\"line\">&gt;        imageFileName,  <span class=\"comment\">/* prefix */</span></div><div class=\"line\">&gt;        <span class=\"string\">\".jpg\"</span>,         <span class=\"comment\">/* suffix */</span></div><div class=\"line\">&gt;        storageDir      <span class=\"comment\">/* directory */</span></div><div class=\"line\">&gt;    );</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\">// Save a file: path for use with ACTION_VIEW intents</span></div><div class=\"line\">&gt;    mCurrentPhotoPath = <span class=\"string\">\"file:\"</span> + image.getAbsolutePath();</div><div class=\"line\">&gt;    <span class=\"keyword\">return</span> image;</div><div class=\"line\">&gt;&#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>使用如上方法，来创建新的照片文件：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;<span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> REQUEST_TAKE_PHOTO = <span class=\"number\">1</span>;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchTakePictureIntent</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">&gt;    Intent takePictureIntent = <span class=\"keyword\">new</span> Intent(MediaStore.ACTION_IMAGE_CAPTURE);</div><div class=\"line\">&gt;    <span class=\"comment\">// 判断是否有可以处理拍照的Activity</span></div><div class=\"line\">&gt;    <span class=\"keyword\">if</span> (takePictureIntent.resolveActivity(getPackageManager()) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">&gt;        <span class=\"comment\">// 创建照片文件</span></div><div class=\"line\">&gt;        File photoFile = <span class=\"keyword\">null</span>;</div><div class=\"line\">&gt;        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">&gt;            photoFile = createImageFile();</div><div class=\"line\">&gt;        &#125; <span class=\"keyword\">catch</span> (IOException ex) &#123;</div><div class=\"line\">&gt;            <span class=\"comment\">// 创建文件异常</span></div><div class=\"line\">&gt;            ...</div><div class=\"line\">&gt;        &#125;</div><div class=\"line\">&gt;        <span class=\"comment\">// 照片创建成功的话，完成照片存储。</span></div><div class=\"line\">&gt;        <span class=\"keyword\">if</span> (photoFile != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">&gt;            takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT,</div><div class=\"line\">&gt;                    Uri.fromFile(photoFile));</div><div class=\"line\">&gt;            startActivityForResult(takePictureIntent, REQUEST_TAKE_PHOTO);</div><div class=\"line\">&gt;        &#125;</div><div class=\"line\">&gt;    &#125;</div><div class=\"line\">&gt;&#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>5、如果照片目录不是私有，那么需要通知系统，将照片显示到公开目录中,让mediaScanner可以扫描到。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">galleryAddPic</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">&gt;  <span class=\"comment\">//intent</span></div><div class=\"line\">&gt;    Intent mediaScanIntent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE);</div><div class=\"line\">&gt;    File f = <span class=\"keyword\">new</span> File(mCurrentPhotoPath);</div><div class=\"line\">&gt;    Uri contentUri = Uri.fromFile(f);</div><div class=\"line\">&gt;  <span class=\"comment\">//发送广播，</span></div><div class=\"line\">&gt;    mediaScanIntent.setData(contentUri);</div><div class=\"line\">&gt;    <span class=\"keyword\">this</span>.sendBroadcast(mediaScanIntent);</div><div class=\"line\">&gt;&#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>6、图片缩放</p>\n<p>多数情况下不需要全尺寸的清晰图片显示，也为了避免内存消耗，使用图片缩放：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setPic</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">&gt;    <span class=\"comment\">// 1、获取需要显示图片的view控件的大小。</span></div><div class=\"line\">&gt;    <span class=\"keyword\">int</span> targetW = mImageView.getWidth();</div><div class=\"line\">&gt;    <span class=\"keyword\">int</span> targetH = mImageView.getHeight();</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\">// 2、获取需要显示的图片的尺寸</span></div><div class=\"line\">&gt;    BitmapFactory.Options bmOptions = <span class=\"keyword\">new</span> BitmapFactory.Options();</div><div class=\"line\">&gt;    bmOptions.inJustDecodeBounds = <span class=\"keyword\">true</span>;</div><div class=\"line\">&gt;    BitmapFactory.decodeFile(mCurrentPhotoPath, bmOptions);</div><div class=\"line\">&gt;    <span class=\"keyword\">int</span> photoW = bmOptions.outWidth;</div><div class=\"line\">&gt;    <span class=\"keyword\">int</span> photoH = bmOptions.outHeight;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\">// 3、计算缩放比，根据宽高</span></div><div class=\"line\">&gt;    <span class=\"keyword\">int</span> scaleFactor = Math.min(photoW/targetW, photoH/targetH);</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\">// 4、缩放图片</span></div><div class=\"line\">&gt;    bmOptions.inJustDecodeBounds = <span class=\"keyword\">false</span>;<span class=\"comment\">//</span></div><div class=\"line\">&gt;    bmOptions.inSampleSize = scaleFactor;<span class=\"comment\">//缩放比</span></div><div class=\"line\">&gt;    bmOptions.inPurgeable = <span class=\"keyword\">true</span>;<span class=\"comment\">//</span></div><div class=\"line\">&gt;\t<span class=\"comment\">//完成图片缩放</span></div><div class=\"line\">&gt;    Bitmap bitmap = BitmapFactory.decodeFile(mCurrentPhotoPath, bmOptions);</div><div class=\"line\">&gt;    mImageView.setImageBitmap(bitmap);</div><div class=\"line\">&gt;&#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><h4 id=\"简单的录像\"><a href=\"#简单的录像\" class=\"headerlink\" title=\"简单的录像\"></a>简单的录像</h4><blockquote>\n<p>1、请求相机权限</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">...</span> &gt;</span></div><div class=\"line\">&gt;     <span class=\"tag\">&lt;<span class=\"name\">uses-feature</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.hardware.camera\"</span></span></div><div class=\"line\">&gt;                   android:required=\"true\" /&gt;</div><div class=\"line\">&gt;    <span class=\"tag\">&lt;<span class=\"name\">uses-feature</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.hardware.camera.autofocus\"</span> /&gt;</span></div><div class=\"line\">&gt;     ...</div><div class=\"line\">&gt; <span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>2、通过Intent来录制视频,Action是<code>MediaStore.ACTION_VIDEO_CAPTURE</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> REQUEST_VIDEO_CAPTURE = <span class=\"number\">1</span>;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchTakeVideoIntent</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">&gt;     Intent takeVideoIntent = <span class=\"keyword\">new</span> Intent(MediaStore.ACTION_VIDEO_CAPTURE);</div><div class=\"line\">&gt;   <span class=\"comment\">//判断是否有可用录像程序</span></div><div class=\"line\">&gt;     <span class=\"keyword\">if</span> (takeVideoIntent.resolveActivity(getPackageManager()) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">&gt;         startActivityForResult(takeVideoIntent, REQUEST_VIDEO_CAPTURE);</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>3、接收返回的视频数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"meta\">@Override</span></div><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityResult</span><span class=\"params\">(<span class=\"keyword\">int</span> requestCode, <span class=\"keyword\">int</span> resultCode, Intent data)</span> </span>&#123;</div><div class=\"line\">&gt;     <span class=\"keyword\">if</span> (requestCode == REQUEST_VIDEO_CAPTURE &amp;&amp; resultCode == RESULT_OK) &#123;</div><div class=\"line\">&gt;       <span class=\"comment\">//获取视频文件保存的uri</span></div><div class=\"line\">&gt;         Uri videoUri = intent.getData();</div><div class=\"line\">&gt;         mVideoView.setVideoURI(videoUri);</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><h4 id=\"控制相机硬件\"><a href=\"#控制相机硬件\" class=\"headerlink\" title=\"控制相机硬件\"></a>控制相机硬件</h4><blockquote>\n<p>1、此处提供给有特殊需要的app来调用Camera硬件，实现自定义的拍照与录像功能。</p>\n<ul>\n<li><p><code>onCreate()</code>中开启线程打开相机。</p>\n</li>\n<li><p>或者在<code>onResume()</code>中开启相机</p>\n</li>\n<li><p>要检测Camera是否可用，被占用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">safeCameraOpen</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</div><div class=\"line\">&gt;       <span class=\"keyword\">boolean</span> qOpened = <span class=\"keyword\">false</span>;</div><div class=\"line\">&gt;       <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">&gt;         <span class=\"comment\">//先释放，再打开，在此捕获异常</span></div><div class=\"line\">&gt;           releaseCameraAndPreview();</div><div class=\"line\">&gt;           mCamera = Camera.open(id);<span class=\"comment\">//相机id，默认后置摄像头。</span></div><div class=\"line\">&gt;           qOpened = (mCamera != <span class=\"keyword\">null</span>);</div><div class=\"line\">&gt;       &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">&gt;           Log.e(getString(R.string.app_name), <span class=\"string\">\"failed to open Camera\"</span>);</div><div class=\"line\">&gt;           e.printStackTrace();</div><div class=\"line\">&gt;       &#125;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;       <span class=\"keyword\">return</span> qOpened;    </div><div class=\"line\">&gt;   &#125;</div><div class=\"line\">&gt;   <span class=\"comment\">//释放相机资源</span></div><div class=\"line\">&gt;   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">releaseCameraAndPreview</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">&gt;       mPreview.setCamera(<span class=\"keyword\">null</span>);</div><div class=\"line\">&gt;       <span class=\"keyword\">if</span> (mCamera != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">&gt;           mCamera.release();</div><div class=\"line\">&gt;           mCamera = <span class=\"keyword\">null</span>;</div><div class=\"line\">&gt;       &#125;</div><div class=\"line\">&gt;   &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>2、创建相机预览界面，使用<code>SurfaceView</code>实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Preview</span> <span class=\"keyword\">extends</span> <span class=\"title\">ViewGroup</span> <span class=\"keyword\">implements</span> <span class=\"title\">SurfaceHolder</span>.<span class=\"title\">Callback</span> </span>&#123;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     SurfaceView mSurfaceView;<span class=\"comment\">//surface view</span></div><div class=\"line\">&gt;     SurfaceHolder mHolder;<span class=\"comment\">// surface holder</span></div><div class=\"line\">&gt; \t<span class=\"comment\">//构造函数，初始化数据</span></div><div class=\"line\">&gt;     Preview(Context context) &#123;</div><div class=\"line\">&gt;         <span class=\"keyword\">super</span>(context);</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;         mSurfaceView = <span class=\"keyword\">new</span> SurfaceView(context);</div><div class=\"line\">&gt;         addView(mSurfaceView);</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;         <span class=\"comment\">// 注册surfaceholder的callback，监控surfaceView的创建与销毁。</span></div><div class=\"line\">&gt;         mHolder = mSurfaceView.getHolder();</div><div class=\"line\">&gt;         mHolder.addCallback(<span class=\"keyword\">this</span>);</div><div class=\"line\">&gt;         mHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt; ...</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>==Preview类的对象，必须在开始预览之前就传递给Camera对象。==</p>\n<p>$Camera 和Preview必须依照特定顺序来创建$。首先创建Camera对象，示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setCamera</span><span class=\"params\">(Camera camera)</span> </span>&#123;</div><div class=\"line\">&gt;     <span class=\"keyword\">if</span> (mCamera == camera) &#123; <span class=\"keyword\">return</span>; &#125;</div><div class=\"line\">&gt; \t<span class=\"comment\">//停止预览，释放camera对象</span></div><div class=\"line\">&gt;     stopPreviewAndFreeCamera();</div><div class=\"line\">&gt; \t<span class=\"comment\">//重新引用camera</span></div><div class=\"line\">&gt;     mCamera = camera;</div><div class=\"line\">&gt; \t<span class=\"comment\">//对象非空时候，开启预览</span></div><div class=\"line\">&gt;     <span class=\"keyword\">if</span> (mCamera != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">&gt;         List&lt;Size&gt; localSizes = mCamera.getParameters().getSupportedPreviewSizes();</div><div class=\"line\">&gt;         mSupportedPreviewSizes = localSizes;</div><div class=\"line\">&gt;         requestLayout();</div><div class=\"line\">&gt;         <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">&gt;             mCamera.setPreviewDisplay(mHolder);</div><div class=\"line\">&gt;         &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">&gt;             e.printStackTrace();</div><div class=\"line\">&gt;         &#125;</div><div class=\"line\">&gt;         <span class=\"comment\">// 重要：开启预览，才能拍照。</span></div><div class=\"line\">&gt;         mCamera.startPreview();</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>3、修改相机设置</p>\n<p>由于是控制camera硬件，可以设置拍照方式、曝光补偿等。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">surfaceChanged</span><span class=\"params\">(SurfaceHolder holder, <span class=\"keyword\">int</span> format, <span class=\"keyword\">int</span> w, <span class=\"keyword\">int</span> h)</span> </span>&#123;</div><div class=\"line\">&gt;     <span class=\"comment\">// 设置预览大小</span></div><div class=\"line\">&gt;     Camera.Parameters parameters = mCamera.getParameters();</div><div class=\"line\">&gt;     parameters.setPreviewSize(mPreviewSize.width, mPreviewSize.height);</div><div class=\"line\">&gt;     requestLayout();</div><div class=\"line\">&gt;     mCamera.setParameters(parameters);</div><div class=\"line\">&gt; \t</div><div class=\"line\">&gt;     <span class=\"comment\">//先开启预览，才能调用拍照。</span></div><div class=\"line\">&gt;     mCamera.startPreview();</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt; <span class=\"comment\">//set CameraDisplayOrientation()设置预览方向，横竖屏。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>4、拍照</p>\n<p>预览后，才能调用拍照。<code>Camera.takePicture()</code>方法。创建<code>Camera.PictureCallback</code>和<code>Camera.ShutterCallback</code>对象，传递给<code>Camera.takePicture()</code>。</p>\n<p>若要连续拍摄，创建<code>Camera.PreviewCallback</code>实现<code>onPreviewFrame()</code>方法。如此可以拍摄选定的预览帧，或调用<code>takePicture()</code>建立延迟。</p>\n<p>5、重启Preview</p>\n<p>==拍照后，需要重启预览==</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"meta\">@Override</span></div><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">&gt;     <span class=\"keyword\">switch</span>(mPreviewState) &#123;</div><div class=\"line\">&gt;     <span class=\"keyword\">case</span> K_STATE_FROZEN:<span class=\"comment\">//预览</span></div><div class=\"line\">&gt;         mCamera.startPreview();</div><div class=\"line\">&gt;         mPreviewState = K_STATE_PREVIEW;</div><div class=\"line\">&gt;         <span class=\"keyword\">break</span>;</div><div class=\"line\">&gt;     <span class=\"keyword\">default</span>:<span class=\"comment\">//拍照</span></div><div class=\"line\">&gt;         mCamera.takePicture( <span class=\"keyword\">null</span>, rawCallback, <span class=\"keyword\">null</span>);</div><div class=\"line\">&gt;         mPreviewState = K_STATE_BUSY;</div><div class=\"line\">&gt;     &#125; <span class=\"comment\">// switch</span></div><div class=\"line\">&gt;     shutterBtnConfig();</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>6、停止预览并释放相机</p>\n<p>使用Camera后，必须释放资源，以备下次调用或者其他应用使用。一般在Surface被毁后，释放预览和相机。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">surfaceDestroyed</span><span class=\"params\">(SurfaceHolder holder)</span> </span>&#123;</div><div class=\"line\">&gt;     <span class=\"comment\">// Surface将会销毁，需在此停止预览</span></div><div class=\"line\">&gt;     <span class=\"keyword\">if</span> (mCamera != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">&gt;         <span class=\"comment\">// 停止预览</span></div><div class=\"line\">&gt;         mCamera.stopPreview();</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt; <span class=\"comment\">/**</span></div><div class=\"line\">&gt;  * 释放Camera资源</div><div class=\"line\">&gt;  */</div><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">stopPreviewAndFreeCamera</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">&gt;     <span class=\"keyword\">if</span> (mCamera != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">&gt;         <span class=\"comment\">//停止预览</span></div><div class=\"line\">&gt;         mCamera.stopPreview();</div><div class=\"line\">&gt;         <span class=\"comment\">//重要，停止使用Camera后，必须释放对象资源，在onPause()释放，onResume()重启。</span></div><div class=\"line\">&gt;         mCamera.release();</div><div class=\"line\">&gt;         mCamera = <span class=\"keyword\">null</span>;</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"3、打印\"><a href=\"#3、打印\" class=\"headerlink\" title=\"3、打印\"></a>3、打印</h3><p>Android支持创建pdf文件，打印图片，html和文字。</p>\n<ul>\n<li><h4 id=\"打印照片\"><a href=\"#打印照片\" class=\"headerlink\" title=\"打印照片\"></a>打印照片</h4><blockquote>\n<p><em>PrintHelper</em>类打印图片，AndroidSupportLibrary提供的类库。</p>\n<p>1、打印一幅图片</p>\n<p><code>setScaleMode()</code>方法，接收两个选项之一：</p>\n<ul>\n<li>SCALE_MODE_FIT,图片适应打印纸</li>\n<li>SCALE_MODE_FILL,充满整个纸张，可能会与部分图片无法显示出来。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">doPhotoPrint</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">&gt;   PrintHelper photoPrinter = <span class=\"keyword\">new</span> PrintHelper(getActivity());</div><div class=\"line\">&gt;   photoPrinter.setScaleMode(PrintHelper.SCALE_MODE_FIT);</div><div class=\"line\">&gt;   Bitmap bitmap = BitmapFactory.decodeResource(getResource(),R.drawable.iclauncher);</div><div class=\"line\">&gt;   photoPrinter.printBitmap(<span class=\"string\">\"icLaunchetr.jpg 测试打印\"</span>,bitmap);</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><h4 id=\"打印html文档\"><a href=\"#打印html文档\" class=\"headerlink\" title=\"打印html文档\"></a>打印html文档</h4><blockquote>\n<p>android提供了html文档方式，来实现更为丰富的文本打印输出。</p>\n<p>1、加载Html文档</p>\n<p>使用<code>webView</code>加载html资源，<code>webview</code>被作为activity布局的一部分，若是app没有用到该view，则需要创建该对象，来实现html文档：</p>\n<ul>\n<li>加载html文档后，创建一个<code>WebViewClient</code>对象，来启动打印任务。</li>\n<li>加载html到<code>WebView</code>对象中。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">private</span> WebView mWebView;</div><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">doWebViewPrint</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">&gt;   <span class=\"comment\">//创建webview对象，用于打印</span></div><div class=\"line\">&gt;   WebView webView = <span class=\"keyword\">new</span> WebView(getActivity());</div><div class=\"line\">&gt;   webView.setWebViewClient(<span class=\"keyword\">new</span> WebViewClient()&#123;</div><div class=\"line\">&gt;     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldOverrideUrlLoading</span><span class=\"params\">(WebView view,String url)</span></span>&#123;</div><div class=\"line\">&gt;       <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt;     <span class=\"meta\">@override</span></div><div class=\"line\">&gt;     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPageFinished</span><span class=\"params\">(WebView view ,String url)</span></span>&#123;</div><div class=\"line\">&gt;       Log.i(TAG,<span class=\"string\">\"html页面加载完毕\"</span>+url);</div><div class=\"line\">&gt;       <span class=\"comment\">//调用打印，加载完毕后才调用，否则会不完整，或者失败。</span></div><div class=\"line\">&gt;       createWebPrintJob(view);</div><div class=\"line\">&gt;       mWebView = <span class=\"keyword\">null</span>;</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt;   &#125;);</div><div class=\"line\">&gt;   <span class=\"comment\">//创建一个html文档</span></div><div class=\"line\">&gt;     String htmlDocument = <span class=\"string\">\"&lt;html&gt;&lt;body&gt;&lt;h1&gt;Test Content&lt;/h1&gt;&lt;p&gt;Testing, \"</span> +</div><div class=\"line\">&gt;             <span class=\"string\">\"testing, testing...&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;\"</span>;</div><div class=\"line\">&gt;     webView.loadDataWithBaseURL(<span class=\"keyword\">null</span>, htmlDocument, <span class=\"string\">\"text/HTML\"</span>, <span class=\"string\">\"UTF-8\"</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     <span class=\"comment\">// 保持web View的对象引用，知道适配器打印完毕。</span></div><div class=\"line\">&gt;     mWebView = webView;</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt; <span class=\"comment\">//要是html需要包含图像，放在“assets/”目录下,指定URL，</span></div><div class=\"line\">&gt; webView.loadDataWithBaseURL(<span class=\"string\">\"file:///android_asset/images/\"</span>,htmlBody,<span class=\"string\">\"text/HTML\"</span>,<span class=\"string\">\"utf-8\"</span>,<span class=\"keyword\">null</span>);</div><div class=\"line\">&gt; <span class=\"comment\">//或者加载一个网页，需要网络权限。</span></div><div class=\"line\">&gt; webView.loadUrl(<span class=\"string\">\"http://developer.android.com/about/index.html\"</span>);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>==Web View打印文档会有限制：==</p>\n<ul>\n<li>不能添加页眉、页脚、页码</li>\n<li>不能指定打印页码范围</li>\n<li>一个Web View对象，只能同时处理一个任务。</li>\n<li>不支持html的css属性。</li>\n<li>html的javaScript无法调用打印。</li>\n</ul>\n<p>2、创建打印任务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">createWebPrintJob</span><span class=\"params\">(WebView webView)</span> </span>&#123;</div><div class=\"line\">&gt;     <span class=\"comment\">// 获取Print Manager实例</span></div><div class=\"line\">&gt;     PrintManager printManager = (PrintManager) getActivity()</div><div class=\"line\">&gt;             .getSystemService(Context.PRINT_SERVICE);</div><div class=\"line\">&gt;     <span class=\"comment\">// 获取PrintAdapter实例</span></div><div class=\"line\">&gt;     PrintDocumentAdapter printAdapter = webView.createPrintDocumentAdapter();</div><div class=\"line\">&gt;     <span class=\"comment\">// 创建打印任务，传递给Printadapter，</span></div><div class=\"line\">&gt;     String jobName = getString(R.string.app_name) + <span class=\"string\">\" Document\"</span>;</div><div class=\"line\">&gt;     PrintJob printJob = printManager.print(jobName, printAdapter,</div><div class=\"line\">&gt;             <span class=\"keyword\">new</span> PrintAttributes.Builder().build());</div><div class=\"line\">&gt;     <span class=\"comment\">// 完成任务配置，加入打印列表。</span></div><div class=\"line\">&gt;     mPrintJobs.add(printJob);</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><h4 id=\"打印自定义文档\"><a href=\"#打印自定义文档\" class=\"headerlink\" title=\"打印自定义文档\"></a>打印自定义文档</h4><blockquote>\n<p>1、连接打印管理器，来创建打印任务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">doPrint</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">&gt;     <span class=\"comment\">// Get a PrintManager instance</span></div><div class=\"line\">&gt;     PrintManager printManager = (PrintManager) getActivity()</div><div class=\"line\">&gt;             .getSystemService(Context.PRINT_SERVICE);</div><div class=\"line\">&gt;     <span class=\"comment\">// Set job name, which will be displayed in the print queue</span></div><div class=\"line\">&gt;     String jobName = getActivity().getString(R.string.app_name) + <span class=\"string\">\" Document\"</span>;</div><div class=\"line\">&gt;     <span class=\"comment\">// Start a print job, passing in a PrintDocumentAdapter implementation</span></div><div class=\"line\">&gt;     <span class=\"comment\">// to handle the generation of a print document</span></div><div class=\"line\">&gt;     printManager.print(jobName, <span class=\"keyword\">new</span> MyPrintDocumentAdapter(getActivity()),</div><div class=\"line\">&gt;             <span class=\"keyword\">null</span>); <span class=\"comment\">//最后的参数是PrintAttributes，打印机属性设置。</span></div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>2、创建打印机适配器</p>\n<p><code>PrintDocumentAdapter</code>负责打印生命周期，</p>\n<ul>\n<li>onStart():开始打印，非必需实现的方法，因为总会被调用。</li>\n<li>onLayout(): 用户设置页面布局，尺寸之类的，会调用该函数。</li>\n<li>onWrite(): 将打印文件渲染成待打印状态，可以在onLayout()中多次调用该方法。</li>\n<li>onFinish(): 完成打印，非必需实现。</li>\n</ul>\n<p>调用onLayout()和onWrite()，尽量写入一个异步进程中，因为可能耗时。</p>\n<p>3、计算打印文档信息</p>\n<p>在Print Document Adapter的实现时，需要指定文档类型，计算页数，尺寸之类的信息。</p>\n<p>在onLayout()中计算这些数据，可从PrintDocumentInfo中获取。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"meta\">@Override</span></div><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayout</span><span class=\"params\">(PrintAttributes oldAttributes,</span></span></div><div class=\"line\">&gt;                      PrintAttributes newAttributes,</div><div class=\"line\">&gt;                      CancellationSignal cancellationSignal,</div><div class=\"line\">&gt;                      LayoutResultCallback callback,</div><div class=\"line\">&gt;                      Bundle metadata) &#123;</div><div class=\"line\">&gt;     <span class=\"comment\">// Create a new PdfDocument with the requested page attributes</span></div><div class=\"line\">&gt;     mPdfDocument = <span class=\"keyword\">new</span> PrintedPdfDocument(getActivity(), newAttributes);</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     <span class=\"comment\">// Respond to cancellation request</span></div><div class=\"line\">&gt;     <span class=\"keyword\">if</span> (cancellationSignal.isCancelled() ) &#123;</div><div class=\"line\">&gt;         callback.onLayoutCancelled();</div><div class=\"line\">&gt;         <span class=\"keyword\">return</span>;</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     <span class=\"comment\">// Compute the expected number of printed pages</span></div><div class=\"line\">&gt;     <span class=\"keyword\">int</span> pages = computePageCount(newAttributes);</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     <span class=\"keyword\">if</span> (pages &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">&gt;         <span class=\"comment\">// Return print information to print framework</span></div><div class=\"line\">&gt;         PrintDocumentInfo info = <span class=\"keyword\">new</span> PrintDocumentInfo</div><div class=\"line\">&gt;                 .Builder(<span class=\"string\">\"print_output.pdf\"</span>)</div><div class=\"line\">&gt;                 .setContentType(PrintDocumentInfo.CONTENT_TYPE_DOCUMENT)</div><div class=\"line\">&gt;                 .setPageCount(pages);</div><div class=\"line\">&gt;                 .build();</div><div class=\"line\">&gt;         <span class=\"comment\">// Content layout reflow is complete</span></div><div class=\"line\">&gt;         callback.onLayoutFinished(info, <span class=\"keyword\">true</span>);</div><div class=\"line\">&gt;     &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">&gt;         <span class=\"comment\">// Otherwise report an error to the print framework</span></div><div class=\"line\">&gt;         callback.onLayoutFailed(<span class=\"string\">\"Page count calculation failed.\"</span>);</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><code>onLayout()</code>方法返回结果：完成、取消、失败。必须通过调用PrintDocumentAdapter.LayoutResultCallback对象中的方法指定结果。在<code>onLayoutFinished()</code>方法中==boolean的参数==，指明是否与上次布局不同，来决定时候再次调用<code>onWrite()</code>方法。</p>\n<p><code>onLayout()</code>计算文档相关数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">computePageCount</span><span class=\"params\">(PrintAttributes printAttributes)</span> </span>&#123;</div><div class=\"line\">&gt;     <span class=\"keyword\">int</span> itemsPerPage = <span class=\"number\">4</span>; <span class=\"comment\">// default item count for portrait mode</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     MediaSize pageSize = printAttributes.getMediaSize();</div><div class=\"line\">&gt;     <span class=\"keyword\">if</span> (!pageSize.isPortrait()) &#123;</div><div class=\"line\">&gt;         <span class=\"comment\">// Six items per page in landscape orientation</span></div><div class=\"line\">&gt;         itemsPerPage = <span class=\"number\">6</span>;</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     <span class=\"comment\">// Determine number of print items</span></div><div class=\"line\">&gt;     <span class=\"keyword\">int</span> printItemCount = getPrintItemCount();</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>) Math.ceil(printItemCount / itemsPerPage);</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>4、将打印文档写入文件</p>\n<p>如下代码展示使用<code>PrintedPdfDocument</code>类创建pdf文档的基本原理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"meta\">@Override</span></div><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onWrite</span><span class=\"params\">(<span class=\"keyword\">final</span> PageRange[] pageRanges,</span></span></div><div class=\"line\">&gt;                     <span class=\"keyword\">final</span> ParcelFileDescriptor destination,</div><div class=\"line\">&gt;                     <span class=\"keyword\">final</span> CancellationSignal cancellationSignal,</div><div class=\"line\">&gt;                     <span class=\"keyword\">final</span> WriteResultCallback callback) &#123;</div><div class=\"line\">&gt;     <span class=\"comment\">// Iterate over each page of the document,</span></div><div class=\"line\">&gt;     <span class=\"comment\">// check if it's in the output range.</span></div><div class=\"line\">&gt;     <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; totalPages; i++) &#123;</div><div class=\"line\">&gt;         <span class=\"comment\">// Check to see if this page is in the output range.</span></div><div class=\"line\">&gt;         <span class=\"keyword\">if</span> (containsPage(pageRanges, i)) &#123;</div><div class=\"line\">&gt;             <span class=\"comment\">// If so, add it to writtenPagesArray. writtenPagesArray.size()</span></div><div class=\"line\">&gt;             <span class=\"comment\">// is used to compute the next output page index.</span></div><div class=\"line\">&gt;             writtenPagesArray.append(writtenPagesArray.size(), i);</div><div class=\"line\">&gt;             PdfDocument.Page page = mPdfDocument.startPage(i);</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;             <span class=\"comment\">// check for cancellation</span></div><div class=\"line\">&gt;             <span class=\"keyword\">if</span> (cancellationSignal.isCancelled()) &#123;</div><div class=\"line\">&gt;                 callback.onWriteCancelled();</div><div class=\"line\">&gt;                 mPdfDocument.close();</div><div class=\"line\">&gt;                 mPdfDocument = <span class=\"keyword\">null</span>;</div><div class=\"line\">&gt;                 <span class=\"keyword\">return</span>;</div><div class=\"line\">&gt;             &#125;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;             <span class=\"comment\">// Draw page content for printing</span></div><div class=\"line\">&gt;             drawPage(page);</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;             <span class=\"comment\">// Rendering is complete, so page can be finalized.</span></div><div class=\"line\">&gt;             mPdfDocument.finishPage(page);</div><div class=\"line\">&gt;         &#125;</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     <span class=\"comment\">// Write PDF document to file</span></div><div class=\"line\">&gt;     <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">&gt;         mPdfDocument.writeTo(<span class=\"keyword\">new</span> FileOutputStream(</div><div class=\"line\">&gt;                 destination.getFileDescriptor()));</div><div class=\"line\">&gt;     &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">&gt;         callback.onWriteFailed(e.toString());</div><div class=\"line\">&gt;         <span class=\"keyword\">return</span>;</div><div class=\"line\">&gt;     &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">&gt;         mPdfDocument.close();</div><div class=\"line\">&gt;         mPdfDocument = <span class=\"keyword\">null</span>;</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt;     PageRange[] writtenPages = computeWrittenPages();</div><div class=\"line\">&gt;     <span class=\"comment\">// Signal the print framework the document is complete</span></div><div class=\"line\">&gt;     callback.onWriteFinished(writtenPages);</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     ...</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>Pdf文档生成</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">drawPage</span><span class=\"params\">(PdfDocument.Page page)</span> </span>&#123;</div><div class=\"line\">&gt;     Canvas canvas = page.getCanvas();</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     <span class=\"comment\">// units are in points (1/72 of an inch)</span></div><div class=\"line\">&gt;     <span class=\"keyword\">int</span> titleBaseLine = <span class=\"number\">72</span>;</div><div class=\"line\">&gt;     <span class=\"keyword\">int</span> leftMargin = <span class=\"number\">54</span>;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     Paint paint = <span class=\"keyword\">new</span> Paint();</div><div class=\"line\">&gt;     paint.setColor(Color.BLACK);</div><div class=\"line\">&gt;     paint.setTextSize(<span class=\"number\">36</span>);</div><div class=\"line\">&gt;     canvas.drawText(<span class=\"string\">\"Test Title\"</span>, leftMargin, titleBaseLine, paint);</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     paint.setTextSize(<span class=\"number\">11</span>);</div><div class=\"line\">&gt;     canvas.drawText(<span class=\"string\">\"Test paragraph\"</span>, leftMargin, titleBaseLine + <span class=\"number\">25</span>, paint);</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     paint.setColor(Color.BLUE);</div><div class=\"line\">&gt;     canvas.drawRect(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">172</span>, <span class=\"number\">172</span>, paint);</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><strong>注意，canvas绘图使用point为单位</strong></p>\n</blockquote>\n</li>\n</ul>\n"},{"title":"Android分享操作","date":"2017-03-27T08:57:00.000Z","author":"冰路梦","_content":"## 第二章、Android分享操作\n\n### 1. 分享简单数据\n\n- #### 向其他app发送检单数据\n\n  >1. Intent发送数据必须有actions，其他对应action的activity响应事件。通过Intent实现分享功能，而ActionBar可使用`ShareActionProvider`来快速实现分享功能。如下是使用Intent.createChooser实现分享功能的demo：\n  >\n  >```java\n  >Intent sendIntent = new Intent();\n  >sendIntent.setAction(Intent.ACTION_SEND);\n  >sendIntent.putExtra(Intent.EXTRA_TEXT,\"This is My Text to send.\");\n  >sendIntent.setType(\"text/plain\");\n  >startActivity(Intent.createChooser(sendIntent,\"Share to My friends\");\n  >```\n  >\n  >*如上，可以显示出多个选择框，列出可响应的分享社交App*\n  >\n  >2. 分享二进制文件，需要指定特定的MIME类型，在EXTRA_STREAM里面放置数据的URI，如下分享一个图片的代码示例:\n  >\n  >   ```java\n  >   Intent shareIntent = new Intent();\n  >   shareIntent.setAction(Intent.ACTION_SEND);\n  >   shareIntent.putExtra(Intent.EXTRA_STREAM, uriToImage);//重要，指定URI\n  >   shareIntent.setType(\"image/jpeg\");//指定MIME类型\n  >   startActivity(Intent.createChooser(shareIntent,\"Share a picture\");\n  >   ```\n  >\n  >   ##### 注意：\n  >\n  >   - 可以使用`*/*`指定MIME类型，但是仅有能够处理一般数据类型的Activity才能匹配到。因为普通的Activity不能详尽所有MIME类型。\n  >   - 响应的Activity需要有访问URI的权限。两种方案，一是ContentProvider（per-URI permissions）；二是MediaStore（亦可存储非媒体文件，Android3.0以后。）\n  >\n  >3. 多块内容，Multiple。同时分享不同的内容，可使用`ACTION_SEND_MULTIPLE`及数据URIs。而MIME需根据内容类型调整，可使用\\*符号。如`image/jpeg`、`image/*`、`*/*`。如下：\n  >\n  >   ```java\n  >   ArrayList<Uri> imageUris = new ArrayList<Uri>();\n  >   imageUris.add(imageUri1); // Add your image URIs here\n  >   imageUris.add(imageUri2);\n  >   //接收Activity需要有权限哦\n  >   Intent shareIntent = new Intent();\n  >   shareIntent.setAction(Intent.ACTION_SEND_MULTIPLE);//复合类型的MIME，Action\n  >   shareIntent.putParcelableArrayListExtra(Intent.EXTRA_STREAM, imageUris);//传递数组\n  >   shareIntent.setType(\"image/*\");//复合MIME\n  >   startActivity(Intent.createChooser(shareIntent, \"Share images to..\"));\n  >   ```\n\n- #### 接收外App传的数据\n\n  > - Activity 在manifest文件 配置，通过Intent Filters来过滤需要处理的数据Action，如下Activity接收单张图片、文本、多张图片时，不同的intent-filer配置：\n  >\n  >   ```xml\n  >   <activity android:name=\".ui.MyActivity\" >\n  >     <!-- 注释，单类型图片的Action过滤，其Action名称不同-->\n  >       <intent-filter>\n  >           <action android:name=\"android.intent.action.SEND\" />\n  >           <category android:name=\"android.intent.category.DEFAULT\" />\n  >           <data android:mimeType=\"image/*\" />\n  >       </intent-filter>\n  >     <!-- 注释，文本类型的Action过滤-->\n  >       <intent-filter>\n  >           <action android:name=\"android.intent.action.SEND\" />\n  >           <category android:name=\"android.intent.category.DEFAULT\" />\n  >           <data android:mimeType=\"text/plain\" />\n  >       </intent-filter>\n  >     <!-- 注释，多种类型图片的Action过滤-->\n  >       <intent-filter>\n  >           <action android:name=\"android.intent.action.SEND_MULTIPLE\" />\n  >           <category android:name=\"android.intent.category.DEFAULT\" />\n  >           <data android:mimeType=\"image/*\" />\n  >       </intent-filter>\n  >   </activity>\n  >   ```\n  >\n  > - 处理接收数据，通过getIntent()来获取extra数据，需要知道传递来的具体类型，结构，做相应处理。有时需要访问权限。若是数据量太大，应考虑避免UI线程的阻塞。\n\n- #### ActionBar 分享功能\n\n  > Android4.0引入ActionProvider，其子类ShareActionProvider用于分享数据。ActionBar步骤：\n  >\n  > 1. 在Menu的xml中定义`android:actionProviderClass`属性。\n  >\n  >    ```xml\n  >    <menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n  >        <item android:id=\"@+id/menu_item_share\"\n  >            android:showAsAction=\"ifRoom\"\n  >            android:title=\"Share\"\n  >            android:actionProviderClass=\"android.widget.ShareActionProvider\" />\n  >      <!--如上则声明该item需要share action provider来匹配内容 -->\n  >        ...\n  >    </menu>\n  >    ```\n  >\n  > 2. 需要提供intent给ShareActionProvider，示例如下：\n  >\n  >    ```java\n  >    private ShareActionProvider mShareActionProvider;\n  >    ...\n  >    @Override\n  >    public boolean onCreateOptionsMenu(Menu menu) {\n  >        //菜单布局文件\n  >        getMenuInflater().inflate(R.menu.share_menu, menu);\n  >        //加载配有ShareActionProvider属性的item\n  >        MenuItem item = menu.findItem(R.id.menu_item_share);\n  >        // 实例化ShareActionProvider\n  >        mShareActionProvider = (ShareActionProvider) item.getActionProvider();\n  >        // 返回true表示显示菜单项\n  >        return true;\n  >    }\n  >    //回调更新intent，用于分享\n  >    private void setShareIntent(Intent shareIntent) {\n  >        if (mShareActionProvider != null) {\n  >            mShareActionProvider.setShareIntent(shareIntent);\n  >        }\n  >    }\n  >    ```\n\n### 2. 分享文件\n\n​\t分享文件最为安全的方式是使用content URI，Android中FileProvider有getUriForFile()创建文件content URI。少量数据可以用intent传递。\n\n- #### 建立文件分享\n\n  > 要安全地提供文件分享，需要配置Content URI。\n  >\n  > 1. 指定FileProvider，在manifest中定义一个provider的entry，声明Authority等。如下示例：\n  >\n  > ```xml\n  > <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n  >     package=\"com.example.myapp\">\n  >     <application\n  >         ...>\n  >       <!-- authorities、meta-data的配置 -->\n  >         <provider\n  >             android:name=\"android.support.v4.content.FileProvider\"\n  >             android:authorities=\"com.example.myapp.fileprovider\"\n  >             android:grantUriPermissions=\"true\"\n  >             android:exported=\"false\">\n  >             <meta-data\n  >                 android:name=\"android.support.FILE_PROVIDER_PATHS\"\n  >                 android:resource=\"@xml/filepaths\" />\n  >           <!-- meta-data指定文件共享目录，在res/xml下 -->\n  >         </provider>\n  >         ...\n  >     </application>\n  > </manifest>\n  > ```\n  >\n  > 2. 共享文件的目录，res/xml中配置，filepaths.xml，如下示例：\n  >\n  >    ```xml\n  >    <paths>\n  >      <!-- 每一个共享目录都是一个item，这里表示共享了files/ 目录下的子目录，files-path这个标签适用于共享应用内部储存，files/下的目录。name=“myimages” 做为content uri中的路径标记-->\n  >    \t<files-path path=\"images/\" name=\"myimages\"/>\n  >    </paths>\n  >    ```\n  >\n  >    `<paths>`有多个子标签，各自代表不同共享目录，`<files-path>`表示内部files/下目录，`<external-path>`外部存储目录，`<cache-path>`缓存目录。参考[FileProvider]()。注意*xml里写的目录，无法在代码中追加和修改*\n  >\n  >    - Content URI包含`<provider>`指定Authority（“com.example.myapp.fileprovider”）;\n  >    - 路径“myimages/”；\n  >    - 文件名称。\n  >\n  >    例如获取上述files/images/下的aa.jpg文件，File Provider提供的URI：\n  >\n  >    `content://com.example.myapp.fileprovider/myimages/aa.jpg`\n\n- #### 分享文件\n\n  > - 上面创建了共享提供者，此处需要共享请求者。\n  >\n  > ```java\n  >  File requestFile = new File(mImageFilename[position]);\n  >                 try {\n  >                     fileUri = FileProvider.getUriForFile(\n  >                             MainActivity.this,\n  >                             \"com.example.myapp.fileprovider\",\n  >                             requestFile);\n  >                 } catch (IllegalArgumentException e) {\n  >                     Log.e(\"File Selector\",\n  >                           \"The selected file can't be shared: \" +\n  >                           clickedFilename);\n  >                 }\n  > ```\n  >\n  > *需要注意的是，能获取content uri的文件，都是在manifest文件中，provider下meta-data配置了`<paths>`标签内的文件，否则会抛IllegalArgumentException*\n  >\n  > - 设置文件授权：\n  >\n  >   ```java\n  >   if(fileUri != null){\n  >     //Grant temporary read permission to the content URI，授权具有临时性，一次性。\n  >     mResultIntent.addFlags(Intent.FLAG_GRANT_URI_PERMISSION);\n  >   }\n  >   ```\n  >\n  >   **Caution:**调用setFlags()授权文件是唯一的安全方法，应避免Context.grantUriPermission(),它需要Context.revokeUriPermission()才能撤销授权。\n\n- #### 请求分享文件\n\n  > 一般文件共享分为共享者与请求者，或者服务器与客户端。服务器需要配置共享清单，客户端需要请求共享，并指定请求类型。\n  >\n  > -    发送文件请求，客户端startActivityForResult()，通过intent的Action，附带data，MIME去请求服务器的共享数据。服务器来显示对应的共享清单。\n  >\n  >      ```java\n  >      mRequestFileIntent = new Intent(Intent.ACTION_PICK);//Action\n  >      mRequestFileIntent.setType(\"image/jpg\");//MIME类型\n  >      ...\n  >      ```\n  >\n  > - 在onActivityResult()中处理服务器返回的URI，注：*刚开始只是处理URI，而无任何实际的文件操作和访问，不会影响服务器文件安全*。\n  >\n  >      ```java\n  >                   @Override\n  >            public void onActivityResult(int requestCode, int resultCode,\n  >                           Intent returnIntent) {\n  >                       // If the selection didn't work\n  >                       if (resultCode != RESULT_OK) {\n  >                           // Exit without doing anything else\n  >                           return;\n  >                       } else {\n  >                           // Get the file's content URI from the incoming Intent\n  >                           Uri returnUri = returnIntent.getData();\n  >                           /*\n  >      * Try to open the file for \"read\" access using the\n  >      * returned URI. If the file isn't found, write to the\n  >      * error log and return.\n  >      */\n  >      try {\n  >               /*\n  >                * Get the content resolver instance for this context, and use it\n  >                * to get a ParcelFileDescriptor for the file.\n  >                */\n  >               mInputPFD = getContentResolver().openFileDescriptor(returnUri, \"r\");\n  >           } catch (FileNotFoundException e) {\n  >               e.printStackTrace();\n  >               Log.e(\"MainActivity\", \"File not found.\");\n  >               return;\n  >           }\n  >           // Get a regular file descriptor for the file,客户端利用FileDescriptor对象类操作文件。\n  >           FileDescriptor fd = mInputPFD.getFileDescriptor();\n  >           ...\n  >      }\n  >      ```\n\n- #### 获取文件信息\n\n  > 上一步获取了服务器提供的content uri和file descriptor对象，但并不能操作文件，还需要指导文件信息，如大小、类型。\n  >\n  > -    获取文件MIME，通过ContentResolver.getType()获取uri对应的文件类型。\n  >\n  >      ```java\n  >      Uri returnUri = returnIntent.getData();\n  >      String mimeType = getContentResolver().getType(returnUri);\n  >      ```\n  >\n  > - 获取文件大小，[FileProvider]()的query()方法返回Cuisor对象，包含对应uri的文件名称大小信息。[DISPLAY_NAME]()，[SIZE]()。\n  >\n  >      ```java\n  >             Uri returnUri = returnIntent.getData();\n  >                Cursor returnCursor =\n  >                        getContentResolver().query(returnUri, null, null, null, null);\n  >                /*\n  >      * Get the column indexes of the data in the Cursor,\n  >      * move to the first row in the Cursor, get the data,\n  >      * and display it.\n  >      */\n  >        int nameIndex = returnCursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);\n  >        int sizeIndex = returnCursor.getColumnIndex(OpenableColumns.SIZE);\n  >        returnCursor.moveToFirst();\n  >      ```\n\n### 3. NFC分享文件\n\nAndroid Beam文件传输可在设备间传输大文件，API调用方便。\n\n- #### 发送文件\n\n  > 使用NFC发送文件，需要设备支持NFC且app生命NFC和外部存储权限。使用URI给Android Beam来传出文件。需要满足以下要求：\n  >\n  > 1. `Android版本api>=16。`\n  >\n  > 2. `传送的文件必须在外部存储上。`\n  >\n  > 3. 文件必须全局可读，可以用File.setReadable(true,false)来设置。\n  >\n  > 4. 必须提供文件的File URI。Android Beam无法处理FileProvider.getUriForFile生成的URI。\n  >\n  >    ```xml\n  >    <uses-permission android:name=\"android.permission.NFC\" />\n  >    <uses-permission android:name=\"android.permission.READ_EXTERNAL_STORANGE\" />\n  >    ```\n  >\n  >    *其中外部存储权限在4.2.2之前不是必须声明的。*\n  >\n  >    ```xml\n  >    <uses-feature android:name=\"android.hardware.nfc\"\n  >                  android:required=\"true\" />\n  >    <!-- 如此设置，声明该应用必须要硬件nfc支持才可以运行。若是required为false，则需要检测设备是否支持Android Beam-->\n  >    ```\n  >\n  > - 测试Android Beam，PackageManager.hasSystemFeature()和参数FEATURE_NFC来测是nfc。Build.VERSION.SDK_INT系统版本号。\n  >\n  >   ```java\n  >   boolean hasNFC= PackageManager.hasSystemFeature(PackageManager.FEATURE_NFC);//判断NFC可用与否。\n  >   Build.VERSION.SDK_INT<Build.VERSION_CODE.JELLY_BEAN_MR1//版本低。\n  >     //可用的话，实例化NfcAdapter\n  >     NfcAdapter adapter = NfcAdatper.getDefaultAdapter(this);\n  >   ```\n  >\n  > - 通过回调函数获取数据\n  >\n  >   ```java\n  >   private Uri[] mFileUris = new Uri[10];//提供给AndroidBeam的URIs\n  >   private class FileUriCallback implements NfcAdapter.CreateBeamUrisCallback{\n  >     public FileUriCallback(){\n  >     }\n  >     @override\n  >     public Uri[] createBeamUris(NfcEvent event){\n  >       return mFileUris;\n  >     }\n  >   }\n  >   ```\n  >\n  >   通过setBeamPushUrisCallback()将回调提供给Android Beam文件传输。\n  >\n  >   ```java\n  >   mFileUriCallback = new FileUriCallback();\n  >   mNfcAdapter.setBeamPushUrisCallback(mFileUriCallback,this);\n  >   ```\n  >\n  > - 指定要发送的文件，给文件File URI，然后加入URIs数组。记住需要有文件的读取权限。\n\n- #### 接收文件\n\n  > Android Beam文件传输时，是将文件copy到某特殊目录，然后由Media Scanner扫描文件，在MediaStore Provider中为媒体文件添加条目记录。\n  >\n  > - 响应传输来的请求，并显示数据。\n  >\n  >   > Android Beam传输数据到接收设备后，会发送Intent通知，包含ACTION_VIEW,MIME,URI。用户确认通知后，intent被发至系统，寻求其他响应。\n  >   >\n  >   > Activity在manifest配置`<intent-filter>`加入`<action android:name=\"android.intent.action.VIEW\"/>`、`<category android:name=\"android.intent.category.CATEGORY_DEFAULT\"`、`<data android:nimeType=\"mime-type\"`分别标识不同的Action，category和数据type。\n  >\n  >   **Action_view的action也不一定就是Android beam发送的。***\n  >\n  >   ```xml\n  >   <activity \n  >     android:name=\"com.example.android.nfctransfer.ViewActivity\"\n  >       android:label=\"Android Beam Viewer\">\n  >         <intent-filter>\n  >           <action android:name=\"android.intent.action.VIEW\"/>\n  >           <category android:name=\"android.intent.category.DEFAULT\"/>\n  >           ...\n  >           </intent-filter>\n  >     </activity>\n  >   ```\n  >\n  > - 读取文件需要权限\n  >\n  >   `<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"/>`\n  >\n  >   上面所说，ACTION_VIEW不一定就是AndroidBeam发送的intent，所以需要检查Scheme和Authority。调用Uri.getScheme。\n  >\n  >   ```java\n  >   mIntent = getIntent();\n  >   //判断Action，机器Scheme和Authority\n  >   Uri beamUri = mIntent.getData();\n  >   beamUri.getScheme();//判断是否是“file”，或者“content”\n  >   ```\n  >\n  > - File URI中获取目录\n  >\n  >   ```java\n  >   public String handleFileUri(Uri beamUri) {\n  >           // Get the path part of the URI\n  >           String fileName = beamUri.getPath();\n  >           // Create a File object for this filename\n  >           File copiedFile = new File(fileName);\n  >           // Get a string containing the file's parent directory\n  >           return copiedFile.getParent();\n  >       }\n  >   ```\n  >\n  > - Content URI中获取目录，MediaS tore会含有文件的uri信息。Uri.getAuthority()获取authority，返回值MediaStore.AUTHORITY或者其他。\n  >\n  >   为其他类型时候，不一定可以获取目录；\n\n\n","source":"_posts/第二篇、Android分享操作.md","raw":"---\ntitle: \"Android分享操作\"\ndate: 2017-03-27 16:57\nauthor: 冰路梦\ntag:\n    - Android\ncategories:\n    - Android\n---\n## 第二章、Android分享操作\n\n### 1. 分享简单数据\n\n- #### 向其他app发送检单数据\n\n  >1. Intent发送数据必须有actions，其他对应action的activity响应事件。通过Intent实现分享功能，而ActionBar可使用`ShareActionProvider`来快速实现分享功能。如下是使用Intent.createChooser实现分享功能的demo：\n  >\n  >```java\n  >Intent sendIntent = new Intent();\n  >sendIntent.setAction(Intent.ACTION_SEND);\n  >sendIntent.putExtra(Intent.EXTRA_TEXT,\"This is My Text to send.\");\n  >sendIntent.setType(\"text/plain\");\n  >startActivity(Intent.createChooser(sendIntent,\"Share to My friends\");\n  >```\n  >\n  >*如上，可以显示出多个选择框，列出可响应的分享社交App*\n  >\n  >2. 分享二进制文件，需要指定特定的MIME类型，在EXTRA_STREAM里面放置数据的URI，如下分享一个图片的代码示例:\n  >\n  >   ```java\n  >   Intent shareIntent = new Intent();\n  >   shareIntent.setAction(Intent.ACTION_SEND);\n  >   shareIntent.putExtra(Intent.EXTRA_STREAM, uriToImage);//重要，指定URI\n  >   shareIntent.setType(\"image/jpeg\");//指定MIME类型\n  >   startActivity(Intent.createChooser(shareIntent,\"Share a picture\");\n  >   ```\n  >\n  >   ##### 注意：\n  >\n  >   - 可以使用`*/*`指定MIME类型，但是仅有能够处理一般数据类型的Activity才能匹配到。因为普通的Activity不能详尽所有MIME类型。\n  >   - 响应的Activity需要有访问URI的权限。两种方案，一是ContentProvider（per-URI permissions）；二是MediaStore（亦可存储非媒体文件，Android3.0以后。）\n  >\n  >3. 多块内容，Multiple。同时分享不同的内容，可使用`ACTION_SEND_MULTIPLE`及数据URIs。而MIME需根据内容类型调整，可使用\\*符号。如`image/jpeg`、`image/*`、`*/*`。如下：\n  >\n  >   ```java\n  >   ArrayList<Uri> imageUris = new ArrayList<Uri>();\n  >   imageUris.add(imageUri1); // Add your image URIs here\n  >   imageUris.add(imageUri2);\n  >   //接收Activity需要有权限哦\n  >   Intent shareIntent = new Intent();\n  >   shareIntent.setAction(Intent.ACTION_SEND_MULTIPLE);//复合类型的MIME，Action\n  >   shareIntent.putParcelableArrayListExtra(Intent.EXTRA_STREAM, imageUris);//传递数组\n  >   shareIntent.setType(\"image/*\");//复合MIME\n  >   startActivity(Intent.createChooser(shareIntent, \"Share images to..\"));\n  >   ```\n\n- #### 接收外App传的数据\n\n  > - Activity 在manifest文件 配置，通过Intent Filters来过滤需要处理的数据Action，如下Activity接收单张图片、文本、多张图片时，不同的intent-filer配置：\n  >\n  >   ```xml\n  >   <activity android:name=\".ui.MyActivity\" >\n  >     <!-- 注释，单类型图片的Action过滤，其Action名称不同-->\n  >       <intent-filter>\n  >           <action android:name=\"android.intent.action.SEND\" />\n  >           <category android:name=\"android.intent.category.DEFAULT\" />\n  >           <data android:mimeType=\"image/*\" />\n  >       </intent-filter>\n  >     <!-- 注释，文本类型的Action过滤-->\n  >       <intent-filter>\n  >           <action android:name=\"android.intent.action.SEND\" />\n  >           <category android:name=\"android.intent.category.DEFAULT\" />\n  >           <data android:mimeType=\"text/plain\" />\n  >       </intent-filter>\n  >     <!-- 注释，多种类型图片的Action过滤-->\n  >       <intent-filter>\n  >           <action android:name=\"android.intent.action.SEND_MULTIPLE\" />\n  >           <category android:name=\"android.intent.category.DEFAULT\" />\n  >           <data android:mimeType=\"image/*\" />\n  >       </intent-filter>\n  >   </activity>\n  >   ```\n  >\n  > - 处理接收数据，通过getIntent()来获取extra数据，需要知道传递来的具体类型，结构，做相应处理。有时需要访问权限。若是数据量太大，应考虑避免UI线程的阻塞。\n\n- #### ActionBar 分享功能\n\n  > Android4.0引入ActionProvider，其子类ShareActionProvider用于分享数据。ActionBar步骤：\n  >\n  > 1. 在Menu的xml中定义`android:actionProviderClass`属性。\n  >\n  >    ```xml\n  >    <menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n  >        <item android:id=\"@+id/menu_item_share\"\n  >            android:showAsAction=\"ifRoom\"\n  >            android:title=\"Share\"\n  >            android:actionProviderClass=\"android.widget.ShareActionProvider\" />\n  >      <!--如上则声明该item需要share action provider来匹配内容 -->\n  >        ...\n  >    </menu>\n  >    ```\n  >\n  > 2. 需要提供intent给ShareActionProvider，示例如下：\n  >\n  >    ```java\n  >    private ShareActionProvider mShareActionProvider;\n  >    ...\n  >    @Override\n  >    public boolean onCreateOptionsMenu(Menu menu) {\n  >        //菜单布局文件\n  >        getMenuInflater().inflate(R.menu.share_menu, menu);\n  >        //加载配有ShareActionProvider属性的item\n  >        MenuItem item = menu.findItem(R.id.menu_item_share);\n  >        // 实例化ShareActionProvider\n  >        mShareActionProvider = (ShareActionProvider) item.getActionProvider();\n  >        // 返回true表示显示菜单项\n  >        return true;\n  >    }\n  >    //回调更新intent，用于分享\n  >    private void setShareIntent(Intent shareIntent) {\n  >        if (mShareActionProvider != null) {\n  >            mShareActionProvider.setShareIntent(shareIntent);\n  >        }\n  >    }\n  >    ```\n\n### 2. 分享文件\n\n​\t分享文件最为安全的方式是使用content URI，Android中FileProvider有getUriForFile()创建文件content URI。少量数据可以用intent传递。\n\n- #### 建立文件分享\n\n  > 要安全地提供文件分享，需要配置Content URI。\n  >\n  > 1. 指定FileProvider，在manifest中定义一个provider的entry，声明Authority等。如下示例：\n  >\n  > ```xml\n  > <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n  >     package=\"com.example.myapp\">\n  >     <application\n  >         ...>\n  >       <!-- authorities、meta-data的配置 -->\n  >         <provider\n  >             android:name=\"android.support.v4.content.FileProvider\"\n  >             android:authorities=\"com.example.myapp.fileprovider\"\n  >             android:grantUriPermissions=\"true\"\n  >             android:exported=\"false\">\n  >             <meta-data\n  >                 android:name=\"android.support.FILE_PROVIDER_PATHS\"\n  >                 android:resource=\"@xml/filepaths\" />\n  >           <!-- meta-data指定文件共享目录，在res/xml下 -->\n  >         </provider>\n  >         ...\n  >     </application>\n  > </manifest>\n  > ```\n  >\n  > 2. 共享文件的目录，res/xml中配置，filepaths.xml，如下示例：\n  >\n  >    ```xml\n  >    <paths>\n  >      <!-- 每一个共享目录都是一个item，这里表示共享了files/ 目录下的子目录，files-path这个标签适用于共享应用内部储存，files/下的目录。name=“myimages” 做为content uri中的路径标记-->\n  >    \t<files-path path=\"images/\" name=\"myimages\"/>\n  >    </paths>\n  >    ```\n  >\n  >    `<paths>`有多个子标签，各自代表不同共享目录，`<files-path>`表示内部files/下目录，`<external-path>`外部存储目录，`<cache-path>`缓存目录。参考[FileProvider]()。注意*xml里写的目录，无法在代码中追加和修改*\n  >\n  >    - Content URI包含`<provider>`指定Authority（“com.example.myapp.fileprovider”）;\n  >    - 路径“myimages/”；\n  >    - 文件名称。\n  >\n  >    例如获取上述files/images/下的aa.jpg文件，File Provider提供的URI：\n  >\n  >    `content://com.example.myapp.fileprovider/myimages/aa.jpg`\n\n- #### 分享文件\n\n  > - 上面创建了共享提供者，此处需要共享请求者。\n  >\n  > ```java\n  >  File requestFile = new File(mImageFilename[position]);\n  >                 try {\n  >                     fileUri = FileProvider.getUriForFile(\n  >                             MainActivity.this,\n  >                             \"com.example.myapp.fileprovider\",\n  >                             requestFile);\n  >                 } catch (IllegalArgumentException e) {\n  >                     Log.e(\"File Selector\",\n  >                           \"The selected file can't be shared: \" +\n  >                           clickedFilename);\n  >                 }\n  > ```\n  >\n  > *需要注意的是，能获取content uri的文件，都是在manifest文件中，provider下meta-data配置了`<paths>`标签内的文件，否则会抛IllegalArgumentException*\n  >\n  > - 设置文件授权：\n  >\n  >   ```java\n  >   if(fileUri != null){\n  >     //Grant temporary read permission to the content URI，授权具有临时性，一次性。\n  >     mResultIntent.addFlags(Intent.FLAG_GRANT_URI_PERMISSION);\n  >   }\n  >   ```\n  >\n  >   **Caution:**调用setFlags()授权文件是唯一的安全方法，应避免Context.grantUriPermission(),它需要Context.revokeUriPermission()才能撤销授权。\n\n- #### 请求分享文件\n\n  > 一般文件共享分为共享者与请求者，或者服务器与客户端。服务器需要配置共享清单，客户端需要请求共享，并指定请求类型。\n  >\n  > -    发送文件请求，客户端startActivityForResult()，通过intent的Action，附带data，MIME去请求服务器的共享数据。服务器来显示对应的共享清单。\n  >\n  >      ```java\n  >      mRequestFileIntent = new Intent(Intent.ACTION_PICK);//Action\n  >      mRequestFileIntent.setType(\"image/jpg\");//MIME类型\n  >      ...\n  >      ```\n  >\n  > - 在onActivityResult()中处理服务器返回的URI，注：*刚开始只是处理URI，而无任何实际的文件操作和访问，不会影响服务器文件安全*。\n  >\n  >      ```java\n  >                   @Override\n  >            public void onActivityResult(int requestCode, int resultCode,\n  >                           Intent returnIntent) {\n  >                       // If the selection didn't work\n  >                       if (resultCode != RESULT_OK) {\n  >                           // Exit without doing anything else\n  >                           return;\n  >                       } else {\n  >                           // Get the file's content URI from the incoming Intent\n  >                           Uri returnUri = returnIntent.getData();\n  >                           /*\n  >      * Try to open the file for \"read\" access using the\n  >      * returned URI. If the file isn't found, write to the\n  >      * error log and return.\n  >      */\n  >      try {\n  >               /*\n  >                * Get the content resolver instance for this context, and use it\n  >                * to get a ParcelFileDescriptor for the file.\n  >                */\n  >               mInputPFD = getContentResolver().openFileDescriptor(returnUri, \"r\");\n  >           } catch (FileNotFoundException e) {\n  >               e.printStackTrace();\n  >               Log.e(\"MainActivity\", \"File not found.\");\n  >               return;\n  >           }\n  >           // Get a regular file descriptor for the file,客户端利用FileDescriptor对象类操作文件。\n  >           FileDescriptor fd = mInputPFD.getFileDescriptor();\n  >           ...\n  >      }\n  >      ```\n\n- #### 获取文件信息\n\n  > 上一步获取了服务器提供的content uri和file descriptor对象，但并不能操作文件，还需要指导文件信息，如大小、类型。\n  >\n  > -    获取文件MIME，通过ContentResolver.getType()获取uri对应的文件类型。\n  >\n  >      ```java\n  >      Uri returnUri = returnIntent.getData();\n  >      String mimeType = getContentResolver().getType(returnUri);\n  >      ```\n  >\n  > - 获取文件大小，[FileProvider]()的query()方法返回Cuisor对象，包含对应uri的文件名称大小信息。[DISPLAY_NAME]()，[SIZE]()。\n  >\n  >      ```java\n  >             Uri returnUri = returnIntent.getData();\n  >                Cursor returnCursor =\n  >                        getContentResolver().query(returnUri, null, null, null, null);\n  >                /*\n  >      * Get the column indexes of the data in the Cursor,\n  >      * move to the first row in the Cursor, get the data,\n  >      * and display it.\n  >      */\n  >        int nameIndex = returnCursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);\n  >        int sizeIndex = returnCursor.getColumnIndex(OpenableColumns.SIZE);\n  >        returnCursor.moveToFirst();\n  >      ```\n\n### 3. NFC分享文件\n\nAndroid Beam文件传输可在设备间传输大文件，API调用方便。\n\n- #### 发送文件\n\n  > 使用NFC发送文件，需要设备支持NFC且app生命NFC和外部存储权限。使用URI给Android Beam来传出文件。需要满足以下要求：\n  >\n  > 1. `Android版本api>=16。`\n  >\n  > 2. `传送的文件必须在外部存储上。`\n  >\n  > 3. 文件必须全局可读，可以用File.setReadable(true,false)来设置。\n  >\n  > 4. 必须提供文件的File URI。Android Beam无法处理FileProvider.getUriForFile生成的URI。\n  >\n  >    ```xml\n  >    <uses-permission android:name=\"android.permission.NFC\" />\n  >    <uses-permission android:name=\"android.permission.READ_EXTERNAL_STORANGE\" />\n  >    ```\n  >\n  >    *其中外部存储权限在4.2.2之前不是必须声明的。*\n  >\n  >    ```xml\n  >    <uses-feature android:name=\"android.hardware.nfc\"\n  >                  android:required=\"true\" />\n  >    <!-- 如此设置，声明该应用必须要硬件nfc支持才可以运行。若是required为false，则需要检测设备是否支持Android Beam-->\n  >    ```\n  >\n  > - 测试Android Beam，PackageManager.hasSystemFeature()和参数FEATURE_NFC来测是nfc。Build.VERSION.SDK_INT系统版本号。\n  >\n  >   ```java\n  >   boolean hasNFC= PackageManager.hasSystemFeature(PackageManager.FEATURE_NFC);//判断NFC可用与否。\n  >   Build.VERSION.SDK_INT<Build.VERSION_CODE.JELLY_BEAN_MR1//版本低。\n  >     //可用的话，实例化NfcAdapter\n  >     NfcAdapter adapter = NfcAdatper.getDefaultAdapter(this);\n  >   ```\n  >\n  > - 通过回调函数获取数据\n  >\n  >   ```java\n  >   private Uri[] mFileUris = new Uri[10];//提供给AndroidBeam的URIs\n  >   private class FileUriCallback implements NfcAdapter.CreateBeamUrisCallback{\n  >     public FileUriCallback(){\n  >     }\n  >     @override\n  >     public Uri[] createBeamUris(NfcEvent event){\n  >       return mFileUris;\n  >     }\n  >   }\n  >   ```\n  >\n  >   通过setBeamPushUrisCallback()将回调提供给Android Beam文件传输。\n  >\n  >   ```java\n  >   mFileUriCallback = new FileUriCallback();\n  >   mNfcAdapter.setBeamPushUrisCallback(mFileUriCallback,this);\n  >   ```\n  >\n  > - 指定要发送的文件，给文件File URI，然后加入URIs数组。记住需要有文件的读取权限。\n\n- #### 接收文件\n\n  > Android Beam文件传输时，是将文件copy到某特殊目录，然后由Media Scanner扫描文件，在MediaStore Provider中为媒体文件添加条目记录。\n  >\n  > - 响应传输来的请求，并显示数据。\n  >\n  >   > Android Beam传输数据到接收设备后，会发送Intent通知，包含ACTION_VIEW,MIME,URI。用户确认通知后，intent被发至系统，寻求其他响应。\n  >   >\n  >   > Activity在manifest配置`<intent-filter>`加入`<action android:name=\"android.intent.action.VIEW\"/>`、`<category android:name=\"android.intent.category.CATEGORY_DEFAULT\"`、`<data android:nimeType=\"mime-type\"`分别标识不同的Action，category和数据type。\n  >\n  >   **Action_view的action也不一定就是Android beam发送的。***\n  >\n  >   ```xml\n  >   <activity \n  >     android:name=\"com.example.android.nfctransfer.ViewActivity\"\n  >       android:label=\"Android Beam Viewer\">\n  >         <intent-filter>\n  >           <action android:name=\"android.intent.action.VIEW\"/>\n  >           <category android:name=\"android.intent.category.DEFAULT\"/>\n  >           ...\n  >           </intent-filter>\n  >     </activity>\n  >   ```\n  >\n  > - 读取文件需要权限\n  >\n  >   `<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"/>`\n  >\n  >   上面所说，ACTION_VIEW不一定就是AndroidBeam发送的intent，所以需要检查Scheme和Authority。调用Uri.getScheme。\n  >\n  >   ```java\n  >   mIntent = getIntent();\n  >   //判断Action，机器Scheme和Authority\n  >   Uri beamUri = mIntent.getData();\n  >   beamUri.getScheme();//判断是否是“file”，或者“content”\n  >   ```\n  >\n  > - File URI中获取目录\n  >\n  >   ```java\n  >   public String handleFileUri(Uri beamUri) {\n  >           // Get the path part of the URI\n  >           String fileName = beamUri.getPath();\n  >           // Create a File object for this filename\n  >           File copiedFile = new File(fileName);\n  >           // Get a string containing the file's parent directory\n  >           return copiedFile.getParent();\n  >       }\n  >   ```\n  >\n  > - Content URI中获取目录，MediaS tore会含有文件的uri信息。Uri.getAuthority()获取authority，返回值MediaStore.AUTHORITY或者其他。\n  >\n  >   为其他类型时候，不一定可以获取目录；\n\n\n","slug":"第二篇、Android分享操作","published":1,"updated":"2017-03-28T09:42:15.071Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ndxce3003l88owb46efqaa","content":"<h2 id=\"第二章、Android分享操作\"><a href=\"#第二章、Android分享操作\" class=\"headerlink\" title=\"第二章、Android分享操作\"></a>第二章、Android分享操作</h2><h3 id=\"1-分享简单数据\"><a href=\"#1-分享简单数据\" class=\"headerlink\" title=\"1. 分享简单数据\"></a>1. 分享简单数据</h3><ul>\n<li><h4 id=\"向其他app发送检单数据\"><a href=\"#向其他app发送检单数据\" class=\"headerlink\" title=\"向其他app发送检单数据\"></a>向其他app发送检单数据</h4><blockquote>\n<ol>\n<li>Intent发送数据必须有actions，其他对应action的activity响应事件。通过Intent实现分享功能，而ActionBar可使用<code>ShareActionProvider</code>来快速实现分享功能。如下是使用Intent.createChooser实现分享功能的demo：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;Intent sendIntent = <span class=\"keyword\">new</span> Intent();</div><div class=\"line\">&gt;sendIntent.setAction(Intent.ACTION_SEND);</div><div class=\"line\">&gt;sendIntent.putExtra(Intent.EXTRA_TEXT,<span class=\"string\">\"This is My Text to send.\"</span>);</div><div class=\"line\">&gt;sendIntent.setType(<span class=\"string\">\"text/plain\"</span>);</div><div class=\"line\">&gt;startActivity(Intent.createChooser(sendIntent,<span class=\"string\">\"Share to My friends\"</span>);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><em>如上，可以显示出多个选择框，列出可响应的分享社交App</em></p>\n<ol>\n<li><p>分享二进制文件，需要指定特定的MIME类型，在EXTRA_STREAM里面放置数据的URI，如下分享一个图片的代码示例:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   Intent shareIntent = <span class=\"keyword\">new</span> Intent();</div><div class=\"line\">&gt;   shareIntent.setAction(Intent.ACTION_SEND);</div><div class=\"line\">&gt;   shareIntent.putExtra(Intent.EXTRA_STREAM, uriToImage);<span class=\"comment\">//重要，指定URI</span></div><div class=\"line\">&gt;   shareIntent.setType(<span class=\"string\">\"image/jpeg\"</span>);<span class=\"comment\">//指定MIME类型</span></div><div class=\"line\">&gt;   startActivity(Intent.createChooser(shareIntent,<span class=\"string\">\"Share a picture\"</span>);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<h5 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a>注意：</h5><ul>\n<li>可以使用<code>*/*</code>指定MIME类型，但是仅有能够处理一般数据类型的Activity才能匹配到。因为普通的Activity不能详尽所有MIME类型。</li>\n<li>响应的Activity需要有访问URI的权限。两种方案，一是ContentProvider（per-URI permissions）；二是MediaStore（亦可存储非媒体文件，Android3.0以后。）</li>\n</ul>\n<ol>\n<li><p>多块内容，Multiple。同时分享不同的内容，可使用<code>ACTION_SEND_MULTIPLE</code>及数据URIs。而MIME需根据内容类型调整，可使用*符号。如<code>image/jpeg</code>、<code>image/*</code>、<code>*/*</code>。如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   ArrayList&lt;Uri&gt; imageUris = <span class=\"keyword\">new</span> ArrayList&lt;Uri&gt;();</div><div class=\"line\">&gt;   imageUris.add(imageUri1); <span class=\"comment\">// Add your image URIs here</span></div><div class=\"line\">&gt;   imageUris.add(imageUri2);</div><div class=\"line\">&gt;   <span class=\"comment\">//接收Activity需要有权限哦</span></div><div class=\"line\">&gt;   Intent shareIntent = <span class=\"keyword\">new</span> Intent();</div><div class=\"line\">&gt;   shareIntent.setAction(Intent.ACTION_SEND_MULTIPLE);<span class=\"comment\">//复合类型的MIME，Action</span></div><div class=\"line\">&gt;   shareIntent.putParcelableArrayListExtra(Intent.EXTRA_STREAM, imageUris);<span class=\"comment\">//传递数组</span></div><div class=\"line\">&gt;   shareIntent.setType(<span class=\"string\">\"image/*\"</span>);<span class=\"comment\">//复合MIME</span></div><div class=\"line\">&gt;   startActivity(Intent.createChooser(shareIntent, <span class=\"string\">\"Share images to..\"</span>));</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n</li>\n<li><h4 id=\"接收外App传的数据\"><a href=\"#接收外App传的数据\" class=\"headerlink\" title=\"接收外App传的数据\"></a>接收外App传的数据</h4><blockquote>\n<ul>\n<li><p>Activity 在manifest文件 配置，通过Intent Filters来过滤需要处理的数据Action，如下Activity接收单张图片、文本、多张图片时，不同的intent-filer配置：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"tag\">&lt;<span class=\"name\">activity</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\".ui.MyActivity\"</span> &gt;</span></div><div class=\"line\">&gt;     <span class=\"comment\">&lt;!-- 注释，单类型图片的Action过滤，其Action名称不同--&gt;</span></div><div class=\"line\">&gt;       <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">&gt;           <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.SEND\"</span> /&gt;</span></div><div class=\"line\">&gt;           <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.DEFAULT\"</span> /&gt;</span></div><div class=\"line\">&gt;           <span class=\"tag\">&lt;<span class=\"name\">data</span> <span class=\"attr\">android:mimeType</span>=<span class=\"string\">\"image/*\"</span> /&gt;</span></div><div class=\"line\">&gt;       <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">&gt;     <span class=\"comment\">&lt;!-- 注释，文本类型的Action过滤--&gt;</span></div><div class=\"line\">&gt;       <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">&gt;           <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.SEND\"</span> /&gt;</span></div><div class=\"line\">&gt;           <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.DEFAULT\"</span> /&gt;</span></div><div class=\"line\">&gt;           <span class=\"tag\">&lt;<span class=\"name\">data</span> <span class=\"attr\">android:mimeType</span>=<span class=\"string\">\"text/plain\"</span> /&gt;</span></div><div class=\"line\">&gt;       <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">&gt;     <span class=\"comment\">&lt;!-- 注释，多种类型图片的Action过滤--&gt;</span></div><div class=\"line\">&gt;       <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">&gt;           <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.SEND_MULTIPLE\"</span> /&gt;</span></div><div class=\"line\">&gt;           <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.DEFAULT\"</span> /&gt;</span></div><div class=\"line\">&gt;           <span class=\"tag\">&lt;<span class=\"name\">data</span> <span class=\"attr\">android:mimeType</span>=<span class=\"string\">\"image/*\"</span> /&gt;</span></div><div class=\"line\">&gt;       <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">&gt;   <span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li>处理接收数据，通过getIntent()来获取extra数据，需要知道传递来的具体类型，结构，做相应处理。有时需要访问权限。若是数据量太大，应考虑避免UI线程的阻塞。</li>\n</ul>\n</blockquote>\n</li>\n<li><h4 id=\"ActionBar-分享功能\"><a href=\"#ActionBar-分享功能\" class=\"headerlink\" title=\"ActionBar 分享功能\"></a>ActionBar 分享功能</h4><blockquote>\n<p>Android4.0引入ActionProvider，其子类ShareActionProvider用于分享数据。ActionBar步骤：</p>\n<ol>\n<li><p>在Menu的xml中定义<code>android:actionProviderClass</code>属性。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    <span class=\"tag\">&lt;<span class=\"name\">menu</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></div><div class=\"line\">&gt;        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/menu_item_share\"</span></span></div><div class=\"line\">&gt;            android:showAsAction=\"ifRoom\"</div><div class=\"line\">&gt;            android:title=\"Share\"</div><div class=\"line\">&gt;            android:actionProviderClass=\"android.widget.ShareActionProvider\" /&gt;</div><div class=\"line\">&gt;      <span class=\"comment\">&lt;!--如上则声明该item需要share action provider来匹配内容 --&gt;</span></div><div class=\"line\">&gt;        ...</div><div class=\"line\">&gt;    <span class=\"tag\">&lt;/<span class=\"name\">menu</span>&gt;</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p>需要提供intent给ShareActionProvider，示例如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    <span class=\"keyword\">private</span> ShareActionProvider mShareActionProvider;</div><div class=\"line\">&gt;    ...</div><div class=\"line\">&gt;    <span class=\"meta\">@Override</span></div><div class=\"line\">&gt;    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onCreateOptionsMenu</span><span class=\"params\">(Menu menu)</span> </span>&#123;</div><div class=\"line\">&gt;        <span class=\"comment\">//菜单布局文件</span></div><div class=\"line\">&gt;        getMenuInflater().inflate(R.menu.share_menu, menu);</div><div class=\"line\">&gt;        <span class=\"comment\">//加载配有ShareActionProvider属性的item</span></div><div class=\"line\">&gt;        MenuItem item = menu.findItem(R.id.menu_item_share);</div><div class=\"line\">&gt;        <span class=\"comment\">// 实例化ShareActionProvider</span></div><div class=\"line\">&gt;        mShareActionProvider = (ShareActionProvider) item.getActionProvider();</div><div class=\"line\">&gt;        <span class=\"comment\">// 返回true表示显示菜单项</span></div><div class=\"line\">&gt;        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">&gt;    &#125;</div><div class=\"line\">&gt;    <span class=\"comment\">//回调更新intent，用于分享</span></div><div class=\"line\">&gt;    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setShareIntent</span><span class=\"params\">(Intent shareIntent)</span> </span>&#123;</div><div class=\"line\">&gt;        <span class=\"keyword\">if</span> (mShareActionProvider != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">&gt;            mShareActionProvider.setShareIntent(shareIntent);</div><div class=\"line\">&gt;        &#125;</div><div class=\"line\">&gt;    &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"2-分享文件\"><a href=\"#2-分享文件\" class=\"headerlink\" title=\"2. 分享文件\"></a>2. 分享文件</h3><p>​    分享文件最为安全的方式是使用content URI，Android中FileProvider有getUriForFile()创建文件content URI。少量数据可以用intent传递。</p>\n<ul>\n<li><h4 id=\"建立文件分享\"><a href=\"#建立文件分享\" class=\"headerlink\" title=\"建立文件分享\"></a>建立文件分享</h4><blockquote>\n<p>要安全地提供文件分享，需要配置Content URI。</p>\n<ol>\n<li>指定FileProvider，在manifest中定义一个provider的entry，声明Authority等。如下示例：</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">&gt;     package=\"com.example.myapp\"&gt;</div><div class=\"line\">&gt;     <span class=\"tag\">&lt;<span class=\"name\">application</span></span></div><div class=\"line\">&gt;         ...&gt;</div><div class=\"line\">&gt;       <span class=\"comment\">&lt;!-- authorities、meta-data的配置 --&gt;</span></div><div class=\"line\">&gt;         <span class=\"tag\">&lt;<span class=\"name\">provider</span></span></div><div class=\"line\">&gt;             android:name=\"android.support.v4.content.FileProvider\"</div><div class=\"line\">&gt;             android:authorities=\"com.example.myapp.fileprovider\"</div><div class=\"line\">&gt;             android:grantUriPermissions=\"true\"</div><div class=\"line\">&gt;             android:exported=\"false\"&gt;</div><div class=\"line\">&gt;             <span class=\"tag\">&lt;<span class=\"name\">meta-data</span></span></div><div class=\"line\">&gt;                 android:name=\"android.support.FILE_PROVIDER_PATHS\"</div><div class=\"line\">&gt;                 android:resource=\"@xml/filepaths\" /&gt;</div><div class=\"line\">&gt;           <span class=\"comment\">&lt;!-- meta-data指定文件共享目录，在res/xml下 --&gt;</span></div><div class=\"line\">&gt;         <span class=\"tag\">&lt;/<span class=\"name\">provider</span>&gt;</span></div><div class=\"line\">&gt;         ...</div><div class=\"line\">&gt;     <span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></div><div class=\"line\">&gt; <span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p>共享文件的目录，res/xml中配置，filepaths.xml，如下示例：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    <span class=\"tag\">&lt;<span class=\"name\">paths</span>&gt;</span></div><div class=\"line\">&gt;      <span class=\"comment\">&lt;!-- 每一个共享目录都是一个item，这里表示共享了files/ 目录下的子目录，files-path这个标签适用于共享应用内部储存，files/下的目录。name=“myimages” 做为content uri中的路径标记--&gt;</span></div><div class=\"line\">&gt;    \t<span class=\"tag\">&lt;<span class=\"name\">files-path</span> <span class=\"attr\">path</span>=<span class=\"string\">\"images/\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myimages\"</span>/&gt;</span></div><div class=\"line\">&gt;    <span class=\"tag\">&lt;/<span class=\"name\">paths</span>&gt;</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>   <code>&lt;paths&gt;</code>有多个子标签，各自代表不同共享目录，<code>&lt;files-path&gt;</code>表示内部files/下目录，<code>&lt;external-path&gt;</code>外部存储目录，<code>&lt;cache-path&gt;</code>缓存目录。参考<a href=\"\">FileProvider</a>。注意<em>xml里写的目录，无法在代码中追加和修改</em></p>\n<ul>\n<li>Content URI包含<code>&lt;provider&gt;</code>指定Authority（“com.example.myapp.fileprovider”）;</li>\n<li>路径“myimages/”；</li>\n<li><p>文件名称。</p>\n<p>例如获取上述files/images/下的aa.jpg文件，File Provider提供的URI：</p>\n<p><code>content://com.example.myapp.fileprovider/myimages/aa.jpg</code></p>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><h4 id=\"分享文件\"><a href=\"#分享文件\" class=\"headerlink\" title=\"分享文件\"></a>分享文件</h4><blockquote>\n<ul>\n<li>上面创建了共享提供者，此处需要共享请求者。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;  File requestFile = <span class=\"keyword\">new</span> File(mImageFilename[position]);</div><div class=\"line\">&gt;                 <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">&gt;                     fileUri = FileProvider.getUriForFile(</div><div class=\"line\">&gt;                             MainActivity.<span class=\"keyword\">this</span>,</div><div class=\"line\">&gt;                             <span class=\"string\">\"com.example.myapp.fileprovider\"</span>,</div><div class=\"line\">&gt;                             requestFile);</div><div class=\"line\">&gt;                 &#125; <span class=\"keyword\">catch</span> (IllegalArgumentException e) &#123;</div><div class=\"line\">&gt;                     Log.e(<span class=\"string\">\"File Selector\"</span>,</div><div class=\"line\">&gt;                           <span class=\"string\">\"The selected file can't be shared: \"</span> +</div><div class=\"line\">&gt;                           clickedFilename);</div><div class=\"line\">&gt;                 &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><em>需要注意的是，能获取content uri的文件，都是在manifest文件中，provider下meta-data配置了<code>&lt;paths&gt;</code>标签内的文件，否则会抛IllegalArgumentException</em></p>\n<ul>\n<li><p>设置文件授权：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"keyword\">if</span>(fileUri != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">&gt;     <span class=\"comment\">//Grant temporary read permission to the content URI，授权具有临时性，一次性。</span></div><div class=\"line\">&gt;     mResultIntent.addFlags(Intent.FLAG_GRANT_URI_PERMISSION);</div><div class=\"line\">&gt;   &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>  <strong>Caution:</strong>调用setFlags()授权文件是唯一的安全方法，应避免Context.grantUriPermission(),它需要Context.revokeUriPermission()才能撤销授权。</p>\n</blockquote>\n</li>\n<li><h4 id=\"请求分享文件\"><a href=\"#请求分享文件\" class=\"headerlink\" title=\"请求分享文件\"></a>请求分享文件</h4><blockquote>\n<p>一般文件共享分为共享者与请求者，或者服务器与客户端。服务器需要配置共享清单，客户端需要请求共享，并指定请求类型。</p>\n<ul>\n<li><p>发送文件请求，客户端startActivityForResult()，通过intent的Action，附带data，MIME去请求服务器的共享数据。服务器来显示对应的共享清单。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;      mRequestFileIntent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_PICK);<span class=\"comment\">//Action</span></div><div class=\"line\">&gt;      mRequestFileIntent.setType(<span class=\"string\">\"image/jpg\"</span>);<span class=\"comment\">//MIME类型</span></div><div class=\"line\">&gt;      ...</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>在onActivityResult()中处理服务器返回的URI，注：<em>刚开始只是处理URI，而无任何实际的文件操作和访问，不会影响服务器文件安全</em>。</p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;                   <span class=\"meta\">@Override</span></div><div class=\"line\">&gt;            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityResult</span><span class=\"params\">(<span class=\"keyword\">int</span> requestCode, <span class=\"keyword\">int</span> resultCode,</span></span></div><div class=\"line\">&gt;                           Intent returnIntent) &#123;</div><div class=\"line\">&gt;                       <span class=\"comment\">// If the selection didn't work</span></div><div class=\"line\">&gt;                       <span class=\"keyword\">if</span> (resultCode != RESULT_OK) &#123;</div><div class=\"line\">&gt;                           <span class=\"comment\">// Exit without doing anything else</span></div><div class=\"line\">&gt;                           <span class=\"keyword\">return</span>;</div><div class=\"line\">&gt;                       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">&gt;                           <span class=\"comment\">// Get the file's content URI from the incoming Intent</span></div><div class=\"line\">&gt;                           Uri returnUri = returnIntent.getData();</div><div class=\"line\">&gt;                           <span class=\"comment\">/*</span></div><div class=\"line\">&gt;      * Try to open the file for \"read\" access using the</div><div class=\"line\">&gt;      * returned URI. If the file isn't found, write to the</div><div class=\"line\">&gt;      * error log and return.</div><div class=\"line\">&gt;      */</div><div class=\"line\">&gt;      <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">&gt;               <span class=\"comment\">/*</span></div><div class=\"line\">&gt;                * Get the content resolver instance for this context, and use it</div><div class=\"line\">&gt;                * to get a ParcelFileDescriptor for the file.</div><div class=\"line\">&gt;                */</div><div class=\"line\">&gt;               mInputPFD = getContentResolver().openFileDescriptor(returnUri, <span class=\"string\">\"r\"</span>);</div><div class=\"line\">&gt;           &#125; <span class=\"keyword\">catch</span> (FileNotFoundException e) &#123;</div><div class=\"line\">&gt;               e.printStackTrace();</div><div class=\"line\">&gt;               Log.e(<span class=\"string\">\"MainActivity\"</span>, <span class=\"string\">\"File not found.\"</span>);</div><div class=\"line\">&gt;               <span class=\"keyword\">return</span>;</div><div class=\"line\">&gt;           &#125;</div><div class=\"line\">&gt;           <span class=\"comment\">// Get a regular file descriptor for the file,客户端利用FileDescriptor对象类操作文件。</span></div><div class=\"line\">&gt;           FileDescriptor fd = mInputPFD.getFileDescriptor();</div><div class=\"line\">&gt;           ...</div><div class=\"line\">&gt;      &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><h4 id=\"获取文件信息\"><a href=\"#获取文件信息\" class=\"headerlink\" title=\"获取文件信息\"></a>获取文件信息</h4><blockquote>\n<p>上一步获取了服务器提供的content uri和file descriptor对象，但并不能操作文件，还需要指导文件信息，如大小、类型。</p>\n<ul>\n<li><p>获取文件MIME，通过ContentResolver.getType()获取uri对应的文件类型。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;      Uri returnUri = returnIntent.getData();</div><div class=\"line\">&gt;      String mimeType = getContentResolver().getType(returnUri);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>获取文件大小，<a href=\"\">FileProvider</a>的query()方法返回Cuisor对象，包含对应uri的文件名称大小信息。<a href=\"\">DISPLAY_NAME</a>，<a href=\"\">SIZE</a>。</p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;             Uri returnUri = returnIntent.getData();</div><div class=\"line\">&gt;                Cursor returnCursor =</div><div class=\"line\">&gt;                        getContentResolver().query(returnUri, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">&gt;                <span class=\"comment\">/*</span></div><div class=\"line\">&gt;      * Get the column indexes of the data in the Cursor,</div><div class=\"line\">&gt;      * move to the first row in the Cursor, get the data,</div><div class=\"line\">&gt;      * and display it.</div><div class=\"line\">&gt;      */</div><div class=\"line\">&gt;        <span class=\"keyword\">int</span> nameIndex = returnCursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);</div><div class=\"line\">&gt;        <span class=\"keyword\">int</span> sizeIndex = returnCursor.getColumnIndex(OpenableColumns.SIZE);</div><div class=\"line\">&gt;        returnCursor.moveToFirst();</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"3-NFC分享文件\"><a href=\"#3-NFC分享文件\" class=\"headerlink\" title=\"3. NFC分享文件\"></a>3. NFC分享文件</h3><p>Android Beam文件传输可在设备间传输大文件，API调用方便。</p>\n<ul>\n<li><h4 id=\"发送文件\"><a href=\"#发送文件\" class=\"headerlink\" title=\"发送文件\"></a>发送文件</h4><blockquote>\n<p>使用NFC发送文件，需要设备支持NFC且app生命NFC和外部存储权限。使用URI给Android Beam来传出文件。需要满足以下要求：</p>\n<ol>\n<li><p><code>Android版本api&gt;=16。</code></p>\n</li>\n<li><p><code>传送的文件必须在外部存储上。</code></p>\n</li>\n<li><p>文件必须全局可读，可以用File.setReadable(true,false)来设置。</p>\n</li>\n<li><p>必须提供文件的File URI。Android Beam无法处理FileProvider.getUriForFile生成的URI。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.NFC\"</span> /&gt;</span></div><div class=\"line\">&gt;    <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.READ_EXTERNAL_STORANGE\"</span> /&gt;</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>   <em>其中外部存储权限在4.2.2之前不是必须声明的。</em></p>\n   <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    <span class=\"tag\">&lt;<span class=\"name\">uses-feature</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.hardware.nfc\"</span></span></div><div class=\"line\">&gt;                  android:required=\"true\" /&gt;</div><div class=\"line\">&gt;    <span class=\"comment\">&lt;!-- 如此设置，声明该应用必须要硬件nfc支持才可以运行。若是required为false，则需要检测设备是否支持Android Beam--&gt;</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>测试Android Beam，PackageManager.hasSystemFeature()和参数FEATURE_NFC来测是nfc。Build.VERSION.SDK_INT系统版本号。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"keyword\">boolean</span> hasNFC= PackageManager.hasSystemFeature(PackageManager.FEATURE_NFC);<span class=\"comment\">//判断NFC可用与否。</span></div><div class=\"line\">&gt;   Build.VERSION.SDK_INT&lt;Build.VERSION_CODE.JELLY_BEAN_MR1<span class=\"comment\">//版本低。</span></div><div class=\"line\">&gt;     <span class=\"comment\">//可用的话，实例化NfcAdapter</span></div><div class=\"line\">&gt;     NfcAdapter adapter = NfcAdatper.getDefaultAdapter(<span class=\"keyword\">this</span>);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>通过回调函数获取数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"keyword\">private</span> Uri[] mFileUris = <span class=\"keyword\">new</span> Uri[<span class=\"number\">10</span>];<span class=\"comment\">//提供给AndroidBeam的URIs</span></div><div class=\"line\">&gt;   <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileUriCallback</span> <span class=\"keyword\">implements</span> <span class=\"title\">NfcAdapter</span>.<span class=\"title\">CreateBeamUrisCallback</span></span>&#123;</div><div class=\"line\">&gt;     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FileUriCallback</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt;     <span class=\"meta\">@override</span></div><div class=\"line\">&gt;     <span class=\"keyword\">public</span> Uri[] createBeamUris(NfcEvent event)&#123;</div><div class=\"line\">&gt;       <span class=\"keyword\">return</span> mFileUris;</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt;   &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>  通过setBeamPushUrisCallback()将回调提供给Android Beam文件传输。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   mFileUriCallback = <span class=\"keyword\">new</span> FileUriCallback();</div><div class=\"line\">&gt;   mNfcAdapter.setBeamPushUrisCallback(mFileUriCallback,<span class=\"keyword\">this</span>);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li>指定要发送的文件，给文件File URI，然后加入URIs数组。记住需要有文件的读取权限。</li>\n</ul>\n</blockquote>\n</li>\n<li><h4 id=\"接收文件\"><a href=\"#接收文件\" class=\"headerlink\" title=\"接收文件\"></a>接收文件</h4><blockquote>\n<p>Android Beam文件传输时，是将文件copy到某特殊目录，然后由Media Scanner扫描文件，在MediaStore Provider中为媒体文件添加条目记录。</p>\n<ul>\n<li><p>响应传输来的请求，并显示数据。</p>\n<blockquote>\n<p>Android Beam传输数据到接收设备后，会发送Intent通知，包含ACTION_VIEW,MIME,URI。用户确认通知后，intent被发至系统，寻求其他响应。</p>\n<p>Activity在manifest配置<code>&lt;intent-filter&gt;</code>加入<code>&lt;action android:name=&quot;android.intent.action.VIEW&quot;/&gt;</code>、<code>&lt;category android:name=&quot;android.intent.category.CATEGORY_DEFAULT&quot;</code>、<code>&lt;data android:nimeType=&quot;mime-type&quot;</code>分别标识不同的Action，category和数据type。</p>\n</blockquote>\n<p><strong>Action_view的action也不一定就是Android beam发送的。*</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"tag\">&lt;<span class=\"name\">activity</span> </span></div><div class=\"line\">&gt;     android:name=\"com.example.android.nfctransfer.ViewActivity\"</div><div class=\"line\">&gt;       android:label=\"Android Beam Viewer\"&gt;</div><div class=\"line\">&gt;         <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">&gt;           <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.VIEW\"</span>/&gt;</span></div><div class=\"line\">&gt;           <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.DEFAULT\"</span>/&gt;</span></div><div class=\"line\">&gt;           ...</div><div class=\"line\">&gt;           <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">&gt;     <span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>读取文件需要权限</p>\n<p><code>&lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot;/&gt;</code></p>\n<p>上面所说，ACTION_VIEW不一定就是AndroidBeam发送的intent，所以需要检查Scheme和Authority。调用Uri.getScheme。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   mIntent = getIntent();</div><div class=\"line\">&gt;   <span class=\"comment\">//判断Action，机器Scheme和Authority</span></div><div class=\"line\">&gt;   Uri beamUri = mIntent.getData();</div><div class=\"line\">&gt;   beamUri.getScheme();<span class=\"comment\">//判断是否是“file”，或者“content”</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>File URI中获取目录</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">handleFileUri</span><span class=\"params\">(Uri beamUri)</span> </span>&#123;</div><div class=\"line\">&gt;           <span class=\"comment\">// Get the path part of the URI</span></div><div class=\"line\">&gt;           String fileName = beamUri.getPath();</div><div class=\"line\">&gt;           <span class=\"comment\">// Create a File object for this filename</span></div><div class=\"line\">&gt;           File copiedFile = <span class=\"keyword\">new</span> File(fileName);</div><div class=\"line\">&gt;           <span class=\"comment\">// Get a string containing the file's parent directory</span></div><div class=\"line\">&gt;           <span class=\"keyword\">return</span> copiedFile.getParent();</div><div class=\"line\">&gt;       &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>Content URI中获取目录，MediaS tore会含有文件的uri信息。Uri.getAuthority()获取authority，返回值MediaStore.AUTHORITY或者其他。</p>\n<p>为其他类型时候，不一定可以获取目录；</p>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"第二章、Android分享操作\"><a href=\"#第二章、Android分享操作\" class=\"headerlink\" title=\"第二章、Android分享操作\"></a>第二章、Android分享操作</h2><h3 id=\"1-分享简单数据\"><a href=\"#1-分享简单数据\" class=\"headerlink\" title=\"1. 分享简单数据\"></a>1. 分享简单数据</h3><ul>\n<li><h4 id=\"向其他app发送检单数据\"><a href=\"#向其他app发送检单数据\" class=\"headerlink\" title=\"向其他app发送检单数据\"></a>向其他app发送检单数据</h4><blockquote>\n<ol>\n<li>Intent发送数据必须有actions，其他对应action的activity响应事件。通过Intent实现分享功能，而ActionBar可使用<code>ShareActionProvider</code>来快速实现分享功能。如下是使用Intent.createChooser实现分享功能的demo：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;Intent sendIntent = <span class=\"keyword\">new</span> Intent();</div><div class=\"line\">&gt;sendIntent.setAction(Intent.ACTION_SEND);</div><div class=\"line\">&gt;sendIntent.putExtra(Intent.EXTRA_TEXT,<span class=\"string\">\"This is My Text to send.\"</span>);</div><div class=\"line\">&gt;sendIntent.setType(<span class=\"string\">\"text/plain\"</span>);</div><div class=\"line\">&gt;startActivity(Intent.createChooser(sendIntent,<span class=\"string\">\"Share to My friends\"</span>);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><em>如上，可以显示出多个选择框，列出可响应的分享社交App</em></p>\n<ol>\n<li><p>分享二进制文件，需要指定特定的MIME类型，在EXTRA_STREAM里面放置数据的URI，如下分享一个图片的代码示例:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   Intent shareIntent = <span class=\"keyword\">new</span> Intent();</div><div class=\"line\">&gt;   shareIntent.setAction(Intent.ACTION_SEND);</div><div class=\"line\">&gt;   shareIntent.putExtra(Intent.EXTRA_STREAM, uriToImage);<span class=\"comment\">//重要，指定URI</span></div><div class=\"line\">&gt;   shareIntent.setType(<span class=\"string\">\"image/jpeg\"</span>);<span class=\"comment\">//指定MIME类型</span></div><div class=\"line\">&gt;   startActivity(Intent.createChooser(shareIntent,<span class=\"string\">\"Share a picture\"</span>);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<h5 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a>注意：</h5><ul>\n<li>可以使用<code>*/*</code>指定MIME类型，但是仅有能够处理一般数据类型的Activity才能匹配到。因为普通的Activity不能详尽所有MIME类型。</li>\n<li>响应的Activity需要有访问URI的权限。两种方案，一是ContentProvider（per-URI permissions）；二是MediaStore（亦可存储非媒体文件，Android3.0以后。）</li>\n</ul>\n<ol>\n<li><p>多块内容，Multiple。同时分享不同的内容，可使用<code>ACTION_SEND_MULTIPLE</code>及数据URIs。而MIME需根据内容类型调整，可使用*符号。如<code>image/jpeg</code>、<code>image/*</code>、<code>*/*</code>。如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   ArrayList&lt;Uri&gt; imageUris = <span class=\"keyword\">new</span> ArrayList&lt;Uri&gt;();</div><div class=\"line\">&gt;   imageUris.add(imageUri1); <span class=\"comment\">// Add your image URIs here</span></div><div class=\"line\">&gt;   imageUris.add(imageUri2);</div><div class=\"line\">&gt;   <span class=\"comment\">//接收Activity需要有权限哦</span></div><div class=\"line\">&gt;   Intent shareIntent = <span class=\"keyword\">new</span> Intent();</div><div class=\"line\">&gt;   shareIntent.setAction(Intent.ACTION_SEND_MULTIPLE);<span class=\"comment\">//复合类型的MIME，Action</span></div><div class=\"line\">&gt;   shareIntent.putParcelableArrayListExtra(Intent.EXTRA_STREAM, imageUris);<span class=\"comment\">//传递数组</span></div><div class=\"line\">&gt;   shareIntent.setType(<span class=\"string\">\"image/*\"</span>);<span class=\"comment\">//复合MIME</span></div><div class=\"line\">&gt;   startActivity(Intent.createChooser(shareIntent, <span class=\"string\">\"Share images to..\"</span>));</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n</li>\n<li><h4 id=\"接收外App传的数据\"><a href=\"#接收外App传的数据\" class=\"headerlink\" title=\"接收外App传的数据\"></a>接收外App传的数据</h4><blockquote>\n<ul>\n<li><p>Activity 在manifest文件 配置，通过Intent Filters来过滤需要处理的数据Action，如下Activity接收单张图片、文本、多张图片时，不同的intent-filer配置：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"tag\">&lt;<span class=\"name\">activity</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\".ui.MyActivity\"</span> &gt;</span></div><div class=\"line\">&gt;     <span class=\"comment\">&lt;!-- 注释，单类型图片的Action过滤，其Action名称不同--&gt;</span></div><div class=\"line\">&gt;       <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">&gt;           <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.SEND\"</span> /&gt;</span></div><div class=\"line\">&gt;           <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.DEFAULT\"</span> /&gt;</span></div><div class=\"line\">&gt;           <span class=\"tag\">&lt;<span class=\"name\">data</span> <span class=\"attr\">android:mimeType</span>=<span class=\"string\">\"image/*\"</span> /&gt;</span></div><div class=\"line\">&gt;       <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">&gt;     <span class=\"comment\">&lt;!-- 注释，文本类型的Action过滤--&gt;</span></div><div class=\"line\">&gt;       <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">&gt;           <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.SEND\"</span> /&gt;</span></div><div class=\"line\">&gt;           <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.DEFAULT\"</span> /&gt;</span></div><div class=\"line\">&gt;           <span class=\"tag\">&lt;<span class=\"name\">data</span> <span class=\"attr\">android:mimeType</span>=<span class=\"string\">\"text/plain\"</span> /&gt;</span></div><div class=\"line\">&gt;       <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">&gt;     <span class=\"comment\">&lt;!-- 注释，多种类型图片的Action过滤--&gt;</span></div><div class=\"line\">&gt;       <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">&gt;           <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.SEND_MULTIPLE\"</span> /&gt;</span></div><div class=\"line\">&gt;           <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.DEFAULT\"</span> /&gt;</span></div><div class=\"line\">&gt;           <span class=\"tag\">&lt;<span class=\"name\">data</span> <span class=\"attr\">android:mimeType</span>=<span class=\"string\">\"image/*\"</span> /&gt;</span></div><div class=\"line\">&gt;       <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">&gt;   <span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li>处理接收数据，通过getIntent()来获取extra数据，需要知道传递来的具体类型，结构，做相应处理。有时需要访问权限。若是数据量太大，应考虑避免UI线程的阻塞。</li>\n</ul>\n</blockquote>\n</li>\n<li><h4 id=\"ActionBar-分享功能\"><a href=\"#ActionBar-分享功能\" class=\"headerlink\" title=\"ActionBar 分享功能\"></a>ActionBar 分享功能</h4><blockquote>\n<p>Android4.0引入ActionProvider，其子类ShareActionProvider用于分享数据。ActionBar步骤：</p>\n<ol>\n<li><p>在Menu的xml中定义<code>android:actionProviderClass</code>属性。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    <span class=\"tag\">&lt;<span class=\"name\">menu</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></div><div class=\"line\">&gt;        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/menu_item_share\"</span></span></div><div class=\"line\">&gt;            android:showAsAction=\"ifRoom\"</div><div class=\"line\">&gt;            android:title=\"Share\"</div><div class=\"line\">&gt;            android:actionProviderClass=\"android.widget.ShareActionProvider\" /&gt;</div><div class=\"line\">&gt;      <span class=\"comment\">&lt;!--如上则声明该item需要share action provider来匹配内容 --&gt;</span></div><div class=\"line\">&gt;        ...</div><div class=\"line\">&gt;    <span class=\"tag\">&lt;/<span class=\"name\">menu</span>&gt;</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p>需要提供intent给ShareActionProvider，示例如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    <span class=\"keyword\">private</span> ShareActionProvider mShareActionProvider;</div><div class=\"line\">&gt;    ...</div><div class=\"line\">&gt;    <span class=\"meta\">@Override</span></div><div class=\"line\">&gt;    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onCreateOptionsMenu</span><span class=\"params\">(Menu menu)</span> </span>&#123;</div><div class=\"line\">&gt;        <span class=\"comment\">//菜单布局文件</span></div><div class=\"line\">&gt;        getMenuInflater().inflate(R.menu.share_menu, menu);</div><div class=\"line\">&gt;        <span class=\"comment\">//加载配有ShareActionProvider属性的item</span></div><div class=\"line\">&gt;        MenuItem item = menu.findItem(R.id.menu_item_share);</div><div class=\"line\">&gt;        <span class=\"comment\">// 实例化ShareActionProvider</span></div><div class=\"line\">&gt;        mShareActionProvider = (ShareActionProvider) item.getActionProvider();</div><div class=\"line\">&gt;        <span class=\"comment\">// 返回true表示显示菜单项</span></div><div class=\"line\">&gt;        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">&gt;    &#125;</div><div class=\"line\">&gt;    <span class=\"comment\">//回调更新intent，用于分享</span></div><div class=\"line\">&gt;    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setShareIntent</span><span class=\"params\">(Intent shareIntent)</span> </span>&#123;</div><div class=\"line\">&gt;        <span class=\"keyword\">if</span> (mShareActionProvider != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">&gt;            mShareActionProvider.setShareIntent(shareIntent);</div><div class=\"line\">&gt;        &#125;</div><div class=\"line\">&gt;    &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"2-分享文件\"><a href=\"#2-分享文件\" class=\"headerlink\" title=\"2. 分享文件\"></a>2. 分享文件</h3><p>​    分享文件最为安全的方式是使用content URI，Android中FileProvider有getUriForFile()创建文件content URI。少量数据可以用intent传递。</p>\n<ul>\n<li><h4 id=\"建立文件分享\"><a href=\"#建立文件分享\" class=\"headerlink\" title=\"建立文件分享\"></a>建立文件分享</h4><blockquote>\n<p>要安全地提供文件分享，需要配置Content URI。</p>\n<ol>\n<li>指定FileProvider，在manifest中定义一个provider的entry，声明Authority等。如下示例：</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">&gt;     package=\"com.example.myapp\"&gt;</div><div class=\"line\">&gt;     <span class=\"tag\">&lt;<span class=\"name\">application</span></span></div><div class=\"line\">&gt;         ...&gt;</div><div class=\"line\">&gt;       <span class=\"comment\">&lt;!-- authorities、meta-data的配置 --&gt;</span></div><div class=\"line\">&gt;         <span class=\"tag\">&lt;<span class=\"name\">provider</span></span></div><div class=\"line\">&gt;             android:name=\"android.support.v4.content.FileProvider\"</div><div class=\"line\">&gt;             android:authorities=\"com.example.myapp.fileprovider\"</div><div class=\"line\">&gt;             android:grantUriPermissions=\"true\"</div><div class=\"line\">&gt;             android:exported=\"false\"&gt;</div><div class=\"line\">&gt;             <span class=\"tag\">&lt;<span class=\"name\">meta-data</span></span></div><div class=\"line\">&gt;                 android:name=\"android.support.FILE_PROVIDER_PATHS\"</div><div class=\"line\">&gt;                 android:resource=\"@xml/filepaths\" /&gt;</div><div class=\"line\">&gt;           <span class=\"comment\">&lt;!-- meta-data指定文件共享目录，在res/xml下 --&gt;</span></div><div class=\"line\">&gt;         <span class=\"tag\">&lt;/<span class=\"name\">provider</span>&gt;</span></div><div class=\"line\">&gt;         ...</div><div class=\"line\">&gt;     <span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></div><div class=\"line\">&gt; <span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p>共享文件的目录，res/xml中配置，filepaths.xml，如下示例：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    <span class=\"tag\">&lt;<span class=\"name\">paths</span>&gt;</span></div><div class=\"line\">&gt;      <span class=\"comment\">&lt;!-- 每一个共享目录都是一个item，这里表示共享了files/ 目录下的子目录，files-path这个标签适用于共享应用内部储存，files/下的目录。name=“myimages” 做为content uri中的路径标记--&gt;</span></div><div class=\"line\">&gt;    \t<span class=\"tag\">&lt;<span class=\"name\">files-path</span> <span class=\"attr\">path</span>=<span class=\"string\">\"images/\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myimages\"</span>/&gt;</span></div><div class=\"line\">&gt;    <span class=\"tag\">&lt;/<span class=\"name\">paths</span>&gt;</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>   <code>&lt;paths&gt;</code>有多个子标签，各自代表不同共享目录，<code>&lt;files-path&gt;</code>表示内部files/下目录，<code>&lt;external-path&gt;</code>外部存储目录，<code>&lt;cache-path&gt;</code>缓存目录。参考<a href=\"\">FileProvider</a>。注意<em>xml里写的目录，无法在代码中追加和修改</em></p>\n<ul>\n<li>Content URI包含<code>&lt;provider&gt;</code>指定Authority（“com.example.myapp.fileprovider”）;</li>\n<li>路径“myimages/”；</li>\n<li><p>文件名称。</p>\n<p>例如获取上述files/images/下的aa.jpg文件，File Provider提供的URI：</p>\n<p><code>content://com.example.myapp.fileprovider/myimages/aa.jpg</code></p>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><h4 id=\"分享文件\"><a href=\"#分享文件\" class=\"headerlink\" title=\"分享文件\"></a>分享文件</h4><blockquote>\n<ul>\n<li>上面创建了共享提供者，此处需要共享请求者。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;  File requestFile = <span class=\"keyword\">new</span> File(mImageFilename[position]);</div><div class=\"line\">&gt;                 <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">&gt;                     fileUri = FileProvider.getUriForFile(</div><div class=\"line\">&gt;                             MainActivity.<span class=\"keyword\">this</span>,</div><div class=\"line\">&gt;                             <span class=\"string\">\"com.example.myapp.fileprovider\"</span>,</div><div class=\"line\">&gt;                             requestFile);</div><div class=\"line\">&gt;                 &#125; <span class=\"keyword\">catch</span> (IllegalArgumentException e) &#123;</div><div class=\"line\">&gt;                     Log.e(<span class=\"string\">\"File Selector\"</span>,</div><div class=\"line\">&gt;                           <span class=\"string\">\"The selected file can't be shared: \"</span> +</div><div class=\"line\">&gt;                           clickedFilename);</div><div class=\"line\">&gt;                 &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><em>需要注意的是，能获取content uri的文件，都是在manifest文件中，provider下meta-data配置了<code>&lt;paths&gt;</code>标签内的文件，否则会抛IllegalArgumentException</em></p>\n<ul>\n<li><p>设置文件授权：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"keyword\">if</span>(fileUri != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">&gt;     <span class=\"comment\">//Grant temporary read permission to the content URI，授权具有临时性，一次性。</span></div><div class=\"line\">&gt;     mResultIntent.addFlags(Intent.FLAG_GRANT_URI_PERMISSION);</div><div class=\"line\">&gt;   &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>  <strong>Caution:</strong>调用setFlags()授权文件是唯一的安全方法，应避免Context.grantUriPermission(),它需要Context.revokeUriPermission()才能撤销授权。</p>\n</blockquote>\n</li>\n<li><h4 id=\"请求分享文件\"><a href=\"#请求分享文件\" class=\"headerlink\" title=\"请求分享文件\"></a>请求分享文件</h4><blockquote>\n<p>一般文件共享分为共享者与请求者，或者服务器与客户端。服务器需要配置共享清单，客户端需要请求共享，并指定请求类型。</p>\n<ul>\n<li><p>发送文件请求，客户端startActivityForResult()，通过intent的Action，附带data，MIME去请求服务器的共享数据。服务器来显示对应的共享清单。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;      mRequestFileIntent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_PICK);<span class=\"comment\">//Action</span></div><div class=\"line\">&gt;      mRequestFileIntent.setType(<span class=\"string\">\"image/jpg\"</span>);<span class=\"comment\">//MIME类型</span></div><div class=\"line\">&gt;      ...</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>在onActivityResult()中处理服务器返回的URI，注：<em>刚开始只是处理URI，而无任何实际的文件操作和访问，不会影响服务器文件安全</em>。</p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;                   <span class=\"meta\">@Override</span></div><div class=\"line\">&gt;            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityResult</span><span class=\"params\">(<span class=\"keyword\">int</span> requestCode, <span class=\"keyword\">int</span> resultCode,</span></span></div><div class=\"line\">&gt;                           Intent returnIntent) &#123;</div><div class=\"line\">&gt;                       <span class=\"comment\">// If the selection didn't work</span></div><div class=\"line\">&gt;                       <span class=\"keyword\">if</span> (resultCode != RESULT_OK) &#123;</div><div class=\"line\">&gt;                           <span class=\"comment\">// Exit without doing anything else</span></div><div class=\"line\">&gt;                           <span class=\"keyword\">return</span>;</div><div class=\"line\">&gt;                       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">&gt;                           <span class=\"comment\">// Get the file's content URI from the incoming Intent</span></div><div class=\"line\">&gt;                           Uri returnUri = returnIntent.getData();</div><div class=\"line\">&gt;                           <span class=\"comment\">/*</span></div><div class=\"line\">&gt;      * Try to open the file for \"read\" access using the</div><div class=\"line\">&gt;      * returned URI. If the file isn't found, write to the</div><div class=\"line\">&gt;      * error log and return.</div><div class=\"line\">&gt;      */</div><div class=\"line\">&gt;      <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">&gt;               <span class=\"comment\">/*</span></div><div class=\"line\">&gt;                * Get the content resolver instance for this context, and use it</div><div class=\"line\">&gt;                * to get a ParcelFileDescriptor for the file.</div><div class=\"line\">&gt;                */</div><div class=\"line\">&gt;               mInputPFD = getContentResolver().openFileDescriptor(returnUri, <span class=\"string\">\"r\"</span>);</div><div class=\"line\">&gt;           &#125; <span class=\"keyword\">catch</span> (FileNotFoundException e) &#123;</div><div class=\"line\">&gt;               e.printStackTrace();</div><div class=\"line\">&gt;               Log.e(<span class=\"string\">\"MainActivity\"</span>, <span class=\"string\">\"File not found.\"</span>);</div><div class=\"line\">&gt;               <span class=\"keyword\">return</span>;</div><div class=\"line\">&gt;           &#125;</div><div class=\"line\">&gt;           <span class=\"comment\">// Get a regular file descriptor for the file,客户端利用FileDescriptor对象类操作文件。</span></div><div class=\"line\">&gt;           FileDescriptor fd = mInputPFD.getFileDescriptor();</div><div class=\"line\">&gt;           ...</div><div class=\"line\">&gt;      &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><h4 id=\"获取文件信息\"><a href=\"#获取文件信息\" class=\"headerlink\" title=\"获取文件信息\"></a>获取文件信息</h4><blockquote>\n<p>上一步获取了服务器提供的content uri和file descriptor对象，但并不能操作文件，还需要指导文件信息，如大小、类型。</p>\n<ul>\n<li><p>获取文件MIME，通过ContentResolver.getType()获取uri对应的文件类型。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;      Uri returnUri = returnIntent.getData();</div><div class=\"line\">&gt;      String mimeType = getContentResolver().getType(returnUri);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>获取文件大小，<a href=\"\">FileProvider</a>的query()方法返回Cuisor对象，包含对应uri的文件名称大小信息。<a href=\"\">DISPLAY_NAME</a>，<a href=\"\">SIZE</a>。</p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;             Uri returnUri = returnIntent.getData();</div><div class=\"line\">&gt;                Cursor returnCursor =</div><div class=\"line\">&gt;                        getContentResolver().query(returnUri, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">&gt;                <span class=\"comment\">/*</span></div><div class=\"line\">&gt;      * Get the column indexes of the data in the Cursor,</div><div class=\"line\">&gt;      * move to the first row in the Cursor, get the data,</div><div class=\"line\">&gt;      * and display it.</div><div class=\"line\">&gt;      */</div><div class=\"line\">&gt;        <span class=\"keyword\">int</span> nameIndex = returnCursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);</div><div class=\"line\">&gt;        <span class=\"keyword\">int</span> sizeIndex = returnCursor.getColumnIndex(OpenableColumns.SIZE);</div><div class=\"line\">&gt;        returnCursor.moveToFirst();</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"3-NFC分享文件\"><a href=\"#3-NFC分享文件\" class=\"headerlink\" title=\"3. NFC分享文件\"></a>3. NFC分享文件</h3><p>Android Beam文件传输可在设备间传输大文件，API调用方便。</p>\n<ul>\n<li><h4 id=\"发送文件\"><a href=\"#发送文件\" class=\"headerlink\" title=\"发送文件\"></a>发送文件</h4><blockquote>\n<p>使用NFC发送文件，需要设备支持NFC且app生命NFC和外部存储权限。使用URI给Android Beam来传出文件。需要满足以下要求：</p>\n<ol>\n<li><p><code>Android版本api&gt;=16。</code></p>\n</li>\n<li><p><code>传送的文件必须在外部存储上。</code></p>\n</li>\n<li><p>文件必须全局可读，可以用File.setReadable(true,false)来设置。</p>\n</li>\n<li><p>必须提供文件的File URI。Android Beam无法处理FileProvider.getUriForFile生成的URI。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.NFC\"</span> /&gt;</span></div><div class=\"line\">&gt;    <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.READ_EXTERNAL_STORANGE\"</span> /&gt;</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>   <em>其中外部存储权限在4.2.2之前不是必须声明的。</em></p>\n   <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    <span class=\"tag\">&lt;<span class=\"name\">uses-feature</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.hardware.nfc\"</span></span></div><div class=\"line\">&gt;                  android:required=\"true\" /&gt;</div><div class=\"line\">&gt;    <span class=\"comment\">&lt;!-- 如此设置，声明该应用必须要硬件nfc支持才可以运行。若是required为false，则需要检测设备是否支持Android Beam--&gt;</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>测试Android Beam，PackageManager.hasSystemFeature()和参数FEATURE_NFC来测是nfc。Build.VERSION.SDK_INT系统版本号。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"keyword\">boolean</span> hasNFC= PackageManager.hasSystemFeature(PackageManager.FEATURE_NFC);<span class=\"comment\">//判断NFC可用与否。</span></div><div class=\"line\">&gt;   Build.VERSION.SDK_INT&lt;Build.VERSION_CODE.JELLY_BEAN_MR1<span class=\"comment\">//版本低。</span></div><div class=\"line\">&gt;     <span class=\"comment\">//可用的话，实例化NfcAdapter</span></div><div class=\"line\">&gt;     NfcAdapter adapter = NfcAdatper.getDefaultAdapter(<span class=\"keyword\">this</span>);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>通过回调函数获取数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"keyword\">private</span> Uri[] mFileUris = <span class=\"keyword\">new</span> Uri[<span class=\"number\">10</span>];<span class=\"comment\">//提供给AndroidBeam的URIs</span></div><div class=\"line\">&gt;   <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileUriCallback</span> <span class=\"keyword\">implements</span> <span class=\"title\">NfcAdapter</span>.<span class=\"title\">CreateBeamUrisCallback</span></span>&#123;</div><div class=\"line\">&gt;     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FileUriCallback</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt;     <span class=\"meta\">@override</span></div><div class=\"line\">&gt;     <span class=\"keyword\">public</span> Uri[] createBeamUris(NfcEvent event)&#123;</div><div class=\"line\">&gt;       <span class=\"keyword\">return</span> mFileUris;</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt;   &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>  通过setBeamPushUrisCallback()将回调提供给Android Beam文件传输。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   mFileUriCallback = <span class=\"keyword\">new</span> FileUriCallback();</div><div class=\"line\">&gt;   mNfcAdapter.setBeamPushUrisCallback(mFileUriCallback,<span class=\"keyword\">this</span>);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li>指定要发送的文件，给文件File URI，然后加入URIs数组。记住需要有文件的读取权限。</li>\n</ul>\n</blockquote>\n</li>\n<li><h4 id=\"接收文件\"><a href=\"#接收文件\" class=\"headerlink\" title=\"接收文件\"></a>接收文件</h4><blockquote>\n<p>Android Beam文件传输时，是将文件copy到某特殊目录，然后由Media Scanner扫描文件，在MediaStore Provider中为媒体文件添加条目记录。</p>\n<ul>\n<li><p>响应传输来的请求，并显示数据。</p>\n<blockquote>\n<p>Android Beam传输数据到接收设备后，会发送Intent通知，包含ACTION_VIEW,MIME,URI。用户确认通知后，intent被发至系统，寻求其他响应。</p>\n<p>Activity在manifest配置<code>&lt;intent-filter&gt;</code>加入<code>&lt;action android:name=&quot;android.intent.action.VIEW&quot;/&gt;</code>、<code>&lt;category android:name=&quot;android.intent.category.CATEGORY_DEFAULT&quot;</code>、<code>&lt;data android:nimeType=&quot;mime-type&quot;</code>分别标识不同的Action，category和数据type。</p>\n</blockquote>\n<p><strong>Action_view的action也不一定就是Android beam发送的。*</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"tag\">&lt;<span class=\"name\">activity</span> </span></div><div class=\"line\">&gt;     android:name=\"com.example.android.nfctransfer.ViewActivity\"</div><div class=\"line\">&gt;       android:label=\"Android Beam Viewer\"&gt;</div><div class=\"line\">&gt;         <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">&gt;           <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.VIEW\"</span>/&gt;</span></div><div class=\"line\">&gt;           <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.DEFAULT\"</span>/&gt;</span></div><div class=\"line\">&gt;           ...</div><div class=\"line\">&gt;           <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">&gt;     <span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>读取文件需要权限</p>\n<p><code>&lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot;/&gt;</code></p>\n<p>上面所说，ACTION_VIEW不一定就是AndroidBeam发送的intent，所以需要检查Scheme和Authority。调用Uri.getScheme。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   mIntent = getIntent();</div><div class=\"line\">&gt;   <span class=\"comment\">//判断Action，机器Scheme和Authority</span></div><div class=\"line\">&gt;   Uri beamUri = mIntent.getData();</div><div class=\"line\">&gt;   beamUri.getScheme();<span class=\"comment\">//判断是否是“file”，或者“content”</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>File URI中获取目录</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">handleFileUri</span><span class=\"params\">(Uri beamUri)</span> </span>&#123;</div><div class=\"line\">&gt;           <span class=\"comment\">// Get the path part of the URI</span></div><div class=\"line\">&gt;           String fileName = beamUri.getPath();</div><div class=\"line\">&gt;           <span class=\"comment\">// Create a File object for this filename</span></div><div class=\"line\">&gt;           File copiedFile = <span class=\"keyword\">new</span> File(fileName);</div><div class=\"line\">&gt;           <span class=\"comment\">// Get a string containing the file's parent directory</span></div><div class=\"line\">&gt;           <span class=\"keyword\">return</span> copiedFile.getParent();</div><div class=\"line\">&gt;       &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>Content URI中获取目录，MediaS tore会含有文件的uri信息。Uri.getAuthority()获取authority，返回值MediaStore.AUTHORITY或者其他。</p>\n<p>为其他类型时候，不一定可以获取目录；</p>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n"},{"title":"经典欧美动画电影","date":"2017-04-18T10:04:45.000Z","_content":"\n## 经典欧美动画电影\n\n> 个人比较喜欢的欧美动画电影，部分列表。:smile:\n\n- 机器人总动员，番外篇：电焊工波力\n- 冰雪奇缘，番外篇：雪宝的鼻子，生日惊喜\n- 爱宠大机密\n- 精灵旅社1，2\n- 里约大冒险1，2\n- 小叮当1，2，3，4，5，番外篇：精灵杯大赛\n- 疯狂动物城\n- 机械心\n- 魔发奇缘\n- 森林战士\n- 疯狂原始人\n- 守卫者联盟\n- 猫头鹰王国\n- 僵尸新娘\n- 功夫熊猫1，2，3，番外篇：师父的秘密，圣诞，卷轴的秘密\n- 海洋奇缘\n- 明月守卫者\n- 冰河世纪1，2，3，4，5，番外篇：消失的松果，松鼠坚果时光机，猛犸象的圣诞节，幸存的希德，小松鼠之宇宙，松鼠的爱\n- 穿靴子的猫，番外篇：萌猫三剑客\n- 神偷奶爸1，2，番外篇：小黄人大眼萌，小黄人番外篇1-10（香蕉、收发室惊魂、宠物、辅助轮、家庭大改造、迎新日、比赛，修剪草坪...）\n- 怪兽大学，怪兽电力公司\n- 玩具总动员1，2，3，遗忘的时光，惊魂夜，小玩具\n- 赛车总动员1，2，3\n- 马达加斯加1，2，3，番外篇：马达加斯加的企鹅，企鹅帮圣诞恶搞，马达加斯加的圣诞，僵尸企鹅\n- 加菲猫1，2\n- 逗鸟外传：萌宝满天飞，番外篇：暴力云与送子鹤\n- 霍顿与无名氏\n- 天才眼镜狗\n- 昆虫总动员\n- 魔法精灵\n- 漫游者，月神\n- 极速蜗牛\n- 诺亚方舟漂流记\n- 鲁宾孙漂流记\n- 极地特快\n- 松林大反攻1，2，3\n- 飞机总动员1，2\n- 动物总动员\n- 勇敢传说\n\n\n- 小王子\n\n\n- 虫虫危机\n- 驯龙高手\n- 闪电狗\n- 飞屋环游记\n- 潜艇总动员1--5\n- 料理鼠王\n- 兰戈\n- 鲨鱼黑帮\n- 别惹蚂蚁\n- 虫虫特工队\n- 鬼妈妈\n- 海底总动员1，2\n- 鼠来宝\n\n\n- 玛丽和马克思\n- 篱笆墙外\n- 天降美食1，2\n- 怪兽屋\n- 头脑特工队\n- 狮子王​","source":"_posts/经典欧美动画电影.md","raw":"---\ntitle: 经典欧美动画电影\ndate: 2017-04-18 18:04:45\ntags:\n    - 电影\n    - 动画\ncategories:\n    - 休闲\n---\n\n## 经典欧美动画电影\n\n> 个人比较喜欢的欧美动画电影，部分列表。:smile:\n\n- 机器人总动员，番外篇：电焊工波力\n- 冰雪奇缘，番外篇：雪宝的鼻子，生日惊喜\n- 爱宠大机密\n- 精灵旅社1，2\n- 里约大冒险1，2\n- 小叮当1，2，3，4，5，番外篇：精灵杯大赛\n- 疯狂动物城\n- 机械心\n- 魔发奇缘\n- 森林战士\n- 疯狂原始人\n- 守卫者联盟\n- 猫头鹰王国\n- 僵尸新娘\n- 功夫熊猫1，2，3，番外篇：师父的秘密，圣诞，卷轴的秘密\n- 海洋奇缘\n- 明月守卫者\n- 冰河世纪1，2，3，4，5，番外篇：消失的松果，松鼠坚果时光机，猛犸象的圣诞节，幸存的希德，小松鼠之宇宙，松鼠的爱\n- 穿靴子的猫，番外篇：萌猫三剑客\n- 神偷奶爸1，2，番外篇：小黄人大眼萌，小黄人番外篇1-10（香蕉、收发室惊魂、宠物、辅助轮、家庭大改造、迎新日、比赛，修剪草坪...）\n- 怪兽大学，怪兽电力公司\n- 玩具总动员1，2，3，遗忘的时光，惊魂夜，小玩具\n- 赛车总动员1，2，3\n- 马达加斯加1，2，3，番外篇：马达加斯加的企鹅，企鹅帮圣诞恶搞，马达加斯加的圣诞，僵尸企鹅\n- 加菲猫1，2\n- 逗鸟外传：萌宝满天飞，番外篇：暴力云与送子鹤\n- 霍顿与无名氏\n- 天才眼镜狗\n- 昆虫总动员\n- 魔法精灵\n- 漫游者，月神\n- 极速蜗牛\n- 诺亚方舟漂流记\n- 鲁宾孙漂流记\n- 极地特快\n- 松林大反攻1，2，3\n- 飞机总动员1，2\n- 动物总动员\n- 勇敢传说\n\n\n- 小王子\n\n\n- 虫虫危机\n- 驯龙高手\n- 闪电狗\n- 飞屋环游记\n- 潜艇总动员1--5\n- 料理鼠王\n- 兰戈\n- 鲨鱼黑帮\n- 别惹蚂蚁\n- 虫虫特工队\n- 鬼妈妈\n- 海底总动员1，2\n- 鼠来宝\n\n\n- 玛丽和马克思\n- 篱笆墙外\n- 天降美食1，2\n- 怪兽屋\n- 头脑特工队\n- 狮子王​","slug":"经典欧美动画电影","published":1,"updated":"2017-04-18T10:06:43.465Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ndxce5003o88owf1rz2cew","content":"<h2 id=\"经典欧美动画电影\"><a href=\"#经典欧美动画电影\" class=\"headerlink\" title=\"经典欧美动画电影\"></a>经典欧美动画电影</h2><blockquote>\n<p>个人比较喜欢的欧美动画电影，部分列表。:smile:</p>\n</blockquote>\n<ul>\n<li>机器人总动员，番外篇：电焊工波力</li>\n<li>冰雪奇缘，番外篇：雪宝的鼻子，生日惊喜</li>\n<li>爱宠大机密</li>\n<li>精灵旅社1，2</li>\n<li>里约大冒险1，2</li>\n<li>小叮当1，2，3，4，5，番外篇：精灵杯大赛</li>\n<li>疯狂动物城</li>\n<li>机械心</li>\n<li>魔发奇缘</li>\n<li>森林战士</li>\n<li>疯狂原始人</li>\n<li>守卫者联盟</li>\n<li>猫头鹰王国</li>\n<li>僵尸新娘</li>\n<li>功夫熊猫1，2，3，番外篇：师父的秘密，圣诞，卷轴的秘密</li>\n<li>海洋奇缘</li>\n<li>明月守卫者</li>\n<li>冰河世纪1，2，3，4，5，番外篇：消失的松果，松鼠坚果时光机，猛犸象的圣诞节，幸存的希德，小松鼠之宇宙，松鼠的爱</li>\n<li>穿靴子的猫，番外篇：萌猫三剑客</li>\n<li>神偷奶爸1，2，番外篇：小黄人大眼萌，小黄人番外篇1-10（香蕉、收发室惊魂、宠物、辅助轮、家庭大改造、迎新日、比赛，修剪草坪…）</li>\n<li>怪兽大学，怪兽电力公司</li>\n<li>玩具总动员1，2，3，遗忘的时光，惊魂夜，小玩具</li>\n<li>赛车总动员1，2，3</li>\n<li>马达加斯加1，2，3，番外篇：马达加斯加的企鹅，企鹅帮圣诞恶搞，马达加斯加的圣诞，僵尸企鹅</li>\n<li>加菲猫1，2</li>\n<li>逗鸟外传：萌宝满天飞，番外篇：暴力云与送子鹤</li>\n<li>霍顿与无名氏</li>\n<li>天才眼镜狗</li>\n<li>昆虫总动员</li>\n<li>魔法精灵</li>\n<li>漫游者，月神</li>\n<li>极速蜗牛</li>\n<li>诺亚方舟漂流记</li>\n<li>鲁宾孙漂流记</li>\n<li>极地特快</li>\n<li>松林大反攻1，2，3</li>\n<li>飞机总动员1，2</li>\n<li>动物总动员</li>\n<li>勇敢传说</li>\n</ul>\n<ul>\n<li>小王子</li>\n</ul>\n<ul>\n<li>虫虫危机</li>\n<li>驯龙高手</li>\n<li>闪电狗</li>\n<li>飞屋环游记</li>\n<li>潜艇总动员1–5</li>\n<li>料理鼠王</li>\n<li>兰戈</li>\n<li>鲨鱼黑帮</li>\n<li>别惹蚂蚁</li>\n<li>虫虫特工队</li>\n<li>鬼妈妈</li>\n<li>海底总动员1，2</li>\n<li>鼠来宝</li>\n</ul>\n<ul>\n<li>玛丽和马克思</li>\n<li>篱笆墙外</li>\n<li>天降美食1，2</li>\n<li>怪兽屋</li>\n<li>头脑特工队</li>\n<li>狮子王​</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"经典欧美动画电影\"><a href=\"#经典欧美动画电影\" class=\"headerlink\" title=\"经典欧美动画电影\"></a>经典欧美动画电影</h2><blockquote>\n<p>个人比较喜欢的欧美动画电影，部分列表。:smile:</p>\n</blockquote>\n<ul>\n<li>机器人总动员，番外篇：电焊工波力</li>\n<li>冰雪奇缘，番外篇：雪宝的鼻子，生日惊喜</li>\n<li>爱宠大机密</li>\n<li>精灵旅社1，2</li>\n<li>里约大冒险1，2</li>\n<li>小叮当1，2，3，4，5，番外篇：精灵杯大赛</li>\n<li>疯狂动物城</li>\n<li>机械心</li>\n<li>魔发奇缘</li>\n<li>森林战士</li>\n<li>疯狂原始人</li>\n<li>守卫者联盟</li>\n<li>猫头鹰王国</li>\n<li>僵尸新娘</li>\n<li>功夫熊猫1，2，3，番外篇：师父的秘密，圣诞，卷轴的秘密</li>\n<li>海洋奇缘</li>\n<li>明月守卫者</li>\n<li>冰河世纪1，2，3，4，5，番外篇：消失的松果，松鼠坚果时光机，猛犸象的圣诞节，幸存的希德，小松鼠之宇宙，松鼠的爱</li>\n<li>穿靴子的猫，番外篇：萌猫三剑客</li>\n<li>神偷奶爸1，2，番外篇：小黄人大眼萌，小黄人番外篇1-10（香蕉、收发室惊魂、宠物、辅助轮、家庭大改造、迎新日、比赛，修剪草坪…）</li>\n<li>怪兽大学，怪兽电力公司</li>\n<li>玩具总动员1，2，3，遗忘的时光，惊魂夜，小玩具</li>\n<li>赛车总动员1，2，3</li>\n<li>马达加斯加1，2，3，番外篇：马达加斯加的企鹅，企鹅帮圣诞恶搞，马达加斯加的圣诞，僵尸企鹅</li>\n<li>加菲猫1，2</li>\n<li>逗鸟外传：萌宝满天飞，番外篇：暴力云与送子鹤</li>\n<li>霍顿与无名氏</li>\n<li>天才眼镜狗</li>\n<li>昆虫总动员</li>\n<li>魔法精灵</li>\n<li>漫游者，月神</li>\n<li>极速蜗牛</li>\n<li>诺亚方舟漂流记</li>\n<li>鲁宾孙漂流记</li>\n<li>极地特快</li>\n<li>松林大反攻1，2，3</li>\n<li>飞机总动员1，2</li>\n<li>动物总动员</li>\n<li>勇敢传说</li>\n</ul>\n<ul>\n<li>小王子</li>\n</ul>\n<ul>\n<li>虫虫危机</li>\n<li>驯龙高手</li>\n<li>闪电狗</li>\n<li>飞屋环游记</li>\n<li>潜艇总动员1–5</li>\n<li>料理鼠王</li>\n<li>兰戈</li>\n<li>鲨鱼黑帮</li>\n<li>别惹蚂蚁</li>\n<li>虫虫特工队</li>\n<li>鬼妈妈</li>\n<li>海底总动员1，2</li>\n<li>鼠来宝</li>\n</ul>\n<ul>\n<li>玛丽和马克思</li>\n<li>篱笆墙外</li>\n<li>天降美食1，2</li>\n<li>怪兽屋</li>\n<li>头脑特工队</li>\n<li>狮子王​</li>\n</ul>\n"},{"title":"局域网文件与打印共享","date":"2016-08-15T10:05:00.000Z","_content":"\n\n\n笔者技术小白一个，喜爱折腾而已。目前就职小公司，岗位也非网管，出于兴趣而愿意多做一些技术工作。本本简介笔者所在小型公司的内部局域网共享问题的处理。\n#### 1、内网情况\n\n>小型公司，十多人的网络设备，无交换机，仅有的是家用型的普通路由器。\n>目的需求是实现公司内部网络共享一个打印机和实现文件共享。用户的网络链接于多个不同的普通路由器下面，一般是跨网段的。\n\n#### 2、解决方式\n\n>经过笔者的多方资料查询与尝试，什么静态路由表设置，子网掩码修改，关闭防火墙，修改网络配置ip等等，似乎军委实现所需效果。\n\n问题分析\n>之前的内网分布情况是外网通过一个路由器R1下分四个出口，连接了两个子路由R2、R3、又由于距离问题，R2下面又分出一个子路由R4。各自路由下还有其他电脑主机连接。\n\n>想必有人会吐槽这么个网络布局方式，或者说可以购买企业级路由，交换机实现问题解决。我只能说当下情况就是如此。\n\n>跨网段的网络共享，基于当下的网络和设备情况，个人技术未能实现。所以变相让所有设备处于同一网段，于是将R2、R3、R4变为交换机使用，而不作为路由器。（普通家用路由器，其实就是具有路由功能的小型交换机）为此，需要做的是，先将R2、R3、R4路由器设置不适用DHCP自动分配网址的功能，切保证R2、R3、R4这三个路由器的ip网址是192.168.1.1、192.168.2.1之类的，不同于R1的192.168.0.1其实就是不让三个子路由的ip内网和路由ip在同一网段。（因为两个360路由器，即使一个是子路由，依然可以设置和上级路由一个ip段，故而才有此说明）。\n>三个自路由都不用wan口，入口网线同出口网线一样，接入lan口。R1路由配置DHCP自动配置ip，各个终端电脑设备ip配置是自动获取ip，如此基本就实现了所有终端的同网段。\n\n#### 3、共享打印机和文件\n\n>文件和打印机的共享，需要一个在家庭网状态下才行，win10里面叫做专用网络。\n>链接打印机的电脑设置共享打印机，且创建或加入一个公司内部的家庭网，其他成员也加入同一家庭组。在控制面板--设置--硬件和设备---新增打印机，选择网络打印机，点击浏览，选择共享打印机的电脑终端，就可以看到下面共享的打印机。\n>文件共享，情况类似，在同一个工作组内，就可以实现共享文件。\n\n毕竟个人算是技术小白，所述信息未必全部正确，仅此笔记记录，也便于共享大家。\n![内网链接示意图](局域网文件与打印共享/net.png)\n\n","source":"_posts/局域网文件与打印共享.md","raw":"---\ntitle: 局域网文件与打印共享\ndate: 2016-08-15 18:05\ntags:\n    - 局域网\n    - 文件共享\ncategories:\n    - 网络相关\n---\n\n\n\n笔者技术小白一个，喜爱折腾而已。目前就职小公司，岗位也非网管，出于兴趣而愿意多做一些技术工作。本本简介笔者所在小型公司的内部局域网共享问题的处理。\n#### 1、内网情况\n\n>小型公司，十多人的网络设备，无交换机，仅有的是家用型的普通路由器。\n>目的需求是实现公司内部网络共享一个打印机和实现文件共享。用户的网络链接于多个不同的普通路由器下面，一般是跨网段的。\n\n#### 2、解决方式\n\n>经过笔者的多方资料查询与尝试，什么静态路由表设置，子网掩码修改，关闭防火墙，修改网络配置ip等等，似乎军委实现所需效果。\n\n问题分析\n>之前的内网分布情况是外网通过一个路由器R1下分四个出口，连接了两个子路由R2、R3、又由于距离问题，R2下面又分出一个子路由R4。各自路由下还有其他电脑主机连接。\n\n>想必有人会吐槽这么个网络布局方式，或者说可以购买企业级路由，交换机实现问题解决。我只能说当下情况就是如此。\n\n>跨网段的网络共享，基于当下的网络和设备情况，个人技术未能实现。所以变相让所有设备处于同一网段，于是将R2、R3、R4变为交换机使用，而不作为路由器。（普通家用路由器，其实就是具有路由功能的小型交换机）为此，需要做的是，先将R2、R3、R4路由器设置不适用DHCP自动分配网址的功能，切保证R2、R3、R4这三个路由器的ip网址是192.168.1.1、192.168.2.1之类的，不同于R1的192.168.0.1其实就是不让三个子路由的ip内网和路由ip在同一网段。（因为两个360路由器，即使一个是子路由，依然可以设置和上级路由一个ip段，故而才有此说明）。\n>三个自路由都不用wan口，入口网线同出口网线一样，接入lan口。R1路由配置DHCP自动配置ip，各个终端电脑设备ip配置是自动获取ip，如此基本就实现了所有终端的同网段。\n\n#### 3、共享打印机和文件\n\n>文件和打印机的共享，需要一个在家庭网状态下才行，win10里面叫做专用网络。\n>链接打印机的电脑设置共享打印机，且创建或加入一个公司内部的家庭网，其他成员也加入同一家庭组。在控制面板--设置--硬件和设备---新增打印机，选择网络打印机，点击浏览，选择共享打印机的电脑终端，就可以看到下面共享的打印机。\n>文件共享，情况类似，在同一个工作组内，就可以实现共享文件。\n\n毕竟个人算是技术小白，所述信息未必全部正确，仅此笔记记录，也便于共享大家。\n![内网链接示意图](局域网文件与打印共享/net.png)\n\n","slug":"局域网文件与打印共享","published":1,"updated":"2017-03-31T08:01:40.840Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ndxce7003t88owfn9818s4","content":"<p>笔者技术小白一个，喜爱折腾而已。目前就职小公司，岗位也非网管，出于兴趣而愿意多做一些技术工作。本本简介笔者所在小型公司的内部局域网共享问题的处理。</p>\n<h4 id=\"1、内网情况\"><a href=\"#1、内网情况\" class=\"headerlink\" title=\"1、内网情况\"></a>1、内网情况</h4><blockquote>\n<p>小型公司，十多人的网络设备，无交换机，仅有的是家用型的普通路由器。<br>目的需求是实现公司内部网络共享一个打印机和实现文件共享。用户的网络链接于多个不同的普通路由器下面，一般是跨网段的。</p>\n</blockquote>\n<h4 id=\"2、解决方式\"><a href=\"#2、解决方式\" class=\"headerlink\" title=\"2、解决方式\"></a>2、解决方式</h4><blockquote>\n<p>经过笔者的多方资料查询与尝试，什么静态路由表设置，子网掩码修改，关闭防火墙，修改网络配置ip等等，似乎军委实现所需效果。</p>\n</blockquote>\n<p>问题分析</p>\n<blockquote>\n<p>之前的内网分布情况是外网通过一个路由器R1下分四个出口，连接了两个子路由R2、R3、又由于距离问题，R2下面又分出一个子路由R4。各自路由下还有其他电脑主机连接。</p>\n<p>想必有人会吐槽这么个网络布局方式，或者说可以购买企业级路由，交换机实现问题解决。我只能说当下情况就是如此。</p>\n<p>跨网段的网络共享，基于当下的网络和设备情况，个人技术未能实现。所以变相让所有设备处于同一网段，于是将R2、R3、R4变为交换机使用，而不作为路由器。（普通家用路由器，其实就是具有路由功能的小型交换机）为此，需要做的是，先将R2、R3、R4路由器设置不适用DHCP自动分配网址的功能，切保证R2、R3、R4这三个路由器的ip网址是192.168.1.1、192.168.2.1之类的，不同于R1的192.168.0.1其实就是不让三个子路由的ip内网和路由ip在同一网段。（因为两个360路由器，即使一个是子路由，依然可以设置和上级路由一个ip段，故而才有此说明）。<br>三个自路由都不用wan口，入口网线同出口网线一样，接入lan口。R1路由配置DHCP自动配置ip，各个终端电脑设备ip配置是自动获取ip，如此基本就实现了所有终端的同网段。</p>\n</blockquote>\n<h4 id=\"3、共享打印机和文件\"><a href=\"#3、共享打印机和文件\" class=\"headerlink\" title=\"3、共享打印机和文件\"></a>3、共享打印机和文件</h4><blockquote>\n<p>文件和打印机的共享，需要一个在家庭网状态下才行，win10里面叫做专用网络。<br>链接打印机的电脑设置共享打印机，且创建或加入一个公司内部的家庭网，其他成员也加入同一家庭组。在控制面板–设置–硬件和设备—新增打印机，选择网络打印机，点击浏览，选择共享打印机的电脑终端，就可以看到下面共享的打印机。<br>文件共享，情况类似，在同一个工作组内，就可以实现共享文件。</p>\n</blockquote>\n<p>毕竟个人算是技术小白，所述信息未必全部正确，仅此笔记记录，也便于共享大家。<br><img src=\"/2016/08/15/局域网文件与打印共享/net.png\" alt=\"内网链接示意图\"></p>\n","excerpt":"","more":"<p>笔者技术小白一个，喜爱折腾而已。目前就职小公司，岗位也非网管，出于兴趣而愿意多做一些技术工作。本本简介笔者所在小型公司的内部局域网共享问题的处理。</p>\n<h4 id=\"1、内网情况\"><a href=\"#1、内网情况\" class=\"headerlink\" title=\"1、内网情况\"></a>1、内网情况</h4><blockquote>\n<p>小型公司，十多人的网络设备，无交换机，仅有的是家用型的普通路由器。<br>目的需求是实现公司内部网络共享一个打印机和实现文件共享。用户的网络链接于多个不同的普通路由器下面，一般是跨网段的。</p>\n</blockquote>\n<h4 id=\"2、解决方式\"><a href=\"#2、解决方式\" class=\"headerlink\" title=\"2、解决方式\"></a>2、解决方式</h4><blockquote>\n<p>经过笔者的多方资料查询与尝试，什么静态路由表设置，子网掩码修改，关闭防火墙，修改网络配置ip等等，似乎军委实现所需效果。</p>\n</blockquote>\n<p>问题分析</p>\n<blockquote>\n<p>之前的内网分布情况是外网通过一个路由器R1下分四个出口，连接了两个子路由R2、R3、又由于距离问题，R2下面又分出一个子路由R4。各自路由下还有其他电脑主机连接。</p>\n<p>想必有人会吐槽这么个网络布局方式，或者说可以购买企业级路由，交换机实现问题解决。我只能说当下情况就是如此。</p>\n<p>跨网段的网络共享，基于当下的网络和设备情况，个人技术未能实现。所以变相让所有设备处于同一网段，于是将R2、R3、R4变为交换机使用，而不作为路由器。（普通家用路由器，其实就是具有路由功能的小型交换机）为此，需要做的是，先将R2、R3、R4路由器设置不适用DHCP自动分配网址的功能，切保证R2、R3、R4这三个路由器的ip网址是192.168.1.1、192.168.2.1之类的，不同于R1的192.168.0.1其实就是不让三个子路由的ip内网和路由ip在同一网段。（因为两个360路由器，即使一个是子路由，依然可以设置和上级路由一个ip段，故而才有此说明）。<br>三个自路由都不用wan口，入口网线同出口网线一样，接入lan口。R1路由配置DHCP自动配置ip，各个终端电脑设备ip配置是自动获取ip，如此基本就实现了所有终端的同网段。</p>\n</blockquote>\n<h4 id=\"3、共享打印机和文件\"><a href=\"#3、共享打印机和文件\" class=\"headerlink\" title=\"3、共享打印机和文件\"></a>3、共享打印机和文件</h4><blockquote>\n<p>文件和打印机的共享，需要一个在家庭网状态下才行，win10里面叫做专用网络。<br>链接打印机的电脑设置共享打印机，且创建或加入一个公司内部的家庭网，其他成员也加入同一家庭组。在控制面板–设置–硬件和设备—新增打印机，选择网络打印机，点击浏览，选择共享打印机的电脑终端，就可以看到下面共享的打印机。<br>文件共享，情况类似，在同一个工作组内，就可以实现共享文件。</p>\n</blockquote>\n<p>毕竟个人算是技术小白，所述信息未必全部正确，仅此笔记记录，也便于共享大家。<br><img src=\"/2016/08/15/局域网文件与打印共享/net.png\" alt=\"内网链接示意图\"></p>\n"},{"title":"GitHub Android Libraries Top 100 简介","date":"2017-04-11T09:50:25.000Z","_content":"\n# GitHub Android Libraries Top 100 简介\n\n<font color=\"#ff0000\">本文原文链接地址https://github.com/Freelander/Android_Data/blob/master/Android-Librarys-Top-100.md</font>\n\n\n\n\n本项目主要对目前 GitHub 上排名前 100 的 Android 开源库进行简单的介绍, 至于排名完全是根据 GitHub 搜索 Java 语言选择 (Best Match) 得到的结果, 然后过滤了跟 Android 不相关的项目, 所以排名并不具备任何官方效力, 仅供参考学习, 方便初学者快速了解当前一些流行的 Android 开源库.\n\n> iOS 版本的在此: https://github.com/Aufree/trip-to-iOS/blob/master/Top-100.md\n\n>感谢 [@GitHubDaily](http://weibo.com/GitHubDaily) 与 [@Android 开发日常](http://weibo.com/AndroidDevDaily) 的大力支持, 以及 [@stormzhang](https://github.com/stormzhang) 的指点\n\n**若有任何疑问可通过[邮件](mailto:huanggaojun13@gmail.com)或[微博](http://weibo.com/gaojunhuang)联系我**\n\n| 项目名称                                     | 项目简介                                     |\n| ---------------------------------------- | ---------------------------------------- |\n| 1. [react-native](https://github.com/facebook/react-native) | 这个是 Facebook 在 React.js Conf 2015 大会上推出的基于 JavaScript 的开源框架 React Native, 该框架结合了 Web 应用和 Native 应用的优势, 可以使用 JavaScript 来开发 iOS 和 Android 原生应用 |\n| 2.[Android-Universal-Image-Loader](https://github.com/nostra13/Android-Universal-Image-Loader) | ImageLoader 是最早开源的 Android 图片缓存库, 强大的缓存机制, 早期被广泛 Android 应用使用, 至今仍然有很多 Android 开发者在使用 |\n| 3. [RxJava](https://github.com/ReactiveX/RxJava) | RxJava 是一个在 Java VM 上使用可观测的序列来组成异步的, 基于事件的程序的库, 简单来说它就是一个实现异步操作的库, RxJava 的优点在于一个词 \"简洁\", 使用它就算你程序逻辑有多么复杂, 它依然能够保持简洁易懂 |\n| 4. [retrofit](https://github.com/square/retrofit) | Retrofit 是 Square 公司出品的 HTTP 请求库, 同时是 Square 是最早开源项目之一, Retrofit 是目前 Android 最流行的 Http Client 库之一, 目前版本是 Retrofit2.0 Beta4, 越来越多 Android 开发者开始使用这个请求库了 |\n| 5. [okhttp](https://github.com/square/okhttp) | OkHttp 是 Square 公司出品的 HTTP 另一个请求库, Google 不推荐人们使用 HttpClient, 可是 HttpURLConnection 实在是太难用了, 因此很多人使用了 OkHttp 来解决这问题, 据说 Android4.4 的源码中可以看到 HttpURLConnection 已经替换成 OkHttp 实现呢 |\n| 6. [SlidingMenu(不建议使用)](https://github.com/jfeinstein10/SlidingMenu) | 一个侧滑菜单开源库, 在 Google 自己原生态的侧滑菜单 NavigationDrawer 没有出现之前, 这个库就已经被广泛使用, 可是到现在这个库已经被放弃了 |\n| 7. [picasso](https://github.com/square/picasso) | Picasso 是 Square 公司出品的一款图片缓存库, 主导者是 JakeWharton 大神 |\n| 8. [android-best-practices](https://github.com/futurice/android-best-practices) | Android 开发最佳实践, 里面所介绍的经验都是来自于 Futurice 公司 Android 开发者, 介绍内容有 Android 开发规范, 架构, 布局技巧, 以及使用一些有助于快速开发相关工具等等, 非常适合新手去学习 |\n| 9. [EventBus](https://github.com/greenrobot/EventBus) | EventBus 是 Android 事件管理总线, 使用它可以替带 Android BroadCast, BroadCastReceiver, Handler 在 Activity, Fragment, Service, 线程之间传递消息, 大大简化了事件传递逻辑 |\n| 10. [android-async-http](https://github.com/loopj/android-async-http) | Android-Async-Http 是 Android 一款老牌异步请求库, 专门对 Android 在 Apache 的 HttpClient 基础上构建的异步 http 连接, 该库有很多特征, 例如: 库的 size 小, 支持文件上传不需使用第三方库支持, 内部使用线程池来处理并发, 等等 |\n| 11. [fresco](https://github.com/facebook/fresco) | Fresco 是 FaceBook 公司出品的一款图片缓存库, Fresco 是一个强大的图片加载组件, 支持加载 Gif 图和 WebP 格式, 支持 Android2.3(API level 9) 及其以上系统, Fresco 中设计了 Image pipeline 和 Drawees 两个模块各施其职, 使得图片完美加载出来, 想知道更多 image pipeline 和 Drawees 有关于它的特性, 可以到它[官方平台](http://fresco-cn.org/)看介绍 |\n| 12. [zxing](https://github.com/zxing/zxing) | ZXing 是二维码领域中名气最大的开源项目, 它提供了多个平台的二维码/条形码扫描解决方案, 拥有扫描快, 识别率高, 使用简单等特点 |\n| 13. [leakcanary](https://github.com/square/leakcanary) | LeakCanary 是 Square 公司出的一款检测内存泄露工具, 该工具能帮助你在开发阶段方便的检测出内存泄露的问题, 使用起来非常简单方便 |\n| 14. [butterknife](https://github.com/JakeWharton/butterknife) | 由 JakeWharton 大神开发出来的, ButterKnife 是 View 注入框架, 使用它为了简写很多 findViewById 代码, 同时还支持 View 的一些事件处理函数 |\n| 15. [MPAndroidChart](https://github.com/PhilJay/MPAndroidChart) | MPAndroidChart 是一款强大的 Android 图表库, 支持各种各样图表显示, 能想到的图表样式这里几乎都有, 图表还支持选择, 拖放和缩放动画效果 |\n| 16. [ActionBarSherlock (不建议使用)](https://github.com/JakeWharton/ActionBarSherlock) | ActionBarSherlock 这个库是 JakeWharton 大神开发出来支持 Android3.0 以下版本的, 后来慢慢的 Google 也提供了 AppCompat 库来支持 Android3.0 以下版本使用 ActionBar, 因此作者不建议我们再使用这个库了 |\n| 17. [androidannotations](https://github.com/excilys/androidannotations) | AndroidAnnotations 是一个能够让你快速进行 Android 开发的开源框架, 它能让你专注于真正重要的地方, 使代码更加精简, 使项目更加容易维护, 它的目标就是 \"Fast Android Development.Easy maintainance\" |\n| 18. [ViewPagerIndicator](https://github.com/JakeWharton/ViewPagerIndicator) | 由 JakeWharton 大神开发出来的一个 ViewPager 指示器, 使用起来简单方便, 可高度定制, 开发出各种各样动画效果 |\n| 19. [glide](https://github.com/bumptech/glide) | Glide 是 Google 员工的开源项目, 广泛应用于 Google 一些 App 上, 在2014年 Google I/O 大会上被推荐使用, Glide 和 Picasso 被人拿来比较研究过, Glide 与 Picasso 有 90% 的相似度, 但在一些细节上还是有点区别的, 各有各优缺点看君选择 |\n| 20. [HomeMirror](https://github.com/HannahMitt/HomeMirror) | 开发者是由一名程序媛 Hannah Mittelstaedt , HomeMirror 是一款 Android 镜子应用, 目前它能实现日期, 时间, 天气, 生日信息, 事件提醒器, 骑车天气的推荐, 股票信息, XKCD 漫画网站的新帖等等 |\n| 21. [Android-PullToRefresh(不建议使用)](https://github.com/chrisbanes/Android-PullToRefresh) | 一个强大的拉动刷新开源项目, 支持各种控件下拉刷新, ListView, ViewPager, WebView, ExpandableListView, GridView, ScrollView, Horizontal ScrollView, Fragment 上下左右拉动刷新, 不过现在这个项目已经停止维护更新了, 推荐使用 [Android-Ultra-Pull-To-Refresh](https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh) |\n| 22. [MaterialDesignLibrary](https://github.com/navasmdc/MaterialDesignLibrary) | 这个库控件都是遵循了 Google Material Design 设计规范开发出来, 例如有: Flat Button, Rectangle Button, CheckBox, Switch, Progress bar circular indeterminate 等等 |\n| 23. [PhotoView](https://github.com/chrisbanes/PhotoView) | PhotoView 是 ImageView 的子类, 支持所有 ImageView 的源生行为, 例如: 支持 Pinch 手势自由缩放, 支持双击放大/还原, 支持平滑滚动等等, 并且非常方便的与 ImageLoader/Picasso 之类的网络图片读取库集成使用, 还方便的与 ViewPager 等同样支持滑动手势的控件集成 |\n| 24. [RxAndroid](https://github.com/ReactiveX/RxAndroid) | 由 JakeWharton 大神主导开发的项目, RxAndroid 是 RxJava 的一个针对 Android 平台的扩展, 主要用于 Android 开发 |\n| 25. [material-dialogs](https://github.com/afollestad/material-dialogs) | Material Dialogs 是一个可高度定制易用, 符合 Material Design 风格的 Dialogs, 兼容 Android API8 以上版本, 个人使用感觉它完全可替代 Android 原生那个, 比原生那个更加简单易用 |\n| 26.[Android-ObservableScrollView](https://github.com/ksoichiro/Android-ObservableScrollView) | ObservableScrollView 是一款用于在滚动视图中观测滚动事件的 Android 库, 它能够轻而易举地与 Android 5.0 Lollipop 引进的工具栏 (Toolbar) 进行交互, 还可以帮助开发者实现拥有 Material Design 应用视觉体验的界面外观, 支持ListView, ScrollView, WebView, RecyclerView, GridView组件 |\n| 27. [Android-Bootstrap](https://github.com/Bearded-Hen/Android-Bootstrap) | Android 版的 Bootstrap, 利用这个库能够实现很多 Bootstrap 样式风格, 之前有学过 Html 的人就知道 Bootstrap 是什么玩意啦 |\n| 28. [AndroidSwipeLayout](https://github.com/daimajia/AndroidSwipeLayout) | 开发者是代码家, AndroidSwipeLayout 是一个支持ListView, GridView, ViewGroup等等左右上下滑动出操作菜单, 类似 qq 消息列表向左滑动显示出多某条信息的操作菜单 |\n| 29. [dagger](https://github.com/square/dagger) | Dagger 是 Square 公司出品的一个针对 Android 和 Java 的快速依赖注入器, 能够有效减少你敲代码量 |\n| 30. [ListViewAnimations](https://github.com/nhaarman/ListViewAnimations) | 一个轻轻松松给 Android ListView 添加动画效果的库, 支持的动画有: Alpha, SwingRightIn, SwingLeftIn, SwingBottomIn, SwingRightIn and ScaleIn等等, 使用它能很容易就实现帅爆的效果 |\n| 31. [PagerSlidingTabStrip(不建议使用)](https://github.com/astuetz/PagerSlidingTabStrip) | PagerSlidingTabStrip 是一个给 Android ViewPager添加上 ViewPager 滑动指示器, 从 GitHub 上面看, 这个库似乎没有人在维护了, 因此不建议使用, 可使用 [SmartTabLayout](https://github.com/ogaclejapan/SmartTabLayout) 来代替 |\n| 32. [AndroidViewAnimations](https://github.com/daimajia/AndroidViewAnimations) | 开发者是代码家, 这个库实现很多很酷炫的 Android 动画, 动画效果是借鉴 Animate.css 来实现的, 非常酷, 而且这个使用起来也是非常简单 |\n| 33. [AndroidSlidingUpPanel](https://github.com/umano/AndroidSlidingUpPanel) | AndroidSlidingUpPanel 是一个上拉面板, 就是向上滑动的时候往上飞出一个显示面板控件, 该库效果在 Google Music, Google Maps and Rdio等 App 应用到 |\n| 34. [MaterialDrawer](https://github.com/mikepenz/MaterialDrawer) | MaterialDrawer 是一个类似 Google 官方 NavigationView 侧滑显示控件, 个人认为 NavigationView 并没有 MaterialDrawer 实用, 因为 NavigationView 自由度不是很好, 很多都写死了不可以自由定义布局, 而 MaterialDrawer 能够实现跟 NavigationView 一样的效果, 同时还支持自定义效果, 自由度非常高 |\n| 35. [Material-Animations](https://github.com/lgvalle/Material-Animations) | Material-Animations 是一个很好过渡动画库, 可以应用于 Activity 与 Activity 之间的跳转, Fragment 与 Fragment 之间的跳转, 以及各个 View 变化前后的过渡动画 |\n| 36. [MaterialViewPager](https://github.com/florent37/MaterialViewPager) | 一个简单易用 Material Design 风格的 ViewPager 库   |\n| 37. [ion](https://github.com/koush/ion)  | ion 是一个让 Android 的网络操作变得极其简单, 支持异步获取和处理JSON, 支持 Android 文件下载 (同时支持下载进度条绑定), 支持安全链接和代理 |\n| 38. [stetho](https://github.com/facebook/stetho) | Stetho是 Facebook 出品的一个强大的 Android 调试工具,使用该工具你可以在 Chrome Developer Tools查看App的布局, 网络请求(仅限使用Volley, okhttp的网络请求库), sqlite, preference, 一切都是可视化的操作,无须自己在去使用adb, 也不需要root你的设备 |\n| 39. [fastjson](https://github.com/alibaba/fastjson) | Fastjson 是一个 Java 语言编写的高性能功能完善的 JSON 库. 它采用一种“假定有序快速匹配”的算法, 把 JSON Parse的性能提升到极致, 是目前Java语言中最快的JSON库. Fastjson接口简单易用, 已经被广泛使用在缓存序列化, 协议交互, Web输出, Android客户端等多种应用场景 |\n| 40. [cardslib (不建议使用)](https://github.com/gabrielemariotti/cardslib) | Cardslib 是早期由 Gabriele Mariotti 开发的一个为开发者方便实现各种 Card UI 的 Android 开源代码库, 后来 Google 官方提供自己封装了 CardView 在 v7 包下, 使用 Google 官方的可以完全替代了这个库, 因此这个也被弃用了 |\n| 41. [Android-Ultra-Pull-To-Refresh](https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh) | 开发者是廖祜秋, 这个是一个非常强大的下拉刷新库, 继承 ViewGroup 可以包含任何 View, 功能甚至比 SwipeRefreshLayout 强大, 使用起来也非常容易, 还可以自由定制自己的 UI 样式 |\n| 42. [greenDAO](https://github.com/greenrobot/greenDAO) | greenDAO 是一个可以帮助 Android 开发者快速将 Java 对象映射到 SQLite 数据库的表单中的 ORM解决方案, 通过使用一个简单的面向对象 API, 开发者可以对 Java 对象进行存储, 更新, 删除和查询, greenDAO 相对 OrmLite, AndrORM 这两个 ORM 开源库, 性能是最高的 |\n| 43. [AndroidStaggeredGrid](https://github.com/etsy/AndroidStaggeredGrid) | AndroidStaggeredGrid 是一个支持多列并且每一行的 item 大小不一, 交错排列的 GridView, 就是实现瀑布流样式效果, 目前该库已经被弃用了, 开发者建议我们使用 Google 官方控件 RecyleView 中的 StaggeredGridLayoutManager 布局来实现瀑布流效果 |\n| 44. [otto](https://github.com/square/otto) | Otto 是 Square 公司出的一个事件库 (pub/sub 模式), 用来简化应用程序组件之间的通讯, otto 修改自 Google 的 Guava 库, 专门为 Android 平台进行了优化, 与上面介绍的 EventBus 相比, 两个库各有各的优点, 完全取决于我们自己项目的需求来选择它们哪一个 |\n| 45. [xUtils](https://github.com/wyouflf/xUtils) | xUtils 是一个快速开发框架, 里面包含 DbUtils, ViewUtils, HttpUtils, BitmapUtils 四大模块, 可用于快速开发, 支持大文件上传, 拥有更加灵活的 ORM, 最低兼容 Android 2.2 |\n| 46. [realm-java](https://github.com/realm/realm-java) | Realm 一个轻量的 Android 版本的数据存储库, 比 Android 原生系统的 SQLite 更加简洁快速对数据进行操作 |\n| 47.[Android-CleanArchitecture](https://github.com/android10/Android-CleanArchitecture) | CleanArchitecture 是一个非常典型使用 MVP 架构的项目, 大家如果还没有理解 MVP 架构的可以看看这个项目 |\n| 48. [StickyListHeaders](https://github.com/emilsjolander/StickyListHeaders) | StickyListHeaders 是一个实现能够固定在屏幕顶部的ListView Section Header库, 就是当前 section 的 header 固定在屏幕顶部, 当滑动到其他 section 时, 其他 section 的 header 会代替之前的 section 的 header, 固定到屏幕顶部, 类似于 Android4.0 的手机通讯录的效果 |\n| 49. [AppIntro](https://github.com/PaoloRotolo/AppIntro) | AppIntro 是一个让人轻松快速搭建漂亮酷炫的引导页库            |\n| 50. [ActiveAndroid](https://github.com/pardom/ActiveAndroid) | ActiveAndroid 是采用Rails中的 [Active Record](http://en.wikipedia.org/wiki/Object-relational_mapping)架构模式设计的适用于 Android 平台的轻量级 ORM 架构, 几乎可以不用写任何 SQL 代码实现快速开发 |\n| 51. [android-volley](https://github.com/mcxiaoke/android-volley) | Volley 是谷歌官方开发团队在 2013 年 Google I/O 大会推出的一个新的网络通信框架, 这个框架把 AsyncHttpClient 和 Universal-Image-Loader 的优点集于了一身,既可以像AsyncHttpClient 一样非常简单地进行 HTTP 通信,也可以像 Universal-Image-Loader 一样轻松加载网络上的图片, 这个库并不是官方的, 只是托管同步在 Maven,  官方只提供的 Jar 包 |\n| 52. [twoway-view](https://github.com/lucasr/twoway-view) | TwoWayView 是简化 RecyclerView 开发的一个库, 可以在其 Base LayoutManager 基础上构建各种各样的布局, 该库内置了几个常用布局 List, Grid, Staggered Grid,Spannable Grid |\n| 53. [ShowcaseView](https://github.com/amlcurran/ShowcaseView) | ShowcaseView 是一个非常适合用于对用户进行第一次使用进行指导的库,使用起来非常简单还可以自定义样式 |\n| 54. [Calligraphy](https://github.com/chrisjenx/Calligraphy) | Calligraphy 是一个用来简化 Android 应用使用自定义字体的类库, 该类库会自动查找应用中的 TextView 并设置其使用的字体 |\n| 55. [NineOldAndroids](https://github.com/JakeWharton/NineOldAndroids) | NineOldAndroids 由 JakeWharton 大神开发的一个向下兼容的动画库, 主要是使低于API 11的系统也能够使用 View 的属性动画, 不过现在 JakeWharton 大神已经不推荐使用该库, 而是推荐我们使用官方封装在 Support 库里面的动画 |\n| 56. [android-floating-action-button](https://github.com/futuresimple/android-floating-action-button) | FloatingActionButton 是一个悬浮操作按钮, 官方在 Support Design 包下也有封装一个类似这个库效果的 FloatingActionButton, 值得说明的是这个库是早在官方封装之前就存在的, 个人感觉这个库比官方那个更加好用 |\n| 57. [CircleImageView](https://github.com/hdodenhof/CircleImageView) | CircleImageView 是一个轻松帮你实现圆形效果 ImageView 图片库, CircleImageView 是基于 ImageView 扩展出来, 因此它拥有 ImageView 控件所有属性, 简单易用值得你使用的库 |\n| 58. [material](https://github.com/rey5137/material) | Material 是将 Material Design 风格控件封装在该库当中, 目前封装有Progress, Button, Switch, Slider, Spinner, Text Field, TabPageIndicator, SnackBar, Dialog, BottomSheetDialog, Dynamic theme |\n| 59. [ActionBar-PullToRefresh](https://github.com/chrisbanes/ActionBar-PullToRefresh) | ActionBar-PullToRefresh 是一个下拉刷新, 下拉刷新时在 ActionBar 出现加载中提示的库 |\n| 60. [FloatingActionButton](https://github.com/makovkastar/FloatingActionButton) | 又一个悬浮操作按钮库, 该库添加支持监听滑滚动事件, 当向下滑时按钮隐藏, 向上滑时按钮显示, 还有动画效果, 支持监听 ListView, ScrollView, RecylerView |\n| 61. [AndroidAsync](https://github.com/koush/AndroidAsync) | AndroidAsync 是一款基于 NIO 的低端 Android 异步 socket, http (client+server), websocket 和 socket.io 网络通信协议类库 |\n| 62. [rebound](https://github.com/facebook/rebound) | Rebound 是 Facebook 推出的一个弹性动画库, 可以让动画看起来真实自然, 像真实世界的物理运动, 带有力的效果, 使用的参数则是 Facebook 的 origami 中使用的 |\n| 63. [android-common](https://github.com/Trinea/android-common) | android-common-lib 是 Trinea 大神收集的一些开发通用的缓存, 公共 View 以及一些常用工具类 |\n| 64. [RippleEffect](https://github.com/traex/RippleEffect) | RippleEffect 是一个实现在 Android 任何组件点击出现 Material Design 的波纹效果, 向下兼容到 Android API9 |\n| 65. [SmoothProgressBar](https://github.com/castorflex/SmoothProgressBar) | SmoothProgressBar 是一个帮你的 App 方便实现可定制, 平滑动画的水平滚动进度条库 |\n| 66. [recyclerview-animators](https://github.com/wasabeef/recyclerview-animators) | RecyclerView Animators 是一个对 Recycler 控件的 Item 添加以及删除增加动画效果, 动画效果有Scale, Fade, Flip, Slide 里面各种各样效果 |\n| 67. [circular-progress-button](https://github.com/dmytrodanylyk/circular-progress-button) | 一个带进度显示的 Button, 效果和动画做的都非常赞             |\n| 68. [DroidPlugin](https://github.com/Qihoo360/DroidPlugin) | DroidPlugin 是 360 手机助手在 Android 系统上实现了一种新的插件机制: 它可以在无需安装, 修改的情况下运行APK文件, 此机制对改进大型APP的架构, 实现多团队协作开发具有一定的好处 |\n| 69. [dynamic-load-apk](https://github.com/singwhatiwanna/dynamic-load-apk) | 开发者是 singwhatiwanna(任玉刚), 是《Android 开发艺术探索》书籍的作者, 这个是作者联合另两位开发者啸(时之沙)和宋思宇花了几个月时间研究出来的 Apk 动态加载框架, 想了解更多关于这框架可到作者博客看 [这篇文章](http://blog.csdn.net/singwhatiwanna/article/details/39937639) 有详细介绍 |\n| 70. [ExoPlayer](https://github.com/google/ExoPlayer) | ExoPlayer 是Google 开发团队开源出来的一个媒体播放库, 比 Android 框架原生的 MediaPlayer 拥有更多优点支持动态的自适应流 HTTP(DASH) 和 平滑流, 支持高级的HLS特性, 支持自定义和扩治你的使用场景等等 |\n| 71. [Crouton (不建议使用)](https://github.com/keyboardsurfer/Crouton) | Crouton 是一个显示提示信息的显示工具类, 可以用来代替 Toast, 默认显示在窗口的顶部, 可以按队列一个接着一个显示, 不过该库已经被弃用, 不推荐使用 |\n| 72. [robospice](https://github.com/stephanenicolas/robospice) | RoboSpice 是一个使你建立异步的长时间的运行任务异常轻松的一个网络库，在网络请求，缓存支持，和提供开箱即用的 rest 请求方面尤为强大 |\n| 73. [hugo](https://github.com/JakeWharton/hugo) | Hugo 是 JakeWharton 大神推出的一个用于打印 Log, hugo 是基于注解被调用的, 引入相关依赖后, 在方法上加上 @DebugLog 即可输出 Log, 使用非常简单 |\n| 74. [async-http-client](https://github.com/AsyncHttpClient/async-http-client) | AsyncHttpClient 是又一款 Android 异步请求库, 该库支持 WebSocket 协议, 使用起来也比较简单易用 |\n| 75. [UltimateRecyclerView](https://github.com/cymcsg/UltimateRecyclerView) | UltimateRecyclerView 是一个功能强大的 RecyclerView(advanced and flexible version of ListView), 包括了下拉刷新, 加载更多, 多种动画, 空数据提示, 拖动排序, 视差处理, 工具栏渐变, 滑动删除, 自定义floating button, 多种刷新效果, scrollbar, sticky header, 多 layout 支持等等元素, 而且使用起来跟 RecyclerView 一样的方便 |\n| 76. [MaterialEditText](https://github.com/rengwuxian/MaterialEditText) | MaterialEditText 是就职于 Flipboard 的员工 [扔物线](https://www.zhihu.com/people/rengwuxian) 开发的, 在 AppCompat v21 中也提供了 Material Design 的控件 EditText, 可是由于比较难用, 没有提供设置颜色的 Api, 于是就产生这个第三方库 |\n| 77. [Side-Menu.Android](https://github.com/Yalantis/Side-Menu.Android) | Side Menu 是 [Yalantis](https://yalantis.com/) 组织开源出来, 该组织因开源出一些动画很棒的开源库为大家所熟知该库是其中一个, 该库是提供翻页动画效果的侧边菜单, 动画体验超赞的 |\n| 78. [drag-sort-listview](https://github.com/bauerca/drag-sort-listview) | DragSortListView 是一个可以实现拖动排序, 滑动删除的 listview 控件, 注意的是作者对该库已经放弃维护更新了, 不过感兴趣的人可以去研究一下 |\n| 79. [android-times-square](https://github.com/square/android-times-square) | TimesSquare 是 Square 公司出品的一款显示日历选择日期的控件, 可以让用户选择多个日期 |\n| 80. [GreenDroid(不建议使用)](https://github.com/cyrilmottier/GreenDroid) | GreenDroid 是一个封装好的 Android UI 界面库, 不过该库已经被弃用了, 不建议使用 |\n| 81. [logger](https://github.com/orhanobut/logger) | Logger 是一个简单, 漂亮, 强大 Android 打印日志库       |\n| 82. [acra](https://github.com/ACRA/acra) | Acra 是一个能够让 Android 应用自动将崩溃报告以谷歌文档电子表的形式进行发送的库, 旨在当应用发生崩溃或出现错误行为时, 开发者可以获取到相关数据 |\n| 83. [FadingActionBar](https://github.com/ManuelPeinado/FadingActionBar) | FadingActionBar 是一个支持 ListView, ScrollView, WebView 向下滚动时逐渐显示 ActionBar 库 |\n| 84. [AndroidImageSlider](https://github.com/daimajia/AndroidImageSlider) | AndroidImageSlider 库开发者是代码家, 该库是为 Banner 图片滑动提供多种动画效果, 还可以轻易为 Banner 加载网络图片 |\n| 85. [SystemBarTint](https://github.com/jgilfelt/SystemBarTint) | SystemBarTint 是一个实现沉浸式状态栏库, 适用于 Android 系统 4.4 其以上的版本 |\n| 86. [android-menudrawer](https://github.com/SimonVT/android-menudrawer) | MenuDrawer 是一款滑出式菜单库, 通过拖动屏幕边缘滑出菜单, 支持屏幕上下左右划出, 支持当前 View 处于上下层, 支持 Windows 边缘, ListView 边缘, ViewPager 变化划出菜单等 |\n| 87. [RoundedImageView](https://github.com/vinc3m1/RoundedImageView) | RoundedImageView 一个快速支持图片圆角显示效果的库, 该库特点是能快速加载, 为了提高加载速度, 该库不用创建原始位图的副本, 不使用 clipPath, 不使用 setXfermode 裁剪的位图等方式来实现 ImageView 圆角, 使用也非常简单 |\n| 88. [afinal](https://github.com/yangfuhai/afinal) | Afinal 是一个 android 的 sqlite orm 和 ioc 框架, 同时封装了 android 中的 http 框架, 使其更加简单易用, 使用 finalBitmap, 无需考虑 bitmap 在 android 中加载的时候 oom 的问题和快速滑动的时候图片加载位置错位等问题, Afinal 的宗旨是简洁, 快速, 约定大于配置的方式, 尽量一行代码完成所有事情 |\n| 89. [android-pulltorefresh(不建议使用)](https://github.com/johannilsson/android-pulltorefresh) | 另一个下拉刷新库, 但是该库已经停止维护, 因此不建议使用, 推荐使用 [Android-Ultra-Pull-To-Refresh](https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh) |\n| 90. [Bolts-Android](https://github.com/BoltsFramework/Bolts-Android) | Bolts 是一款底层类库集合, 在后台实现异步操作, 并提供接口反馈当前异步执行的程度 (可以通过接口实现UI进度更新), 最后反馈执行的结果给UI主线程, 与AsyncTask比较: (1)使用的是无大小限制的线程池; (2)任务可组合可级联,防止了代码耦合 |\n| 91. [NumberProgressBar](https://github.com/daimajia/NumberProgressBar) | NumberProgressBar 开发者是代码家, 这是一个带简约性感数字显示的进度条库, 使用非常简单方便 |\n| 92. [SwipeBackLayout](https://github.com/ikew0ng/SwipeBackLayout) | SwipeBackLayout 是一个支持屏幕上下左右滑动返回上层 Activity, 关闭当前 Activity, 类似简书 App |\n| 93. [android-gif-drawable](https://github.com/koral--/android-gif-drawable) | 一个支持 gif 显示的 view, 用 jni 实现的, 编译生成 so 库后直接 xml 定义 view 即可, 简单易用 |\n| 94. [VitamioBundle](https://github.com/yixia/VitamioBundle) | Vitamio 是一款 Android 与 iOS 平台上的全能多媒体开发框架, 特点：(1) 全面支持硬件解码与 GPU 渲染, (2) 能够流畅播放 720P 甚至 1080P 高清 MKV, FLV, MP4, MOV, TS, RMVB 等常见格式的视频, (3) 在 Android 与 iOS 上跨平台支持 MMS, RTSP, RTMP, HLS(m3u8)等常见的多种视频流媒体协议, 包括点播与直播 |\n| 95. [SmartTabLayout](https://github.com/ogaclejapan/SmartTabLayout) | SmartTabLayout 是一个自定义的 Tab title strip, 基于 Google Samples 中的 android-SlidingTabBasic 项目, 滑动时 Indicator 可平滑过渡 |\n| 96. [uCrop](https://github.com/Yalantis/uCrop) | uCrop 是[Yalantis](https://yalantis.com/) 组织开源的图片裁剪库, 支持缩放, 旋转图片, 支持各种比例的裁剪框, 非常强大的一个图片裁剪库 |\n| 97. [android-crop](https://github.com/jdamcd/android-crop) | 又一个图片裁剪库, 向下兼容到 Api 10, 个人感觉这个库并没有比上面介绍的 uCrop 强大 |\n| 98. [HoloEveryWhere](https://github.com/Prototik/HoloEverywhere) | HoloEveryWhere 是一套 Android 开发库, 提供了全套 Holo Style 控件, 它的外观与功能和标准 Holo Style 控件基本相同, 唯一不同的是它可以运行在低于 4.0 版本的 Android 系统上 |\n| 99. [AVLoadingIndicatorView](https://github.com/81813780/AVLoadingIndicatorView) | AVLoadingIndicatorView 库含有各种各样漂亮的加载动画效果, 使用起来也非常简单, 和平时使用 ProgressBar 一样 |\n| 00. [sweet-alert-dialog](https://github.com/pedant/sweet-alert-dialog) | Android 版的 SweetAlert, 清新文艺, 快意灵动的甜心弹框, 灵感来源于 JS 版 [SweetAlert](http://t4t5.github.io/sweetalert/) |\n\n## 粗计\n\n#### Square 公司占有 7 席\n\n| 项目名称                                     | 排名   |\n| ---------------------------------------- | ---- |\n| [Retrofit](https://github.com/square/retrofit) | 4    |\n| [OkHttp](https://github.com/square/okhttp) | 5    |\n| [Picasso](https://github.com/square/picasso) | 7    |\n| [LeakCanary](https://github.com/square/leakcanary) | 13   |\n| [Dagger](https://github.com/square/dagger) | 29   |\n| [Otto](https://github.com/square/otto)   | 44   |\n| [TimesSquare](https://github.com/square/android-times-square) | 79   |\n\n#### FaceBook 公司占有 4 席\n\n| 项目名称                                     | 排名   |\n| ---------------------------------------- | ---- |\n| [React Native](https://github.com/facebook/react-native) | 1    |\n| [Fresco](https://github.com/facebook/fresco) | 11   |\n| [Stetho](https://github.com/facebook/stetho) | 38   |\n| [Rebound](https://github.com/facebook/rebound) | 62   |\n\n#### JakeWharton 大神占有 5 席\n\n| 项目名称                                     | 排名   |\n| ---------------------------------------- | ---- |\n| [Butter Knife](https://github.com/JakeWharton/butterknife) | 14   |\n| [ActionBarSherlock](https://github.com/JakeWharton/ActionBarSherlock) | 16   |\n| [ViewPagerIndicator](https://github.com/JakeWharton/ViewPagerIndicator) | 18   |\n| [NineOldAndroids](https://github.com/JakeWharton/NineOldAndroids) | 55   |\n| [Hugo](https://github.com/JakeWharton/hugo) | 73   |\n\n#### 代码家大神占有 4 席\n\n| 项目名称                                     | 排名   |\n| ---------------------------------------- | ---- |\n| [AndroidSwipeLayout](https://github.com/daimajia/AndroidSwipeLayout) | 28   |\n| [AndroidViewAnimations](https://github.com/daimajia/AndroidViewAnimations) | 32   |\n| [AndroidImageSlide](https://github.com/daimajia/AndroidImageSlider) | 84   |\n| [NumberProgressBar](https://github.com/daimajia/NumberProgressBar) | 91   |\n\n## 感谢\n\n感谢所有为开源而辛辛苦苦付出努力的人, 相信有你们 Android 会发展的更加美好, 让我们一起为他们辛辛苦苦付出的努力鼓掌吧!!\n","source":"_posts/GitHub-Android-Libraries-Top-100-简介 - 副本.md","raw":"---\ntitle: GitHub Android Libraries Top 100 简介\ndate: 2017-04-11 17:50:25\ntags:\n    - Android\n    - 框架\ncategories:\n    - Android\n---\n\n# GitHub Android Libraries Top 100 简介\n\n<font color=\"#ff0000\">本文原文链接地址https://github.com/Freelander/Android_Data/blob/master/Android-Librarys-Top-100.md</font>\n\n\n\n\n本项目主要对目前 GitHub 上排名前 100 的 Android 开源库进行简单的介绍, 至于排名完全是根据 GitHub 搜索 Java 语言选择 (Best Match) 得到的结果, 然后过滤了跟 Android 不相关的项目, 所以排名并不具备任何官方效力, 仅供参考学习, 方便初学者快速了解当前一些流行的 Android 开源库.\n\n> iOS 版本的在此: https://github.com/Aufree/trip-to-iOS/blob/master/Top-100.md\n\n>感谢 [@GitHubDaily](http://weibo.com/GitHubDaily) 与 [@Android 开发日常](http://weibo.com/AndroidDevDaily) 的大力支持, 以及 [@stormzhang](https://github.com/stormzhang) 的指点\n\n**若有任何疑问可通过[邮件](mailto:huanggaojun13@gmail.com)或[微博](http://weibo.com/gaojunhuang)联系我**\n\n| 项目名称                                     | 项目简介                                     |\n| ---------------------------------------- | ---------------------------------------- |\n| 1. [react-native](https://github.com/facebook/react-native) | 这个是 Facebook 在 React.js Conf 2015 大会上推出的基于 JavaScript 的开源框架 React Native, 该框架结合了 Web 应用和 Native 应用的优势, 可以使用 JavaScript 来开发 iOS 和 Android 原生应用 |\n| 2.[Android-Universal-Image-Loader](https://github.com/nostra13/Android-Universal-Image-Loader) | ImageLoader 是最早开源的 Android 图片缓存库, 强大的缓存机制, 早期被广泛 Android 应用使用, 至今仍然有很多 Android 开发者在使用 |\n| 3. [RxJava](https://github.com/ReactiveX/RxJava) | RxJava 是一个在 Java VM 上使用可观测的序列来组成异步的, 基于事件的程序的库, 简单来说它就是一个实现异步操作的库, RxJava 的优点在于一个词 \"简洁\", 使用它就算你程序逻辑有多么复杂, 它依然能够保持简洁易懂 |\n| 4. [retrofit](https://github.com/square/retrofit) | Retrofit 是 Square 公司出品的 HTTP 请求库, 同时是 Square 是最早开源项目之一, Retrofit 是目前 Android 最流行的 Http Client 库之一, 目前版本是 Retrofit2.0 Beta4, 越来越多 Android 开发者开始使用这个请求库了 |\n| 5. [okhttp](https://github.com/square/okhttp) | OkHttp 是 Square 公司出品的 HTTP 另一个请求库, Google 不推荐人们使用 HttpClient, 可是 HttpURLConnection 实在是太难用了, 因此很多人使用了 OkHttp 来解决这问题, 据说 Android4.4 的源码中可以看到 HttpURLConnection 已经替换成 OkHttp 实现呢 |\n| 6. [SlidingMenu(不建议使用)](https://github.com/jfeinstein10/SlidingMenu) | 一个侧滑菜单开源库, 在 Google 自己原生态的侧滑菜单 NavigationDrawer 没有出现之前, 这个库就已经被广泛使用, 可是到现在这个库已经被放弃了 |\n| 7. [picasso](https://github.com/square/picasso) | Picasso 是 Square 公司出品的一款图片缓存库, 主导者是 JakeWharton 大神 |\n| 8. [android-best-practices](https://github.com/futurice/android-best-practices) | Android 开发最佳实践, 里面所介绍的经验都是来自于 Futurice 公司 Android 开发者, 介绍内容有 Android 开发规范, 架构, 布局技巧, 以及使用一些有助于快速开发相关工具等等, 非常适合新手去学习 |\n| 9. [EventBus](https://github.com/greenrobot/EventBus) | EventBus 是 Android 事件管理总线, 使用它可以替带 Android BroadCast, BroadCastReceiver, Handler 在 Activity, Fragment, Service, 线程之间传递消息, 大大简化了事件传递逻辑 |\n| 10. [android-async-http](https://github.com/loopj/android-async-http) | Android-Async-Http 是 Android 一款老牌异步请求库, 专门对 Android 在 Apache 的 HttpClient 基础上构建的异步 http 连接, 该库有很多特征, 例如: 库的 size 小, 支持文件上传不需使用第三方库支持, 内部使用线程池来处理并发, 等等 |\n| 11. [fresco](https://github.com/facebook/fresco) | Fresco 是 FaceBook 公司出品的一款图片缓存库, Fresco 是一个强大的图片加载组件, 支持加载 Gif 图和 WebP 格式, 支持 Android2.3(API level 9) 及其以上系统, Fresco 中设计了 Image pipeline 和 Drawees 两个模块各施其职, 使得图片完美加载出来, 想知道更多 image pipeline 和 Drawees 有关于它的特性, 可以到它[官方平台](http://fresco-cn.org/)看介绍 |\n| 12. [zxing](https://github.com/zxing/zxing) | ZXing 是二维码领域中名气最大的开源项目, 它提供了多个平台的二维码/条形码扫描解决方案, 拥有扫描快, 识别率高, 使用简单等特点 |\n| 13. [leakcanary](https://github.com/square/leakcanary) | LeakCanary 是 Square 公司出的一款检测内存泄露工具, 该工具能帮助你在开发阶段方便的检测出内存泄露的问题, 使用起来非常简单方便 |\n| 14. [butterknife](https://github.com/JakeWharton/butterknife) | 由 JakeWharton 大神开发出来的, ButterKnife 是 View 注入框架, 使用它为了简写很多 findViewById 代码, 同时还支持 View 的一些事件处理函数 |\n| 15. [MPAndroidChart](https://github.com/PhilJay/MPAndroidChart) | MPAndroidChart 是一款强大的 Android 图表库, 支持各种各样图表显示, 能想到的图表样式这里几乎都有, 图表还支持选择, 拖放和缩放动画效果 |\n| 16. [ActionBarSherlock (不建议使用)](https://github.com/JakeWharton/ActionBarSherlock) | ActionBarSherlock 这个库是 JakeWharton 大神开发出来支持 Android3.0 以下版本的, 后来慢慢的 Google 也提供了 AppCompat 库来支持 Android3.0 以下版本使用 ActionBar, 因此作者不建议我们再使用这个库了 |\n| 17. [androidannotations](https://github.com/excilys/androidannotations) | AndroidAnnotations 是一个能够让你快速进行 Android 开发的开源框架, 它能让你专注于真正重要的地方, 使代码更加精简, 使项目更加容易维护, 它的目标就是 \"Fast Android Development.Easy maintainance\" |\n| 18. [ViewPagerIndicator](https://github.com/JakeWharton/ViewPagerIndicator) | 由 JakeWharton 大神开发出来的一个 ViewPager 指示器, 使用起来简单方便, 可高度定制, 开发出各种各样动画效果 |\n| 19. [glide](https://github.com/bumptech/glide) | Glide 是 Google 员工的开源项目, 广泛应用于 Google 一些 App 上, 在2014年 Google I/O 大会上被推荐使用, Glide 和 Picasso 被人拿来比较研究过, Glide 与 Picasso 有 90% 的相似度, 但在一些细节上还是有点区别的, 各有各优缺点看君选择 |\n| 20. [HomeMirror](https://github.com/HannahMitt/HomeMirror) | 开发者是由一名程序媛 Hannah Mittelstaedt , HomeMirror 是一款 Android 镜子应用, 目前它能实现日期, 时间, 天气, 生日信息, 事件提醒器, 骑车天气的推荐, 股票信息, XKCD 漫画网站的新帖等等 |\n| 21. [Android-PullToRefresh(不建议使用)](https://github.com/chrisbanes/Android-PullToRefresh) | 一个强大的拉动刷新开源项目, 支持各种控件下拉刷新, ListView, ViewPager, WebView, ExpandableListView, GridView, ScrollView, Horizontal ScrollView, Fragment 上下左右拉动刷新, 不过现在这个项目已经停止维护更新了, 推荐使用 [Android-Ultra-Pull-To-Refresh](https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh) |\n| 22. [MaterialDesignLibrary](https://github.com/navasmdc/MaterialDesignLibrary) | 这个库控件都是遵循了 Google Material Design 设计规范开发出来, 例如有: Flat Button, Rectangle Button, CheckBox, Switch, Progress bar circular indeterminate 等等 |\n| 23. [PhotoView](https://github.com/chrisbanes/PhotoView) | PhotoView 是 ImageView 的子类, 支持所有 ImageView 的源生行为, 例如: 支持 Pinch 手势自由缩放, 支持双击放大/还原, 支持平滑滚动等等, 并且非常方便的与 ImageLoader/Picasso 之类的网络图片读取库集成使用, 还方便的与 ViewPager 等同样支持滑动手势的控件集成 |\n| 24. [RxAndroid](https://github.com/ReactiveX/RxAndroid) | 由 JakeWharton 大神主导开发的项目, RxAndroid 是 RxJava 的一个针对 Android 平台的扩展, 主要用于 Android 开发 |\n| 25. [material-dialogs](https://github.com/afollestad/material-dialogs) | Material Dialogs 是一个可高度定制易用, 符合 Material Design 风格的 Dialogs, 兼容 Android API8 以上版本, 个人使用感觉它完全可替代 Android 原生那个, 比原生那个更加简单易用 |\n| 26.[Android-ObservableScrollView](https://github.com/ksoichiro/Android-ObservableScrollView) | ObservableScrollView 是一款用于在滚动视图中观测滚动事件的 Android 库, 它能够轻而易举地与 Android 5.0 Lollipop 引进的工具栏 (Toolbar) 进行交互, 还可以帮助开发者实现拥有 Material Design 应用视觉体验的界面外观, 支持ListView, ScrollView, WebView, RecyclerView, GridView组件 |\n| 27. [Android-Bootstrap](https://github.com/Bearded-Hen/Android-Bootstrap) | Android 版的 Bootstrap, 利用这个库能够实现很多 Bootstrap 样式风格, 之前有学过 Html 的人就知道 Bootstrap 是什么玩意啦 |\n| 28. [AndroidSwipeLayout](https://github.com/daimajia/AndroidSwipeLayout) | 开发者是代码家, AndroidSwipeLayout 是一个支持ListView, GridView, ViewGroup等等左右上下滑动出操作菜单, 类似 qq 消息列表向左滑动显示出多某条信息的操作菜单 |\n| 29. [dagger](https://github.com/square/dagger) | Dagger 是 Square 公司出品的一个针对 Android 和 Java 的快速依赖注入器, 能够有效减少你敲代码量 |\n| 30. [ListViewAnimations](https://github.com/nhaarman/ListViewAnimations) | 一个轻轻松松给 Android ListView 添加动画效果的库, 支持的动画有: Alpha, SwingRightIn, SwingLeftIn, SwingBottomIn, SwingRightIn and ScaleIn等等, 使用它能很容易就实现帅爆的效果 |\n| 31. [PagerSlidingTabStrip(不建议使用)](https://github.com/astuetz/PagerSlidingTabStrip) | PagerSlidingTabStrip 是一个给 Android ViewPager添加上 ViewPager 滑动指示器, 从 GitHub 上面看, 这个库似乎没有人在维护了, 因此不建议使用, 可使用 [SmartTabLayout](https://github.com/ogaclejapan/SmartTabLayout) 来代替 |\n| 32. [AndroidViewAnimations](https://github.com/daimajia/AndroidViewAnimations) | 开发者是代码家, 这个库实现很多很酷炫的 Android 动画, 动画效果是借鉴 Animate.css 来实现的, 非常酷, 而且这个使用起来也是非常简单 |\n| 33. [AndroidSlidingUpPanel](https://github.com/umano/AndroidSlidingUpPanel) | AndroidSlidingUpPanel 是一个上拉面板, 就是向上滑动的时候往上飞出一个显示面板控件, 该库效果在 Google Music, Google Maps and Rdio等 App 应用到 |\n| 34. [MaterialDrawer](https://github.com/mikepenz/MaterialDrawer) | MaterialDrawer 是一个类似 Google 官方 NavigationView 侧滑显示控件, 个人认为 NavigationView 并没有 MaterialDrawer 实用, 因为 NavigationView 自由度不是很好, 很多都写死了不可以自由定义布局, 而 MaterialDrawer 能够实现跟 NavigationView 一样的效果, 同时还支持自定义效果, 自由度非常高 |\n| 35. [Material-Animations](https://github.com/lgvalle/Material-Animations) | Material-Animations 是一个很好过渡动画库, 可以应用于 Activity 与 Activity 之间的跳转, Fragment 与 Fragment 之间的跳转, 以及各个 View 变化前后的过渡动画 |\n| 36. [MaterialViewPager](https://github.com/florent37/MaterialViewPager) | 一个简单易用 Material Design 风格的 ViewPager 库   |\n| 37. [ion](https://github.com/koush/ion)  | ion 是一个让 Android 的网络操作变得极其简单, 支持异步获取和处理JSON, 支持 Android 文件下载 (同时支持下载进度条绑定), 支持安全链接和代理 |\n| 38. [stetho](https://github.com/facebook/stetho) | Stetho是 Facebook 出品的一个强大的 Android 调试工具,使用该工具你可以在 Chrome Developer Tools查看App的布局, 网络请求(仅限使用Volley, okhttp的网络请求库), sqlite, preference, 一切都是可视化的操作,无须自己在去使用adb, 也不需要root你的设备 |\n| 39. [fastjson](https://github.com/alibaba/fastjson) | Fastjson 是一个 Java 语言编写的高性能功能完善的 JSON 库. 它采用一种“假定有序快速匹配”的算法, 把 JSON Parse的性能提升到极致, 是目前Java语言中最快的JSON库. Fastjson接口简单易用, 已经被广泛使用在缓存序列化, 协议交互, Web输出, Android客户端等多种应用场景 |\n| 40. [cardslib (不建议使用)](https://github.com/gabrielemariotti/cardslib) | Cardslib 是早期由 Gabriele Mariotti 开发的一个为开发者方便实现各种 Card UI 的 Android 开源代码库, 后来 Google 官方提供自己封装了 CardView 在 v7 包下, 使用 Google 官方的可以完全替代了这个库, 因此这个也被弃用了 |\n| 41. [Android-Ultra-Pull-To-Refresh](https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh) | 开发者是廖祜秋, 这个是一个非常强大的下拉刷新库, 继承 ViewGroup 可以包含任何 View, 功能甚至比 SwipeRefreshLayout 强大, 使用起来也非常容易, 还可以自由定制自己的 UI 样式 |\n| 42. [greenDAO](https://github.com/greenrobot/greenDAO) | greenDAO 是一个可以帮助 Android 开发者快速将 Java 对象映射到 SQLite 数据库的表单中的 ORM解决方案, 通过使用一个简单的面向对象 API, 开发者可以对 Java 对象进行存储, 更新, 删除和查询, greenDAO 相对 OrmLite, AndrORM 这两个 ORM 开源库, 性能是最高的 |\n| 43. [AndroidStaggeredGrid](https://github.com/etsy/AndroidStaggeredGrid) | AndroidStaggeredGrid 是一个支持多列并且每一行的 item 大小不一, 交错排列的 GridView, 就是实现瀑布流样式效果, 目前该库已经被弃用了, 开发者建议我们使用 Google 官方控件 RecyleView 中的 StaggeredGridLayoutManager 布局来实现瀑布流效果 |\n| 44. [otto](https://github.com/square/otto) | Otto 是 Square 公司出的一个事件库 (pub/sub 模式), 用来简化应用程序组件之间的通讯, otto 修改自 Google 的 Guava 库, 专门为 Android 平台进行了优化, 与上面介绍的 EventBus 相比, 两个库各有各的优点, 完全取决于我们自己项目的需求来选择它们哪一个 |\n| 45. [xUtils](https://github.com/wyouflf/xUtils) | xUtils 是一个快速开发框架, 里面包含 DbUtils, ViewUtils, HttpUtils, BitmapUtils 四大模块, 可用于快速开发, 支持大文件上传, 拥有更加灵活的 ORM, 最低兼容 Android 2.2 |\n| 46. [realm-java](https://github.com/realm/realm-java) | Realm 一个轻量的 Android 版本的数据存储库, 比 Android 原生系统的 SQLite 更加简洁快速对数据进行操作 |\n| 47.[Android-CleanArchitecture](https://github.com/android10/Android-CleanArchitecture) | CleanArchitecture 是一个非常典型使用 MVP 架构的项目, 大家如果还没有理解 MVP 架构的可以看看这个项目 |\n| 48. [StickyListHeaders](https://github.com/emilsjolander/StickyListHeaders) | StickyListHeaders 是一个实现能够固定在屏幕顶部的ListView Section Header库, 就是当前 section 的 header 固定在屏幕顶部, 当滑动到其他 section 时, 其他 section 的 header 会代替之前的 section 的 header, 固定到屏幕顶部, 类似于 Android4.0 的手机通讯录的效果 |\n| 49. [AppIntro](https://github.com/PaoloRotolo/AppIntro) | AppIntro 是一个让人轻松快速搭建漂亮酷炫的引导页库            |\n| 50. [ActiveAndroid](https://github.com/pardom/ActiveAndroid) | ActiveAndroid 是采用Rails中的 [Active Record](http://en.wikipedia.org/wiki/Object-relational_mapping)架构模式设计的适用于 Android 平台的轻量级 ORM 架构, 几乎可以不用写任何 SQL 代码实现快速开发 |\n| 51. [android-volley](https://github.com/mcxiaoke/android-volley) | Volley 是谷歌官方开发团队在 2013 年 Google I/O 大会推出的一个新的网络通信框架, 这个框架把 AsyncHttpClient 和 Universal-Image-Loader 的优点集于了一身,既可以像AsyncHttpClient 一样非常简单地进行 HTTP 通信,也可以像 Universal-Image-Loader 一样轻松加载网络上的图片, 这个库并不是官方的, 只是托管同步在 Maven,  官方只提供的 Jar 包 |\n| 52. [twoway-view](https://github.com/lucasr/twoway-view) | TwoWayView 是简化 RecyclerView 开发的一个库, 可以在其 Base LayoutManager 基础上构建各种各样的布局, 该库内置了几个常用布局 List, Grid, Staggered Grid,Spannable Grid |\n| 53. [ShowcaseView](https://github.com/amlcurran/ShowcaseView) | ShowcaseView 是一个非常适合用于对用户进行第一次使用进行指导的库,使用起来非常简单还可以自定义样式 |\n| 54. [Calligraphy](https://github.com/chrisjenx/Calligraphy) | Calligraphy 是一个用来简化 Android 应用使用自定义字体的类库, 该类库会自动查找应用中的 TextView 并设置其使用的字体 |\n| 55. [NineOldAndroids](https://github.com/JakeWharton/NineOldAndroids) | NineOldAndroids 由 JakeWharton 大神开发的一个向下兼容的动画库, 主要是使低于API 11的系统也能够使用 View 的属性动画, 不过现在 JakeWharton 大神已经不推荐使用该库, 而是推荐我们使用官方封装在 Support 库里面的动画 |\n| 56. [android-floating-action-button](https://github.com/futuresimple/android-floating-action-button) | FloatingActionButton 是一个悬浮操作按钮, 官方在 Support Design 包下也有封装一个类似这个库效果的 FloatingActionButton, 值得说明的是这个库是早在官方封装之前就存在的, 个人感觉这个库比官方那个更加好用 |\n| 57. [CircleImageView](https://github.com/hdodenhof/CircleImageView) | CircleImageView 是一个轻松帮你实现圆形效果 ImageView 图片库, CircleImageView 是基于 ImageView 扩展出来, 因此它拥有 ImageView 控件所有属性, 简单易用值得你使用的库 |\n| 58. [material](https://github.com/rey5137/material) | Material 是将 Material Design 风格控件封装在该库当中, 目前封装有Progress, Button, Switch, Slider, Spinner, Text Field, TabPageIndicator, SnackBar, Dialog, BottomSheetDialog, Dynamic theme |\n| 59. [ActionBar-PullToRefresh](https://github.com/chrisbanes/ActionBar-PullToRefresh) | ActionBar-PullToRefresh 是一个下拉刷新, 下拉刷新时在 ActionBar 出现加载中提示的库 |\n| 60. [FloatingActionButton](https://github.com/makovkastar/FloatingActionButton) | 又一个悬浮操作按钮库, 该库添加支持监听滑滚动事件, 当向下滑时按钮隐藏, 向上滑时按钮显示, 还有动画效果, 支持监听 ListView, ScrollView, RecylerView |\n| 61. [AndroidAsync](https://github.com/koush/AndroidAsync) | AndroidAsync 是一款基于 NIO 的低端 Android 异步 socket, http (client+server), websocket 和 socket.io 网络通信协议类库 |\n| 62. [rebound](https://github.com/facebook/rebound) | Rebound 是 Facebook 推出的一个弹性动画库, 可以让动画看起来真实自然, 像真实世界的物理运动, 带有力的效果, 使用的参数则是 Facebook 的 origami 中使用的 |\n| 63. [android-common](https://github.com/Trinea/android-common) | android-common-lib 是 Trinea 大神收集的一些开发通用的缓存, 公共 View 以及一些常用工具类 |\n| 64. [RippleEffect](https://github.com/traex/RippleEffect) | RippleEffect 是一个实现在 Android 任何组件点击出现 Material Design 的波纹效果, 向下兼容到 Android API9 |\n| 65. [SmoothProgressBar](https://github.com/castorflex/SmoothProgressBar) | SmoothProgressBar 是一个帮你的 App 方便实现可定制, 平滑动画的水平滚动进度条库 |\n| 66. [recyclerview-animators](https://github.com/wasabeef/recyclerview-animators) | RecyclerView Animators 是一个对 Recycler 控件的 Item 添加以及删除增加动画效果, 动画效果有Scale, Fade, Flip, Slide 里面各种各样效果 |\n| 67. [circular-progress-button](https://github.com/dmytrodanylyk/circular-progress-button) | 一个带进度显示的 Button, 效果和动画做的都非常赞             |\n| 68. [DroidPlugin](https://github.com/Qihoo360/DroidPlugin) | DroidPlugin 是 360 手机助手在 Android 系统上实现了一种新的插件机制: 它可以在无需安装, 修改的情况下运行APK文件, 此机制对改进大型APP的架构, 实现多团队协作开发具有一定的好处 |\n| 69. [dynamic-load-apk](https://github.com/singwhatiwanna/dynamic-load-apk) | 开发者是 singwhatiwanna(任玉刚), 是《Android 开发艺术探索》书籍的作者, 这个是作者联合另两位开发者啸(时之沙)和宋思宇花了几个月时间研究出来的 Apk 动态加载框架, 想了解更多关于这框架可到作者博客看 [这篇文章](http://blog.csdn.net/singwhatiwanna/article/details/39937639) 有详细介绍 |\n| 70. [ExoPlayer](https://github.com/google/ExoPlayer) | ExoPlayer 是Google 开发团队开源出来的一个媒体播放库, 比 Android 框架原生的 MediaPlayer 拥有更多优点支持动态的自适应流 HTTP(DASH) 和 平滑流, 支持高级的HLS特性, 支持自定义和扩治你的使用场景等等 |\n| 71. [Crouton (不建议使用)](https://github.com/keyboardsurfer/Crouton) | Crouton 是一个显示提示信息的显示工具类, 可以用来代替 Toast, 默认显示在窗口的顶部, 可以按队列一个接着一个显示, 不过该库已经被弃用, 不推荐使用 |\n| 72. [robospice](https://github.com/stephanenicolas/robospice) | RoboSpice 是一个使你建立异步的长时间的运行任务异常轻松的一个网络库，在网络请求，缓存支持，和提供开箱即用的 rest 请求方面尤为强大 |\n| 73. [hugo](https://github.com/JakeWharton/hugo) | Hugo 是 JakeWharton 大神推出的一个用于打印 Log, hugo 是基于注解被调用的, 引入相关依赖后, 在方法上加上 @DebugLog 即可输出 Log, 使用非常简单 |\n| 74. [async-http-client](https://github.com/AsyncHttpClient/async-http-client) | AsyncHttpClient 是又一款 Android 异步请求库, 该库支持 WebSocket 协议, 使用起来也比较简单易用 |\n| 75. [UltimateRecyclerView](https://github.com/cymcsg/UltimateRecyclerView) | UltimateRecyclerView 是一个功能强大的 RecyclerView(advanced and flexible version of ListView), 包括了下拉刷新, 加载更多, 多种动画, 空数据提示, 拖动排序, 视差处理, 工具栏渐变, 滑动删除, 自定义floating button, 多种刷新效果, scrollbar, sticky header, 多 layout 支持等等元素, 而且使用起来跟 RecyclerView 一样的方便 |\n| 76. [MaterialEditText](https://github.com/rengwuxian/MaterialEditText) | MaterialEditText 是就职于 Flipboard 的员工 [扔物线](https://www.zhihu.com/people/rengwuxian) 开发的, 在 AppCompat v21 中也提供了 Material Design 的控件 EditText, 可是由于比较难用, 没有提供设置颜色的 Api, 于是就产生这个第三方库 |\n| 77. [Side-Menu.Android](https://github.com/Yalantis/Side-Menu.Android) | Side Menu 是 [Yalantis](https://yalantis.com/) 组织开源出来, 该组织因开源出一些动画很棒的开源库为大家所熟知该库是其中一个, 该库是提供翻页动画效果的侧边菜单, 动画体验超赞的 |\n| 78. [drag-sort-listview](https://github.com/bauerca/drag-sort-listview) | DragSortListView 是一个可以实现拖动排序, 滑动删除的 listview 控件, 注意的是作者对该库已经放弃维护更新了, 不过感兴趣的人可以去研究一下 |\n| 79. [android-times-square](https://github.com/square/android-times-square) | TimesSquare 是 Square 公司出品的一款显示日历选择日期的控件, 可以让用户选择多个日期 |\n| 80. [GreenDroid(不建议使用)](https://github.com/cyrilmottier/GreenDroid) | GreenDroid 是一个封装好的 Android UI 界面库, 不过该库已经被弃用了, 不建议使用 |\n| 81. [logger](https://github.com/orhanobut/logger) | Logger 是一个简单, 漂亮, 强大 Android 打印日志库       |\n| 82. [acra](https://github.com/ACRA/acra) | Acra 是一个能够让 Android 应用自动将崩溃报告以谷歌文档电子表的形式进行发送的库, 旨在当应用发生崩溃或出现错误行为时, 开发者可以获取到相关数据 |\n| 83. [FadingActionBar](https://github.com/ManuelPeinado/FadingActionBar) | FadingActionBar 是一个支持 ListView, ScrollView, WebView 向下滚动时逐渐显示 ActionBar 库 |\n| 84. [AndroidImageSlider](https://github.com/daimajia/AndroidImageSlider) | AndroidImageSlider 库开发者是代码家, 该库是为 Banner 图片滑动提供多种动画效果, 还可以轻易为 Banner 加载网络图片 |\n| 85. [SystemBarTint](https://github.com/jgilfelt/SystemBarTint) | SystemBarTint 是一个实现沉浸式状态栏库, 适用于 Android 系统 4.4 其以上的版本 |\n| 86. [android-menudrawer](https://github.com/SimonVT/android-menudrawer) | MenuDrawer 是一款滑出式菜单库, 通过拖动屏幕边缘滑出菜单, 支持屏幕上下左右划出, 支持当前 View 处于上下层, 支持 Windows 边缘, ListView 边缘, ViewPager 变化划出菜单等 |\n| 87. [RoundedImageView](https://github.com/vinc3m1/RoundedImageView) | RoundedImageView 一个快速支持图片圆角显示效果的库, 该库特点是能快速加载, 为了提高加载速度, 该库不用创建原始位图的副本, 不使用 clipPath, 不使用 setXfermode 裁剪的位图等方式来实现 ImageView 圆角, 使用也非常简单 |\n| 88. [afinal](https://github.com/yangfuhai/afinal) | Afinal 是一个 android 的 sqlite orm 和 ioc 框架, 同时封装了 android 中的 http 框架, 使其更加简单易用, 使用 finalBitmap, 无需考虑 bitmap 在 android 中加载的时候 oom 的问题和快速滑动的时候图片加载位置错位等问题, Afinal 的宗旨是简洁, 快速, 约定大于配置的方式, 尽量一行代码完成所有事情 |\n| 89. [android-pulltorefresh(不建议使用)](https://github.com/johannilsson/android-pulltorefresh) | 另一个下拉刷新库, 但是该库已经停止维护, 因此不建议使用, 推荐使用 [Android-Ultra-Pull-To-Refresh](https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh) |\n| 90. [Bolts-Android](https://github.com/BoltsFramework/Bolts-Android) | Bolts 是一款底层类库集合, 在后台实现异步操作, 并提供接口反馈当前异步执行的程度 (可以通过接口实现UI进度更新), 最后反馈执行的结果给UI主线程, 与AsyncTask比较: (1)使用的是无大小限制的线程池; (2)任务可组合可级联,防止了代码耦合 |\n| 91. [NumberProgressBar](https://github.com/daimajia/NumberProgressBar) | NumberProgressBar 开发者是代码家, 这是一个带简约性感数字显示的进度条库, 使用非常简单方便 |\n| 92. [SwipeBackLayout](https://github.com/ikew0ng/SwipeBackLayout) | SwipeBackLayout 是一个支持屏幕上下左右滑动返回上层 Activity, 关闭当前 Activity, 类似简书 App |\n| 93. [android-gif-drawable](https://github.com/koral--/android-gif-drawable) | 一个支持 gif 显示的 view, 用 jni 实现的, 编译生成 so 库后直接 xml 定义 view 即可, 简单易用 |\n| 94. [VitamioBundle](https://github.com/yixia/VitamioBundle) | Vitamio 是一款 Android 与 iOS 平台上的全能多媒体开发框架, 特点：(1) 全面支持硬件解码与 GPU 渲染, (2) 能够流畅播放 720P 甚至 1080P 高清 MKV, FLV, MP4, MOV, TS, RMVB 等常见格式的视频, (3) 在 Android 与 iOS 上跨平台支持 MMS, RTSP, RTMP, HLS(m3u8)等常见的多种视频流媒体协议, 包括点播与直播 |\n| 95. [SmartTabLayout](https://github.com/ogaclejapan/SmartTabLayout) | SmartTabLayout 是一个自定义的 Tab title strip, 基于 Google Samples 中的 android-SlidingTabBasic 项目, 滑动时 Indicator 可平滑过渡 |\n| 96. [uCrop](https://github.com/Yalantis/uCrop) | uCrop 是[Yalantis](https://yalantis.com/) 组织开源的图片裁剪库, 支持缩放, 旋转图片, 支持各种比例的裁剪框, 非常强大的一个图片裁剪库 |\n| 97. [android-crop](https://github.com/jdamcd/android-crop) | 又一个图片裁剪库, 向下兼容到 Api 10, 个人感觉这个库并没有比上面介绍的 uCrop 强大 |\n| 98. [HoloEveryWhere](https://github.com/Prototik/HoloEverywhere) | HoloEveryWhere 是一套 Android 开发库, 提供了全套 Holo Style 控件, 它的外观与功能和标准 Holo Style 控件基本相同, 唯一不同的是它可以运行在低于 4.0 版本的 Android 系统上 |\n| 99. [AVLoadingIndicatorView](https://github.com/81813780/AVLoadingIndicatorView) | AVLoadingIndicatorView 库含有各种各样漂亮的加载动画效果, 使用起来也非常简单, 和平时使用 ProgressBar 一样 |\n| 00. [sweet-alert-dialog](https://github.com/pedant/sweet-alert-dialog) | Android 版的 SweetAlert, 清新文艺, 快意灵动的甜心弹框, 灵感来源于 JS 版 [SweetAlert](http://t4t5.github.io/sweetalert/) |\n\n## 粗计\n\n#### Square 公司占有 7 席\n\n| 项目名称                                     | 排名   |\n| ---------------------------------------- | ---- |\n| [Retrofit](https://github.com/square/retrofit) | 4    |\n| [OkHttp](https://github.com/square/okhttp) | 5    |\n| [Picasso](https://github.com/square/picasso) | 7    |\n| [LeakCanary](https://github.com/square/leakcanary) | 13   |\n| [Dagger](https://github.com/square/dagger) | 29   |\n| [Otto](https://github.com/square/otto)   | 44   |\n| [TimesSquare](https://github.com/square/android-times-square) | 79   |\n\n#### FaceBook 公司占有 4 席\n\n| 项目名称                                     | 排名   |\n| ---------------------------------------- | ---- |\n| [React Native](https://github.com/facebook/react-native) | 1    |\n| [Fresco](https://github.com/facebook/fresco) | 11   |\n| [Stetho](https://github.com/facebook/stetho) | 38   |\n| [Rebound](https://github.com/facebook/rebound) | 62   |\n\n#### JakeWharton 大神占有 5 席\n\n| 项目名称                                     | 排名   |\n| ---------------------------------------- | ---- |\n| [Butter Knife](https://github.com/JakeWharton/butterknife) | 14   |\n| [ActionBarSherlock](https://github.com/JakeWharton/ActionBarSherlock) | 16   |\n| [ViewPagerIndicator](https://github.com/JakeWharton/ViewPagerIndicator) | 18   |\n| [NineOldAndroids](https://github.com/JakeWharton/NineOldAndroids) | 55   |\n| [Hugo](https://github.com/JakeWharton/hugo) | 73   |\n\n#### 代码家大神占有 4 席\n\n| 项目名称                                     | 排名   |\n| ---------------------------------------- | ---- |\n| [AndroidSwipeLayout](https://github.com/daimajia/AndroidSwipeLayout) | 28   |\n| [AndroidViewAnimations](https://github.com/daimajia/AndroidViewAnimations) | 32   |\n| [AndroidImageSlide](https://github.com/daimajia/AndroidImageSlider) | 84   |\n| [NumberProgressBar](https://github.com/daimajia/NumberProgressBar) | 91   |\n\n## 感谢\n\n感谢所有为开源而辛辛苦苦付出努力的人, 相信有你们 Android 会发展的更加美好, 让我们一起为他们辛辛苦苦付出的努力鼓掌吧!!\n","slug":"GitHub-Android-Libraries-Top-100-简介 - 副本","published":1,"updated":"2017-04-11T09:54:35.808Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ndxce8003w88owestervb1","content":"<h1 id=\"GitHub-Android-Libraries-Top-100-简介\"><a href=\"#GitHub-Android-Libraries-Top-100-简介\" class=\"headerlink\" title=\"GitHub Android Libraries Top 100 简介\"></a>GitHub Android Libraries Top 100 简介</h1><font color=\"#ff0000\">本文原文链接地址<a href=\"https://github.com/Freelander/Android_Data/blob/master/Android-Librarys-Top-100.md\" target=\"_blank\" rel=\"external\">https://github.com/Freelander/Android_Data/blob/master/Android-Librarys-Top-100.md</a></font>\n\n\n\n\n<p>本项目主要对目前 GitHub 上排名前 100 的 Android 开源库进行简单的介绍, 至于排名完全是根据 GitHub 搜索 Java 语言选择 (Best Match) 得到的结果, 然后过滤了跟 Android 不相关的项目, 所以排名并不具备任何官方效力, 仅供参考学习, 方便初学者快速了解当前一些流行的 Android 开源库.</p>\n<blockquote>\n<p>iOS 版本的在此: <a href=\"https://github.com/Aufree/trip-to-iOS/blob/master/Top-100.md\" target=\"_blank\" rel=\"external\">https://github.com/Aufree/trip-to-iOS/blob/master/Top-100.md</a></p>\n<p>感谢 <a href=\"http://weibo.com/GitHubDaily\" target=\"_blank\" rel=\"external\">@GitHubDaily</a> 与 <a href=\"http://weibo.com/AndroidDevDaily\" target=\"_blank\" rel=\"external\">@Android 开发日常</a> 的大力支持, 以及 <a href=\"https://github.com/stormzhang\" target=\"_blank\" rel=\"external\">@stormzhang</a> 的指点</p>\n</blockquote>\n<p><strong>若有任何疑问可通过<a href=\"mailto:huanggaojun13@gmail.com\" target=\"_blank\" rel=\"external\">邮件</a>或<a href=\"http://weibo.com/gaojunhuang\" target=\"_blank\" rel=\"external\">微博</a>联系我</strong></p>\n<table>\n<thead>\n<tr>\n<th>项目名称</th>\n<th>项目简介</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1. <a href=\"https://github.com/facebook/react-native\" target=\"_blank\" rel=\"external\">react-native</a></td>\n<td>这个是 Facebook 在 React.js Conf 2015 大会上推出的基于 JavaScript 的开源框架 React Native, 该框架结合了 Web 应用和 Native 应用的优势, 可以使用 JavaScript 来开发 iOS 和 Android 原生应用</td>\n</tr>\n<tr>\n<td>2.<a href=\"https://github.com/nostra13/Android-Universal-Image-Loader\" target=\"_blank\" rel=\"external\">Android-Universal-Image-Loader</a></td>\n<td>ImageLoader 是最早开源的 Android 图片缓存库, 强大的缓存机制, 早期被广泛 Android 应用使用, 至今仍然有很多 Android 开发者在使用</td>\n</tr>\n<tr>\n<td>3. <a href=\"https://github.com/ReactiveX/RxJava\" target=\"_blank\" rel=\"external\">RxJava</a></td>\n<td>RxJava 是一个在 Java VM 上使用可观测的序列来组成异步的, 基于事件的程序的库, 简单来说它就是一个实现异步操作的库, RxJava 的优点在于一个词 “简洁”, 使用它就算你程序逻辑有多么复杂, 它依然能够保持简洁易懂</td>\n</tr>\n<tr>\n<td>4. <a href=\"https://github.com/square/retrofit\" target=\"_blank\" rel=\"external\">retrofit</a></td>\n<td>Retrofit 是 Square 公司出品的 HTTP 请求库, 同时是 Square 是最早开源项目之一, Retrofit 是目前 Android 最流行的 Http Client 库之一, 目前版本是 Retrofit2.0 Beta4, 越来越多 Android 开发者开始使用这个请求库了</td>\n</tr>\n<tr>\n<td>5. <a href=\"https://github.com/square/okhttp\" target=\"_blank\" rel=\"external\">okhttp</a></td>\n<td>OkHttp 是 Square 公司出品的 HTTP 另一个请求库, Google 不推荐人们使用 HttpClient, 可是 HttpURLConnection 实在是太难用了, 因此很多人使用了 OkHttp 来解决这问题, 据说 Android4.4 的源码中可以看到 HttpURLConnection 已经替换成 OkHttp 实现呢</td>\n</tr>\n<tr>\n<td>6. <a href=\"https://github.com/jfeinstein10/SlidingMenu\" target=\"_blank\" rel=\"external\">SlidingMenu(不建议使用)</a></td>\n<td>一个侧滑菜单开源库, 在 Google 自己原生态的侧滑菜单 NavigationDrawer 没有出现之前, 这个库就已经被广泛使用, 可是到现在这个库已经被放弃了</td>\n</tr>\n<tr>\n<td>7. <a href=\"https://github.com/square/picasso\" target=\"_blank\" rel=\"external\">picasso</a></td>\n<td>Picasso 是 Square 公司出品的一款图片缓存库, 主导者是 JakeWharton 大神</td>\n</tr>\n<tr>\n<td>8. <a href=\"https://github.com/futurice/android-best-practices\" target=\"_blank\" rel=\"external\">android-best-practices</a></td>\n<td>Android 开发最佳实践, 里面所介绍的经验都是来自于 Futurice 公司 Android 开发者, 介绍内容有 Android 开发规范, 架构, 布局技巧, 以及使用一些有助于快速开发相关工具等等, 非常适合新手去学习</td>\n</tr>\n<tr>\n<td>9. <a href=\"https://github.com/greenrobot/EventBus\" target=\"_blank\" rel=\"external\">EventBus</a></td>\n<td>EventBus 是 Android 事件管理总线, 使用它可以替带 Android BroadCast, BroadCastReceiver, Handler 在 Activity, Fragment, Service, 线程之间传递消息, 大大简化了事件传递逻辑</td>\n</tr>\n<tr>\n<td>10. <a href=\"https://github.com/loopj/android-async-http\" target=\"_blank\" rel=\"external\">android-async-http</a></td>\n<td>Android-Async-Http 是 Android 一款老牌异步请求库, 专门对 Android 在 Apache 的 HttpClient 基础上构建的异步 http 连接, 该库有很多特征, 例如: 库的 size 小, 支持文件上传不需使用第三方库支持, 内部使用线程池来处理并发, 等等</td>\n</tr>\n<tr>\n<td>11. <a href=\"https://github.com/facebook/fresco\" target=\"_blank\" rel=\"external\">fresco</a></td>\n<td>Fresco 是 FaceBook 公司出品的一款图片缓存库, Fresco 是一个强大的图片加载组件, 支持加载 Gif 图和 WebP 格式, 支持 Android2.3(API level 9) 及其以上系统, Fresco 中设计了 Image pipeline 和 Drawees 两个模块各施其职, 使得图片完美加载出来, 想知道更多 image pipeline 和 Drawees 有关于它的特性, 可以到它<a href=\"http://fresco-cn.org/\" target=\"_blank\" rel=\"external\">官方平台</a>看介绍</td>\n</tr>\n<tr>\n<td>12. <a href=\"https://github.com/zxing/zxing\" target=\"_blank\" rel=\"external\">zxing</a></td>\n<td>ZXing 是二维码领域中名气最大的开源项目, 它提供了多个平台的二维码/条形码扫描解决方案, 拥有扫描快, 识别率高, 使用简单等特点</td>\n</tr>\n<tr>\n<td>13. <a href=\"https://github.com/square/leakcanary\" target=\"_blank\" rel=\"external\">leakcanary</a></td>\n<td>LeakCanary 是 Square 公司出的一款检测内存泄露工具, 该工具能帮助你在开发阶段方便的检测出内存泄露的问题, 使用起来非常简单方便</td>\n</tr>\n<tr>\n<td>14. <a href=\"https://github.com/JakeWharton/butterknife\" target=\"_blank\" rel=\"external\">butterknife</a></td>\n<td>由 JakeWharton 大神开发出来的, ButterKnife 是 View 注入框架, 使用它为了简写很多 findViewById 代码, 同时还支持 View 的一些事件处理函数</td>\n</tr>\n<tr>\n<td>15. <a href=\"https://github.com/PhilJay/MPAndroidChart\" target=\"_blank\" rel=\"external\">MPAndroidChart</a></td>\n<td>MPAndroidChart 是一款强大的 Android 图表库, 支持各种各样图表显示, 能想到的图表样式这里几乎都有, 图表还支持选择, 拖放和缩放动画效果</td>\n</tr>\n<tr>\n<td>16. <a href=\"https://github.com/JakeWharton/ActionBarSherlock\" target=\"_blank\" rel=\"external\">ActionBarSherlock (不建议使用)</a></td>\n<td>ActionBarSherlock 这个库是 JakeWharton 大神开发出来支持 Android3.0 以下版本的, 后来慢慢的 Google 也提供了 AppCompat 库来支持 Android3.0 以下版本使用 ActionBar, 因此作者不建议我们再使用这个库了</td>\n</tr>\n<tr>\n<td>17. <a href=\"https://github.com/excilys/androidannotations\" target=\"_blank\" rel=\"external\">androidannotations</a></td>\n<td>AndroidAnnotations 是一个能够让你快速进行 Android 开发的开源框架, 它能让你专注于真正重要的地方, 使代码更加精简, 使项目更加容易维护, 它的目标就是 “Fast Android Development.Easy maintainance”</td>\n</tr>\n<tr>\n<td>18. <a href=\"https://github.com/JakeWharton/ViewPagerIndicator\" target=\"_blank\" rel=\"external\">ViewPagerIndicator</a></td>\n<td>由 JakeWharton 大神开发出来的一个 ViewPager 指示器, 使用起来简单方便, 可高度定制, 开发出各种各样动画效果</td>\n</tr>\n<tr>\n<td>19. <a href=\"https://github.com/bumptech/glide\" target=\"_blank\" rel=\"external\">glide</a></td>\n<td>Glide 是 Google 员工的开源项目, 广泛应用于 Google 一些 App 上, 在2014年 Google I/O 大会上被推荐使用, Glide 和 Picasso 被人拿来比较研究过, Glide 与 Picasso 有 90% 的相似度, 但在一些细节上还是有点区别的, 各有各优缺点看君选择</td>\n</tr>\n<tr>\n<td>20. <a href=\"https://github.com/HannahMitt/HomeMirror\" target=\"_blank\" rel=\"external\">HomeMirror</a></td>\n<td>开发者是由一名程序媛 Hannah Mittelstaedt , HomeMirror 是一款 Android 镜子应用, 目前它能实现日期, 时间, 天气, 生日信息, 事件提醒器, 骑车天气的推荐, 股票信息, XKCD 漫画网站的新帖等等</td>\n</tr>\n<tr>\n<td>21. <a href=\"https://github.com/chrisbanes/Android-PullToRefresh\" target=\"_blank\" rel=\"external\">Android-PullToRefresh(不建议使用)</a></td>\n<td>一个强大的拉动刷新开源项目, 支持各种控件下拉刷新, ListView, ViewPager, WebView, ExpandableListView, GridView, ScrollView, Horizontal ScrollView, Fragment 上下左右拉动刷新, 不过现在这个项目已经停止维护更新了, 推荐使用 <a href=\"https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh\" target=\"_blank\" rel=\"external\">Android-Ultra-Pull-To-Refresh</a></td>\n</tr>\n<tr>\n<td>22. <a href=\"https://github.com/navasmdc/MaterialDesignLibrary\" target=\"_blank\" rel=\"external\">MaterialDesignLibrary</a></td>\n<td>这个库控件都是遵循了 Google Material Design 设计规范开发出来, 例如有: Flat Button, Rectangle Button, CheckBox, Switch, Progress bar circular indeterminate 等等</td>\n</tr>\n<tr>\n<td>23. <a href=\"https://github.com/chrisbanes/PhotoView\" target=\"_blank\" rel=\"external\">PhotoView</a></td>\n<td>PhotoView 是 ImageView 的子类, 支持所有 ImageView 的源生行为, 例如: 支持 Pinch 手势自由缩放, 支持双击放大/还原, 支持平滑滚动等等, 并且非常方便的与 ImageLoader/Picasso 之类的网络图片读取库集成使用, 还方便的与 ViewPager 等同样支持滑动手势的控件集成</td>\n</tr>\n<tr>\n<td>24. <a href=\"https://github.com/ReactiveX/RxAndroid\" target=\"_blank\" rel=\"external\">RxAndroid</a></td>\n<td>由 JakeWharton 大神主导开发的项目, RxAndroid 是 RxJava 的一个针对 Android 平台的扩展, 主要用于 Android 开发</td>\n</tr>\n<tr>\n<td>25. <a href=\"https://github.com/afollestad/material-dialogs\" target=\"_blank\" rel=\"external\">material-dialogs</a></td>\n<td>Material Dialogs 是一个可高度定制易用, 符合 Material Design 风格的 Dialogs, 兼容 Android API8 以上版本, 个人使用感觉它完全可替代 Android 原生那个, 比原生那个更加简单易用</td>\n</tr>\n<tr>\n<td>26.<a href=\"https://github.com/ksoichiro/Android-ObservableScrollView\" target=\"_blank\" rel=\"external\">Android-ObservableScrollView</a></td>\n<td>ObservableScrollView 是一款用于在滚动视图中观测滚动事件的 Android 库, 它能够轻而易举地与 Android 5.0 Lollipop 引进的工具栏 (Toolbar) 进行交互, 还可以帮助开发者实现拥有 Material Design 应用视觉体验的界面外观, 支持ListView, ScrollView, WebView, RecyclerView, GridView组件</td>\n</tr>\n<tr>\n<td>27. <a href=\"https://github.com/Bearded-Hen/Android-Bootstrap\" target=\"_blank\" rel=\"external\">Android-Bootstrap</a></td>\n<td>Android 版的 Bootstrap, 利用这个库能够实现很多 Bootstrap 样式风格, 之前有学过 Html 的人就知道 Bootstrap 是什么玩意啦</td>\n</tr>\n<tr>\n<td>28. <a href=\"https://github.com/daimajia/AndroidSwipeLayout\" target=\"_blank\" rel=\"external\">AndroidSwipeLayout</a></td>\n<td>开发者是代码家, AndroidSwipeLayout 是一个支持ListView, GridView, ViewGroup等等左右上下滑动出操作菜单, 类似 qq 消息列表向左滑动显示出多某条信息的操作菜单</td>\n</tr>\n<tr>\n<td>29. <a href=\"https://github.com/square/dagger\" target=\"_blank\" rel=\"external\">dagger</a></td>\n<td>Dagger 是 Square 公司出品的一个针对 Android 和 Java 的快速依赖注入器, 能够有效减少你敲代码量</td>\n</tr>\n<tr>\n<td>30. <a href=\"https://github.com/nhaarman/ListViewAnimations\" target=\"_blank\" rel=\"external\">ListViewAnimations</a></td>\n<td>一个轻轻松松给 Android ListView 添加动画效果的库, 支持的动画有: Alpha, SwingRightIn, SwingLeftIn, SwingBottomIn, SwingRightIn and ScaleIn等等, 使用它能很容易就实现帅爆的效果</td>\n</tr>\n<tr>\n<td>31. <a href=\"https://github.com/astuetz/PagerSlidingTabStrip\" target=\"_blank\" rel=\"external\">PagerSlidingTabStrip(不建议使用)</a></td>\n<td>PagerSlidingTabStrip 是一个给 Android ViewPager添加上 ViewPager 滑动指示器, 从 GitHub 上面看, 这个库似乎没有人在维护了, 因此不建议使用, 可使用 <a href=\"https://github.com/ogaclejapan/SmartTabLayout\" target=\"_blank\" rel=\"external\">SmartTabLayout</a> 来代替</td>\n</tr>\n<tr>\n<td>32. <a href=\"https://github.com/daimajia/AndroidViewAnimations\" target=\"_blank\" rel=\"external\">AndroidViewAnimations</a></td>\n<td>开发者是代码家, 这个库实现很多很酷炫的 Android 动画, 动画效果是借鉴 Animate.css 来实现的, 非常酷, 而且这个使用起来也是非常简单</td>\n</tr>\n<tr>\n<td>33. <a href=\"https://github.com/umano/AndroidSlidingUpPanel\" target=\"_blank\" rel=\"external\">AndroidSlidingUpPanel</a></td>\n<td>AndroidSlidingUpPanel 是一个上拉面板, 就是向上滑动的时候往上飞出一个显示面板控件, 该库效果在 Google Music, Google Maps and Rdio等 App 应用到</td>\n</tr>\n<tr>\n<td>34. <a href=\"https://github.com/mikepenz/MaterialDrawer\" target=\"_blank\" rel=\"external\">MaterialDrawer</a></td>\n<td>MaterialDrawer 是一个类似 Google 官方 NavigationView 侧滑显示控件, 个人认为 NavigationView 并没有 MaterialDrawer 实用, 因为 NavigationView 自由度不是很好, 很多都写死了不可以自由定义布局, 而 MaterialDrawer 能够实现跟 NavigationView 一样的效果, 同时还支持自定义效果, 自由度非常高</td>\n</tr>\n<tr>\n<td>35. <a href=\"https://github.com/lgvalle/Material-Animations\" target=\"_blank\" rel=\"external\">Material-Animations</a></td>\n<td>Material-Animations 是一个很好过渡动画库, 可以应用于 Activity 与 Activity 之间的跳转, Fragment 与 Fragment 之间的跳转, 以及各个 View 变化前后的过渡动画</td>\n</tr>\n<tr>\n<td>36. <a href=\"https://github.com/florent37/MaterialViewPager\" target=\"_blank\" rel=\"external\">MaterialViewPager</a></td>\n<td>一个简单易用 Material Design 风格的 ViewPager 库</td>\n</tr>\n<tr>\n<td>37. <a href=\"https://github.com/koush/ion\" target=\"_blank\" rel=\"external\">ion</a></td>\n<td>ion 是一个让 Android 的网络操作变得极其简单, 支持异步获取和处理JSON, 支持 Android 文件下载 (同时支持下载进度条绑定), 支持安全链接和代理</td>\n</tr>\n<tr>\n<td>38. <a href=\"https://github.com/facebook/stetho\" target=\"_blank\" rel=\"external\">stetho</a></td>\n<td>Stetho是 Facebook 出品的一个强大的 Android 调试工具,使用该工具你可以在 Chrome Developer Tools查看App的布局, 网络请求(仅限使用Volley, okhttp的网络请求库), sqlite, preference, 一切都是可视化的操作,无须自己在去使用adb, 也不需要root你的设备</td>\n</tr>\n<tr>\n<td>39. <a href=\"https://github.com/alibaba/fastjson\" target=\"_blank\" rel=\"external\">fastjson</a></td>\n<td>Fastjson 是一个 Java 语言编写的高性能功能完善的 JSON 库. 它采用一种“假定有序快速匹配”的算法, 把 JSON Parse的性能提升到极致, 是目前Java语言中最快的JSON库. Fastjson接口简单易用, 已经被广泛使用在缓存序列化, 协议交互, Web输出, Android客户端等多种应用场景</td>\n</tr>\n<tr>\n<td>40. <a href=\"https://github.com/gabrielemariotti/cardslib\" target=\"_blank\" rel=\"external\">cardslib (不建议使用)</a></td>\n<td>Cardslib 是早期由 Gabriele Mariotti 开发的一个为开发者方便实现各种 Card UI 的 Android 开源代码库, 后来 Google 官方提供自己封装了 CardView 在 v7 包下, 使用 Google 官方的可以完全替代了这个库, 因此这个也被弃用了</td>\n</tr>\n<tr>\n<td>41. <a href=\"https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh\" target=\"_blank\" rel=\"external\">Android-Ultra-Pull-To-Refresh</a></td>\n<td>开发者是廖祜秋, 这个是一个非常强大的下拉刷新库, 继承 ViewGroup 可以包含任何 View, 功能甚至比 SwipeRefreshLayout 强大, 使用起来也非常容易, 还可以自由定制自己的 UI 样式</td>\n</tr>\n<tr>\n<td>42. <a href=\"https://github.com/greenrobot/greenDAO\" target=\"_blank\" rel=\"external\">greenDAO</a></td>\n<td>greenDAO 是一个可以帮助 Android 开发者快速将 Java 对象映射到 SQLite 数据库的表单中的 ORM解决方案, 通过使用一个简单的面向对象 API, 开发者可以对 Java 对象进行存储, 更新, 删除和查询, greenDAO 相对 OrmLite, AndrORM 这两个 ORM 开源库, 性能是最高的</td>\n</tr>\n<tr>\n<td>43. <a href=\"https://github.com/etsy/AndroidStaggeredGrid\" target=\"_blank\" rel=\"external\">AndroidStaggeredGrid</a></td>\n<td>AndroidStaggeredGrid 是一个支持多列并且每一行的 item 大小不一, 交错排列的 GridView, 就是实现瀑布流样式效果, 目前该库已经被弃用了, 开发者建议我们使用 Google 官方控件 RecyleView 中的 StaggeredGridLayoutManager 布局来实现瀑布流效果</td>\n</tr>\n<tr>\n<td>44. <a href=\"https://github.com/square/otto\" target=\"_blank\" rel=\"external\">otto</a></td>\n<td>Otto 是 Square 公司出的一个事件库 (pub/sub 模式), 用来简化应用程序组件之间的通讯, otto 修改自 Google 的 Guava 库, 专门为 Android 平台进行了优化, 与上面介绍的 EventBus 相比, 两个库各有各的优点, 完全取决于我们自己项目的需求来选择它们哪一个</td>\n</tr>\n<tr>\n<td>45. <a href=\"https://github.com/wyouflf/xUtils\" target=\"_blank\" rel=\"external\">xUtils</a></td>\n<td>xUtils 是一个快速开发框架, 里面包含 DbUtils, ViewUtils, HttpUtils, BitmapUtils 四大模块, 可用于快速开发, 支持大文件上传, 拥有更加灵活的 ORM, 最低兼容 Android 2.2</td>\n</tr>\n<tr>\n<td>46. <a href=\"https://github.com/realm/realm-java\" target=\"_blank\" rel=\"external\">realm-java</a></td>\n<td>Realm 一个轻量的 Android 版本的数据存储库, 比 Android 原生系统的 SQLite 更加简洁快速对数据进行操作</td>\n</tr>\n<tr>\n<td>47.<a href=\"https://github.com/android10/Android-CleanArchitecture\" target=\"_blank\" rel=\"external\">Android-CleanArchitecture</a></td>\n<td>CleanArchitecture 是一个非常典型使用 MVP 架构的项目, 大家如果还没有理解 MVP 架构的可以看看这个项目</td>\n</tr>\n<tr>\n<td>48. <a href=\"https://github.com/emilsjolander/StickyListHeaders\" target=\"_blank\" rel=\"external\">StickyListHeaders</a></td>\n<td>StickyListHeaders 是一个实现能够固定在屏幕顶部的ListView Section Header库, 就是当前 section 的 header 固定在屏幕顶部, 当滑动到其他 section 时, 其他 section 的 header 会代替之前的 section 的 header, 固定到屏幕顶部, 类似于 Android4.0 的手机通讯录的效果</td>\n</tr>\n<tr>\n<td>49. <a href=\"https://github.com/PaoloRotolo/AppIntro\" target=\"_blank\" rel=\"external\">AppIntro</a></td>\n<td>AppIntro 是一个让人轻松快速搭建漂亮酷炫的引导页库</td>\n</tr>\n<tr>\n<td>50. <a href=\"https://github.com/pardom/ActiveAndroid\" target=\"_blank\" rel=\"external\">ActiveAndroid</a></td>\n<td>ActiveAndroid 是采用Rails中的 <a href=\"http://en.wikipedia.org/wiki/Object-relational_mapping\" target=\"_blank\" rel=\"external\">Active Record</a>架构模式设计的适用于 Android 平台的轻量级 ORM 架构, 几乎可以不用写任何 SQL 代码实现快速开发</td>\n</tr>\n<tr>\n<td>51. <a href=\"https://github.com/mcxiaoke/android-volley\" target=\"_blank\" rel=\"external\">android-volley</a></td>\n<td>Volley 是谷歌官方开发团队在 2013 年 Google I/O 大会推出的一个新的网络通信框架, 这个框架把 AsyncHttpClient 和 Universal-Image-Loader 的优点集于了一身,既可以像AsyncHttpClient 一样非常简单地进行 HTTP 通信,也可以像 Universal-Image-Loader 一样轻松加载网络上的图片, 这个库并不是官方的, 只是托管同步在 Maven,  官方只提供的 Jar 包</td>\n</tr>\n<tr>\n<td>52. <a href=\"https://github.com/lucasr/twoway-view\" target=\"_blank\" rel=\"external\">twoway-view</a></td>\n<td>TwoWayView 是简化 RecyclerView 开发的一个库, 可以在其 Base LayoutManager 基础上构建各种各样的布局, 该库内置了几个常用布局 List, Grid, Staggered Grid,Spannable Grid</td>\n</tr>\n<tr>\n<td>53. <a href=\"https://github.com/amlcurran/ShowcaseView\" target=\"_blank\" rel=\"external\">ShowcaseView</a></td>\n<td>ShowcaseView 是一个非常适合用于对用户进行第一次使用进行指导的库,使用起来非常简单还可以自定义样式</td>\n</tr>\n<tr>\n<td>54. <a href=\"https://github.com/chrisjenx/Calligraphy\" target=\"_blank\" rel=\"external\">Calligraphy</a></td>\n<td>Calligraphy 是一个用来简化 Android 应用使用自定义字体的类库, 该类库会自动查找应用中的 TextView 并设置其使用的字体</td>\n</tr>\n<tr>\n<td>55. <a href=\"https://github.com/JakeWharton/NineOldAndroids\" target=\"_blank\" rel=\"external\">NineOldAndroids</a></td>\n<td>NineOldAndroids 由 JakeWharton 大神开发的一个向下兼容的动画库, 主要是使低于API 11的系统也能够使用 View 的属性动画, 不过现在 JakeWharton 大神已经不推荐使用该库, 而是推荐我们使用官方封装在 Support 库里面的动画</td>\n</tr>\n<tr>\n<td>56. <a href=\"https://github.com/futuresimple/android-floating-action-button\" target=\"_blank\" rel=\"external\">android-floating-action-button</a></td>\n<td>FloatingActionButton 是一个悬浮操作按钮, 官方在 Support Design 包下也有封装一个类似这个库效果的 FloatingActionButton, 值得说明的是这个库是早在官方封装之前就存在的, 个人感觉这个库比官方那个更加好用</td>\n</tr>\n<tr>\n<td>57. <a href=\"https://github.com/hdodenhof/CircleImageView\" target=\"_blank\" rel=\"external\">CircleImageView</a></td>\n<td>CircleImageView 是一个轻松帮你实现圆形效果 ImageView 图片库, CircleImageView 是基于 ImageView 扩展出来, 因此它拥有 ImageView 控件所有属性, 简单易用值得你使用的库</td>\n</tr>\n<tr>\n<td>58. <a href=\"https://github.com/rey5137/material\" target=\"_blank\" rel=\"external\">material</a></td>\n<td>Material 是将 Material Design 风格控件封装在该库当中, 目前封装有Progress, Button, Switch, Slider, Spinner, Text Field, TabPageIndicator, SnackBar, Dialog, BottomSheetDialog, Dynamic theme</td>\n</tr>\n<tr>\n<td>59. <a href=\"https://github.com/chrisbanes/ActionBar-PullToRefresh\" target=\"_blank\" rel=\"external\">ActionBar-PullToRefresh</a></td>\n<td>ActionBar-PullToRefresh 是一个下拉刷新, 下拉刷新时在 ActionBar 出现加载中提示的库</td>\n</tr>\n<tr>\n<td>60. <a href=\"https://github.com/makovkastar/FloatingActionButton\" target=\"_blank\" rel=\"external\">FloatingActionButton</a></td>\n<td>又一个悬浮操作按钮库, 该库添加支持监听滑滚动事件, 当向下滑时按钮隐藏, 向上滑时按钮显示, 还有动画效果, 支持监听 ListView, ScrollView, RecylerView</td>\n</tr>\n<tr>\n<td>61. <a href=\"https://github.com/koush/AndroidAsync\" target=\"_blank\" rel=\"external\">AndroidAsync</a></td>\n<td>AndroidAsync 是一款基于 NIO 的低端 Android 异步 socket, http (client+server), websocket 和 socket.io 网络通信协议类库</td>\n</tr>\n<tr>\n<td>62. <a href=\"https://github.com/facebook/rebound\" target=\"_blank\" rel=\"external\">rebound</a></td>\n<td>Rebound 是 Facebook 推出的一个弹性动画库, 可以让动画看起来真实自然, 像真实世界的物理运动, 带有力的效果, 使用的参数则是 Facebook 的 origami 中使用的</td>\n</tr>\n<tr>\n<td>63. <a href=\"https://github.com/Trinea/android-common\" target=\"_blank\" rel=\"external\">android-common</a></td>\n<td>android-common-lib 是 Trinea 大神收集的一些开发通用的缓存, 公共 View 以及一些常用工具类</td>\n</tr>\n<tr>\n<td>64. <a href=\"https://github.com/traex/RippleEffect\" target=\"_blank\" rel=\"external\">RippleEffect</a></td>\n<td>RippleEffect 是一个实现在 Android 任何组件点击出现 Material Design 的波纹效果, 向下兼容到 Android API9</td>\n</tr>\n<tr>\n<td>65. <a href=\"https://github.com/castorflex/SmoothProgressBar\" target=\"_blank\" rel=\"external\">SmoothProgressBar</a></td>\n<td>SmoothProgressBar 是一个帮你的 App 方便实现可定制, 平滑动画的水平滚动进度条库</td>\n</tr>\n<tr>\n<td>66. <a href=\"https://github.com/wasabeef/recyclerview-animators\" target=\"_blank\" rel=\"external\">recyclerview-animators</a></td>\n<td>RecyclerView Animators 是一个对 Recycler 控件的 Item 添加以及删除增加动画效果, 动画效果有Scale, Fade, Flip, Slide 里面各种各样效果</td>\n</tr>\n<tr>\n<td>67. <a href=\"https://github.com/dmytrodanylyk/circular-progress-button\" target=\"_blank\" rel=\"external\">circular-progress-button</a></td>\n<td>一个带进度显示的 Button, 效果和动画做的都非常赞</td>\n</tr>\n<tr>\n<td>68. <a href=\"https://github.com/Qihoo360/DroidPlugin\" target=\"_blank\" rel=\"external\">DroidPlugin</a></td>\n<td>DroidPlugin 是 360 手机助手在 Android 系统上实现了一种新的插件机制: 它可以在无需安装, 修改的情况下运行APK文件, 此机制对改进大型APP的架构, 实现多团队协作开发具有一定的好处</td>\n</tr>\n<tr>\n<td>69. <a href=\"https://github.com/singwhatiwanna/dynamic-load-apk\" target=\"_blank\" rel=\"external\">dynamic-load-apk</a></td>\n<td>开发者是 singwhatiwanna(任玉刚), 是《Android 开发艺术探索》书籍的作者, 这个是作者联合另两位开发者啸(时之沙)和宋思宇花了几个月时间研究出来的 Apk 动态加载框架, 想了解更多关于这框架可到作者博客看 <a href=\"http://blog.csdn.net/singwhatiwanna/article/details/39937639\" target=\"_blank\" rel=\"external\">这篇文章</a> 有详细介绍</td>\n</tr>\n<tr>\n<td>70. <a href=\"https://github.com/google/ExoPlayer\" target=\"_blank\" rel=\"external\">ExoPlayer</a></td>\n<td>ExoPlayer 是Google 开发团队开源出来的一个媒体播放库, 比 Android 框架原生的 MediaPlayer 拥有更多优点支持动态的自适应流 HTTP(DASH) 和 平滑流, 支持高级的HLS特性, 支持自定义和扩治你的使用场景等等</td>\n</tr>\n<tr>\n<td>71. <a href=\"https://github.com/keyboardsurfer/Crouton\" target=\"_blank\" rel=\"external\">Crouton (不建议使用)</a></td>\n<td>Crouton 是一个显示提示信息的显示工具类, 可以用来代替 Toast, 默认显示在窗口的顶部, 可以按队列一个接着一个显示, 不过该库已经被弃用, 不推荐使用</td>\n</tr>\n<tr>\n<td>72. <a href=\"https://github.com/stephanenicolas/robospice\" target=\"_blank\" rel=\"external\">robospice</a></td>\n<td>RoboSpice 是一个使你建立异步的长时间的运行任务异常轻松的一个网络库，在网络请求，缓存支持，和提供开箱即用的 rest 请求方面尤为强大</td>\n</tr>\n<tr>\n<td>73. <a href=\"https://github.com/JakeWharton/hugo\" target=\"_blank\" rel=\"external\">hugo</a></td>\n<td>Hugo 是 JakeWharton 大神推出的一个用于打印 Log, hugo 是基于注解被调用的, 引入相关依赖后, 在方法上加上 @DebugLog 即可输出 Log, 使用非常简单</td>\n</tr>\n<tr>\n<td>74. <a href=\"https://github.com/AsyncHttpClient/async-http-client\" target=\"_blank\" rel=\"external\">async-http-client</a></td>\n<td>AsyncHttpClient 是又一款 Android 异步请求库, 该库支持 WebSocket 协议, 使用起来也比较简单易用</td>\n</tr>\n<tr>\n<td>75. <a href=\"https://github.com/cymcsg/UltimateRecyclerView\" target=\"_blank\" rel=\"external\">UltimateRecyclerView</a></td>\n<td>UltimateRecyclerView 是一个功能强大的 RecyclerView(advanced and flexible version of ListView), 包括了下拉刷新, 加载更多, 多种动画, 空数据提示, 拖动排序, 视差处理, 工具栏渐变, 滑动删除, 自定义floating button, 多种刷新效果, scrollbar, sticky header, 多 layout 支持等等元素, 而且使用起来跟 RecyclerView 一样的方便</td>\n</tr>\n<tr>\n<td>76. <a href=\"https://github.com/rengwuxian/MaterialEditText\" target=\"_blank\" rel=\"external\">MaterialEditText</a></td>\n<td>MaterialEditText 是就职于 Flipboard 的员工 <a href=\"https://www.zhihu.com/people/rengwuxian\" target=\"_blank\" rel=\"external\">扔物线</a> 开发的, 在 AppCompat v21 中也提供了 Material Design 的控件 EditText, 可是由于比较难用, 没有提供设置颜色的 Api, 于是就产生这个第三方库</td>\n</tr>\n<tr>\n<td>77. <a href=\"https://github.com/Yalantis/Side-Menu.Android\" target=\"_blank\" rel=\"external\">Side-Menu.Android</a></td>\n<td>Side Menu 是 <a href=\"https://yalantis.com/\" target=\"_blank\" rel=\"external\">Yalantis</a> 组织开源出来, 该组织因开源出一些动画很棒的开源库为大家所熟知该库是其中一个, 该库是提供翻页动画效果的侧边菜单, 动画体验超赞的</td>\n</tr>\n<tr>\n<td>78. <a href=\"https://github.com/bauerca/drag-sort-listview\" target=\"_blank\" rel=\"external\">drag-sort-listview</a></td>\n<td>DragSortListView 是一个可以实现拖动排序, 滑动删除的 listview 控件, 注意的是作者对该库已经放弃维护更新了, 不过感兴趣的人可以去研究一下</td>\n</tr>\n<tr>\n<td>79. <a href=\"https://github.com/square/android-times-square\" target=\"_blank\" rel=\"external\">android-times-square</a></td>\n<td>TimesSquare 是 Square 公司出品的一款显示日历选择日期的控件, 可以让用户选择多个日期</td>\n</tr>\n<tr>\n<td>80. <a href=\"https://github.com/cyrilmottier/GreenDroid\" target=\"_blank\" rel=\"external\">GreenDroid(不建议使用)</a></td>\n<td>GreenDroid 是一个封装好的 Android UI 界面库, 不过该库已经被弃用了, 不建议使用</td>\n</tr>\n<tr>\n<td>81. <a href=\"https://github.com/orhanobut/logger\" target=\"_blank\" rel=\"external\">logger</a></td>\n<td>Logger 是一个简单, 漂亮, 强大 Android 打印日志库</td>\n</tr>\n<tr>\n<td>82. <a href=\"https://github.com/ACRA/acra\" target=\"_blank\" rel=\"external\">acra</a></td>\n<td>Acra 是一个能够让 Android 应用自动将崩溃报告以谷歌文档电子表的形式进行发送的库, 旨在当应用发生崩溃或出现错误行为时, 开发者可以获取到相关数据</td>\n</tr>\n<tr>\n<td>83. <a href=\"https://github.com/ManuelPeinado/FadingActionBar\" target=\"_blank\" rel=\"external\">FadingActionBar</a></td>\n<td>FadingActionBar 是一个支持 ListView, ScrollView, WebView 向下滚动时逐渐显示 ActionBar 库</td>\n</tr>\n<tr>\n<td>84. <a href=\"https://github.com/daimajia/AndroidImageSlider\" target=\"_blank\" rel=\"external\">AndroidImageSlider</a></td>\n<td>AndroidImageSlider 库开发者是代码家, 该库是为 Banner 图片滑动提供多种动画效果, 还可以轻易为 Banner 加载网络图片</td>\n</tr>\n<tr>\n<td>85. <a href=\"https://github.com/jgilfelt/SystemBarTint\" target=\"_blank\" rel=\"external\">SystemBarTint</a></td>\n<td>SystemBarTint 是一个实现沉浸式状态栏库, 适用于 Android 系统 4.4 其以上的版本</td>\n</tr>\n<tr>\n<td>86. <a href=\"https://github.com/SimonVT/android-menudrawer\" target=\"_blank\" rel=\"external\">android-menudrawer</a></td>\n<td>MenuDrawer 是一款滑出式菜单库, 通过拖动屏幕边缘滑出菜单, 支持屏幕上下左右划出, 支持当前 View 处于上下层, 支持 Windows 边缘, ListView 边缘, ViewPager 变化划出菜单等</td>\n</tr>\n<tr>\n<td>87. <a href=\"https://github.com/vinc3m1/RoundedImageView\" target=\"_blank\" rel=\"external\">RoundedImageView</a></td>\n<td>RoundedImageView 一个快速支持图片圆角显示效果的库, 该库特点是能快速加载, 为了提高加载速度, 该库不用创建原始位图的副本, 不使用 clipPath, 不使用 setXfermode 裁剪的位图等方式来实现 ImageView 圆角, 使用也非常简单</td>\n</tr>\n<tr>\n<td>88. <a href=\"https://github.com/yangfuhai/afinal\" target=\"_blank\" rel=\"external\">afinal</a></td>\n<td>Afinal 是一个 android 的 sqlite orm 和 ioc 框架, 同时封装了 android 中的 http 框架, 使其更加简单易用, 使用 finalBitmap, 无需考虑 bitmap 在 android 中加载的时候 oom 的问题和快速滑动的时候图片加载位置错位等问题, Afinal 的宗旨是简洁, 快速, 约定大于配置的方式, 尽量一行代码完成所有事情</td>\n</tr>\n<tr>\n<td>89. <a href=\"https://github.com/johannilsson/android-pulltorefresh\" target=\"_blank\" rel=\"external\">android-pulltorefresh(不建议使用)</a></td>\n<td>另一个下拉刷新库, 但是该库已经停止维护, 因此不建议使用, 推荐使用 <a href=\"https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh\" target=\"_blank\" rel=\"external\">Android-Ultra-Pull-To-Refresh</a></td>\n</tr>\n<tr>\n<td>90. <a href=\"https://github.com/BoltsFramework/Bolts-Android\" target=\"_blank\" rel=\"external\">Bolts-Android</a></td>\n<td>Bolts 是一款底层类库集合, 在后台实现异步操作, 并提供接口反馈当前异步执行的程度 (可以通过接口实现UI进度更新), 最后反馈执行的结果给UI主线程, 与AsyncTask比较: (1)使用的是无大小限制的线程池; (2)任务可组合可级联,防止了代码耦合</td>\n</tr>\n<tr>\n<td>91. <a href=\"https://github.com/daimajia/NumberProgressBar\" target=\"_blank\" rel=\"external\">NumberProgressBar</a></td>\n<td>NumberProgressBar 开发者是代码家, 这是一个带简约性感数字显示的进度条库, 使用非常简单方便</td>\n</tr>\n<tr>\n<td>92. <a href=\"https://github.com/ikew0ng/SwipeBackLayout\" target=\"_blank\" rel=\"external\">SwipeBackLayout</a></td>\n<td>SwipeBackLayout 是一个支持屏幕上下左右滑动返回上层 Activity, 关闭当前 Activity, 类似简书 App</td>\n</tr>\n<tr>\n<td>93. <a href=\"https://github.com/koral--/android-gif-drawable\" target=\"_blank\" rel=\"external\">android-gif-drawable</a></td>\n<td>一个支持 gif 显示的 view, 用 jni 实现的, 编译生成 so 库后直接 xml 定义 view 即可, 简单易用</td>\n</tr>\n<tr>\n<td>94. <a href=\"https://github.com/yixia/VitamioBundle\" target=\"_blank\" rel=\"external\">VitamioBundle</a></td>\n<td>Vitamio 是一款 Android 与 iOS 平台上的全能多媒体开发框架, 特点：(1) 全面支持硬件解码与 GPU 渲染, (2) 能够流畅播放 720P 甚至 1080P 高清 MKV, FLV, MP4, MOV, TS, RMVB 等常见格式的视频, (3) 在 Android 与 iOS 上跨平台支持 MMS, RTSP, RTMP, HLS(m3u8)等常见的多种视频流媒体协议, 包括点播与直播</td>\n</tr>\n<tr>\n<td>95. <a href=\"https://github.com/ogaclejapan/SmartTabLayout\" target=\"_blank\" rel=\"external\">SmartTabLayout</a></td>\n<td>SmartTabLayout 是一个自定义的 Tab title strip, 基于 Google Samples 中的 android-SlidingTabBasic 项目, 滑动时 Indicator 可平滑过渡</td>\n</tr>\n<tr>\n<td>96. <a href=\"https://github.com/Yalantis/uCrop\" target=\"_blank\" rel=\"external\">uCrop</a></td>\n<td>uCrop 是<a href=\"https://yalantis.com/\" target=\"_blank\" rel=\"external\">Yalantis</a> 组织开源的图片裁剪库, 支持缩放, 旋转图片, 支持各种比例的裁剪框, 非常强大的一个图片裁剪库</td>\n</tr>\n<tr>\n<td>97. <a href=\"https://github.com/jdamcd/android-crop\" target=\"_blank\" rel=\"external\">android-crop</a></td>\n<td>又一个图片裁剪库, 向下兼容到 Api 10, 个人感觉这个库并没有比上面介绍的 uCrop 强大</td>\n</tr>\n<tr>\n<td>98. <a href=\"https://github.com/Prototik/HoloEverywhere\" target=\"_blank\" rel=\"external\">HoloEveryWhere</a></td>\n<td>HoloEveryWhere 是一套 Android 开发库, 提供了全套 Holo Style 控件, 它的外观与功能和标准 Holo Style 控件基本相同, 唯一不同的是它可以运行在低于 4.0 版本的 Android 系统上</td>\n</tr>\n<tr>\n<td>99. <a href=\"https://github.com/81813780/AVLoadingIndicatorView\" target=\"_blank\" rel=\"external\">AVLoadingIndicatorView</a></td>\n<td>AVLoadingIndicatorView 库含有各种各样漂亮的加载动画效果, 使用起来也非常简单, 和平时使用 ProgressBar 一样</td>\n</tr>\n<tr>\n<td>00. <a href=\"https://github.com/pedant/sweet-alert-dialog\" target=\"_blank\" rel=\"external\">sweet-alert-dialog</a></td>\n<td>Android 版的 SweetAlert, 清新文艺, 快意灵动的甜心弹框, 灵感来源于 JS 版 <a href=\"http://t4t5.github.io/sweetalert/\" target=\"_blank\" rel=\"external\">SweetAlert</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"粗计\"><a href=\"#粗计\" class=\"headerlink\" title=\"粗计\"></a>粗计</h2><h4 id=\"Square-公司占有-7-席\"><a href=\"#Square-公司占有-7-席\" class=\"headerlink\" title=\"Square 公司占有 7 席\"></a>Square 公司占有 7 席</h4><table>\n<thead>\n<tr>\n<th>项目名称</th>\n<th>排名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/square/retrofit\" target=\"_blank\" rel=\"external\">Retrofit</a></td>\n<td>4</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/square/okhttp\" target=\"_blank\" rel=\"external\">OkHttp</a></td>\n<td>5</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/square/picasso\" target=\"_blank\" rel=\"external\">Picasso</a></td>\n<td>7</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/square/leakcanary\" target=\"_blank\" rel=\"external\">LeakCanary</a></td>\n<td>13</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/square/dagger\" target=\"_blank\" rel=\"external\">Dagger</a></td>\n<td>29</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/square/otto\" target=\"_blank\" rel=\"external\">Otto</a></td>\n<td>44</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/square/android-times-square\" target=\"_blank\" rel=\"external\">TimesSquare</a></td>\n<td>79</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"FaceBook-公司占有-4-席\"><a href=\"#FaceBook-公司占有-4-席\" class=\"headerlink\" title=\"FaceBook 公司占有 4 席\"></a>FaceBook 公司占有 4 席</h4><table>\n<thead>\n<tr>\n<th>项目名称</th>\n<th>排名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/facebook/react-native\" target=\"_blank\" rel=\"external\">React Native</a></td>\n<td>1</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/facebook/fresco\" target=\"_blank\" rel=\"external\">Fresco</a></td>\n<td>11</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/facebook/stetho\" target=\"_blank\" rel=\"external\">Stetho</a></td>\n<td>38</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/facebook/rebound\" target=\"_blank\" rel=\"external\">Rebound</a></td>\n<td>62</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"JakeWharton-大神占有-5-席\"><a href=\"#JakeWharton-大神占有-5-席\" class=\"headerlink\" title=\"JakeWharton 大神占有 5 席\"></a>JakeWharton 大神占有 5 席</h4><table>\n<thead>\n<tr>\n<th>项目名称</th>\n<th>排名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/JakeWharton/butterknife\" target=\"_blank\" rel=\"external\">Butter Knife</a></td>\n<td>14</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/JakeWharton/ActionBarSherlock\" target=\"_blank\" rel=\"external\">ActionBarSherlock</a></td>\n<td>16</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/JakeWharton/ViewPagerIndicator\" target=\"_blank\" rel=\"external\">ViewPagerIndicator</a></td>\n<td>18</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/JakeWharton/NineOldAndroids\" target=\"_blank\" rel=\"external\">NineOldAndroids</a></td>\n<td>55</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/JakeWharton/hugo\" target=\"_blank\" rel=\"external\">Hugo</a></td>\n<td>73</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"代码家大神占有-4-席\"><a href=\"#代码家大神占有-4-席\" class=\"headerlink\" title=\"代码家大神占有 4 席\"></a>代码家大神占有 4 席</h4><table>\n<thead>\n<tr>\n<th>项目名称</th>\n<th>排名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/daimajia/AndroidSwipeLayout\" target=\"_blank\" rel=\"external\">AndroidSwipeLayout</a></td>\n<td>28</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/daimajia/AndroidViewAnimations\" target=\"_blank\" rel=\"external\">AndroidViewAnimations</a></td>\n<td>32</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/daimajia/AndroidImageSlider\" target=\"_blank\" rel=\"external\">AndroidImageSlide</a></td>\n<td>84</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/daimajia/NumberProgressBar\" target=\"_blank\" rel=\"external\">NumberProgressBar</a></td>\n<td>91</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"感谢\"><a href=\"#感谢\" class=\"headerlink\" title=\"感谢\"></a>感谢</h2><p>感谢所有为开源而辛辛苦苦付出努力的人, 相信有你们 Android 会发展的更加美好, 让我们一起为他们辛辛苦苦付出的努力鼓掌吧!!</p>\n","excerpt":"","more":"<h1 id=\"GitHub-Android-Libraries-Top-100-简介\"><a href=\"#GitHub-Android-Libraries-Top-100-简介\" class=\"headerlink\" title=\"GitHub Android Libraries Top 100 简介\"></a>GitHub Android Libraries Top 100 简介</h1><font color=\"#ff0000\">本文原文链接地址<a href=\"https://github.com/Freelander/Android_Data/blob/master/Android-Librarys-Top-100.md\">https://github.com/Freelander/Android_Data/blob/master/Android-Librarys-Top-100.md</a></font>\n\n\n\n\n<p>本项目主要对目前 GitHub 上排名前 100 的 Android 开源库进行简单的介绍, 至于排名完全是根据 GitHub 搜索 Java 语言选择 (Best Match) 得到的结果, 然后过滤了跟 Android 不相关的项目, 所以排名并不具备任何官方效力, 仅供参考学习, 方便初学者快速了解当前一些流行的 Android 开源库.</p>\n<blockquote>\n<p>iOS 版本的在此: <a href=\"https://github.com/Aufree/trip-to-iOS/blob/master/Top-100.md\">https://github.com/Aufree/trip-to-iOS/blob/master/Top-100.md</a></p>\n<p>感谢 <a href=\"http://weibo.com/GitHubDaily\">@GitHubDaily</a> 与 <a href=\"http://weibo.com/AndroidDevDaily\">@Android 开发日常</a> 的大力支持, 以及 <a href=\"https://github.com/stormzhang\">@stormzhang</a> 的指点</p>\n</blockquote>\n<p><strong>若有任何疑问可通过<a href=\"mailto:huanggaojun13@gmail.com\">邮件</a>或<a href=\"http://weibo.com/gaojunhuang\">微博</a>联系我</strong></p>\n<table>\n<thead>\n<tr>\n<th>项目名称</th>\n<th>项目简介</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1. <a href=\"https://github.com/facebook/react-native\">react-native</a></td>\n<td>这个是 Facebook 在 React.js Conf 2015 大会上推出的基于 JavaScript 的开源框架 React Native, 该框架结合了 Web 应用和 Native 应用的优势, 可以使用 JavaScript 来开发 iOS 和 Android 原生应用</td>\n</tr>\n<tr>\n<td>2.<a href=\"https://github.com/nostra13/Android-Universal-Image-Loader\">Android-Universal-Image-Loader</a></td>\n<td>ImageLoader 是最早开源的 Android 图片缓存库, 强大的缓存机制, 早期被广泛 Android 应用使用, 至今仍然有很多 Android 开发者在使用</td>\n</tr>\n<tr>\n<td>3. <a href=\"https://github.com/ReactiveX/RxJava\">RxJava</a></td>\n<td>RxJava 是一个在 Java VM 上使用可观测的序列来组成异步的, 基于事件的程序的库, 简单来说它就是一个实现异步操作的库, RxJava 的优点在于一个词 “简洁”, 使用它就算你程序逻辑有多么复杂, 它依然能够保持简洁易懂</td>\n</tr>\n<tr>\n<td>4. <a href=\"https://github.com/square/retrofit\">retrofit</a></td>\n<td>Retrofit 是 Square 公司出品的 HTTP 请求库, 同时是 Square 是最早开源项目之一, Retrofit 是目前 Android 最流行的 Http Client 库之一, 目前版本是 Retrofit2.0 Beta4, 越来越多 Android 开发者开始使用这个请求库了</td>\n</tr>\n<tr>\n<td>5. <a href=\"https://github.com/square/okhttp\">okhttp</a></td>\n<td>OkHttp 是 Square 公司出品的 HTTP 另一个请求库, Google 不推荐人们使用 HttpClient, 可是 HttpURLConnection 实在是太难用了, 因此很多人使用了 OkHttp 来解决这问题, 据说 Android4.4 的源码中可以看到 HttpURLConnection 已经替换成 OkHttp 实现呢</td>\n</tr>\n<tr>\n<td>6. <a href=\"https://github.com/jfeinstein10/SlidingMenu\">SlidingMenu(不建议使用)</a></td>\n<td>一个侧滑菜单开源库, 在 Google 自己原生态的侧滑菜单 NavigationDrawer 没有出现之前, 这个库就已经被广泛使用, 可是到现在这个库已经被放弃了</td>\n</tr>\n<tr>\n<td>7. <a href=\"https://github.com/square/picasso\">picasso</a></td>\n<td>Picasso 是 Square 公司出品的一款图片缓存库, 主导者是 JakeWharton 大神</td>\n</tr>\n<tr>\n<td>8. <a href=\"https://github.com/futurice/android-best-practices\">android-best-practices</a></td>\n<td>Android 开发最佳实践, 里面所介绍的经验都是来自于 Futurice 公司 Android 开发者, 介绍内容有 Android 开发规范, 架构, 布局技巧, 以及使用一些有助于快速开发相关工具等等, 非常适合新手去学习</td>\n</tr>\n<tr>\n<td>9. <a href=\"https://github.com/greenrobot/EventBus\">EventBus</a></td>\n<td>EventBus 是 Android 事件管理总线, 使用它可以替带 Android BroadCast, BroadCastReceiver, Handler 在 Activity, Fragment, Service, 线程之间传递消息, 大大简化了事件传递逻辑</td>\n</tr>\n<tr>\n<td>10. <a href=\"https://github.com/loopj/android-async-http\">android-async-http</a></td>\n<td>Android-Async-Http 是 Android 一款老牌异步请求库, 专门对 Android 在 Apache 的 HttpClient 基础上构建的异步 http 连接, 该库有很多特征, 例如: 库的 size 小, 支持文件上传不需使用第三方库支持, 内部使用线程池来处理并发, 等等</td>\n</tr>\n<tr>\n<td>11. <a href=\"https://github.com/facebook/fresco\">fresco</a></td>\n<td>Fresco 是 FaceBook 公司出品的一款图片缓存库, Fresco 是一个强大的图片加载组件, 支持加载 Gif 图和 WebP 格式, 支持 Android2.3(API level 9) 及其以上系统, Fresco 中设计了 Image pipeline 和 Drawees 两个模块各施其职, 使得图片完美加载出来, 想知道更多 image pipeline 和 Drawees 有关于它的特性, 可以到它<a href=\"http://fresco-cn.org/\">官方平台</a>看介绍</td>\n</tr>\n<tr>\n<td>12. <a href=\"https://github.com/zxing/zxing\">zxing</a></td>\n<td>ZXing 是二维码领域中名气最大的开源项目, 它提供了多个平台的二维码/条形码扫描解决方案, 拥有扫描快, 识别率高, 使用简单等特点</td>\n</tr>\n<tr>\n<td>13. <a href=\"https://github.com/square/leakcanary\">leakcanary</a></td>\n<td>LeakCanary 是 Square 公司出的一款检测内存泄露工具, 该工具能帮助你在开发阶段方便的检测出内存泄露的问题, 使用起来非常简单方便</td>\n</tr>\n<tr>\n<td>14. <a href=\"https://github.com/JakeWharton/butterknife\">butterknife</a></td>\n<td>由 JakeWharton 大神开发出来的, ButterKnife 是 View 注入框架, 使用它为了简写很多 findViewById 代码, 同时还支持 View 的一些事件处理函数</td>\n</tr>\n<tr>\n<td>15. <a href=\"https://github.com/PhilJay/MPAndroidChart\">MPAndroidChart</a></td>\n<td>MPAndroidChart 是一款强大的 Android 图表库, 支持各种各样图表显示, 能想到的图表样式这里几乎都有, 图表还支持选择, 拖放和缩放动画效果</td>\n</tr>\n<tr>\n<td>16. <a href=\"https://github.com/JakeWharton/ActionBarSherlock\">ActionBarSherlock (不建议使用)</a></td>\n<td>ActionBarSherlock 这个库是 JakeWharton 大神开发出来支持 Android3.0 以下版本的, 后来慢慢的 Google 也提供了 AppCompat 库来支持 Android3.0 以下版本使用 ActionBar, 因此作者不建议我们再使用这个库了</td>\n</tr>\n<tr>\n<td>17. <a href=\"https://github.com/excilys/androidannotations\">androidannotations</a></td>\n<td>AndroidAnnotations 是一个能够让你快速进行 Android 开发的开源框架, 它能让你专注于真正重要的地方, 使代码更加精简, 使项目更加容易维护, 它的目标就是 “Fast Android Development.Easy maintainance”</td>\n</tr>\n<tr>\n<td>18. <a href=\"https://github.com/JakeWharton/ViewPagerIndicator\">ViewPagerIndicator</a></td>\n<td>由 JakeWharton 大神开发出来的一个 ViewPager 指示器, 使用起来简单方便, 可高度定制, 开发出各种各样动画效果</td>\n</tr>\n<tr>\n<td>19. <a href=\"https://github.com/bumptech/glide\">glide</a></td>\n<td>Glide 是 Google 员工的开源项目, 广泛应用于 Google 一些 App 上, 在2014年 Google I/O 大会上被推荐使用, Glide 和 Picasso 被人拿来比较研究过, Glide 与 Picasso 有 90% 的相似度, 但在一些细节上还是有点区别的, 各有各优缺点看君选择</td>\n</tr>\n<tr>\n<td>20. <a href=\"https://github.com/HannahMitt/HomeMirror\">HomeMirror</a></td>\n<td>开发者是由一名程序媛 Hannah Mittelstaedt , HomeMirror 是一款 Android 镜子应用, 目前它能实现日期, 时间, 天气, 生日信息, 事件提醒器, 骑车天气的推荐, 股票信息, XKCD 漫画网站的新帖等等</td>\n</tr>\n<tr>\n<td>21. <a href=\"https://github.com/chrisbanes/Android-PullToRefresh\">Android-PullToRefresh(不建议使用)</a></td>\n<td>一个强大的拉动刷新开源项目, 支持各种控件下拉刷新, ListView, ViewPager, WebView, ExpandableListView, GridView, ScrollView, Horizontal ScrollView, Fragment 上下左右拉动刷新, 不过现在这个项目已经停止维护更新了, 推荐使用 <a href=\"https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh\">Android-Ultra-Pull-To-Refresh</a></td>\n</tr>\n<tr>\n<td>22. <a href=\"https://github.com/navasmdc/MaterialDesignLibrary\">MaterialDesignLibrary</a></td>\n<td>这个库控件都是遵循了 Google Material Design 设计规范开发出来, 例如有: Flat Button, Rectangle Button, CheckBox, Switch, Progress bar circular indeterminate 等等</td>\n</tr>\n<tr>\n<td>23. <a href=\"https://github.com/chrisbanes/PhotoView\">PhotoView</a></td>\n<td>PhotoView 是 ImageView 的子类, 支持所有 ImageView 的源生行为, 例如: 支持 Pinch 手势自由缩放, 支持双击放大/还原, 支持平滑滚动等等, 并且非常方便的与 ImageLoader/Picasso 之类的网络图片读取库集成使用, 还方便的与 ViewPager 等同样支持滑动手势的控件集成</td>\n</tr>\n<tr>\n<td>24. <a href=\"https://github.com/ReactiveX/RxAndroid\">RxAndroid</a></td>\n<td>由 JakeWharton 大神主导开发的项目, RxAndroid 是 RxJava 的一个针对 Android 平台的扩展, 主要用于 Android 开发</td>\n</tr>\n<tr>\n<td>25. <a href=\"https://github.com/afollestad/material-dialogs\">material-dialogs</a></td>\n<td>Material Dialogs 是一个可高度定制易用, 符合 Material Design 风格的 Dialogs, 兼容 Android API8 以上版本, 个人使用感觉它完全可替代 Android 原生那个, 比原生那个更加简单易用</td>\n</tr>\n<tr>\n<td>26.<a href=\"https://github.com/ksoichiro/Android-ObservableScrollView\">Android-ObservableScrollView</a></td>\n<td>ObservableScrollView 是一款用于在滚动视图中观测滚动事件的 Android 库, 它能够轻而易举地与 Android 5.0 Lollipop 引进的工具栏 (Toolbar) 进行交互, 还可以帮助开发者实现拥有 Material Design 应用视觉体验的界面外观, 支持ListView, ScrollView, WebView, RecyclerView, GridView组件</td>\n</tr>\n<tr>\n<td>27. <a href=\"https://github.com/Bearded-Hen/Android-Bootstrap\">Android-Bootstrap</a></td>\n<td>Android 版的 Bootstrap, 利用这个库能够实现很多 Bootstrap 样式风格, 之前有学过 Html 的人就知道 Bootstrap 是什么玩意啦</td>\n</tr>\n<tr>\n<td>28. <a href=\"https://github.com/daimajia/AndroidSwipeLayout\">AndroidSwipeLayout</a></td>\n<td>开发者是代码家, AndroidSwipeLayout 是一个支持ListView, GridView, ViewGroup等等左右上下滑动出操作菜单, 类似 qq 消息列表向左滑动显示出多某条信息的操作菜单</td>\n</tr>\n<tr>\n<td>29. <a href=\"https://github.com/square/dagger\">dagger</a></td>\n<td>Dagger 是 Square 公司出品的一个针对 Android 和 Java 的快速依赖注入器, 能够有效减少你敲代码量</td>\n</tr>\n<tr>\n<td>30. <a href=\"https://github.com/nhaarman/ListViewAnimations\">ListViewAnimations</a></td>\n<td>一个轻轻松松给 Android ListView 添加动画效果的库, 支持的动画有: Alpha, SwingRightIn, SwingLeftIn, SwingBottomIn, SwingRightIn and ScaleIn等等, 使用它能很容易就实现帅爆的效果</td>\n</tr>\n<tr>\n<td>31. <a href=\"https://github.com/astuetz/PagerSlidingTabStrip\">PagerSlidingTabStrip(不建议使用)</a></td>\n<td>PagerSlidingTabStrip 是一个给 Android ViewPager添加上 ViewPager 滑动指示器, 从 GitHub 上面看, 这个库似乎没有人在维护了, 因此不建议使用, 可使用 <a href=\"https://github.com/ogaclejapan/SmartTabLayout\">SmartTabLayout</a> 来代替</td>\n</tr>\n<tr>\n<td>32. <a href=\"https://github.com/daimajia/AndroidViewAnimations\">AndroidViewAnimations</a></td>\n<td>开发者是代码家, 这个库实现很多很酷炫的 Android 动画, 动画效果是借鉴 Animate.css 来实现的, 非常酷, 而且这个使用起来也是非常简单</td>\n</tr>\n<tr>\n<td>33. <a href=\"https://github.com/umano/AndroidSlidingUpPanel\">AndroidSlidingUpPanel</a></td>\n<td>AndroidSlidingUpPanel 是一个上拉面板, 就是向上滑动的时候往上飞出一个显示面板控件, 该库效果在 Google Music, Google Maps and Rdio等 App 应用到</td>\n</tr>\n<tr>\n<td>34. <a href=\"https://github.com/mikepenz/MaterialDrawer\">MaterialDrawer</a></td>\n<td>MaterialDrawer 是一个类似 Google 官方 NavigationView 侧滑显示控件, 个人认为 NavigationView 并没有 MaterialDrawer 实用, 因为 NavigationView 自由度不是很好, 很多都写死了不可以自由定义布局, 而 MaterialDrawer 能够实现跟 NavigationView 一样的效果, 同时还支持自定义效果, 自由度非常高</td>\n</tr>\n<tr>\n<td>35. <a href=\"https://github.com/lgvalle/Material-Animations\">Material-Animations</a></td>\n<td>Material-Animations 是一个很好过渡动画库, 可以应用于 Activity 与 Activity 之间的跳转, Fragment 与 Fragment 之间的跳转, 以及各个 View 变化前后的过渡动画</td>\n</tr>\n<tr>\n<td>36. <a href=\"https://github.com/florent37/MaterialViewPager\">MaterialViewPager</a></td>\n<td>一个简单易用 Material Design 风格的 ViewPager 库</td>\n</tr>\n<tr>\n<td>37. <a href=\"https://github.com/koush/ion\">ion</a></td>\n<td>ion 是一个让 Android 的网络操作变得极其简单, 支持异步获取和处理JSON, 支持 Android 文件下载 (同时支持下载进度条绑定), 支持安全链接和代理</td>\n</tr>\n<tr>\n<td>38. <a href=\"https://github.com/facebook/stetho\">stetho</a></td>\n<td>Stetho是 Facebook 出品的一个强大的 Android 调试工具,使用该工具你可以在 Chrome Developer Tools查看App的布局, 网络请求(仅限使用Volley, okhttp的网络请求库), sqlite, preference, 一切都是可视化的操作,无须自己在去使用adb, 也不需要root你的设备</td>\n</tr>\n<tr>\n<td>39. <a href=\"https://github.com/alibaba/fastjson\">fastjson</a></td>\n<td>Fastjson 是一个 Java 语言编写的高性能功能完善的 JSON 库. 它采用一种“假定有序快速匹配”的算法, 把 JSON Parse的性能提升到极致, 是目前Java语言中最快的JSON库. Fastjson接口简单易用, 已经被广泛使用在缓存序列化, 协议交互, Web输出, Android客户端等多种应用场景</td>\n</tr>\n<tr>\n<td>40. <a href=\"https://github.com/gabrielemariotti/cardslib\">cardslib (不建议使用)</a></td>\n<td>Cardslib 是早期由 Gabriele Mariotti 开发的一个为开发者方便实现各种 Card UI 的 Android 开源代码库, 后来 Google 官方提供自己封装了 CardView 在 v7 包下, 使用 Google 官方的可以完全替代了这个库, 因此这个也被弃用了</td>\n</tr>\n<tr>\n<td>41. <a href=\"https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh\">Android-Ultra-Pull-To-Refresh</a></td>\n<td>开发者是廖祜秋, 这个是一个非常强大的下拉刷新库, 继承 ViewGroup 可以包含任何 View, 功能甚至比 SwipeRefreshLayout 强大, 使用起来也非常容易, 还可以自由定制自己的 UI 样式</td>\n</tr>\n<tr>\n<td>42. <a href=\"https://github.com/greenrobot/greenDAO\">greenDAO</a></td>\n<td>greenDAO 是一个可以帮助 Android 开发者快速将 Java 对象映射到 SQLite 数据库的表单中的 ORM解决方案, 通过使用一个简单的面向对象 API, 开发者可以对 Java 对象进行存储, 更新, 删除和查询, greenDAO 相对 OrmLite, AndrORM 这两个 ORM 开源库, 性能是最高的</td>\n</tr>\n<tr>\n<td>43. <a href=\"https://github.com/etsy/AndroidStaggeredGrid\">AndroidStaggeredGrid</a></td>\n<td>AndroidStaggeredGrid 是一个支持多列并且每一行的 item 大小不一, 交错排列的 GridView, 就是实现瀑布流样式效果, 目前该库已经被弃用了, 开发者建议我们使用 Google 官方控件 RecyleView 中的 StaggeredGridLayoutManager 布局来实现瀑布流效果</td>\n</tr>\n<tr>\n<td>44. <a href=\"https://github.com/square/otto\">otto</a></td>\n<td>Otto 是 Square 公司出的一个事件库 (pub/sub 模式), 用来简化应用程序组件之间的通讯, otto 修改自 Google 的 Guava 库, 专门为 Android 平台进行了优化, 与上面介绍的 EventBus 相比, 两个库各有各的优点, 完全取决于我们自己项目的需求来选择它们哪一个</td>\n</tr>\n<tr>\n<td>45. <a href=\"https://github.com/wyouflf/xUtils\">xUtils</a></td>\n<td>xUtils 是一个快速开发框架, 里面包含 DbUtils, ViewUtils, HttpUtils, BitmapUtils 四大模块, 可用于快速开发, 支持大文件上传, 拥有更加灵活的 ORM, 最低兼容 Android 2.2</td>\n</tr>\n<tr>\n<td>46. <a href=\"https://github.com/realm/realm-java\">realm-java</a></td>\n<td>Realm 一个轻量的 Android 版本的数据存储库, 比 Android 原生系统的 SQLite 更加简洁快速对数据进行操作</td>\n</tr>\n<tr>\n<td>47.<a href=\"https://github.com/android10/Android-CleanArchitecture\">Android-CleanArchitecture</a></td>\n<td>CleanArchitecture 是一个非常典型使用 MVP 架构的项目, 大家如果还没有理解 MVP 架构的可以看看这个项目</td>\n</tr>\n<tr>\n<td>48. <a href=\"https://github.com/emilsjolander/StickyListHeaders\">StickyListHeaders</a></td>\n<td>StickyListHeaders 是一个实现能够固定在屏幕顶部的ListView Section Header库, 就是当前 section 的 header 固定在屏幕顶部, 当滑动到其他 section 时, 其他 section 的 header 会代替之前的 section 的 header, 固定到屏幕顶部, 类似于 Android4.0 的手机通讯录的效果</td>\n</tr>\n<tr>\n<td>49. <a href=\"https://github.com/PaoloRotolo/AppIntro\">AppIntro</a></td>\n<td>AppIntro 是一个让人轻松快速搭建漂亮酷炫的引导页库</td>\n</tr>\n<tr>\n<td>50. <a href=\"https://github.com/pardom/ActiveAndroid\">ActiveAndroid</a></td>\n<td>ActiveAndroid 是采用Rails中的 <a href=\"http://en.wikipedia.org/wiki/Object-relational_mapping\">Active Record</a>架构模式设计的适用于 Android 平台的轻量级 ORM 架构, 几乎可以不用写任何 SQL 代码实现快速开发</td>\n</tr>\n<tr>\n<td>51. <a href=\"https://github.com/mcxiaoke/android-volley\">android-volley</a></td>\n<td>Volley 是谷歌官方开发团队在 2013 年 Google I/O 大会推出的一个新的网络通信框架, 这个框架把 AsyncHttpClient 和 Universal-Image-Loader 的优点集于了一身,既可以像AsyncHttpClient 一样非常简单地进行 HTTP 通信,也可以像 Universal-Image-Loader 一样轻松加载网络上的图片, 这个库并不是官方的, 只是托管同步在 Maven,  官方只提供的 Jar 包</td>\n</tr>\n<tr>\n<td>52. <a href=\"https://github.com/lucasr/twoway-view\">twoway-view</a></td>\n<td>TwoWayView 是简化 RecyclerView 开发的一个库, 可以在其 Base LayoutManager 基础上构建各种各样的布局, 该库内置了几个常用布局 List, Grid, Staggered Grid,Spannable Grid</td>\n</tr>\n<tr>\n<td>53. <a href=\"https://github.com/amlcurran/ShowcaseView\">ShowcaseView</a></td>\n<td>ShowcaseView 是一个非常适合用于对用户进行第一次使用进行指导的库,使用起来非常简单还可以自定义样式</td>\n</tr>\n<tr>\n<td>54. <a href=\"https://github.com/chrisjenx/Calligraphy\">Calligraphy</a></td>\n<td>Calligraphy 是一个用来简化 Android 应用使用自定义字体的类库, 该类库会自动查找应用中的 TextView 并设置其使用的字体</td>\n</tr>\n<tr>\n<td>55. <a href=\"https://github.com/JakeWharton/NineOldAndroids\">NineOldAndroids</a></td>\n<td>NineOldAndroids 由 JakeWharton 大神开发的一个向下兼容的动画库, 主要是使低于API 11的系统也能够使用 View 的属性动画, 不过现在 JakeWharton 大神已经不推荐使用该库, 而是推荐我们使用官方封装在 Support 库里面的动画</td>\n</tr>\n<tr>\n<td>56. <a href=\"https://github.com/futuresimple/android-floating-action-button\">android-floating-action-button</a></td>\n<td>FloatingActionButton 是一个悬浮操作按钮, 官方在 Support Design 包下也有封装一个类似这个库效果的 FloatingActionButton, 值得说明的是这个库是早在官方封装之前就存在的, 个人感觉这个库比官方那个更加好用</td>\n</tr>\n<tr>\n<td>57. <a href=\"https://github.com/hdodenhof/CircleImageView\">CircleImageView</a></td>\n<td>CircleImageView 是一个轻松帮你实现圆形效果 ImageView 图片库, CircleImageView 是基于 ImageView 扩展出来, 因此它拥有 ImageView 控件所有属性, 简单易用值得你使用的库</td>\n</tr>\n<tr>\n<td>58. <a href=\"https://github.com/rey5137/material\">material</a></td>\n<td>Material 是将 Material Design 风格控件封装在该库当中, 目前封装有Progress, Button, Switch, Slider, Spinner, Text Field, TabPageIndicator, SnackBar, Dialog, BottomSheetDialog, Dynamic theme</td>\n</tr>\n<tr>\n<td>59. <a href=\"https://github.com/chrisbanes/ActionBar-PullToRefresh\">ActionBar-PullToRefresh</a></td>\n<td>ActionBar-PullToRefresh 是一个下拉刷新, 下拉刷新时在 ActionBar 出现加载中提示的库</td>\n</tr>\n<tr>\n<td>60. <a href=\"https://github.com/makovkastar/FloatingActionButton\">FloatingActionButton</a></td>\n<td>又一个悬浮操作按钮库, 该库添加支持监听滑滚动事件, 当向下滑时按钮隐藏, 向上滑时按钮显示, 还有动画效果, 支持监听 ListView, ScrollView, RecylerView</td>\n</tr>\n<tr>\n<td>61. <a href=\"https://github.com/koush/AndroidAsync\">AndroidAsync</a></td>\n<td>AndroidAsync 是一款基于 NIO 的低端 Android 异步 socket, http (client+server), websocket 和 socket.io 网络通信协议类库</td>\n</tr>\n<tr>\n<td>62. <a href=\"https://github.com/facebook/rebound\">rebound</a></td>\n<td>Rebound 是 Facebook 推出的一个弹性动画库, 可以让动画看起来真实自然, 像真实世界的物理运动, 带有力的效果, 使用的参数则是 Facebook 的 origami 中使用的</td>\n</tr>\n<tr>\n<td>63. <a href=\"https://github.com/Trinea/android-common\">android-common</a></td>\n<td>android-common-lib 是 Trinea 大神收集的一些开发通用的缓存, 公共 View 以及一些常用工具类</td>\n</tr>\n<tr>\n<td>64. <a href=\"https://github.com/traex/RippleEffect\">RippleEffect</a></td>\n<td>RippleEffect 是一个实现在 Android 任何组件点击出现 Material Design 的波纹效果, 向下兼容到 Android API9</td>\n</tr>\n<tr>\n<td>65. <a href=\"https://github.com/castorflex/SmoothProgressBar\">SmoothProgressBar</a></td>\n<td>SmoothProgressBar 是一个帮你的 App 方便实现可定制, 平滑动画的水平滚动进度条库</td>\n</tr>\n<tr>\n<td>66. <a href=\"https://github.com/wasabeef/recyclerview-animators\">recyclerview-animators</a></td>\n<td>RecyclerView Animators 是一个对 Recycler 控件的 Item 添加以及删除增加动画效果, 动画效果有Scale, Fade, Flip, Slide 里面各种各样效果</td>\n</tr>\n<tr>\n<td>67. <a href=\"https://github.com/dmytrodanylyk/circular-progress-button\">circular-progress-button</a></td>\n<td>一个带进度显示的 Button, 效果和动画做的都非常赞</td>\n</tr>\n<tr>\n<td>68. <a href=\"https://github.com/Qihoo360/DroidPlugin\">DroidPlugin</a></td>\n<td>DroidPlugin 是 360 手机助手在 Android 系统上实现了一种新的插件机制: 它可以在无需安装, 修改的情况下运行APK文件, 此机制对改进大型APP的架构, 实现多团队协作开发具有一定的好处</td>\n</tr>\n<tr>\n<td>69. <a href=\"https://github.com/singwhatiwanna/dynamic-load-apk\">dynamic-load-apk</a></td>\n<td>开发者是 singwhatiwanna(任玉刚), 是《Android 开发艺术探索》书籍的作者, 这个是作者联合另两位开发者啸(时之沙)和宋思宇花了几个月时间研究出来的 Apk 动态加载框架, 想了解更多关于这框架可到作者博客看 <a href=\"http://blog.csdn.net/singwhatiwanna/article/details/39937639\">这篇文章</a> 有详细介绍</td>\n</tr>\n<tr>\n<td>70. <a href=\"https://github.com/google/ExoPlayer\">ExoPlayer</a></td>\n<td>ExoPlayer 是Google 开发团队开源出来的一个媒体播放库, 比 Android 框架原生的 MediaPlayer 拥有更多优点支持动态的自适应流 HTTP(DASH) 和 平滑流, 支持高级的HLS特性, 支持自定义和扩治你的使用场景等等</td>\n</tr>\n<tr>\n<td>71. <a href=\"https://github.com/keyboardsurfer/Crouton\">Crouton (不建议使用)</a></td>\n<td>Crouton 是一个显示提示信息的显示工具类, 可以用来代替 Toast, 默认显示在窗口的顶部, 可以按队列一个接着一个显示, 不过该库已经被弃用, 不推荐使用</td>\n</tr>\n<tr>\n<td>72. <a href=\"https://github.com/stephanenicolas/robospice\">robospice</a></td>\n<td>RoboSpice 是一个使你建立异步的长时间的运行任务异常轻松的一个网络库，在网络请求，缓存支持，和提供开箱即用的 rest 请求方面尤为强大</td>\n</tr>\n<tr>\n<td>73. <a href=\"https://github.com/JakeWharton/hugo\">hugo</a></td>\n<td>Hugo 是 JakeWharton 大神推出的一个用于打印 Log, hugo 是基于注解被调用的, 引入相关依赖后, 在方法上加上 @DebugLog 即可输出 Log, 使用非常简单</td>\n</tr>\n<tr>\n<td>74. <a href=\"https://github.com/AsyncHttpClient/async-http-client\">async-http-client</a></td>\n<td>AsyncHttpClient 是又一款 Android 异步请求库, 该库支持 WebSocket 协议, 使用起来也比较简单易用</td>\n</tr>\n<tr>\n<td>75. <a href=\"https://github.com/cymcsg/UltimateRecyclerView\">UltimateRecyclerView</a></td>\n<td>UltimateRecyclerView 是一个功能强大的 RecyclerView(advanced and flexible version of ListView), 包括了下拉刷新, 加载更多, 多种动画, 空数据提示, 拖动排序, 视差处理, 工具栏渐变, 滑动删除, 自定义floating button, 多种刷新效果, scrollbar, sticky header, 多 layout 支持等等元素, 而且使用起来跟 RecyclerView 一样的方便</td>\n</tr>\n<tr>\n<td>76. <a href=\"https://github.com/rengwuxian/MaterialEditText\">MaterialEditText</a></td>\n<td>MaterialEditText 是就职于 Flipboard 的员工 <a href=\"https://www.zhihu.com/people/rengwuxian\">扔物线</a> 开发的, 在 AppCompat v21 中也提供了 Material Design 的控件 EditText, 可是由于比较难用, 没有提供设置颜色的 Api, 于是就产生这个第三方库</td>\n</tr>\n<tr>\n<td>77. <a href=\"https://github.com/Yalantis/Side-Menu.Android\">Side-Menu.Android</a></td>\n<td>Side Menu 是 <a href=\"https://yalantis.com/\">Yalantis</a> 组织开源出来, 该组织因开源出一些动画很棒的开源库为大家所熟知该库是其中一个, 该库是提供翻页动画效果的侧边菜单, 动画体验超赞的</td>\n</tr>\n<tr>\n<td>78. <a href=\"https://github.com/bauerca/drag-sort-listview\">drag-sort-listview</a></td>\n<td>DragSortListView 是一个可以实现拖动排序, 滑动删除的 listview 控件, 注意的是作者对该库已经放弃维护更新了, 不过感兴趣的人可以去研究一下</td>\n</tr>\n<tr>\n<td>79. <a href=\"https://github.com/square/android-times-square\">android-times-square</a></td>\n<td>TimesSquare 是 Square 公司出品的一款显示日历选择日期的控件, 可以让用户选择多个日期</td>\n</tr>\n<tr>\n<td>80. <a href=\"https://github.com/cyrilmottier/GreenDroid\">GreenDroid(不建议使用)</a></td>\n<td>GreenDroid 是一个封装好的 Android UI 界面库, 不过该库已经被弃用了, 不建议使用</td>\n</tr>\n<tr>\n<td>81. <a href=\"https://github.com/orhanobut/logger\">logger</a></td>\n<td>Logger 是一个简单, 漂亮, 强大 Android 打印日志库</td>\n</tr>\n<tr>\n<td>82. <a href=\"https://github.com/ACRA/acra\">acra</a></td>\n<td>Acra 是一个能够让 Android 应用自动将崩溃报告以谷歌文档电子表的形式进行发送的库, 旨在当应用发生崩溃或出现错误行为时, 开发者可以获取到相关数据</td>\n</tr>\n<tr>\n<td>83. <a href=\"https://github.com/ManuelPeinado/FadingActionBar\">FadingActionBar</a></td>\n<td>FadingActionBar 是一个支持 ListView, ScrollView, WebView 向下滚动时逐渐显示 ActionBar 库</td>\n</tr>\n<tr>\n<td>84. <a href=\"https://github.com/daimajia/AndroidImageSlider\">AndroidImageSlider</a></td>\n<td>AndroidImageSlider 库开发者是代码家, 该库是为 Banner 图片滑动提供多种动画效果, 还可以轻易为 Banner 加载网络图片</td>\n</tr>\n<tr>\n<td>85. <a href=\"https://github.com/jgilfelt/SystemBarTint\">SystemBarTint</a></td>\n<td>SystemBarTint 是一个实现沉浸式状态栏库, 适用于 Android 系统 4.4 其以上的版本</td>\n</tr>\n<tr>\n<td>86. <a href=\"https://github.com/SimonVT/android-menudrawer\">android-menudrawer</a></td>\n<td>MenuDrawer 是一款滑出式菜单库, 通过拖动屏幕边缘滑出菜单, 支持屏幕上下左右划出, 支持当前 View 处于上下层, 支持 Windows 边缘, ListView 边缘, ViewPager 变化划出菜单等</td>\n</tr>\n<tr>\n<td>87. <a href=\"https://github.com/vinc3m1/RoundedImageView\">RoundedImageView</a></td>\n<td>RoundedImageView 一个快速支持图片圆角显示效果的库, 该库特点是能快速加载, 为了提高加载速度, 该库不用创建原始位图的副本, 不使用 clipPath, 不使用 setXfermode 裁剪的位图等方式来实现 ImageView 圆角, 使用也非常简单</td>\n</tr>\n<tr>\n<td>88. <a href=\"https://github.com/yangfuhai/afinal\">afinal</a></td>\n<td>Afinal 是一个 android 的 sqlite orm 和 ioc 框架, 同时封装了 android 中的 http 框架, 使其更加简单易用, 使用 finalBitmap, 无需考虑 bitmap 在 android 中加载的时候 oom 的问题和快速滑动的时候图片加载位置错位等问题, Afinal 的宗旨是简洁, 快速, 约定大于配置的方式, 尽量一行代码完成所有事情</td>\n</tr>\n<tr>\n<td>89. <a href=\"https://github.com/johannilsson/android-pulltorefresh\">android-pulltorefresh(不建议使用)</a></td>\n<td>另一个下拉刷新库, 但是该库已经停止维护, 因此不建议使用, 推荐使用 <a href=\"https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh\">Android-Ultra-Pull-To-Refresh</a></td>\n</tr>\n<tr>\n<td>90. <a href=\"https://github.com/BoltsFramework/Bolts-Android\">Bolts-Android</a></td>\n<td>Bolts 是一款底层类库集合, 在后台实现异步操作, 并提供接口反馈当前异步执行的程度 (可以通过接口实现UI进度更新), 最后反馈执行的结果给UI主线程, 与AsyncTask比较: (1)使用的是无大小限制的线程池; (2)任务可组合可级联,防止了代码耦合</td>\n</tr>\n<tr>\n<td>91. <a href=\"https://github.com/daimajia/NumberProgressBar\">NumberProgressBar</a></td>\n<td>NumberProgressBar 开发者是代码家, 这是一个带简约性感数字显示的进度条库, 使用非常简单方便</td>\n</tr>\n<tr>\n<td>92. <a href=\"https://github.com/ikew0ng/SwipeBackLayout\">SwipeBackLayout</a></td>\n<td>SwipeBackLayout 是一个支持屏幕上下左右滑动返回上层 Activity, 关闭当前 Activity, 类似简书 App</td>\n</tr>\n<tr>\n<td>93. <a href=\"https://github.com/koral--/android-gif-drawable\">android-gif-drawable</a></td>\n<td>一个支持 gif 显示的 view, 用 jni 实现的, 编译生成 so 库后直接 xml 定义 view 即可, 简单易用</td>\n</tr>\n<tr>\n<td>94. <a href=\"https://github.com/yixia/VitamioBundle\">VitamioBundle</a></td>\n<td>Vitamio 是一款 Android 与 iOS 平台上的全能多媒体开发框架, 特点：(1) 全面支持硬件解码与 GPU 渲染, (2) 能够流畅播放 720P 甚至 1080P 高清 MKV, FLV, MP4, MOV, TS, RMVB 等常见格式的视频, (3) 在 Android 与 iOS 上跨平台支持 MMS, RTSP, RTMP, HLS(m3u8)等常见的多种视频流媒体协议, 包括点播与直播</td>\n</tr>\n<tr>\n<td>95. <a href=\"https://github.com/ogaclejapan/SmartTabLayout\">SmartTabLayout</a></td>\n<td>SmartTabLayout 是一个自定义的 Tab title strip, 基于 Google Samples 中的 android-SlidingTabBasic 项目, 滑动时 Indicator 可平滑过渡</td>\n</tr>\n<tr>\n<td>96. <a href=\"https://github.com/Yalantis/uCrop\">uCrop</a></td>\n<td>uCrop 是<a href=\"https://yalantis.com/\">Yalantis</a> 组织开源的图片裁剪库, 支持缩放, 旋转图片, 支持各种比例的裁剪框, 非常强大的一个图片裁剪库</td>\n</tr>\n<tr>\n<td>97. <a href=\"https://github.com/jdamcd/android-crop\">android-crop</a></td>\n<td>又一个图片裁剪库, 向下兼容到 Api 10, 个人感觉这个库并没有比上面介绍的 uCrop 强大</td>\n</tr>\n<tr>\n<td>98. <a href=\"https://github.com/Prototik/HoloEverywhere\">HoloEveryWhere</a></td>\n<td>HoloEveryWhere 是一套 Android 开发库, 提供了全套 Holo Style 控件, 它的外观与功能和标准 Holo Style 控件基本相同, 唯一不同的是它可以运行在低于 4.0 版本的 Android 系统上</td>\n</tr>\n<tr>\n<td>99. <a href=\"https://github.com/81813780/AVLoadingIndicatorView\">AVLoadingIndicatorView</a></td>\n<td>AVLoadingIndicatorView 库含有各种各样漂亮的加载动画效果, 使用起来也非常简单, 和平时使用 ProgressBar 一样</td>\n</tr>\n<tr>\n<td>00. <a href=\"https://github.com/pedant/sweet-alert-dialog\">sweet-alert-dialog</a></td>\n<td>Android 版的 SweetAlert, 清新文艺, 快意灵动的甜心弹框, 灵感来源于 JS 版 <a href=\"http://t4t5.github.io/sweetalert/\">SweetAlert</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"粗计\"><a href=\"#粗计\" class=\"headerlink\" title=\"粗计\"></a>粗计</h2><h4 id=\"Square-公司占有-7-席\"><a href=\"#Square-公司占有-7-席\" class=\"headerlink\" title=\"Square 公司占有 7 席\"></a>Square 公司占有 7 席</h4><table>\n<thead>\n<tr>\n<th>项目名称</th>\n<th>排名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/square/retrofit\">Retrofit</a></td>\n<td>4</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/square/okhttp\">OkHttp</a></td>\n<td>5</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/square/picasso\">Picasso</a></td>\n<td>7</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/square/leakcanary\">LeakCanary</a></td>\n<td>13</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/square/dagger\">Dagger</a></td>\n<td>29</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/square/otto\">Otto</a></td>\n<td>44</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/square/android-times-square\">TimesSquare</a></td>\n<td>79</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"FaceBook-公司占有-4-席\"><a href=\"#FaceBook-公司占有-4-席\" class=\"headerlink\" title=\"FaceBook 公司占有 4 席\"></a>FaceBook 公司占有 4 席</h4><table>\n<thead>\n<tr>\n<th>项目名称</th>\n<th>排名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/facebook/react-native\">React Native</a></td>\n<td>1</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/facebook/fresco\">Fresco</a></td>\n<td>11</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/facebook/stetho\">Stetho</a></td>\n<td>38</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/facebook/rebound\">Rebound</a></td>\n<td>62</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"JakeWharton-大神占有-5-席\"><a href=\"#JakeWharton-大神占有-5-席\" class=\"headerlink\" title=\"JakeWharton 大神占有 5 席\"></a>JakeWharton 大神占有 5 席</h4><table>\n<thead>\n<tr>\n<th>项目名称</th>\n<th>排名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/JakeWharton/butterknife\">Butter Knife</a></td>\n<td>14</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/JakeWharton/ActionBarSherlock\">ActionBarSherlock</a></td>\n<td>16</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/JakeWharton/ViewPagerIndicator\">ViewPagerIndicator</a></td>\n<td>18</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/JakeWharton/NineOldAndroids\">NineOldAndroids</a></td>\n<td>55</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/JakeWharton/hugo\">Hugo</a></td>\n<td>73</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"代码家大神占有-4-席\"><a href=\"#代码家大神占有-4-席\" class=\"headerlink\" title=\"代码家大神占有 4 席\"></a>代码家大神占有 4 席</h4><table>\n<thead>\n<tr>\n<th>项目名称</th>\n<th>排名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/daimajia/AndroidSwipeLayout\">AndroidSwipeLayout</a></td>\n<td>28</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/daimajia/AndroidViewAnimations\">AndroidViewAnimations</a></td>\n<td>32</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/daimajia/AndroidImageSlider\">AndroidImageSlide</a></td>\n<td>84</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/daimajia/NumberProgressBar\">NumberProgressBar</a></td>\n<td>91</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"感谢\"><a href=\"#感谢\" class=\"headerlink\" title=\"感谢\"></a>感谢</h2><p>感谢所有为开源而辛辛苦苦付出努力的人, 相信有你们 Android 会发展的更加美好, 让我们一起为他们辛辛苦苦付出的努力鼓掌吧!!</p>\n"},{"title":"Python学习笔记","date":"2016-11-03T08:57:00.000Z","author":"冰路梦","_content":"\n# Python学习笔记\n\n<!-- TOC -->\n\n- [Python学习笔记](#python学习笔记)\n    - [一、基本语法](#一基本语法)\n    - [二、 数据与逻辑](#二-数据与逻辑)\n    - [三、结构与api](#三结构与api)\n    - [四、Python高级教程](#四python高级教程)\n\n<!-- /TOC -->\n## 一、基本语法\n\n`python2.x与python3.x区别很大，新版特性很强，更优化，此笔记学习新版本特性，暂不关注旧版本。`\n\n- 标识符\n\n  > 1. 标识符：数字、字母、下划线，且数字不开头。\n  > 2. 区分大小写；\n  > 3. 单下划线开头`_foo`表示不能直接访问，需要用接口访问，不可\"from xxx import\"导入。`__foo`双下划线表示私有。前后双下划线`___foo__`特殊函数。\n\n- 保留字符\n\n  > and、exec、not、assert、finally、or、break、for、pass、class、from、print、continue、global、raise、def、if、return、del、import、try、elif、in、while、else、is、with、except、lambda、yield。\n  >\n  > Python3中`end`可以将结果输入到同一行，或者输出尾部追加不同的字符\n  >\n  > ```python\n  > #Fibonacci Series: 斐波那契数列\n  > a,b = 0,1\n  > while b<1000:\n  >     print(b,end=',')\n  >     a,b = b,a+b\n  > ```\n  >\n  > ​\n\n- 行与缩进\n\n  > **Python区别于其他语言最大处，python不用{}来控制类、函数和逻辑块。而是用缩进，空格数无妨，但是逻辑块前后必须相同个数空格，使用空格或者tab都行，但是最好别混用**\n  >\n  > ```python\n  > if True:\n  >     print \"True\"\n  > else:\n  >     print \"False\"\n  > ```\n  >\n  > python一般新的一行意味着上个语句块结束。但是多行语句可以用`\\`符号：\n  >\n  > ```python\n  > string = abc + \\\n  > \t\tbcd + \\\n  >     \tefg\n  > # 要是有{}、[]、()的语句，断为多行也无妨。\n  > girls = ['allen','angle'\n  >         'candy','lily'\n  >         'merry']\n  > ```\n\n- 引号与注释\n\n  > python的字符串可以用单引号`'`、双引号`\"`、三引号`'''`包括，其中三引号可以多行分段，有时候可以用作注释。\n  >\n  > `#`符号表示注释，可写在当行，或者代码尾部。多行注释使用三个单引号` ''' `，或三个双引号`\"\"\"`包括。\n  >\n  > ```python\n  > #单行注释\n  > if True\n  > \tprint 'hello' #单个注释，新版中需要加()，视为函数\n  > '''\n  > 多行注释\n  > 是这么写的\n  > 真的可以么\n  > 在markdown语法中\n  > '''\n  > \"\"\"\n  > 似乎可以\n  > 好像是的哦\n  > \"\"\"    \n  > ```\n  >\n  > *函数之间，类与函数间用`空行`分开，便于阅读和维护*\n\n- 零碎语法\n\n  >- 多条语句同一行，可以`;`分割。\n  >\n  >- 同一代码组，首行关键字后`:`结尾，同一代码组前后空白数相同。\n  >\n  >- 旧版中文编码需要头文件注释\n  >\n  >- Python中True和False，似乎不能小写哦！\n  >\n  >  ```python\n  >  #!/usr/bin/python\n  >  #_*_coding:utf-8 _*_\n  >  #或者\n  >  #coding=utf-8\n  >  #新版python已经默认支持了。\n  >  ```\n  >\n\n\n##  二、 数据与逻辑\n\n- 变量类型\n\n  > **python变量赋值不需要类型声明**\n  >\n  > ```python\n  > counter = 100 #整型\n  > miles = 1000.0 # 浮点型\n  > name = \"John\" #字符串\n  > a = b = c = 1 #多个变量同时赋值\n  > a, b, c = 1,2,\"John\" #多变量多类型赋值,个数必须对应。\n  > ```\n  >\n  > python五种标准数据类型：\n  >\n  > - Numbers数字\n  >\n  >   该类型变量赋值后不可改变，重新赋值实质上是分配新的对象。\n  >\n  >   ```python\n  >   a = 1,b=2,c=9\n  >   #del是删除语句\n  >   del a\n  >   del a,b\n  >   # Number有四种不同类型，int、long、float、complex（复数）\n  >   #注意：python新版中，没有long，多了一个bytes。\n  >   8899887897l#后面的l容易与1混淆，一般写作L\n  >   ```\n  >\n  > - String字符串\n  >\n  >   由字母、数字、下划线组成，两种顺序，0开始至后，-1开始向前。\n  >\n  >   string的截取\n  >\n  >   ```python\n  >   s = 'I`m a good boy'\n  >   s[3:9]#其结果是截取对应标号的字符串为新的字符，可以0--size，也可以-1--向前。记住区间[)右边取不到哦\n  >   print s #输出s字符串\n  >   print s[1]#输入下标为1的字母\n  >   print s[1:5]#输出下标1-5，但不含5那个字符\n  >   print s + \"add\" # 字符串连接\n  >   print s * 2 # 重复输出两次\n  >   ```\n  >\n  > - List列表\n  >\n  >   python列表可以混合不同类型数据，嵌套列表，可以使用类似string的方法取子列表。`[]`表示\n  >\n  >   ```python\n  >   list = ['python',666,2.14,'study']\n  >   tinylist = [123,'John']\n  >   print list #完整输出\n  >   print list[0]#输出指定下标元素\n  >   print list[1:3]#输出1-3的元素\n  >   print list[2:]#输出2之后所有元素\n  >   print tinylist * 2 # 重复两次输出\n  >   print list + tinylist#组合列表\n  >   ```\n  >\n  > - Tuple元组\n  >\n  >   元组类似list，`()`标识，`,`分割，不能二次赋值。\n  >\n  >   ```python\n  >   list = [1,2,'abc']\n  >   tuple = (1,2,'abc')\n  >   list[0] = 'ABC'#可以更新\n  >   tuple[0]= 4 #错误，元组数据不能更新\n  >   ```\n  >\n  > - Dictionary字典\n  >\n  >   Dictionary被视为python最为灵活的内置数据结构，列表为有序对象集合，字典则为无序元素结合。区别在于，Dictionary类似与map集合，键值对key-value。`{}`标识\n  >\n  >   ```python\n  >   dict = {}\n  >   dict['one'] = \"This is one\"\n  >   dict[2] = \"This is 2\"\n  >   tinydict = {'name':'john','code':1234,'dept':'good',22:879.0L}\n  >   print dict['one'] #根据键值输出元素\n  >   print dict # 输出所有元素\n  >   print dict.keys()#输出所有key\n  >   print tinydict.vales()#输出所有值value\n  >   ```\n  >\n  > - Set(集合)\n  >\n  >   无序不重复的序列，主要用于成员关系测试和重复文件删除。\n  >\n  >   可以使用大括号`({})`或者`set()`函数创建集合，注意：创建一个空集合必须用 set() 而不是 `{ }`，因为 `{ }` 是用来创建一个空字典。\n  >\n  > **类型转换**，对应数据类型作为函数名即可,返回结果。\n  >\n  > |          函数           |               描述                |\n  > | :-------------------: | :-----------------------------: |\n  > |    int(x [,base])     |            将x转换为一个整数            |\n  > |   long(x [,base] )    |           将x转换为一个长整数            |\n  > |       float(x)        |           将x转换到一个浮点数            |\n  > | complex(real [,imag]) |             创建一个复数              |\n  > |        str(x)         |          将对象 x 转换为字符串           |\n  > |        repr(x)        |         将对象 x 转换为表达式字符串         |\n  > |       eval(str)       |  用来计算在字符串中的有效Python表达式,并返回一个对象  |\n  > |       tuple(s)        |          将序列 s 转换为一个元组          |\n  > |        list(s)        |          将序列 s 转换为一个列表          |\n  > |        set(s)         |             转换为可变集合             |\n  > |        dict(d)        | 创建一个字典。d 必须是一个序列 (key,value)元组。 |\n  > |     frozenset(s)      |            转换为不可变集合             |\n  > |        chr(x)         |          将一个整数转换为一个字符           |\n  > |       unichr(x)       |        将一个整数转换为Unicode字符        |\n  > |        ord(x)         |          将一个字符转换为它的整数值          |\n  > |        hex(x)         |        将一个整数转换为一个十六进制字符串        |\n  > |        oct(x)         |        将一个整数转换为一个八进制字符串         |\n  >\n\n- 运算符号\n\n  >Python运算符支持一下类型：\n  >\n  >- 算术运算符\n  >- 比较（关系）运算符\n  >- 赋值运算符\n  >- 逻辑运算符\n  >- 位运算符\n  >- 成员运算符\n  >- 身份运算符\n  >\n  >**运算符有优先级**\n  >\n  >1. 算术运算符\n  >\n  >   | 运算符  | 描述    | 实例     |\n  >   | ---- | ----- | ------ |\n  >   | +    | 加号    | 1+2得3  |\n  >   | -    | 减号    | 3-1得2  |\n  >   | *    | 乘号    | 2*2得4  |\n  >   | /    | 除号    | 9/3得3  |\n  >   | %    | 取模，求余 | 5%2得1  |\n  >   | **   | 幂     | 2**3得8 |\n  >   | //   | 取整除   | 9//2得4 |\n  >\n  >   示例：\n  >\n  >   ```python\n  >   #算术运算符，得到运算结果\n  >   a,b,c = 12,2,3#多变量同时赋值\n  >   print (a+b)\n  >   print (a-b)\n  >   print (a*b)\n  >   print (a/b)\n  >   print (a%c)\n  >   print (b**c)\n  >   print (c//b)\n  >   ```\n  >\n  >2. 比较运算符\n  >\n  >   | 运算符  | 描述          |\n  >   | ---- | ----------- |\n  >   | ==   | 等于，比较对象是否相等 |\n  >   | !=   | 不等于         |\n  >   | <>   | 不等于         |\n  >   | >    | 大于          |\n  >   | <    | 小于          |\n  >   | \\>=  | 大于等于        |\n  >   | <=   | 小于等于        |\n  >\n  >   示例：\n  >\n  >   ```python\n  >   #关系运算符，返回结果为 True或False\n  >   a,b,c = 12,2,3\n  >   print(a==b)\n  >   print(a!=b)\n  >   print(a<>b)#，新版python中，已经废弃。\n  >   print(a>b)\n  >   print(a<b)\n  >   print(a>=b)\n  >   print(a<=b)\n  >   ```\n  >\n  >3. 赋值运算符\n  >\n  >   | 运算符  | 描述   | 实例                 |\n  >   | ---- | ---- | ------------------ |\n  >   | =    | 简单赋值 | c=a+b,将a+b的结果赋值给c  |\n  >   | +=   | 加法赋值 | c+=a等效于c=c+a       |\n  >   | -=   | 减法赋值 | c-=a等效于c=c-a       |\n  >   | *=   | 乘法赋值 | c*=a等效于c=c\\*a      |\n  >   | /=   | 除法赋值 | c/=a等效于c=c/a       |\n  >   | %=   | 取模赋值 | c%=a等效于c=c%a       |\n  >   | **=  | 幂赋值  | c\\*\\*=a等效于c=c\\*\\*a |\n  >   | //=  | 取整赋值 | c//=a等效于c=c//a     |\n  >\n  >   示例：\n  >\n  >   ```python\n  >   #简单演示\n  >   a,b,c=12,2,3\n  >   #print(c=a)#不能直接在print内写赋值\n  >   c=a\n  >   print(c)\n  >   c=c**b\n  >   print(c**=b)\n  >   ```\n  >\n  >4. 位运算符\n  >\n  >   位运算既是将数字看作二进制，进行运算。\n  >\n  >   | 运算符  | 描述                                       |\n  >   | ---- | ---------------------------------------- |\n  >   | &    | **`按位与`**：两数二进制对齐，对应位置都是1，则为1，否则为0。      |\n  >   | \\|   | **`按位或`**：两数二进制，对应位置有一个为1，则为1。           |\n  >   | ^    | **`按位异或`**：两数二进制，对应位置相异，则为1。             |\n  >   | ~    | **`按位取反`**：对数据的二进制，各个位置取相反，变1为0，变0为1。    |\n  >   | <<   | **`左移动`**：运算数二进制全部左移动若干位，\"<<\"右边的数决定左移位数。**高位丢弃，低位补0** |\n  >   | \\>>  | **`右移动`**：运算数二进制全部右移动软敢为，\">>\"右边的数决定右移位数。 |\n  >\n  >   示例：\n  >\n  >   ```python\n  >   a = 60 # 60 = 0011 1100\n  >   b = 13 # 13 = 0000 1101\n  >   c = 0\n  >   c = a & b\n  >   print(\"a & b :\",c)# 12 = 0000 1100\n  >   c = a | b\n  >   print(\"a | b :\",c)# 61 = 0011 1101\n  >   c = a ^ b\n  >   print(\"a ^ b :\",c)# 49 = 0011 0001\n  >   c = ~a\n  >   print(\"~a :\",c)# -61 = 1100 0011\n  >   c = a<<2\n  >   print(\"a<<2 :\",c) # 240 = 1111 0000\n  >   c = a>>2\n  >   print(\"a>>2 :\",c) # 15 = 0000 1111\n  >   ```\n  >\n  >5. 逻辑运算符\n  >\n  >   | 运算符  | 表达式     | 描述                                       |\n  >   | ---- | ------- | ---------------------------------------- |\n  >   | and  | x and y | **`布尔与`** ：如果x为False，x and y返回False，否则返回y的计算值。 |\n  >   | or   | x or y  | **`布尔或`**：如果x非零，返回x值，否则返回y的计算值。          |\n  >   | not  | not x   | **`布尔非`**：若x为True，返回False，若x为False，返回True。 |\n  >\n  >   示例:\n  >\n  >   ```python\n  >   #True是1，False是0\n  >   \"\"\"所以可以在逻辑运算中判断，是否为0 或者1，来决定true和false\"\"\"\n  >   a, b, c = 12,2,3\n  >   print(a and b)#似乎非0，即认为True\n  >   print(a or b)\n  >   print(not a)\n  >   ```\n  >\n  >6. 成员运算符\n  >\n  >   | 运算符    | 描述                                     |\n  >   | ------ | -------------------------------------- |\n  >   | in     | x in y，若有True，无False。**`y为列表、字符串、元组`** |\n  >   | not in | x not in y 若y中无x则True，有则False。         |\n  >\n  >   示例：\n  >\n  >   ```python\n  >   a = 10;b = 20;list = [1,2,10,15]\n  >   print(a in list)\n  >   print(a not in list)\n  >   print(b in list)\n  >   ```\n  >\n  >7. 身份运算符\n  >\n  >   | 运算符    | 描述                                       |\n  >   | ------ | ---------------------------------------- |\n  >   | is     | `is`判断两标识符是否引用同一对象，id同则返回True，否则False。   |\n  >   | is not | `is not`判断两标识符是不是引用不同对象，id不同则返回True，否则False。 |\n  >\n  >   示例：\n  >\n  >   ```python\n  >   a = 10;b = 20;\n  >   print(a is b);print(a is not b);\n  >   ```\n  >\n  >8. 运算符优先级\n  >\n  >   | 运算符                      | 优先级描述                |\n  >   | ------------------------ | -------------------- |\n  >   | **                       | 指数，最高优先级             |\n  >   | ~，+，-                    | 按位取反、一元加(+@)、一元减(-@) |\n  >   | *，/，%，//                 | 乘、除、取模、取整            |\n  >   | +，-                      | 加法、减法                |\n  >   | \\>>，<<                   | 右移动、左移动              |\n  >   | &                        | 位'AND'               |\n  >   | ^，\\|                     | 位运算                  |\n  >   | <=，<，>，>=                | 比较运算符                |\n  >   | <>，==，!=                 | 等于运算符                |\n  >   | =，%=，/=，//=，-=，+=，*=，**= | 赋值运算符                |\n  >   | is，is not                | 身份运算符                |\n  >   | in ，not in               | 成员运算符                |\n  >   | not，or，and               | 逻辑运算符                |\n  >\n  >   **注意：若是不确定优先级，可以用()来控制**\n\n- 条件语句\n\n  > Python中指定非0，和非null，的值为Ture，0和null为False。\n  >\n  > ```python\n  > # python 中多个条件语句，if..elif...elif...else\n  > if condition1:\n  >     statement1\n  > elif condition2:\n  >     statement2\n  > else:\n  >     statement\n  > if (1!=2) : print \"OK\";#单行语句，可以放在一起。\n  > ```\n  >\n  > **python 没有switch语句，只能多个elif语句结合逻辑符号`and,or,not`来控制多分支语句。**\n\n- 循环语句\n\n  > 编程语言基本都有for、while和嵌套循环。python没有do...while循环。\n  >\n  > 循环控制语句有break、continue和pass。\n  >\n  > - while循环\n  >\n  >   ```python\n  >   # while 循环格式\n  >   while condition:#条件只有True和False的本质区别，但是请记住，Python中的True的定义比较广，非0，非null即为True。\n  >       statement\n  >   ```\n  >\n  >   控制语句break、continue\n  >\n  >   - break，退出循环。\n  >   - continue，跳出本次循环，进入下一次。不执行continue之后的语句。\n  >\n  >   *无限循环：判断条件为永远为True*\n  >\n  > - $for...else$\n  >\n  >   Python中有for...else和while...else循环。\n  >\n  >   `表示for或while语句正常执行后，else语句执行。`注意：循环体正常执行，而不是break出来，才会运行else语句。\n  >\n  >   每一轮的循环，for或while内没有break的话，都会执行else语句。\n  >\n  > - for循环\n  >\n  >   用于遍历任何序列项目，如列表字符串。格式：\n  >\n  >   - 普通方式\n  >\n  >   ```python\n  >   for iterating_var in sequence:\n  >       statements\n  >       \n  >   #如下示例\n  >\n  >   for letter in 'python text':\n  >       print ('当前字母：',letter)\n  >       \n  >   fruits = ['banana','apple','orange']\n  >   for fruit in fruits:\n  >       print(\"水果：\",fruit)\n  >   ```\n  >\n  >   - 使用索引\n  >\n  >     ```python\n  >     fruits = ['banana','orange','apple']\n  >     for index in range(len(fruits)):\n  >         print(\"fruit:\",fruits[index])\n  >     ```\n\n- 循环嵌套\n\n  > 类似其他编程语言，python也允许循环嵌套。\n  >\n  > ```python\n  > for iterating_var in sequence:\n  >     for interating_var in sequence:\n  >         statements\n  >     statements\n  > #python中注意缩进来区分代码块，while嵌套类似，也可以互相嵌套。\n  > ```\n  >\n  > - break、continue语句类似其他编程语言，上面已做介绍。\n  >\n  > - pass语句，不做任何事情，一般用做占位语句\n  >\n  >   ```python\n  >   for letter in 'python':\n  >       if letter == 'h':\n  >           pass\n  >       \tprint(\"just for blank\")\n  >       print(\"letter:\",letter)\n  >   ```\n\n\n## 三、结构与api\n\n- Number数据类型\n\n  > Python的Number数据类型，不允许改变，每次赋值都会是一个新的对象。\n  >\n  > ```python\n  > a = 10\n  > b = 12\n  > a = 20 #内存地址已经变了，不像java那样。\n  > #del语句删除\n  > del a\n  > del a,b\n  > ```\n  >\n  > **Number数据支持四种子类型**\n  >\n  > - int整型，正数、负数，无小数点。\n  > - long长整型，无限大小的整数，后加`L`或`l`。\n  > - float浮点型，整数、小数和科学计数。\n  > - complex复数，实数和虚数构成，a+bj或complex(a,b)，a实数，b虚数。\n\n- Python数学函数\n\n  > | 函数            | 返回值                                   |\n  > | ------------- | ------------------------------------- |\n  > | abs(x)        | 绝对值：返回x的绝对值                           |\n  > | ceil(x)       | 取大整：返回x的上入整数，不是四舍五入。如math.ceil(4.1)得5 |\n  > | cmp(x,y)      | 对比：x\\<y，返回-1，x=y返回0，x\\>y 返回1          |\n  > | exp(x)        | e次幂：e的x次幂                             |\n  > | fabs(x)       | 绝对值：返回x的绝对值，含小数点。                     |\n  > | floor(x)      | 取小整：返回x的向下整数。                         |\n  > | log(x)        | log函数                                 |\n  > | max（x1，x2...) | Max函数。                                |\n  > | min(x1,x2...) | Min函数。                                |\n  > | modf(x)       | 分离：返回x的整数和小数部分，符号与x相同，整数部分为float型。    |\n  > | pow(x,y)      | 幂函数：x**y的值                            |\n  > | rount(x[,n])  | 舍入值：x的四舍五入，舍入到小数后n位。                  |\n  > | sqrt(x)       | 开方：x的平方根，x可为负数，返回实数。                  |\n  >\n  > **Math函数**\n  >\n  > - 随机函数random\n  >\n  >   | 函数                             | 描述                                     |\n  >   | ------------------------------ | -------------------------------------- |\n  >   | choice(seq)                    | random.choice(range(10))，从0--9随机挑一个整数。 |\n  >   | randrange([start],stop,[step]) | 指定范围制定基数获取随机数。                         |\n  >   | random()                       | [0,1)内随机数                              |\n  >   | seed([x])                      | 随机数生成器的种子？？                            |\n  >   | shuffle(lst)                   | 序列元素的随机排序                              |\n  >   | uniform(x,y)                   | [x,y]范围内随机生成下一个实数                      |\n  >\n  >   ==注意函数参数[step]之类的，表示为可选参数==\n  >\n  > - 三角函数\n  >\n  >   | 函数         | 描述                              |\n  >   | ---------- | ------------------------------- |\n  >   | acos(x)    | 反余弦（弧度值）                        |\n  >   | asin(x)    | 反正弦                             |\n  >   | atan(x)    | 反正切                             |\n  >   | atan2(y,x) | 指定x，y坐标的反正切值                    |\n  >   | cos(x)     | 余弦                              |\n  >   | hypot(x,y) | 返回欧几里得范数sqrt(x\\*x+y\\*y)         |\n  >   | sin(x)     | 正弦                              |\n  >   | tan(x)     | 正切                              |\n  >   | degress(x) | 弧度转角度。如degress(math.pi/2),得90.0 |\n  >   | radins(x)  | 角度转弧度                           |\n  >\n  > - 数学常量\n  >\n  >   | 常量   | 描述    |\n  >   | ---- | ----- |\n  >   | pi   | 圆周率   |\n  >   | e    | 自然常数e |\n\n- 字符串\n\n  > python中字符串string可用`'`或`\"`符号，无char类型。\n  >\n  > ```python\n  > #字符串可以用[]类似java数组方式截取\n  > a = 'abc'\n  > b = \"hello python\"\n  >\n  > print('a[0]',a[0])\n  > print(\"b[2:7],b[2:7])#关于字符串的截取可参照上一章数据类型里的描述。\n  > ```\n  >\n  > python可以对string字符串更新操作：\n  >\n  > ```python\n  > a = 'hello python'\n  > print('updated:',a[:6]+'beautiful girl'\n  > ```\n  >\n  > - 类似其他语言，python中也使用`\\`转义其他特殊字符。\n  >\n  >   | 转义字符     | 描述                    |\n  >   | -------- | --------------------- |\n  >   | \\ (在行尾时) | 续行符号                  |\n  >   | \\\\\\      | 反斜杠                   |\n  >   | \\'       | 单引号                   |\n  >   | \\\"       | 双引号                   |\n  >   | \\a       | 响铃                    |\n  >   | \\b       | 退格                    |\n  >   | \\e       | 转义                    |\n  >   | \\000     | 空                     |\n  >   | \\n       | 换行                    |\n  >   | \\v       | 纵向制表符                 |\n  >   | \\t       | 横向制表符                 |\n  >   | \\r       | 回车                    |\n  >   | \\f       | 换页                    |\n  >   | \\oyy     | 八进制，yy表字符，如：\\o12代表换行  |\n  >   | \\xyy     | 十六进制，yy表字符，如：\\x0a代表换行 |\n  >   | \\other   | 其他字符将以普通格式输出          |\n  >\n  > - 字符串运算\n  >\n  >   | 操作符    | 描述                              |\n  >   | ------ | ------------------------------- |\n  >   | +      | 串联                              |\n  >   | *      | 重复                              |\n  >   | []     | 截取[index],index位置的字符            |\n  >   | [ : ]  | 截取`:`前后数字范围内，如，[1:4)取不到右边数字的字符。 |\n  >   | in     | 成员运算符，含有返回True                  |\n  >   | not in | 成员运算符，不含有返回True                 |\n  >   | r/R    | 原始字符串，不转义，原始输出。                 |\n  >\n  > - 字符串格式化\n  >\n  >   类似C 语言的printf函数，将需要格式化的数字字符，格式化后传入%s之类的占据的位置。==格式化==\n  >\n  >   | 符号   | 描述            |\n  >   | ---- | ------------- |\n  >   | %c   | 字符及其ASCII码    |\n  >   | %s   | 字符串           |\n  >   | %d   | 整数            |\n  >   | %u   | 无符号整型         |\n  >   | %o   | 无符号八进制数       |\n  >   | %x   | 无符号十六进制数      |\n  >   | %X   | 无符号十六进制数，大写   |\n  >   | %f   | 浮点数子，可指定小数点精度 |\n  >   | %e   | 科学计数法格式化浮点数   |\n  >   | %E   | 同%e           |\n  >   | %g   | %f和%e的简写      |\n  >   | %G   | %f和%e的简写      |\n  >   | %p   | 十六进制格式化变量的地址  |\n  >\n  >   - 格式化操作符辅助指令\n  >\n  >     | 符号     | 功能                   |\n  >     | ------ | -------------------- |\n  >     | *      | 定义宽度或小数精度            |\n  >     | -      | 左对齐                  |\n  >     | +      | 正数前显示+号              |\n  >     | `<sp>` | 正数前显示空格              |\n  >     | #      | 八进制前显示0，十六进制前显示0x或0X |\n  >     | 0      | 显示的数字前填充0，而不是空格      |\n  >     | %      | '%%'输出显示一个'%'        |\n  >     | (var)  | 映射变量（字典参数）           |\n  >     | m.n.   | m显示最小总宽度，n小数后的位数。    |\n  >\n  > - python的三引号\n  >\n  >   **三引号` ``` `通常把复杂的字符串，整段的复制输出，而不管其中是否换行、转义之类的。\n  >\n  >   ==`u`==符号表示Unicode编码，如：\n  >\n  >   ```python\n  >   #如下，则为Unicode格式\n  >   u'hello world'\n  >   u'hello\\u0020world'#效果如上，内部使用了\\0020代表空格\n  >   ```\n  >\n  > ==往后的api会越来越多，本笔记将不再赘述各个类型和函数的api。==\n\n- List列表\n\n  > Python有6个序列类型，常见的为==列表==和==元组==。序列常用操作：`索引`、`切片`、`加`、`乘`、`检查成员`，以及最大最小值的获取。\n  >\n  > - 列表，格式`[ ]`内用`,分隔。\n  >   ```python\n  >   \tlist = [1,'abc',False,list,\"hello pythono\"];#列表元素类型可以不同，可以嵌套列表。类似数组，可以索引，左0，右-1\n  >   ```\n  >   更新，直接赋值新的元素。删除，del对应元素。\n  >\n  > - python列表脚本操作符\n  >\n  >   | 表达式                      | 结果                        | 描述         |\n  >   | ------------------------ | ------------------------- | ---------- |\n  >   | len([1,2,3])             | 3                         | 长度         |\n  >   | [1,2,3]+[4,5,6]          | [1,2,3,4,5,6]             | zu'he      |\n  >   | ['Hi!']*4                | ['Hi!','Hi!','Hi!','Hi!'] | 重复         |\n  >   | 3 in [1,2,3]             | True                      | 判断元素是否属于列表 |\n  >   | for x in [1,2,3]:print x | 1 2 3                     | 遍历 迭代      |\n  >\n  >   **列表的截取，类似字符串的操作。通过索引，取值范围来截取。**\n  >\n  > - Python列表相关的函数&方法\n  >\n  >   ```python\n  >   cmp(list1,list2);#比较两个列表\n  >   len(list);#list长度、元素个数\n  >   max(list);#list最大元素值\n  >   min(list);#list最小元素值\n  >   list(seq);#将元组转化为列表\n  >\n  >   list.append(obj);#列表尾新增对象\n  >   list.count(obj);#统计某元素出现次数\n  >   list.extend(seq);#用新列表扩展\n  >   list.index(obg);#元素第一次出现位置\n  >   list.insert(index,obj);#指定位置插入\n  >   list.pop(obj=list[-1]);#移除列表中最后一个元素，或指定位置的。\n  >   list.remove(obj);#移除第一个找到的该元素\n  >   list.reverse();#反向列表\n  >   list.sort([func]);#排序\n  >   ```\n\n- 元组\n\n  >元组类似列表，但是==不能修改元素==。\n  >\n  >格式`( )`，用`,`分隔。\n  >\n  >```python\n  >tup = ('adb',12,list);\n  >tup2 = ();#空元组\n  >tup3 = (2,);#元组只有一个元素，则必须有个逗号,\n  >```\n  >\n  >**访问元组，类似列表和字符串的查找**，元组不能修改，但是可以==串接==。\n  >\n  >```python\n  >tup1 = (1,2,2);\n  >tup2 = ('ab','cd','ddf');\n  >tup3 = tup1 + tup2;#元组串接。\n  >```\n  >\n  >***元组元素不能删除，但是==元组可以被删除==***\n  >\n  >```python\n  >tup = (1,2,2);\n  >del tup;\n  >```\n  >\n  >`任意无符号的对象，以,分隔，默认为元组`\n  >\n  >- 元组的一些方法和函数，类似列表\n  >\n  >  ```python\n  >  tuple(seq);#列表转化为元组\n  >  ```\n\n- 字典Dictionary\n\n  > 字典类似于java中的map集合。使用键值对`key-value`，格式：=={key1:value1,key2:value2}==\n  >\n  > - **key值唯一**\n  >\n  > - **value值可以任何类型，key值必是不可变类型，如字符串、数字和元组。**\n  >\n  > - 字典内，所有的key不需要都为统一类型\n  >\n  >   ```python\n  >   dict = {\"abc\":'adb','def':23,55:'adb'}\n  >   print (\"dict[55]\");#根据key值，若是没有，会报错。\n  >   ```\n  >\n  > - 字典元素的修改，删除\n  >\n  >   ```python\n  >   del dict[key];#删除指定元素\n  >   dict.clear();#清空字典\n  >   del dict;#删除字典\n  >   ```\n  >\n  > - 字典的函数&方法\n  >\n  >   ```python\n  >   cmp(dict1,dict2);#比较\n  >   len(dict);#计数\n  >   str(dict);#字符输出字典元素\n  >   type(variable);#变量的类型\n  >\n  >   radiansdict.clear();#清空字典\n  >   radiansdict.copy();#字典浅复制\n  >   radiansdict.get(key,default=None);#获取值，若无，返回默认值。\n  >   radiansdict.has_key(key);#查询是否包含指定key值\n  >   radiansdict.items();#遍历显示字典元素数组\n  >   radiansdict.keys();#列表显示所有key\n  >   radiansdict.setdefault(key,default=None);#类似get，若key不存在，则添加。\n  >   radiansdict.update(dict2);#将dict2更新到dict中。\n  >   radiansdict.values();#返回所有value值。\n  >   ```\n\n- python日期时间\n\n  > 类似其他编程语言，时间基于1970年1月1日。Unix和windows支持到2038年？\n  >\n  > - time\n  >\n  >   ```python\n  >   time.time();#获取时间戳\n  >   time.localtime(time.time());#获得时间的元组\n  >   time.asctime(time.localtime(time.time()));#格式化时间\n  >   time.strftime(format[,t]);#自定义字符格式化时间\n  >   # 格式化成2016-03-20 11:45:39形式\n  >   print time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime()) \n  >\n  >   # 格式化成Sat Mar 28 22:24:24 2016形式\n  >   print time.strftime(\"%a %b %d %H:%M:%S %Y\", time.localtime()) \n  >     \n  >   # 将格式字符串转换为时间戳\n  >   a = \"Sat Mar 28 22:24:24 2016\"\n  >   print time.mktime(time.strptime(a,\"%a %b %d %H:%M:%S %Y\"));\n  >   ```\n  >\n  > - calendar\n  >\n  >   ==0-6表示一周，0表示周一。==\n  >\n  >   ```python\n  >   calendar.month(2016,10);#获取制定月份的日历。\n  >   ```\n  >\n  >   **函数和方法不在赘述**\n  >\n  >   datetime、pytz、dateutil模块也是处理时间相关。\n\n- 函数\n\n  > 类似其他编程语言的函数&方法定义，python函数格式：\n  >\n  > ```python\n  > def functionname( parameters ):\n  >     \"函数文档\"\n  >     function_suite\n  >     return [expression]\n  > #def 关键字，声明函数\n  > #functionname 函数名\n  > #(parameters) 参数，多个参数可以，分隔？还是多个括号\n  > #可写声明文档，\n  > #返回值，可以是None。\n  > ```\n  >\n  > **按值传递与按引用传递**\n  >\n  > Python中所有参数的传递，都是==引用传递==，一处修改，原始值则变。\n  >\n  > - 函数的参数：\n  >\n  >   `必备参数`、`关键字参数`、`默认参数`、`不定长参数`\n  >\n  >   ```python\n  >   #必备参数，必须传入的形式，否则报错\n  >   def printStr(str):\n  >       ...\n  >   \treturn;    \n  >   #关键字参数，输入参数的格式顺序，不必和声明的顺序一致。\n  >   def printInfo(name,age):\n  >       print(\"name:\",name);\n  >       print(\"age:\",age)\n  >       return;\n  >   printInfo(age = 27,name = 'jack');\n  >   def printDefault(name,age=20):\n  >       ......\n  >       return;\n  >   #此时可以使用默认参数\n  >   printDefault(name = 'jack');#age 默认了。\n  >\n  >   #不定长参数\n  >   def printLong(arg1,*args):#星号*的那个参数，为可变参数。\n  >       print(arg2);\n  >       for var in args:\n  >           print var;\n  >       return;\n  >   ```\n  >\n  > - Python使用lambda创建匿名函数。\n  >\n  >   - lambda是表达式，函数比def简单\n  >   - 只能在lambda表达式中构建逻辑\n  >   - lambda仅能访问自有参数。\n  >   - lambda似乎只能写一行。\n  >\n  >   ==语法==\n  >\n  >   ```python\n  >   lambda [arg2[,arg2,......]]:expression\n  >   #示例\n  >   sum = lambda arg1,arg2:arg1+arg2;\n  >\n  >   #调用sum函数\n  >   sum(1,2);\n  >   ```\n  >\n  >   **return用于退出函数，无有返回值则是None。**\n  >\n  >   变量作用域，全局和局部，都是作用于其声明范围内。\n\n- Python模块\n\n  > python模块指一段逻辑或函数方法，在python中，模块也是一个对象，可以命名，引用。类似于java中的类文件？\n  >\n  > ```python\n  > import module1[,module2,...]#导入模块，就可以使用其方法和逻辑。\n  > #用类名/文件名.方法/函数,来调用。\n  > from modname import name1[,name2,...]#从指定空间导入模块。\n  > from modname import * #导入指定名称空间下的所有模块。\n  > ```\n  >\n  > 寻找模块的顺序是：当前文件、path路径、系统默认路径。\n  >\n  > - 变量默认都是局部范围的，全局变量需要global声明。\n  > - dir()函数，列表显示。\n  > - globals()和locals(),reload();\n  > - python中也有包，文件的概念。\n\n- Python文件IO和File、异常\n\n  >- 文件I/O\n  >\n  >  `raw_input`\n  >\n  >  `input`\n  >\n  >  ```python\n  >  #raw_input 接受输入的一行\n  >  str = raw_input(\"Please input :\");\n  >  print(\"输入内容为：\",str);#str会接收键盘的输入内容\n  >\n  >  #input类似与raw_input，可以接受输入表达式\n  >  str = input(\"Please input:\");\n  >  print(\"输入内容为：\",str);\n  >  #上面可以输入：[x*5 for x in range(2,10,2)]\n  >  ```\n  >\n  >- file对象操作文件\n  >\n  >  ```python\n  >  file object = open(file_name[,access_mode][,buffering]);#用open()方法打开文件\n  >  file.closed;# true or false\n  >  file.mode;\n  >  file.name;\n  >  file.softspace;#有空格符来结束，需要返回False，不需要，True。\n  >  file.write(string);#不会默认行尾加换行的，。\n  >  file.read([count]);#读取指定个数的字节数。\n  >\n  >  tell();#可知文件内，当前位置。\n  >  seek(offset[,from]);#改变当前位置\n  >\n  >  #python 的os模块有删除、重命名文件的方法\n  >  os.rename(old_name,new_name);\n  >  os.remove(\"test.txt\");#删除文件\n  >  os.mkdir(\"abc\");os.chdir(\"new\");os.getcwd();#显示当前目录。\n  >  os.rmdir();\n  >  ```\n  >\n  >- **异常处理**\n  >\n  >  try/except语句\n  >\n  >  ```python\n  >  try:\n  >      <statements>#运行代码\n  >  except <exception>:\n  >      <e1>#try到异常name\n  >  except <exception>,<data>:\n  >      <e2>#try到异常，并有数据\n  >  else:\n  >      <statements2>#无异常时候运行\n  >  #类似java，python中可以不写exception的name，就会捕获所有异常。\n  >  #也可以\n  >  except(e1,e2,...):\n  >      ...\n  >  #类似java 有try finally\n  >  try:\n  >      <>\n  >  finally:\n  >      <>#总会执行的语句。\n  >  ```\n  >\n  >  ==raise==语句自动触发异常\n  >\n  >  ```python\n  >  raise [Exception[,args[,traceback]]]\n  >  def functionName( level ):\n  >      if level < 1:\n  >          raise Exception(\"Invalid level!\", level)\n  >          # 触发异常后，后面的代码就不会再执行\n  >          \n  >  try:\n  >     # 正常逻辑\n  >  except \"Invalid level!\":#对应自定义的异常名，如上。\n  >     # 触发自定义异常    \n  >  else:\n  >     # 其余代码\n  >\n  >  class MyError(RuntimeError):\n  >      def init(self,arg):\n  >          self.args = arg\n  >          \n  >  #自己触发异常\n  >  try:\n  >      raise MyError(\"hao xiang shu ru cuo le \")\n  >  except Networkerror,e:\n  >      print e.args\n  >  ```\n\n\n## 四、Python高级教程\n\n- 面向对象\n\n  > Python是一种面向对象的解释型语言，类似于其他面向对象的编程语言，需要熟悉一下面向对象的名词概念：\n  >\n  > - `类(class)`：用于描述具有相同属性和方法的对象的集合。描述一类事物，对象是类的实例。\n  > - `类变量`：类中公开化的变量，作用于类的范围内，区别于实例变量。\n  > - `数据成员`：类变量或实例变量，用于处理实例对象相关的数据。\n  > - `方法重写`：重写继承自父类的方法，实现自有的逻辑。override。\n  > - `实例变量`：定义在方法中的变量，作用于方法内。\n  > - `继承`：即一个派生类继承基类的字段和方法。\n  > - `实例化`：创建一个类的实例，类的具体对象。\n  > - `方法`：类中定义的函数。\n  > - `对象`：根据类定义的数据结构构建的一个实例，包含类的数据成员和方法。\n  >\n  > 1. 创建类\n  >\n  >    ```python\n  >    class ClassName:#定义类的关键字class\n  >        '类的描述信息' #帮助文档\n  >        class_suite #类题\n  >    #例如：\n  >    class Employee:\n  >       '所有员工的基类'\n  >       empCount = 0\n  >\n  >       def __init__(self, name, salary):#构造函数\n  >          self.name = name\n  >          self.salary = salary\n  >          Employee.empCount += 1\n  >       \n  >       def displayCount(self):#方法函数\n  >         print \"Total Employee %d\" % Employee.empCount\n  >\n  >       def displayEmployee(self):\n  >          print \"Name : \", self.name,  \", Salary: \", self.salary\n  >    #实例化对象\n  >    objectName = ClassName(...);#根据类的构造函数创建对象。\n  >    #访问方法属性，用object.method();\n  >    objectName.displayCount();\n  >    #可以添加、删除、修改类的属性\n  >    objectName.age = 20;# add attribution\n  >    objectName.age =26;#modify attribution\n  >    del objectName.age # delete attribution\n  >    ```\n  >\n  >\n  >    **Python有专门的函数，处理类的属性和方法**\n  >    getattr(obj,name[,default]);\n  >    setattr(obj,name,value);\n  >    hasattr(obj,name);\n  >    delattr(obj,name);\n  >    ```\n  >\n  > 2. Python内置属性\n  >\n  >    ```python\n  >    #python attribution，用ClassName.function调用。\n  >    __dict__:类的属性\n  >    __doc__:类的文档字符串\n  >    __name__:类名\n  >    __module__:类定义所在的模块\n  >    __bases__类的所有父类构成元素\n  >    ```\n  >\n  > 3. 类似java，python使用内置引用计数器，处理垃圾回收。\n  >\n  > 4. Python的继承：\n  >\n  >    - 格式：class SubClassName [ParentClass1[,ParentClass2,...]]:\n  >\n  >    - Python类的继承==支持多继承==\n  >\n  >    - 派生类继承基类，构造函数不会被自动调用，需要专门调用。\n  >\n  >    - 调用基类方法时候，需要用BaseClassName.而且需要self参数。区别于本类内的函数方法。\n  >\n  >    - 同类函数名，则优先调用本类中的函数方法，若无，再去基类中寻找。\n  >\n  >      ```python\n  >      issbuclass();#判断是否是另一个类的派生类，issubclass(sub,super);\n  >      isinstance(obj,class);#判断一个对象，是不是类的实例。\n  >      ```\n  >\n  > 5. 方法重写与重载\n  >\n  >    - 重写基类的方法，用于实现自己的逻辑。\n  >\n  >    - 基础重载：\n  >\n  >      ```python\n  >      #函数方法，前后两个下划线__init__\n  >      __init__(self[,args])#构造函数\n  >      __del__(self)#删除对象\n  >      __repr__(self)#转化为编译器格式\n  >      __str__(self)#转化为可阅读模式\n  >      __cmp__(self,x)#对象比较\n  >      ```\n  >\n  >    - 运算符重载\n  >\n  >      ```python\n  >      class Vector:\n  >         def __init__(self, a, b):\n  >            self.a = a\n  >            self.b = b\n  >\n  >         def __str__(self):\n  >            return 'Vector (%d, %d)' % (self.a, self.b)\n  >         \n  >         def __add__(self,other):\n  >            return Vector(self.a + other.a, self.b + other.b)\n  >\n  >      v1 = Vector(2,10)\n  >      v2 = Vector(5,-2)\n  >      print v1 + v2#运算符的重载\n  >      #输出结果\n  >      Vector(7,8)\n  >      ```\n  >\n  > 6. **类的属性和方法**\n  >\n  >    - 类的私有属性\n  >\n  >      __private_attrs：两个下划线开头，仅能在类内部使用。self.\\_\\_private_attrs。\n  >\n  >    - 类的方法\n  >\n  >      关键字`def`定义类的方法，类似定义函数。但是类的方法必须包含参数`self`且为第一参数，私有方法：__private_method，内部调用self.\\_\\_private_method\n  >\n  >      ```python\n  >      def method(self[,args]):\n  >          .....\n  >\n  >      ```\n  >\n  >    - Python不允许实例化的类访问私有数据，可用obj._classname\\_attrName访问属性。\n\n- 正则表达式\n\n  > Python的re模块包含了全部的正则表达式。\n  >\n  > compile函数用于构建正则表达式。\n  >\n  > 1. re.match\n  >\n  >    从字符串起始位置匹配，起始不成功匹配，返回None。\n  >\n  >    ```python\n  >    #pattern 正则表达式，string 匹配字符串，flags标志位，如区分大小写，多行匹配等。\n  >    re.match(pattern,string,flags=0);\n  >    group(num= 0)#匹配整个表达式字符串，group可以依次输入多个组号。\n  >    groups();#返回包含所有小组字符串的元组。\n  >    ```\n  >\n  >    示例：\n  >\n  >    ```python\n  >    import re\n  >    print(re.match('www', 'www.runoob.com').span())  # 在起始位置匹配\n  >    print(re.match('com', 'www.runoob.com'))         # 不在起始位置匹配\n  >\n  >    #输出结果\n  >    (0,3)\n  >    None\n  >    ```\n  >\n  >    ```python\n  >    #!/usr/bin/python\n  >    import re\n  >\n  >    line = \"Cats are smarter than dogs\"\n  >\n  >    matchObj = re.match( r'(.*) are (.*?) .*', line, re.M|re.I)\n  >\n  >    if matchObj:\n  >       print \"matchObj.group() : \", matchObj.group()\n  >       print \"matchObj.group(1) : \", matchObj.group(1)\n  >       print \"matchObj.group(2) : \", matchObj.group(2)\n  >    else:\n  >       print \"No match!!\"\n  >\n  >    #输出结果\n  >    matchObj.group() :  Cats are smarter than dogs\n  >    matchObj.group(1) :  Cats\n  >    matchObj.group(2) :  smarter\n  >    ```\n  >\n  > 2. re.search方法\n  >\n  >    扫描整个字符串，并返回第一个成功的匹配。\n  >\n  >    ```python\n  >    re.search(pattern,string,flags=0);\n  >    ```\n  >\n  >    示例：\n  >\n  >    ```python\n  >    #!/usr/bin/python\n  >    # -*- coding: UTF-8 -*- \n  >\n  >    import re\n  >    print(re.search('www', 'www.runoob.com').span())  # 在起始位置匹配\n  >    print(re.search('com', 'www.runoob.com').span())         # 不在起始位置匹配\n  >\n  >    #输出结果\n  >    (0,3)\n  >    (11,14)\n  >    ```\n  >\n  >    ```python\n  >    #!/usr/bin/python\n  >    import re\n  >\n  >    line = \"Cats are smarter than dogs\";\n  >\n  >    searchObj = re.search( r'(.*) are (.*?) .*', line, re.M|re.I)\n  >\n  >    if searchObj:\n  >       print \"searchObj.group() : \", searchObj.group()\n  >       print \"searchObj.group(1) : \", searchObj.group(1)\n  >       print \"searchObj.group(2) : \", searchObj.group(2)\n  >    else:\n  >       print \"Nothing found!!\"\n  >\n  >    #输出结果\n  >    searchObj.group() :  Cats are smarter than dogs\n  >    searchObj.group(1) :  Cats\n  >    searchObj.group(2) :  smarter\n  >    ```\n  >\n  > 3. re.match & re.search\n  >\n  >    `re.match`匹配起始，不成功则None。\n  >\n  >    `re.search`匹配全部。\n  >\n  >    ```python\n  >    #!/usr/bin/python\n  >    import re\n  >\n  >    line = \"Cats are smarter than dogs\";\n  >\n  >    matchObj = re.match( r'dogs', line, re.M|re.I)\n  >    if matchObj:\n  >       print \"match --> matchObj.group() : \", matchObj.group()\n  >    else:\n  >       print \"No match!!\"\n  >\n  >    matchObj = re.search( r'dogs', line, re.M|re.I)\n  >    if matchObj:\n  >       print \"search --> matchObj.group() : \", matchObj.group()\n  >    else:\n  >       print \"No match!!\"\n  >\n  >    #输出结果\n  >    No match!!\n  >    serach --> matchObj.group() : dogs\n  >    ```\n  >\n  > 4. re.sub检索和替换\n  >\n  >    ```python\n  >    re.sub(pattern,rep1,string,max = 0);#count >=0,匹配次数。\n  >    ```\n  >\n  >    示例：\n  >\n  >    ```python\n  >    #!/usr/bin/python\n  >    import re\n  >\n  >    phone = \"2004-959-559 # This is Phone Number\"\n  >\n  >    # Delete Python-style comments\n  >    num = re.sub(r'#.*$', \"\", phone)\n  >    print \"Phone Num : \", num\n  >\n  >    # Remove anything other than digits\n  >    num = re.sub(r'\\D', \"\", phone)    \n  >    print \"Phone Num : \", num\n  >\n  >    #输出结果\n  >    Phone Num :  2004-959-559\n  >    Phone Num :  2004959559\n  >    ```\n  >\n  > 5. 正则表达式的修饰符-可选标志\n  >\n  >    *标志修饰符控制匹配模式，多个标识符可以用按位OR`|`指定*\n  >\n  >    | 修饰符  | 描绘                                |\n  >    | ---- | --------------------------------- |\n  >    | re.l | 匹配不分大小写                           |\n  >    | re.L | 本地化识别(local-aware)匹配              |\n  >    | re.M | 多行匹配，影响`^`和`$`                    |\n  >    | re.S | 使`.`匹配包括行在内的所有字符                  |\n  >    | re.U | Unicode解析字符，影响`\\w`、`\\W`、`\\b`、`\\B` |\n  >    | re.X | 灵活格式                              |\n  >\n  > 6. 正则表达式模式\n  >\n  >    - `字母和数字`表达自身。\n  >    - 多数字母和数字前加`\\`会转义\n  >    - 标点符号均是特殊意思，除非转义。\n  >    - `\\`是转义符\n  >\n  >    ```python\n  >    ^\t匹配字符串的开头\n  >    $\t匹配字符串的末尾。\n  >    .\t匹配任意字符，除了换行符\\n，当re.DOTALL标记被指定时，则可以匹配包括换行符的任意字符。\n  >    [...]\t用来表示一组字符,单独列出：[amk] 匹配 'a'，'m'或'k'\n  >    [^...]\t不在[]中的字符：[^abc] 匹配除了a,b,c之外的字符。\n  >    re*\t匹配0个或多个的表达式。\n  >    re+\t匹配1个或多个的表达式。\n  >    re?\t匹配0个或1个由前面的正则表达式定义的片段，非贪婪方式\n  >    re{ n}\t\n  >    re{ n,}\t精确匹配n个前面表达式。\n  >    re{ n, m}\t匹配 n 到 m 次由前面的正则表达式定义的片段，贪婪方式\n  >    a| b\t匹配a或b\n  >    (re)\tG匹配括号内的表达式，也表示一个组\n  >    (?imx)\t正则表达式包含三种可选标志：i, m, 或 x 。只影响括号中的区域。\n  >    (?-imx)\t正则表达式关闭 i, m, 或 x 可选标志。只影响括号中的区域。\n  >    (?: re)\t类似 (...), 但是不表示一个组\n  >    (?imx: re)\t在括号中使用i, m, 或 x 可选标志\n  >    (?-imx: re)\t在括号中不使用i, m, 或 x 可选标志\n  >    (?#...)\t注释.\n  >    (?= re)\t前向肯定界定符。如果所含正则表达式，以 ... 表示，在当前位置成功匹配时成功，否则失败。但一旦所含表达式已经尝试，匹配引擎根本没有提高；模式的剩余部分还要尝试界定符的右边。\n  >    (?! re)\t前向否定界定符。与肯定界定符相反；当所含表达式不能在字符串当前位置匹配时成功\n  >    (?> re)\t匹配的独立模式，省去回溯。\n  >    \\w\t匹配字母数字及下划线\n  >    \\W\t匹配非字母数字及下划线\n  >    \\s\t匹配任意空白字符，等价于 [\\t\\n\\r\\f].\n  >    \\S\t匹配任意非空字符\n  >    \\d\t匹配任意数字，等价于 [0-9].\n  >    \\D\t匹配任意非数字\n  >    \\A\t匹配字符串开始\n  >    \\Z\t匹配字符串结束，如果是存在换行，只匹配到换行前的结束字符串。c\n  >    \\z\t匹配字符串结束\n  >    \\G\t匹配最后匹配完成的位置。\n  >    \\b\t匹配一个单词边界，也就是指单词和空格间的位置。例如， 'er\\b' 可以匹配\"never\" 中的 'er'，但不能匹配 \"verb\" 中的 'er'。\n  >    \\B\t匹配非单词边界。'er\\B' 能匹配 \"verb\" 中的 'er'，但不能匹配 \"never\" 中的 'er'。\n  >    \\n, \\t, 等.\t匹配一个换行符。匹配一个制表符。等\n  >    \\1...\\9\t匹配第n个分组的子表达式。\n  >    \\10\t匹配第n个分组的子表达式，如果它经匹配。否则指的是八进制字符码的表达式。\n  >    ```\n\n- CGI通用网关接口\n\n  > CGI程序，运行在服务器，python脚本、perl脚本、shell脚本、C/C++程序等。\n  >\n  > Web服务器需支持cgi，通常在/cgi-bin/ /var/www/cgi-bin/\n  >\n  > cgi文件`.cgi`或者各自语言的源文件。\n  >\n  > ```python\n  > #!/usr/bin/python\n  > # -*- coding: UTF-8 -*-\n  >\n  > print \"Content-type:text/html\"\t#向浏览器显示的内容类型\n  > print                               # 空行，告诉服务器结束头部\n  > print '<html>'\n  > print '<head>'\n  > print '<meta charset=\"utf-8\">'\n  > print '<title>Hello Word - 我的第一个 CGI 程序！</title>'\n  > print '</head>'\n  > print '<body>'\n  > print '<h2>Hello Word! 我是来自菜鸟教程的第一CGI程序</h2>'\n  > print '</body>'\n  > print '</html>'\n  > ```\n  >\n  > 如上保存为hello.py，修改权限755。放置于cgi-bin/目录下，即可在浏览器中访问。\n  >\n  > - CGI程序中HTTP头部常用信息\n  >\n  >   | 头                  | 描述              |\n  >   | ------------------ | --------------- |\n  >   | Content-type       | 请求与实体对应的MIME信息。 |\n  >   | Expires:Date       | 响应过期的日期和时间      |\n  >   | Location:URL       | 重定向             |\n  >   | Last-modified:Date | 请求资源的最后修改时间     |\n  >   | Content-length:N   | 请求内容长度          |\n  >   | Set-Cookie:String  | 设置Http Cookie   |\n  >\n  > - CGI环境变量\n  >\n  >   所有CGI程序都接收以下环境变量\n  >\n  >   | 变量名             | 描述                                  |\n  >   | --------------- | ----------------------------------- |\n  >   | CONTENT_TYPE    | MIME类型                              |\n  >   | CONTENT_LENGTH  | 有效数据字节数                             |\n  >   | HTTP_COOKIE     | 客户机内cookie内容                        |\n  >   | HTTP_USER_AGENT | 客户及版本，浏览器信息等。                       |\n  >   | PATH_INFO       | 表示CGI程序名之后的其他路径信息                   |\n  >   | QUERY_STRING    | GET请求时，代表所传递的信息。                    |\n  >   | REMOTE_ADDR     | 客户机ip地址                             |\n  >   | REMOTE_HOST     | 客户机主机名                              |\n  >   | REQUEST_METHOD  | 提供脚本被调用的方法，http/1.0协议，仅GET和POST有意义。 |\n  >   | SCRIPT_FILENAME | CGI脚本完整路径                           |\n  >   | SERVER_NAME     | CGI脚本完整名称                           |\n  >   | SERVER_SOFTWARE | 调用CGI程序的http服务器的名称，版本信息。            |\n  >\n  >   ---\n  >\n  > ```python\n  >       #输出所有cgi环境变量信息\n  >       import os\n  >       print \"Content-type: text/html\"\n  >       print\n  >       print \"<meta charset=\\\"utf-8\\\">\"\n  >       print \"<b>环境变量</b><br>\"\n  >       print \"<ul>\"\n  >       for key in os.environ.keys():\n  >           print \"<li><span style='color:green'>%30s </span>:%s</li>\" % (key,os.environ[key])\n  >       print \"</ul>\"\n  > ```\n  >\n  > - GET&POST\n  >\n  >   浏览器请求服务器的两中主要方式\n  >\n  >   - GET方法\n  >\n  >     ```python\n  >     http://www.test.com/cgi-bin/hello.py?key1=value1&key2=value2\n  >     #GET方法相关注释\n  >     '''\n  >     请求可被缓存，请求保存在浏览器历史纪录，可被收藏书签，请求不应在处理敏感数据时使用，请求有长度限制，请求只应用于取回数据。\n  >     '''\n  >     ```\n  >\n  >   - POST方法\n  >\n  >     post方法较为安全可靠。\n  >\n  > - CGI中使用cookie\n  >\n  >   ```python\n  >   Set-cookie:name=name;expires=date;path=path;domain=domain;secure\n  >   ```\n  >\n  >   **注释：**\n  >\n  >   `name=name`: 需要设置cookie的值(name不能使用\";\"和\",\"号),有多个name值时用 \";\" 分隔，例如：name1=name1;name2=name2;name3=name3。\n  >   `expires=date`: cookie的有效期限,格式： expires=\"Wdy,DD-Mon-YYYY HH:MM:SS\"\n  >   `path=path`: 设置cookie支持的路径,如果path是一个路径，则cookie对这个目录下的所有文件及子目录生效，例如： path=\"/cgi-bin/\"，如果path是一个文件，则cookie指对这个文件生效，例如：path=\"/cgi-bin/cookie.cgi\"。\n  >   `domain=domain`: 对cookie生效的域名，例如：domain=\"www.runoob.com\"\n  >   `secure`: 如果给出此标志，表示cookie只能通过SSL协议的https服务器来传递。\n  >   cookie的接收是通过设置环境变量HTTP_COOKIE来实现的，CGI程序可以通过检索该变量获取cookie信息。\n  >\n  >   - cookie检索\n  >\n  >     ```python\n  >     #cookie信息存储在CGI环境变量HTTP_COOKIE中，\n  >     key1=value1;key=value2;......\n  >     ```\n  >\n  >   - 文件上传\n  >\n  >     ```html\n  >     <!DOCTYPE html>\n  >     <html>\n  >     <head>\n  >     <meta charset=\"utf-8\">\n  >     <title>菜鸟教程(runoob.com)</title>\n  >     </head>\n  >     <body>\n  >      <form enctype=\"multipart/form-data\" \n  >                          action=\"/cgi-bin/save_file.py\" method=\"post\">\n  >        <p>选中文件: <input type=\"file\" name=\"filename\" /></p>\n  >        <p><input type=\"submit\" value=\"上传\" /></p>\n  >        </form>\n  >     </body>\n  >     </html>\n  >     ```\n  >\n  >     上面的html形成一个界面，可以选择上传文件，调用save_file.py脚本\n  >\n  >     ```python\n  >     #!/usr/bin/python\n  >     # -*- coding: UTF-8 -*-\n  >\n  >     import cgi, os\n  >     import cgitb; cgitb.enable()\n  >\n  >     form = cgi.FieldStorage()\n  >\n  >     # 获取文件名\n  >     fileitem = form['filename']\n  >\n  >     # 检测文件是否上传\n  >     if fileitem.filename:\n  >        # 设置文件路径 \n  >        fn = os.path.basename(fileitem.filename)\n  >        open('/tmp/' + fn, 'wb').write(fileitem.file.read())\n  >\n  >        message = '文件 \"' + fn + '\" 上传成功'\n  >        \n  >     else:\n  >        message = '文件没有上传'\n  >        \n  >     print \"\"\"\\\n  >     Content-Type: text/html\\n\n  >     <html>\n  >     <head>\n  >     <meta charset=\"utf-8\">\n  >     <title>菜鸟教程(runoob.com)</title>\n  >     </head>\n  >     <body>\n  >        <p>%s</p>\n  >     </body>\n  >     </html>\n  >     \"\"\" % (message,)\n  >     ```\n  >\n  >     **记得文件的权限设置。**\n  >\n  >     ```python\n  >     #!/usr/bin/python\n  >     # -*- coding: UTF-8 -*-\n  >\n  >     # HTTP 头部\n  >     print \"Content-Disposition: attachment; filename=\\\"foo.txt\\\"\";\n  >     print\n  >     # 打开文件\n  >     fo = open(\"foo.txt\", \"rb\")\n  >\n  >     str = fo.read();\n  >     print str\n  >\n  >     # 关闭文件\n  >     fo.close()\n  >     ```\n  >\n  >     **以上为文件下载**\n\n- Python操作mysql数据库\n\n  > python支持多种数据库，有对应的模块。DB-API使用流程\n  >\n  > 1. 引入api模块。\n  >\n  > 2. 获取数据库链接。\n  >\n  > 3. 执行sql语句和存储。\n  >\n  > 4. 关闭连接。\n  >\n  >    ```python\n  >    #!/usr/bin/python\n  >    # -*- coding: UTF-8 -*-\n  >\n  >    import MySQLdb\n  >\n  >    # 打开数据库连接\n  >    db = MySQLdb.connect(\"localhost\",\"testuser\",\"test123\",\"TESTDB\" )\n  >\n  >    # 使用cursor()方法获取操作游标 \n  >    cursor = db.cursor()\n  >\n  >    # 使用execute方法执行SQL语句\n  >    cursor.execute(\"SELECT VERSION()\")\n  >\n  >    # 使用 fetchone() 方法获取一条数据库。\n  >    data = cursor.fetchone()\n  >\n  >    print \"Database version : %s \" % data\n  >\n  >    # 关闭数据库连接\n  >    db.close()\n  >    ```\n  >\n  > - python数据库mysql，需要mysqldb\n  >\n  >   ```python\n  >   fetchone();#获取下一个查询结果集\n  >   fetchall();#接收全部返回结果行\n  >   rowcount;#只读属性，返回执行execute()后影响的行数\n  >   ```\n  >\n  > - 事务\n  >\n  >   事务的四个属性：\n  >\n  >   - 原子性（atomicity）。一个事务是一个不可分割的工作单位，事务中包括的诸操作要么都做，要么都不做。\n  >   - 一致性（consistency）。事务必须是使数据库从一个一致性状态变到另一个一致性状态。一致性与原子性是密切相关的。\n  >   - 隔离性（isolation）。一个事务的执行不能被其他事务干扰。即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。\n  >   - 持久性（durability）。持续性也称永久性（permanence），指一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。接下来的其他操作或故障不应该对其有任何影响。\n  >\n  >   ***Python DB API 2.0 的事务提供了两个方法 commit 或 rollback。***\n\n- Python网络编程\n\n  > python提供两个级别的网络服务：\n  >\n  > 1、低级别支持基本Socket\n  >\n  > 2、高级别SocketServer\n  >\n  > ==Socket==套接字用于程序在主机间或者进程间通讯。\n  >\n  > ```python\n  > #pyton中socket函数\n  > socket.socket([family[,type[,proto]]])\n  > # family 套接字家族，可用AF_UNIX或AF_INET\n  > #type 类型，面向连接与否，SOCK_STREAM和SOCK_DGRAM\n  > #proto 默认为0\n  > ```\n  >\n  > **Python中socket函数可以参照api文档，此处不在赘述。**\n  >\n  > 示例：\n  >\n  > ```python\n  > #服务端\n  > #!/usr/bin/python\n  > # -*- coding: UTF-8 -*-\n  > # 文件名：server.py\n  >\n  > import socket               # 导入 socket 模块\n  >\n  > s = socket.socket()         # 创建 socket 对象\n  > host = socket.gethostname() # 获取本地主机名\n  > port = 12345                # 设置端口\n  > s.bind((host, port))        # 绑定端口\n  >\n  > s.listen(5)                 # 等待客户端连接\n  > while True:\n  >     c, addr = s.accept()     # 建立客户端连接。\n  >     print '连接地址：', addr\n  >     c.send('欢迎访问菜鸟教程！')\n  >     c.close()                # 关闭连接\n  >     \n  >     \n  > #客户端\n  > #!/usr/bin/python\n  > # -*- coding: UTF-8 -*-\n  > # 文件名：client.py\n  >\n  > import socket               # 导入 socket 模块\n  >\n  > s = socket.socket()         # 创建 socket 对象\n  > host = socket.gethostname() # 获取本地主机名\n  > port = 12345                # 设置端口好\n  >\n  > s.connect((host, port))\n  > print s.recv(1024)\n  > s.close()  \n  > ```\n  >\n  > **Python Internet模块**\n  >\n  > | 协议     | 功能用处      | 端口号  | Python模块                 |\n  > | ------ | --------- | ---- | ------------------------ |\n  > | HTTP   | 网页访问      | 80   | httplib、urllib、xmlrpclib |\n  > | NNTP   | 阅读、张贴新闻文章 | 119  | nntplib                  |\n  > | FTP    | 文件传输      | 20   | ftplib、urllib            |\n  > | SMTP   | 发送邮件      | 25   | smtplib                  |\n  > | POP3   | 接收邮件      | 110  | poplib                   |\n  > | IMAP4  | 获取邮件      | 143  | imaplib                  |\n  > | Telnet | 命令行       | 23   | telnetlib                |\n  > | Gopher | 信息查找      | 70   | gopherlib、urllib         |\n  >\n  > - smtp邮件发送\n  >\n  >   语法格式：\n  >\n  >   ```python\n  >   import smtplib\n  >   #创建对象\n  >   smtpObj = smtplib.SMTP([host[,port[,local_hostname]]])\n  >   #发送邮件\n  >   SMTP.sendmail(from_addr,to_addr,msg[,mail_options,rcpt_options])\n  >   ```\n  >\n  >   示例：\n  >\n  >   ```python\n  >   #!/usr/bin/python\n  >   # -*- coding: UTF-8 -*-\n  >\n  >   import smtplib\n  >   from email.mime.text import MIMEText\n  >   from email.header import Header\n  >\n  >   sender = 'server@server.com'\n  >   receivers = ['receiver@receiver.com']  # 接收邮件，可设置为你的QQ邮箱或者其他邮箱\n  >\n  >   # 三个参数：第一个为文本内容，第二个 plain 设置文本格式，可以是html，text等。第三个 utf-8 设置编码\n  >   message = MIMEText('Python 邮件发送测试...', 'plain', 'utf-8')\n  >   message['From'] = Header(\"菜鸟教程\", 'utf-8')\n  >   message['To'] =  Header(\"测试\", 'utf-8')\n  >\n  >   subject = 'Python SMTP 邮件测试'\n  >   message['Subject'] = Header(subject, 'utf-8')\n  >   ```\n  >\n  >\n  >   try:\n  >       smtpObj = smtplib.SMTP('localhost')\n  >       smtpObj.sendmail(sender, receivers, message.as_string())\n  >       print \"邮件发送成功\"\n  >   except smtplib.SMTPException:\n  >       print \"Error: 无法发送邮件\"\n  >   ```\n  >\n  >   **使用第三方SMTP服务**\n  >\n  >   ```python\n  >   # 第三方 SMTP 服务\n  >   mail_host=\"smtp.XXX.com\"  #设置服务器\n  >   mail_user=\"XXXX\"    #用户名\n  >   mail_pass=\"XXXXXX\"   #密码\n  >\n  >   sender = 'from@runoob.com'\n  >   receivers = ['429240967@qq.com']  # 接收邮件，可设置为你的QQ邮箱或者其他邮箱\n  >\n  >   message = MIMEText('Python 邮件发送测试...', 'plain', 'utf-8')\n  >   message['From'] = Header(\"菜鸟教程\", 'utf-8')\n  >   message['To'] =  Header(\"测试\", 'utf-8')\n  >\n  >   subject = 'Python SMTP 邮件测试'\n  >   message['Subject'] = Header(subject, 'utf-8')\n  >\n  >\n  >   try:\n  >       smtpObj = smtplib.SMTP() \n  >       smtpObj.connect(mail_host, 25)    # 25 为 SMTP 端口号\n  >       smtpObj.login(mail_user,mail_pass)  \n  >       smtpObj.sendmail(sender, receivers, message.as_string())\n  >       print \"邮件发送成功\"\n  >   except smtplib.SMTPException:\n  >       print \"Error: 无法发送邮件\"\n  >   ```\n  >\n  >   创建带附件的邮件发送\n  >\n  > ```python\n  >   #!/usr/bin/python\n  >   # -*- coding: UTF-8 -*-\n  >\n  >   import smtplib\n  >   from email.mime.text import MIMEText\n  >   from email.mime.multipart import MIMEMultipart\n  >   from email.header import Header\n  >\n  >   sender = 'from@runoob.com'\n  >   receivers = ['429240967@qq.com']  # 接收邮件，可设置为你的QQ邮箱或者其他邮箱\n  >\n  >   #创建一个带附件的实例\n  >   message = MIMEMultipart()\n  >   message['From'] = Header(\"菜鸟教程\", 'utf-8')\n  >   message['To'] =  Header(\"测试\", 'utf-8')\n  >   subject = 'Python SMTP 邮件测试'\n  >   message['Subject'] = Header(subject, 'utf-8')\n  >\n  >   #邮件正文内容\n  >   message.attach(MIMEText('这是菜鸟教程Python 邮件发送测试……', 'plain', 'utf-8'))\n  >\n  >   # 构造附件1，传送当前目录下的 test.txt 文件\n  >   att1 = MIMEText(open('test.txt', 'rb').read(), 'base64', 'utf-8')\n  >   att1[\"Content-Type\"] = 'application/octet-stream'\n  >   # 这里的filename可以任意写，写什么名字，邮件中显示什么名字\n  >   att1[\"Content-Disposition\"] = 'attachment; filename=\"test.txt\"'\n  >   message.attach(att1)\n  >\n  >   # 构造附件2，传送当前目录下的 runoob.txt 文件\n  >   att2 = MIMEText(open('runoob.txt', 'rb').read(), 'base64', 'utf-8')\n  >   att2[\"Content-Type\"] = 'application/octet-stream'\n  >   att2[\"Content-Disposition\"] = 'attachment; filename=\"runoob.txt\"'\n  >   message.attach(att2)\n  >\n  >   try:\n  >       smtpObj = smtplib.SMTP('localhost')\n  >       smtpObj.sendmail(sender, receivers, message.as_string())\n  >       print \"邮件发送成功\"\n  >   except smtplib.SMTPException:\n  >       print \"Error: 无法发送邮件\"\n  > ```\n  >\n  > - **Python多线程**\n  >\n  >   关于多线程需要注意两点：\n  >\n  >   - 线程可以被中断(抢占)\n  >   - 其他线程运行时，线程可以休眠(退让)\n  >\n  >   **python使用线程两种方式**\n  >\n  >   1、函数\n  >   ```python\n  >   thread.start_new_thread(function,args[,kwargs])\n  >   # 注释：function-线程函数，args-参数，必须是tuple类型。kwargs-可选参数。\n  >   ```\n  >   示例：\n  >   ```python\n  >   #!/usr/bin/python\n  >   # -*- coding: UTF-8 -*-\n  >\n  >   import thread\n  >   import time\n  >\n  >   # 为线程定义一个函数\n  >   def print_time( threadName, delay):\n  >      count = 0\n  >      while count < 5:\n  >         time.sleep(delay)\n  >         count += 1\n  >         print \"%s: %s\" % ( threadName, time.ctime(time.time()) )\n  >\n  >   # 创建两个线程\n  >   try:\n  >      thread.start_new_thread( print_time, (\"Thread-1\", 2, ) )\n  >      thread.start_new_thread( print_time, (\"Thread-2\", 4, ) )\n  >   except:\n  >      print \"Error: unable to start thread\"\n  >\n  >   while 1:\n  >      pass\n  >   ```\n  >\n  >   *线程结束依靠线程函数，或者手动`thread.exit()`,`抛异常`。*\n  >\n  > - ***线程模块***\n  >\n  >   1、`thread`和`threading`两个标准库\n  >\n  >   ```python\n  >   threading.currentThread();\n  >   threading.enumerate();\n  >   threading.activeCount();\n  >   run();start();join([time]);isAlive();getName();setName();\n  >   ```\n  >\n  >   2、使用Threading模块创建线程\n  >\n  >   ```python\n  >   #继承threading.Thread然后重写__init__方法和run方法\n  >   #!/usr/bin/python\n  >   # -*- coding: UTF-8 -*-\n  >\n  >   import threading\n  >   import time\n  >\n  >   exitFlag = 0\n  >\n  >   class myThread (threading.Thread):   #继承父类threading.Thread\n  >       def __init__(self, threadID, name, counter):\n  >           threading.Thread.__init__(self)\n  >           self.threadID = threadID\n  >           self.name = name\n  >           self.counter = counter\n  >       def run(self):                   #把要执行的代码写到run函数里面 线程在创建后会直接运行run函数 \n  >           print \"Starting \" + self.name\n  >           print_time(self.name, self.counter, 5)\n  >           print \"Exiting \" + self.name\n  >\n  >   def print_time(threadName, delay, counter):\n  >       while counter:\n  >           if exitFlag:\n  >               thread.exit()\n  >           time.sleep(delay)\n  >           print \"%s: %s\" % (threadName, time.ctime(time.time()))\n  >           counter -= 1\n  >\n  >   # 创建新线程\n  >   thread1 = myThread(1, \"Thread-1\", 1)\n  >   thread2 = myThread(2, \"Thread-2\", 2)\n  >\n  >   # 开启线程\n  >   thread1.start()\n  >   thread2.start()\n  >\n  >   print \"Exiting Main Thread\"\n  >   ```\n  >\n  > - 线程同步\n  >\n  >   Python中线程同步使用`Lock`和`Rlock`两个对象，都含有`acquire`和`release`方法。\n  >\n  >   示例：\n  >\n  >   ```python\n  >   #!/usr/bin/python\n  >   # -*- coding: UTF-8 -*-\n  >\n  >   import threading\n  >   import time\n  >\n  >   class myThread (threading.Thread):\n  >       def __init__(self, threadID, name, counter):\n  >           threading.Thread.__init__(self)\n  >           self.threadID = threadID\n  >           self.name = name\n  >           self.counter = counter\n  >       def run(self):\n  >           print \"Starting \" + self.name\n  >          # 获得锁，成功获得锁定后返回True\n  >          # 可选的timeout参数不填时将一直阻塞直到获得锁定\n  >          # 否则超时后将返回False\n  >           threadLock.acquire()\n  >           print_time(self.name, self.counter, 3)\n  >           # 释放锁\n  >           threadLock.release()\n  >\n  >   def print_time(threadName, delay, counter):\n  >       while counter:\n  >           time.sleep(delay)\n  >           print \"%s: %s\" % (threadName, time.ctime(time.time()))\n  >           counter -= 1\n  >\n  >   threadLock = threading.Lock()\n  >   threads = []\n  >\n  >   # 创建新线程\n  >   thread1 = myThread(1, \"Thread-1\", 1)\n  >   thread2 = myThread(2, \"Thread-2\", 2)\n  >\n  >   # 开启新线程\n  >   thread1.start()\n  >   thread2.start()\n  >\n  >   # 添加线程到线程列表\n  >   threads.append(thread1)\n  >   threads.append(thread2)\n  >\n  >   # 等待所有线程完成\n  >   for t in threads:\n  >       t.join()\n  >   print \"Exiting Main Thread\"\n  >   ```\n  >\n  > - **线程优先级队列**\n  >\n  >   Python的Queue模块提供了FIFO和LIFO队列，Queue、LifoQueue和优先级PriorityQueue。\n\n- Python其他特性\n\n  > - xml解析\n  >\n  > xml解析通用的有`SAX`、`DOM`、python有`ElementTree`\n  >\n  > *一般编程中都很少用SAX和DOM解析，都有自己平台的优化解析方式。*\n  >\n  > **注：**因DOM需要将XML数据映射到内存中的树，一是比较慢，二是比较耗内存，而SAX流式读取XML文件，比较快，占用内存少，但需要用户实现回调函数（handler）。\n  >\n  > - GUI编程\n  >\n  >   python提供多种图形界面库`Thinter`、`wxPython`、`Jython`\n  >\n  >   **Tkinter**\n  >\n  >   ```python\n  >   import Tkinter\n  >   top = Tkinter.Tk()\n  >   #进入消息循环\n  >   top.mainloog()\n  >   #如上代码执行，可产生小窗口界面了。\n  >   ```\n  >\n  >   Tkinter包含常用的窗口控件，以及属性和方法，使用时候可差用api。\n  >\n  > - JSON\n  >\n  >   python使用Demjson，`decode`和`encode`解码编码。\n  >\n  >   ```python\n  >   demjson.encode(self,obj,nest_level=0)\n  >   ```\n  >\n  >   示例：(构建json)\n  >\n  >   ```python\n  >   #!/usr/bin/python\n  >   import demjson\n  >\n  >   data = [{'a':1,'b':2,'c':3,'d':4,'e':5}]\n  >\n  >   json = demjson.encode(data)\n  >   print(json)\n  >   ```\n  >\n  >   解析Json\n  >\n  >   ```python\n  >   demjson.decode(self,txt)\n  >   ```\n  >\n  >   ```python\n  >   #!/usr/bin/python\n  >   import demjson\n  >\n  >   json = '{\"a\":1,\"b\":2,\"c\":3,\"d\":4,\"e\":5}';\n  >\n  >   text = demjson.decode(json)\n  >   print(text)\n  >   ```\n\n\n\n**初次接触Python，笔记难免简单初级，仅供自己学习只用，希望也对网友有所益处。**\n\n\n\n\n\n\n","source":"_posts/Python学习笔记.md","raw":"---\ntitle: \"Python学习笔记\"\ndate: 2016-11-03 16:57\nauthor: 冰路梦\ntag:\n    - Linux\ncategories:\n    - Linux\n---\n\n# Python学习笔记\n\n<!-- TOC -->\n\n- [Python学习笔记](#python学习笔记)\n    - [一、基本语法](#一基本语法)\n    - [二、 数据与逻辑](#二-数据与逻辑)\n    - [三、结构与api](#三结构与api)\n    - [四、Python高级教程](#四python高级教程)\n\n<!-- /TOC -->\n## 一、基本语法\n\n`python2.x与python3.x区别很大，新版特性很强，更优化，此笔记学习新版本特性，暂不关注旧版本。`\n\n- 标识符\n\n  > 1. 标识符：数字、字母、下划线，且数字不开头。\n  > 2. 区分大小写；\n  > 3. 单下划线开头`_foo`表示不能直接访问，需要用接口访问，不可\"from xxx import\"导入。`__foo`双下划线表示私有。前后双下划线`___foo__`特殊函数。\n\n- 保留字符\n\n  > and、exec、not、assert、finally、or、break、for、pass、class、from、print、continue、global、raise、def、if、return、del、import、try、elif、in、while、else、is、with、except、lambda、yield。\n  >\n  > Python3中`end`可以将结果输入到同一行，或者输出尾部追加不同的字符\n  >\n  > ```python\n  > #Fibonacci Series: 斐波那契数列\n  > a,b = 0,1\n  > while b<1000:\n  >     print(b,end=',')\n  >     a,b = b,a+b\n  > ```\n  >\n  > ​\n\n- 行与缩进\n\n  > **Python区别于其他语言最大处，python不用{}来控制类、函数和逻辑块。而是用缩进，空格数无妨，但是逻辑块前后必须相同个数空格，使用空格或者tab都行，但是最好别混用**\n  >\n  > ```python\n  > if True:\n  >     print \"True\"\n  > else:\n  >     print \"False\"\n  > ```\n  >\n  > python一般新的一行意味着上个语句块结束。但是多行语句可以用`\\`符号：\n  >\n  > ```python\n  > string = abc + \\\n  > \t\tbcd + \\\n  >     \tefg\n  > # 要是有{}、[]、()的语句，断为多行也无妨。\n  > girls = ['allen','angle'\n  >         'candy','lily'\n  >         'merry']\n  > ```\n\n- 引号与注释\n\n  > python的字符串可以用单引号`'`、双引号`\"`、三引号`'''`包括，其中三引号可以多行分段，有时候可以用作注释。\n  >\n  > `#`符号表示注释，可写在当行，或者代码尾部。多行注释使用三个单引号` ''' `，或三个双引号`\"\"\"`包括。\n  >\n  > ```python\n  > #单行注释\n  > if True\n  > \tprint 'hello' #单个注释，新版中需要加()，视为函数\n  > '''\n  > 多行注释\n  > 是这么写的\n  > 真的可以么\n  > 在markdown语法中\n  > '''\n  > \"\"\"\n  > 似乎可以\n  > 好像是的哦\n  > \"\"\"    \n  > ```\n  >\n  > *函数之间，类与函数间用`空行`分开，便于阅读和维护*\n\n- 零碎语法\n\n  >- 多条语句同一行，可以`;`分割。\n  >\n  >- 同一代码组，首行关键字后`:`结尾，同一代码组前后空白数相同。\n  >\n  >- 旧版中文编码需要头文件注释\n  >\n  >- Python中True和False，似乎不能小写哦！\n  >\n  >  ```python\n  >  #!/usr/bin/python\n  >  #_*_coding:utf-8 _*_\n  >  #或者\n  >  #coding=utf-8\n  >  #新版python已经默认支持了。\n  >  ```\n  >\n\n\n##  二、 数据与逻辑\n\n- 变量类型\n\n  > **python变量赋值不需要类型声明**\n  >\n  > ```python\n  > counter = 100 #整型\n  > miles = 1000.0 # 浮点型\n  > name = \"John\" #字符串\n  > a = b = c = 1 #多个变量同时赋值\n  > a, b, c = 1,2,\"John\" #多变量多类型赋值,个数必须对应。\n  > ```\n  >\n  > python五种标准数据类型：\n  >\n  > - Numbers数字\n  >\n  >   该类型变量赋值后不可改变，重新赋值实质上是分配新的对象。\n  >\n  >   ```python\n  >   a = 1,b=2,c=9\n  >   #del是删除语句\n  >   del a\n  >   del a,b\n  >   # Number有四种不同类型，int、long、float、complex（复数）\n  >   #注意：python新版中，没有long，多了一个bytes。\n  >   8899887897l#后面的l容易与1混淆，一般写作L\n  >   ```\n  >\n  > - String字符串\n  >\n  >   由字母、数字、下划线组成，两种顺序，0开始至后，-1开始向前。\n  >\n  >   string的截取\n  >\n  >   ```python\n  >   s = 'I`m a good boy'\n  >   s[3:9]#其结果是截取对应标号的字符串为新的字符，可以0--size，也可以-1--向前。记住区间[)右边取不到哦\n  >   print s #输出s字符串\n  >   print s[1]#输入下标为1的字母\n  >   print s[1:5]#输出下标1-5，但不含5那个字符\n  >   print s + \"add\" # 字符串连接\n  >   print s * 2 # 重复输出两次\n  >   ```\n  >\n  > - List列表\n  >\n  >   python列表可以混合不同类型数据，嵌套列表，可以使用类似string的方法取子列表。`[]`表示\n  >\n  >   ```python\n  >   list = ['python',666,2.14,'study']\n  >   tinylist = [123,'John']\n  >   print list #完整输出\n  >   print list[0]#输出指定下标元素\n  >   print list[1:3]#输出1-3的元素\n  >   print list[2:]#输出2之后所有元素\n  >   print tinylist * 2 # 重复两次输出\n  >   print list + tinylist#组合列表\n  >   ```\n  >\n  > - Tuple元组\n  >\n  >   元组类似list，`()`标识，`,`分割，不能二次赋值。\n  >\n  >   ```python\n  >   list = [1,2,'abc']\n  >   tuple = (1,2,'abc')\n  >   list[0] = 'ABC'#可以更新\n  >   tuple[0]= 4 #错误，元组数据不能更新\n  >   ```\n  >\n  > - Dictionary字典\n  >\n  >   Dictionary被视为python最为灵活的内置数据结构，列表为有序对象集合，字典则为无序元素结合。区别在于，Dictionary类似与map集合，键值对key-value。`{}`标识\n  >\n  >   ```python\n  >   dict = {}\n  >   dict['one'] = \"This is one\"\n  >   dict[2] = \"This is 2\"\n  >   tinydict = {'name':'john','code':1234,'dept':'good',22:879.0L}\n  >   print dict['one'] #根据键值输出元素\n  >   print dict # 输出所有元素\n  >   print dict.keys()#输出所有key\n  >   print tinydict.vales()#输出所有值value\n  >   ```\n  >\n  > - Set(集合)\n  >\n  >   无序不重复的序列，主要用于成员关系测试和重复文件删除。\n  >\n  >   可以使用大括号`({})`或者`set()`函数创建集合，注意：创建一个空集合必须用 set() 而不是 `{ }`，因为 `{ }` 是用来创建一个空字典。\n  >\n  > **类型转换**，对应数据类型作为函数名即可,返回结果。\n  >\n  > |          函数           |               描述                |\n  > | :-------------------: | :-----------------------------: |\n  > |    int(x [,base])     |            将x转换为一个整数            |\n  > |   long(x [,base] )    |           将x转换为一个长整数            |\n  > |       float(x)        |           将x转换到一个浮点数            |\n  > | complex(real [,imag]) |             创建一个复数              |\n  > |        str(x)         |          将对象 x 转换为字符串           |\n  > |        repr(x)        |         将对象 x 转换为表达式字符串         |\n  > |       eval(str)       |  用来计算在字符串中的有效Python表达式,并返回一个对象  |\n  > |       tuple(s)        |          将序列 s 转换为一个元组          |\n  > |        list(s)        |          将序列 s 转换为一个列表          |\n  > |        set(s)         |             转换为可变集合             |\n  > |        dict(d)        | 创建一个字典。d 必须是一个序列 (key,value)元组。 |\n  > |     frozenset(s)      |            转换为不可变集合             |\n  > |        chr(x)         |          将一个整数转换为一个字符           |\n  > |       unichr(x)       |        将一个整数转换为Unicode字符        |\n  > |        ord(x)         |          将一个字符转换为它的整数值          |\n  > |        hex(x)         |        将一个整数转换为一个十六进制字符串        |\n  > |        oct(x)         |        将一个整数转换为一个八进制字符串         |\n  >\n\n- 运算符号\n\n  >Python运算符支持一下类型：\n  >\n  >- 算术运算符\n  >- 比较（关系）运算符\n  >- 赋值运算符\n  >- 逻辑运算符\n  >- 位运算符\n  >- 成员运算符\n  >- 身份运算符\n  >\n  >**运算符有优先级**\n  >\n  >1. 算术运算符\n  >\n  >   | 运算符  | 描述    | 实例     |\n  >   | ---- | ----- | ------ |\n  >   | +    | 加号    | 1+2得3  |\n  >   | -    | 减号    | 3-1得2  |\n  >   | *    | 乘号    | 2*2得4  |\n  >   | /    | 除号    | 9/3得3  |\n  >   | %    | 取模，求余 | 5%2得1  |\n  >   | **   | 幂     | 2**3得8 |\n  >   | //   | 取整除   | 9//2得4 |\n  >\n  >   示例：\n  >\n  >   ```python\n  >   #算术运算符，得到运算结果\n  >   a,b,c = 12,2,3#多变量同时赋值\n  >   print (a+b)\n  >   print (a-b)\n  >   print (a*b)\n  >   print (a/b)\n  >   print (a%c)\n  >   print (b**c)\n  >   print (c//b)\n  >   ```\n  >\n  >2. 比较运算符\n  >\n  >   | 运算符  | 描述          |\n  >   | ---- | ----------- |\n  >   | ==   | 等于，比较对象是否相等 |\n  >   | !=   | 不等于         |\n  >   | <>   | 不等于         |\n  >   | >    | 大于          |\n  >   | <    | 小于          |\n  >   | \\>=  | 大于等于        |\n  >   | <=   | 小于等于        |\n  >\n  >   示例：\n  >\n  >   ```python\n  >   #关系运算符，返回结果为 True或False\n  >   a,b,c = 12,2,3\n  >   print(a==b)\n  >   print(a!=b)\n  >   print(a<>b)#，新版python中，已经废弃。\n  >   print(a>b)\n  >   print(a<b)\n  >   print(a>=b)\n  >   print(a<=b)\n  >   ```\n  >\n  >3. 赋值运算符\n  >\n  >   | 运算符  | 描述   | 实例                 |\n  >   | ---- | ---- | ------------------ |\n  >   | =    | 简单赋值 | c=a+b,将a+b的结果赋值给c  |\n  >   | +=   | 加法赋值 | c+=a等效于c=c+a       |\n  >   | -=   | 减法赋值 | c-=a等效于c=c-a       |\n  >   | *=   | 乘法赋值 | c*=a等效于c=c\\*a      |\n  >   | /=   | 除法赋值 | c/=a等效于c=c/a       |\n  >   | %=   | 取模赋值 | c%=a等效于c=c%a       |\n  >   | **=  | 幂赋值  | c\\*\\*=a等效于c=c\\*\\*a |\n  >   | //=  | 取整赋值 | c//=a等效于c=c//a     |\n  >\n  >   示例：\n  >\n  >   ```python\n  >   #简单演示\n  >   a,b,c=12,2,3\n  >   #print(c=a)#不能直接在print内写赋值\n  >   c=a\n  >   print(c)\n  >   c=c**b\n  >   print(c**=b)\n  >   ```\n  >\n  >4. 位运算符\n  >\n  >   位运算既是将数字看作二进制，进行运算。\n  >\n  >   | 运算符  | 描述                                       |\n  >   | ---- | ---------------------------------------- |\n  >   | &    | **`按位与`**：两数二进制对齐，对应位置都是1，则为1，否则为0。      |\n  >   | \\|   | **`按位或`**：两数二进制，对应位置有一个为1，则为1。           |\n  >   | ^    | **`按位异或`**：两数二进制，对应位置相异，则为1。             |\n  >   | ~    | **`按位取反`**：对数据的二进制，各个位置取相反，变1为0，变0为1。    |\n  >   | <<   | **`左移动`**：运算数二进制全部左移动若干位，\"<<\"右边的数决定左移位数。**高位丢弃，低位补0** |\n  >   | \\>>  | **`右移动`**：运算数二进制全部右移动软敢为，\">>\"右边的数决定右移位数。 |\n  >\n  >   示例：\n  >\n  >   ```python\n  >   a = 60 # 60 = 0011 1100\n  >   b = 13 # 13 = 0000 1101\n  >   c = 0\n  >   c = a & b\n  >   print(\"a & b :\",c)# 12 = 0000 1100\n  >   c = a | b\n  >   print(\"a | b :\",c)# 61 = 0011 1101\n  >   c = a ^ b\n  >   print(\"a ^ b :\",c)# 49 = 0011 0001\n  >   c = ~a\n  >   print(\"~a :\",c)# -61 = 1100 0011\n  >   c = a<<2\n  >   print(\"a<<2 :\",c) # 240 = 1111 0000\n  >   c = a>>2\n  >   print(\"a>>2 :\",c) # 15 = 0000 1111\n  >   ```\n  >\n  >5. 逻辑运算符\n  >\n  >   | 运算符  | 表达式     | 描述                                       |\n  >   | ---- | ------- | ---------------------------------------- |\n  >   | and  | x and y | **`布尔与`** ：如果x为False，x and y返回False，否则返回y的计算值。 |\n  >   | or   | x or y  | **`布尔或`**：如果x非零，返回x值，否则返回y的计算值。          |\n  >   | not  | not x   | **`布尔非`**：若x为True，返回False，若x为False，返回True。 |\n  >\n  >   示例:\n  >\n  >   ```python\n  >   #True是1，False是0\n  >   \"\"\"所以可以在逻辑运算中判断，是否为0 或者1，来决定true和false\"\"\"\n  >   a, b, c = 12,2,3\n  >   print(a and b)#似乎非0，即认为True\n  >   print(a or b)\n  >   print(not a)\n  >   ```\n  >\n  >6. 成员运算符\n  >\n  >   | 运算符    | 描述                                     |\n  >   | ------ | -------------------------------------- |\n  >   | in     | x in y，若有True，无False。**`y为列表、字符串、元组`** |\n  >   | not in | x not in y 若y中无x则True，有则False。         |\n  >\n  >   示例：\n  >\n  >   ```python\n  >   a = 10;b = 20;list = [1,2,10,15]\n  >   print(a in list)\n  >   print(a not in list)\n  >   print(b in list)\n  >   ```\n  >\n  >7. 身份运算符\n  >\n  >   | 运算符    | 描述                                       |\n  >   | ------ | ---------------------------------------- |\n  >   | is     | `is`判断两标识符是否引用同一对象，id同则返回True，否则False。   |\n  >   | is not | `is not`判断两标识符是不是引用不同对象，id不同则返回True，否则False。 |\n  >\n  >   示例：\n  >\n  >   ```python\n  >   a = 10;b = 20;\n  >   print(a is b);print(a is not b);\n  >   ```\n  >\n  >8. 运算符优先级\n  >\n  >   | 运算符                      | 优先级描述                |\n  >   | ------------------------ | -------------------- |\n  >   | **                       | 指数，最高优先级             |\n  >   | ~，+，-                    | 按位取反、一元加(+@)、一元减(-@) |\n  >   | *，/，%，//                 | 乘、除、取模、取整            |\n  >   | +，-                      | 加法、减法                |\n  >   | \\>>，<<                   | 右移动、左移动              |\n  >   | &                        | 位'AND'               |\n  >   | ^，\\|                     | 位运算                  |\n  >   | <=，<，>，>=                | 比较运算符                |\n  >   | <>，==，!=                 | 等于运算符                |\n  >   | =，%=，/=，//=，-=，+=，*=，**= | 赋值运算符                |\n  >   | is，is not                | 身份运算符                |\n  >   | in ，not in               | 成员运算符                |\n  >   | not，or，and               | 逻辑运算符                |\n  >\n  >   **注意：若是不确定优先级，可以用()来控制**\n\n- 条件语句\n\n  > Python中指定非0，和非null，的值为Ture，0和null为False。\n  >\n  > ```python\n  > # python 中多个条件语句，if..elif...elif...else\n  > if condition1:\n  >     statement1\n  > elif condition2:\n  >     statement2\n  > else:\n  >     statement\n  > if (1!=2) : print \"OK\";#单行语句，可以放在一起。\n  > ```\n  >\n  > **python 没有switch语句，只能多个elif语句结合逻辑符号`and,or,not`来控制多分支语句。**\n\n- 循环语句\n\n  > 编程语言基本都有for、while和嵌套循环。python没有do...while循环。\n  >\n  > 循环控制语句有break、continue和pass。\n  >\n  > - while循环\n  >\n  >   ```python\n  >   # while 循环格式\n  >   while condition:#条件只有True和False的本质区别，但是请记住，Python中的True的定义比较广，非0，非null即为True。\n  >       statement\n  >   ```\n  >\n  >   控制语句break、continue\n  >\n  >   - break，退出循环。\n  >   - continue，跳出本次循环，进入下一次。不执行continue之后的语句。\n  >\n  >   *无限循环：判断条件为永远为True*\n  >\n  > - $for...else$\n  >\n  >   Python中有for...else和while...else循环。\n  >\n  >   `表示for或while语句正常执行后，else语句执行。`注意：循环体正常执行，而不是break出来，才会运行else语句。\n  >\n  >   每一轮的循环，for或while内没有break的话，都会执行else语句。\n  >\n  > - for循环\n  >\n  >   用于遍历任何序列项目，如列表字符串。格式：\n  >\n  >   - 普通方式\n  >\n  >   ```python\n  >   for iterating_var in sequence:\n  >       statements\n  >       \n  >   #如下示例\n  >\n  >   for letter in 'python text':\n  >       print ('当前字母：',letter)\n  >       \n  >   fruits = ['banana','apple','orange']\n  >   for fruit in fruits:\n  >       print(\"水果：\",fruit)\n  >   ```\n  >\n  >   - 使用索引\n  >\n  >     ```python\n  >     fruits = ['banana','orange','apple']\n  >     for index in range(len(fruits)):\n  >         print(\"fruit:\",fruits[index])\n  >     ```\n\n- 循环嵌套\n\n  > 类似其他编程语言，python也允许循环嵌套。\n  >\n  > ```python\n  > for iterating_var in sequence:\n  >     for interating_var in sequence:\n  >         statements\n  >     statements\n  > #python中注意缩进来区分代码块，while嵌套类似，也可以互相嵌套。\n  > ```\n  >\n  > - break、continue语句类似其他编程语言，上面已做介绍。\n  >\n  > - pass语句，不做任何事情，一般用做占位语句\n  >\n  >   ```python\n  >   for letter in 'python':\n  >       if letter == 'h':\n  >           pass\n  >       \tprint(\"just for blank\")\n  >       print(\"letter:\",letter)\n  >   ```\n\n\n## 三、结构与api\n\n- Number数据类型\n\n  > Python的Number数据类型，不允许改变，每次赋值都会是一个新的对象。\n  >\n  > ```python\n  > a = 10\n  > b = 12\n  > a = 20 #内存地址已经变了，不像java那样。\n  > #del语句删除\n  > del a\n  > del a,b\n  > ```\n  >\n  > **Number数据支持四种子类型**\n  >\n  > - int整型，正数、负数，无小数点。\n  > - long长整型，无限大小的整数，后加`L`或`l`。\n  > - float浮点型，整数、小数和科学计数。\n  > - complex复数，实数和虚数构成，a+bj或complex(a,b)，a实数，b虚数。\n\n- Python数学函数\n\n  > | 函数            | 返回值                                   |\n  > | ------------- | ------------------------------------- |\n  > | abs(x)        | 绝对值：返回x的绝对值                           |\n  > | ceil(x)       | 取大整：返回x的上入整数，不是四舍五入。如math.ceil(4.1)得5 |\n  > | cmp(x,y)      | 对比：x\\<y，返回-1，x=y返回0，x\\>y 返回1          |\n  > | exp(x)        | e次幂：e的x次幂                             |\n  > | fabs(x)       | 绝对值：返回x的绝对值，含小数点。                     |\n  > | floor(x)      | 取小整：返回x的向下整数。                         |\n  > | log(x)        | log函数                                 |\n  > | max（x1，x2...) | Max函数。                                |\n  > | min(x1,x2...) | Min函数。                                |\n  > | modf(x)       | 分离：返回x的整数和小数部分，符号与x相同，整数部分为float型。    |\n  > | pow(x,y)      | 幂函数：x**y的值                            |\n  > | rount(x[,n])  | 舍入值：x的四舍五入，舍入到小数后n位。                  |\n  > | sqrt(x)       | 开方：x的平方根，x可为负数，返回实数。                  |\n  >\n  > **Math函数**\n  >\n  > - 随机函数random\n  >\n  >   | 函数                             | 描述                                     |\n  >   | ------------------------------ | -------------------------------------- |\n  >   | choice(seq)                    | random.choice(range(10))，从0--9随机挑一个整数。 |\n  >   | randrange([start],stop,[step]) | 指定范围制定基数获取随机数。                         |\n  >   | random()                       | [0,1)内随机数                              |\n  >   | seed([x])                      | 随机数生成器的种子？？                            |\n  >   | shuffle(lst)                   | 序列元素的随机排序                              |\n  >   | uniform(x,y)                   | [x,y]范围内随机生成下一个实数                      |\n  >\n  >   ==注意函数参数[step]之类的，表示为可选参数==\n  >\n  > - 三角函数\n  >\n  >   | 函数         | 描述                              |\n  >   | ---------- | ------------------------------- |\n  >   | acos(x)    | 反余弦（弧度值）                        |\n  >   | asin(x)    | 反正弦                             |\n  >   | atan(x)    | 反正切                             |\n  >   | atan2(y,x) | 指定x，y坐标的反正切值                    |\n  >   | cos(x)     | 余弦                              |\n  >   | hypot(x,y) | 返回欧几里得范数sqrt(x\\*x+y\\*y)         |\n  >   | sin(x)     | 正弦                              |\n  >   | tan(x)     | 正切                              |\n  >   | degress(x) | 弧度转角度。如degress(math.pi/2),得90.0 |\n  >   | radins(x)  | 角度转弧度                           |\n  >\n  > - 数学常量\n  >\n  >   | 常量   | 描述    |\n  >   | ---- | ----- |\n  >   | pi   | 圆周率   |\n  >   | e    | 自然常数e |\n\n- 字符串\n\n  > python中字符串string可用`'`或`\"`符号，无char类型。\n  >\n  > ```python\n  > #字符串可以用[]类似java数组方式截取\n  > a = 'abc'\n  > b = \"hello python\"\n  >\n  > print('a[0]',a[0])\n  > print(\"b[2:7],b[2:7])#关于字符串的截取可参照上一章数据类型里的描述。\n  > ```\n  >\n  > python可以对string字符串更新操作：\n  >\n  > ```python\n  > a = 'hello python'\n  > print('updated:',a[:6]+'beautiful girl'\n  > ```\n  >\n  > - 类似其他语言，python中也使用`\\`转义其他特殊字符。\n  >\n  >   | 转义字符     | 描述                    |\n  >   | -------- | --------------------- |\n  >   | \\ (在行尾时) | 续行符号                  |\n  >   | \\\\\\      | 反斜杠                   |\n  >   | \\'       | 单引号                   |\n  >   | \\\"       | 双引号                   |\n  >   | \\a       | 响铃                    |\n  >   | \\b       | 退格                    |\n  >   | \\e       | 转义                    |\n  >   | \\000     | 空                     |\n  >   | \\n       | 换行                    |\n  >   | \\v       | 纵向制表符                 |\n  >   | \\t       | 横向制表符                 |\n  >   | \\r       | 回车                    |\n  >   | \\f       | 换页                    |\n  >   | \\oyy     | 八进制，yy表字符，如：\\o12代表换行  |\n  >   | \\xyy     | 十六进制，yy表字符，如：\\x0a代表换行 |\n  >   | \\other   | 其他字符将以普通格式输出          |\n  >\n  > - 字符串运算\n  >\n  >   | 操作符    | 描述                              |\n  >   | ------ | ------------------------------- |\n  >   | +      | 串联                              |\n  >   | *      | 重复                              |\n  >   | []     | 截取[index],index位置的字符            |\n  >   | [ : ]  | 截取`:`前后数字范围内，如，[1:4)取不到右边数字的字符。 |\n  >   | in     | 成员运算符，含有返回True                  |\n  >   | not in | 成员运算符，不含有返回True                 |\n  >   | r/R    | 原始字符串，不转义，原始输出。                 |\n  >\n  > - 字符串格式化\n  >\n  >   类似C 语言的printf函数，将需要格式化的数字字符，格式化后传入%s之类的占据的位置。==格式化==\n  >\n  >   | 符号   | 描述            |\n  >   | ---- | ------------- |\n  >   | %c   | 字符及其ASCII码    |\n  >   | %s   | 字符串           |\n  >   | %d   | 整数            |\n  >   | %u   | 无符号整型         |\n  >   | %o   | 无符号八进制数       |\n  >   | %x   | 无符号十六进制数      |\n  >   | %X   | 无符号十六进制数，大写   |\n  >   | %f   | 浮点数子，可指定小数点精度 |\n  >   | %e   | 科学计数法格式化浮点数   |\n  >   | %E   | 同%e           |\n  >   | %g   | %f和%e的简写      |\n  >   | %G   | %f和%e的简写      |\n  >   | %p   | 十六进制格式化变量的地址  |\n  >\n  >   - 格式化操作符辅助指令\n  >\n  >     | 符号     | 功能                   |\n  >     | ------ | -------------------- |\n  >     | *      | 定义宽度或小数精度            |\n  >     | -      | 左对齐                  |\n  >     | +      | 正数前显示+号              |\n  >     | `<sp>` | 正数前显示空格              |\n  >     | #      | 八进制前显示0，十六进制前显示0x或0X |\n  >     | 0      | 显示的数字前填充0，而不是空格      |\n  >     | %      | '%%'输出显示一个'%'        |\n  >     | (var)  | 映射变量（字典参数）           |\n  >     | m.n.   | m显示最小总宽度，n小数后的位数。    |\n  >\n  > - python的三引号\n  >\n  >   **三引号` ``` `通常把复杂的字符串，整段的复制输出，而不管其中是否换行、转义之类的。\n  >\n  >   ==`u`==符号表示Unicode编码，如：\n  >\n  >   ```python\n  >   #如下，则为Unicode格式\n  >   u'hello world'\n  >   u'hello\\u0020world'#效果如上，内部使用了\\0020代表空格\n  >   ```\n  >\n  > ==往后的api会越来越多，本笔记将不再赘述各个类型和函数的api。==\n\n- List列表\n\n  > Python有6个序列类型，常见的为==列表==和==元组==。序列常用操作：`索引`、`切片`、`加`、`乘`、`检查成员`，以及最大最小值的获取。\n  >\n  > - 列表，格式`[ ]`内用`,分隔。\n  >   ```python\n  >   \tlist = [1,'abc',False,list,\"hello pythono\"];#列表元素类型可以不同，可以嵌套列表。类似数组，可以索引，左0，右-1\n  >   ```\n  >   更新，直接赋值新的元素。删除，del对应元素。\n  >\n  > - python列表脚本操作符\n  >\n  >   | 表达式                      | 结果                        | 描述         |\n  >   | ------------------------ | ------------------------- | ---------- |\n  >   | len([1,2,3])             | 3                         | 长度         |\n  >   | [1,2,3]+[4,5,6]          | [1,2,3,4,5,6]             | zu'he      |\n  >   | ['Hi!']*4                | ['Hi!','Hi!','Hi!','Hi!'] | 重复         |\n  >   | 3 in [1,2,3]             | True                      | 判断元素是否属于列表 |\n  >   | for x in [1,2,3]:print x | 1 2 3                     | 遍历 迭代      |\n  >\n  >   **列表的截取，类似字符串的操作。通过索引，取值范围来截取。**\n  >\n  > - Python列表相关的函数&方法\n  >\n  >   ```python\n  >   cmp(list1,list2);#比较两个列表\n  >   len(list);#list长度、元素个数\n  >   max(list);#list最大元素值\n  >   min(list);#list最小元素值\n  >   list(seq);#将元组转化为列表\n  >\n  >   list.append(obj);#列表尾新增对象\n  >   list.count(obj);#统计某元素出现次数\n  >   list.extend(seq);#用新列表扩展\n  >   list.index(obg);#元素第一次出现位置\n  >   list.insert(index,obj);#指定位置插入\n  >   list.pop(obj=list[-1]);#移除列表中最后一个元素，或指定位置的。\n  >   list.remove(obj);#移除第一个找到的该元素\n  >   list.reverse();#反向列表\n  >   list.sort([func]);#排序\n  >   ```\n\n- 元组\n\n  >元组类似列表，但是==不能修改元素==。\n  >\n  >格式`( )`，用`,`分隔。\n  >\n  >```python\n  >tup = ('adb',12,list);\n  >tup2 = ();#空元组\n  >tup3 = (2,);#元组只有一个元素，则必须有个逗号,\n  >```\n  >\n  >**访问元组，类似列表和字符串的查找**，元组不能修改，但是可以==串接==。\n  >\n  >```python\n  >tup1 = (1,2,2);\n  >tup2 = ('ab','cd','ddf');\n  >tup3 = tup1 + tup2;#元组串接。\n  >```\n  >\n  >***元组元素不能删除，但是==元组可以被删除==***\n  >\n  >```python\n  >tup = (1,2,2);\n  >del tup;\n  >```\n  >\n  >`任意无符号的对象，以,分隔，默认为元组`\n  >\n  >- 元组的一些方法和函数，类似列表\n  >\n  >  ```python\n  >  tuple(seq);#列表转化为元组\n  >  ```\n\n- 字典Dictionary\n\n  > 字典类似于java中的map集合。使用键值对`key-value`，格式：=={key1:value1,key2:value2}==\n  >\n  > - **key值唯一**\n  >\n  > - **value值可以任何类型，key值必是不可变类型，如字符串、数字和元组。**\n  >\n  > - 字典内，所有的key不需要都为统一类型\n  >\n  >   ```python\n  >   dict = {\"abc\":'adb','def':23,55:'adb'}\n  >   print (\"dict[55]\");#根据key值，若是没有，会报错。\n  >   ```\n  >\n  > - 字典元素的修改，删除\n  >\n  >   ```python\n  >   del dict[key];#删除指定元素\n  >   dict.clear();#清空字典\n  >   del dict;#删除字典\n  >   ```\n  >\n  > - 字典的函数&方法\n  >\n  >   ```python\n  >   cmp(dict1,dict2);#比较\n  >   len(dict);#计数\n  >   str(dict);#字符输出字典元素\n  >   type(variable);#变量的类型\n  >\n  >   radiansdict.clear();#清空字典\n  >   radiansdict.copy();#字典浅复制\n  >   radiansdict.get(key,default=None);#获取值，若无，返回默认值。\n  >   radiansdict.has_key(key);#查询是否包含指定key值\n  >   radiansdict.items();#遍历显示字典元素数组\n  >   radiansdict.keys();#列表显示所有key\n  >   radiansdict.setdefault(key,default=None);#类似get，若key不存在，则添加。\n  >   radiansdict.update(dict2);#将dict2更新到dict中。\n  >   radiansdict.values();#返回所有value值。\n  >   ```\n\n- python日期时间\n\n  > 类似其他编程语言，时间基于1970年1月1日。Unix和windows支持到2038年？\n  >\n  > - time\n  >\n  >   ```python\n  >   time.time();#获取时间戳\n  >   time.localtime(time.time());#获得时间的元组\n  >   time.asctime(time.localtime(time.time()));#格式化时间\n  >   time.strftime(format[,t]);#自定义字符格式化时间\n  >   # 格式化成2016-03-20 11:45:39形式\n  >   print time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime()) \n  >\n  >   # 格式化成Sat Mar 28 22:24:24 2016形式\n  >   print time.strftime(\"%a %b %d %H:%M:%S %Y\", time.localtime()) \n  >     \n  >   # 将格式字符串转换为时间戳\n  >   a = \"Sat Mar 28 22:24:24 2016\"\n  >   print time.mktime(time.strptime(a,\"%a %b %d %H:%M:%S %Y\"));\n  >   ```\n  >\n  > - calendar\n  >\n  >   ==0-6表示一周，0表示周一。==\n  >\n  >   ```python\n  >   calendar.month(2016,10);#获取制定月份的日历。\n  >   ```\n  >\n  >   **函数和方法不在赘述**\n  >\n  >   datetime、pytz、dateutil模块也是处理时间相关。\n\n- 函数\n\n  > 类似其他编程语言的函数&方法定义，python函数格式：\n  >\n  > ```python\n  > def functionname( parameters ):\n  >     \"函数文档\"\n  >     function_suite\n  >     return [expression]\n  > #def 关键字，声明函数\n  > #functionname 函数名\n  > #(parameters) 参数，多个参数可以，分隔？还是多个括号\n  > #可写声明文档，\n  > #返回值，可以是None。\n  > ```\n  >\n  > **按值传递与按引用传递**\n  >\n  > Python中所有参数的传递，都是==引用传递==，一处修改，原始值则变。\n  >\n  > - 函数的参数：\n  >\n  >   `必备参数`、`关键字参数`、`默认参数`、`不定长参数`\n  >\n  >   ```python\n  >   #必备参数，必须传入的形式，否则报错\n  >   def printStr(str):\n  >       ...\n  >   \treturn;    \n  >   #关键字参数，输入参数的格式顺序，不必和声明的顺序一致。\n  >   def printInfo(name,age):\n  >       print(\"name:\",name);\n  >       print(\"age:\",age)\n  >       return;\n  >   printInfo(age = 27,name = 'jack');\n  >   def printDefault(name,age=20):\n  >       ......\n  >       return;\n  >   #此时可以使用默认参数\n  >   printDefault(name = 'jack');#age 默认了。\n  >\n  >   #不定长参数\n  >   def printLong(arg1,*args):#星号*的那个参数，为可变参数。\n  >       print(arg2);\n  >       for var in args:\n  >           print var;\n  >       return;\n  >   ```\n  >\n  > - Python使用lambda创建匿名函数。\n  >\n  >   - lambda是表达式，函数比def简单\n  >   - 只能在lambda表达式中构建逻辑\n  >   - lambda仅能访问自有参数。\n  >   - lambda似乎只能写一行。\n  >\n  >   ==语法==\n  >\n  >   ```python\n  >   lambda [arg2[,arg2,......]]:expression\n  >   #示例\n  >   sum = lambda arg1,arg2:arg1+arg2;\n  >\n  >   #调用sum函数\n  >   sum(1,2);\n  >   ```\n  >\n  >   **return用于退出函数，无有返回值则是None。**\n  >\n  >   变量作用域，全局和局部，都是作用于其声明范围内。\n\n- Python模块\n\n  > python模块指一段逻辑或函数方法，在python中，模块也是一个对象，可以命名，引用。类似于java中的类文件？\n  >\n  > ```python\n  > import module1[,module2,...]#导入模块，就可以使用其方法和逻辑。\n  > #用类名/文件名.方法/函数,来调用。\n  > from modname import name1[,name2,...]#从指定空间导入模块。\n  > from modname import * #导入指定名称空间下的所有模块。\n  > ```\n  >\n  > 寻找模块的顺序是：当前文件、path路径、系统默认路径。\n  >\n  > - 变量默认都是局部范围的，全局变量需要global声明。\n  > - dir()函数，列表显示。\n  > - globals()和locals(),reload();\n  > - python中也有包，文件的概念。\n\n- Python文件IO和File、异常\n\n  >- 文件I/O\n  >\n  >  `raw_input`\n  >\n  >  `input`\n  >\n  >  ```python\n  >  #raw_input 接受输入的一行\n  >  str = raw_input(\"Please input :\");\n  >  print(\"输入内容为：\",str);#str会接收键盘的输入内容\n  >\n  >  #input类似与raw_input，可以接受输入表达式\n  >  str = input(\"Please input:\");\n  >  print(\"输入内容为：\",str);\n  >  #上面可以输入：[x*5 for x in range(2,10,2)]\n  >  ```\n  >\n  >- file对象操作文件\n  >\n  >  ```python\n  >  file object = open(file_name[,access_mode][,buffering]);#用open()方法打开文件\n  >  file.closed;# true or false\n  >  file.mode;\n  >  file.name;\n  >  file.softspace;#有空格符来结束，需要返回False，不需要，True。\n  >  file.write(string);#不会默认行尾加换行的，。\n  >  file.read([count]);#读取指定个数的字节数。\n  >\n  >  tell();#可知文件内，当前位置。\n  >  seek(offset[,from]);#改变当前位置\n  >\n  >  #python 的os模块有删除、重命名文件的方法\n  >  os.rename(old_name,new_name);\n  >  os.remove(\"test.txt\");#删除文件\n  >  os.mkdir(\"abc\");os.chdir(\"new\");os.getcwd();#显示当前目录。\n  >  os.rmdir();\n  >  ```\n  >\n  >- **异常处理**\n  >\n  >  try/except语句\n  >\n  >  ```python\n  >  try:\n  >      <statements>#运行代码\n  >  except <exception>:\n  >      <e1>#try到异常name\n  >  except <exception>,<data>:\n  >      <e2>#try到异常，并有数据\n  >  else:\n  >      <statements2>#无异常时候运行\n  >  #类似java，python中可以不写exception的name，就会捕获所有异常。\n  >  #也可以\n  >  except(e1,e2,...):\n  >      ...\n  >  #类似java 有try finally\n  >  try:\n  >      <>\n  >  finally:\n  >      <>#总会执行的语句。\n  >  ```\n  >\n  >  ==raise==语句自动触发异常\n  >\n  >  ```python\n  >  raise [Exception[,args[,traceback]]]\n  >  def functionName( level ):\n  >      if level < 1:\n  >          raise Exception(\"Invalid level!\", level)\n  >          # 触发异常后，后面的代码就不会再执行\n  >          \n  >  try:\n  >     # 正常逻辑\n  >  except \"Invalid level!\":#对应自定义的异常名，如上。\n  >     # 触发自定义异常    \n  >  else:\n  >     # 其余代码\n  >\n  >  class MyError(RuntimeError):\n  >      def init(self,arg):\n  >          self.args = arg\n  >          \n  >  #自己触发异常\n  >  try:\n  >      raise MyError(\"hao xiang shu ru cuo le \")\n  >  except Networkerror,e:\n  >      print e.args\n  >  ```\n\n\n## 四、Python高级教程\n\n- 面向对象\n\n  > Python是一种面向对象的解释型语言，类似于其他面向对象的编程语言，需要熟悉一下面向对象的名词概念：\n  >\n  > - `类(class)`：用于描述具有相同属性和方法的对象的集合。描述一类事物，对象是类的实例。\n  > - `类变量`：类中公开化的变量，作用于类的范围内，区别于实例变量。\n  > - `数据成员`：类变量或实例变量，用于处理实例对象相关的数据。\n  > - `方法重写`：重写继承自父类的方法，实现自有的逻辑。override。\n  > - `实例变量`：定义在方法中的变量，作用于方法内。\n  > - `继承`：即一个派生类继承基类的字段和方法。\n  > - `实例化`：创建一个类的实例，类的具体对象。\n  > - `方法`：类中定义的函数。\n  > - `对象`：根据类定义的数据结构构建的一个实例，包含类的数据成员和方法。\n  >\n  > 1. 创建类\n  >\n  >    ```python\n  >    class ClassName:#定义类的关键字class\n  >        '类的描述信息' #帮助文档\n  >        class_suite #类题\n  >    #例如：\n  >    class Employee:\n  >       '所有员工的基类'\n  >       empCount = 0\n  >\n  >       def __init__(self, name, salary):#构造函数\n  >          self.name = name\n  >          self.salary = salary\n  >          Employee.empCount += 1\n  >       \n  >       def displayCount(self):#方法函数\n  >         print \"Total Employee %d\" % Employee.empCount\n  >\n  >       def displayEmployee(self):\n  >          print \"Name : \", self.name,  \", Salary: \", self.salary\n  >    #实例化对象\n  >    objectName = ClassName(...);#根据类的构造函数创建对象。\n  >    #访问方法属性，用object.method();\n  >    objectName.displayCount();\n  >    #可以添加、删除、修改类的属性\n  >    objectName.age = 20;# add attribution\n  >    objectName.age =26;#modify attribution\n  >    del objectName.age # delete attribution\n  >    ```\n  >\n  >\n  >    **Python有专门的函数，处理类的属性和方法**\n  >    getattr(obj,name[,default]);\n  >    setattr(obj,name,value);\n  >    hasattr(obj,name);\n  >    delattr(obj,name);\n  >    ```\n  >\n  > 2. Python内置属性\n  >\n  >    ```python\n  >    #python attribution，用ClassName.function调用。\n  >    __dict__:类的属性\n  >    __doc__:类的文档字符串\n  >    __name__:类名\n  >    __module__:类定义所在的模块\n  >    __bases__类的所有父类构成元素\n  >    ```\n  >\n  > 3. 类似java，python使用内置引用计数器，处理垃圾回收。\n  >\n  > 4. Python的继承：\n  >\n  >    - 格式：class SubClassName [ParentClass1[,ParentClass2,...]]:\n  >\n  >    - Python类的继承==支持多继承==\n  >\n  >    - 派生类继承基类，构造函数不会被自动调用，需要专门调用。\n  >\n  >    - 调用基类方法时候，需要用BaseClassName.而且需要self参数。区别于本类内的函数方法。\n  >\n  >    - 同类函数名，则优先调用本类中的函数方法，若无，再去基类中寻找。\n  >\n  >      ```python\n  >      issbuclass();#判断是否是另一个类的派生类，issubclass(sub,super);\n  >      isinstance(obj,class);#判断一个对象，是不是类的实例。\n  >      ```\n  >\n  > 5. 方法重写与重载\n  >\n  >    - 重写基类的方法，用于实现自己的逻辑。\n  >\n  >    - 基础重载：\n  >\n  >      ```python\n  >      #函数方法，前后两个下划线__init__\n  >      __init__(self[,args])#构造函数\n  >      __del__(self)#删除对象\n  >      __repr__(self)#转化为编译器格式\n  >      __str__(self)#转化为可阅读模式\n  >      __cmp__(self,x)#对象比较\n  >      ```\n  >\n  >    - 运算符重载\n  >\n  >      ```python\n  >      class Vector:\n  >         def __init__(self, a, b):\n  >            self.a = a\n  >            self.b = b\n  >\n  >         def __str__(self):\n  >            return 'Vector (%d, %d)' % (self.a, self.b)\n  >         \n  >         def __add__(self,other):\n  >            return Vector(self.a + other.a, self.b + other.b)\n  >\n  >      v1 = Vector(2,10)\n  >      v2 = Vector(5,-2)\n  >      print v1 + v2#运算符的重载\n  >      #输出结果\n  >      Vector(7,8)\n  >      ```\n  >\n  > 6. **类的属性和方法**\n  >\n  >    - 类的私有属性\n  >\n  >      __private_attrs：两个下划线开头，仅能在类内部使用。self.\\_\\_private_attrs。\n  >\n  >    - 类的方法\n  >\n  >      关键字`def`定义类的方法，类似定义函数。但是类的方法必须包含参数`self`且为第一参数，私有方法：__private_method，内部调用self.\\_\\_private_method\n  >\n  >      ```python\n  >      def method(self[,args]):\n  >          .....\n  >\n  >      ```\n  >\n  >    - Python不允许实例化的类访问私有数据，可用obj._classname\\_attrName访问属性。\n\n- 正则表达式\n\n  > Python的re模块包含了全部的正则表达式。\n  >\n  > compile函数用于构建正则表达式。\n  >\n  > 1. re.match\n  >\n  >    从字符串起始位置匹配，起始不成功匹配，返回None。\n  >\n  >    ```python\n  >    #pattern 正则表达式，string 匹配字符串，flags标志位，如区分大小写，多行匹配等。\n  >    re.match(pattern,string,flags=0);\n  >    group(num= 0)#匹配整个表达式字符串，group可以依次输入多个组号。\n  >    groups();#返回包含所有小组字符串的元组。\n  >    ```\n  >\n  >    示例：\n  >\n  >    ```python\n  >    import re\n  >    print(re.match('www', 'www.runoob.com').span())  # 在起始位置匹配\n  >    print(re.match('com', 'www.runoob.com'))         # 不在起始位置匹配\n  >\n  >    #输出结果\n  >    (0,3)\n  >    None\n  >    ```\n  >\n  >    ```python\n  >    #!/usr/bin/python\n  >    import re\n  >\n  >    line = \"Cats are smarter than dogs\"\n  >\n  >    matchObj = re.match( r'(.*) are (.*?) .*', line, re.M|re.I)\n  >\n  >    if matchObj:\n  >       print \"matchObj.group() : \", matchObj.group()\n  >       print \"matchObj.group(1) : \", matchObj.group(1)\n  >       print \"matchObj.group(2) : \", matchObj.group(2)\n  >    else:\n  >       print \"No match!!\"\n  >\n  >    #输出结果\n  >    matchObj.group() :  Cats are smarter than dogs\n  >    matchObj.group(1) :  Cats\n  >    matchObj.group(2) :  smarter\n  >    ```\n  >\n  > 2. re.search方法\n  >\n  >    扫描整个字符串，并返回第一个成功的匹配。\n  >\n  >    ```python\n  >    re.search(pattern,string,flags=0);\n  >    ```\n  >\n  >    示例：\n  >\n  >    ```python\n  >    #!/usr/bin/python\n  >    # -*- coding: UTF-8 -*- \n  >\n  >    import re\n  >    print(re.search('www', 'www.runoob.com').span())  # 在起始位置匹配\n  >    print(re.search('com', 'www.runoob.com').span())         # 不在起始位置匹配\n  >\n  >    #输出结果\n  >    (0,3)\n  >    (11,14)\n  >    ```\n  >\n  >    ```python\n  >    #!/usr/bin/python\n  >    import re\n  >\n  >    line = \"Cats are smarter than dogs\";\n  >\n  >    searchObj = re.search( r'(.*) are (.*?) .*', line, re.M|re.I)\n  >\n  >    if searchObj:\n  >       print \"searchObj.group() : \", searchObj.group()\n  >       print \"searchObj.group(1) : \", searchObj.group(1)\n  >       print \"searchObj.group(2) : \", searchObj.group(2)\n  >    else:\n  >       print \"Nothing found!!\"\n  >\n  >    #输出结果\n  >    searchObj.group() :  Cats are smarter than dogs\n  >    searchObj.group(1) :  Cats\n  >    searchObj.group(2) :  smarter\n  >    ```\n  >\n  > 3. re.match & re.search\n  >\n  >    `re.match`匹配起始，不成功则None。\n  >\n  >    `re.search`匹配全部。\n  >\n  >    ```python\n  >    #!/usr/bin/python\n  >    import re\n  >\n  >    line = \"Cats are smarter than dogs\";\n  >\n  >    matchObj = re.match( r'dogs', line, re.M|re.I)\n  >    if matchObj:\n  >       print \"match --> matchObj.group() : \", matchObj.group()\n  >    else:\n  >       print \"No match!!\"\n  >\n  >    matchObj = re.search( r'dogs', line, re.M|re.I)\n  >    if matchObj:\n  >       print \"search --> matchObj.group() : \", matchObj.group()\n  >    else:\n  >       print \"No match!!\"\n  >\n  >    #输出结果\n  >    No match!!\n  >    serach --> matchObj.group() : dogs\n  >    ```\n  >\n  > 4. re.sub检索和替换\n  >\n  >    ```python\n  >    re.sub(pattern,rep1,string,max = 0);#count >=0,匹配次数。\n  >    ```\n  >\n  >    示例：\n  >\n  >    ```python\n  >    #!/usr/bin/python\n  >    import re\n  >\n  >    phone = \"2004-959-559 # This is Phone Number\"\n  >\n  >    # Delete Python-style comments\n  >    num = re.sub(r'#.*$', \"\", phone)\n  >    print \"Phone Num : \", num\n  >\n  >    # Remove anything other than digits\n  >    num = re.sub(r'\\D', \"\", phone)    \n  >    print \"Phone Num : \", num\n  >\n  >    #输出结果\n  >    Phone Num :  2004-959-559\n  >    Phone Num :  2004959559\n  >    ```\n  >\n  > 5. 正则表达式的修饰符-可选标志\n  >\n  >    *标志修饰符控制匹配模式，多个标识符可以用按位OR`|`指定*\n  >\n  >    | 修饰符  | 描绘                                |\n  >    | ---- | --------------------------------- |\n  >    | re.l | 匹配不分大小写                           |\n  >    | re.L | 本地化识别(local-aware)匹配              |\n  >    | re.M | 多行匹配，影响`^`和`$`                    |\n  >    | re.S | 使`.`匹配包括行在内的所有字符                  |\n  >    | re.U | Unicode解析字符，影响`\\w`、`\\W`、`\\b`、`\\B` |\n  >    | re.X | 灵活格式                              |\n  >\n  > 6. 正则表达式模式\n  >\n  >    - `字母和数字`表达自身。\n  >    - 多数字母和数字前加`\\`会转义\n  >    - 标点符号均是特殊意思，除非转义。\n  >    - `\\`是转义符\n  >\n  >    ```python\n  >    ^\t匹配字符串的开头\n  >    $\t匹配字符串的末尾。\n  >    .\t匹配任意字符，除了换行符\\n，当re.DOTALL标记被指定时，则可以匹配包括换行符的任意字符。\n  >    [...]\t用来表示一组字符,单独列出：[amk] 匹配 'a'，'m'或'k'\n  >    [^...]\t不在[]中的字符：[^abc] 匹配除了a,b,c之外的字符。\n  >    re*\t匹配0个或多个的表达式。\n  >    re+\t匹配1个或多个的表达式。\n  >    re?\t匹配0个或1个由前面的正则表达式定义的片段，非贪婪方式\n  >    re{ n}\t\n  >    re{ n,}\t精确匹配n个前面表达式。\n  >    re{ n, m}\t匹配 n 到 m 次由前面的正则表达式定义的片段，贪婪方式\n  >    a| b\t匹配a或b\n  >    (re)\tG匹配括号内的表达式，也表示一个组\n  >    (?imx)\t正则表达式包含三种可选标志：i, m, 或 x 。只影响括号中的区域。\n  >    (?-imx)\t正则表达式关闭 i, m, 或 x 可选标志。只影响括号中的区域。\n  >    (?: re)\t类似 (...), 但是不表示一个组\n  >    (?imx: re)\t在括号中使用i, m, 或 x 可选标志\n  >    (?-imx: re)\t在括号中不使用i, m, 或 x 可选标志\n  >    (?#...)\t注释.\n  >    (?= re)\t前向肯定界定符。如果所含正则表达式，以 ... 表示，在当前位置成功匹配时成功，否则失败。但一旦所含表达式已经尝试，匹配引擎根本没有提高；模式的剩余部分还要尝试界定符的右边。\n  >    (?! re)\t前向否定界定符。与肯定界定符相反；当所含表达式不能在字符串当前位置匹配时成功\n  >    (?> re)\t匹配的独立模式，省去回溯。\n  >    \\w\t匹配字母数字及下划线\n  >    \\W\t匹配非字母数字及下划线\n  >    \\s\t匹配任意空白字符，等价于 [\\t\\n\\r\\f].\n  >    \\S\t匹配任意非空字符\n  >    \\d\t匹配任意数字，等价于 [0-9].\n  >    \\D\t匹配任意非数字\n  >    \\A\t匹配字符串开始\n  >    \\Z\t匹配字符串结束，如果是存在换行，只匹配到换行前的结束字符串。c\n  >    \\z\t匹配字符串结束\n  >    \\G\t匹配最后匹配完成的位置。\n  >    \\b\t匹配一个单词边界，也就是指单词和空格间的位置。例如， 'er\\b' 可以匹配\"never\" 中的 'er'，但不能匹配 \"verb\" 中的 'er'。\n  >    \\B\t匹配非单词边界。'er\\B' 能匹配 \"verb\" 中的 'er'，但不能匹配 \"never\" 中的 'er'。\n  >    \\n, \\t, 等.\t匹配一个换行符。匹配一个制表符。等\n  >    \\1...\\9\t匹配第n个分组的子表达式。\n  >    \\10\t匹配第n个分组的子表达式，如果它经匹配。否则指的是八进制字符码的表达式。\n  >    ```\n\n- CGI通用网关接口\n\n  > CGI程序，运行在服务器，python脚本、perl脚本、shell脚本、C/C++程序等。\n  >\n  > Web服务器需支持cgi，通常在/cgi-bin/ /var/www/cgi-bin/\n  >\n  > cgi文件`.cgi`或者各自语言的源文件。\n  >\n  > ```python\n  > #!/usr/bin/python\n  > # -*- coding: UTF-8 -*-\n  >\n  > print \"Content-type:text/html\"\t#向浏览器显示的内容类型\n  > print                               # 空行，告诉服务器结束头部\n  > print '<html>'\n  > print '<head>'\n  > print '<meta charset=\"utf-8\">'\n  > print '<title>Hello Word - 我的第一个 CGI 程序！</title>'\n  > print '</head>'\n  > print '<body>'\n  > print '<h2>Hello Word! 我是来自菜鸟教程的第一CGI程序</h2>'\n  > print '</body>'\n  > print '</html>'\n  > ```\n  >\n  > 如上保存为hello.py，修改权限755。放置于cgi-bin/目录下，即可在浏览器中访问。\n  >\n  > - CGI程序中HTTP头部常用信息\n  >\n  >   | 头                  | 描述              |\n  >   | ------------------ | --------------- |\n  >   | Content-type       | 请求与实体对应的MIME信息。 |\n  >   | Expires:Date       | 响应过期的日期和时间      |\n  >   | Location:URL       | 重定向             |\n  >   | Last-modified:Date | 请求资源的最后修改时间     |\n  >   | Content-length:N   | 请求内容长度          |\n  >   | Set-Cookie:String  | 设置Http Cookie   |\n  >\n  > - CGI环境变量\n  >\n  >   所有CGI程序都接收以下环境变量\n  >\n  >   | 变量名             | 描述                                  |\n  >   | --------------- | ----------------------------------- |\n  >   | CONTENT_TYPE    | MIME类型                              |\n  >   | CONTENT_LENGTH  | 有效数据字节数                             |\n  >   | HTTP_COOKIE     | 客户机内cookie内容                        |\n  >   | HTTP_USER_AGENT | 客户及版本，浏览器信息等。                       |\n  >   | PATH_INFO       | 表示CGI程序名之后的其他路径信息                   |\n  >   | QUERY_STRING    | GET请求时，代表所传递的信息。                    |\n  >   | REMOTE_ADDR     | 客户机ip地址                             |\n  >   | REMOTE_HOST     | 客户机主机名                              |\n  >   | REQUEST_METHOD  | 提供脚本被调用的方法，http/1.0协议，仅GET和POST有意义。 |\n  >   | SCRIPT_FILENAME | CGI脚本完整路径                           |\n  >   | SERVER_NAME     | CGI脚本完整名称                           |\n  >   | SERVER_SOFTWARE | 调用CGI程序的http服务器的名称，版本信息。            |\n  >\n  >   ---\n  >\n  > ```python\n  >       #输出所有cgi环境变量信息\n  >       import os\n  >       print \"Content-type: text/html\"\n  >       print\n  >       print \"<meta charset=\\\"utf-8\\\">\"\n  >       print \"<b>环境变量</b><br>\"\n  >       print \"<ul>\"\n  >       for key in os.environ.keys():\n  >           print \"<li><span style='color:green'>%30s </span>:%s</li>\" % (key,os.environ[key])\n  >       print \"</ul>\"\n  > ```\n  >\n  > - GET&POST\n  >\n  >   浏览器请求服务器的两中主要方式\n  >\n  >   - GET方法\n  >\n  >     ```python\n  >     http://www.test.com/cgi-bin/hello.py?key1=value1&key2=value2\n  >     #GET方法相关注释\n  >     '''\n  >     请求可被缓存，请求保存在浏览器历史纪录，可被收藏书签，请求不应在处理敏感数据时使用，请求有长度限制，请求只应用于取回数据。\n  >     '''\n  >     ```\n  >\n  >   - POST方法\n  >\n  >     post方法较为安全可靠。\n  >\n  > - CGI中使用cookie\n  >\n  >   ```python\n  >   Set-cookie:name=name;expires=date;path=path;domain=domain;secure\n  >   ```\n  >\n  >   **注释：**\n  >\n  >   `name=name`: 需要设置cookie的值(name不能使用\";\"和\",\"号),有多个name值时用 \";\" 分隔，例如：name1=name1;name2=name2;name3=name3。\n  >   `expires=date`: cookie的有效期限,格式： expires=\"Wdy,DD-Mon-YYYY HH:MM:SS\"\n  >   `path=path`: 设置cookie支持的路径,如果path是一个路径，则cookie对这个目录下的所有文件及子目录生效，例如： path=\"/cgi-bin/\"，如果path是一个文件，则cookie指对这个文件生效，例如：path=\"/cgi-bin/cookie.cgi\"。\n  >   `domain=domain`: 对cookie生效的域名，例如：domain=\"www.runoob.com\"\n  >   `secure`: 如果给出此标志，表示cookie只能通过SSL协议的https服务器来传递。\n  >   cookie的接收是通过设置环境变量HTTP_COOKIE来实现的，CGI程序可以通过检索该变量获取cookie信息。\n  >\n  >   - cookie检索\n  >\n  >     ```python\n  >     #cookie信息存储在CGI环境变量HTTP_COOKIE中，\n  >     key1=value1;key=value2;......\n  >     ```\n  >\n  >   - 文件上传\n  >\n  >     ```html\n  >     <!DOCTYPE html>\n  >     <html>\n  >     <head>\n  >     <meta charset=\"utf-8\">\n  >     <title>菜鸟教程(runoob.com)</title>\n  >     </head>\n  >     <body>\n  >      <form enctype=\"multipart/form-data\" \n  >                          action=\"/cgi-bin/save_file.py\" method=\"post\">\n  >        <p>选中文件: <input type=\"file\" name=\"filename\" /></p>\n  >        <p><input type=\"submit\" value=\"上传\" /></p>\n  >        </form>\n  >     </body>\n  >     </html>\n  >     ```\n  >\n  >     上面的html形成一个界面，可以选择上传文件，调用save_file.py脚本\n  >\n  >     ```python\n  >     #!/usr/bin/python\n  >     # -*- coding: UTF-8 -*-\n  >\n  >     import cgi, os\n  >     import cgitb; cgitb.enable()\n  >\n  >     form = cgi.FieldStorage()\n  >\n  >     # 获取文件名\n  >     fileitem = form['filename']\n  >\n  >     # 检测文件是否上传\n  >     if fileitem.filename:\n  >        # 设置文件路径 \n  >        fn = os.path.basename(fileitem.filename)\n  >        open('/tmp/' + fn, 'wb').write(fileitem.file.read())\n  >\n  >        message = '文件 \"' + fn + '\" 上传成功'\n  >        \n  >     else:\n  >        message = '文件没有上传'\n  >        \n  >     print \"\"\"\\\n  >     Content-Type: text/html\\n\n  >     <html>\n  >     <head>\n  >     <meta charset=\"utf-8\">\n  >     <title>菜鸟教程(runoob.com)</title>\n  >     </head>\n  >     <body>\n  >        <p>%s</p>\n  >     </body>\n  >     </html>\n  >     \"\"\" % (message,)\n  >     ```\n  >\n  >     **记得文件的权限设置。**\n  >\n  >     ```python\n  >     #!/usr/bin/python\n  >     # -*- coding: UTF-8 -*-\n  >\n  >     # HTTP 头部\n  >     print \"Content-Disposition: attachment; filename=\\\"foo.txt\\\"\";\n  >     print\n  >     # 打开文件\n  >     fo = open(\"foo.txt\", \"rb\")\n  >\n  >     str = fo.read();\n  >     print str\n  >\n  >     # 关闭文件\n  >     fo.close()\n  >     ```\n  >\n  >     **以上为文件下载**\n\n- Python操作mysql数据库\n\n  > python支持多种数据库，有对应的模块。DB-API使用流程\n  >\n  > 1. 引入api模块。\n  >\n  > 2. 获取数据库链接。\n  >\n  > 3. 执行sql语句和存储。\n  >\n  > 4. 关闭连接。\n  >\n  >    ```python\n  >    #!/usr/bin/python\n  >    # -*- coding: UTF-8 -*-\n  >\n  >    import MySQLdb\n  >\n  >    # 打开数据库连接\n  >    db = MySQLdb.connect(\"localhost\",\"testuser\",\"test123\",\"TESTDB\" )\n  >\n  >    # 使用cursor()方法获取操作游标 \n  >    cursor = db.cursor()\n  >\n  >    # 使用execute方法执行SQL语句\n  >    cursor.execute(\"SELECT VERSION()\")\n  >\n  >    # 使用 fetchone() 方法获取一条数据库。\n  >    data = cursor.fetchone()\n  >\n  >    print \"Database version : %s \" % data\n  >\n  >    # 关闭数据库连接\n  >    db.close()\n  >    ```\n  >\n  > - python数据库mysql，需要mysqldb\n  >\n  >   ```python\n  >   fetchone();#获取下一个查询结果集\n  >   fetchall();#接收全部返回结果行\n  >   rowcount;#只读属性，返回执行execute()后影响的行数\n  >   ```\n  >\n  > - 事务\n  >\n  >   事务的四个属性：\n  >\n  >   - 原子性（atomicity）。一个事务是一个不可分割的工作单位，事务中包括的诸操作要么都做，要么都不做。\n  >   - 一致性（consistency）。事务必须是使数据库从一个一致性状态变到另一个一致性状态。一致性与原子性是密切相关的。\n  >   - 隔离性（isolation）。一个事务的执行不能被其他事务干扰。即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。\n  >   - 持久性（durability）。持续性也称永久性（permanence），指一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。接下来的其他操作或故障不应该对其有任何影响。\n  >\n  >   ***Python DB API 2.0 的事务提供了两个方法 commit 或 rollback。***\n\n- Python网络编程\n\n  > python提供两个级别的网络服务：\n  >\n  > 1、低级别支持基本Socket\n  >\n  > 2、高级别SocketServer\n  >\n  > ==Socket==套接字用于程序在主机间或者进程间通讯。\n  >\n  > ```python\n  > #pyton中socket函数\n  > socket.socket([family[,type[,proto]]])\n  > # family 套接字家族，可用AF_UNIX或AF_INET\n  > #type 类型，面向连接与否，SOCK_STREAM和SOCK_DGRAM\n  > #proto 默认为0\n  > ```\n  >\n  > **Python中socket函数可以参照api文档，此处不在赘述。**\n  >\n  > 示例：\n  >\n  > ```python\n  > #服务端\n  > #!/usr/bin/python\n  > # -*- coding: UTF-8 -*-\n  > # 文件名：server.py\n  >\n  > import socket               # 导入 socket 模块\n  >\n  > s = socket.socket()         # 创建 socket 对象\n  > host = socket.gethostname() # 获取本地主机名\n  > port = 12345                # 设置端口\n  > s.bind((host, port))        # 绑定端口\n  >\n  > s.listen(5)                 # 等待客户端连接\n  > while True:\n  >     c, addr = s.accept()     # 建立客户端连接。\n  >     print '连接地址：', addr\n  >     c.send('欢迎访问菜鸟教程！')\n  >     c.close()                # 关闭连接\n  >     \n  >     \n  > #客户端\n  > #!/usr/bin/python\n  > # -*- coding: UTF-8 -*-\n  > # 文件名：client.py\n  >\n  > import socket               # 导入 socket 模块\n  >\n  > s = socket.socket()         # 创建 socket 对象\n  > host = socket.gethostname() # 获取本地主机名\n  > port = 12345                # 设置端口好\n  >\n  > s.connect((host, port))\n  > print s.recv(1024)\n  > s.close()  \n  > ```\n  >\n  > **Python Internet模块**\n  >\n  > | 协议     | 功能用处      | 端口号  | Python模块                 |\n  > | ------ | --------- | ---- | ------------------------ |\n  > | HTTP   | 网页访问      | 80   | httplib、urllib、xmlrpclib |\n  > | NNTP   | 阅读、张贴新闻文章 | 119  | nntplib                  |\n  > | FTP    | 文件传输      | 20   | ftplib、urllib            |\n  > | SMTP   | 发送邮件      | 25   | smtplib                  |\n  > | POP3   | 接收邮件      | 110  | poplib                   |\n  > | IMAP4  | 获取邮件      | 143  | imaplib                  |\n  > | Telnet | 命令行       | 23   | telnetlib                |\n  > | Gopher | 信息查找      | 70   | gopherlib、urllib         |\n  >\n  > - smtp邮件发送\n  >\n  >   语法格式：\n  >\n  >   ```python\n  >   import smtplib\n  >   #创建对象\n  >   smtpObj = smtplib.SMTP([host[,port[,local_hostname]]])\n  >   #发送邮件\n  >   SMTP.sendmail(from_addr,to_addr,msg[,mail_options,rcpt_options])\n  >   ```\n  >\n  >   示例：\n  >\n  >   ```python\n  >   #!/usr/bin/python\n  >   # -*- coding: UTF-8 -*-\n  >\n  >   import smtplib\n  >   from email.mime.text import MIMEText\n  >   from email.header import Header\n  >\n  >   sender = 'server@server.com'\n  >   receivers = ['receiver@receiver.com']  # 接收邮件，可设置为你的QQ邮箱或者其他邮箱\n  >\n  >   # 三个参数：第一个为文本内容，第二个 plain 设置文本格式，可以是html，text等。第三个 utf-8 设置编码\n  >   message = MIMEText('Python 邮件发送测试...', 'plain', 'utf-8')\n  >   message['From'] = Header(\"菜鸟教程\", 'utf-8')\n  >   message['To'] =  Header(\"测试\", 'utf-8')\n  >\n  >   subject = 'Python SMTP 邮件测试'\n  >   message['Subject'] = Header(subject, 'utf-8')\n  >   ```\n  >\n  >\n  >   try:\n  >       smtpObj = smtplib.SMTP('localhost')\n  >       smtpObj.sendmail(sender, receivers, message.as_string())\n  >       print \"邮件发送成功\"\n  >   except smtplib.SMTPException:\n  >       print \"Error: 无法发送邮件\"\n  >   ```\n  >\n  >   **使用第三方SMTP服务**\n  >\n  >   ```python\n  >   # 第三方 SMTP 服务\n  >   mail_host=\"smtp.XXX.com\"  #设置服务器\n  >   mail_user=\"XXXX\"    #用户名\n  >   mail_pass=\"XXXXXX\"   #密码\n  >\n  >   sender = 'from@runoob.com'\n  >   receivers = ['429240967@qq.com']  # 接收邮件，可设置为你的QQ邮箱或者其他邮箱\n  >\n  >   message = MIMEText('Python 邮件发送测试...', 'plain', 'utf-8')\n  >   message['From'] = Header(\"菜鸟教程\", 'utf-8')\n  >   message['To'] =  Header(\"测试\", 'utf-8')\n  >\n  >   subject = 'Python SMTP 邮件测试'\n  >   message['Subject'] = Header(subject, 'utf-8')\n  >\n  >\n  >   try:\n  >       smtpObj = smtplib.SMTP() \n  >       smtpObj.connect(mail_host, 25)    # 25 为 SMTP 端口号\n  >       smtpObj.login(mail_user,mail_pass)  \n  >       smtpObj.sendmail(sender, receivers, message.as_string())\n  >       print \"邮件发送成功\"\n  >   except smtplib.SMTPException:\n  >       print \"Error: 无法发送邮件\"\n  >   ```\n  >\n  >   创建带附件的邮件发送\n  >\n  > ```python\n  >   #!/usr/bin/python\n  >   # -*- coding: UTF-8 -*-\n  >\n  >   import smtplib\n  >   from email.mime.text import MIMEText\n  >   from email.mime.multipart import MIMEMultipart\n  >   from email.header import Header\n  >\n  >   sender = 'from@runoob.com'\n  >   receivers = ['429240967@qq.com']  # 接收邮件，可设置为你的QQ邮箱或者其他邮箱\n  >\n  >   #创建一个带附件的实例\n  >   message = MIMEMultipart()\n  >   message['From'] = Header(\"菜鸟教程\", 'utf-8')\n  >   message['To'] =  Header(\"测试\", 'utf-8')\n  >   subject = 'Python SMTP 邮件测试'\n  >   message['Subject'] = Header(subject, 'utf-8')\n  >\n  >   #邮件正文内容\n  >   message.attach(MIMEText('这是菜鸟教程Python 邮件发送测试……', 'plain', 'utf-8'))\n  >\n  >   # 构造附件1，传送当前目录下的 test.txt 文件\n  >   att1 = MIMEText(open('test.txt', 'rb').read(), 'base64', 'utf-8')\n  >   att1[\"Content-Type\"] = 'application/octet-stream'\n  >   # 这里的filename可以任意写，写什么名字，邮件中显示什么名字\n  >   att1[\"Content-Disposition\"] = 'attachment; filename=\"test.txt\"'\n  >   message.attach(att1)\n  >\n  >   # 构造附件2，传送当前目录下的 runoob.txt 文件\n  >   att2 = MIMEText(open('runoob.txt', 'rb').read(), 'base64', 'utf-8')\n  >   att2[\"Content-Type\"] = 'application/octet-stream'\n  >   att2[\"Content-Disposition\"] = 'attachment; filename=\"runoob.txt\"'\n  >   message.attach(att2)\n  >\n  >   try:\n  >       smtpObj = smtplib.SMTP('localhost')\n  >       smtpObj.sendmail(sender, receivers, message.as_string())\n  >       print \"邮件发送成功\"\n  >   except smtplib.SMTPException:\n  >       print \"Error: 无法发送邮件\"\n  > ```\n  >\n  > - **Python多线程**\n  >\n  >   关于多线程需要注意两点：\n  >\n  >   - 线程可以被中断(抢占)\n  >   - 其他线程运行时，线程可以休眠(退让)\n  >\n  >   **python使用线程两种方式**\n  >\n  >   1、函数\n  >   ```python\n  >   thread.start_new_thread(function,args[,kwargs])\n  >   # 注释：function-线程函数，args-参数，必须是tuple类型。kwargs-可选参数。\n  >   ```\n  >   示例：\n  >   ```python\n  >   #!/usr/bin/python\n  >   # -*- coding: UTF-8 -*-\n  >\n  >   import thread\n  >   import time\n  >\n  >   # 为线程定义一个函数\n  >   def print_time( threadName, delay):\n  >      count = 0\n  >      while count < 5:\n  >         time.sleep(delay)\n  >         count += 1\n  >         print \"%s: %s\" % ( threadName, time.ctime(time.time()) )\n  >\n  >   # 创建两个线程\n  >   try:\n  >      thread.start_new_thread( print_time, (\"Thread-1\", 2, ) )\n  >      thread.start_new_thread( print_time, (\"Thread-2\", 4, ) )\n  >   except:\n  >      print \"Error: unable to start thread\"\n  >\n  >   while 1:\n  >      pass\n  >   ```\n  >\n  >   *线程结束依靠线程函数，或者手动`thread.exit()`,`抛异常`。*\n  >\n  > - ***线程模块***\n  >\n  >   1、`thread`和`threading`两个标准库\n  >\n  >   ```python\n  >   threading.currentThread();\n  >   threading.enumerate();\n  >   threading.activeCount();\n  >   run();start();join([time]);isAlive();getName();setName();\n  >   ```\n  >\n  >   2、使用Threading模块创建线程\n  >\n  >   ```python\n  >   #继承threading.Thread然后重写__init__方法和run方法\n  >   #!/usr/bin/python\n  >   # -*- coding: UTF-8 -*-\n  >\n  >   import threading\n  >   import time\n  >\n  >   exitFlag = 0\n  >\n  >   class myThread (threading.Thread):   #继承父类threading.Thread\n  >       def __init__(self, threadID, name, counter):\n  >           threading.Thread.__init__(self)\n  >           self.threadID = threadID\n  >           self.name = name\n  >           self.counter = counter\n  >       def run(self):                   #把要执行的代码写到run函数里面 线程在创建后会直接运行run函数 \n  >           print \"Starting \" + self.name\n  >           print_time(self.name, self.counter, 5)\n  >           print \"Exiting \" + self.name\n  >\n  >   def print_time(threadName, delay, counter):\n  >       while counter:\n  >           if exitFlag:\n  >               thread.exit()\n  >           time.sleep(delay)\n  >           print \"%s: %s\" % (threadName, time.ctime(time.time()))\n  >           counter -= 1\n  >\n  >   # 创建新线程\n  >   thread1 = myThread(1, \"Thread-1\", 1)\n  >   thread2 = myThread(2, \"Thread-2\", 2)\n  >\n  >   # 开启线程\n  >   thread1.start()\n  >   thread2.start()\n  >\n  >   print \"Exiting Main Thread\"\n  >   ```\n  >\n  > - 线程同步\n  >\n  >   Python中线程同步使用`Lock`和`Rlock`两个对象，都含有`acquire`和`release`方法。\n  >\n  >   示例：\n  >\n  >   ```python\n  >   #!/usr/bin/python\n  >   # -*- coding: UTF-8 -*-\n  >\n  >   import threading\n  >   import time\n  >\n  >   class myThread (threading.Thread):\n  >       def __init__(self, threadID, name, counter):\n  >           threading.Thread.__init__(self)\n  >           self.threadID = threadID\n  >           self.name = name\n  >           self.counter = counter\n  >       def run(self):\n  >           print \"Starting \" + self.name\n  >          # 获得锁，成功获得锁定后返回True\n  >          # 可选的timeout参数不填时将一直阻塞直到获得锁定\n  >          # 否则超时后将返回False\n  >           threadLock.acquire()\n  >           print_time(self.name, self.counter, 3)\n  >           # 释放锁\n  >           threadLock.release()\n  >\n  >   def print_time(threadName, delay, counter):\n  >       while counter:\n  >           time.sleep(delay)\n  >           print \"%s: %s\" % (threadName, time.ctime(time.time()))\n  >           counter -= 1\n  >\n  >   threadLock = threading.Lock()\n  >   threads = []\n  >\n  >   # 创建新线程\n  >   thread1 = myThread(1, \"Thread-1\", 1)\n  >   thread2 = myThread(2, \"Thread-2\", 2)\n  >\n  >   # 开启新线程\n  >   thread1.start()\n  >   thread2.start()\n  >\n  >   # 添加线程到线程列表\n  >   threads.append(thread1)\n  >   threads.append(thread2)\n  >\n  >   # 等待所有线程完成\n  >   for t in threads:\n  >       t.join()\n  >   print \"Exiting Main Thread\"\n  >   ```\n  >\n  > - **线程优先级队列**\n  >\n  >   Python的Queue模块提供了FIFO和LIFO队列，Queue、LifoQueue和优先级PriorityQueue。\n\n- Python其他特性\n\n  > - xml解析\n  >\n  > xml解析通用的有`SAX`、`DOM`、python有`ElementTree`\n  >\n  > *一般编程中都很少用SAX和DOM解析，都有自己平台的优化解析方式。*\n  >\n  > **注：**因DOM需要将XML数据映射到内存中的树，一是比较慢，二是比较耗内存，而SAX流式读取XML文件，比较快，占用内存少，但需要用户实现回调函数（handler）。\n  >\n  > - GUI编程\n  >\n  >   python提供多种图形界面库`Thinter`、`wxPython`、`Jython`\n  >\n  >   **Tkinter**\n  >\n  >   ```python\n  >   import Tkinter\n  >   top = Tkinter.Tk()\n  >   #进入消息循环\n  >   top.mainloog()\n  >   #如上代码执行，可产生小窗口界面了。\n  >   ```\n  >\n  >   Tkinter包含常用的窗口控件，以及属性和方法，使用时候可差用api。\n  >\n  > - JSON\n  >\n  >   python使用Demjson，`decode`和`encode`解码编码。\n  >\n  >   ```python\n  >   demjson.encode(self,obj,nest_level=0)\n  >   ```\n  >\n  >   示例：(构建json)\n  >\n  >   ```python\n  >   #!/usr/bin/python\n  >   import demjson\n  >\n  >   data = [{'a':1,'b':2,'c':3,'d':4,'e':5}]\n  >\n  >   json = demjson.encode(data)\n  >   print(json)\n  >   ```\n  >\n  >   解析Json\n  >\n  >   ```python\n  >   demjson.decode(self,txt)\n  >   ```\n  >\n  >   ```python\n  >   #!/usr/bin/python\n  >   import demjson\n  >\n  >   json = '{\"a\":1,\"b\":2,\"c\":3,\"d\":4,\"e\":5}';\n  >\n  >   text = demjson.decode(json)\n  >   print(text)\n  >   ```\n\n\n\n**初次接触Python，笔记难免简单初级，仅供自己学习只用，希望也对网友有所益处。**\n\n\n\n\n\n\n","slug":"Python学习笔记","published":1,"updated":"2017-03-31T03:02:33.619Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ndxcfd006388owb3gqsbpj","content":"<h1 id=\"Python学习笔记\"><a href=\"#Python学习笔记\" class=\"headerlink\" title=\"Python学习笔记\"></a>Python学习笔记</h1><!-- TOC -->\n<ul>\n<li><a href=\"#python学习笔记\">Python学习笔记</a><ul>\n<li><a href=\"#一基本语法\">一、基本语法</a></li>\n<li><a href=\"#二-数据与逻辑\">二、 数据与逻辑</a></li>\n<li><a href=\"#三结构与api\">三、结构与api</a></li>\n<li><a href=\"#四python高级教程\">四、Python高级教程</a></li>\n</ul>\n</li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"一、基本语法\"><a href=\"#一、基本语法\" class=\"headerlink\" title=\"一、基本语法\"></a>一、基本语法</h2><p><code>python2.x与python3.x区别很大，新版特性很强，更优化，此笔记学习新版本特性，暂不关注旧版本。</code></p>\n<ul>\n<li><p>标识符</p>\n<blockquote>\n<ol>\n<li>标识符：数字、字母、下划线，且数字不开头。</li>\n<li>区分大小写；</li>\n<li>单下划线开头<code>_foo</code>表示不能直接访问，需要用接口访问，不可”from xxx import”导入。<code>__foo</code>双下划线表示私有。前后双下划线<code>___foo__</code>特殊函数。</li>\n</ol>\n</blockquote>\n</li>\n<li><p>保留字符</p>\n<blockquote>\n<p>and、exec、not、assert、finally、or、break、for、pass、class、from、print、continue、global、raise、def、if、return、del、import、try、elif、in、while、else、is、with、except、lambda、yield。</p>\n<p>Python3中<code>end</code>可以将结果输入到同一行，或者输出尾部追加不同的字符</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"comment\">#Fibonacci Series: 斐波那契数列</span></div><div class=\"line\">&gt; a,b = <span class=\"number\">0</span>,<span class=\"number\">1</span></div><div class=\"line\">&gt; <span class=\"keyword\">while</span> b&lt;<span class=\"number\">1000</span>:</div><div class=\"line\">&gt;     print(b,end=<span class=\"string\">','</span>)</div><div class=\"line\">&gt;     a,b = b,a+b</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>​</p>\n</blockquote>\n</li>\n<li><p>行与缩进</p>\n<blockquote>\n<p><strong>Python区别于其他语言最大处，python不用{}来控制类、函数和逻辑块。而是用缩进，空格数无妨，但是逻辑块前后必须相同个数空格，使用空格或者tab都行，但是最好别混用</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">if</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">&gt;     <span class=\"keyword\">print</span> <span class=\"string\">\"True\"</span></div><div class=\"line\">&gt; <span class=\"keyword\">else</span>:</div><div class=\"line\">&gt;     <span class=\"keyword\">print</span> <span class=\"string\">\"False\"</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>python一般新的一行意味着上个语句块结束。但是多行语句可以用<code>\\</code>符号：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; string = abc + \\</div><div class=\"line\">&gt; \t\tbcd + \\</div><div class=\"line\">&gt;     \tefg</div><div class=\"line\">&gt; <span class=\"comment\"># 要是有&#123;&#125;、[]、()的语句，断为多行也无妨。</span></div><div class=\"line\">&gt; girls = [<span class=\"string\">'allen'</span>,<span class=\"string\">'angle'</span></div><div class=\"line\">&gt;         <span class=\"string\">'candy'</span>,<span class=\"string\">'lily'</span></div><div class=\"line\">&gt;         <span class=\"string\">'merry'</span>]</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>引号与注释</p>\n<blockquote>\n<p>python的字符串可以用单引号<code>&#39;</code>、双引号<code>&quot;</code>、三引号<code>&#39;&#39;&#39;</code>包括，其中三引号可以多行分段，有时候可以用作注释。</p>\n<p><code>#</code>符号表示注释，可写在当行，或者代码尾部。多行注释使用三个单引号<code>&#39;&#39;&#39;</code>，或三个双引号<code>&quot;&quot;&quot;</code>包括。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"comment\">#单行注释</span></div><div class=\"line\">&gt; <span class=\"keyword\">if</span> <span class=\"keyword\">True</span></div><div class=\"line\">&gt; \t<span class=\"keyword\">print</span> <span class=\"string\">'hello'</span> <span class=\"comment\">#单个注释，新版中需要加()，视为函数</span></div><div class=\"line\">&gt; <span class=\"string\">'''</span></div><div class=\"line\">&gt; 多行注释</div><div class=\"line\">&gt; 是这么写的</div><div class=\"line\">&gt; 真的可以么</div><div class=\"line\">&gt; 在markdown语法中</div><div class=\"line\">&gt; '''</div><div class=\"line\">&gt; <span class=\"string\">\"\"\"</span></div><div class=\"line\">&gt; 似乎可以</div><div class=\"line\">&gt; 好像是的哦</div><div class=\"line\">&gt; \"\"\"    </div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><em>函数之间，类与函数间用<code>空行</code>分开，便于阅读和维护</em></p>\n</blockquote>\n</li>\n<li><p>零碎语法</p>\n<blockquote>\n<ul>\n<li><p>多条语句同一行，可以<code>;</code>分割。</p>\n</li>\n<li><p>同一代码组，首行关键字后<code>:</code>结尾，同一代码组前后空白数相同。</p>\n</li>\n<li><p>旧版中文编码需要头文件注释</p>\n</li>\n<li><p>Python中True和False，似乎不能小写哦！</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;  <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt;  <span class=\"comment\">#_*_coding:utf-8 _*_</span></div><div class=\"line\">&gt;  <span class=\"comment\">#或者</span></div><div class=\"line\">&gt;  <span class=\"comment\">#coding=utf-8</span></div><div class=\"line\">&gt;  <span class=\"comment\">#新版python已经默认支持了。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n</li>\n</ul>\n<h2 id=\"二、-数据与逻辑\"><a href=\"#二、-数据与逻辑\" class=\"headerlink\" title=\"二、 数据与逻辑\"></a>二、 数据与逻辑</h2><ul>\n<li><p>变量类型</p>\n<blockquote>\n<p><strong>python变量赋值不需要类型声明</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; counter = <span class=\"number\">100</span> <span class=\"comment\">#整型</span></div><div class=\"line\">&gt; miles = <span class=\"number\">1000.0</span> <span class=\"comment\"># 浮点型</span></div><div class=\"line\">&gt; name = <span class=\"string\">\"John\"</span> <span class=\"comment\">#字符串</span></div><div class=\"line\">&gt; a = b = c = <span class=\"number\">1</span> <span class=\"comment\">#多个变量同时赋值</span></div><div class=\"line\">&gt; a, b, c = <span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"string\">\"John\"</span> <span class=\"comment\">#多变量多类型赋值,个数必须对应。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>python五种标准数据类型：</p>\n<ul>\n<li><p>Numbers数字</p>\n<p>该类型变量赋值后不可改变，重新赋值实质上是分配新的对象。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   a = <span class=\"number\">1</span>,b=<span class=\"number\">2</span>,c=<span class=\"number\">9</span></div><div class=\"line\">&gt;   <span class=\"comment\">#del是删除语句</span></div><div class=\"line\">&gt;   <span class=\"keyword\">del</span> a</div><div class=\"line\">&gt;   <span class=\"keyword\">del</span> a,b</div><div class=\"line\">&gt;   <span class=\"comment\"># Number有四种不同类型，int、long、float、complex（复数）</span></div><div class=\"line\">&gt;   <span class=\"comment\">#注意：python新版中，没有long，多了一个bytes。</span></div><div class=\"line\">&gt;   <span class=\"number\">8899887897l</span><span class=\"comment\">#后面的l容易与1混淆，一般写作L</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>String字符串</p>\n<p>由字母、数字、下划线组成，两种顺序，0开始至后，-1开始向前。</p>\n<p>string的截取</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   s = <span class=\"string\">'I`m a good boy'</span></div><div class=\"line\">&gt;   s[<span class=\"number\">3</span>:<span class=\"number\">9</span>]<span class=\"comment\">#其结果是截取对应标号的字符串为新的字符，可以0--size，也可以-1--向前。记住区间[)右边取不到哦</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> s <span class=\"comment\">#输出s字符串</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> s[<span class=\"number\">1</span>]<span class=\"comment\">#输入下标为1的字母</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> s[<span class=\"number\">1</span>:<span class=\"number\">5</span>]<span class=\"comment\">#输出下标1-5，但不含5那个字符</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> s + <span class=\"string\">\"add\"</span> <span class=\"comment\"># 字符串连接</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> s * <span class=\"number\">2</span> <span class=\"comment\"># 重复输出两次</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>List列表</p>\n<p>python列表可以混合不同类型数据，嵌套列表，可以使用类似string的方法取子列表。<code>[]</code>表示</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   list = [<span class=\"string\">'python'</span>,<span class=\"number\">666</span>,<span class=\"number\">2.14</span>,<span class=\"string\">'study'</span>]</div><div class=\"line\">&gt;   tinylist = [<span class=\"number\">123</span>,<span class=\"string\">'John'</span>]</div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> list <span class=\"comment\">#完整输出</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> list[<span class=\"number\">0</span>]<span class=\"comment\">#输出指定下标元素</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> list[<span class=\"number\">1</span>:<span class=\"number\">3</span>]<span class=\"comment\">#输出1-3的元素</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> list[<span class=\"number\">2</span>:]<span class=\"comment\">#输出2之后所有元素</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> tinylist * <span class=\"number\">2</span> <span class=\"comment\"># 重复两次输出</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> list + tinylist<span class=\"comment\">#组合列表</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>Tuple元组</p>\n<p>元组类似list，<code>()</code>标识，<code>,</code>分割，不能二次赋值。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   list = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"string\">'abc'</span>]</div><div class=\"line\">&gt;   tuple = (<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"string\">'abc'</span>)</div><div class=\"line\">&gt;   list[<span class=\"number\">0</span>] = <span class=\"string\">'ABC'</span><span class=\"comment\">#可以更新</span></div><div class=\"line\">&gt;   tuple[<span class=\"number\">0</span>]= <span class=\"number\">4</span> <span class=\"comment\">#错误，元组数据不能更新</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>Dictionary字典</p>\n<p>Dictionary被视为python最为灵活的内置数据结构，列表为有序对象集合，字典则为无序元素结合。区别在于，Dictionary类似与map集合，键值对key-value。<code>{}</code>标识</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   dict = &#123;&#125;</div><div class=\"line\">&gt;   dict[<span class=\"string\">'one'</span>] = <span class=\"string\">\"This is one\"</span></div><div class=\"line\">&gt;   dict[<span class=\"number\">2</span>] = <span class=\"string\">\"This is 2\"</span></div><div class=\"line\">&gt;   tinydict = &#123;<span class=\"string\">'name'</span>:<span class=\"string\">'john'</span>,<span class=\"string\">'code'</span>:<span class=\"number\">1234</span>,<span class=\"string\">'dept'</span>:<span class=\"string\">'good'</span>,<span class=\"number\">22</span>:<span class=\"number\">879.0L</span>&#125;</div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> dict[<span class=\"string\">'one'</span>] <span class=\"comment\">#根据键值输出元素</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> dict <span class=\"comment\"># 输出所有元素</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> dict.keys()<span class=\"comment\">#输出所有key</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> tinydict.vales()<span class=\"comment\">#输出所有值value</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>Set(集合)</p>\n<p>无序不重复的序列，主要用于成员关系测试和重复文件删除。</p>\n<p>可以使用大括号<code>({})</code>或者<code>set()</code>函数创建集合，注意：创建一个空集合必须用 set() 而不是 <code>{ }</code>，因为 <code>{ }</code> 是用来创建一个空字典。</p>\n</li>\n</ul>\n<p><strong>类型转换</strong>，对应数据类型作为函数名即可,返回结果。</p>\n<p>|          函数           |               描述                |<br>| :——————-: | :—————————–: |<br>|    int(x [,base])     |            将x转换为一个整数            |<br>|   long(x [,base] )    |           将x转换为一个长整数            |<br>|       float(x)        |           将x转换到一个浮点数            |<br>| complex(real [,imag]) |             创建一个复数              |<br>|        str(x)         |          将对象 x 转换为字符串           |<br>|        repr(x)        |         将对象 x 转换为表达式字符串         |<br>|       eval(str)       |  用来计算在字符串中的有效Python表达式,并返回一个对象  |<br>|       tuple(s)        |          将序列 s 转换为一个元组          |<br>|        list(s)        |          将序列 s 转换为一个列表          |<br>|        set(s)         |             转换为可变集合             |<br>|        dict(d)        | 创建一个字典。d 必须是一个序列 (key,value)元组。 |<br>|     frozenset(s)      |            转换为不可变集合             |<br>|        chr(x)         |          将一个整数转换为一个字符           |<br>|       unichr(x)       |        将一个整数转换为Unicode字符        |<br>|        ord(x)         |          将一个字符转换为它的整数值          |<br>|        hex(x)         |        将一个整数转换为一个十六进制字符串        |<br>|        oct(x)         |        将一个整数转换为一个八进制字符串         |</p>\n</blockquote>\n</li>\n<li><p>运算符号</p>\n<blockquote>\n<p>Python运算符支持一下类型：</p>\n<ul>\n<li>算术运算符</li>\n<li>比较（关系）运算符</li>\n<li>赋值运算符</li>\n<li>逻辑运算符</li>\n<li>位运算符</li>\n<li>成员运算符</li>\n<li>身份运算符</li>\n</ul>\n<p><strong>运算符有优先级</strong></p>\n<ol>\n<li><p>算术运算符</p>\n<p>| 运算符  | 描述    | 实例     |<br>| —- | —– | —— |<br>| +    | 加号    | 1+2得3  |<br>| -    | 减号    | 3-1得2  |<br>| <em>    | 乘号    | 2</em>2得4  |<br>| /    | 除号    | 9/3得3  |<br>| %    | 取模，求余 | 5%2得1  |<br>| <strong>   | 幂     | 2</strong>3得8 |<br>| //   | 取整除   | 9//2得4 |</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"comment\">#算术运算符，得到运算结果</span></div><div class=\"line\">&gt;   a,b,c = <span class=\"number\">12</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span><span class=\"comment\">#多变量同时赋值</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> (a+b)</div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> (a-b)</div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> (a*b)</div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> (a/b)</div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> (a%c)</div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> (b**c)</div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> (c//b)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p>比较运算符</p>\n<p>| 运算符  | 描述          |<br>| —- | ———– |<br>| ==   | 等于，比较对象是否相等 |<br>| !=   | 不等于         |<br>| &lt;&gt;   | 不等于         |<br>| &gt;    | 大于          |<br>| &lt;    | 小于          |<br>| >=  | 大于等于        |<br>| &lt;=   | 小于等于        |</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"comment\">#关系运算符，返回结果为 True或False</span></div><div class=\"line\">&gt;   a,b,c = <span class=\"number\">12</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span></div><div class=\"line\">&gt;   print(a==b)</div><div class=\"line\">&gt;   print(a!=b)</div><div class=\"line\">&gt;   print(a&lt;&gt;b)<span class=\"comment\">#，新版python中，已经废弃。</span></div><div class=\"line\">&gt;   print(a&gt;b)</div><div class=\"line\">&gt;   print(a&lt;b)</div><div class=\"line\">&gt;   print(a&gt;=b)</div><div class=\"line\">&gt;   print(a&lt;=b)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p>赋值运算符</p>\n<p>| 运算符  | 描述   | 实例                 |<br>| —- | —- | —————— |<br>| =    | 简单赋值 | c=a+b,将a+b的结果赋值给c  |<br>| +=   | 加法赋值 | c+=a等效于c=c+a       |<br>| -=   | 减法赋值 | c-=a等效于c=c-a       |<br>| <em>=   | 乘法赋值 | c</em>=a等效于c=c*a      |<br>| /=   | 除法赋值 | c/=a等效于c=c/a       |<br>| %=   | 取模赋值 | c%=a等效于c=c%a       |<br>| <em>*=  | 幂赋值  | c\\</em>*=a等效于c=c**a |<br>| //=  | 取整赋值 | c//=a等效于c=c//a     |</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"comment\">#简单演示</span></div><div class=\"line\">&gt;   a,b,c=<span class=\"number\">12</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span></div><div class=\"line\">&gt;   <span class=\"comment\">#print(c=a)#不能直接在print内写赋值</span></div><div class=\"line\">&gt;   c=a</div><div class=\"line\">&gt;   print(c)</div><div class=\"line\">&gt;   c=c**b</div><div class=\"line\">&gt;   print(c**=b)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p>位运算符</p>\n<p>位运算既是将数字看作二进制，进行运算。</p>\n<p>| 运算符  | 描述                                       |<br>| —- | —————————————- |<br>| &amp;    | <strong><code>按位与</code></strong>：两数二进制对齐，对应位置都是1，则为1，否则为0。      |<br>| |   | <strong><code>按位或</code></strong>：两数二进制，对应位置有一个为1，则为1。           |<br>| ^    | <strong><code>按位异或</code></strong>：两数二进制，对应位置相异，则为1。             |<br>| ~    | <strong><code>按位取反</code></strong>：对数据的二进制，各个位置取相反，变1为0，变0为1。    |<br>| &lt;&lt;   | <strong><code>左移动</code></strong>：运算数二进制全部左移动若干位，”&lt;&lt;”右边的数决定左移位数。<strong>高位丢弃，低位补0</strong> |<br>| >&gt;  | <strong><code>右移动</code></strong>：运算数二进制全部右移动软敢为，”&gt;&gt;”右边的数决定右移位数。 |</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   a = <span class=\"number\">60</span> <span class=\"comment\"># 60 = 0011 1100</span></div><div class=\"line\">&gt;   b = <span class=\"number\">13</span> <span class=\"comment\"># 13 = 0000 1101</span></div><div class=\"line\">&gt;   c = <span class=\"number\">0</span></div><div class=\"line\">&gt;   c = a &amp; b</div><div class=\"line\">&gt;   print(<span class=\"string\">\"a &amp; b :\"</span>,c)<span class=\"comment\"># 12 = 0000 1100</span></div><div class=\"line\">&gt;   c = a | b</div><div class=\"line\">&gt;   print(<span class=\"string\">\"a | b :\"</span>,c)<span class=\"comment\"># 61 = 0011 1101</span></div><div class=\"line\">&gt;   c = a ^ b</div><div class=\"line\">&gt;   print(<span class=\"string\">\"a ^ b :\"</span>,c)<span class=\"comment\"># 49 = 0011 0001</span></div><div class=\"line\">&gt;   c = ~a</div><div class=\"line\">&gt;   print(<span class=\"string\">\"~a :\"</span>,c)<span class=\"comment\"># -61 = 1100 0011</span></div><div class=\"line\">&gt;   c = a&lt;&lt;<span class=\"number\">2</span></div><div class=\"line\">&gt;   print(<span class=\"string\">\"a&lt;&lt;2 :\"</span>,c) <span class=\"comment\"># 240 = 1111 0000</span></div><div class=\"line\">&gt;   c = a&gt;&gt;<span class=\"number\">2</span></div><div class=\"line\">&gt;   print(<span class=\"string\">\"a&gt;&gt;2 :\"</span>,c) <span class=\"comment\"># 15 = 0000 1111</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p>逻辑运算符</p>\n<p>| 运算符  | 表达式     | 描述                                       |<br>| —- | ——- | —————————————- |<br>| and  | x and y | <strong><code>布尔与</code></strong> ：如果x为False，x and y返回False，否则返回y的计算值。 |<br>| or   | x or y  | <strong><code>布尔或</code></strong>：如果x非零，返回x值，否则返回y的计算值。          |<br>| not  | not x   | <strong><code>布尔非</code></strong>：若x为True，返回False，若x为False，返回True。 |</p>\n<p>示例:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"comment\">#True是1，False是0</span></div><div class=\"line\">&gt;   <span class=\"string\">\"\"\"所以可以在逻辑运算中判断，是否为0 或者1，来决定true和false\"\"\"</span></div><div class=\"line\">&gt;   a, b, c = <span class=\"number\">12</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span></div><div class=\"line\">&gt;   print(a <span class=\"keyword\">and</span> b)<span class=\"comment\">#似乎非0，即认为True</span></div><div class=\"line\">&gt;   print(a <span class=\"keyword\">or</span> b)</div><div class=\"line\">&gt;   print(<span class=\"keyword\">not</span> a)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p>成员运算符</p>\n<p>| 运算符    | 描述                                     |<br>| —— | ————————————– |<br>| in     | x in y，若有True，无False。<strong><code>y为列表、字符串、元组</code></strong> |<br>| not in | x not in y 若y中无x则True，有则False。         |</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   a = <span class=\"number\">10</span>;b = <span class=\"number\">20</span>;list = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">10</span>,<span class=\"number\">15</span>]</div><div class=\"line\">&gt;   print(a <span class=\"keyword\">in</span> list)</div><div class=\"line\">&gt;   print(a <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> list)</div><div class=\"line\">&gt;   print(b <span class=\"keyword\">in</span> list)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p>身份运算符</p>\n<p>| 运算符    | 描述                                       |<br>| —— | —————————————- |<br>| is     | <code>is</code>判断两标识符是否引用同一对象，id同则返回True，否则False。   |<br>| is not | <code>is not</code>判断两标识符是不是引用不同对象，id不同则返回True，否则False。 |</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   a = <span class=\"number\">10</span>;b = <span class=\"number\">20</span>;</div><div class=\"line\">&gt;   print(a <span class=\"keyword\">is</span> b);print(a <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> b);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p>运算符优先级</p>\n<p>| 运算符                      | 优先级描述                |<br>| ———————— | ——————– |<br>| <strong>                       | 指数，最高优先级             |<br>| ~，+，-                    | 按位取反、一元加(+@)、一元减(-@) |<br>| <em>，/，%，//                 | 乘、除、取模、取整            |<br>| +，-                      | 加法、减法                |<br>| >&gt;，&lt;&lt;                   | 右移动、左移动              |<br>| &amp;                        | 位’AND’               |<br>| ^，|                     | 位运算                  |<br>| &lt;=，&lt;，&gt;，&gt;=                | 比较运算符                |<br>| &lt;&gt;，==，!=                 | 等于运算符                |<br>| =，%=，/=，//=，-=，+=，</em>=，</strong>= | 赋值运算符                |<br>| is，is not                | 身份运算符                |<br>| in ，not in               | 成员运算符                |<br>| not，or，and               | 逻辑运算符                |</p>\n<p><strong>注意：若是不确定优先级，可以用()来控制</strong></p>\n</li>\n</ol>\n</blockquote>\n</li>\n<li><p>条件语句</p>\n<blockquote>\n<p>Python中指定非0，和非null，的值为Ture，0和null为False。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"comment\"># python 中多个条件语句，if..elif...elif...else</span></div><div class=\"line\">&gt; <span class=\"keyword\">if</span> condition1:</div><div class=\"line\">&gt;     statement1</div><div class=\"line\">&gt; <span class=\"keyword\">elif</span> condition2:</div><div class=\"line\">&gt;     statement2</div><div class=\"line\">&gt; <span class=\"keyword\">else</span>:</div><div class=\"line\">&gt;     statement</div><div class=\"line\">&gt; <span class=\"keyword\">if</span> (<span class=\"number\">1</span>!=<span class=\"number\">2</span>) : <span class=\"keyword\">print</span> <span class=\"string\">\"OK\"</span>;<span class=\"comment\">#单行语句，可以放在一起。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><strong>python 没有switch语句，只能多个elif语句结合逻辑符号<code>and,or,not</code>来控制多分支语句。</strong></p>\n</blockquote>\n</li>\n<li><p>循环语句</p>\n<blockquote>\n<p>编程语言基本都有for、while和嵌套循环。python没有do…while循环。</p>\n<p>循环控制语句有break、continue和pass。</p>\n<ul>\n<li><p>while循环</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"comment\"># while 循环格式</span></div><div class=\"line\">&gt;   <span class=\"keyword\">while</span> condition:<span class=\"comment\">#条件只有True和False的本质区别，但是请记住，Python中的True的定义比较广，非0，非null即为True。</span></div><div class=\"line\">&gt;       statement</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>  控制语句break、continue</p>\n<ul>\n<li>break，退出循环。</li>\n<li><p>continue，跳出本次循环，进入下一次。不执行continue之后的语句。</p>\n<p><em>无限循环：判断条件为永远为True</em></p>\n</li>\n</ul>\n<ul>\n<li><p>$for…else$</p>\n<p>Python中有for…else和while…else循环。</p>\n<p><code>表示for或while语句正常执行后，else语句执行。</code>注意：循环体正常执行，而不是break出来，才会运行else语句。</p>\n<p>每一轮的循环，for或while内没有break的话，都会执行else语句。</p>\n</li>\n<li><p>for循环</p>\n<p>用于遍历任何序列项目，如列表字符串。格式：</p>\n<ul>\n<li>普通方式</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"keyword\">for</span> iterating_var <span class=\"keyword\">in</span> sequence:</div><div class=\"line\">&gt;       statements</div><div class=\"line\">&gt;       </div><div class=\"line\">&gt;   <span class=\"comment\">#如下示例</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"keyword\">for</span> letter <span class=\"keyword\">in</span> <span class=\"string\">'python text'</span>:</div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> (<span class=\"string\">'当前字母：'</span>,letter)</div><div class=\"line\">&gt;       </div><div class=\"line\">&gt;   fruits = [<span class=\"string\">'banana'</span>,<span class=\"string\">'apple'</span>,<span class=\"string\">'orange'</span>]</div><div class=\"line\">&gt;   <span class=\"keyword\">for</span> fruit <span class=\"keyword\">in</span> fruits:</div><div class=\"line\">&gt;       print(<span class=\"string\">\"水果：\"</span>,fruit)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>使用索引</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;     fruits = [<span class=\"string\">'banana'</span>,<span class=\"string\">'orange'</span>,<span class=\"string\">'apple'</span>]</div><div class=\"line\">&gt;     <span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> range(len(fruits)):</div><div class=\"line\">&gt;         print(<span class=\"string\">\"fruit:\"</span>,fruits[index])</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p>循环嵌套</p>\n<blockquote>\n<p>类似其他编程语言，python也允许循环嵌套。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">for</span> iterating_var <span class=\"keyword\">in</span> sequence:</div><div class=\"line\">&gt;     <span class=\"keyword\">for</span> interating_var <span class=\"keyword\">in</span> sequence:</div><div class=\"line\">&gt;         statements</div><div class=\"line\">&gt;     statements</div><div class=\"line\">&gt; <span class=\"comment\">#python中注意缩进来区分代码块，while嵌套类似，也可以互相嵌套。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>break、continue语句类似其他编程语言，上面已做介绍。</p>\n</li>\n<li><p>pass语句，不做任何事情，一般用做占位语句</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"keyword\">for</span> letter <span class=\"keyword\">in</span> <span class=\"string\">'python'</span>:</div><div class=\"line\">&gt;       <span class=\"keyword\">if</span> letter == <span class=\"string\">'h'</span>:</div><div class=\"line\">&gt;           <span class=\"keyword\">pass</span></div><div class=\"line\">&gt;       \tprint(<span class=\"string\">\"just for blank\"</span>)</div><div class=\"line\">&gt;       print(<span class=\"string\">\"letter:\"</span>,letter)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"三、结构与api\"><a href=\"#三、结构与api\" class=\"headerlink\" title=\"三、结构与api\"></a>三、结构与api</h2><ul>\n<li><p>Number数据类型</p>\n<blockquote>\n<p>Python的Number数据类型，不允许改变，每次赋值都会是一个新的对象。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; a = <span class=\"number\">10</span></div><div class=\"line\">&gt; b = <span class=\"number\">12</span></div><div class=\"line\">&gt; a = <span class=\"number\">20</span> <span class=\"comment\">#内存地址已经变了，不像java那样。</span></div><div class=\"line\">&gt; <span class=\"comment\">#del语句删除</span></div><div class=\"line\">&gt; <span class=\"keyword\">del</span> a</div><div class=\"line\">&gt; <span class=\"keyword\">del</span> a,b</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><strong>Number数据支持四种子类型</strong></p>\n<ul>\n<li>int整型，正数、负数，无小数点。</li>\n<li>long长整型，无限大小的整数，后加<code>L</code>或<code>l</code>。</li>\n<li>float浮点型，整数、小数和科学计数。</li>\n<li>complex复数，实数和虚数构成，a+bj或complex(a,b)，a实数，b虚数。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>Python数学函数</p>\n<blockquote>\n<p>| 函数            | 返回值                                   |<br>| ————- | ————————————- |<br>| abs(x)        | 绝对值：返回x的绝对值                           |<br>| ceil(x)       | 取大整：返回x的上入整数，不是四舍五入。如math.ceil(4.1)得5 |<br>| cmp(x,y)      | 对比：x\\<y，返回-1，x=y返回0，x\\>y 返回1          |<br>| exp(x)        | e次幂：e的x次幂                             |<br>| fabs(x)       | 绝对值：返回x的绝对值，含小数点。                     |<br>| floor(x)      | 取小整：返回x的向下整数。                         |<br>| log(x)        | log函数                                 |<br>| max（x1，x2…) | Max函数。                                |<br>| min(x1,x2…) | Min函数。                                |<br>| modf(x)       | 分离：返回x的整数和小数部分，符号与x相同，整数部分为float型。    |<br>| pow(x,y)      | 幂函数：x**y的值                            |<br>| rount(x[,n])  | 舍入值：x的四舍五入，舍入到小数后n位。                  |<br>| sqrt(x)       | 开方：x的平方根，x可为负数，返回实数。                  |</y，返回-1，x=y返回0，x\\></p>\n<p><strong>Math函数</strong></p>\n<ul>\n<li><p>随机函数random</p>\n<p>| 函数                             | 描述                                     |<br>| —————————— | ————————————– |<br>| choice(seq)                    | random.choice(range(10))，从0–9随机挑一个整数。 |<br>| randrange([start],stop,[step]) | 指定范围制定基数获取随机数。                         |<br>| random()                       | [0,1)内随机数                              |<br>| seed([x])                      | 随机数生成器的种子？？                            |<br>| shuffle(lst)                   | 序列元素的随机排序                              |<br>| uniform(x,y)                   | [x,y]范围内随机生成下一个实数                      |</p>\n<p>==注意函数参数[step]之类的，表示为可选参数==</p>\n</li>\n<li><p>三角函数</p>\n<p>| 函数         | 描述                              |<br>| ———- | ——————————- |<br>| acos(x)    | 反余弦（弧度值）                        |<br>| asin(x)    | 反正弦                             |<br>| atan(x)    | 反正切                             |<br>| atan2(y,x) | 指定x，y坐标的反正切值                    |<br>| cos(x)     | 余弦                              |<br>| hypot(x,y) | 返回欧几里得范数sqrt(x*x+y*y)         |<br>| sin(x)     | 正弦                              |<br>| tan(x)     | 正切                              |<br>| degress(x) | 弧度转角度。如degress(math.pi/2),得90.0 |<br>| radins(x)  | 角度转弧度                           |</p>\n</li>\n<li><p>数学常量</p>\n<p>| 常量   | 描述    |<br>| —- | —– |<br>| pi   | 圆周率   |<br>| e    | 自然常数e |</p>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p>字符串</p>\n<blockquote>\n<p>python中字符串string可用<code>&#39;</code>或<code>&quot;</code>符号，无char类型。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; #字符串可以用[]类似java数组方式截取</div><div class=\"line\">&gt; a = 'abc'</div><div class=\"line\">&gt; b = \"hello python\"</div><div class=\"line\">&gt;</div><div class=\"line\">&gt; print('a[0]',a[0])</div><div class=\"line\">&gt; print(\"b[2:7],b[2:7])#关于字符串的截取可参照上一章数据类型里的描述。</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>python可以对string字符串更新操作：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; a = <span class=\"string\">'hello python'</span></div><div class=\"line\">&gt; print(<span class=\"string\">'updated:'</span>,a[:<span class=\"number\">6</span>]+<span class=\"string\">'beautiful girl'</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>类似其他语言，python中也使用<code>\\</code>转义其他特殊字符。</p>\n<p>| 转义字符     | 描述                    |<br>| ——– | ——————— |<br>| \\ (在行尾时) | 续行符号                  |<br>| \\\\      | 反斜杠                   |<br>| \\’       | 单引号                   |<br>| \\”       | 双引号                   |<br>| \\a       | 响铃                    |<br>| \\b       | 退格                    |<br>| \\e       | 转义                    |<br>| \\000     | 空                     |<br>| \\n       | 换行                    |<br>| \\v       | 纵向制表符                 |<br>| \\t       | 横向制表符                 |<br>| \\r       | 回车                    |<br>| \\f       | 换页                    |<br>| \\oyy     | 八进制，yy表字符，如：\\o12代表换行  |<br>| \\xyy     | 十六进制，yy表字符，如：\\x0a代表换行 |<br>| \\other   | 其他字符将以普通格式输出          |</p>\n</li>\n<li><p>字符串运算</p>\n<p>| 操作符    | 描述                              |<br>| —— | ——————————- |<br>| +      | 串联                              |<br>| *      | 重复                              |<br>| []     | 截取[index],index位置的字符            |<br>| [ : ]  | 截取<code>:</code>前后数字范围内，如，[1:4)取不到右边数字的字符。 |<br>| in     | 成员运算符，含有返回True                  |<br>| not in | 成员运算符，不含有返回True                 |<br>| r/R    | 原始字符串，不转义，原始输出。                 |</p>\n</li>\n<li><p>字符串格式化</p>\n<p>类似C 语言的printf函数，将需要格式化的数字字符，格式化后传入%s之类的占据的位置。==格式化==</p>\n<p>| 符号   | 描述            |<br>| —- | ————- |<br>| %c   | 字符及其ASCII码    |<br>| %s   | 字符串           |<br>| %d   | 整数            |<br>| %u   | 无符号整型         |<br>| %o   | 无符号八进制数       |<br>| %x   | 无符号十六进制数      |<br>| %X   | 无符号十六进制数，大写   |<br>| %f   | 浮点数子，可指定小数点精度 |<br>| %e   | 科学计数法格式化浮点数   |<br>| %E   | 同%e           |<br>| %g   | %f和%e的简写      |<br>| %G   | %f和%e的简写      |<br>| %p   | 十六进制格式化变量的地址  |</p>\n<ul>\n<li><p>格式化操作符辅助指令</p>\n<p>| 符号     | 功能                   |<br>| —— | ——————– |<br>| *      | 定义宽度或小数精度            |<br>| -      | 左对齐                  |<br>| +      | 正数前显示+号              |<br>| <code>&lt;sp&gt;</code> | 正数前显示空格              |<br>| #      | 八进制前显示0，十六进制前显示0x或0X |<br>| 0      | 显示的数字前填充0，而不是空格      |<br>| %      | ‘%%’输出显示一个’%’        |<br>| (var)  | 映射变量（字典参数）           |<br>| m.n.   | m显示最小总宽度，n小数后的位数。    |</p>\n</li>\n</ul>\n</li>\n<li><p>python的三引号</p>\n<p>**三引号` <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;</div><div class=\"line\">&gt;   ==`u`==符号表示Unicode编码，如：</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   ```python</div><div class=\"line\">&gt;   #如下，则为Unicode格式</div><div class=\"line\">&gt;   u&apos;hello world&apos;</div><div class=\"line\">&gt;   u&apos;hello\\u0020world&apos;#效果如上，内部使用了\\0020代表空格</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure></p>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>==往后的api会越来越多，本笔记将不再赘述各个类型和函数的api。==</p>\n</blockquote>\n</li>\n<li><p>List列表</p>\n<blockquote>\n<p>Python有6个序列类型，常见的为==列表==和==元组==。序列常用操作：<code>索引</code>、<code>切片</code>、<code>加</code>、<code>乘</code>、<code>检查成员</code>，以及最大最小值的获取。</p>\n<ul>\n<li><p>列表，格式<code>[ ]</code>内用`,分隔。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   \tlist = [<span class=\"number\">1</span>,<span class=\"string\">'abc'</span>,<span class=\"keyword\">False</span>,list,<span class=\"string\">\"hello pythono\"</span>];<span class=\"comment\">#列表元素类型可以不同，可以嵌套列表。类似数组，可以索引，左0，右-1</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n<p>更新，直接赋值新的元素。删除，del对应元素。</p>\n</li>\n<li><p>python列表脚本操作符</p>\n<p>| 表达式                      | 结果                        | 描述         |<br>| ———————— | ————————- | ———- |<br>| len([1,2,3])             | 3                         | 长度         |<br>| [1,2,3]+[4,5,6]          | [1,2,3,4,5,6]             | zu’he      |<br>| [‘Hi!’]*4                | [‘Hi!’,’Hi!’,’Hi!’,’Hi!’] | 重复         |<br>| 3 in [1,2,3]             | True                      | 判断元素是否属于列表 |<br>| for x in [1,2,3]:print x | 1 2 3                     | 遍历 迭代      |</p>\n<p><strong>列表的截取，类似字符串的操作。通过索引，取值范围来截取。</strong></p>\n</li>\n<li><p>Python列表相关的函数&amp;方法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   cmp(list1,list2);<span class=\"comment\">#比较两个列表</span></div><div class=\"line\">&gt;   len(list);<span class=\"comment\">#list长度、元素个数</span></div><div class=\"line\">&gt;   max(list);<span class=\"comment\">#list最大元素值</span></div><div class=\"line\">&gt;   min(list);<span class=\"comment\">#list最小元素值</span></div><div class=\"line\">&gt;   list(seq);<span class=\"comment\">#将元组转化为列表</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   list.append(obj);<span class=\"comment\">#列表尾新增对象</span></div><div class=\"line\">&gt;   list.count(obj);<span class=\"comment\">#统计某元素出现次数</span></div><div class=\"line\">&gt;   list.extend(seq);<span class=\"comment\">#用新列表扩展</span></div><div class=\"line\">&gt;   list.index(obg);<span class=\"comment\">#元素第一次出现位置</span></div><div class=\"line\">&gt;   list.insert(index,obj);<span class=\"comment\">#指定位置插入</span></div><div class=\"line\">&gt;   list.pop(obj=list[<span class=\"number\">-1</span>]);<span class=\"comment\">#移除列表中最后一个元素，或指定位置的。</span></div><div class=\"line\">&gt;   list.remove(obj);<span class=\"comment\">#移除第一个找到的该元素</span></div><div class=\"line\">&gt;   list.reverse();<span class=\"comment\">#反向列表</span></div><div class=\"line\">&gt;   list.sort([func]);<span class=\"comment\">#排序</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p>元组</p>\n<blockquote>\n<p>元组类似列表，但是==不能修改元素==。</p>\n<p>格式<code>( )</code>，用<code>,</code>分隔。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;tup = (<span class=\"string\">'adb'</span>,<span class=\"number\">12</span>,list);</div><div class=\"line\">&gt;tup2 = ();<span class=\"comment\">#空元组</span></div><div class=\"line\">&gt;tup3 = (<span class=\"number\">2</span>,);<span class=\"comment\">#元组只有一个元素，则必须有个逗号,</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><strong>访问元组，类似列表和字符串的查找</strong>，元组不能修改，但是可以==串接==。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;tup1 = (<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>);</div><div class=\"line\">&gt;tup2 = (<span class=\"string\">'ab'</span>,<span class=\"string\">'cd'</span>,<span class=\"string\">'ddf'</span>);</div><div class=\"line\">&gt;tup3 = tup1 + tup2;<span class=\"comment\">#元组串接。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><strong><em>元组元素不能删除，但是==元组可以被删除==</em></strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;tup = (<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>);</div><div class=\"line\">&gt;<span class=\"keyword\">del</span> tup;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><code>任意无符号的对象，以,分隔，默认为元组</code></p>\n<ul>\n<li><p>元组的一些方法和函数，类似列表</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;  tuple(seq);<span class=\"comment\">#列表转化为元组</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p>字典Dictionary</p>\n<blockquote>\n<p>字典类似于java中的map集合。使用键值对<code>key-value</code>，格式：=={key1:value1,key2:value2}==</p>\n<ul>\n<li><p><strong>key值唯一</strong></p>\n</li>\n<li><p><strong>value值可以任何类型，key值必是不可变类型，如字符串、数字和元组。</strong></p>\n</li>\n<li><p>字典内，所有的key不需要都为统一类型</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   dict = &#123;<span class=\"string\">\"abc\"</span>:<span class=\"string\">'adb'</span>,<span class=\"string\">'def'</span>:<span class=\"number\">23</span>,<span class=\"number\">55</span>:<span class=\"string\">'adb'</span>&#125;</div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> (<span class=\"string\">\"dict[55]\"</span>);<span class=\"comment\">#根据key值，若是没有，会报错。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>字典元素的修改，删除</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"keyword\">del</span> dict[key];<span class=\"comment\">#删除指定元素</span></div><div class=\"line\">&gt;   dict.clear();<span class=\"comment\">#清空字典</span></div><div class=\"line\">&gt;   <span class=\"keyword\">del</span> dict;<span class=\"comment\">#删除字典</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>字典的函数&amp;方法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   cmp(dict1,dict2);<span class=\"comment\">#比较</span></div><div class=\"line\">&gt;   len(dict);<span class=\"comment\">#计数</span></div><div class=\"line\">&gt;   str(dict);<span class=\"comment\">#字符输出字典元素</span></div><div class=\"line\">&gt;   type(variable);<span class=\"comment\">#变量的类型</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   radiansdict.clear();<span class=\"comment\">#清空字典</span></div><div class=\"line\">&gt;   radiansdict.copy();<span class=\"comment\">#字典浅复制</span></div><div class=\"line\">&gt;   radiansdict.get(key,default=<span class=\"keyword\">None</span>);<span class=\"comment\">#获取值，若无，返回默认值。</span></div><div class=\"line\">&gt;   radiansdict.has_key(key);<span class=\"comment\">#查询是否包含指定key值</span></div><div class=\"line\">&gt;   radiansdict.items();<span class=\"comment\">#遍历显示字典元素数组</span></div><div class=\"line\">&gt;   radiansdict.keys();<span class=\"comment\">#列表显示所有key</span></div><div class=\"line\">&gt;   radiansdict.setdefault(key,default=<span class=\"keyword\">None</span>);<span class=\"comment\">#类似get，若key不存在，则添加。</span></div><div class=\"line\">&gt;   radiansdict.update(dict2);<span class=\"comment\">#将dict2更新到dict中。</span></div><div class=\"line\">&gt;   radiansdict.values();<span class=\"comment\">#返回所有value值。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p>python日期时间</p>\n<blockquote>\n<p>类似其他编程语言，时间基于1970年1月1日。Unix和windows支持到2038年？</p>\n<ul>\n<li><p>time</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   time.time();<span class=\"comment\">#获取时间戳</span></div><div class=\"line\">&gt;   time.localtime(time.time());<span class=\"comment\">#获得时间的元组</span></div><div class=\"line\">&gt;   time.asctime(time.localtime(time.time()));<span class=\"comment\">#格式化时间</span></div><div class=\"line\">&gt;   time.strftime(format[,t]);<span class=\"comment\">#自定义字符格式化时间</span></div><div class=\"line\">&gt;   <span class=\"comment\"># 格式化成2016-03-20 11:45:39形式</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> time.strftime(<span class=\"string\">\"%Y-%m-%d %H:%M:%S\"</span>, time.localtime()) </div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\"># 格式化成Sat Mar 28 22:24:24 2016形式</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> time.strftime(<span class=\"string\">\"%a %b %d %H:%M:%S %Y\"</span>, time.localtime()) </div><div class=\"line\">&gt;     </div><div class=\"line\">&gt;   <span class=\"comment\"># 将格式字符串转换为时间戳</span></div><div class=\"line\">&gt;   a = <span class=\"string\">\"Sat Mar 28 22:24:24 2016\"</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> time.mktime(time.strptime(a,<span class=\"string\">\"%a %b %d %H:%M:%S %Y\"</span>));</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>calendar</p>\n<p>==0-6表示一周，0表示周一。==</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   calendar.month(<span class=\"number\">2016</span>,<span class=\"number\">10</span>);<span class=\"comment\">#获取制定月份的日历。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>  <strong>函数和方法不在赘述</strong></p>\n<p>  datetime、pytz、dateutil模块也是处理时间相关。</p>\n</blockquote>\n</li>\n<li><p>函数</p>\n<blockquote>\n<p>类似其他编程语言的函数&amp;方法定义，python函数格式：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">functionname</span><span class=\"params\">( parameters )</span>:</span></div><div class=\"line\">&gt;     <span class=\"string\">\"函数文档\"</span></div><div class=\"line\">&gt;     function_suite</div><div class=\"line\">&gt;     <span class=\"keyword\">return</span> [expression]</div><div class=\"line\">&gt; <span class=\"comment\">#def 关键字，声明函数</span></div><div class=\"line\">&gt; <span class=\"comment\">#functionname 函数名</span></div><div class=\"line\">&gt; <span class=\"comment\">#(parameters) 参数，多个参数可以，分隔？还是多个括号</span></div><div class=\"line\">&gt; <span class=\"comment\">#可写声明文档，</span></div><div class=\"line\">&gt; <span class=\"comment\">#返回值，可以是None。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><strong>按值传递与按引用传递</strong></p>\n<p>Python中所有参数的传递，都是==引用传递==，一处修改，原始值则变。</p>\n<ul>\n<li><p>函数的参数：</p>\n<p><code>必备参数</code>、<code>关键字参数</code>、<code>默认参数</code>、<code>不定长参数</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"comment\">#必备参数，必须传入的形式，否则报错</span></div><div class=\"line\">&gt;   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">printStr</span><span class=\"params\">(str)</span>:</span></div><div class=\"line\">&gt;       ...</div><div class=\"line\">&gt;   \t<span class=\"keyword\">return</span>;    </div><div class=\"line\">&gt;   <span class=\"comment\">#关键字参数，输入参数的格式顺序，不必和声明的顺序一致。</span></div><div class=\"line\">&gt;   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">printInfo</span><span class=\"params\">(name,age)</span>:</span></div><div class=\"line\">&gt;       print(<span class=\"string\">\"name:\"</span>,name);</div><div class=\"line\">&gt;       print(<span class=\"string\">\"age:\"</span>,age)</div><div class=\"line\">&gt;       <span class=\"keyword\">return</span>;</div><div class=\"line\">&gt;   printInfo(age = <span class=\"number\">27</span>,name = <span class=\"string\">'jack'</span>);</div><div class=\"line\">&gt;   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">printDefault</span><span class=\"params\">(name,age=<span class=\"number\">20</span>)</span>:</span></div><div class=\"line\">&gt;       ......</div><div class=\"line\">&gt;       <span class=\"keyword\">return</span>;</div><div class=\"line\">&gt;   <span class=\"comment\">#此时可以使用默认参数</span></div><div class=\"line\">&gt;   printDefault(name = <span class=\"string\">'jack'</span>);<span class=\"comment\">#age 默认了。</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\">#不定长参数</span></div><div class=\"line\">&gt;   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">printLong</span><span class=\"params\">(arg1,*args)</span>:</span><span class=\"comment\">#星号*的那个参数，为可变参数。</span></div><div class=\"line\">&gt;       print(arg2);</div><div class=\"line\">&gt;       <span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> args:</div><div class=\"line\">&gt;           <span class=\"keyword\">print</span> var;</div><div class=\"line\">&gt;       <span class=\"keyword\">return</span>;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>Python使用lambda创建匿名函数。</p>\n<ul>\n<li>lambda是表达式，函数比def简单</li>\n<li>只能在lambda表达式中构建逻辑</li>\n<li>lambda仅能访问自有参数。</li>\n<li>lambda似乎只能写一行。</li>\n</ul>\n<p>==语法==</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"keyword\">lambda</span> [arg2[,arg2,......]]:expression</div><div class=\"line\">&gt;   <span class=\"comment\">#示例</span></div><div class=\"line\">&gt;   sum = <span class=\"keyword\">lambda</span> arg1,arg2:arg1+arg2;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\">#调用sum函数</span></div><div class=\"line\">&gt;   sum(<span class=\"number\">1</span>,<span class=\"number\">2</span>);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>  <strong>return用于退出函数，无有返回值则是None。</strong></p>\n<p>  变量作用域，全局和局部，都是作用于其声明范围内。</p>\n</blockquote>\n</li>\n<li><p>Python模块</p>\n<blockquote>\n<p>python模块指一段逻辑或函数方法，在python中，模块也是一个对象，可以命名，引用。类似于java中的类文件？</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">import</span> module1[,module2,...]<span class=\"comment\">#导入模块，就可以使用其方法和逻辑。</span></div><div class=\"line\">&gt; <span class=\"comment\">#用类名/文件名.方法/函数,来调用。</span></div><div class=\"line\">&gt; <span class=\"keyword\">from</span> modname <span class=\"keyword\">import</span> name1[,name2,...]<span class=\"comment\">#从指定空间导入模块。</span></div><div class=\"line\">&gt; <span class=\"keyword\">from</span> modname <span class=\"keyword\">import</span> * <span class=\"comment\">#导入指定名称空间下的所有模块。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>寻找模块的顺序是：当前文件、path路径、系统默认路径。</p>\n<ul>\n<li>变量默认都是局部范围的，全局变量需要global声明。</li>\n<li>dir()函数，列表显示。</li>\n<li>globals()和locals(),reload();</li>\n<li>python中也有包，文件的概念。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>Python文件IO和File、异常</p>\n<blockquote>\n<ul>\n<li><p>文件I/O</p>\n<p><code>raw_input</code></p>\n<p><code>input</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;  <span class=\"comment\">#raw_input 接受输入的一行</span></div><div class=\"line\">&gt;  str = raw_input(<span class=\"string\">\"Please input :\"</span>);</div><div class=\"line\">&gt;  print(<span class=\"string\">\"输入内容为：\"</span>,str);<span class=\"comment\">#str会接收键盘的输入内容</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;  <span class=\"comment\">#input类似与raw_input，可以接受输入表达式</span></div><div class=\"line\">&gt;  str = input(<span class=\"string\">\"Please input:\"</span>);</div><div class=\"line\">&gt;  print(<span class=\"string\">\"输入内容为：\"</span>,str);</div><div class=\"line\">&gt;  <span class=\"comment\">#上面可以输入：[x*5 for x in range(2,10,2)]</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>file对象操作文件</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;  file object = open(file_name[,access_mode][,buffering]);<span class=\"comment\">#用open()方法打开文件</span></div><div class=\"line\">&gt;  file.closed;<span class=\"comment\"># true or false</span></div><div class=\"line\">&gt;  file.mode;</div><div class=\"line\">&gt;  file.name;</div><div class=\"line\">&gt;  file.softspace;<span class=\"comment\">#有空格符来结束，需要返回False，不需要，True。</span></div><div class=\"line\">&gt;  file.write(string);<span class=\"comment\">#不会默认行尾加换行的，。</span></div><div class=\"line\">&gt;  file.read([count]);<span class=\"comment\">#读取指定个数的字节数。</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;  tell();<span class=\"comment\">#可知文件内，当前位置。</span></div><div class=\"line\">&gt;  seek(offset[,<span class=\"keyword\">from</span>]);<span class=\"comment\">#改变当前位置</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;  <span class=\"comment\">#python 的os模块有删除、重命名文件的方法</span></div><div class=\"line\">&gt;  os.rename(old_name,new_name);</div><div class=\"line\">&gt;  os.remove(<span class=\"string\">\"test.txt\"</span>);<span class=\"comment\">#删除文件</span></div><div class=\"line\">&gt;  os.mkdir(<span class=\"string\">\"abc\"</span>);os.chdir(<span class=\"string\">\"new\"</span>);os.getcwd();<span class=\"comment\">#显示当前目录。</span></div><div class=\"line\">&gt;  os.rmdir();</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p><strong>异常处理</strong></p>\n<p>try/except语句</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;  <span class=\"keyword\">try</span>:</div><div class=\"line\">&gt;      &lt;statements&gt;<span class=\"comment\">#运行代码</span></div><div class=\"line\">&gt;  <span class=\"keyword\">except</span> &lt;exception&gt;:</div><div class=\"line\">&gt;      &lt;e1&gt;<span class=\"comment\">#try到异常name</span></div><div class=\"line\">&gt;  <span class=\"keyword\">except</span> &lt;exception&gt;,&lt;data&gt;:</div><div class=\"line\">&gt;      &lt;e2&gt;<span class=\"comment\">#try到异常，并有数据</span></div><div class=\"line\">&gt;  <span class=\"keyword\">else</span>:</div><div class=\"line\">&gt;      &lt;statements2&gt;<span class=\"comment\">#无异常时候运行</span></div><div class=\"line\">&gt;  <span class=\"comment\">#类似java，python中可以不写exception的name，就会捕获所有异常。</span></div><div class=\"line\">&gt;  <span class=\"comment\">#也可以</span></div><div class=\"line\">&gt;  <span class=\"keyword\">except</span>(e1,e2,...):</div><div class=\"line\">&gt;      ...</div><div class=\"line\">&gt;  <span class=\"comment\">#类似java 有try finally</span></div><div class=\"line\">&gt;  <span class=\"keyword\">try</span>:</div><div class=\"line\">&gt;      &lt;&gt;</div><div class=\"line\">&gt;  <span class=\"keyword\">finally</span>:</div><div class=\"line\">&gt;      &lt;&gt;<span class=\"comment\">#总会执行的语句。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p> ==raise==语句自动触发异常</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;  <span class=\"keyword\">raise</span> [Exception[,args[,traceback]]]</div><div class=\"line\">&gt;  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">functionName</span><span class=\"params\">( level )</span>:</span></div><div class=\"line\">&gt;      <span class=\"keyword\">if</span> level &lt; <span class=\"number\">1</span>:</div><div class=\"line\">&gt;          <span class=\"keyword\">raise</span> Exception(<span class=\"string\">\"Invalid level!\"</span>, level)</div><div class=\"line\">&gt;          <span class=\"comment\"># 触发异常后，后面的代码就不会再执行</span></div><div class=\"line\">&gt;          </div><div class=\"line\">&gt;  <span class=\"keyword\">try</span>:</div><div class=\"line\">&gt;     <span class=\"comment\"># 正常逻辑</span></div><div class=\"line\">&gt;  <span class=\"keyword\">except</span> <span class=\"string\">\"Invalid level!\"</span>:<span class=\"comment\">#对应自定义的异常名，如上。</span></div><div class=\"line\">&gt;     <span class=\"comment\"># 触发自定义异常    </span></div><div class=\"line\">&gt;  <span class=\"keyword\">else</span>:</div><div class=\"line\">&gt;     <span class=\"comment\"># 其余代码</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyError</span><span class=\"params\">(RuntimeError)</span>:</span></div><div class=\"line\">&gt;      <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">init</span><span class=\"params\">(self,arg)</span>:</span></div><div class=\"line\">&gt;          self.args = arg</div><div class=\"line\">&gt;          </div><div class=\"line\">&gt;  <span class=\"comment\">#自己触发异常</span></div><div class=\"line\">&gt;  <span class=\"keyword\">try</span>:</div><div class=\"line\">&gt;      <span class=\"keyword\">raise</span> MyError(<span class=\"string\">\"hao xiang shu ru cuo le \"</span>)</div><div class=\"line\">&gt;  <span class=\"keyword\">except</span> Networkerror,e:</div><div class=\"line\">&gt;      <span class=\"keyword\">print</span> e.args</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"四、Python高级教程\"><a href=\"#四、Python高级教程\" class=\"headerlink\" title=\"四、Python高级教程\"></a>四、Python高级教程</h2><ul>\n<li><p>面向对象</p>\n<blockquote>\n<p>Python是一种面向对象的解释型语言，类似于其他面向对象的编程语言，需要熟悉一下面向对象的名词概念：</p>\n<ul>\n<li><code>类(class)</code>：用于描述具有相同属性和方法的对象的集合。描述一类事物，对象是类的实例。</li>\n<li><code>类变量</code>：类中公开化的变量，作用于类的范围内，区别于实例变量。</li>\n<li><code>数据成员</code>：类变量或实例变量，用于处理实例对象相关的数据。</li>\n<li><code>方法重写</code>：重写继承自父类的方法，实现自有的逻辑。override。</li>\n<li><code>实例变量</code>：定义在方法中的变量，作用于方法内。</li>\n<li><code>继承</code>：即一个派生类继承基类的字段和方法。</li>\n<li><code>实例化</code>：创建一个类的实例，类的具体对象。</li>\n<li><code>方法</code>：类中定义的函数。</li>\n<li><code>对象</code>：根据类定义的数据结构构建的一个实例，包含类的数据成员和方法。</li>\n</ul>\n<ol>\n<li><p>创建类</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassName</span>:</span><span class=\"comment\">#定义类的关键字class</span></div><div class=\"line\">&gt;        <span class=\"string\">'类的描述信息'</span> <span class=\"comment\">#帮助文档</span></div><div class=\"line\">&gt;        class_suite <span class=\"comment\">#类题</span></div><div class=\"line\">&gt;    <span class=\"comment\">#例如：</span></div><div class=\"line\">&gt;    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span>:</span></div><div class=\"line\">&gt;       <span class=\"string\">'所有员工的基类'</span></div><div class=\"line\">&gt;       empCount = <span class=\"number\">0</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;       <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name, salary)</span>:</span><span class=\"comment\">#构造函数</span></div><div class=\"line\">&gt;          self.name = name</div><div class=\"line\">&gt;          self.salary = salary</div><div class=\"line\">&gt;          Employee.empCount += <span class=\"number\">1</span></div><div class=\"line\">&gt;       </div><div class=\"line\">&gt;       <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">displayCount</span><span class=\"params\">(self)</span>:</span><span class=\"comment\">#方法函数</span></div><div class=\"line\">&gt;         <span class=\"keyword\">print</span> <span class=\"string\">\"Total Employee %d\"</span> % Employee.empCount</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;       <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">displayEmployee</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">&gt;          <span class=\"keyword\">print</span> <span class=\"string\">\"Name : \"</span>, self.name,  <span class=\"string\">\", Salary: \"</span>, self.salary</div><div class=\"line\">&gt;    <span class=\"comment\">#实例化对象</span></div><div class=\"line\">&gt;    objectName = ClassName(...);<span class=\"comment\">#根据类的构造函数创建对象。</span></div><div class=\"line\">&gt;    <span class=\"comment\">#访问方法属性，用object.method();</span></div><div class=\"line\">&gt;    objectName.displayCount();</div><div class=\"line\">&gt;    <span class=\"comment\">#可以添加、删除、修改类的属性</span></div><div class=\"line\">&gt;    objectName.age = <span class=\"number\">20</span>;<span class=\"comment\"># add attribution</span></div><div class=\"line\">&gt;    objectName.age =<span class=\"number\">26</span>;<span class=\"comment\">#modify attribution</span></div><div class=\"line\">&gt;    <span class=\"keyword\">del</span> objectName.age <span class=\"comment\"># delete attribution</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;<br>&gt;</p>\n<blockquote>\n<p>   <strong>Python有专门的函数，处理类的属性和方法</strong><br>   getattr(obj,name[,default]);<br>   setattr(obj,name,value);<br>   hasattr(obj,name);<br>   delattr(obj,name);</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;</div><div class=\"line\">&gt; 2. Python内置属性</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    ```python</div><div class=\"line\">&gt;    #python attribution，用ClassName.function调用。</div><div class=\"line\">&gt;    __dict__:类的属性</div><div class=\"line\">&gt;    __doc__:类的文档字符串</div><div class=\"line\">&gt;    __name__:类名</div><div class=\"line\">&gt;    __module__:类定义所在的模块</div><div class=\"line\">&gt;    __bases__类的所有父类构成元素</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p>类似java，python使用内置引用计数器，处理垃圾回收。</p>\n</li>\n<li><p>Python的继承：</p>\n<ul>\n<li><p>格式：class SubClassName [ParentClass1[,ParentClass2,…]]:</p>\n</li>\n<li><p>Python类的继承==支持多继承==</p>\n</li>\n<li><p>派生类继承基类，构造函数不会被自动调用，需要专门调用。</p>\n</li>\n<li><p>调用基类方法时候，需要用BaseClassName.而且需要self参数。区别于本类内的函数方法。</p>\n</li>\n<li><p>同类函数名，则优先调用本类中的函数方法，若无，再去基类中寻找。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;      issbuclass();#判断是否是另一个类的派生类，issubclass(sub,super);</div><div class=\"line\">&gt;      isinstance(obj,class);#判断一个对象，是不是类的实例。</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p>方法重写与重载</p>\n<ul>\n<li><p>重写基类的方法，用于实现自己的逻辑。</p>\n</li>\n<li><p>基础重载：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;      <span class=\"comment\">#函数方法，前后两个下划线__init__</span></div><div class=\"line\">&gt;      __init__(self[,args])<span class=\"comment\">#构造函数</span></div><div class=\"line\">&gt;      __del__(self)<span class=\"comment\">#删除对象</span></div><div class=\"line\">&gt;      __repr__(self)<span class=\"comment\">#转化为编译器格式</span></div><div class=\"line\">&gt;      __str__(self)<span class=\"comment\">#转化为可阅读模式</span></div><div class=\"line\">&gt;      __cmp__(self,x)<span class=\"comment\">#对象比较</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>运算符重载</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;      <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vector</span>:</span></div><div class=\"line\">&gt;         <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, a, b)</span>:</span></div><div class=\"line\">&gt;            self.a = a</div><div class=\"line\">&gt;            self.b = b</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;         <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">&gt;            <span class=\"keyword\">return</span> <span class=\"string\">'Vector (%d, %d)'</span> % (self.a, self.b)</div><div class=\"line\">&gt;         </div><div class=\"line\">&gt;         <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__add__</span><span class=\"params\">(self,other)</span>:</span></div><div class=\"line\">&gt;            <span class=\"keyword\">return</span> Vector(self.a + other.a, self.b + other.b)</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;      v1 = Vector(<span class=\"number\">2</span>,<span class=\"number\">10</span>)</div><div class=\"line\">&gt;      v2 = Vector(<span class=\"number\">5</span>,<span class=\"number\">-2</span>)</div><div class=\"line\">&gt;      <span class=\"keyword\">print</span> v1 + v2<span class=\"comment\">#运算符的重载</span></div><div class=\"line\">&gt;      <span class=\"comment\">#输出结果</span></div><div class=\"line\">&gt;      Vector(<span class=\"number\">7</span>,<span class=\"number\">8</span>)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p><strong>类的属性和方法</strong></p>\n<ul>\n<li><p>类的私有属性</p>\n<p>__private<em>attrs：两个下划线开头，仅能在类内部使用。self.\\</em>_private_attrs。</p>\n</li>\n<li><p>类的方法</p>\n<p>关键字<code>def</code>定义类的方法，类似定义函数。但是类的方法必须包含参数<code>self</code>且为第一参数，私有方法：__private<em>method，内部调用self.\\</em>_private_method</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;      <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">method</span><span class=\"params\">(self[,args])</span>:</span></div><div class=\"line\">&gt;          .....</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li>Python不允许实例化的类访问私有数据，可用obj._classname_attrName访问属性。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>正则表达式</p>\n<blockquote>\n<p>Python的re模块包含了全部的正则表达式。</p>\n<p>compile函数用于构建正则表达式。</p>\n<ol>\n<li><p>re.match</p>\n<p>从字符串起始位置匹配，起始不成功匹配，返回None。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    <span class=\"comment\">#pattern 正则表达式，string 匹配字符串，flags标志位，如区分大小写，多行匹配等。</span></div><div class=\"line\">&gt;    re.match(pattern,string,flags=<span class=\"number\">0</span>);</div><div class=\"line\">&gt;    group(num= <span class=\"number\">0</span>)<span class=\"comment\">#匹配整个表达式字符串，group可以依次输入多个组号。</span></div><div class=\"line\">&gt;    groups();<span class=\"comment\">#返回包含所有小组字符串的元组。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>   示例：</p>\n   <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    <span class=\"keyword\">import</span> re</div><div class=\"line\">&gt;    print(re.match(<span class=\"string\">'www'</span>, <span class=\"string\">'www.runoob.com'</span>).span())  <span class=\"comment\"># 在起始位置匹配</span></div><div class=\"line\">&gt;    print(re.match(<span class=\"string\">'com'</span>, <span class=\"string\">'www.runoob.com'</span>))         <span class=\"comment\"># 不在起始位置匹配</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\">#输出结果</span></div><div class=\"line\">&gt;    (<span class=\"number\">0</span>,<span class=\"number\">3</span>)</div><div class=\"line\">&gt;    <span class=\"keyword\">None</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n   <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt;    <span class=\"keyword\">import</span> re</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    line = <span class=\"string\">\"Cats are smarter than dogs\"</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    matchObj = re.match( <span class=\"string\">r'(.*) are (.*?) .*'</span>, line, re.M|re.I)</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"keyword\">if</span> matchObj:</div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> <span class=\"string\">\"matchObj.group() : \"</span>, matchObj.group()</div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> <span class=\"string\">\"matchObj.group(1) : \"</span>, matchObj.group(<span class=\"number\">1</span>)</div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> <span class=\"string\">\"matchObj.group(2) : \"</span>, matchObj.group(<span class=\"number\">2</span>)</div><div class=\"line\">&gt;    <span class=\"keyword\">else</span>:</div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> <span class=\"string\">\"No match!!\"</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\">#输出结果</span></div><div class=\"line\">&gt;    matchObj.group() :  Cats are smarter than dogs</div><div class=\"line\">&gt;    matchObj.group(<span class=\"number\">1</span>) :  Cats</div><div class=\"line\">&gt;    matchObj.group(<span class=\"number\">2</span>) :  smarter</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p>re.search方法</p>\n<p>扫描整个字符串，并返回第一个成功的匹配。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    re.search(pattern,string,flags=<span class=\"number\">0</span>);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>   示例：</p>\n   <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt;    <span class=\"comment\"># -*- coding: UTF-8 -*- </span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"keyword\">import</span> re</div><div class=\"line\">&gt;    print(re.search(<span class=\"string\">'www'</span>, <span class=\"string\">'www.runoob.com'</span>).span())  <span class=\"comment\"># 在起始位置匹配</span></div><div class=\"line\">&gt;    print(re.search(<span class=\"string\">'com'</span>, <span class=\"string\">'www.runoob.com'</span>).span())         <span class=\"comment\"># 不在起始位置匹配</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\">#输出结果</span></div><div class=\"line\">&gt;    (<span class=\"number\">0</span>,<span class=\"number\">3</span>)</div><div class=\"line\">&gt;    (<span class=\"number\">11</span>,<span class=\"number\">14</span>)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n   <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt;    <span class=\"keyword\">import</span> re</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    line = <span class=\"string\">\"Cats are smarter than dogs\"</span>;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    searchObj = re.search( <span class=\"string\">r'(.*) are (.*?) .*'</span>, line, re.M|re.I)</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"keyword\">if</span> searchObj:</div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> <span class=\"string\">\"searchObj.group() : \"</span>, searchObj.group()</div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> <span class=\"string\">\"searchObj.group(1) : \"</span>, searchObj.group(<span class=\"number\">1</span>)</div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> <span class=\"string\">\"searchObj.group(2) : \"</span>, searchObj.group(<span class=\"number\">2</span>)</div><div class=\"line\">&gt;    <span class=\"keyword\">else</span>:</div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> <span class=\"string\">\"Nothing found!!\"</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\">#输出结果</span></div><div class=\"line\">&gt;    searchObj.group() :  Cats are smarter than dogs</div><div class=\"line\">&gt;    searchObj.group(<span class=\"number\">1</span>) :  Cats</div><div class=\"line\">&gt;    searchObj.group(<span class=\"number\">2</span>) :  smarter</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p>re.match &amp; re.search</p>\n<p><code>re.match</code>匹配起始，不成功则None。</p>\n<p><code>re.search</code>匹配全部。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    #!/usr/bin/python</div><div class=\"line\">&gt;    import re</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    line = \"Cats are smarter than dogs\";</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    matchObj = re.match( r'dogs', line, re.M|re.I)</div><div class=\"line\">&gt;    if matchObj:</div><div class=\"line\">&gt;       print \"match --&gt; matchObj.group() : \", matchObj.group()</div><div class=\"line\">&gt;    else:</div><div class=\"line\">&gt;       print \"No match!!\"</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    matchObj = re.search( r'dogs', line, re.M|re.I)</div><div class=\"line\">&gt;    if matchObj:</div><div class=\"line\">&gt;       print \"search --&gt; matchObj.group() : \", matchObj.group()</div><div class=\"line\">&gt;    else:</div><div class=\"line\">&gt;       print \"No match!!\"</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    #输出结果</div><div class=\"line\">&gt;    No match!!</div><div class=\"line\">&gt;    serach --&gt; matchObj.group() : dogs</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p>re.sub检索和替换</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    re.sub(pattern,rep1,string,max = <span class=\"number\">0</span>);<span class=\"comment\">#count &gt;=0,匹配次数。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>   示例：</p>\n   <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt;    <span class=\"keyword\">import</span> re</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    phone = <span class=\"string\">\"2004-959-559 # This is Phone Number\"</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\"># Delete Python-style comments</span></div><div class=\"line\">&gt;    num = re.sub(<span class=\"string\">r'#.*$'</span>, <span class=\"string\">\"\"</span>, phone)</div><div class=\"line\">&gt;    <span class=\"keyword\">print</span> <span class=\"string\">\"Phone Num : \"</span>, num</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\"># Remove anything other than digits</span></div><div class=\"line\">&gt;    num = re.sub(<span class=\"string\">r'\\D'</span>, <span class=\"string\">\"\"</span>, phone)    </div><div class=\"line\">&gt;    <span class=\"keyword\">print</span> <span class=\"string\">\"Phone Num : \"</span>, num</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\">#输出结果</span></div><div class=\"line\">&gt;    Phone Num :  <span class=\"number\">2004</span><span class=\"number\">-959</span><span class=\"number\">-559</span></div><div class=\"line\">&gt;    Phone Num :  <span class=\"number\">2004959559</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p>正则表达式的修饰符-可选标志</p>\n<p><em>标志修饰符控制匹配模式，多个标识符可以用按位OR<code>|</code>指定</em></p>\n<p>| 修饰符  | 描绘                                |<br>| —- | ——————————— |<br>| re.l | 匹配不分大小写                           |<br>| re.L | 本地化识别(local-aware)匹配              |<br>| re.M | 多行匹配，影响<code>^</code>和<code>$</code>                    |<br>| re.S | 使<code>.</code>匹配包括行在内的所有字符                  |<br>| re.U | Unicode解析字符，影响<code>\\w</code>、<code>\\W</code>、<code>\\b</code>、<code>\\B</code> |<br>| re.X | 灵活格式                              |</p>\n</li>\n<li><p>正则表达式模式</p>\n<ul>\n<li><code>字母和数字</code>表达自身。</li>\n<li>多数字母和数字前加<code>\\</code>会转义</li>\n<li>标点符号均是特殊意思，除非转义。</li>\n<li><code>\\</code>是转义符</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    ^\t匹配字符串的开头</div><div class=\"line\">&gt;    $\t匹配字符串的末尾。</div><div class=\"line\">&gt;    .\t匹配任意字符，除了换行符\\n，当re.DOTALL标记被指定时，则可以匹配包括换行符的任意字符。</div><div class=\"line\">&gt;    [...]\t用来表示一组字符,单独列出：[amk] 匹配 'a'，'m'或'k'</div><div class=\"line\">&gt;    [^...]\t不在[]中的字符：[^abc] 匹配除了a,b,c之外的字符。</div><div class=\"line\">&gt;    re*\t匹配0个或多个的表达式。</div><div class=\"line\">&gt;    re+\t匹配1个或多个的表达式。</div><div class=\"line\">&gt;    re?\t匹配0个或1个由前面的正则表达式定义的片段，非贪婪方式</div><div class=\"line\">&gt;    re&#123; n&#125;\t</div><div class=\"line\">&gt;    re&#123; n,&#125;\t精确匹配n个前面表达式。</div><div class=\"line\">&gt;    re&#123; n, m&#125;\t匹配 n 到 m 次由前面的正则表达式定义的片段，贪婪方式</div><div class=\"line\">&gt;    a| b\t匹配a或b</div><div class=\"line\">&gt;    (re)\tG匹配括号内的表达式，也表示一个组</div><div class=\"line\">&gt;    (?imx)\t正则表达式包含三种可选标志：i, m, 或 x 。只影响括号中的区域。</div><div class=\"line\">&gt;    (?-imx)\t正则表达式关闭 i, m, 或 x 可选标志。只影响括号中的区域。</div><div class=\"line\">&gt;    (?: re)\t类似 (...), 但是不表示一个组</div><div class=\"line\">&gt;    (?imx: re)\t在括号中使用i, m, 或 x 可选标志</div><div class=\"line\">&gt;    (?-imx: re)\t在括号中不使用i, m, 或 x 可选标志</div><div class=\"line\">&gt;    (?#...)\t注释.</div><div class=\"line\">&gt;    (?= re)\t前向肯定界定符。如果所含正则表达式，以 ... 表示，在当前位置成功匹配时成功，否则失败。但一旦所含表达式已经尝试，匹配引擎根本没有提高；模式的剩余部分还要尝试界定符的右边。</div><div class=\"line\">&gt;    (?! re)\t前向否定界定符。与肯定界定符相反；当所含表达式不能在字符串当前位置匹配时成功</div><div class=\"line\">&gt;    (?&gt; re)\t匹配的独立模式，省去回溯。</div><div class=\"line\">&gt;    \\w\t匹配字母数字及下划线</div><div class=\"line\">&gt;    \\W\t匹配非字母数字及下划线</div><div class=\"line\">&gt;    \\s\t匹配任意空白字符，等价于 [\\t\\n\\r\\f].</div><div class=\"line\">&gt;    \\S\t匹配任意非空字符</div><div class=\"line\">&gt;    \\d\t匹配任意数字，等价于 [0-9].</div><div class=\"line\">&gt;    \\D\t匹配任意非数字</div><div class=\"line\">&gt;    \\A\t匹配字符串开始</div><div class=\"line\">&gt;    \\Z\t匹配字符串结束，如果是存在换行，只匹配到换行前的结束字符串。c</div><div class=\"line\">&gt;    \\z\t匹配字符串结束</div><div class=\"line\">&gt;    \\G\t匹配最后匹配完成的位置。</div><div class=\"line\">&gt;    \\b\t匹配一个单词边界，也就是指单词和空格间的位置。例如， 'er\\b' 可以匹配\"never\" 中的 'er'，但不能匹配 \"verb\" 中的 'er'。</div><div class=\"line\">&gt;    \\B\t匹配非单词边界。'er\\B' 能匹配 \"verb\" 中的 'er'，但不能匹配 \"never\" 中的 'er'。</div><div class=\"line\">&gt;    \\n, \\t, 等.\t匹配一个换行符。匹配一个制表符。等</div><div class=\"line\">&gt;    \\1...\\9\t匹配第n个分组的子表达式。</div><div class=\"line\">&gt;    \\10\t匹配第n个分组的子表达式，如果它经匹配。否则指的是八进制字符码的表达式。</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n</li>\n<li><p>CGI通用网关接口</p>\n<blockquote>\n<p>CGI程序，运行在服务器，python脚本、perl脚本、shell脚本、C/C++程序等。</p>\n<p>Web服务器需支持cgi，通常在/cgi-bin/ /var/www/cgi-bin/</p>\n<p>cgi文件<code>.cgi</code>或者各自语言的源文件。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt; <span class=\"comment\"># -*- coding: UTF-8 -*-</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt; <span class=\"keyword\">print</span> <span class=\"string\">\"Content-type:text/html\"</span>\t<span class=\"comment\">#向浏览器显示的内容类型</span></div><div class=\"line\">&gt; <span class=\"keyword\">print</span>                               <span class=\"comment\"># 空行，告诉服务器结束头部</span></div><div class=\"line\">&gt; <span class=\"keyword\">print</span> <span class=\"string\">'&lt;html&gt;'</span></div><div class=\"line\">&gt; <span class=\"keyword\">print</span> <span class=\"string\">'&lt;head&gt;'</span></div><div class=\"line\">&gt; <span class=\"keyword\">print</span> <span class=\"string\">'&lt;meta charset=\"utf-8\"&gt;'</span></div><div class=\"line\">&gt; <span class=\"keyword\">print</span> <span class=\"string\">'&lt;title&gt;Hello Word - 我的第一个 CGI 程序！&lt;/title&gt;'</span></div><div class=\"line\">&gt; <span class=\"keyword\">print</span> <span class=\"string\">'&lt;/head&gt;'</span></div><div class=\"line\">&gt; <span class=\"keyword\">print</span> <span class=\"string\">'&lt;body&gt;'</span></div><div class=\"line\">&gt; <span class=\"keyword\">print</span> <span class=\"string\">'&lt;h2&gt;Hello Word! 我是来自菜鸟教程的第一CGI程序&lt;/h2&gt;'</span></div><div class=\"line\">&gt; <span class=\"keyword\">print</span> <span class=\"string\">'&lt;/body&gt;'</span></div><div class=\"line\">&gt; <span class=\"keyword\">print</span> <span class=\"string\">'&lt;/html&gt;'</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>如上保存为hello.py，修改权限755。放置于cgi-bin/目录下，即可在浏览器中访问。</p>\n<ul>\n<li><p>CGI程序中HTTP头部常用信息</p>\n<p>| 头                  | 描述              |<br>| —————— | ————— |<br>| Content-type       | 请求与实体对应的MIME信息。 |<br>| Expires:Date       | 响应过期的日期和时间      |<br>| Location:URL       | 重定向             |<br>| Last-modified:Date | 请求资源的最后修改时间     |<br>| Content-length:N   | 请求内容长度          |<br>| Set-Cookie:String  | 设置Http Cookie   |</p>\n</li>\n<li><p>CGI环境变量</p>\n<p>所有CGI程序都接收以下环境变量</p>\n<p>| 变量名             | 描述                                  |<br>| ————— | ———————————– |<br>| CONTENT_TYPE    | MIME类型                              |<br>| CONTENT_LENGTH  | 有效数据字节数                             |<br>| HTTP_COOKIE     | 客户机内cookie内容                        |<br>| HTTP_USER_AGENT | 客户及版本，浏览器信息等。                       |<br>| PATH_INFO       | 表示CGI程序名之后的其他路径信息                   |<br>| QUERY_STRING    | GET请求时，代表所传递的信息。                    |<br>| REMOTE_ADDR     | 客户机ip地址                             |<br>| REMOTE_HOST     | 客户机主机名                              |<br>| REQUEST_METHOD  | 提供脚本被调用的方法，http/1.0协议，仅GET和POST有意义。 |<br>| SCRIPT_FILENAME | CGI脚本完整路径                           |<br>| SERVER_NAME     | CGI脚本完整名称                           |<br>| SERVER_SOFTWARE | 调用CGI程序的http服务器的名称，版本信息。            |</p>\n<hr>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;       <span class=\"comment\">#输出所有cgi环境变量信息</span></div><div class=\"line\">&gt;       <span class=\"keyword\">import</span> os</div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> <span class=\"string\">\"Content-type: text/html\"</span></div><div class=\"line\">&gt;       <span class=\"keyword\">print</span></div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> <span class=\"string\">\"&lt;meta charset=\\\"utf-8\\\"&gt;\"</span></div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> <span class=\"string\">\"&lt;b&gt;环境变量&lt;/b&gt;&lt;br&gt;\"</span></div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> <span class=\"string\">\"&lt;ul&gt;\"</span></div><div class=\"line\">&gt;       <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> os.environ.keys():</div><div class=\"line\">&gt;           <span class=\"keyword\">print</span> <span class=\"string\">\"&lt;li&gt;&lt;span style='color:green'&gt;%30s &lt;/span&gt;:%s&lt;/li&gt;\"</span> % (key,os.environ[key])</div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> <span class=\"string\">\"&lt;/ul&gt;\"</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>GET&amp;POST</p>\n<p>浏览器请求服务器的两中主要方式</p>\n<ul>\n<li><p>GET方法</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;     http://www.test.com/cgi-bin/hello.py?key1=value1&amp;key2=value2</div><div class=\"line\">&gt;     #GET方法相关注释</div><div class=\"line\">&gt;     '''</div><div class=\"line\">&gt;     请求可被缓存，请求保存在浏览器历史纪录，可被收藏书签，请求不应在处理敏感数据时使用，请求有长度限制，请求只应用于取回数据。</div><div class=\"line\">&gt;     '''</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>POST方法</p>\n<p>post方法较为安全可靠。</p>\n</li>\n</ul>\n<ul>\n<li><p>CGI中使用cookie</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   Set-cookie:name=name;expires=date;path=path;domain=domain;secure</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>  <strong>注释：</strong></p>\n<p>  <code>name=name</code>: 需要设置cookie的值(name不能使用”;”和”,”号),有多个name值时用 “;” 分隔，例如：name1=name1;name2=name2;name3=name3。<br>  <code>expires=date</code>: cookie的有效期限,格式： expires=”Wdy,DD-Mon-YYYY HH:MM:SS”<br>  <code>path=path</code>: 设置cookie支持的路径,如果path是一个路径，则cookie对这个目录下的所有文件及子目录生效，例如： path=”/cgi-bin/“，如果path是一个文件，则cookie指对这个文件生效，例如：path=”/cgi-bin/cookie.cgi”。<br>  <code>domain=domain</code>: 对cookie生效的域名，例如：domain=”www.runoob.com”<br>  <code>secure</code>: 如果给出此标志，表示cookie只能通过SSL协议的https服务器来传递。<br>  cookie的接收是通过设置环境变量HTTP_COOKIE来实现的，CGI程序可以通过检索该变量获取cookie信息。</p>\n<ul>\n<li><p>cookie检索</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;     <span class=\"comment\">#cookie信息存储在CGI环境变量HTTP_COOKIE中，</span></div><div class=\"line\">&gt;     key1=value1;key=value2;......</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>文件上传</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;     <span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\">&gt;     <span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">&gt;     <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">&gt;     <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">&gt;     <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>菜鸟教程(runoob.com)<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">&gt;     <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">&gt;     <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">&gt;      <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">enctype</span>=<span class=\"string\">\"multipart/form-data\"</span> </span></div><div class=\"line\">&gt;                          action=\"/cgi-bin/save_file.py\" method=\"post\"&gt;</div><div class=\"line\">&gt;        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>选中文件: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"filename\"</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">&gt;        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"上传\"</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">&gt;        <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\">&gt;     <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">&gt;     <span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<pre><code>上面的html形成一个界面，可以选择上传文件，调用save_file.py脚本\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;     <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt;     <span class=\"comment\"># -*- coding: UTF-8 -*-</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     <span class=\"keyword\">import</span> cgi, os</div><div class=\"line\">&gt;     <span class=\"keyword\">import</span> cgitb; cgitb.enable()</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     form = cgi.FieldStorage()</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     <span class=\"comment\"># 获取文件名</span></div><div class=\"line\">&gt;     fileitem = form[<span class=\"string\">'filename'</span>]</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     <span class=\"comment\"># 检测文件是否上传</span></div><div class=\"line\">&gt;     <span class=\"keyword\">if</span> fileitem.filename:</div><div class=\"line\">&gt;        <span class=\"comment\"># 设置文件路径 </span></div><div class=\"line\">&gt;        fn = os.path.basename(fileitem.filename)</div><div class=\"line\">&gt;        open(<span class=\"string\">'/tmp/'</span> + fn, <span class=\"string\">'wb'</span>).write(fileitem.file.read())</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;        message = <span class=\"string\">'文件 \"'</span> + fn + <span class=\"string\">'\" 上传成功'</span></div><div class=\"line\">&gt;        </div><div class=\"line\">&gt;     <span class=\"keyword\">else</span>:</div><div class=\"line\">&gt;        message = <span class=\"string\">'文件没有上传'</span></div><div class=\"line\">&gt;        </div><div class=\"line\">&gt;     <span class=\"keyword\">print</span> <span class=\"string\">\"\"\"\\</span></div><div class=\"line\">&gt;     Content-Type: text/html\\n</div><div class=\"line\">&gt;     &lt;html&gt;</div><div class=\"line\">&gt;     &lt;head&gt;</div><div class=\"line\">&gt;     &lt;meta charset=\"utf-8\"&gt;</div><div class=\"line\">&gt;     &lt;title&gt;菜鸟教程(runoob.com)&lt;/title&gt;</div><div class=\"line\">&gt;     &lt;/head&gt;</div><div class=\"line\">&gt;     &lt;body&gt;</div><div class=\"line\">&gt;        &lt;p&gt;%s&lt;/p&gt;</div><div class=\"line\">&gt;     &lt;/body&gt;</div><div class=\"line\">&gt;     &lt;/html&gt;</div><div class=\"line\">&gt;     \"\"\" % (message,)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</code></pre></blockquote>\n<p>&gt;</p>\n<blockquote>\n<pre><code>**记得文件的权限设置。**\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;     <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt;     <span class=\"comment\"># -*- coding: UTF-8 -*-</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     <span class=\"comment\"># HTTP 头部</span></div><div class=\"line\">&gt;     <span class=\"keyword\">print</span> <span class=\"string\">\"Content-Disposition: attachment; filename=\\\"foo.txt\\\"\"</span>;</div><div class=\"line\">&gt;     <span class=\"keyword\">print</span></div><div class=\"line\">&gt;     <span class=\"comment\"># 打开文件</span></div><div class=\"line\">&gt;     fo = open(<span class=\"string\">\"foo.txt\"</span>, <span class=\"string\">\"rb\"</span>)</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     str = fo.read();</div><div class=\"line\">&gt;     <span class=\"keyword\">print</span> str</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     <span class=\"comment\"># 关闭文件</span></div><div class=\"line\">&gt;     fo.close()</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</code></pre></blockquote>\n<p>&gt;</p>\n<blockquote>\n<pre><code>**以上为文件下载**\n</code></pre></blockquote>\n</li>\n<li><p>Python操作mysql数据库</p>\n<blockquote>\n<p>python支持多种数据库，有对应的模块。DB-API使用流程</p>\n<ol>\n<li><p>引入api模块。</p>\n</li>\n<li><p>获取数据库链接。</p>\n</li>\n<li><p>执行sql语句和存储。</p>\n</li>\n<li><p>关闭连接。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt;    <span class=\"comment\"># -*- coding: UTF-8 -*-</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"keyword\">import</span> MySQLdb</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\"># 打开数据库连接</span></div><div class=\"line\">&gt;    db = MySQLdb.connect(<span class=\"string\">\"localhost\"</span>,<span class=\"string\">\"testuser\"</span>,<span class=\"string\">\"test123\"</span>,<span class=\"string\">\"TESTDB\"</span> )</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\"># 使用cursor()方法获取操作游标 </span></div><div class=\"line\">&gt;    cursor = db.cursor()</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\"># 使用execute方法执行SQL语句</span></div><div class=\"line\">&gt;    cursor.execute(<span class=\"string\">\"SELECT VERSION()\"</span>)</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\"># 使用 fetchone() 方法获取一条数据库。</span></div><div class=\"line\">&gt;    data = cursor.fetchone()</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"keyword\">print</span> <span class=\"string\">\"Database version : %s \"</span> % data</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\"># 关闭数据库连接</span></div><div class=\"line\">&gt;    db.close()</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>python数据库mysql，需要mysqldb</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   fetchone();<span class=\"comment\">#获取下一个查询结果集</span></div><div class=\"line\">&gt;   fetchall();<span class=\"comment\">#接收全部返回结果行</span></div><div class=\"line\">&gt;   rowcount;<span class=\"comment\">#只读属性，返回执行execute()后影响的行数</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>事务</p>\n<p>事务的四个属性：</p>\n<ul>\n<li>原子性（atomicity）。一个事务是一个不可分割的工作单位，事务中包括的诸操作要么都做，要么都不做。</li>\n<li>一致性（consistency）。事务必须是使数据库从一个一致性状态变到另一个一致性状态。一致性与原子性是密切相关的。</li>\n<li>隔离性（isolation）。一个事务的执行不能被其他事务干扰。即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。</li>\n<li>持久性（durability）。持续性也称永久性（permanence），指一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。接下来的其他操作或故障不应该对其有任何影响。</li>\n</ul>\n<p><strong><em>Python DB API 2.0 的事务提供了两个方法 commit 或 rollback。</em></strong></p>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p>Python网络编程</p>\n<blockquote>\n<p>python提供两个级别的网络服务：</p>\n<p>1、低级别支持基本Socket</p>\n<p>2、高级别SocketServer</p>\n<p>==Socket==套接字用于程序在主机间或者进程间通讯。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"comment\">#pyton中socket函数</span></div><div class=\"line\">&gt; socket.socket([family[,type[,proto]]])</div><div class=\"line\">&gt; <span class=\"comment\"># family 套接字家族，可用AF_UNIX或AF_INET</span></div><div class=\"line\">&gt; <span class=\"comment\">#type 类型，面向连接与否，SOCK_STREAM和SOCK_DGRAM</span></div><div class=\"line\">&gt; <span class=\"comment\">#proto 默认为0</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><strong>Python中socket函数可以参照api文档，此处不在赘述。</strong></p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"comment\">#服务端</span></div><div class=\"line\">&gt; <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt; <span class=\"comment\"># -*- coding: UTF-8 -*-</span></div><div class=\"line\">&gt; <span class=\"comment\"># 文件名：server.py</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt; <span class=\"keyword\">import</span> socket               <span class=\"comment\"># 导入 socket 模块</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt; s = socket.socket()         <span class=\"comment\"># 创建 socket 对象</span></div><div class=\"line\">&gt; host = socket.gethostname() <span class=\"comment\"># 获取本地主机名</span></div><div class=\"line\">&gt; port = <span class=\"number\">12345</span>                <span class=\"comment\"># 设置端口</span></div><div class=\"line\">&gt; s.bind((host, port))        <span class=\"comment\"># 绑定端口</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt; s.listen(<span class=\"number\">5</span>)                 <span class=\"comment\"># 等待客户端连接</span></div><div class=\"line\">&gt; <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">&gt;     c, addr = s.accept()     <span class=\"comment\"># 建立客户端连接。</span></div><div class=\"line\">&gt;     <span class=\"keyword\">print</span> <span class=\"string\">'连接地址：'</span>, addr</div><div class=\"line\">&gt;     c.send(<span class=\"string\">'欢迎访问菜鸟教程！'</span>)</div><div class=\"line\">&gt;     c.close()                <span class=\"comment\"># 关闭连接</span></div><div class=\"line\">&gt;     </div><div class=\"line\">&gt;     </div><div class=\"line\">&gt; <span class=\"comment\">#客户端</span></div><div class=\"line\">&gt; <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt; <span class=\"comment\"># -*- coding: UTF-8 -*-</span></div><div class=\"line\">&gt; <span class=\"comment\"># 文件名：client.py</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt; <span class=\"keyword\">import</span> socket               <span class=\"comment\"># 导入 socket 模块</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt; s = socket.socket()         <span class=\"comment\"># 创建 socket 对象</span></div><div class=\"line\">&gt; host = socket.gethostname() <span class=\"comment\"># 获取本地主机名</span></div><div class=\"line\">&gt; port = <span class=\"number\">12345</span>                <span class=\"comment\"># 设置端口好</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt; s.connect((host, port))</div><div class=\"line\">&gt; <span class=\"keyword\">print</span> s.recv(<span class=\"number\">1024</span>)</div><div class=\"line\">&gt; s.close()  </div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><strong>Python Internet模块</strong></p>\n<p>| 协议     | 功能用处      | 端口号  | Python模块                 |<br>| —— | ——— | —- | ———————— |<br>| HTTP   | 网页访问      | 80   | httplib、urllib、xmlrpclib |<br>| NNTP   | 阅读、张贴新闻文章 | 119  | nntplib                  |<br>| FTP    | 文件传输      | 20   | ftplib、urllib            |<br>| SMTP   | 发送邮件      | 25   | smtplib                  |<br>| POP3   | 接收邮件      | 110  | poplib                   |<br>| IMAP4  | 获取邮件      | 143  | imaplib                  |<br>| Telnet | 命令行       | 23   | telnetlib                |<br>| Gopher | 信息查找      | 70   | gopherlib、urllib         |</p>\n<ul>\n<li><p>smtp邮件发送</p>\n<p>语法格式：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"keyword\">import</span> smtplib</div><div class=\"line\">&gt;   <span class=\"comment\">#创建对象</span></div><div class=\"line\">&gt;   smtpObj = smtplib.SMTP([host[,port[,local_hostname]]])</div><div class=\"line\">&gt;   <span class=\"comment\">#发送邮件</span></div><div class=\"line\">&gt;   SMTP.sendmail(from_addr,to_addr,msg[,mail_options,rcpt_options])</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>  示例：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt;   <span class=\"comment\"># -*- coding: UTF-8 -*-</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"keyword\">import</span> smtplib</div><div class=\"line\">&gt;   <span class=\"keyword\">from</span> email.mime.text <span class=\"keyword\">import</span> MIMEText</div><div class=\"line\">&gt;   <span class=\"keyword\">from</span> email.header <span class=\"keyword\">import</span> Header</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   sender = <span class=\"string\">'server@server.com'</span></div><div class=\"line\">&gt;   receivers = [<span class=\"string\">'receiver@receiver.com'</span>]  <span class=\"comment\"># 接收邮件，可设置为你的QQ邮箱或者其他邮箱</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\"># 三个参数：第一个为文本内容，第二个 plain 设置文本格式，可以是html，text等。第三个 utf-8 设置编码</span></div><div class=\"line\">&gt;   message = MIMEText(<span class=\"string\">'Python 邮件发送测试...'</span>, <span class=\"string\">'plain'</span>, <span class=\"string\">'utf-8'</span>)</div><div class=\"line\">&gt;   message[<span class=\"string\">'From'</span>] = Header(<span class=\"string\">\"菜鸟教程\"</span>, <span class=\"string\">'utf-8'</span>)</div><div class=\"line\">&gt;   message[<span class=\"string\">'To'</span>] =  Header(<span class=\"string\">\"测试\"</span>, <span class=\"string\">'utf-8'</span>)</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   subject = <span class=\"string\">'Python SMTP 邮件测试'</span></div><div class=\"line\">&gt;   message[<span class=\"string\">'Subject'</span>] = Header(subject, <span class=\"string\">'utf-8'</span>)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;<br>&gt;</p>\n<blockquote>\n<p>  try:</p>\n<pre><code>smtpObj = smtplib.SMTP(&apos;localhost&apos;)\nsmtpObj.sendmail(sender, receivers, message.as_string())\nprint &quot;邮件发送成功&quot;\n</code></pre><p>  except smtplib.SMTPException:</p>\n<pre><code>print &quot;Error: 无法发送邮件&quot;\n</code></pre>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;</div><div class=\"line\">&gt;   **使用第三方SMTP服务**</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   ```python</div><div class=\"line\">&gt;   # 第三方 SMTP 服务</div><div class=\"line\">&gt;   mail_host=&quot;smtp.XXX.com&quot;  #设置服务器</div><div class=\"line\">&gt;   mail_user=&quot;XXXX&quot;    #用户名</div><div class=\"line\">&gt;   mail_pass=&quot;XXXXXX&quot;   #密码</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   sender = &apos;from@runoob.com&apos;</div><div class=\"line\">&gt;   receivers = [&apos;429240967@qq.com&apos;]  # 接收邮件，可设置为你的QQ邮箱或者其他邮箱</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   message = MIMEText(&apos;Python 邮件发送测试...&apos;, &apos;plain&apos;, &apos;utf-8&apos;)</div><div class=\"line\">&gt;   message[&apos;From&apos;] = Header(&quot;菜鸟教程&quot;, &apos;utf-8&apos;)</div><div class=\"line\">&gt;   message[&apos;To&apos;] =  Header(&quot;测试&quot;, &apos;utf-8&apos;)</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   subject = &apos;Python SMTP 邮件测试&apos;</div><div class=\"line\">&gt;   message[&apos;Subject&apos;] = Header(subject, &apos;utf-8&apos;)</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   try:</div><div class=\"line\">&gt;       smtpObj = smtplib.SMTP() </div><div class=\"line\">&gt;       smtpObj.connect(mail_host, 25)    # 25 为 SMTP 端口号</div><div class=\"line\">&gt;       smtpObj.login(mail_user,mail_pass)  </div><div class=\"line\">&gt;       smtpObj.sendmail(sender, receivers, message.as_string())</div><div class=\"line\">&gt;       print &quot;邮件发送成功&quot;</div><div class=\"line\">&gt;   except smtplib.SMTPException:</div><div class=\"line\">&gt;       print &quot;Error: 无法发送邮件&quot;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>  创建带附件的邮件发送</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt;   <span class=\"comment\"># -*- coding: UTF-8 -*-</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"keyword\">import</span> smtplib</div><div class=\"line\">&gt;   <span class=\"keyword\">from</span> email.mime.text <span class=\"keyword\">import</span> MIMEText</div><div class=\"line\">&gt;   <span class=\"keyword\">from</span> email.mime.multipart <span class=\"keyword\">import</span> MIMEMultipart</div><div class=\"line\">&gt;   <span class=\"keyword\">from</span> email.header <span class=\"keyword\">import</span> Header</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   sender = <span class=\"string\">'from@runoob.com'</span></div><div class=\"line\">&gt;   receivers = [<span class=\"string\">'429240967@qq.com'</span>]  <span class=\"comment\"># 接收邮件，可设置为你的QQ邮箱或者其他邮箱</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\">#创建一个带附件的实例</span></div><div class=\"line\">&gt;   message = MIMEMultipart()</div><div class=\"line\">&gt;   message[<span class=\"string\">'From'</span>] = Header(<span class=\"string\">\"菜鸟教程\"</span>, <span class=\"string\">'utf-8'</span>)</div><div class=\"line\">&gt;   message[<span class=\"string\">'To'</span>] =  Header(<span class=\"string\">\"测试\"</span>, <span class=\"string\">'utf-8'</span>)</div><div class=\"line\">&gt;   subject = <span class=\"string\">'Python SMTP 邮件测试'</span></div><div class=\"line\">&gt;   message[<span class=\"string\">'Subject'</span>] = Header(subject, <span class=\"string\">'utf-8'</span>)</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\">#邮件正文内容</span></div><div class=\"line\">&gt;   message.attach(MIMEText(<span class=\"string\">'这是菜鸟教程Python 邮件发送测试……'</span>, <span class=\"string\">'plain'</span>, <span class=\"string\">'utf-8'</span>))</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\"># 构造附件1，传送当前目录下的 test.txt 文件</span></div><div class=\"line\">&gt;   att1 = MIMEText(open(<span class=\"string\">'test.txt'</span>, <span class=\"string\">'rb'</span>).read(), <span class=\"string\">'base64'</span>, <span class=\"string\">'utf-8'</span>)</div><div class=\"line\">&gt;   att1[<span class=\"string\">\"Content-Type\"</span>] = <span class=\"string\">'application/octet-stream'</span></div><div class=\"line\">&gt;   <span class=\"comment\"># 这里的filename可以任意写，写什么名字，邮件中显示什么名字</span></div><div class=\"line\">&gt;   att1[<span class=\"string\">\"Content-Disposition\"</span>] = <span class=\"string\">'attachment; filename=\"test.txt\"'</span></div><div class=\"line\">&gt;   message.attach(att1)</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\"># 构造附件2，传送当前目录下的 runoob.txt 文件</span></div><div class=\"line\">&gt;   att2 = MIMEText(open(<span class=\"string\">'runoob.txt'</span>, <span class=\"string\">'rb'</span>).read(), <span class=\"string\">'base64'</span>, <span class=\"string\">'utf-8'</span>)</div><div class=\"line\">&gt;   att2[<span class=\"string\">\"Content-Type\"</span>] = <span class=\"string\">'application/octet-stream'</span></div><div class=\"line\">&gt;   att2[<span class=\"string\">\"Content-Disposition\"</span>] = <span class=\"string\">'attachment; filename=\"runoob.txt\"'</span></div><div class=\"line\">&gt;   message.attach(att2)</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"keyword\">try</span>:</div><div class=\"line\">&gt;       smtpObj = smtplib.SMTP(<span class=\"string\">'localhost'</span>)</div><div class=\"line\">&gt;       smtpObj.sendmail(sender, receivers, message.as_string())</div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> <span class=\"string\">\"邮件发送成功\"</span></div><div class=\"line\">&gt;   <span class=\"keyword\">except</span> smtplib.SMTPException:</div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> <span class=\"string\">\"Error: 无法发送邮件\"</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p><strong>Python多线程</strong></p>\n<p>关于多线程需要注意两点：</p>\n<ul>\n<li>线程可以被中断(抢占)</li>\n<li>其他线程运行时，线程可以休眠(退让)</li>\n</ul>\n<p><strong>python使用线程两种方式</strong></p>\n<p>1、函数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   thread.start_new_thread(function,args[,kwargs])</div><div class=\"line\">&gt;   <span class=\"comment\"># 注释：function-线程函数，args-参数，必须是tuple类型。kwargs-可选参数。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt;   <span class=\"comment\"># -*- coding: UTF-8 -*-</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"keyword\">import</span> thread</div><div class=\"line\">&gt;   <span class=\"keyword\">import</span> time</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\"># 为线程定义一个函数</span></div><div class=\"line\">&gt;   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print_time</span><span class=\"params\">( threadName, delay)</span>:</span></div><div class=\"line\">&gt;      count = <span class=\"number\">0</span></div><div class=\"line\">&gt;      <span class=\"keyword\">while</span> count &lt; <span class=\"number\">5</span>:</div><div class=\"line\">&gt;         time.sleep(delay)</div><div class=\"line\">&gt;         count += <span class=\"number\">1</span></div><div class=\"line\">&gt;         <span class=\"keyword\">print</span> <span class=\"string\">\"%s: %s\"</span> % ( threadName, time.ctime(time.time()) )</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\"># 创建两个线程</span></div><div class=\"line\">&gt;   <span class=\"keyword\">try</span>:</div><div class=\"line\">&gt;      thread.start_new_thread( print_time, (<span class=\"string\">\"Thread-1\"</span>, <span class=\"number\">2</span>, ) )</div><div class=\"line\">&gt;      thread.start_new_thread( print_time, (<span class=\"string\">\"Thread-2\"</span>, <span class=\"number\">4</span>, ) )</div><div class=\"line\">&gt;   <span class=\"keyword\">except</span>:</div><div class=\"line\">&gt;      <span class=\"keyword\">print</span> <span class=\"string\">\"Error: unable to start thread\"</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"keyword\">while</span> <span class=\"number\">1</span>:</div><div class=\"line\">&gt;      <span class=\"keyword\">pass</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>  <em>线程结束依靠线程函数，或者手动<code>thread.exit()</code>,<code>抛异常</code>。</em></p>\n<ul>\n<li><p><strong><em>线程模块</em></strong></p>\n<p>1、<code>thread</code>和<code>threading</code>两个标准库</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   threading.currentThread();</div><div class=\"line\">&gt;   threading.enumerate();</div><div class=\"line\">&gt;   threading.activeCount();</div><div class=\"line\">&gt;   run();start();join([time]);isAlive();getName();setName();</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>  2、使用Threading模块创建线程</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"comment\">#继承threading.Thread然后重写__init__方法和run方法</span></div><div class=\"line\">&gt;   <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt;   <span class=\"comment\"># -*- coding: UTF-8 -*-</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"keyword\">import</span> threading</div><div class=\"line\">&gt;   <span class=\"keyword\">import</span> time</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   exitFlag = <span class=\"number\">0</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">myThread</span> <span class=\"params\">(threading.Thread)</span>:</span>   <span class=\"comment\">#继承父类threading.Thread</span></div><div class=\"line\">&gt;       <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, threadID, name, counter)</span>:</span></div><div class=\"line\">&gt;           threading.Thread.__init__(self)</div><div class=\"line\">&gt;           self.threadID = threadID</div><div class=\"line\">&gt;           self.name = name</div><div class=\"line\">&gt;           self.counter = counter</div><div class=\"line\">&gt;       <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span>                   <span class=\"comment\">#把要执行的代码写到run函数里面 线程在创建后会直接运行run函数 </span></div><div class=\"line\">&gt;           <span class=\"keyword\">print</span> <span class=\"string\">\"Starting \"</span> + self.name</div><div class=\"line\">&gt;           print_time(self.name, self.counter, <span class=\"number\">5</span>)</div><div class=\"line\">&gt;           <span class=\"keyword\">print</span> <span class=\"string\">\"Exiting \"</span> + self.name</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print_time</span><span class=\"params\">(threadName, delay, counter)</span>:</span></div><div class=\"line\">&gt;       <span class=\"keyword\">while</span> counter:</div><div class=\"line\">&gt;           <span class=\"keyword\">if</span> exitFlag:</div><div class=\"line\">&gt;               thread.exit()</div><div class=\"line\">&gt;           time.sleep(delay)</div><div class=\"line\">&gt;           <span class=\"keyword\">print</span> <span class=\"string\">\"%s: %s\"</span> % (threadName, time.ctime(time.time()))</div><div class=\"line\">&gt;           counter -= <span class=\"number\">1</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\"># 创建新线程</span></div><div class=\"line\">&gt;   thread1 = myThread(<span class=\"number\">1</span>, <span class=\"string\">\"Thread-1\"</span>, <span class=\"number\">1</span>)</div><div class=\"line\">&gt;   thread2 = myThread(<span class=\"number\">2</span>, <span class=\"string\">\"Thread-2\"</span>, <span class=\"number\">2</span>)</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\"># 开启线程</span></div><div class=\"line\">&gt;   thread1.start()</div><div class=\"line\">&gt;   thread2.start()</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> <span class=\"string\">\"Exiting Main Thread\"</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>线程同步</p>\n<p>Python中线程同步使用<code>Lock</code>和<code>Rlock</code>两个对象，都含有<code>acquire</code>和<code>release</code>方法。</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt;   <span class=\"comment\"># -*- coding: UTF-8 -*-</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"keyword\">import</span> threading</div><div class=\"line\">&gt;   <span class=\"keyword\">import</span> time</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">myThread</span> <span class=\"params\">(threading.Thread)</span>:</span></div><div class=\"line\">&gt;       <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, threadID, name, counter)</span>:</span></div><div class=\"line\">&gt;           threading.Thread.__init__(self)</div><div class=\"line\">&gt;           self.threadID = threadID</div><div class=\"line\">&gt;           self.name = name</div><div class=\"line\">&gt;           self.counter = counter</div><div class=\"line\">&gt;       <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">&gt;           <span class=\"keyword\">print</span> <span class=\"string\">\"Starting \"</span> + self.name</div><div class=\"line\">&gt;          <span class=\"comment\"># 获得锁，成功获得锁定后返回True</span></div><div class=\"line\">&gt;          <span class=\"comment\"># 可选的timeout参数不填时将一直阻塞直到获得锁定</span></div><div class=\"line\">&gt;          <span class=\"comment\"># 否则超时后将返回False</span></div><div class=\"line\">&gt;           threadLock.acquire()</div><div class=\"line\">&gt;           print_time(self.name, self.counter, <span class=\"number\">3</span>)</div><div class=\"line\">&gt;           <span class=\"comment\"># 释放锁</span></div><div class=\"line\">&gt;           threadLock.release()</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print_time</span><span class=\"params\">(threadName, delay, counter)</span>:</span></div><div class=\"line\">&gt;       <span class=\"keyword\">while</span> counter:</div><div class=\"line\">&gt;           time.sleep(delay)</div><div class=\"line\">&gt;           <span class=\"keyword\">print</span> <span class=\"string\">\"%s: %s\"</span> % (threadName, time.ctime(time.time()))</div><div class=\"line\">&gt;           counter -= <span class=\"number\">1</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   threadLock = threading.Lock()</div><div class=\"line\">&gt;   threads = []</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\"># 创建新线程</span></div><div class=\"line\">&gt;   thread1 = myThread(<span class=\"number\">1</span>, <span class=\"string\">\"Thread-1\"</span>, <span class=\"number\">1</span>)</div><div class=\"line\">&gt;   thread2 = myThread(<span class=\"number\">2</span>, <span class=\"string\">\"Thread-2\"</span>, <span class=\"number\">2</span>)</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\"># 开启新线程</span></div><div class=\"line\">&gt;   thread1.start()</div><div class=\"line\">&gt;   thread2.start()</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\"># 添加线程到线程列表</span></div><div class=\"line\">&gt;   threads.append(thread1)</div><div class=\"line\">&gt;   threads.append(thread2)</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\"># 等待所有线程完成</span></div><div class=\"line\">&gt;   <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> threads:</div><div class=\"line\">&gt;       t.join()</div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> <span class=\"string\">\"Exiting Main Thread\"</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p><strong>线程优先级队列</strong></p>\n<p>Python的Queue模块提供了FIFO和LIFO队列，Queue、LifoQueue和优先级PriorityQueue。</p>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p>Python其他特性</p>\n<blockquote>\n<ul>\n<li>xml解析</li>\n</ul>\n<p>xml解析通用的有<code>SAX</code>、<code>DOM</code>、python有<code>ElementTree</code></p>\n<p><em>一般编程中都很少用SAX和DOM解析，都有自己平台的优化解析方式。</em></p>\n<p><strong>注：</strong>因DOM需要将XML数据映射到内存中的树，一是比较慢，二是比较耗内存，而SAX流式读取XML文件，比较快，占用内存少，但需要用户实现回调函数（handler）。</p>\n<ul>\n<li><p>GUI编程</p>\n<p>python提供多种图形界面库<code>Thinter</code>、<code>wxPython</code>、<code>Jython</code></p>\n<p><strong>Tkinter</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"keyword\">import</span> Tkinter</div><div class=\"line\">&gt;   top = Tkinter.Tk()</div><div class=\"line\">&gt;   <span class=\"comment\">#进入消息循环</span></div><div class=\"line\">&gt;   top.mainloog()</div><div class=\"line\">&gt;   <span class=\"comment\">#如上代码执行，可产生小窗口界面了。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>  Tkinter包含常用的窗口控件，以及属性和方法，使用时候可差用api。</p>\n<ul>\n<li><p>JSON</p>\n<p>python使用Demjson，<code>decode</code>和<code>encode</code>解码编码。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   demjson.encode(self,obj,nest_level=<span class=\"number\">0</span>)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>  示例：(构建json)</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt;   <span class=\"keyword\">import</span> demjson</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   data = [&#123;<span class=\"string\">'a'</span>:<span class=\"number\">1</span>,<span class=\"string\">'b'</span>:<span class=\"number\">2</span>,<span class=\"string\">'c'</span>:<span class=\"number\">3</span>,<span class=\"string\">'d'</span>:<span class=\"number\">4</span>,<span class=\"string\">'e'</span>:<span class=\"number\">5</span>&#125;]</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   json = demjson.encode(data)</div><div class=\"line\">&gt;   print(json)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>  解析Json</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   demjson.decode(self,txt)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt;   <span class=\"keyword\">import</span> demjson</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   json = <span class=\"string\">'&#123;\"a\":1,\"b\":2,\"c\":3,\"d\":4,\"e\":5&#125;'</span>;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   text = demjson.decode(json)</div><div class=\"line\">&gt;   print(text)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n<p><strong>初次接触Python，笔记难免简单初级，仅供自己学习只用，希望也对网友有所益处。</strong></p>\n","excerpt":"","more":"<h1 id=\"Python学习笔记\"><a href=\"#Python学习笔记\" class=\"headerlink\" title=\"Python学习笔记\"></a>Python学习笔记</h1><!-- TOC -->\n<ul>\n<li><a href=\"#python学习笔记\">Python学习笔记</a><ul>\n<li><a href=\"#一基本语法\">一、基本语法</a></li>\n<li><a href=\"#二-数据与逻辑\">二、 数据与逻辑</a></li>\n<li><a href=\"#三结构与api\">三、结构与api</a></li>\n<li><a href=\"#四python高级教程\">四、Python高级教程</a></li>\n</ul>\n</li>\n</ul>\n<!-- /TOC -->\n<h2 id=\"一、基本语法\"><a href=\"#一、基本语法\" class=\"headerlink\" title=\"一、基本语法\"></a>一、基本语法</h2><p><code>python2.x与python3.x区别很大，新版特性很强，更优化，此笔记学习新版本特性，暂不关注旧版本。</code></p>\n<ul>\n<li><p>标识符</p>\n<blockquote>\n<ol>\n<li>标识符：数字、字母、下划线，且数字不开头。</li>\n<li>区分大小写；</li>\n<li>单下划线开头<code>_foo</code>表示不能直接访问，需要用接口访问，不可”from xxx import”导入。<code>__foo</code>双下划线表示私有。前后双下划线<code>___foo__</code>特殊函数。</li>\n</ol>\n</blockquote>\n</li>\n<li><p>保留字符</p>\n<blockquote>\n<p>and、exec、not、assert、finally、or、break、for、pass、class、from、print、continue、global、raise、def、if、return、del、import、try、elif、in、while、else、is、with、except、lambda、yield。</p>\n<p>Python3中<code>end</code>可以将结果输入到同一行，或者输出尾部追加不同的字符</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"comment\">#Fibonacci Series: 斐波那契数列</span></div><div class=\"line\">&gt; a,b = <span class=\"number\">0</span>,<span class=\"number\">1</span></div><div class=\"line\">&gt; <span class=\"keyword\">while</span> b&lt;<span class=\"number\">1000</span>:</div><div class=\"line\">&gt;     print(b,end=<span class=\"string\">','</span>)</div><div class=\"line\">&gt;     a,b = b,a+b</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>​</p>\n</blockquote>\n</li>\n<li><p>行与缩进</p>\n<blockquote>\n<p><strong>Python区别于其他语言最大处，python不用{}来控制类、函数和逻辑块。而是用缩进，空格数无妨，但是逻辑块前后必须相同个数空格，使用空格或者tab都行，但是最好别混用</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">if</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">&gt;     <span class=\"keyword\">print</span> <span class=\"string\">\"True\"</span></div><div class=\"line\">&gt; <span class=\"keyword\">else</span>:</div><div class=\"line\">&gt;     <span class=\"keyword\">print</span> <span class=\"string\">\"False\"</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>python一般新的一行意味着上个语句块结束。但是多行语句可以用<code>\\</code>符号：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; string = abc + \\</div><div class=\"line\">&gt; \t\tbcd + \\</div><div class=\"line\">&gt;     \tefg</div><div class=\"line\">&gt; <span class=\"comment\"># 要是有&#123;&#125;、[]、()的语句，断为多行也无妨。</span></div><div class=\"line\">&gt; girls = [<span class=\"string\">'allen'</span>,<span class=\"string\">'angle'</span></div><div class=\"line\">&gt;         <span class=\"string\">'candy'</span>,<span class=\"string\">'lily'</span></div><div class=\"line\">&gt;         <span class=\"string\">'merry'</span>]</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>引号与注释</p>\n<blockquote>\n<p>python的字符串可以用单引号<code>&#39;</code>、双引号<code>&quot;</code>、三引号<code>&#39;&#39;&#39;</code>包括，其中三引号可以多行分段，有时候可以用作注释。</p>\n<p><code>#</code>符号表示注释，可写在当行，或者代码尾部。多行注释使用三个单引号<code>&#39;&#39;&#39;</code>，或三个双引号<code>&quot;&quot;&quot;</code>包括。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"comment\">#单行注释</span></div><div class=\"line\">&gt; <span class=\"keyword\">if</span> <span class=\"keyword\">True</span></div><div class=\"line\">&gt; \t<span class=\"keyword\">print</span> <span class=\"string\">'hello'</span> <span class=\"comment\">#单个注释，新版中需要加()，视为函数</span></div><div class=\"line\">&gt; <span class=\"string\">'''</span></div><div class=\"line\">&gt; 多行注释</div><div class=\"line\">&gt; 是这么写的</div><div class=\"line\">&gt; 真的可以么</div><div class=\"line\">&gt; 在markdown语法中</div><div class=\"line\">&gt; '''</div><div class=\"line\">&gt; <span class=\"string\">\"\"\"</span></div><div class=\"line\">&gt; 似乎可以</div><div class=\"line\">&gt; 好像是的哦</div><div class=\"line\">&gt; \"\"\"    </div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><em>函数之间，类与函数间用<code>空行</code>分开，便于阅读和维护</em></p>\n</blockquote>\n</li>\n<li><p>零碎语法</p>\n<blockquote>\n<ul>\n<li><p>多条语句同一行，可以<code>;</code>分割。</p>\n</li>\n<li><p>同一代码组，首行关键字后<code>:</code>结尾，同一代码组前后空白数相同。</p>\n</li>\n<li><p>旧版中文编码需要头文件注释</p>\n</li>\n<li><p>Python中True和False，似乎不能小写哦！</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;  <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt;  <span class=\"comment\">#_*_coding:utf-8 _*_</span></div><div class=\"line\">&gt;  <span class=\"comment\">#或者</span></div><div class=\"line\">&gt;  <span class=\"comment\">#coding=utf-8</span></div><div class=\"line\">&gt;  <span class=\"comment\">#新版python已经默认支持了。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n</li>\n</ul>\n<h2 id=\"二、-数据与逻辑\"><a href=\"#二、-数据与逻辑\" class=\"headerlink\" title=\"二、 数据与逻辑\"></a>二、 数据与逻辑</h2><ul>\n<li><p>变量类型</p>\n<blockquote>\n<p><strong>python变量赋值不需要类型声明</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; counter = <span class=\"number\">100</span> <span class=\"comment\">#整型</span></div><div class=\"line\">&gt; miles = <span class=\"number\">1000.0</span> <span class=\"comment\"># 浮点型</span></div><div class=\"line\">&gt; name = <span class=\"string\">\"John\"</span> <span class=\"comment\">#字符串</span></div><div class=\"line\">&gt; a = b = c = <span class=\"number\">1</span> <span class=\"comment\">#多个变量同时赋值</span></div><div class=\"line\">&gt; a, b, c = <span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"string\">\"John\"</span> <span class=\"comment\">#多变量多类型赋值,个数必须对应。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>python五种标准数据类型：</p>\n<ul>\n<li><p>Numbers数字</p>\n<p>该类型变量赋值后不可改变，重新赋值实质上是分配新的对象。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   a = <span class=\"number\">1</span>,b=<span class=\"number\">2</span>,c=<span class=\"number\">9</span></div><div class=\"line\">&gt;   <span class=\"comment\">#del是删除语句</span></div><div class=\"line\">&gt;   <span class=\"keyword\">del</span> a</div><div class=\"line\">&gt;   <span class=\"keyword\">del</span> a,b</div><div class=\"line\">&gt;   <span class=\"comment\"># Number有四种不同类型，int、long、float、complex（复数）</span></div><div class=\"line\">&gt;   <span class=\"comment\">#注意：python新版中，没有long，多了一个bytes。</span></div><div class=\"line\">&gt;   <span class=\"number\">8899887897l</span><span class=\"comment\">#后面的l容易与1混淆，一般写作L</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>String字符串</p>\n<p>由字母、数字、下划线组成，两种顺序，0开始至后，-1开始向前。</p>\n<p>string的截取</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   s = <span class=\"string\">'I`m a good boy'</span></div><div class=\"line\">&gt;   s[<span class=\"number\">3</span>:<span class=\"number\">9</span>]<span class=\"comment\">#其结果是截取对应标号的字符串为新的字符，可以0--size，也可以-1--向前。记住区间[)右边取不到哦</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> s <span class=\"comment\">#输出s字符串</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> s[<span class=\"number\">1</span>]<span class=\"comment\">#输入下标为1的字母</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> s[<span class=\"number\">1</span>:<span class=\"number\">5</span>]<span class=\"comment\">#输出下标1-5，但不含5那个字符</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> s + <span class=\"string\">\"add\"</span> <span class=\"comment\"># 字符串连接</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> s * <span class=\"number\">2</span> <span class=\"comment\"># 重复输出两次</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>List列表</p>\n<p>python列表可以混合不同类型数据，嵌套列表，可以使用类似string的方法取子列表。<code>[]</code>表示</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   list = [<span class=\"string\">'python'</span>,<span class=\"number\">666</span>,<span class=\"number\">2.14</span>,<span class=\"string\">'study'</span>]</div><div class=\"line\">&gt;   tinylist = [<span class=\"number\">123</span>,<span class=\"string\">'John'</span>]</div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> list <span class=\"comment\">#完整输出</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> list[<span class=\"number\">0</span>]<span class=\"comment\">#输出指定下标元素</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> list[<span class=\"number\">1</span>:<span class=\"number\">3</span>]<span class=\"comment\">#输出1-3的元素</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> list[<span class=\"number\">2</span>:]<span class=\"comment\">#输出2之后所有元素</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> tinylist * <span class=\"number\">2</span> <span class=\"comment\"># 重复两次输出</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> list + tinylist<span class=\"comment\">#组合列表</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>Tuple元组</p>\n<p>元组类似list，<code>()</code>标识，<code>,</code>分割，不能二次赋值。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   list = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"string\">'abc'</span>]</div><div class=\"line\">&gt;   tuple = (<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"string\">'abc'</span>)</div><div class=\"line\">&gt;   list[<span class=\"number\">0</span>] = <span class=\"string\">'ABC'</span><span class=\"comment\">#可以更新</span></div><div class=\"line\">&gt;   tuple[<span class=\"number\">0</span>]= <span class=\"number\">4</span> <span class=\"comment\">#错误，元组数据不能更新</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>Dictionary字典</p>\n<p>Dictionary被视为python最为灵活的内置数据结构，列表为有序对象集合，字典则为无序元素结合。区别在于，Dictionary类似与map集合，键值对key-value。<code>{}</code>标识</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   dict = &#123;&#125;</div><div class=\"line\">&gt;   dict[<span class=\"string\">'one'</span>] = <span class=\"string\">\"This is one\"</span></div><div class=\"line\">&gt;   dict[<span class=\"number\">2</span>] = <span class=\"string\">\"This is 2\"</span></div><div class=\"line\">&gt;   tinydict = &#123;<span class=\"string\">'name'</span>:<span class=\"string\">'john'</span>,<span class=\"string\">'code'</span>:<span class=\"number\">1234</span>,<span class=\"string\">'dept'</span>:<span class=\"string\">'good'</span>,<span class=\"number\">22</span>:<span class=\"number\">879.0L</span>&#125;</div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> dict[<span class=\"string\">'one'</span>] <span class=\"comment\">#根据键值输出元素</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> dict <span class=\"comment\"># 输出所有元素</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> dict.keys()<span class=\"comment\">#输出所有key</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> tinydict.vales()<span class=\"comment\">#输出所有值value</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>Set(集合)</p>\n<p>无序不重复的序列，主要用于成员关系测试和重复文件删除。</p>\n<p>可以使用大括号<code>({})</code>或者<code>set()</code>函数创建集合，注意：创建一个空集合必须用 set() 而不是 <code>{ }</code>，因为 <code>{ }</code> 是用来创建一个空字典。</p>\n</li>\n</ul>\n<p><strong>类型转换</strong>，对应数据类型作为函数名即可,返回结果。</p>\n<p>|          函数           |               描述                |<br>| :——————-: | :—————————–: |<br>|    int(x [,base])     |            将x转换为一个整数            |<br>|   long(x [,base] )    |           将x转换为一个长整数            |<br>|       float(x)        |           将x转换到一个浮点数            |<br>| complex(real [,imag]) |             创建一个复数              |<br>|        str(x)         |          将对象 x 转换为字符串           |<br>|        repr(x)        |         将对象 x 转换为表达式字符串         |<br>|       eval(str)       |  用来计算在字符串中的有效Python表达式,并返回一个对象  |<br>|       tuple(s)        |          将序列 s 转换为一个元组          |<br>|        list(s)        |          将序列 s 转换为一个列表          |<br>|        set(s)         |             转换为可变集合             |<br>|        dict(d)        | 创建一个字典。d 必须是一个序列 (key,value)元组。 |<br>|     frozenset(s)      |            转换为不可变集合             |<br>|        chr(x)         |          将一个整数转换为一个字符           |<br>|       unichr(x)       |        将一个整数转换为Unicode字符        |<br>|        ord(x)         |          将一个字符转换为它的整数值          |<br>|        hex(x)         |        将一个整数转换为一个十六进制字符串        |<br>|        oct(x)         |        将一个整数转换为一个八进制字符串         |</p>\n</blockquote>\n</li>\n<li><p>运算符号</p>\n<blockquote>\n<p>Python运算符支持一下类型：</p>\n<ul>\n<li>算术运算符</li>\n<li>比较（关系）运算符</li>\n<li>赋值运算符</li>\n<li>逻辑运算符</li>\n<li>位运算符</li>\n<li>成员运算符</li>\n<li>身份运算符</li>\n</ul>\n<p><strong>运算符有优先级</strong></p>\n<ol>\n<li><p>算术运算符</p>\n<p>| 运算符  | 描述    | 实例     |<br>| —- | —– | —— |<br>| +    | 加号    | 1+2得3  |<br>| -    | 减号    | 3-1得2  |<br>| <em>    | 乘号    | 2</em>2得4  |<br>| /    | 除号    | 9/3得3  |<br>| %    | 取模，求余 | 5%2得1  |<br>| <strong>   | 幂     | 2</strong>3得8 |<br>| //   | 取整除   | 9//2得4 |</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"comment\">#算术运算符，得到运算结果</span></div><div class=\"line\">&gt;   a,b,c = <span class=\"number\">12</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span><span class=\"comment\">#多变量同时赋值</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> (a+b)</div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> (a-b)</div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> (a*b)</div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> (a/b)</div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> (a%c)</div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> (b**c)</div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> (c//b)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p>比较运算符</p>\n<p>| 运算符  | 描述          |<br>| —- | ———– |<br>| ==   | 等于，比较对象是否相等 |<br>| !=   | 不等于         |<br>| &lt;&gt;   | 不等于         |<br>| &gt;    | 大于          |<br>| &lt;    | 小于          |<br>| >=  | 大于等于        |<br>| &lt;=   | 小于等于        |</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"comment\">#关系运算符，返回结果为 True或False</span></div><div class=\"line\">&gt;   a,b,c = <span class=\"number\">12</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span></div><div class=\"line\">&gt;   print(a==b)</div><div class=\"line\">&gt;   print(a!=b)</div><div class=\"line\">&gt;   print(a&lt;&gt;b)<span class=\"comment\">#，新版python中，已经废弃。</span></div><div class=\"line\">&gt;   print(a&gt;b)</div><div class=\"line\">&gt;   print(a&lt;b)</div><div class=\"line\">&gt;   print(a&gt;=b)</div><div class=\"line\">&gt;   print(a&lt;=b)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p>赋值运算符</p>\n<p>| 运算符  | 描述   | 实例                 |<br>| —- | —- | —————— |<br>| =    | 简单赋值 | c=a+b,将a+b的结果赋值给c  |<br>| +=   | 加法赋值 | c+=a等效于c=c+a       |<br>| -=   | 减法赋值 | c-=a等效于c=c-a       |<br>| <em>=   | 乘法赋值 | c</em>=a等效于c=c*a      |<br>| /=   | 除法赋值 | c/=a等效于c=c/a       |<br>| %=   | 取模赋值 | c%=a等效于c=c%a       |<br>| <em>*=  | 幂赋值  | c\\</em>*=a等效于c=c**a |<br>| //=  | 取整赋值 | c//=a等效于c=c//a     |</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"comment\">#简单演示</span></div><div class=\"line\">&gt;   a,b,c=<span class=\"number\">12</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span></div><div class=\"line\">&gt;   <span class=\"comment\">#print(c=a)#不能直接在print内写赋值</span></div><div class=\"line\">&gt;   c=a</div><div class=\"line\">&gt;   print(c)</div><div class=\"line\">&gt;   c=c**b</div><div class=\"line\">&gt;   print(c**=b)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p>位运算符</p>\n<p>位运算既是将数字看作二进制，进行运算。</p>\n<p>| 运算符  | 描述                                       |<br>| —- | —————————————- |<br>| &amp;    | <strong><code>按位与</code></strong>：两数二进制对齐，对应位置都是1，则为1，否则为0。      |<br>| |   | <strong><code>按位或</code></strong>：两数二进制，对应位置有一个为1，则为1。           |<br>| ^    | <strong><code>按位异或</code></strong>：两数二进制，对应位置相异，则为1。             |<br>| ~    | <strong><code>按位取反</code></strong>：对数据的二进制，各个位置取相反，变1为0，变0为1。    |<br>| &lt;&lt;   | <strong><code>左移动</code></strong>：运算数二进制全部左移动若干位，”&lt;&lt;”右边的数决定左移位数。<strong>高位丢弃，低位补0</strong> |<br>| >&gt;  | <strong><code>右移动</code></strong>：运算数二进制全部右移动软敢为，”&gt;&gt;”右边的数决定右移位数。 |</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   a = <span class=\"number\">60</span> <span class=\"comment\"># 60 = 0011 1100</span></div><div class=\"line\">&gt;   b = <span class=\"number\">13</span> <span class=\"comment\"># 13 = 0000 1101</span></div><div class=\"line\">&gt;   c = <span class=\"number\">0</span></div><div class=\"line\">&gt;   c = a &amp; b</div><div class=\"line\">&gt;   print(<span class=\"string\">\"a &amp; b :\"</span>,c)<span class=\"comment\"># 12 = 0000 1100</span></div><div class=\"line\">&gt;   c = a | b</div><div class=\"line\">&gt;   print(<span class=\"string\">\"a | b :\"</span>,c)<span class=\"comment\"># 61 = 0011 1101</span></div><div class=\"line\">&gt;   c = a ^ b</div><div class=\"line\">&gt;   print(<span class=\"string\">\"a ^ b :\"</span>,c)<span class=\"comment\"># 49 = 0011 0001</span></div><div class=\"line\">&gt;   c = ~a</div><div class=\"line\">&gt;   print(<span class=\"string\">\"~a :\"</span>,c)<span class=\"comment\"># -61 = 1100 0011</span></div><div class=\"line\">&gt;   c = a&lt;&lt;<span class=\"number\">2</span></div><div class=\"line\">&gt;   print(<span class=\"string\">\"a&lt;&lt;2 :\"</span>,c) <span class=\"comment\"># 240 = 1111 0000</span></div><div class=\"line\">&gt;   c = a&gt;&gt;<span class=\"number\">2</span></div><div class=\"line\">&gt;   print(<span class=\"string\">\"a&gt;&gt;2 :\"</span>,c) <span class=\"comment\"># 15 = 0000 1111</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p>逻辑运算符</p>\n<p>| 运算符  | 表达式     | 描述                                       |<br>| —- | ——- | —————————————- |<br>| and  | x and y | <strong><code>布尔与</code></strong> ：如果x为False，x and y返回False，否则返回y的计算值。 |<br>| or   | x or y  | <strong><code>布尔或</code></strong>：如果x非零，返回x值，否则返回y的计算值。          |<br>| not  | not x   | <strong><code>布尔非</code></strong>：若x为True，返回False，若x为False，返回True。 |</p>\n<p>示例:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"comment\">#True是1，False是0</span></div><div class=\"line\">&gt;   <span class=\"string\">\"\"\"所以可以在逻辑运算中判断，是否为0 或者1，来决定true和false\"\"\"</span></div><div class=\"line\">&gt;   a, b, c = <span class=\"number\">12</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span></div><div class=\"line\">&gt;   print(a <span class=\"keyword\">and</span> b)<span class=\"comment\">#似乎非0，即认为True</span></div><div class=\"line\">&gt;   print(a <span class=\"keyword\">or</span> b)</div><div class=\"line\">&gt;   print(<span class=\"keyword\">not</span> a)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p>成员运算符</p>\n<p>| 运算符    | 描述                                     |<br>| —— | ————————————– |<br>| in     | x in y，若有True，无False。<strong><code>y为列表、字符串、元组</code></strong> |<br>| not in | x not in y 若y中无x则True，有则False。         |</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   a = <span class=\"number\">10</span>;b = <span class=\"number\">20</span>;list = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">10</span>,<span class=\"number\">15</span>]</div><div class=\"line\">&gt;   print(a <span class=\"keyword\">in</span> list)</div><div class=\"line\">&gt;   print(a <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> list)</div><div class=\"line\">&gt;   print(b <span class=\"keyword\">in</span> list)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p>身份运算符</p>\n<p>| 运算符    | 描述                                       |<br>| —— | —————————————- |<br>| is     | <code>is</code>判断两标识符是否引用同一对象，id同则返回True，否则False。   |<br>| is not | <code>is not</code>判断两标识符是不是引用不同对象，id不同则返回True，否则False。 |</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   a = <span class=\"number\">10</span>;b = <span class=\"number\">20</span>;</div><div class=\"line\">&gt;   print(a <span class=\"keyword\">is</span> b);print(a <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> b);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p>运算符优先级</p>\n<p>| 运算符                      | 优先级描述                |<br>| ———————— | ——————– |<br>| <strong>                       | 指数，最高优先级             |<br>| ~，+，-                    | 按位取反、一元加(+@)、一元减(-@) |<br>| <em>，/，%，//                 | 乘、除、取模、取整            |<br>| +，-                      | 加法、减法                |<br>| >&gt;，&lt;&lt;                   | 右移动、左移动              |<br>| &amp;                        | 位’AND’               |<br>| ^，|                     | 位运算                  |<br>| &lt;=，&lt;，&gt;，&gt;=                | 比较运算符                |<br>| &lt;&gt;，==，!=                 | 等于运算符                |<br>| =，%=，/=，//=，-=，+=，</em>=，</strong>= | 赋值运算符                |<br>| is，is not                | 身份运算符                |<br>| in ，not in               | 成员运算符                |<br>| not，or，and               | 逻辑运算符                |</p>\n<p><strong>注意：若是不确定优先级，可以用()来控制</strong></p>\n</li>\n</ol>\n</blockquote>\n</li>\n<li><p>条件语句</p>\n<blockquote>\n<p>Python中指定非0，和非null，的值为Ture，0和null为False。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"comment\"># python 中多个条件语句，if..elif...elif...else</span></div><div class=\"line\">&gt; <span class=\"keyword\">if</span> condition1:</div><div class=\"line\">&gt;     statement1</div><div class=\"line\">&gt; <span class=\"keyword\">elif</span> condition2:</div><div class=\"line\">&gt;     statement2</div><div class=\"line\">&gt; <span class=\"keyword\">else</span>:</div><div class=\"line\">&gt;     statement</div><div class=\"line\">&gt; <span class=\"keyword\">if</span> (<span class=\"number\">1</span>!=<span class=\"number\">2</span>) : <span class=\"keyword\">print</span> <span class=\"string\">\"OK\"</span>;<span class=\"comment\">#单行语句，可以放在一起。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><strong>python 没有switch语句，只能多个elif语句结合逻辑符号<code>and,or,not</code>来控制多分支语句。</strong></p>\n</blockquote>\n</li>\n<li><p>循环语句</p>\n<blockquote>\n<p>编程语言基本都有for、while和嵌套循环。python没有do…while循环。</p>\n<p>循环控制语句有break、continue和pass。</p>\n<ul>\n<li><p>while循环</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"comment\"># while 循环格式</span></div><div class=\"line\">&gt;   <span class=\"keyword\">while</span> condition:<span class=\"comment\">#条件只有True和False的本质区别，但是请记住，Python中的True的定义比较广，非0，非null即为True。</span></div><div class=\"line\">&gt;       statement</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>  控制语句break、continue</p>\n<ul>\n<li>break，退出循环。</li>\n<li><p>continue，跳出本次循环，进入下一次。不执行continue之后的语句。</p>\n<p><em>无限循环：判断条件为永远为True</em></p>\n</li>\n</ul>\n<ul>\n<li><p>$for…else$</p>\n<p>Python中有for…else和while…else循环。</p>\n<p><code>表示for或while语句正常执行后，else语句执行。</code>注意：循环体正常执行，而不是break出来，才会运行else语句。</p>\n<p>每一轮的循环，for或while内没有break的话，都会执行else语句。</p>\n</li>\n<li><p>for循环</p>\n<p>用于遍历任何序列项目，如列表字符串。格式：</p>\n<ul>\n<li>普通方式</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"keyword\">for</span> iterating_var <span class=\"keyword\">in</span> sequence:</div><div class=\"line\">&gt;       statements</div><div class=\"line\">&gt;       </div><div class=\"line\">&gt;   <span class=\"comment\">#如下示例</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"keyword\">for</span> letter <span class=\"keyword\">in</span> <span class=\"string\">'python text'</span>:</div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> (<span class=\"string\">'当前字母：'</span>,letter)</div><div class=\"line\">&gt;       </div><div class=\"line\">&gt;   fruits = [<span class=\"string\">'banana'</span>,<span class=\"string\">'apple'</span>,<span class=\"string\">'orange'</span>]</div><div class=\"line\">&gt;   <span class=\"keyword\">for</span> fruit <span class=\"keyword\">in</span> fruits:</div><div class=\"line\">&gt;       print(<span class=\"string\">\"水果：\"</span>,fruit)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>使用索引</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;     fruits = [<span class=\"string\">'banana'</span>,<span class=\"string\">'orange'</span>,<span class=\"string\">'apple'</span>]</div><div class=\"line\">&gt;     <span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> range(len(fruits)):</div><div class=\"line\">&gt;         print(<span class=\"string\">\"fruit:\"</span>,fruits[index])</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p>循环嵌套</p>\n<blockquote>\n<p>类似其他编程语言，python也允许循环嵌套。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">for</span> iterating_var <span class=\"keyword\">in</span> sequence:</div><div class=\"line\">&gt;     <span class=\"keyword\">for</span> interating_var <span class=\"keyword\">in</span> sequence:</div><div class=\"line\">&gt;         statements</div><div class=\"line\">&gt;     statements</div><div class=\"line\">&gt; <span class=\"comment\">#python中注意缩进来区分代码块，while嵌套类似，也可以互相嵌套。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>break、continue语句类似其他编程语言，上面已做介绍。</p>\n</li>\n<li><p>pass语句，不做任何事情，一般用做占位语句</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"keyword\">for</span> letter <span class=\"keyword\">in</span> <span class=\"string\">'python'</span>:</div><div class=\"line\">&gt;       <span class=\"keyword\">if</span> letter == <span class=\"string\">'h'</span>:</div><div class=\"line\">&gt;           <span class=\"keyword\">pass</span></div><div class=\"line\">&gt;       \tprint(<span class=\"string\">\"just for blank\"</span>)</div><div class=\"line\">&gt;       print(<span class=\"string\">\"letter:\"</span>,letter)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"三、结构与api\"><a href=\"#三、结构与api\" class=\"headerlink\" title=\"三、结构与api\"></a>三、结构与api</h2><ul>\n<li><p>Number数据类型</p>\n<blockquote>\n<p>Python的Number数据类型，不允许改变，每次赋值都会是一个新的对象。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; a = <span class=\"number\">10</span></div><div class=\"line\">&gt; b = <span class=\"number\">12</span></div><div class=\"line\">&gt; a = <span class=\"number\">20</span> <span class=\"comment\">#内存地址已经变了，不像java那样。</span></div><div class=\"line\">&gt; <span class=\"comment\">#del语句删除</span></div><div class=\"line\">&gt; <span class=\"keyword\">del</span> a</div><div class=\"line\">&gt; <span class=\"keyword\">del</span> a,b</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><strong>Number数据支持四种子类型</strong></p>\n<ul>\n<li>int整型，正数、负数，无小数点。</li>\n<li>long长整型，无限大小的整数，后加<code>L</code>或<code>l</code>。</li>\n<li>float浮点型，整数、小数和科学计数。</li>\n<li>complex复数，实数和虚数构成，a+bj或complex(a,b)，a实数，b虚数。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>Python数学函数</p>\n<blockquote>\n<p>| 函数            | 返回值                                   |<br>| ————- | ————————————- |<br>| abs(x)        | 绝对值：返回x的绝对值                           |<br>| ceil(x)       | 取大整：返回x的上入整数，不是四舍五入。如math.ceil(4.1)得5 |<br>| cmp(x,y)      | 对比：x\\<y，返回-1，x=y返回0，x\\>y 返回1          |<br>| exp(x)        | e次幂：e的x次幂                             |<br>| fabs(x)       | 绝对值：返回x的绝对值，含小数点。                     |<br>| floor(x)      | 取小整：返回x的向下整数。                         |<br>| log(x)        | log函数                                 |<br>| max（x1，x2…) | Max函数。                                |<br>| min(x1,x2…) | Min函数。                                |<br>| modf(x)       | 分离：返回x的整数和小数部分，符号与x相同，整数部分为float型。    |<br>| pow(x,y)      | 幂函数：x**y的值                            |<br>| rount(x[,n])  | 舍入值：x的四舍五入，舍入到小数后n位。                  |<br>| sqrt(x)       | 开方：x的平方根，x可为负数，返回实数。                  |</y，返回-1，x=y返回0，x\\></p>\n<p><strong>Math函数</strong></p>\n<ul>\n<li><p>随机函数random</p>\n<p>| 函数                             | 描述                                     |<br>| —————————— | ————————————– |<br>| choice(seq)                    | random.choice(range(10))，从0–9随机挑一个整数。 |<br>| randrange([start],stop,[step]) | 指定范围制定基数获取随机数。                         |<br>| random()                       | [0,1)内随机数                              |<br>| seed([x])                      | 随机数生成器的种子？？                            |<br>| shuffle(lst)                   | 序列元素的随机排序                              |<br>| uniform(x,y)                   | [x,y]范围内随机生成下一个实数                      |</p>\n<p>==注意函数参数[step]之类的，表示为可选参数==</p>\n</li>\n<li><p>三角函数</p>\n<p>| 函数         | 描述                              |<br>| ———- | ——————————- |<br>| acos(x)    | 反余弦（弧度值）                        |<br>| asin(x)    | 反正弦                             |<br>| atan(x)    | 反正切                             |<br>| atan2(y,x) | 指定x，y坐标的反正切值                    |<br>| cos(x)     | 余弦                              |<br>| hypot(x,y) | 返回欧几里得范数sqrt(x*x+y*y)         |<br>| sin(x)     | 正弦                              |<br>| tan(x)     | 正切                              |<br>| degress(x) | 弧度转角度。如degress(math.pi/2),得90.0 |<br>| radins(x)  | 角度转弧度                           |</p>\n</li>\n<li><p>数学常量</p>\n<p>| 常量   | 描述    |<br>| —- | —– |<br>| pi   | 圆周率   |<br>| e    | 自然常数e |</p>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p>字符串</p>\n<blockquote>\n<p>python中字符串string可用<code>&#39;</code>或<code>&quot;</code>符号，无char类型。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; #字符串可以用[]类似java数组方式截取</div><div class=\"line\">&gt; a = 'abc'</div><div class=\"line\">&gt; b = \"hello python\"</div><div class=\"line\">&gt;</div><div class=\"line\">&gt; print('a[0]',a[0])</div><div class=\"line\">&gt; print(\"b[2:7],b[2:7])#关于字符串的截取可参照上一章数据类型里的描述。</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>python可以对string字符串更新操作：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; a = <span class=\"string\">'hello python'</span></div><div class=\"line\">&gt; print(<span class=\"string\">'updated:'</span>,a[:<span class=\"number\">6</span>]+<span class=\"string\">'beautiful girl'</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>类似其他语言，python中也使用<code>\\</code>转义其他特殊字符。</p>\n<p>| 转义字符     | 描述                    |<br>| ——– | ——————— |<br>| \\ (在行尾时) | 续行符号                  |<br>| \\\\      | 反斜杠                   |<br>| \\’       | 单引号                   |<br>| \\”       | 双引号                   |<br>| \\a       | 响铃                    |<br>| \\b       | 退格                    |<br>| \\e       | 转义                    |<br>| \\000     | 空                     |<br>| \\n       | 换行                    |<br>| \\v       | 纵向制表符                 |<br>| \\t       | 横向制表符                 |<br>| \\r       | 回车                    |<br>| \\f       | 换页                    |<br>| \\oyy     | 八进制，yy表字符，如：\\o12代表换行  |<br>| \\xyy     | 十六进制，yy表字符，如：\\x0a代表换行 |<br>| \\other   | 其他字符将以普通格式输出          |</p>\n</li>\n<li><p>字符串运算</p>\n<p>| 操作符    | 描述                              |<br>| —— | ——————————- |<br>| +      | 串联                              |<br>| *      | 重复                              |<br>| []     | 截取[index],index位置的字符            |<br>| [ : ]  | 截取<code>:</code>前后数字范围内，如，[1:4)取不到右边数字的字符。 |<br>| in     | 成员运算符，含有返回True                  |<br>| not in | 成员运算符，不含有返回True                 |<br>| r/R    | 原始字符串，不转义，原始输出。                 |</p>\n</li>\n<li><p>字符串格式化</p>\n<p>类似C 语言的printf函数，将需要格式化的数字字符，格式化后传入%s之类的占据的位置。==格式化==</p>\n<p>| 符号   | 描述            |<br>| —- | ————- |<br>| %c   | 字符及其ASCII码    |<br>| %s   | 字符串           |<br>| %d   | 整数            |<br>| %u   | 无符号整型         |<br>| %o   | 无符号八进制数       |<br>| %x   | 无符号十六进制数      |<br>| %X   | 无符号十六进制数，大写   |<br>| %f   | 浮点数子，可指定小数点精度 |<br>| %e   | 科学计数法格式化浮点数   |<br>| %E   | 同%e           |<br>| %g   | %f和%e的简写      |<br>| %G   | %f和%e的简写      |<br>| %p   | 十六进制格式化变量的地址  |</p>\n<ul>\n<li><p>格式化操作符辅助指令</p>\n<p>| 符号     | 功能                   |<br>| —— | ——————– |<br>| *      | 定义宽度或小数精度            |<br>| -      | 左对齐                  |<br>| +      | 正数前显示+号              |<br>| <code>&lt;sp&gt;</code> | 正数前显示空格              |<br>| #      | 八进制前显示0，十六进制前显示0x或0X |<br>| 0      | 显示的数字前填充0，而不是空格      |<br>| %      | ‘%%’输出显示一个’%’        |<br>| (var)  | 映射变量（字典参数）           |<br>| m.n.   | m显示最小总宽度，n小数后的位数。    |</p>\n</li>\n</ul>\n</li>\n<li><p>python的三引号</p>\n<p>**三引号` <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;</div><div class=\"line\">&gt;   ==`u`==符号表示Unicode编码，如：</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   ```python</div><div class=\"line\">&gt;   #如下，则为Unicode格式</div><div class=\"line\">&gt;   u&apos;hello world&apos;</div><div class=\"line\">&gt;   u&apos;hello\\u0020world&apos;#效果如上，内部使用了\\0020代表空格</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure></p>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>==往后的api会越来越多，本笔记将不再赘述各个类型和函数的api。==</p>\n</blockquote>\n</li>\n<li><p>List列表</p>\n<blockquote>\n<p>Python有6个序列类型，常见的为==列表==和==元组==。序列常用操作：<code>索引</code>、<code>切片</code>、<code>加</code>、<code>乘</code>、<code>检查成员</code>，以及最大最小值的获取。</p>\n<ul>\n<li><p>列表，格式<code>[ ]</code>内用`,分隔。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   \tlist = [<span class=\"number\">1</span>,<span class=\"string\">'abc'</span>,<span class=\"keyword\">False</span>,list,<span class=\"string\">\"hello pythono\"</span>];<span class=\"comment\">#列表元素类型可以不同，可以嵌套列表。类似数组，可以索引，左0，右-1</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n<p>更新，直接赋值新的元素。删除，del对应元素。</p>\n</li>\n<li><p>python列表脚本操作符</p>\n<p>| 表达式                      | 结果                        | 描述         |<br>| ———————— | ————————- | ———- |<br>| len([1,2,3])             | 3                         | 长度         |<br>| [1,2,3]+[4,5,6]          | [1,2,3,4,5,6]             | zu’he      |<br>| [‘Hi!’]*4                | [‘Hi!’,’Hi!’,’Hi!’,’Hi!’] | 重复         |<br>| 3 in [1,2,3]             | True                      | 判断元素是否属于列表 |<br>| for x in [1,2,3]:print x | 1 2 3                     | 遍历 迭代      |</p>\n<p><strong>列表的截取，类似字符串的操作。通过索引，取值范围来截取。</strong></p>\n</li>\n<li><p>Python列表相关的函数&amp;方法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   cmp(list1,list2);<span class=\"comment\">#比较两个列表</span></div><div class=\"line\">&gt;   len(list);<span class=\"comment\">#list长度、元素个数</span></div><div class=\"line\">&gt;   max(list);<span class=\"comment\">#list最大元素值</span></div><div class=\"line\">&gt;   min(list);<span class=\"comment\">#list最小元素值</span></div><div class=\"line\">&gt;   list(seq);<span class=\"comment\">#将元组转化为列表</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   list.append(obj);<span class=\"comment\">#列表尾新增对象</span></div><div class=\"line\">&gt;   list.count(obj);<span class=\"comment\">#统计某元素出现次数</span></div><div class=\"line\">&gt;   list.extend(seq);<span class=\"comment\">#用新列表扩展</span></div><div class=\"line\">&gt;   list.index(obg);<span class=\"comment\">#元素第一次出现位置</span></div><div class=\"line\">&gt;   list.insert(index,obj);<span class=\"comment\">#指定位置插入</span></div><div class=\"line\">&gt;   list.pop(obj=list[<span class=\"number\">-1</span>]);<span class=\"comment\">#移除列表中最后一个元素，或指定位置的。</span></div><div class=\"line\">&gt;   list.remove(obj);<span class=\"comment\">#移除第一个找到的该元素</span></div><div class=\"line\">&gt;   list.reverse();<span class=\"comment\">#反向列表</span></div><div class=\"line\">&gt;   list.sort([func]);<span class=\"comment\">#排序</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p>元组</p>\n<blockquote>\n<p>元组类似列表，但是==不能修改元素==。</p>\n<p>格式<code>( )</code>，用<code>,</code>分隔。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;tup = (<span class=\"string\">'adb'</span>,<span class=\"number\">12</span>,list);</div><div class=\"line\">&gt;tup2 = ();<span class=\"comment\">#空元组</span></div><div class=\"line\">&gt;tup3 = (<span class=\"number\">2</span>,);<span class=\"comment\">#元组只有一个元素，则必须有个逗号,</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><strong>访问元组，类似列表和字符串的查找</strong>，元组不能修改，但是可以==串接==。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;tup1 = (<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>);</div><div class=\"line\">&gt;tup2 = (<span class=\"string\">'ab'</span>,<span class=\"string\">'cd'</span>,<span class=\"string\">'ddf'</span>);</div><div class=\"line\">&gt;tup3 = tup1 + tup2;<span class=\"comment\">#元组串接。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><strong><em>元组元素不能删除，但是==元组可以被删除==</em></strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;tup = (<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>);</div><div class=\"line\">&gt;<span class=\"keyword\">del</span> tup;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><code>任意无符号的对象，以,分隔，默认为元组</code></p>\n<ul>\n<li><p>元组的一些方法和函数，类似列表</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;  tuple(seq);<span class=\"comment\">#列表转化为元组</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p>字典Dictionary</p>\n<blockquote>\n<p>字典类似于java中的map集合。使用键值对<code>key-value</code>，格式：=={key1:value1,key2:value2}==</p>\n<ul>\n<li><p><strong>key值唯一</strong></p>\n</li>\n<li><p><strong>value值可以任何类型，key值必是不可变类型，如字符串、数字和元组。</strong></p>\n</li>\n<li><p>字典内，所有的key不需要都为统一类型</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   dict = &#123;<span class=\"string\">\"abc\"</span>:<span class=\"string\">'adb'</span>,<span class=\"string\">'def'</span>:<span class=\"number\">23</span>,<span class=\"number\">55</span>:<span class=\"string\">'adb'</span>&#125;</div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> (<span class=\"string\">\"dict[55]\"</span>);<span class=\"comment\">#根据key值，若是没有，会报错。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>字典元素的修改，删除</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"keyword\">del</span> dict[key];<span class=\"comment\">#删除指定元素</span></div><div class=\"line\">&gt;   dict.clear();<span class=\"comment\">#清空字典</span></div><div class=\"line\">&gt;   <span class=\"keyword\">del</span> dict;<span class=\"comment\">#删除字典</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>字典的函数&amp;方法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   cmp(dict1,dict2);<span class=\"comment\">#比较</span></div><div class=\"line\">&gt;   len(dict);<span class=\"comment\">#计数</span></div><div class=\"line\">&gt;   str(dict);<span class=\"comment\">#字符输出字典元素</span></div><div class=\"line\">&gt;   type(variable);<span class=\"comment\">#变量的类型</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   radiansdict.clear();<span class=\"comment\">#清空字典</span></div><div class=\"line\">&gt;   radiansdict.copy();<span class=\"comment\">#字典浅复制</span></div><div class=\"line\">&gt;   radiansdict.get(key,default=<span class=\"keyword\">None</span>);<span class=\"comment\">#获取值，若无，返回默认值。</span></div><div class=\"line\">&gt;   radiansdict.has_key(key);<span class=\"comment\">#查询是否包含指定key值</span></div><div class=\"line\">&gt;   radiansdict.items();<span class=\"comment\">#遍历显示字典元素数组</span></div><div class=\"line\">&gt;   radiansdict.keys();<span class=\"comment\">#列表显示所有key</span></div><div class=\"line\">&gt;   radiansdict.setdefault(key,default=<span class=\"keyword\">None</span>);<span class=\"comment\">#类似get，若key不存在，则添加。</span></div><div class=\"line\">&gt;   radiansdict.update(dict2);<span class=\"comment\">#将dict2更新到dict中。</span></div><div class=\"line\">&gt;   radiansdict.values();<span class=\"comment\">#返回所有value值。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p>python日期时间</p>\n<blockquote>\n<p>类似其他编程语言，时间基于1970年1月1日。Unix和windows支持到2038年？</p>\n<ul>\n<li><p>time</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   time.time();<span class=\"comment\">#获取时间戳</span></div><div class=\"line\">&gt;   time.localtime(time.time());<span class=\"comment\">#获得时间的元组</span></div><div class=\"line\">&gt;   time.asctime(time.localtime(time.time()));<span class=\"comment\">#格式化时间</span></div><div class=\"line\">&gt;   time.strftime(format[,t]);<span class=\"comment\">#自定义字符格式化时间</span></div><div class=\"line\">&gt;   <span class=\"comment\"># 格式化成2016-03-20 11:45:39形式</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> time.strftime(<span class=\"string\">\"%Y-%m-%d %H:%M:%S\"</span>, time.localtime()) </div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\"># 格式化成Sat Mar 28 22:24:24 2016形式</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> time.strftime(<span class=\"string\">\"%a %b %d %H:%M:%S %Y\"</span>, time.localtime()) </div><div class=\"line\">&gt;     </div><div class=\"line\">&gt;   <span class=\"comment\"># 将格式字符串转换为时间戳</span></div><div class=\"line\">&gt;   a = <span class=\"string\">\"Sat Mar 28 22:24:24 2016\"</span></div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> time.mktime(time.strptime(a,<span class=\"string\">\"%a %b %d %H:%M:%S %Y\"</span>));</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>calendar</p>\n<p>==0-6表示一周，0表示周一。==</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   calendar.month(<span class=\"number\">2016</span>,<span class=\"number\">10</span>);<span class=\"comment\">#获取制定月份的日历。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>  <strong>函数和方法不在赘述</strong></p>\n<p>  datetime、pytz、dateutil模块也是处理时间相关。</p>\n</blockquote>\n</li>\n<li><p>函数</p>\n<blockquote>\n<p>类似其他编程语言的函数&amp;方法定义，python函数格式：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">functionname</span><span class=\"params\">( parameters )</span>:</span></div><div class=\"line\">&gt;     <span class=\"string\">\"函数文档\"</span></div><div class=\"line\">&gt;     function_suite</div><div class=\"line\">&gt;     <span class=\"keyword\">return</span> [expression]</div><div class=\"line\">&gt; <span class=\"comment\">#def 关键字，声明函数</span></div><div class=\"line\">&gt; <span class=\"comment\">#functionname 函数名</span></div><div class=\"line\">&gt; <span class=\"comment\">#(parameters) 参数，多个参数可以，分隔？还是多个括号</span></div><div class=\"line\">&gt; <span class=\"comment\">#可写声明文档，</span></div><div class=\"line\">&gt; <span class=\"comment\">#返回值，可以是None。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><strong>按值传递与按引用传递</strong></p>\n<p>Python中所有参数的传递，都是==引用传递==，一处修改，原始值则变。</p>\n<ul>\n<li><p>函数的参数：</p>\n<p><code>必备参数</code>、<code>关键字参数</code>、<code>默认参数</code>、<code>不定长参数</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"comment\">#必备参数，必须传入的形式，否则报错</span></div><div class=\"line\">&gt;   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">printStr</span><span class=\"params\">(str)</span>:</span></div><div class=\"line\">&gt;       ...</div><div class=\"line\">&gt;   \t<span class=\"keyword\">return</span>;    </div><div class=\"line\">&gt;   <span class=\"comment\">#关键字参数，输入参数的格式顺序，不必和声明的顺序一致。</span></div><div class=\"line\">&gt;   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">printInfo</span><span class=\"params\">(name,age)</span>:</span></div><div class=\"line\">&gt;       print(<span class=\"string\">\"name:\"</span>,name);</div><div class=\"line\">&gt;       print(<span class=\"string\">\"age:\"</span>,age)</div><div class=\"line\">&gt;       <span class=\"keyword\">return</span>;</div><div class=\"line\">&gt;   printInfo(age = <span class=\"number\">27</span>,name = <span class=\"string\">'jack'</span>);</div><div class=\"line\">&gt;   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">printDefault</span><span class=\"params\">(name,age=<span class=\"number\">20</span>)</span>:</span></div><div class=\"line\">&gt;       ......</div><div class=\"line\">&gt;       <span class=\"keyword\">return</span>;</div><div class=\"line\">&gt;   <span class=\"comment\">#此时可以使用默认参数</span></div><div class=\"line\">&gt;   printDefault(name = <span class=\"string\">'jack'</span>);<span class=\"comment\">#age 默认了。</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\">#不定长参数</span></div><div class=\"line\">&gt;   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">printLong</span><span class=\"params\">(arg1,*args)</span>:</span><span class=\"comment\">#星号*的那个参数，为可变参数。</span></div><div class=\"line\">&gt;       print(arg2);</div><div class=\"line\">&gt;       <span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> args:</div><div class=\"line\">&gt;           <span class=\"keyword\">print</span> var;</div><div class=\"line\">&gt;       <span class=\"keyword\">return</span>;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>Python使用lambda创建匿名函数。</p>\n<ul>\n<li>lambda是表达式，函数比def简单</li>\n<li>只能在lambda表达式中构建逻辑</li>\n<li>lambda仅能访问自有参数。</li>\n<li>lambda似乎只能写一行。</li>\n</ul>\n<p>==语法==</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"keyword\">lambda</span> [arg2[,arg2,......]]:expression</div><div class=\"line\">&gt;   <span class=\"comment\">#示例</span></div><div class=\"line\">&gt;   sum = <span class=\"keyword\">lambda</span> arg1,arg2:arg1+arg2;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\">#调用sum函数</span></div><div class=\"line\">&gt;   sum(<span class=\"number\">1</span>,<span class=\"number\">2</span>);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>  <strong>return用于退出函数，无有返回值则是None。</strong></p>\n<p>  变量作用域，全局和局部，都是作用于其声明范围内。</p>\n</blockquote>\n</li>\n<li><p>Python模块</p>\n<blockquote>\n<p>python模块指一段逻辑或函数方法，在python中，模块也是一个对象，可以命名，引用。类似于java中的类文件？</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">import</span> module1[,module2,...]<span class=\"comment\">#导入模块，就可以使用其方法和逻辑。</span></div><div class=\"line\">&gt; <span class=\"comment\">#用类名/文件名.方法/函数,来调用。</span></div><div class=\"line\">&gt; <span class=\"keyword\">from</span> modname <span class=\"keyword\">import</span> name1[,name2,...]<span class=\"comment\">#从指定空间导入模块。</span></div><div class=\"line\">&gt; <span class=\"keyword\">from</span> modname <span class=\"keyword\">import</span> * <span class=\"comment\">#导入指定名称空间下的所有模块。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>寻找模块的顺序是：当前文件、path路径、系统默认路径。</p>\n<ul>\n<li>变量默认都是局部范围的，全局变量需要global声明。</li>\n<li>dir()函数，列表显示。</li>\n<li>globals()和locals(),reload();</li>\n<li>python中也有包，文件的概念。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>Python文件IO和File、异常</p>\n<blockquote>\n<ul>\n<li><p>文件I/O</p>\n<p><code>raw_input</code></p>\n<p><code>input</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;  <span class=\"comment\">#raw_input 接受输入的一行</span></div><div class=\"line\">&gt;  str = raw_input(<span class=\"string\">\"Please input :\"</span>);</div><div class=\"line\">&gt;  print(<span class=\"string\">\"输入内容为：\"</span>,str);<span class=\"comment\">#str会接收键盘的输入内容</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;  <span class=\"comment\">#input类似与raw_input，可以接受输入表达式</span></div><div class=\"line\">&gt;  str = input(<span class=\"string\">\"Please input:\"</span>);</div><div class=\"line\">&gt;  print(<span class=\"string\">\"输入内容为：\"</span>,str);</div><div class=\"line\">&gt;  <span class=\"comment\">#上面可以输入：[x*5 for x in range(2,10,2)]</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>file对象操作文件</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;  file object = open(file_name[,access_mode][,buffering]);<span class=\"comment\">#用open()方法打开文件</span></div><div class=\"line\">&gt;  file.closed;<span class=\"comment\"># true or false</span></div><div class=\"line\">&gt;  file.mode;</div><div class=\"line\">&gt;  file.name;</div><div class=\"line\">&gt;  file.softspace;<span class=\"comment\">#有空格符来结束，需要返回False，不需要，True。</span></div><div class=\"line\">&gt;  file.write(string);<span class=\"comment\">#不会默认行尾加换行的，。</span></div><div class=\"line\">&gt;  file.read([count]);<span class=\"comment\">#读取指定个数的字节数。</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;  tell();<span class=\"comment\">#可知文件内，当前位置。</span></div><div class=\"line\">&gt;  seek(offset[,<span class=\"keyword\">from</span>]);<span class=\"comment\">#改变当前位置</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;  <span class=\"comment\">#python 的os模块有删除、重命名文件的方法</span></div><div class=\"line\">&gt;  os.rename(old_name,new_name);</div><div class=\"line\">&gt;  os.remove(<span class=\"string\">\"test.txt\"</span>);<span class=\"comment\">#删除文件</span></div><div class=\"line\">&gt;  os.mkdir(<span class=\"string\">\"abc\"</span>);os.chdir(<span class=\"string\">\"new\"</span>);os.getcwd();<span class=\"comment\">#显示当前目录。</span></div><div class=\"line\">&gt;  os.rmdir();</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p><strong>异常处理</strong></p>\n<p>try/except语句</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;  <span class=\"keyword\">try</span>:</div><div class=\"line\">&gt;      &lt;statements&gt;<span class=\"comment\">#运行代码</span></div><div class=\"line\">&gt;  <span class=\"keyword\">except</span> &lt;exception&gt;:</div><div class=\"line\">&gt;      &lt;e1&gt;<span class=\"comment\">#try到异常name</span></div><div class=\"line\">&gt;  <span class=\"keyword\">except</span> &lt;exception&gt;,&lt;data&gt;:</div><div class=\"line\">&gt;      &lt;e2&gt;<span class=\"comment\">#try到异常，并有数据</span></div><div class=\"line\">&gt;  <span class=\"keyword\">else</span>:</div><div class=\"line\">&gt;      &lt;statements2&gt;<span class=\"comment\">#无异常时候运行</span></div><div class=\"line\">&gt;  <span class=\"comment\">#类似java，python中可以不写exception的name，就会捕获所有异常。</span></div><div class=\"line\">&gt;  <span class=\"comment\">#也可以</span></div><div class=\"line\">&gt;  <span class=\"keyword\">except</span>(e1,e2,...):</div><div class=\"line\">&gt;      ...</div><div class=\"line\">&gt;  <span class=\"comment\">#类似java 有try finally</span></div><div class=\"line\">&gt;  <span class=\"keyword\">try</span>:</div><div class=\"line\">&gt;      &lt;&gt;</div><div class=\"line\">&gt;  <span class=\"keyword\">finally</span>:</div><div class=\"line\">&gt;      &lt;&gt;<span class=\"comment\">#总会执行的语句。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p> ==raise==语句自动触发异常</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;  <span class=\"keyword\">raise</span> [Exception[,args[,traceback]]]</div><div class=\"line\">&gt;  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">functionName</span><span class=\"params\">( level )</span>:</span></div><div class=\"line\">&gt;      <span class=\"keyword\">if</span> level &lt; <span class=\"number\">1</span>:</div><div class=\"line\">&gt;          <span class=\"keyword\">raise</span> Exception(<span class=\"string\">\"Invalid level!\"</span>, level)</div><div class=\"line\">&gt;          <span class=\"comment\"># 触发异常后，后面的代码就不会再执行</span></div><div class=\"line\">&gt;          </div><div class=\"line\">&gt;  <span class=\"keyword\">try</span>:</div><div class=\"line\">&gt;     <span class=\"comment\"># 正常逻辑</span></div><div class=\"line\">&gt;  <span class=\"keyword\">except</span> <span class=\"string\">\"Invalid level!\"</span>:<span class=\"comment\">#对应自定义的异常名，如上。</span></div><div class=\"line\">&gt;     <span class=\"comment\"># 触发自定义异常    </span></div><div class=\"line\">&gt;  <span class=\"keyword\">else</span>:</div><div class=\"line\">&gt;     <span class=\"comment\"># 其余代码</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyError</span><span class=\"params\">(RuntimeError)</span>:</span></div><div class=\"line\">&gt;      <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">init</span><span class=\"params\">(self,arg)</span>:</span></div><div class=\"line\">&gt;          self.args = arg</div><div class=\"line\">&gt;          </div><div class=\"line\">&gt;  <span class=\"comment\">#自己触发异常</span></div><div class=\"line\">&gt;  <span class=\"keyword\">try</span>:</div><div class=\"line\">&gt;      <span class=\"keyword\">raise</span> MyError(<span class=\"string\">\"hao xiang shu ru cuo le \"</span>)</div><div class=\"line\">&gt;  <span class=\"keyword\">except</span> Networkerror,e:</div><div class=\"line\">&gt;      <span class=\"keyword\">print</span> e.args</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"四、Python高级教程\"><a href=\"#四、Python高级教程\" class=\"headerlink\" title=\"四、Python高级教程\"></a>四、Python高级教程</h2><ul>\n<li><p>面向对象</p>\n<blockquote>\n<p>Python是一种面向对象的解释型语言，类似于其他面向对象的编程语言，需要熟悉一下面向对象的名词概念：</p>\n<ul>\n<li><code>类(class)</code>：用于描述具有相同属性和方法的对象的集合。描述一类事物，对象是类的实例。</li>\n<li><code>类变量</code>：类中公开化的变量，作用于类的范围内，区别于实例变量。</li>\n<li><code>数据成员</code>：类变量或实例变量，用于处理实例对象相关的数据。</li>\n<li><code>方法重写</code>：重写继承自父类的方法，实现自有的逻辑。override。</li>\n<li><code>实例变量</code>：定义在方法中的变量，作用于方法内。</li>\n<li><code>继承</code>：即一个派生类继承基类的字段和方法。</li>\n<li><code>实例化</code>：创建一个类的实例，类的具体对象。</li>\n<li><code>方法</code>：类中定义的函数。</li>\n<li><code>对象</code>：根据类定义的数据结构构建的一个实例，包含类的数据成员和方法。</li>\n</ul>\n<ol>\n<li><p>创建类</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassName</span>:</span><span class=\"comment\">#定义类的关键字class</span></div><div class=\"line\">&gt;        <span class=\"string\">'类的描述信息'</span> <span class=\"comment\">#帮助文档</span></div><div class=\"line\">&gt;        class_suite <span class=\"comment\">#类题</span></div><div class=\"line\">&gt;    <span class=\"comment\">#例如：</span></div><div class=\"line\">&gt;    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span>:</span></div><div class=\"line\">&gt;       <span class=\"string\">'所有员工的基类'</span></div><div class=\"line\">&gt;       empCount = <span class=\"number\">0</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;       <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name, salary)</span>:</span><span class=\"comment\">#构造函数</span></div><div class=\"line\">&gt;          self.name = name</div><div class=\"line\">&gt;          self.salary = salary</div><div class=\"line\">&gt;          Employee.empCount += <span class=\"number\">1</span></div><div class=\"line\">&gt;       </div><div class=\"line\">&gt;       <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">displayCount</span><span class=\"params\">(self)</span>:</span><span class=\"comment\">#方法函数</span></div><div class=\"line\">&gt;         <span class=\"keyword\">print</span> <span class=\"string\">\"Total Employee %d\"</span> % Employee.empCount</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;       <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">displayEmployee</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">&gt;          <span class=\"keyword\">print</span> <span class=\"string\">\"Name : \"</span>, self.name,  <span class=\"string\">\", Salary: \"</span>, self.salary</div><div class=\"line\">&gt;    <span class=\"comment\">#实例化对象</span></div><div class=\"line\">&gt;    objectName = ClassName(...);<span class=\"comment\">#根据类的构造函数创建对象。</span></div><div class=\"line\">&gt;    <span class=\"comment\">#访问方法属性，用object.method();</span></div><div class=\"line\">&gt;    objectName.displayCount();</div><div class=\"line\">&gt;    <span class=\"comment\">#可以添加、删除、修改类的属性</span></div><div class=\"line\">&gt;    objectName.age = <span class=\"number\">20</span>;<span class=\"comment\"># add attribution</span></div><div class=\"line\">&gt;    objectName.age =<span class=\"number\">26</span>;<span class=\"comment\">#modify attribution</span></div><div class=\"line\">&gt;    <span class=\"keyword\">del</span> objectName.age <span class=\"comment\"># delete attribution</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;<br>&gt;</p>\n<blockquote>\n<p>   <strong>Python有专门的函数，处理类的属性和方法</strong><br>   getattr(obj,name[,default]);<br>   setattr(obj,name,value);<br>   hasattr(obj,name);<br>   delattr(obj,name);</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;</div><div class=\"line\">&gt; 2. Python内置属性</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    ```python</div><div class=\"line\">&gt;    #python attribution，用ClassName.function调用。</div><div class=\"line\">&gt;    __dict__:类的属性</div><div class=\"line\">&gt;    __doc__:类的文档字符串</div><div class=\"line\">&gt;    __name__:类名</div><div class=\"line\">&gt;    __module__:类定义所在的模块</div><div class=\"line\">&gt;    __bases__类的所有父类构成元素</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p>类似java，python使用内置引用计数器，处理垃圾回收。</p>\n</li>\n<li><p>Python的继承：</p>\n<ul>\n<li><p>格式：class SubClassName [ParentClass1[,ParentClass2,…]]:</p>\n</li>\n<li><p>Python类的继承==支持多继承==</p>\n</li>\n<li><p>派生类继承基类，构造函数不会被自动调用，需要专门调用。</p>\n</li>\n<li><p>调用基类方法时候，需要用BaseClassName.而且需要self参数。区别于本类内的函数方法。</p>\n</li>\n<li><p>同类函数名，则优先调用本类中的函数方法，若无，再去基类中寻找。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;      issbuclass();#判断是否是另一个类的派生类，issubclass(sub,super);</div><div class=\"line\">&gt;      isinstance(obj,class);#判断一个对象，是不是类的实例。</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p>方法重写与重载</p>\n<ul>\n<li><p>重写基类的方法，用于实现自己的逻辑。</p>\n</li>\n<li><p>基础重载：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;      <span class=\"comment\">#函数方法，前后两个下划线__init__</span></div><div class=\"line\">&gt;      __init__(self[,args])<span class=\"comment\">#构造函数</span></div><div class=\"line\">&gt;      __del__(self)<span class=\"comment\">#删除对象</span></div><div class=\"line\">&gt;      __repr__(self)<span class=\"comment\">#转化为编译器格式</span></div><div class=\"line\">&gt;      __str__(self)<span class=\"comment\">#转化为可阅读模式</span></div><div class=\"line\">&gt;      __cmp__(self,x)<span class=\"comment\">#对象比较</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>运算符重载</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;      <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vector</span>:</span></div><div class=\"line\">&gt;         <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, a, b)</span>:</span></div><div class=\"line\">&gt;            self.a = a</div><div class=\"line\">&gt;            self.b = b</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;         <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">&gt;            <span class=\"keyword\">return</span> <span class=\"string\">'Vector (%d, %d)'</span> % (self.a, self.b)</div><div class=\"line\">&gt;         </div><div class=\"line\">&gt;         <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__add__</span><span class=\"params\">(self,other)</span>:</span></div><div class=\"line\">&gt;            <span class=\"keyword\">return</span> Vector(self.a + other.a, self.b + other.b)</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;      v1 = Vector(<span class=\"number\">2</span>,<span class=\"number\">10</span>)</div><div class=\"line\">&gt;      v2 = Vector(<span class=\"number\">5</span>,<span class=\"number\">-2</span>)</div><div class=\"line\">&gt;      <span class=\"keyword\">print</span> v1 + v2<span class=\"comment\">#运算符的重载</span></div><div class=\"line\">&gt;      <span class=\"comment\">#输出结果</span></div><div class=\"line\">&gt;      Vector(<span class=\"number\">7</span>,<span class=\"number\">8</span>)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p><strong>类的属性和方法</strong></p>\n<ul>\n<li><p>类的私有属性</p>\n<p>__private<em>attrs：两个下划线开头，仅能在类内部使用。self.\\</em>_private_attrs。</p>\n</li>\n<li><p>类的方法</p>\n<p>关键字<code>def</code>定义类的方法，类似定义函数。但是类的方法必须包含参数<code>self</code>且为第一参数，私有方法：__private<em>method，内部调用self.\\</em>_private_method</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;      <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">method</span><span class=\"params\">(self[,args])</span>:</span></div><div class=\"line\">&gt;          .....</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li>Python不允许实例化的类访问私有数据，可用obj._classname_attrName访问属性。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>正则表达式</p>\n<blockquote>\n<p>Python的re模块包含了全部的正则表达式。</p>\n<p>compile函数用于构建正则表达式。</p>\n<ol>\n<li><p>re.match</p>\n<p>从字符串起始位置匹配，起始不成功匹配，返回None。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    <span class=\"comment\">#pattern 正则表达式，string 匹配字符串，flags标志位，如区分大小写，多行匹配等。</span></div><div class=\"line\">&gt;    re.match(pattern,string,flags=<span class=\"number\">0</span>);</div><div class=\"line\">&gt;    group(num= <span class=\"number\">0</span>)<span class=\"comment\">#匹配整个表达式字符串，group可以依次输入多个组号。</span></div><div class=\"line\">&gt;    groups();<span class=\"comment\">#返回包含所有小组字符串的元组。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>   示例：</p>\n   <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    <span class=\"keyword\">import</span> re</div><div class=\"line\">&gt;    print(re.match(<span class=\"string\">'www'</span>, <span class=\"string\">'www.runoob.com'</span>).span())  <span class=\"comment\"># 在起始位置匹配</span></div><div class=\"line\">&gt;    print(re.match(<span class=\"string\">'com'</span>, <span class=\"string\">'www.runoob.com'</span>))         <span class=\"comment\"># 不在起始位置匹配</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\">#输出结果</span></div><div class=\"line\">&gt;    (<span class=\"number\">0</span>,<span class=\"number\">3</span>)</div><div class=\"line\">&gt;    <span class=\"keyword\">None</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n   <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt;    <span class=\"keyword\">import</span> re</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    line = <span class=\"string\">\"Cats are smarter than dogs\"</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    matchObj = re.match( <span class=\"string\">r'(.*) are (.*?) .*'</span>, line, re.M|re.I)</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"keyword\">if</span> matchObj:</div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> <span class=\"string\">\"matchObj.group() : \"</span>, matchObj.group()</div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> <span class=\"string\">\"matchObj.group(1) : \"</span>, matchObj.group(<span class=\"number\">1</span>)</div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> <span class=\"string\">\"matchObj.group(2) : \"</span>, matchObj.group(<span class=\"number\">2</span>)</div><div class=\"line\">&gt;    <span class=\"keyword\">else</span>:</div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> <span class=\"string\">\"No match!!\"</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\">#输出结果</span></div><div class=\"line\">&gt;    matchObj.group() :  Cats are smarter than dogs</div><div class=\"line\">&gt;    matchObj.group(<span class=\"number\">1</span>) :  Cats</div><div class=\"line\">&gt;    matchObj.group(<span class=\"number\">2</span>) :  smarter</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p>re.search方法</p>\n<p>扫描整个字符串，并返回第一个成功的匹配。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    re.search(pattern,string,flags=<span class=\"number\">0</span>);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>   示例：</p>\n   <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt;    <span class=\"comment\"># -*- coding: UTF-8 -*- </span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"keyword\">import</span> re</div><div class=\"line\">&gt;    print(re.search(<span class=\"string\">'www'</span>, <span class=\"string\">'www.runoob.com'</span>).span())  <span class=\"comment\"># 在起始位置匹配</span></div><div class=\"line\">&gt;    print(re.search(<span class=\"string\">'com'</span>, <span class=\"string\">'www.runoob.com'</span>).span())         <span class=\"comment\"># 不在起始位置匹配</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\">#输出结果</span></div><div class=\"line\">&gt;    (<span class=\"number\">0</span>,<span class=\"number\">3</span>)</div><div class=\"line\">&gt;    (<span class=\"number\">11</span>,<span class=\"number\">14</span>)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n   <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt;    <span class=\"keyword\">import</span> re</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    line = <span class=\"string\">\"Cats are smarter than dogs\"</span>;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    searchObj = re.search( <span class=\"string\">r'(.*) are (.*?) .*'</span>, line, re.M|re.I)</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"keyword\">if</span> searchObj:</div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> <span class=\"string\">\"searchObj.group() : \"</span>, searchObj.group()</div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> <span class=\"string\">\"searchObj.group(1) : \"</span>, searchObj.group(<span class=\"number\">1</span>)</div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> <span class=\"string\">\"searchObj.group(2) : \"</span>, searchObj.group(<span class=\"number\">2</span>)</div><div class=\"line\">&gt;    <span class=\"keyword\">else</span>:</div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> <span class=\"string\">\"Nothing found!!\"</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\">#输出结果</span></div><div class=\"line\">&gt;    searchObj.group() :  Cats are smarter than dogs</div><div class=\"line\">&gt;    searchObj.group(<span class=\"number\">1</span>) :  Cats</div><div class=\"line\">&gt;    searchObj.group(<span class=\"number\">2</span>) :  smarter</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p>re.match &amp; re.search</p>\n<p><code>re.match</code>匹配起始，不成功则None。</p>\n<p><code>re.search</code>匹配全部。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    #!/usr/bin/python</div><div class=\"line\">&gt;    import re</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    line = \"Cats are smarter than dogs\";</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    matchObj = re.match( r'dogs', line, re.M|re.I)</div><div class=\"line\">&gt;    if matchObj:</div><div class=\"line\">&gt;       print \"match --&gt; matchObj.group() : \", matchObj.group()</div><div class=\"line\">&gt;    else:</div><div class=\"line\">&gt;       print \"No match!!\"</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    matchObj = re.search( r'dogs', line, re.M|re.I)</div><div class=\"line\">&gt;    if matchObj:</div><div class=\"line\">&gt;       print \"search --&gt; matchObj.group() : \", matchObj.group()</div><div class=\"line\">&gt;    else:</div><div class=\"line\">&gt;       print \"No match!!\"</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    #输出结果</div><div class=\"line\">&gt;    No match!!</div><div class=\"line\">&gt;    serach --&gt; matchObj.group() : dogs</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p>re.sub检索和替换</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    re.sub(pattern,rep1,string,max = <span class=\"number\">0</span>);<span class=\"comment\">#count &gt;=0,匹配次数。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>   示例：</p>\n   <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt;    <span class=\"keyword\">import</span> re</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    phone = <span class=\"string\">\"2004-959-559 # This is Phone Number\"</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\"># Delete Python-style comments</span></div><div class=\"line\">&gt;    num = re.sub(<span class=\"string\">r'#.*$'</span>, <span class=\"string\">\"\"</span>, phone)</div><div class=\"line\">&gt;    <span class=\"keyword\">print</span> <span class=\"string\">\"Phone Num : \"</span>, num</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\"># Remove anything other than digits</span></div><div class=\"line\">&gt;    num = re.sub(<span class=\"string\">r'\\D'</span>, <span class=\"string\">\"\"</span>, phone)    </div><div class=\"line\">&gt;    <span class=\"keyword\">print</span> <span class=\"string\">\"Phone Num : \"</span>, num</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\">#输出结果</span></div><div class=\"line\">&gt;    Phone Num :  <span class=\"number\">2004</span><span class=\"number\">-959</span><span class=\"number\">-559</span></div><div class=\"line\">&gt;    Phone Num :  <span class=\"number\">2004959559</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ol>\n<li><p>正则表达式的修饰符-可选标志</p>\n<p><em>标志修饰符控制匹配模式，多个标识符可以用按位OR<code>|</code>指定</em></p>\n<p>| 修饰符  | 描绘                                |<br>| —- | ——————————— |<br>| re.l | 匹配不分大小写                           |<br>| re.L | 本地化识别(local-aware)匹配              |<br>| re.M | 多行匹配，影响<code>^</code>和<code>$</code>                    |<br>| re.S | 使<code>.</code>匹配包括行在内的所有字符                  |<br>| re.U | Unicode解析字符，影响<code>\\w</code>、<code>\\W</code>、<code>\\b</code>、<code>\\B</code> |<br>| re.X | 灵活格式                              |</p>\n</li>\n<li><p>正则表达式模式</p>\n<ul>\n<li><code>字母和数字</code>表达自身。</li>\n<li>多数字母和数字前加<code>\\</code>会转义</li>\n<li>标点符号均是特殊意思，除非转义。</li>\n<li><code>\\</code>是转义符</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    ^\t匹配字符串的开头</div><div class=\"line\">&gt;    $\t匹配字符串的末尾。</div><div class=\"line\">&gt;    .\t匹配任意字符，除了换行符\\n，当re.DOTALL标记被指定时，则可以匹配包括换行符的任意字符。</div><div class=\"line\">&gt;    [...]\t用来表示一组字符,单独列出：[amk] 匹配 'a'，'m'或'k'</div><div class=\"line\">&gt;    [^...]\t不在[]中的字符：[^abc] 匹配除了a,b,c之外的字符。</div><div class=\"line\">&gt;    re*\t匹配0个或多个的表达式。</div><div class=\"line\">&gt;    re+\t匹配1个或多个的表达式。</div><div class=\"line\">&gt;    re?\t匹配0个或1个由前面的正则表达式定义的片段，非贪婪方式</div><div class=\"line\">&gt;    re&#123; n&#125;\t</div><div class=\"line\">&gt;    re&#123; n,&#125;\t精确匹配n个前面表达式。</div><div class=\"line\">&gt;    re&#123; n, m&#125;\t匹配 n 到 m 次由前面的正则表达式定义的片段，贪婪方式</div><div class=\"line\">&gt;    a| b\t匹配a或b</div><div class=\"line\">&gt;    (re)\tG匹配括号内的表达式，也表示一个组</div><div class=\"line\">&gt;    (?imx)\t正则表达式包含三种可选标志：i, m, 或 x 。只影响括号中的区域。</div><div class=\"line\">&gt;    (?-imx)\t正则表达式关闭 i, m, 或 x 可选标志。只影响括号中的区域。</div><div class=\"line\">&gt;    (?: re)\t类似 (...), 但是不表示一个组</div><div class=\"line\">&gt;    (?imx: re)\t在括号中使用i, m, 或 x 可选标志</div><div class=\"line\">&gt;    (?-imx: re)\t在括号中不使用i, m, 或 x 可选标志</div><div class=\"line\">&gt;    (?#...)\t注释.</div><div class=\"line\">&gt;    (?= re)\t前向肯定界定符。如果所含正则表达式，以 ... 表示，在当前位置成功匹配时成功，否则失败。但一旦所含表达式已经尝试，匹配引擎根本没有提高；模式的剩余部分还要尝试界定符的右边。</div><div class=\"line\">&gt;    (?! re)\t前向否定界定符。与肯定界定符相反；当所含表达式不能在字符串当前位置匹配时成功</div><div class=\"line\">&gt;    (?&gt; re)\t匹配的独立模式，省去回溯。</div><div class=\"line\">&gt;    \\w\t匹配字母数字及下划线</div><div class=\"line\">&gt;    \\W\t匹配非字母数字及下划线</div><div class=\"line\">&gt;    \\s\t匹配任意空白字符，等价于 [\\t\\n\\r\\f].</div><div class=\"line\">&gt;    \\S\t匹配任意非空字符</div><div class=\"line\">&gt;    \\d\t匹配任意数字，等价于 [0-9].</div><div class=\"line\">&gt;    \\D\t匹配任意非数字</div><div class=\"line\">&gt;    \\A\t匹配字符串开始</div><div class=\"line\">&gt;    \\Z\t匹配字符串结束，如果是存在换行，只匹配到换行前的结束字符串。c</div><div class=\"line\">&gt;    \\z\t匹配字符串结束</div><div class=\"line\">&gt;    \\G\t匹配最后匹配完成的位置。</div><div class=\"line\">&gt;    \\b\t匹配一个单词边界，也就是指单词和空格间的位置。例如， 'er\\b' 可以匹配\"never\" 中的 'er'，但不能匹配 \"verb\" 中的 'er'。</div><div class=\"line\">&gt;    \\B\t匹配非单词边界。'er\\B' 能匹配 \"verb\" 中的 'er'，但不能匹配 \"never\" 中的 'er'。</div><div class=\"line\">&gt;    \\n, \\t, 等.\t匹配一个换行符。匹配一个制表符。等</div><div class=\"line\">&gt;    \\1...\\9\t匹配第n个分组的子表达式。</div><div class=\"line\">&gt;    \\10\t匹配第n个分组的子表达式，如果它经匹配。否则指的是八进制字符码的表达式。</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n</li>\n<li><p>CGI通用网关接口</p>\n<blockquote>\n<p>CGI程序，运行在服务器，python脚本、perl脚本、shell脚本、C/C++程序等。</p>\n<p>Web服务器需支持cgi，通常在/cgi-bin/ /var/www/cgi-bin/</p>\n<p>cgi文件<code>.cgi</code>或者各自语言的源文件。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt; <span class=\"comment\"># -*- coding: UTF-8 -*-</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt; <span class=\"keyword\">print</span> <span class=\"string\">\"Content-type:text/html\"</span>\t<span class=\"comment\">#向浏览器显示的内容类型</span></div><div class=\"line\">&gt; <span class=\"keyword\">print</span>                               <span class=\"comment\"># 空行，告诉服务器结束头部</span></div><div class=\"line\">&gt; <span class=\"keyword\">print</span> <span class=\"string\">'&lt;html&gt;'</span></div><div class=\"line\">&gt; <span class=\"keyword\">print</span> <span class=\"string\">'&lt;head&gt;'</span></div><div class=\"line\">&gt; <span class=\"keyword\">print</span> <span class=\"string\">'&lt;meta charset=\"utf-8\"&gt;'</span></div><div class=\"line\">&gt; <span class=\"keyword\">print</span> <span class=\"string\">'&lt;title&gt;Hello Word - 我的第一个 CGI 程序！&lt;/title&gt;'</span></div><div class=\"line\">&gt; <span class=\"keyword\">print</span> <span class=\"string\">'&lt;/head&gt;'</span></div><div class=\"line\">&gt; <span class=\"keyword\">print</span> <span class=\"string\">'&lt;body&gt;'</span></div><div class=\"line\">&gt; <span class=\"keyword\">print</span> <span class=\"string\">'&lt;h2&gt;Hello Word! 我是来自菜鸟教程的第一CGI程序&lt;/h2&gt;'</span></div><div class=\"line\">&gt; <span class=\"keyword\">print</span> <span class=\"string\">'&lt;/body&gt;'</span></div><div class=\"line\">&gt; <span class=\"keyword\">print</span> <span class=\"string\">'&lt;/html&gt;'</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>如上保存为hello.py，修改权限755。放置于cgi-bin/目录下，即可在浏览器中访问。</p>\n<ul>\n<li><p>CGI程序中HTTP头部常用信息</p>\n<p>| 头                  | 描述              |<br>| —————— | ————— |<br>| Content-type       | 请求与实体对应的MIME信息。 |<br>| Expires:Date       | 响应过期的日期和时间      |<br>| Location:URL       | 重定向             |<br>| Last-modified:Date | 请求资源的最后修改时间     |<br>| Content-length:N   | 请求内容长度          |<br>| Set-Cookie:String  | 设置Http Cookie   |</p>\n</li>\n<li><p>CGI环境变量</p>\n<p>所有CGI程序都接收以下环境变量</p>\n<p>| 变量名             | 描述                                  |<br>| ————— | ———————————– |<br>| CONTENT_TYPE    | MIME类型                              |<br>| CONTENT_LENGTH  | 有效数据字节数                             |<br>| HTTP_COOKIE     | 客户机内cookie内容                        |<br>| HTTP_USER_AGENT | 客户及版本，浏览器信息等。                       |<br>| PATH_INFO       | 表示CGI程序名之后的其他路径信息                   |<br>| QUERY_STRING    | GET请求时，代表所传递的信息。                    |<br>| REMOTE_ADDR     | 客户机ip地址                             |<br>| REMOTE_HOST     | 客户机主机名                              |<br>| REQUEST_METHOD  | 提供脚本被调用的方法，http/1.0协议，仅GET和POST有意义。 |<br>| SCRIPT_FILENAME | CGI脚本完整路径                           |<br>| SERVER_NAME     | CGI脚本完整名称                           |<br>| SERVER_SOFTWARE | 调用CGI程序的http服务器的名称，版本信息。            |</p>\n<hr>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;       <span class=\"comment\">#输出所有cgi环境变量信息</span></div><div class=\"line\">&gt;       <span class=\"keyword\">import</span> os</div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> <span class=\"string\">\"Content-type: text/html\"</span></div><div class=\"line\">&gt;       <span class=\"keyword\">print</span></div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> <span class=\"string\">\"&lt;meta charset=\\\"utf-8\\\"&gt;\"</span></div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> <span class=\"string\">\"&lt;b&gt;环境变量&lt;/b&gt;&lt;br&gt;\"</span></div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> <span class=\"string\">\"&lt;ul&gt;\"</span></div><div class=\"line\">&gt;       <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> os.environ.keys():</div><div class=\"line\">&gt;           <span class=\"keyword\">print</span> <span class=\"string\">\"&lt;li&gt;&lt;span style='color:green'&gt;%30s &lt;/span&gt;:%s&lt;/li&gt;\"</span> % (key,os.environ[key])</div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> <span class=\"string\">\"&lt;/ul&gt;\"</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>GET&amp;POST</p>\n<p>浏览器请求服务器的两中主要方式</p>\n<ul>\n<li><p>GET方法</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;     http://www.test.com/cgi-bin/hello.py?key1=value1&amp;key2=value2</div><div class=\"line\">&gt;     #GET方法相关注释</div><div class=\"line\">&gt;     '''</div><div class=\"line\">&gt;     请求可被缓存，请求保存在浏览器历史纪录，可被收藏书签，请求不应在处理敏感数据时使用，请求有长度限制，请求只应用于取回数据。</div><div class=\"line\">&gt;     '''</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>POST方法</p>\n<p>post方法较为安全可靠。</p>\n</li>\n</ul>\n<ul>\n<li><p>CGI中使用cookie</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   Set-cookie:name=name;expires=date;path=path;domain=domain;secure</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>  <strong>注释：</strong></p>\n<p>  <code>name=name</code>: 需要设置cookie的值(name不能使用”;”和”,”号),有多个name值时用 “;” 分隔，例如：name1=name1;name2=name2;name3=name3。<br>  <code>expires=date</code>: cookie的有效期限,格式： expires=”Wdy,DD-Mon-YYYY HH:MM:SS”<br>  <code>path=path</code>: 设置cookie支持的路径,如果path是一个路径，则cookie对这个目录下的所有文件及子目录生效，例如： path=”/cgi-bin/“，如果path是一个文件，则cookie指对这个文件生效，例如：path=”/cgi-bin/cookie.cgi”。<br>  <code>domain=domain</code>: 对cookie生效的域名，例如：domain=”www.runoob.com”<br>  <code>secure</code>: 如果给出此标志，表示cookie只能通过SSL协议的https服务器来传递。<br>  cookie的接收是通过设置环境变量HTTP_COOKIE来实现的，CGI程序可以通过检索该变量获取cookie信息。</p>\n<ul>\n<li><p>cookie检索</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;     <span class=\"comment\">#cookie信息存储在CGI环境变量HTTP_COOKIE中，</span></div><div class=\"line\">&gt;     key1=value1;key=value2;......</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>文件上传</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;     <span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\">&gt;     <span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">&gt;     <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">&gt;     <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">&gt;     <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>菜鸟教程(runoob.com)<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">&gt;     <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">&gt;     <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">&gt;      <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">enctype</span>=<span class=\"string\">\"multipart/form-data\"</span> </span></div><div class=\"line\">&gt;                          action=\"/cgi-bin/save_file.py\" method=\"post\"&gt;</div><div class=\"line\">&gt;        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>选中文件: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"filename\"</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">&gt;        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"上传\"</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">&gt;        <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\">&gt;     <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">&gt;     <span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<pre><code>上面的html形成一个界面，可以选择上传文件，调用save_file.py脚本\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;     <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt;     <span class=\"comment\"># -*- coding: UTF-8 -*-</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     <span class=\"keyword\">import</span> cgi, os</div><div class=\"line\">&gt;     <span class=\"keyword\">import</span> cgitb; cgitb.enable()</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     form = cgi.FieldStorage()</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     <span class=\"comment\"># 获取文件名</span></div><div class=\"line\">&gt;     fileitem = form[<span class=\"string\">'filename'</span>]</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     <span class=\"comment\"># 检测文件是否上传</span></div><div class=\"line\">&gt;     <span class=\"keyword\">if</span> fileitem.filename:</div><div class=\"line\">&gt;        <span class=\"comment\"># 设置文件路径 </span></div><div class=\"line\">&gt;        fn = os.path.basename(fileitem.filename)</div><div class=\"line\">&gt;        open(<span class=\"string\">'/tmp/'</span> + fn, <span class=\"string\">'wb'</span>).write(fileitem.file.read())</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;        message = <span class=\"string\">'文件 \"'</span> + fn + <span class=\"string\">'\" 上传成功'</span></div><div class=\"line\">&gt;        </div><div class=\"line\">&gt;     <span class=\"keyword\">else</span>:</div><div class=\"line\">&gt;        message = <span class=\"string\">'文件没有上传'</span></div><div class=\"line\">&gt;        </div><div class=\"line\">&gt;     <span class=\"keyword\">print</span> <span class=\"string\">\"\"\"\\</span></div><div class=\"line\">&gt;     Content-Type: text/html\\n</div><div class=\"line\">&gt;     &lt;html&gt;</div><div class=\"line\">&gt;     &lt;head&gt;</div><div class=\"line\">&gt;     &lt;meta charset=\"utf-8\"&gt;</div><div class=\"line\">&gt;     &lt;title&gt;菜鸟教程(runoob.com)&lt;/title&gt;</div><div class=\"line\">&gt;     &lt;/head&gt;</div><div class=\"line\">&gt;     &lt;body&gt;</div><div class=\"line\">&gt;        &lt;p&gt;%s&lt;/p&gt;</div><div class=\"line\">&gt;     &lt;/body&gt;</div><div class=\"line\">&gt;     &lt;/html&gt;</div><div class=\"line\">&gt;     \"\"\" % (message,)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</code></pre></blockquote>\n<p>&gt;</p>\n<blockquote>\n<pre><code>**记得文件的权限设置。**\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;     <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt;     <span class=\"comment\"># -*- coding: UTF-8 -*-</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     <span class=\"comment\"># HTTP 头部</span></div><div class=\"line\">&gt;     <span class=\"keyword\">print</span> <span class=\"string\">\"Content-Disposition: attachment; filename=\\\"foo.txt\\\"\"</span>;</div><div class=\"line\">&gt;     <span class=\"keyword\">print</span></div><div class=\"line\">&gt;     <span class=\"comment\"># 打开文件</span></div><div class=\"line\">&gt;     fo = open(<span class=\"string\">\"foo.txt\"</span>, <span class=\"string\">\"rb\"</span>)</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     str = fo.read();</div><div class=\"line\">&gt;     <span class=\"keyword\">print</span> str</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     <span class=\"comment\"># 关闭文件</span></div><div class=\"line\">&gt;     fo.close()</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</code></pre></blockquote>\n<p>&gt;</p>\n<blockquote>\n<pre><code>**以上为文件下载**\n</code></pre></blockquote>\n</li>\n<li><p>Python操作mysql数据库</p>\n<blockquote>\n<p>python支持多种数据库，有对应的模块。DB-API使用流程</p>\n<ol>\n<li><p>引入api模块。</p>\n</li>\n<li><p>获取数据库链接。</p>\n</li>\n<li><p>执行sql语句和存储。</p>\n</li>\n<li><p>关闭连接。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;    <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt;    <span class=\"comment\"># -*- coding: UTF-8 -*-</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"keyword\">import</span> MySQLdb</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\"># 打开数据库连接</span></div><div class=\"line\">&gt;    db = MySQLdb.connect(<span class=\"string\">\"localhost\"</span>,<span class=\"string\">\"testuser\"</span>,<span class=\"string\">\"test123\"</span>,<span class=\"string\">\"TESTDB\"</span> )</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\"># 使用cursor()方法获取操作游标 </span></div><div class=\"line\">&gt;    cursor = db.cursor()</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\"># 使用execute方法执行SQL语句</span></div><div class=\"line\">&gt;    cursor.execute(<span class=\"string\">\"SELECT VERSION()\"</span>)</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\"># 使用 fetchone() 方法获取一条数据库。</span></div><div class=\"line\">&gt;    data = cursor.fetchone()</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"keyword\">print</span> <span class=\"string\">\"Database version : %s \"</span> % data</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;    <span class=\"comment\"># 关闭数据库连接</span></div><div class=\"line\">&gt;    db.close()</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>python数据库mysql，需要mysqldb</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   fetchone();<span class=\"comment\">#获取下一个查询结果集</span></div><div class=\"line\">&gt;   fetchall();<span class=\"comment\">#接收全部返回结果行</span></div><div class=\"line\">&gt;   rowcount;<span class=\"comment\">#只读属性，返回执行execute()后影响的行数</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>事务</p>\n<p>事务的四个属性：</p>\n<ul>\n<li>原子性（atomicity）。一个事务是一个不可分割的工作单位，事务中包括的诸操作要么都做，要么都不做。</li>\n<li>一致性（consistency）。事务必须是使数据库从一个一致性状态变到另一个一致性状态。一致性与原子性是密切相关的。</li>\n<li>隔离性（isolation）。一个事务的执行不能被其他事务干扰。即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。</li>\n<li>持久性（durability）。持续性也称永久性（permanence），指一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。接下来的其他操作或故障不应该对其有任何影响。</li>\n</ul>\n<p><strong><em>Python DB API 2.0 的事务提供了两个方法 commit 或 rollback。</em></strong></p>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p>Python网络编程</p>\n<blockquote>\n<p>python提供两个级别的网络服务：</p>\n<p>1、低级别支持基本Socket</p>\n<p>2、高级别SocketServer</p>\n<p>==Socket==套接字用于程序在主机间或者进程间通讯。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"comment\">#pyton中socket函数</span></div><div class=\"line\">&gt; socket.socket([family[,type[,proto]]])</div><div class=\"line\">&gt; <span class=\"comment\"># family 套接字家族，可用AF_UNIX或AF_INET</span></div><div class=\"line\">&gt; <span class=\"comment\">#type 类型，面向连接与否，SOCK_STREAM和SOCK_DGRAM</span></div><div class=\"line\">&gt; <span class=\"comment\">#proto 默认为0</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><strong>Python中socket函数可以参照api文档，此处不在赘述。</strong></p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"comment\">#服务端</span></div><div class=\"line\">&gt; <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt; <span class=\"comment\"># -*- coding: UTF-8 -*-</span></div><div class=\"line\">&gt; <span class=\"comment\"># 文件名：server.py</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt; <span class=\"keyword\">import</span> socket               <span class=\"comment\"># 导入 socket 模块</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt; s = socket.socket()         <span class=\"comment\"># 创建 socket 对象</span></div><div class=\"line\">&gt; host = socket.gethostname() <span class=\"comment\"># 获取本地主机名</span></div><div class=\"line\">&gt; port = <span class=\"number\">12345</span>                <span class=\"comment\"># 设置端口</span></div><div class=\"line\">&gt; s.bind((host, port))        <span class=\"comment\"># 绑定端口</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt; s.listen(<span class=\"number\">5</span>)                 <span class=\"comment\"># 等待客户端连接</span></div><div class=\"line\">&gt; <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">&gt;     c, addr = s.accept()     <span class=\"comment\"># 建立客户端连接。</span></div><div class=\"line\">&gt;     <span class=\"keyword\">print</span> <span class=\"string\">'连接地址：'</span>, addr</div><div class=\"line\">&gt;     c.send(<span class=\"string\">'欢迎访问菜鸟教程！'</span>)</div><div class=\"line\">&gt;     c.close()                <span class=\"comment\"># 关闭连接</span></div><div class=\"line\">&gt;     </div><div class=\"line\">&gt;     </div><div class=\"line\">&gt; <span class=\"comment\">#客户端</span></div><div class=\"line\">&gt; <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt; <span class=\"comment\"># -*- coding: UTF-8 -*-</span></div><div class=\"line\">&gt; <span class=\"comment\"># 文件名：client.py</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt; <span class=\"keyword\">import</span> socket               <span class=\"comment\"># 导入 socket 模块</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt; s = socket.socket()         <span class=\"comment\"># 创建 socket 对象</span></div><div class=\"line\">&gt; host = socket.gethostname() <span class=\"comment\"># 获取本地主机名</span></div><div class=\"line\">&gt; port = <span class=\"number\">12345</span>                <span class=\"comment\"># 设置端口好</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt; s.connect((host, port))</div><div class=\"line\">&gt; <span class=\"keyword\">print</span> s.recv(<span class=\"number\">1024</span>)</div><div class=\"line\">&gt; s.close()  </div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p><strong>Python Internet模块</strong></p>\n<p>| 协议     | 功能用处      | 端口号  | Python模块                 |<br>| —— | ——— | —- | ———————— |<br>| HTTP   | 网页访问      | 80   | httplib、urllib、xmlrpclib |<br>| NNTP   | 阅读、张贴新闻文章 | 119  | nntplib                  |<br>| FTP    | 文件传输      | 20   | ftplib、urllib            |<br>| SMTP   | 发送邮件      | 25   | smtplib                  |<br>| POP3   | 接收邮件      | 110  | poplib                   |<br>| IMAP4  | 获取邮件      | 143  | imaplib                  |<br>| Telnet | 命令行       | 23   | telnetlib                |<br>| Gopher | 信息查找      | 70   | gopherlib、urllib         |</p>\n<ul>\n<li><p>smtp邮件发送</p>\n<p>语法格式：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"keyword\">import</span> smtplib</div><div class=\"line\">&gt;   <span class=\"comment\">#创建对象</span></div><div class=\"line\">&gt;   smtpObj = smtplib.SMTP([host[,port[,local_hostname]]])</div><div class=\"line\">&gt;   <span class=\"comment\">#发送邮件</span></div><div class=\"line\">&gt;   SMTP.sendmail(from_addr,to_addr,msg[,mail_options,rcpt_options])</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>  示例：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt;   <span class=\"comment\"># -*- coding: UTF-8 -*-</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"keyword\">import</span> smtplib</div><div class=\"line\">&gt;   <span class=\"keyword\">from</span> email.mime.text <span class=\"keyword\">import</span> MIMEText</div><div class=\"line\">&gt;   <span class=\"keyword\">from</span> email.header <span class=\"keyword\">import</span> Header</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   sender = <span class=\"string\">'server@server.com'</span></div><div class=\"line\">&gt;   receivers = [<span class=\"string\">'receiver@receiver.com'</span>]  <span class=\"comment\"># 接收邮件，可设置为你的QQ邮箱或者其他邮箱</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\"># 三个参数：第一个为文本内容，第二个 plain 设置文本格式，可以是html，text等。第三个 utf-8 设置编码</span></div><div class=\"line\">&gt;   message = MIMEText(<span class=\"string\">'Python 邮件发送测试...'</span>, <span class=\"string\">'plain'</span>, <span class=\"string\">'utf-8'</span>)</div><div class=\"line\">&gt;   message[<span class=\"string\">'From'</span>] = Header(<span class=\"string\">\"菜鸟教程\"</span>, <span class=\"string\">'utf-8'</span>)</div><div class=\"line\">&gt;   message[<span class=\"string\">'To'</span>] =  Header(<span class=\"string\">\"测试\"</span>, <span class=\"string\">'utf-8'</span>)</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   subject = <span class=\"string\">'Python SMTP 邮件测试'</span></div><div class=\"line\">&gt;   message[<span class=\"string\">'Subject'</span>] = Header(subject, <span class=\"string\">'utf-8'</span>)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;<br>&gt;</p>\n<blockquote>\n<p>  try:</p>\n<pre><code>smtpObj = smtplib.SMTP(&apos;localhost&apos;)\nsmtpObj.sendmail(sender, receivers, message.as_string())\nprint &quot;邮件发送成功&quot;\n</code></pre><p>  except smtplib.SMTPException:</p>\n<pre><code>print &quot;Error: 无法发送邮件&quot;\n</code></pre>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;</div><div class=\"line\">&gt;   **使用第三方SMTP服务**</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   ```python</div><div class=\"line\">&gt;   # 第三方 SMTP 服务</div><div class=\"line\">&gt;   mail_host=&quot;smtp.XXX.com&quot;  #设置服务器</div><div class=\"line\">&gt;   mail_user=&quot;XXXX&quot;    #用户名</div><div class=\"line\">&gt;   mail_pass=&quot;XXXXXX&quot;   #密码</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   sender = &apos;from@runoob.com&apos;</div><div class=\"line\">&gt;   receivers = [&apos;429240967@qq.com&apos;]  # 接收邮件，可设置为你的QQ邮箱或者其他邮箱</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   message = MIMEText(&apos;Python 邮件发送测试...&apos;, &apos;plain&apos;, &apos;utf-8&apos;)</div><div class=\"line\">&gt;   message[&apos;From&apos;] = Header(&quot;菜鸟教程&quot;, &apos;utf-8&apos;)</div><div class=\"line\">&gt;   message[&apos;To&apos;] =  Header(&quot;测试&quot;, &apos;utf-8&apos;)</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   subject = &apos;Python SMTP 邮件测试&apos;</div><div class=\"line\">&gt;   message[&apos;Subject&apos;] = Header(subject, &apos;utf-8&apos;)</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   try:</div><div class=\"line\">&gt;       smtpObj = smtplib.SMTP() </div><div class=\"line\">&gt;       smtpObj.connect(mail_host, 25)    # 25 为 SMTP 端口号</div><div class=\"line\">&gt;       smtpObj.login(mail_user,mail_pass)  </div><div class=\"line\">&gt;       smtpObj.sendmail(sender, receivers, message.as_string())</div><div class=\"line\">&gt;       print &quot;邮件发送成功&quot;</div><div class=\"line\">&gt;   except smtplib.SMTPException:</div><div class=\"line\">&gt;       print &quot;Error: 无法发送邮件&quot;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>  创建带附件的邮件发送</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt;   <span class=\"comment\"># -*- coding: UTF-8 -*-</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"keyword\">import</span> smtplib</div><div class=\"line\">&gt;   <span class=\"keyword\">from</span> email.mime.text <span class=\"keyword\">import</span> MIMEText</div><div class=\"line\">&gt;   <span class=\"keyword\">from</span> email.mime.multipart <span class=\"keyword\">import</span> MIMEMultipart</div><div class=\"line\">&gt;   <span class=\"keyword\">from</span> email.header <span class=\"keyword\">import</span> Header</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   sender = <span class=\"string\">'from@runoob.com'</span></div><div class=\"line\">&gt;   receivers = [<span class=\"string\">'429240967@qq.com'</span>]  <span class=\"comment\"># 接收邮件，可设置为你的QQ邮箱或者其他邮箱</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\">#创建一个带附件的实例</span></div><div class=\"line\">&gt;   message = MIMEMultipart()</div><div class=\"line\">&gt;   message[<span class=\"string\">'From'</span>] = Header(<span class=\"string\">\"菜鸟教程\"</span>, <span class=\"string\">'utf-8'</span>)</div><div class=\"line\">&gt;   message[<span class=\"string\">'To'</span>] =  Header(<span class=\"string\">\"测试\"</span>, <span class=\"string\">'utf-8'</span>)</div><div class=\"line\">&gt;   subject = <span class=\"string\">'Python SMTP 邮件测试'</span></div><div class=\"line\">&gt;   message[<span class=\"string\">'Subject'</span>] = Header(subject, <span class=\"string\">'utf-8'</span>)</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\">#邮件正文内容</span></div><div class=\"line\">&gt;   message.attach(MIMEText(<span class=\"string\">'这是菜鸟教程Python 邮件发送测试……'</span>, <span class=\"string\">'plain'</span>, <span class=\"string\">'utf-8'</span>))</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\"># 构造附件1，传送当前目录下的 test.txt 文件</span></div><div class=\"line\">&gt;   att1 = MIMEText(open(<span class=\"string\">'test.txt'</span>, <span class=\"string\">'rb'</span>).read(), <span class=\"string\">'base64'</span>, <span class=\"string\">'utf-8'</span>)</div><div class=\"line\">&gt;   att1[<span class=\"string\">\"Content-Type\"</span>] = <span class=\"string\">'application/octet-stream'</span></div><div class=\"line\">&gt;   <span class=\"comment\"># 这里的filename可以任意写，写什么名字，邮件中显示什么名字</span></div><div class=\"line\">&gt;   att1[<span class=\"string\">\"Content-Disposition\"</span>] = <span class=\"string\">'attachment; filename=\"test.txt\"'</span></div><div class=\"line\">&gt;   message.attach(att1)</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\"># 构造附件2，传送当前目录下的 runoob.txt 文件</span></div><div class=\"line\">&gt;   att2 = MIMEText(open(<span class=\"string\">'runoob.txt'</span>, <span class=\"string\">'rb'</span>).read(), <span class=\"string\">'base64'</span>, <span class=\"string\">'utf-8'</span>)</div><div class=\"line\">&gt;   att2[<span class=\"string\">\"Content-Type\"</span>] = <span class=\"string\">'application/octet-stream'</span></div><div class=\"line\">&gt;   att2[<span class=\"string\">\"Content-Disposition\"</span>] = <span class=\"string\">'attachment; filename=\"runoob.txt\"'</span></div><div class=\"line\">&gt;   message.attach(att2)</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"keyword\">try</span>:</div><div class=\"line\">&gt;       smtpObj = smtplib.SMTP(<span class=\"string\">'localhost'</span>)</div><div class=\"line\">&gt;       smtpObj.sendmail(sender, receivers, message.as_string())</div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> <span class=\"string\">\"邮件发送成功\"</span></div><div class=\"line\">&gt;   <span class=\"keyword\">except</span> smtplib.SMTPException:</div><div class=\"line\">&gt;       <span class=\"keyword\">print</span> <span class=\"string\">\"Error: 无法发送邮件\"</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p><strong>Python多线程</strong></p>\n<p>关于多线程需要注意两点：</p>\n<ul>\n<li>线程可以被中断(抢占)</li>\n<li>其他线程运行时，线程可以休眠(退让)</li>\n</ul>\n<p><strong>python使用线程两种方式</strong></p>\n<p>1、函数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   thread.start_new_thread(function,args[,kwargs])</div><div class=\"line\">&gt;   <span class=\"comment\"># 注释：function-线程函数，args-参数，必须是tuple类型。kwargs-可选参数。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt;   <span class=\"comment\"># -*- coding: UTF-8 -*-</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"keyword\">import</span> thread</div><div class=\"line\">&gt;   <span class=\"keyword\">import</span> time</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\"># 为线程定义一个函数</span></div><div class=\"line\">&gt;   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print_time</span><span class=\"params\">( threadName, delay)</span>:</span></div><div class=\"line\">&gt;      count = <span class=\"number\">0</span></div><div class=\"line\">&gt;      <span class=\"keyword\">while</span> count &lt; <span class=\"number\">5</span>:</div><div class=\"line\">&gt;         time.sleep(delay)</div><div class=\"line\">&gt;         count += <span class=\"number\">1</span></div><div class=\"line\">&gt;         <span class=\"keyword\">print</span> <span class=\"string\">\"%s: %s\"</span> % ( threadName, time.ctime(time.time()) )</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\"># 创建两个线程</span></div><div class=\"line\">&gt;   <span class=\"keyword\">try</span>:</div><div class=\"line\">&gt;      thread.start_new_thread( print_time, (<span class=\"string\">\"Thread-1\"</span>, <span class=\"number\">2</span>, ) )</div><div class=\"line\">&gt;      thread.start_new_thread( print_time, (<span class=\"string\">\"Thread-2\"</span>, <span class=\"number\">4</span>, ) )</div><div class=\"line\">&gt;   <span class=\"keyword\">except</span>:</div><div class=\"line\">&gt;      <span class=\"keyword\">print</span> <span class=\"string\">\"Error: unable to start thread\"</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"keyword\">while</span> <span class=\"number\">1</span>:</div><div class=\"line\">&gt;      <span class=\"keyword\">pass</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>  <em>线程结束依靠线程函数，或者手动<code>thread.exit()</code>,<code>抛异常</code>。</em></p>\n<ul>\n<li><p><strong><em>线程模块</em></strong></p>\n<p>1、<code>thread</code>和<code>threading</code>两个标准库</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   threading.currentThread();</div><div class=\"line\">&gt;   threading.enumerate();</div><div class=\"line\">&gt;   threading.activeCount();</div><div class=\"line\">&gt;   run();start();join([time]);isAlive();getName();setName();</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>  2、使用Threading模块创建线程</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"comment\">#继承threading.Thread然后重写__init__方法和run方法</span></div><div class=\"line\">&gt;   <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt;   <span class=\"comment\"># -*- coding: UTF-8 -*-</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"keyword\">import</span> threading</div><div class=\"line\">&gt;   <span class=\"keyword\">import</span> time</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   exitFlag = <span class=\"number\">0</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">myThread</span> <span class=\"params\">(threading.Thread)</span>:</span>   <span class=\"comment\">#继承父类threading.Thread</span></div><div class=\"line\">&gt;       <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, threadID, name, counter)</span>:</span></div><div class=\"line\">&gt;           threading.Thread.__init__(self)</div><div class=\"line\">&gt;           self.threadID = threadID</div><div class=\"line\">&gt;           self.name = name</div><div class=\"line\">&gt;           self.counter = counter</div><div class=\"line\">&gt;       <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span>                   <span class=\"comment\">#把要执行的代码写到run函数里面 线程在创建后会直接运行run函数 </span></div><div class=\"line\">&gt;           <span class=\"keyword\">print</span> <span class=\"string\">\"Starting \"</span> + self.name</div><div class=\"line\">&gt;           print_time(self.name, self.counter, <span class=\"number\">5</span>)</div><div class=\"line\">&gt;           <span class=\"keyword\">print</span> <span class=\"string\">\"Exiting \"</span> + self.name</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print_time</span><span class=\"params\">(threadName, delay, counter)</span>:</span></div><div class=\"line\">&gt;       <span class=\"keyword\">while</span> counter:</div><div class=\"line\">&gt;           <span class=\"keyword\">if</span> exitFlag:</div><div class=\"line\">&gt;               thread.exit()</div><div class=\"line\">&gt;           time.sleep(delay)</div><div class=\"line\">&gt;           <span class=\"keyword\">print</span> <span class=\"string\">\"%s: %s\"</span> % (threadName, time.ctime(time.time()))</div><div class=\"line\">&gt;           counter -= <span class=\"number\">1</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\"># 创建新线程</span></div><div class=\"line\">&gt;   thread1 = myThread(<span class=\"number\">1</span>, <span class=\"string\">\"Thread-1\"</span>, <span class=\"number\">1</span>)</div><div class=\"line\">&gt;   thread2 = myThread(<span class=\"number\">2</span>, <span class=\"string\">\"Thread-2\"</span>, <span class=\"number\">2</span>)</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\"># 开启线程</span></div><div class=\"line\">&gt;   thread1.start()</div><div class=\"line\">&gt;   thread2.start()</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> <span class=\"string\">\"Exiting Main Thread\"</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p>线程同步</p>\n<p>Python中线程同步使用<code>Lock</code>和<code>Rlock</code>两个对象，都含有<code>acquire</code>和<code>release</code>方法。</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt;   <span class=\"comment\"># -*- coding: UTF-8 -*-</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"keyword\">import</span> threading</div><div class=\"line\">&gt;   <span class=\"keyword\">import</span> time</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">myThread</span> <span class=\"params\">(threading.Thread)</span>:</span></div><div class=\"line\">&gt;       <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, threadID, name, counter)</span>:</span></div><div class=\"line\">&gt;           threading.Thread.__init__(self)</div><div class=\"line\">&gt;           self.threadID = threadID</div><div class=\"line\">&gt;           self.name = name</div><div class=\"line\">&gt;           self.counter = counter</div><div class=\"line\">&gt;       <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">&gt;           <span class=\"keyword\">print</span> <span class=\"string\">\"Starting \"</span> + self.name</div><div class=\"line\">&gt;          <span class=\"comment\"># 获得锁，成功获得锁定后返回True</span></div><div class=\"line\">&gt;          <span class=\"comment\"># 可选的timeout参数不填时将一直阻塞直到获得锁定</span></div><div class=\"line\">&gt;          <span class=\"comment\"># 否则超时后将返回False</span></div><div class=\"line\">&gt;           threadLock.acquire()</div><div class=\"line\">&gt;           print_time(self.name, self.counter, <span class=\"number\">3</span>)</div><div class=\"line\">&gt;           <span class=\"comment\"># 释放锁</span></div><div class=\"line\">&gt;           threadLock.release()</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print_time</span><span class=\"params\">(threadName, delay, counter)</span>:</span></div><div class=\"line\">&gt;       <span class=\"keyword\">while</span> counter:</div><div class=\"line\">&gt;           time.sleep(delay)</div><div class=\"line\">&gt;           <span class=\"keyword\">print</span> <span class=\"string\">\"%s: %s\"</span> % (threadName, time.ctime(time.time()))</div><div class=\"line\">&gt;           counter -= <span class=\"number\">1</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   threadLock = threading.Lock()</div><div class=\"line\">&gt;   threads = []</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\"># 创建新线程</span></div><div class=\"line\">&gt;   thread1 = myThread(<span class=\"number\">1</span>, <span class=\"string\">\"Thread-1\"</span>, <span class=\"number\">1</span>)</div><div class=\"line\">&gt;   thread2 = myThread(<span class=\"number\">2</span>, <span class=\"string\">\"Thread-2\"</span>, <span class=\"number\">2</span>)</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\"># 开启新线程</span></div><div class=\"line\">&gt;   thread1.start()</div><div class=\"line\">&gt;   thread2.start()</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\"># 添加线程到线程列表</span></div><div class=\"line\">&gt;   threads.append(thread1)</div><div class=\"line\">&gt;   threads.append(thread2)</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"comment\"># 等待所有线程完成</span></div><div class=\"line\">&gt;   <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> threads:</div><div class=\"line\">&gt;       t.join()</div><div class=\"line\">&gt;   <span class=\"keyword\">print</span> <span class=\"string\">\"Exiting Main Thread\"</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li><p><strong>线程优先级队列</strong></p>\n<p>Python的Queue模块提供了FIFO和LIFO队列，Queue、LifoQueue和优先级PriorityQueue。</p>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p>Python其他特性</p>\n<blockquote>\n<ul>\n<li>xml解析</li>\n</ul>\n<p>xml解析通用的有<code>SAX</code>、<code>DOM</code>、python有<code>ElementTree</code></p>\n<p><em>一般编程中都很少用SAX和DOM解析，都有自己平台的优化解析方式。</em></p>\n<p><strong>注：</strong>因DOM需要将XML数据映射到内存中的树，一是比较慢，二是比较耗内存，而SAX流式读取XML文件，比较快，占用内存少，但需要用户实现回调函数（handler）。</p>\n<ul>\n<li><p>GUI编程</p>\n<p>python提供多种图形界面库<code>Thinter</code>、<code>wxPython</code>、<code>Jython</code></p>\n<p><strong>Tkinter</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"keyword\">import</span> Tkinter</div><div class=\"line\">&gt;   top = Tkinter.Tk()</div><div class=\"line\">&gt;   <span class=\"comment\">#进入消息循环</span></div><div class=\"line\">&gt;   top.mainloog()</div><div class=\"line\">&gt;   <span class=\"comment\">#如上代码执行，可产生小窗口界面了。</span></div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>  Tkinter包含常用的窗口控件，以及属性和方法，使用时候可差用api。</p>\n<ul>\n<li><p>JSON</p>\n<p>python使用Demjson，<code>decode</code>和<code>encode</code>解码编码。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   demjson.encode(self,obj,nest_level=<span class=\"number\">0</span>)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>  示例：(构建json)</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt;   <span class=\"keyword\">import</span> demjson</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   data = [&#123;<span class=\"string\">'a'</span>:<span class=\"number\">1</span>,<span class=\"string\">'b'</span>:<span class=\"number\">2</span>,<span class=\"string\">'c'</span>:<span class=\"number\">3</span>,<span class=\"string\">'d'</span>:<span class=\"number\">4</span>,<span class=\"string\">'e'</span>:<span class=\"number\">5</span>&#125;]</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   json = demjson.encode(data)</div><div class=\"line\">&gt;   print(json)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>  解析Json</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   demjson.decode(self,txt)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;   <span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">&gt;   <span class=\"keyword\">import</span> demjson</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   json = <span class=\"string\">'&#123;\"a\":1,\"b\":2,\"c\":3,\"d\":4,\"e\":5&#125;'</span>;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   text = demjson.decode(json)</div><div class=\"line\">&gt;   print(text)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n<p><strong>初次接触Python，笔记难免简单初级，仅供自己学习只用，希望也对网友有所益处。</strong></p>\n"},{"title":"Android图像与动画","date":"2017-03-27T08:57:00.000Z","author":"冰路梦","_content":"## 第四篇、Android图像与动画\n[TOC]\n### 第1章、高效显示Bitmap\n\n本节主要介绍加载处理Bitmap对象常用方法，以避免UI线程阻塞与OOM问题。由于Android设备\n\n- Android单个应用至少16M内存，不同分辨率屏幕的设备要求不同。`国内自定义ROM限制也有差异。`\n- Bitmap消耗内存，一张5M的高清照片，使用ARGB_8888方式加载Bitmap，则需要19M左右的内存。\n- Android应用一般加载多个Bitmap，预先加载以备显示。\n\n所以如上三条，需要我们对Bitmap做优化处理。\n\n#### 1、高效加载大图（Loading Large Bitmap Efficiently）\n\n本节介绍加载缩小的图片，来避免过多消耗内存，原始大小的图片和超过控件大小和设备分辨率的图片加载，在显示上并无意义，反而带来内存风险。\n\n- ##### 读取位图尺寸与类型（Read Bitmap Dimensions and Type）\n\n  `BitmapFactory`提供了不同类型的decode方法，配有`BitmapFactory.Options`选项来标记解码方式。\n\n  设置`inJustDecodeBounds=true`属性可以避免解码时候分配内存。其返回`null`的Bitmap，但是可以用于获取长宽和类型。\n\n  ```java\n  BitmapFactory.Options options = new BitmapFactory.Options();\n  options.inJustDecodeBounds = true;//不加载分配内存\n  BitmapFactory.decodeResource(getResource(),R.drawable.iclauncher,options);\n  //图像长宽\n  int imgWidth = options.outWidth;\n  int imgHeight = options.outHeight;\n  String imgType = options.outMimeType;//图像类型\n  ```\n\n  *一般需要在加载图片前判断图片大小，避免OOM，除非你确保不会OOM*\n\n- ##### 加载缩小版图片到内存（Load a Scale Down Version into Memory）\n\n  加载缩小版图片也需要考虑一些因素：\n\n  - 评估完整图片加载需耗内存。\n  - 加载图片可能涉及到的其他内存需求。\n  - 显示图片的控件尺寸。\n  - 设备屏幕的密度和大小。\n\n  BitmapFactory.Options中设置`inSampleSize`来确定缩放比。\n\n  ```java\n  /**\n   * 计算图像缩放比\n   */\n  public static int calculateInSampleSize(\n              BitmapFactory.Options options, int reqWidth, int reqHeight) {\n      // 获取图像的原始大小\n      final int height = options.outHeight;\n      final int width = options.outWidth;\n      int inSampleSize = 1;\n      if (height > reqHeight || width > reqWidth) {\n          final int halfHeight = height / 2;\n          final int halfWidth = width / 2;\n          //保持宽高大于请求的宽高，缩放比为计算值的2倍\n          while ((halfHeight / inSampleSize) > reqHeight\n                  && (halfWidth / inSampleSize) > reqWidth) {\n              inSampleSize *= 2;\n          }\n      }\n      return inSampleSize;\n  }\n  ```\n\n  ==*设置缩放比`inSampleSize`为2的倍数，是因为解码器对非2倍数会就近处理为2的倍数。*==\n\n  先设置`inJustDecodeBounds=true`来设置`inSampleSize`之后在设置`inJustDecodeBounds=false`加载缩放后的Bitmap\n\n  ```java\n  mImageView.setImageBitmap(decodeSampleBitmapFromResource(getResource(),R.drawable.iclauncher,100,100));//加载大小100长宽的图片\n  /*\n   * 根据控件大小，加载缩放图片\n   */\n  public static Bitmap decodeSampleBitmapFromResource(Resource res,int resId,int reqWidth,int reqHeight){\n    //先空加载图片，计算缩放比\n    final BitmapFactory.Options options = new BitmapFactory.Options();\n    options.inJustDecodeBounds = true;\n    BitmapFactory.decodeResource(res,resId,options);\n    options.inSampleSize = calculateInSampleSize(options,reqWidth,reqHeight);\n    //解码缩放后的图像\n    options.inJustDecodeBounds = false;\n    returen BitmapFactory.decodeResource(res,resId,options);\n  }\n  ```\n\n#### 2、非UI线程处理Bitmap\n\n上一节仅仅介绍了如何缩放加载图像，若是获取网络图像或者其他储存设备，则应避免在UI线程执行加载操作，避免ANR。\n\n- ##### 使用AsyncTask（Use a AsyncTask）\n\n  AsyncTask是Android提供的一个封装好的后台线程操作方式，并可以实现前后台信息传递。\n\n  ```java\n  class BitmapWorkerTask extends AsyncTask{\n    private final WeakReference imageViewReference;\n    private int data = 0;\n    public BitmapWorkerTask(ImageView imageView){\n      //使用弱引用，确保图像会被及时的GC回收。\n      imageViewReference = new WeakReference(imageView);\n    }\n    //后台解码图片\n    @override\n    protected Bitmap doInBackground(Integer... params){\n      data = params[0];\n      return decodeSampleBitmapFromResource(getResource(),data,100,100);\n    }\n    //完成解码后，加载图像到控件显示\n    //要判断引用对象是否还存在，控件是否存在等，避免空指针。\n    @override\n    protected void onPostExecute(Bitmap bitmap){\n      if(imageViewReference !=null && bitmap !=null){\n        final ImageView imageView = imageViewReference.get();\n        if(imageView!=null){\n          imageView.setImageBitmap(bitmap);\n        }\n      }\n    }\n  }\n  //创建一个任务task，执行异步加载\n  public void loadBitmap(int resId,ImageView imageView){\n    BitmapWorkerTask task = new BitmapWorkerTask(imageView);\n    task.execute(resId);//执行Task\n  }\n  ```\n\n- ##### 处理并发问题（Handle Concurrency）\n\n  List View和Grid View控件显示多个位图结合AsyncTask使用时会产生并发问题。每个item都执行task的话，启动顺序，任务顺序都很难保持一致性。为此可以使用Image View来保存最近使用的AsyncTask引用，创建一个专用的`Drawable`子类来存储任务引用，如`BitmapDrawable`,并提供占位图像:\n\n  ```java\n  static class AsyncDrawable extends BitmapDrawable{\n    private final WeakReference bitmapWorkerTaskReference;\n    public AsyncDrawable(Resource res,Bitmap bitmap,BitmapWorkerTask bitmapWorkerTask){\n      super(res,bitmap);\n      //初始化弱引用对象\n      bitmapWorkerTaskReference = new BitmapWorkerTaskReference(bitmapWorkerTask);\n    }\n    //对外公开task的引用。\n    public BitmapWorkerTask getBitmapWorkerTask(){\n      return bitmapWorkerTaskReference.get();\n    }\n  }\n  ```\n\n  在执行BitmapWorkerTask之前需要创建AsyncDrawable并绑定到ImageView上：\n\n  ```java\n  public void loadBitmap(int resId,ImageView imageView){\n    if(cancelPotentialWork(resId,imageView)){\n      final BitmapWorkerTask task = new BitmapWorkerTask(imageView);\n      final AsyncDrawable asyncDrawable = new \t\t\t\t\t\t\t   AsyncDrawable(getResource(),mPlaceHolderBitmap,task);\n      imageView.setImageDrawable(asyncDrawable);\n      task.execute(resId);\n    }\n  }\n  //该方法用于检测是否有已存在的任务在执行该Image View控件的请求。\n  public static boolean cancelPotentialWork(int data, ImageView imageView) {\n  \t//检索AsyncTask是否已经被分配到指定的ImageView控件。\n    final BitmapWorkerTask bitmapWorkerTask = getBitmapWorkerTask(imageView);\n      if (bitmapWorkerTask != null) {\n          final int bitmapData = bitmapWorkerTask.data;\n          if (bitmapData == 0 || bitmapData != data) {\n              //取消先前的任务\n              bitmapWorkerTask.cancel(true);\n          } else {\n              //同样的请求任务已经在执行\n              return false;\n          }\n      }\n      //没有符合当下请求的任务绑定在ImageView控件上，或者之前的取消了。\n      return true;\n  }\n  //获取控件相关的task\n  private static BitmapWorkerTask getBitmapWorkerTask(ImageView imageView) {\n     if (imageView != null) {\n         final Drawable drawable = imageView.getDrawable();\n         if (drawable instanceof AsyncDrawable) {\n             final AsyncDrawable asyncDrawable = (AsyncDrawable) drawable;\n           //获取AsyncDrawable中定义的绑定task引用\n             return asyncDrawable.getBitmapWorkerTask();\n         }\n      }\n      return null;\n  }\n  ```\n\n  完成异步task的绑定后，在`onPostExecute()`中更新view\n\n  ```java\n  class BitmapWorkerTask extends AsyncTask {\n      ...\n\n      @Override\n      protected void onPostExecute(Bitmap bitmap) {\n          if (isCancelled()) {\n              bitmap = null;\n          }\n  \t\t//更新View前，判断资源和控件的非空\n          if (imageViewReference != null && bitmap != null) {\n              final ImageView imageView = imageViewReference.get();\n              final BitmapWorkerTask bitmapWorkerTask =\n                      getBitmapWorkerTask(imageView);\n              if (this == bitmapWorkerTask && imageView != null) {\n                  imageView.setImageBitmap(bitmap);\n              }\n          }\n      }\n  }\n  ```\n\n  应用与listView和GridView等，循环利用子视图的控件，只要在设置ImageView的地方调用loadBitmap方法即可。如GridView的`getView()`中。\n\n#### 3、缓存Bitmap\n\n在List View或GridView控件场景中，可能需要大量图片展示，而且存在图片复用现象，此时就需要用到缓存，以提高效能和用户体验。\n\n- ##### 使用内存缓存（Use a Memory Cache）\n\n  使用内存缓存实现以_空间换时间_，提高速度。`LruCache`类用于缓存Bitmaps，其使用强引用`LinkedHashMap`保存最近引用对象，在缓存超出设置大小时候剔除最近最少使用的对象。\n\n  > **注意：**以前多使用`软引用`或`弱引用`但是现在并不推荐，由于Android版本的GC频率增高，引用效率也大为降低。\n\n  为LruCache设置合适的大小，考虑一下因素：\n\n  - 应用剩余可用内存大小\n  - 同时显示图像数量，以及预加载图片数量\n  - 设备屏幕尺寸与密度\n  - 图像尺寸、类型\n  - 图像被访问的频率高低\n  - 显示图像的质量和数量的平衡\n\n  以上因素都需要具体分析，如下创建一个Bitmap的LruCache的示例：\n\n  ```java\n  private LruCache<String, Bitmap> mMemoryCache;\n\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n      ...\n      // 获取应用VM最大可用内存\n      final int maxMemory = (int) (Runtime.getRuntime().maxMemory() / 1024);\n\n      // 使用可用内存的1/8来缓存\n      final int cacheSize = maxMemory / 8;\n  \t//建立LruCache缓存对象\n      mMemoryCache = new LruCache<String, Bitmap>(cacheSize) {\n          @Override\n          protected int sizeOf(String key, Bitmap bitmap) {\n              // 缓存以KB为单位计算，而非对象item个数\n              return bitmap.getByteCount() / 1024;\n          }\n      };\n      ...\n  }\n  //加入bitmap对象到lrucache\n  public void addBitmapToMemoryCache(String key, Bitmap bitmap) {\n      if (getBitmapFromMemCache(key) == null) {\n          mMemoryCache.put(key, bitmap);\n      }\n  }\n  //从lrucache获取bitmap缓存\n  public Bitmap getBitmapFromMemCache(String key) {\n      return mMemoryCache.get(key);\n  }\n  ```\n\n  > **Note:**在上面的例子中, 有1/8的内存空间被用作缓存。 这意味着在常见的设备上（hdpi），最少大概有4MB的缓存空间（32/8）。如果一个填满图片的GridView控件放置在800x480像素的手机屏幕上，大概会花费1.5MB的缓存空间（800x480x4 bytes），因此缓存的容量大概可以缓存2.5页的图片内容。\n\n  加入缓存的bitmap亦是已经优化过的图像：\n\n  ```java\n  class BitmapWorkerTask extends AsyncTask<Integer, Void, Bitmap> {\n      ...\n      //异步线程解码图像\n      @Override\n      protected Bitmap doInBackground(Integer... params) {\n        //缩放图像\n          final Bitmap bitmap = decodeSampledBitmapFromResource(\n                  getResources(), params[0], 100, 100));\n        //添加到lrucache缓存\n          addBitmapToMemoryCache(String.valueOf(params[0]), bitmap);\n          return bitmap;\n      }\n      ...\n  }\n  ```\n\n- ##### 使用磁盘缓存（Use a Disk Cache）\n\n  使用内存作为缓存虽然有较高的速度，但也可能因为应用被后台化，系统资源不足，亦或者过于大量的图像加载，而导致效果不佳，体验不好。因而可以使用磁盘缓存，需要异步处理，避免ANR。\n\n  > **Note:**如果图像过于频繁访问，可以使用`ContentProvider`更为合适。\n\n  如下示例`DiskLruCache`为Android源码基础上优化的：\n\n  ```java\n  private DiskLruCache mDiskLruCache;//DiskLruCache对象\n  private final Object mDiskCacheLock = new Object();//常量化同步锁\n  private boolean mDiskCacheStarting = true;//是否开启缓存\n  private static final int DISK_CACHE_SIZE = 1024 * 1024 * 10; // 10MB\n  private static final String DISK_CACHE_SUBDIR = \"thumbnails\";//缓存文件夹\n\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n      ...\n      // 初始化内存缓存\n      ...\n      // 后台线程初始化磁盘缓存\n      File cacheDir = getDiskCacheDir(this, DISK_CACHE_SUBDIR);//从磁盘加载出缓存文件\n      new InitDiskCacheTask().execute(cacheDir);//异步开始加载到缓存文件\n      ...\n  }\n  //内部类，初始化磁盘加载task\n  class InitDiskCacheTask extends AsyncTask<File, Void, Void> {\n      @Override\n      protected Void doInBackground(File... params) {\n          synchronized (mDiskCacheLock) {//同步锁\n              File cacheDir = params[0];//缓存文件\n              mDiskLruCache = DiskLruCache.open(cacheDir, DISK_CACHE_SIZE);\n              mDiskCacheStarting = false; //完成初始化磁盘加载\n              mDiskCacheLock.notifyAll(); //唤起其他休眠线程\n          }\n          return null;\n      }\n  }\n  //异步加载图片的task，\n  class BitmapWorkerTask extends AsyncTask<Integer, Void, Bitmap> {\n      ...\n      // 解码图像\n      @Override\n      protected Bitmap doInBackground(Integer... params) {\n          final String imageKey = String.valueOf(params[0]);\n\n          //后台线程检查磁盘缓存\n          Bitmap bitmap = getBitmapFromDiskCache(imageKey);\n\n          if (bitmap == null) { // 磁盘缓存没有所需图像\n              // 正常途径加载\n              final Bitmap bitmap = decodeSampledBitmapFromResource(\n                      getResources(), params[0], 100, 100));\n          }\n\n          //并将优化后的图像加入磁盘缓存\n          addBitmapToCache(imageKey, bitmap);\n\n          return bitmap;\n      }\n      ...\n  }\n  //加入磁盘缓存\n  public void addBitmapToCache(String key, Bitmap bitmap) {\n      // 先加入内存缓存\n      if (getBitmapFromMemCache(key) == null) {\n          mMemoryCache.put(key, bitmap);\n      }\n\n      // 然后加入到磁盘缓存\n      synchronized (mDiskCacheLock) {\n          if (mDiskLruCache != null && mDiskLruCache.get(key) == null) {\n              mDiskLruCache.put(key, bitmap);\n          }\n      }\n  }\n  //从磁盘缓存获取图像\n  public Bitmap getBitmapFromDiskCache(String key) {\n      synchronized (mDiskCacheLock) {//同步获取锁\n          // 等待后台线程获取磁盘缓存\n          while (mDiskCacheStarting) {\n              try {\n                  mDiskCacheLock.wait();\n              } catch (InterruptedException e) {}\n          }\n          if (mDiskLruCache != null) {\n              return mDiskLruCache.get(key);\n          }\n      }\n      return null;\n  }\n\n  // 为特定的app创建唯一的子文件夹，优先使用外部sd卡，若没有，就使用内部sd卡\n  public static File getDiskCacheDir(Context context, String uniqueName) {\n      // 检查是否有外部存储，否则用内部存储\n      final String cachePath =\n              Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState()) ||\n                      !isExternalStorageRemovable() ? getExternalCacheDir(context).getPath() :\n                              context.getCacheDir().getPath();\n\n      return new File(cachePath + File.separator + uniqueName);\n  }\n  ```\n\n  > **注意：**如上使用==同步锁==是为了防止在后台异步I/O操作时候，错误读取。\n\n  内存缓存检查可以在UI线程操作，而磁盘缓存需要在后台线程。\n\n- ##### 处理配置改变（Handle Configuration Changes）\n\n  Android的配置信息发生变化，Activity可能会随之变化、销毁重建。平滑恢复原有图像，创造良好用户体验，`setRetainInstance(true)`保留的一个`Fragement`实例可以将缓存重新附着与Activity上。\n\n  ```java\n  private LruCache<String, Bitmap> mMemoryCache;\n\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n      ...\n        //RetainFragment\n      RetainFragment retainFragment =\n              RetainFragment.findOrCreateRetainFragment(getFragmentManager());\n    //获取缓存对象  \n    mMemoryCache = retainFragment.mRetainedCache;\n      if (mMemoryCache == null) {\n          mMemoryCache = new LruCache<String, Bitmap>(cacheSize) {\n              ... // 初始化缓存\n          }\n          retainFragment.mRetainedCache = mMemoryCache;\n      }\n      ...\n  }\n  //自定义内部类Fragment，用于存储缓存对象？？\n  class RetainFragment extends Fragment {\n      private static final String TAG = \"RetainFragment\";\n      public LruCache<String, Bitmap> mRetainedCache;\n\n      public RetainFragment() {}\n\n      public static RetainFragment findOrCreateRetainFragment(FragmentManager fm) {\n          RetainFragment fragment = (RetainFragment) fm.findFragmentByTag(TAG);\n          if (fragment == null) {\n              fragment = new RetainFragment();\n              fm.beginTransaction().add(fragment, TAG).commit();\n          }\n          return fragment;\n      }\n\n      @Override\n      public void onCreate(Bundle savedInstanceState) {\n          super.onCreate(savedInstanceState);\n          setRetainInstance(true);\n      }\n  }\n  ```\n\n#### 4、管理Bitmap的内存\n\n关于Bitmap内存管理了解两点：1、Android2.3之后GC回收并发执行，内存不引用，会被立即回收。2、Android3.0以后bitmap引用和数据一同存放在`Dalvik堆`内存中。\n\n- ##### Android2.3以下版本的内存管理\n\n  推荐使用`recycle()`方法，低版本Android单线程GC。使用引用计数法：\n\n  ```java\n  private int mCacheRefCount=0;//引用计数\n  private int mDisplayRefCount = 0;//引用计数\n  ...\n  //通知drawable显示状态发生改变，drawable引用计数来决定引用状态和显示\n  public void setIsDisplayed(boolean isDisplayed) {\n      synchronized (this) {\n          if (isDisplayed) {\n              mDisplayRefCount++;\n              mHasBeenDisplayed = true;\n          } else {\n              mDisplayRefCount--;\n          }\n      }\n      // Check to see if recycle() can be called.\n      checkState();\n  }\n  // Notify the drawable that the cache state has changed.\n  // Keep a count to determine when the drawable is no longer being cached.\n  public void setIsCached(boolean isCached) {\n      synchronized (this) {\n          if (isCached) {\n              mCacheRefCount++;\n          } else {\n              mCacheRefCount--;\n          }\n      }\n      // Check to see if recycle() can be called.\n      checkState();\n  }\n\n  private synchronized void checkState() {\n      // If the drawable cache and display ref counts = 0, and this drawable\n      // has been displayed, then recycle.\n      if (mCacheRefCount <= 0 && mDisplayRefCount <= 0 && mHasBeenDisplayed\n              && hasValidBitmap()) {\n          getBitmap().recycle();\n      }\n  }\n  private synchronized boolean hasValidBitmap() {\n      Bitmap bitmap = getBitmap();\n      return bitmap != null && !bitmap.isRecycled();\n  }\n  ```\n\n- ##### Android3.0以上版本内存管理\n\n  API 11引入`BitmapFactory.Options.inBitmap`使Bitmap在加载时候可以重中已存在的，但是大小一样的位图（< API 19时候）。\n\n- 保存Bitmap以备复用\n\n  android3.0以上，bitmap从L如Cache移除时，Bitmap的软引用会被村房子啊Hashset中，以便`inBitmap`复用。\n\n  ```java\n  Set<SoftReference<Bitmap>> mReusableBitmaps;\n  private LruCache<String, BitmapDrawable> mMemoryCache;\n\n  // If you're running on Honeycomb or newer, create a\n  // synchronized HashSet of references to reusable bitmaps.\n  if (Utils.hasHoneycomb()) {\n      mReusableBitmaps =\n              Collections.synchronizedSet(new HashSet<SoftReference<Bitmap>>());\n  }\n\n  mMemoryCache = new LruCache<String, BitmapDrawable>(mCacheParams.memCacheSize) {\n\n      // Notify the removed entry that is no longer being cached.\n      @Override\n      protected void entryRemoved(boolean evicted, String key,\n              BitmapDrawable oldValue, BitmapDrawable newValue) {\n          if (RecyclingBitmapDrawable.class.isInstance(oldValue)) {\n              // The removed entry is a recycling drawable, so notify it\n              // that it has been removed from the memory cache.\n              ((RecyclingBitmapDrawable) oldValue).setIsCached(false);\n          } else {\n              // The removed entry is a standard BitmapDrawable.\n              if (Utils.hasHoneycomb()) {\n                  // We're running on Honeycomb or later, so add the bitmap\n                  // to a SoftReference set for possible use with inBitmap later.\n                  mReusableBitmaps.add\n                          (new SoftReference<Bitmap>(oldValue.getBitmap()));\n              }\n          }\n      }\n  ....\n  }\n  ```\n\n- ##### 使用已经存在的Bitmap\n\n  ```java\n  public static Bitmap decodeSampledBitmapFromFile(String filename,\n          int reqWidth, int reqHeight, ImageCache cache) {\n\n      final BitmapFactory.Options options = new BitmapFactory.Options();\n      ...\n      BitmapFactory.decodeFile(filename, options);\n      ...\n\n      // If we're running on Honeycomb or newer, try to use inBitmap.\n      if (Utils.hasHoneycomb()) {\n          addInBitmapOptions(options, cache);\n      }\n      ...\n      return BitmapFactory.decodeFile(filename, options);\n  }\n  //查找适合且可复用的bitmap，设置到inBitmap的属性值，\n  private static void addInBitmapOptions(BitmapFactory.Options options,\n          ImageCache cache) {\n      // inBitmap only works with mutable bitmaps, so force the decoder to\n      // return mutable bitmaps.\n      options.inMutable = true;\n\n      if (cache != null) {\n          // Try to find a bitmap to use for inBitmap.\n          Bitmap inBitmap = cache.getBitmapFromReusableSet(options);\n\n          if (inBitmap != null) {\n              // If a suitable bitmap has been found, set it as the value of\n              // inBitmap.\n              options.inBitmap = inBitmap;\n          }\n      }\n  }\n\n  // This method iterates through the reusable bitmaps, looking for one\n  // to use for inBitmap:\n  protected Bitmap getBitmapFromReusableSet(BitmapFactory.Options options) {\n          Bitmap bitmap = null;\n\n      if (mReusableBitmaps != null && !mReusableBitmaps.isEmpty()) {\n          synchronized (mReusableBitmaps) {\n              final Iterator<SoftReference<Bitmap>> iterator\n                      = mReusableBitmaps.iterator();\n              Bitmap item;\n\n              while (iterator.hasNext()) {\n                  item = iterator.next().get();\n\n                  if (null != item && item.isMutable()) {\n                      // Check to see it the item can be used for inBitmap.\n                      if (canUseForInBitmap(item, options)) {\n                          bitmap = item;\n\n                          // Remove from reusable set so it can't be used again.\n                          iterator.remove();\n                          break;\n                      }\n                  } else {\n                      // Remove from the set if the reference has been cleared.\n                      iterator.remove();\n                  }\n              }\n          }\n      }\n      return bitmap;\n  }\n  ```\n\n  判断Bitmap是否符合inBitmap的要求：\n\n  ```java\n  static boolean canUseForInBitmap(\n          Bitmap candidate, BitmapFactory.Options targetOptions) {\n\n      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n          // From Android 4.4 (KitKat) onward we can re-use if the byte size of\n          // the new bitmap is smaller than the reusable bitmap candidate\n          // allocation byte count.\n          int width = targetOptions.outWidth / targetOptions.inSampleSize;\n          int height = targetOptions.outHeight / targetOptions.inSampleSize;\n          int byteCount = width * height * getBytesPerPixel(candidate.getConfig());\n          return byteCount <= candidate.getAllocationByteCount();\n      }\n\n      // On earlier versions, the dimensions must match exactly and the inSampleSize must be 1\n      return candidate.getWidth() == targetOptions.outWidth\n              && candidate.getHeight() == targetOptions.outHeight\n              && targetOptions.inSampleSize == 1;\n  }\n\n  /**\n   * A helper function to return the byte usage per pixel of a bitmap based on its configuration.\n   */\n  static int getBytesPerPixel(Config config) {\n      if (config == Config.ARGB_8888) {\n          return 4;\n      } else if (config == Config.RGB_565) {\n          return 2;\n      } else if (config == Config.ARGB_4444) {\n          return 2;\n      } else if (config == Config.ALPHA_8) {\n          return 1;\n      }\n      return 1;\n  }\n  ```\n\n#### 5、在UI上显示Bitmap\n\n本节学习如何综合使用后台线程与缓存机制，将图像加载到ViewPager或Grid View控件上，并处理并发与配置改变的问题。\n\n- ##### 实现加载图片到View Pager\n\n  `Swipe View Pattern`是滑动显示的设计模型。可通过`PagerAdapter`与`ViewPager`控件实现该效果。而`FragmentStatePagerAdapter`更为合适，因为其能在Fragment状态改变时保存状态值。减少内存消耗。少量图片的话，`PagerAdapter与FragmentPagerAdapter`都可。\n\n  ```java\n  public class ImageDetailActivity extends FragmentActivity {\n      public static final String EXTRA_IMAGE = \"extra_image\";\n\n      private ImagePagerAdapter mAdapter;//adapter\n      private ViewPager mPager;//viewpager\n\n      // 用于传递给viewpager 的adapter的图片数据资源\n      public final static Integer[] imageResIds = new Integer[] {\n              R.drawable.sample_image_1, R.drawable.sample_image_2, R.drawable.sample_image_3,\n              R.drawable.sample_image_4, R.drawable.sample_image_5, R.drawable.sample_image_6,\n              R.drawable.sample_image_7, R.drawable.sample_image_8, R.drawable.sample_image_9};\n\n      @Override\n      public void onCreate(Bundle savedInstanceState) {\n          super.onCreate(savedInstanceState);\n          setContentView(R.layout.image_detail_pager); // 就一个viewpager\n  \t\t//初始化控件，并绑定适配器\n          mAdapter = new ImagePagerAdapter(getSupportFragmentManager(), imageResIds.length);\n          mPager = (ViewPager) findViewById(R.id.pager);\n          mPager.setAdapter(mAdapter);\n      }\n\n      public static class ImagePagerAdapter extends FragmentStatePagerAdapter {\n          private final int mSize;\n  \t\t//\n          public ImagePagerAdapter(FragmentManager fm, int size) {\n              super(fm);\n              mSize = size;\n          }\n\n          @Override\n          public int getCount() {\n              return mSize;\n          }\n  \t\t//返回fragment对象\n          @Override\n          public Fragment getItem(int position) {\n              return ImageDetailFragment.newInstance(position);\n          }\n      }\n  }\n  ```\n\n  Fragment里面包含Image View控件\n\n  ```java\n  public class ImageDetailFragment extends Fragment {\n      private static final String IMAGE_DATA_EXTRA = \"resId\";\n      private int mImageNum;//图像数目\n      private ImageView mImageView;//image view控件\n  \t//构造函数，接收图片数目参数\n      static ImageDetailFragment newInstance(int imageNum) {\n          final ImageDetailFragment f = new ImageDetailFragment();\n          final Bundle args = new Bundle();\n          args.putInt(IMAGE_DATA_EXTRA, imageNum);\n          f.setArguments(args);\n          return f;\n      }\n\n      // Empty constructor, required as per Fragment docs\n      public ImageDetailFragment() {}\n\n      @Override\n      public void onCreate(Bundle savedInstanceState) {\n          super.onCreate(savedInstanceState);\n          mImageNum = getArguments() != null ? getArguments().getInt(IMAGE_DATA_EXTRA) : -1;\n      }\n\n      @Override\n      public View onCreateView(LayoutInflater inflater, ViewGroup container,\n              Bundle savedInstanceState) {\n          // image_detail_fragment.xml contains just an ImageView\n          final View v = inflater.inflate(R.layout.image_detail_fragment, container, false);\n          mImageView = (ImageView) v.findViewById(R.id.imageView);\n          return v;\n      }\n\n      @Override\n      public void onActivityCreated(Bundle savedInstanceState) {\n          super.onActivityCreated(savedInstanceState);\n          final int resId = ImageDetailActivity.imageResIds[mImageNum];\n          mImageView.setImageResource(resId); // Load image into ImageView\n      }\n  }\n  ```\n\n  ==**如上方式，可能会阻塞UI线程**==，改用AsyncTask最好：\n\n  ```java\n  public class ImageDetailActivity extends FragmentActivity {\n      ...\n  \t//后台加载图片\n      public void loadBitmap(int resId, ImageView imageView) {\n          mImageView.setImageResource(R.drawable.image_placeholder);\n        //后台执行\n          BitmapWorkerTask task = new BitmapWorkerTask(mImageView);\n          task.execute(resId);\n      }\n\n      ... // include BitmapWorkerTask class\n  }\n\n  public class ImageDetailFragment extends Fragment {\n      ...\n\n      @Override\n      public void onActivityCreated(Bundle savedInstanceState) {\n          super.onActivityCreated(savedInstanceState);\n          if (ImageDetailActivity.class.isInstance(getActivity())) {\n              final int resId = ImageDetailActivity.imageResIds[mImageNum];\n              //调用上面的后台加载图片\n              ((ImageDetailActivity) getActivity()).loadBitmap(resId, mImageView);\n          }\n      }\n  }\n  ```\n\n  后台的操作可以更为合理，加载并缓存图像\n\n  ```java\n  public class ImageDetailActivity extends FragmentActivity {\n      ...\n      private LruCache mMemoryCache;\n      @Override\n      public void onCreate(Bundle savedInstanceState) {\n          ...\n          // initialize LruCache as per Use a Memory Cache section\n      }\n      public void loadBitmap(int resId, ImageView imageView) {\n          final String imageKey = String.valueOf(resId);\n\n          final Bitmap bitmap = mMemoryCache.get(imageKey);\n          if (bitmap != null) {\n              mImageView.setImageBitmap(bitmap);\n          } else {\n              mImageView.setImageResource(R.drawable.image_placeholder);\n              BitmapWorkerTask task = new BitmapWorkerTask(mImageView);\n              task.execute(resId);\n          }\n      }\n      ... // include updated BitmapWorkerTask from Use a Memory Cache section\n  }\n  ```\n\n- ##### 实现加载图片到GridView\n\n  如下场景，Fragment内置Grid View，item是Image View：\n\n  ```java\n  public class ImageGridFragment extends Fragment implements AdapterView.OnItemClickListener {\n      private ImageAdapter mAdapter;\n\n      //静态加载的图片资源，用于适配器\n      public final static Integer[] imageResIds = new Integer[] {\n              R.drawable.sample_image_1, R.drawable.sample_image_2, R.drawable.sample_image_3,\n              R.drawable.sample_image_4, R.drawable.sample_image_5, R.drawable.sample_image_6,\n              R.drawable.sample_image_7, R.drawable.sample_image_8, R.drawable.sample_image_9};\n\n      // Empty constructor as per Fragment docs\n      public ImageGridFragment() {}\n\n      @Override\n      public void onCreate(Bundle savedInstanceState) {\n          super.onCreate(savedInstanceState);\n          mAdapter = new ImageAdapter(getActivity());\n      }\n\n      @Override\n      public View onCreateView(\n              LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        //初始化控件，并绑定适配器，注册监听  \n        final View v = inflater.inflate(R.layout.image_grid_fragment, container, false);\n          final GridView mGridView = (GridView) v.findViewById(R.id.gridView);\n          mGridView.setAdapter(mAdapter);\n          mGridView.setOnItemClickListener(this);\n          return v;\n      }\n\n      @Override\n      public void onItemClick(AdapterView parent, View v, int position, long id) {\n          final Intent i = new Intent(getActivity(), ImageDetailActivity.class);\n          i.putExtra(ImageDetailActivity.EXTRA_IMAGE, position);\n          startActivity(i);\n      }\n\n      private class ImageAdapter extends BaseAdapter {\n          private final Context mContext;\n\n          public ImageAdapter(Context context) {\n              super();\n              mContext = context;\n          }\n\n          @Override\n          public int getCount() {\n              return imageResIds.length;\n          }\n\n          @Override\n          public Object getItem(int position) {\n              return imageResIds[position];\n          }\n\n          @Override\n          public long getItemId(int position) {\n              return position;\n          }\n\n          @Override\n          public View getView(int position, View convertView, ViewGroup container) {\n              ImageView imageView;\n              if (convertView == null) { // 判断是否是循环复用的item view，不是的话，需要初始化一些属性。\n                  imageView = new ImageView(mContext);\n                  imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);\n                  imageView.setLayoutParams(new GridView.LayoutParams(\n                          LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n              } else {\n                  imageView = (ImageView) convertView;\n              }\n          //请注意下面的代码，如此可能会耗时，阻塞UI\n          imageView.setImageResource(imageResIds[position]); // Load image into ImageView\n          return imageView;\n      }\n  }\n  ```\n\n  考虑UI的可能阻塞，以及GridView引起的并发问题，代码优化如下：\n\n  ```java\n  public class ImageGridFragment extends Fragment implements AdapterView.OnItemClickListener {\n      ...\n\n      private class ImageAdapter extends BaseAdapter {\n          ...\n\n          @Override\n          public View getView(int position, View convertView, ViewGroup container) {\n              ...\n              loadBitmap(imageResIds[position], imageView)\n              return imageView;\n          }\n      }\n  \t//异步加载图像\n      public void loadBitmap(int resId, ImageView imageView) {\n          if (cancelPotentialWork(resId, imageView)) {\n              final BitmapWorkerTask task = new BitmapWorkerTask(imageView);\n              final AsyncDrawable asyncDrawable =\n                      new AsyncDrawable(getResources(), mPlaceHolderBitmap, task);\n              imageView.setImageDrawable(asyncDrawable);\n              task.execute(resId);\n          }\n      }\n  \t//用于绑定到imageView的drawable\n      static class AsyncDrawable extends BitmapDrawable {\n          private final WeakReference bitmapWorkerTaskReference;\n\n          public AsyncDrawable(Resources res, Bitmap bitmap,\n                  BitmapWorkerTask bitmapWorkerTask) {\n              super(res, bitmap);\n              bitmapWorkerTaskReference =\n                  new WeakReference(bitmapWorkerTask);\n          }\n\n          public BitmapWorkerTask getBitmapWorkerTask() {\n              return bitmapWorkerTaskReference.get();\n          }\n      }\n  \t//判断imageview是否已经有加载图像的task\n      public static boolean cancelPotentialWork(int data, ImageView imageView) {\n          final BitmapWorkerTask bitmapWorkerTask = getBitmapWorkerTask(imageView);\n\n          if (bitmapWorkerTask != null) {\n              final int bitmapData = bitmapWorkerTask.data;\n              if (bitmapData != data) {\n                  // Cancel previous task\n                  bitmapWorkerTask.cancel(true);\n              } else {\n                  // The same work is already in progress\n                  return false;\n              }\n          }\n          // No task associated with the ImageView, or an existing task was cancelled\n          return true;\n      }\n  \t//获取图像加载task\n      private static BitmapWorkerTask getBitmapWorkerTask(ImageView imageView) {\n         if (imageView != null) {\n             final Drawable drawable = imageView.getDrawable();\n             if (drawable instanceof AsyncDrawable) {\n                 final AsyncDrawable asyncDrawable = (AsyncDrawable) drawable;\n                 return asyncDrawable.getBitmapWorkerTask();\n             }\n          }\n          return null;\n      }\n\n      ... // include updated BitmapWorkerTask class\n  ```\n\n### 2、使用OpenGL ES显示图像\n\nAndroid平台提供了OpenGL ES接口，帮助我们实现更为丰富的图像显示效果。本章记述OpenGL构建应用的基础知识，包括配置、绘制对象、移动图形以及响应事件。\n\n**注意，不要混用OpenGL ES 1.x版和2.x版本的接口，因为并不通用。**\n\n#### 1、建立OpenGL ES的环境\n\n在应用中使用OpenGL ES来绘制图像，需要给它一个容器。通常实现`GLSurfaceView`做容器和`GLSurfaceView.Renderer`类来控制绘制。`GLSurfaceView`一般用于全屏或者接近全屏的View绘制，若是小范围，可以用`TextureView`。亦或者自定义View继承SurfaceView，但是会费事。\n\n- ##### 在Manifest中声明使用OpenGL ES\n\n  ```xml\n  <uses-feature android.glEsVersion=\"0x00020000\" android.required=\"true\"/>\n  ```\n\n  如果使用图像纹理压缩，则必须在清单中声明支持的压缩格式：\n\n  ```xml\n  <supports-gl-texture android:name=\"GL_OES_compressed_ETC1_RGB8_texture\"/>\n  <supports-gl-texture android:name=\"GL_OES_compressed_paletted_texture\"/>\n  ...\n  ```\n\n  使用OpenGL ES的App可以Activity中使用GLSurfaceView布局。\n\n  ```java\n  //要求api>=8\n  public class OpenGLES20Activity extends Activity {\n\n      private GLSurfaceView mGLView;\n\n      @Override\n      public void onCreate(Bundle savedInstanceState) {\n          super.onCreate(savedInstanceState);\n  \t\t//创建GLSurfaceView对象，设置为Activity布局。\n          mGLView = new MyGLSurfaceView(this);\n          setContentView(mGLView);\n      }\n  }\n  ```\n- ##### 构建一个GLSurfaceView对象\n    GLSurfaceView是一个特殊的view，用于绘制OpenGL ES图像的一个容器。其内部类GLSurfaceView.Renderer用于控制绘制。\n    一般需要继承`GLSurfaceView`来用于自主控制各类触控事件。\n    ```java\n    class MyGLSurfaceView extends GLSurfaceView {\n\n        private final MyGLRenderer mRenderer;\n\n        public MyGLSurfaceView(Context context){\n            super(context);\n\n            // Create an OpenGL ES 2.0 context\n            setEGLContextClientVersion(2);\n\n            mRenderer = new MyGLRenderer();\n\n            // Set the Renderer for drawing on the GLSurfaceView\n            setRenderer(mRenderer);\n            // Render the view only when there is a change in the drawing data\n            //设置此属性的话，除非调用requestRender()，否则GLSurfaceView不会刷新。只当有图像变化才会刷新。\n            setRenderMode(GLSurfaceView.RENDERMODE_WHEN_DIRTY);\n        }\n    }\n    ```\n- ##### 构建一个渲染类\n    `GLSurfaceView.Renderer`被称为渲染器，控制图像绘制。Android可调用：\n\n    - onSurfaceCreated();调用一次，用于创建OpenGL ES环境\n    - onDrawFrame();每次重绘View时调用。\n    - onSurfaceChanged();View的几何形态变化时调用。\n\n    示例：\n    ```java\n    public class MyGLRenderer implements GLSurfaceView.Renderer {\n\n        public void onSurfaceCreated(GL10 unused, EGLConfig config) {\n            // 设置背景框架颜色，此处为黑色，ARGB值\n            GLES20.glClearColor(0.0f, 0.0f, 0.0f, 1.0f);\n        }\n\n        public void onDrawFrame(GL10 unused) {\n            // 重绘背景色\n            GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT);\n        }\n\n        public void onSurfaceChanged(GL10 unused, int width, int height) {\n            GLES20.glViewport(0, 0, width, height);\n        }\n    }\n    ```\n#### 2、定义shapes\n了解了OpenGL ES的基本概念后，便可以学习如何绘制基本图形。\n- 定义一个三角形\n    OpenGL ES允许我们使用三维空间坐标来绘制图形，通常会定义float坐标数组，为了高效此处使用了\n    ByteBuffer：\n    ```java\n    public class Triangle {\n\n        private FloatBuffer vertexBuffer;//浮点数组\n\n        // 数组中含有的坐标点数\n        static final int COORDS_PER_VERTEX = 3;\n        static float triangleCoords[] = {   //坐标点逆时针顺序\n                0.0f,  0.622008459f, 0.0f, // 顶点\n                -0.5f, -0.311004243f, 0.0f, // 左下角\n                0.5f, -0.311004243f, 0.0f  //右下角\n        };\n\n        //设置RGB，Alpha\n        float color[] = { 0.63671875f, 0.76953125f, 0.22265625f, 1.0f };\n\n        public Triangle() {\n            // initialize vertex byte buffer for shape coordinates\n            ByteBuffer bb = ByteBuffer.allocateDirect(\n                    // (number of coordinate values * 4 bytes per float)\n                    triangleCoords.length * 4);\n            // use the device hardware's native byte order\n            bb.order(ByteOrder.nativeOrder());\n\n            // create a floating point buffer from the ByteBuffer\n            vertexBuffer = bb.asFloatBuffer();\n            // add the coordinates to the FloatBuffer\n            vertexBuffer.put(triangleCoords);\n            // set the buffer to read the first coordinate\n            vertexBuffer.position(0);\n        }\n    }\n    ```\n    默认情况下，OpenGL ES会有一个[0,0,0]的三维坐标系。更多的需要参考OpenGL手册。\n- 定义一个矩形\n    如下示例演示通过定义两个三角形来实现一个矩形。\n    ![矩形](第四篇、Android图像与动画/ccw-square.png)\n      ```java\n      //绘制两个三角形，所以使用一个绘制列表来通知OpenGL如何绘制顶点。\n      public class Square {\n\n          private FloatBuffer vertexBuffer;\n          private ShortBuffer drawListBuffer;\n\n          // number of coordinates per vertex in this array\n          static final int COORDS_PER_VERTEX = 3;\n          static float squareCoords[] = {\n                  -0.5f,  0.5f, 0.0f,   // top left\n                  -0.5f, -0.5f, 0.0f,   // bottom left\n                  0.5f, -0.5f, 0.0f,   // bottom right\n                  0.5f,  0.5f, 0.0f }; // top right\n\n          private short drawOrder[] = { 0, 1, 2, 0, 2, 3 }; // order to draw vertices\n\n          public Square() {\n              // initialize vertex byte buffer for shape coordinates\n              ByteBuffer bb = ByteBuffer.allocateDirect(\n              // (# of coordinate values * 4 bytes per float)\n                      squareCoords.length * 4);\n              bb.order(ByteOrder.nativeOrder());\n              vertexBuffer = bb.asFloatBuffer();\n              vertexBuffer.put(squareCoords);\n              vertexBuffer.position(0);\n\n              // initialize byte buffer for the draw list\n              ByteBuffer dlb = ByteBuffer.allocateDirect(\n              // (# of coordinate values * 2 bytes per short)\n                      drawOrder.length * 2);\n              dlb.order(ByteOrder.nativeOrder());\n              drawListBuffer = dlb.asShortBuffer();\n              drawListBuffer.put(drawOrder);\n              drawListBuffer.position(0);\n          }\n      }\n      ```\n#### 3、绘制shapes\n\n如上小节只是介绍了如何定义一个shape图形，本节将介绍如何绘制出需要的图形。出于内存和效率考虑，\n除非加载的图形变化，一般都在`onSurfaceCreated()`中初始化shape图形。\n- ##### 初始化图形\n    ```java\n    public class MyGLRenderer implements GLSurfaceView.Renderer {\n\n        ...\n        private Triangle mTriangle;\n        private Square   mSquare;\n\n        public void onSurfaceCreated(GL10 unused, EGLConfig config) {\n            ...\n\n            // initialize a triangle\n            mTriangle = new Triangle();\n            // initialize a square\n            mSquare = new Square();\n        }\n        ...\n    }\n    ```\n\n    使用OpenGL ES 绘制一个定义好的图形，需要如下步骤：\n\n    - 顶点着色器（Vertex Shader）：用于渲染顶点的OpenGL ES 代码\n    - 片段着色器（Fragment Shader）：使用颜色和纹理渲染图形表面的OpenGL ES 代码\n    - 程式（Program）： OpenGL ES对象，包含各类着色器等。\n\n    示例:\n    ```java\n    private final String vertexShaderCode =\n        \"attribute vec4 vPosition;\" +\n        \"void main() {\" +\n        \"  gl_Position = vPosition;\" +\n        \"}\";\n\n    private final String fragmentShaderCode =\n        \"precision mediump float;\" +\n        \"uniform vec4 vColor;\" +\n        \"void main() {\" +\n        \"  gl_FragColor = vColor;\" +\n        \"}\";\n\n    ...\n    ```\n    着色器包含OpenGL Shading Language（GLSL）代码，需要先编译，\n    ```java\n    public static int loadShader(int type, String shaderCode){\n\n        // create a vertex shader type (GLES20.GL_VERTEX_SHADER)\n        // or a fragment shader type (GLES20.GL_FRAGMENT_SHADER)\n        int shader = GLES20.glCreateShader(type);\n\n        // add the source code to the shader and compile it\n        GLES20.glShaderSource(shader, shaderCode);\n        GLES20.glCompileShader(shader);\n\n        return shader;\n    }\n    ```\n- ##### 画图\n    为了绘制你的图形，你必须编译着色器代码，将它们添加至一个OpenGL ES Program对象中，然后执行链接。\n    在你的绘制对象的构造函数里做这些事情，这样上述步骤就只用执行一次。\n\n    > Note：编译OpenGL ES着色器及链接操作对于CPU周期和处理时间而言，消耗是巨大的，所以你应该避免重复执行这些事情。\n    > 如果在执行期间不知道着色器的内容，那么你应该在构建你的应用时，确保它们只被创建了一次，并且缓存以备后续使用。\n\n    ```java\n    public class Triangle() {\n        ...\n\n         private final int mProgram;\n\n        public Triangle() {\n            ...\n\n            int vertexShader = MyGLRenderer.loadShader(GLES20.GL_VERTEX_SHADER,\n                                                vertexShaderCode);\n            int fragmentShader = MyGLRenderer.loadShader(GLES20.GL_FRAGMENT_SHADER,\n                                                fragmentShaderCode);\n\n            // create empty OpenGL ES Program\n            mProgram = GLES20.glCreateProgram();\n\n            // add the vertex shader to program\n            GLES20.glAttachShader(mProgram, vertexShader);\n            // add the fragment shader to program\n            GLES20.glAttachShader(mProgram, fragmentShader);\n\n            // creates OpenGL ES program executables\n            GLES20.glLinkProgram(mProgram);\n        }\n    }\n    ```\n    绘制属性会根据图形而变化，就需要将变化逻辑一同写入绘制参数，\n    ```java\n    private int mPositionHandle;\n    private int mColorHandle;\n\n    private final int vertexCount = triangleCoords.length / COORDS_PER_VERTEX;\n    private final int vertexStride = COORDS_PER_VERTEX * 4; // 4 bytes per vertex\n\n    public void draw() {\n        // Add program to OpenGL ES environment\n        GLES20.glUseProgram(mProgram);\n\n        // get handle to vertex shader's vPosition member\n        mPositionHandle = GLES20.glGetAttribLocation(mProgram, \"vPosition\");\n\n        // Enable a handle to the triangle vertices\n        GLES20.glEnableVertexAttribArray(mPositionHandle);\n\n        // Prepare the triangle coordinate data\n        GLES20.glVertexAttribPointer(mPositionHandle, COORDS_PER_VERTEX,\n                                    GLES20.GL_FLOAT, false,\n                                    vertexStride, vertexBuffer);\n\n        // get handle to fragment shader's vColor member\n        mColorHandle = GLES20.glGetUniformLocation(mProgram, \"vColor\");\n\n        // Set color for drawing the triangle\n        GLES20.glUniform4fv(mColorHandle, 1, color, 0);\n\n        // Draw the triangle\n        GLES20.glDrawArrays(GLES20.GL_TRIANGLES, 0, vertexCount);\n\n        // Disable vertex array\n        GLES20.glDisableVertexAttribArray(mPositionHandle);\n    }\n    ```\n    如此只需要在渲染器的`onDrawFrame()`中调用上面的`onDraw()`方法即可。\n    ![绘制图形](第四篇、Android图像与动画/ogl-triangle.png)\n#### 3、运用投影和相机视角\n在OpenGL ES 环境中，利用投影和相机视角可以将图像更为逼真的显示。\n1. 投影(Projection)：此类变化基于GLSurfaceView的长宽。\n2. 相机视角(Camera View):此类变化基于OpenGL ES 的虚拟相机。\n\n- ##### 定义一个投影\n  投影变换的数据计算在GLSurfaceView.Render类中的onSurfaceChanged()中执行。\n```java\n// mMVPMatrix is an abbreviation for \"Model View Projection Matrix\"\nprivate final float[] mMVPMatrix = new float[16];\nprivate final float[] mProjectionMatrix = new float[16];\nprivate final float[] mViewMatrix = new float[16];\n\n@Override\npublic void onSurfaceChanged(GL10 unused, int width, int height) {\n    GLES20.glViewport(0, 0, width, height);\n\n    float ratio = (float) width / height;\n\n    // this projection matrix is applied to object coordinates\n    // in the onDrawFrame() method\n    Matrix.frustumM(mProjectionMatrix, 0, -ratio, ratio, -1, 1, 3, 7);\n}\n```\n> 若是绘图只是用投影，会让图像显得空旷，最好结合相机视角来绘制。\n\n- ##### 定义一个相机视角\n  使用`Matrix.setLookAtM()`来换算计算，再结合如上投影换算：\n```java\n@Override\npublic void onDrawFrame(GL10 unused) {\n    ...\n    // Set the camera position (View matrix)\n    Matrix.setLookAtM(mViewMatrix, 0, 0, 0, -3, 0f, 0f, 0f, 0f, 1.0f, 0.0f);\n\n    // Calculate the projection and view transformation\n    Matrix.multiplyMM(mMVPMatrix, 0, mProjectionMatrix, 0, mViewMatrix, 0);\n\n    // Draw shape\n    mTriangle.draw(mMVPMatrix);\n}\n```\n将上一节的三角形使用投影和视角绘制：\n```java\npublic class Triangle {\n    //为顶点添加渲染着色器，Matrix\n    private final String vertexShaderCode =\n        // This matrix member variable provides a hook to manipulate\n        // the coordinates of the objects that use this vertex shader\n        \"uniform mat4 uMVPMatrix;\" +\n        \"attribute vec4 vPosition;\" +\n        \"void main() {\" +\n        // the matrix must be included as a modifier of gl_Position\n        // Note that the uMVPMatrix factor *must be first* in order\n        // for the matrix multiplication product to be correct.\n        \"  gl_Position = uMVPMatrix * vPosition;\" +\n        \"}\";\n\n    // Use to access and set the view transformation\n    private int mMVPMatrixHandle;\n\n    ...\n}\n```\n修改`onDraw ()`方法\n```java\npublic void draw(float[] mvpMatrix) { // pass in the calculated transformation matrix\n    ...\n\n    // get handle to shape's transformation matrix\n    mMVPMatrixHandle = GLES20.glGetUniformLocation(mProgram, \"uMVPMatrix\");\n\n    // Pass the projection and view transformation to the shader\n    GLES20.glUniformMatrix4fv(mMVPMatrixHandle, 1, false, mvpMatrix, 0);\n\n    // Draw the triangle\n    GLES20.glDrawArrays(GLES20.GL_TRIANGLES, 0, vertexCount);\n\n    // Disable vertex array\n    GLES20.glDisableVertexAttribArray(mPositionHandle);\n}\n```\n效果如图：![视角绘图](第四篇、Android图像与动画/ogl-triangle-projected.png)\n#### 4、添加移动\nOpenGL 区别于Android的canvas和Drawable图形框架，在于其提供的特殊功能，如3D效果等。\n- ##### 旋转图像\n  在OpenGL ES2.0中新增一个变化矩阵，结合之前的投影和视角，来绘制图形移动。\n```java\nprivate float[] mRotationMatrix = new float[16];\npublic void onDrawFrame(GL10 gl) {\n    float[] scratch = new float[16];\n\n    ...\n\n    // Create a rotation transformation for the triangle\n    long time = SystemClock.uptimeMillis() % 4000L;\n    float angle = 0.090f * ((int) time);\n    Matrix.setRotateM(mRotationMatrix, 0, angle, 0, 0, -1.0f);\n\n    // Combine the rotation matrix with the projection and camera view\n    // Note that the mMVPMatrix factor *must be first* in order\n    // for the matrix multiplication product to be correct.\n    Matrix.multiplyMM(scratch, 0, mMVPMatrix, 0, mRotationMatrix, 0);\n\n    // Draw triangle\n    mTriangle.draw(scratch);\n}\n```\n> **Note:** 不要将`GLSurfaceView.RENDERMODE_WHEN_DIRTY`注释掉，否则就可能不会移动，也不会渲染。\n\n- ##### 启用连续渲染\n```java\npublic MyGLSurfaceView(Context context) {\n    ...\n    // Render the view only when there is a change in the drawing data.\n    // To allow the triangle to rotate automatically, this line is commented out:\n    //setRenderMode(GLSurfaceView.RENDERMODE_WHEN_DIRTY);\n}\n```\n#### 5、响应触摸事件\n炫酷的图形图像，也可以和用户有良好的交互体验。重写`GLSurfaceView`类的`onTouchEvent()`方法\n来响应触摸事件。\n- ##### 注册监听\n  在重写`onTouchEvent()`方法后，想要完成事件相应，就需要注册监听。\n```java\nprivate final float TOUCH_SCALE_FACTOR = 180.0f / 320;\nprivate float mPreviousX;\nprivate float mPreviousY;\n//复写onTouchEvent方法，本文用于响应MotionEvent.ACTION_MOVE事件\n@Override\npublic boolean onTouchEvent(MotionEvent e) {\n    // MotionEvent reports input details from the touch screen\n    // and other input controls. In this case, you are only\n    // interested in events where the touch position changed.\n\n    float x = e.getX();\n    float y = e.getY();\n\n    switch (e.getAction()) {\n        case MotionEvent.ACTION_MOVE:\n\n            float dx = x - mPreviousX;\n            float dy = y - mPreviousY;\n\n            // reverse direction of rotation above the mid-line\n            if (y > getHeight() / 2) {\n              dx = dx * -1 ;\n            }\n\n            // reverse direction of rotation to left of the mid-line\n            if (x < getWidth() / 2) {\n              dy = dy * -1 ;\n            }\n\n            mRenderer.setAngle(\n                    mRenderer.getAngle() +\n                    ((dx + dy) * TOUCH_SCALE_FACTOR));\n            requestRender();\n    }\n\n    mPreviousX = x;\n    mPreviousY = y;\n    return true;\n}\n```\n如上代码调用`requestRender()`来刷新绘制，通过`setRenderMode()`来提高效率，只有变化时候才绘制：\n```java\npublic MyGLSurfaceView(Context context) {\n    ...\n    // Render the view only when there is a change in the drawing data\n    setRenderMode(GLSurfaceView.RENDERMODE_WHEN_DIRTY);\n}\n```\n- ##### 公开变量旋转角度\n  旋转角度的变量需要public，包括get和set方法\n```java\npublic class MyGLRenderer implements GLSurfaceView.Renderer {\n    ...\n\n    public volatile float mAngle;\n\n    public float getAngle() {\n        return mAngle;\n    }\n\n    public void setAngle(float angle) {\n        mAngle = angle;\n    }\n}\n```\n然后在调用绘制图形的地方，填入角度值，启动旋转。\n```java\npublic void onDrawFrame(GL10 gl) {\n    ...\n    float[] scratch = new float[16];\n\n    // Create a rotation for the triangle\n    // long time = SystemClock.uptimeMillis() % 4000L;\n    // float angle = 0.090f * ((int) time);\n    Matrix.setRotateM(mRotationMatrix, 0, mAngle, 0, 0, -1.0f);\n\n    // Combine the rotation matrix with the projection and camera view\n    // Note that the mMVPMatrix factor *must be first* in order\n    // for the matrix multiplication product to be correct.\n    Matrix.multiplyMM(scratch, 0, mMVPMatrix, 0, mRotationMatrix, 0);\n\n    // Draw triangle\n    mTriangle.draw(scratch);\n}\n```\n滑动效果：![滑动效果](第四篇、Android图像与动画/ogl-triangle-touch.png)\n\n### 3、添加动画\n动画效果可以让我们的App更为炫酷，但是也要在适当的地方和时机使用它。本章主要介绍Android的一些动画效果实现。\n#### 1、View间渐变\n渐变动画通常用于View的切换，淡入淡出效果。[渐变动画](http://hukai.me/android-training-course-in-chinese/animations/anim_crossfade.mp4)\n- ##### 创建View\n  示例，一个进度圈和可滑动的view\n```xml\n<FrameLayout xmlns:android=\"/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n    <ScrollView xmlns:android=\"/apk/res/android\"\n        android:id=\"@+id/content\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\">\n\n        <TextView style=\"?android:textAppearanceMedium\"\n            android:lineSpacingMultiplier=\"1.2\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"@string/lorem_ipsum\"\n            android:padding=\"16dp\" />\n\n    </ScrollView>\n\n    <ProgressBar android:id=\"@+id/loading_spinner\"\n        style=\"?android:progressBarStyleLarge\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_gravity=\"center\" />\n\n</FrameLayout>\n```\n- ##### view设置动画\n  为上面的view设置动画效果，步骤如下：\n\n1. 设置view的成员变量，以备后用。\n2. 先设置淡入的View的visible为gone\n3. 将`config_shortAnimTime`系统属性暂存到成员变量。\n\n示例：\n```java\npublic class CrossfadeActivity extends Activity {\n\n    private View mContentView;\n    private View mLoadingView;\n    private int mShortAnimationDuration;\n\n    ...\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_crossfade);\n\n        mContentView = findViewById(R.id.content);\n        mLoadingView = findViewById(R.id.loading_spinner);\n\n        // Initially hide the content view.\n        mContentView.setVisibility(View.GONE);\n\n        // Retrieve and cache the system's default \"short\" animation time.\n        mShortAnimationDuration = getResources().getInteger(\n                android.R.integer.config_shortAnimTime);\n    }\n}\n```\n- ##### 渐变View\n  完成如上设置后，开始实现View的渐变效果：\n1. 将需要淡入的View的Visible改为VISIBLE，透明度alpha=0\n2. 将淡入的View，alpha从0--1，淡出的View，alpha从1--0\n3. 使用`Animator.AnimatorListener`中的`onAnimationEnd()`来设置淡出的view的visible为gone，即使alpha=0，但是也会占用布局资源，所以需要gone。\n```java\nprivate View mContentView;\nprivate View mLoadingView;\nprivate int mShortAnimationDuration;\n\n...\n\nprivate void crossfade() {\n\n    // Set the content view to 0% opacity but visible, so that it is visible\n    // (but fully transparent) during the animation.\n    mContentView.setAlpha(0f);\n    mContentView.setVisibility(View.VISIBLE);\n\n    // Animate the content view to 100% opacity, and clear any animation\n    // listener set on the view.\n    mContentView.animate()\n            .alpha(1f)\n            .setDuration(mShortAnimationDuration)\n            .setListener(null);\n\n    // Animate the loading view to 0% opacity. After the animation ends,\n    // set its visibility to GONE as an optimization step (it won't\n    // participate in layout passes, etc.)\n    mLoadingView.animate()\n            .alpha(0f)\n            .setDuration(mShortAnimationDuration)\n            .setListener(new AnimatorListenerAdapter() {\n                @Override\n                public void onAnimationEnd(Animator animation) {\n                    mLoadingView.setVisibility(View.GONE);\n                }\n            });\n}\n```\n#### 2、使用Viewpager实现屏幕滑动\n类似View的淡入淡出切换，而屏幕的切换是整个的界面转换，使用`supports library`的ViewPager来实现。\n[ViewPager](http://hukai.me/android-training-course-in-chinese/animations/anim_screenslide.mp4)\n- ##### 创建View\n```xml\n<!-- fragment_screen_slide_page.xml -->\n<ScrollView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:id=\"@+id/content\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\" >\n\n    <TextView style=\"?android:textAppearanceMedium\"\n        android:padding=\"16dp\"\n        android:lineSpacingMultiplier=\"1.2\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"@string/lorem_ipsum\" />\n</ScrollView>\n```\n如上定义一个fragment和text view\n- ##### 创建Fragment\n  创建一个Fragment对象实例来展示view布局。\n```java\nimport android.support.v4.app.Fragment;\n...\npublic class ScreenSlidePageFragment extends Fragment {\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n            Bundle savedInstanceState) {\n        ViewGroup rootView = (ViewGroup) inflater.inflate(\n                R.layout.fragment_screen_slide_page, container, false);\n\n        return rootView;\n    }\n}\n```\n- ##### 添加viewPager\n  ViewPager有内建的滑动手势，配合PagerAdapter来适配数据。需要创建一个包含ViewPager的布局\n```xml\n<!-- activity_screen_slide.xml -->\n<android.support.v4.view.ViewPager\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:id=\"@+id/pager\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\" />\n```\n接下来就是创建一个Activity来关联布局，实现逻辑：\n1. content View中包含上述布局文件\n2. 创建`FragmentStatePagerAdapter`的子类，实现`getItem()`方法，把ScreenSlidePageFragment实例作为新页面补充进来。\n   PagerAdapter还需要实现getCount()方法，它返回 Adapter将要创建页面的总数（例如5个）。\n3. 关联`ViewPager`和`PagerAdapter`\n4. 处理Back按钮，按下变为在虚拟的Fragment栈中回退。如果用户已经在第一个页面了，\n   则在Activity的回退栈（back stack）中回退。\n```java\nimport android.support.v4.app.Fragment;\nimport android.support.v4.app.FragmentManager;\n...\npublic class ScreenSlidePagerActivity extends FragmentActivity {\n    //屏幕页面数目\n    private static final int NUM_PAGES = 5;\n\n    //View Pager对象，用于处理页面切换的容器\n    private ViewPager mPager;\n\n    //页面数据适配器\n    private PagerAdapter mPagerAdapter;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_screen_slide);\n\n        // 初始化数据\n        mPager = (ViewPager) findViewById(R.id.pager);\n        mPagerAdapter = new ScreenSlidePagerAdapter(getSupportFragmentManager());\n        mPager.setAdapter(mPagerAdapter);\n    }\n    //处理返回按钮的点击事件\n    @Override\n    public void onBackPressed() {\n        if (mPager.getCurrentItem() == 0) {\n            //要是第一个页面，返回按钮就是退出\n            super.onBackPressed();\n        } else {\n            //不是第一个页面，返回按钮就是返回上一个页面\n            mPager.setCurrentItem(mPager.getCurrentItem() - 1);\n        }\n    }\n\n    //简单的适配器，用于加入几个页面\n    private class ScreenSlidePagerAdapter extends FragmentStatePagerAdapter {\n        public ScreenSlidePagerAdapter(FragmentManager fm) {\n            super(fm);\n        }\n\n        @Override\n        public Fragment getItem(int position) {\n            return new ScreenSlidePageFragment();\n        }\n\n        @Override\n        public int getCount() {\n            return NUM_PAGES;\n        }\n    }\n}\n```\nViewPager包含有默认的滑屏动画，若要自定义切换动画需要实现`viewpager.transformer`接口，并补充道Viewpager中\n，实现其方法`transformPage()`。该方法会在显示页面滑动时，于其相邻的两个页面间调用。重要的参数就是当前页面\n的位置position，可以根据页面位置来设置不同的动画效果。\n```java\nViewPager mPager = (ViewPager) findViewById(R.id.pager);\n...\nmPager.setPagerTransformer(true,new ZoomOutPagerTransformer());\n```\n- ##### ZoomOutPagerTransformer\n  效果是逐渐褪色的淡出模式[演示](http://hukai.me/android-training-course-in-chinese/animations/anim_page_transformer_zoomout.mp4)\n```java\npublic class ZoomOutPageTransformer implements ViewPager.PageTransformer {\n    private static final float MIN_SCALE = 0.85f;\n    private static final float MIN_ALPHA = 0.5f;\n\n    public void transformPage(View view, float position) {\n        int pageWidth = view.getWidth();\n        int pageHeight = view.getHeight();\n\n        if (position < -1) { // [-Infinity,-1)\n            // This page is way off-screen to the left.\n            view.setAlpha(0);\n\n        } else if (position <= 1) { // [-1,1]\n            // Modify the default slide transition to shrink the page as well\n            float scaleFactor = Math.max(MIN_SCALE, 1 - Math.abs(position));\n            float vertMargin = pageHeight * (1 - scaleFactor) / 2;\n            float horzMargin = pageWidth * (1 - scaleFactor) / 2;\n            if (position < 0) {\n                view.setTranslationX(horzMargin - vertMargin / 2);\n            } else {\n                view.setTranslationX(-horzMargin + vertMargin / 2);\n            }\n\n            // Scale the page down (between MIN_SCALE and 1)\n            view.setScaleX(scaleFactor);\n            view.setScaleY(scaleFactor);\n\n            // Fade the page relative to its size.\n            view.setAlpha(MIN_ALPHA +\n                    (scaleFactor - MIN_SCALE) /\n                    (1 - MIN_SCALE) * (1 - MIN_ALPHA));\n\n        } else { // (1,+Infinity]\n            // This page is way off-screen to the right.\n            view.setAlpha(0);\n        }\n    }\n}\n```\n- ##### Depth Pager Transformer\n  右滑动潜藏效果[video](http://hukai.me/android-training-course-in-chinese/animations/anim_page_transformer_depth.mp4)\n```java\npublic class DepthPageTransformer implements ViewPager.PageTransformer {\n    private static final float MIN_SCALE = 0.75f;\n\n    public void transformPage(View view, float position) {\n        int pageWidth = view.getWidth();\n\n        if (position < -1) { // [-Infinity,-1)\n            // This page is way off-screen to the left.\n            view.setAlpha(0);\n\n        } else if (position <= 0) { // [-1,0]\n            // Use the default slide transition when moving to the left page\n            view.setAlpha(1);\n            view.setTranslationX(0);\n            view.setScaleX(1);\n            view.setScaleY(1);\n\n        } else if (position <= 1) { // (0,1]\n            // Fade the page out.\n            view.setAlpha(1 - position);\n\n            // Counteract the default slide transition\n            view.setTranslationX(pageWidth * -position);\n\n            // Scale the page down (between MIN_SCALE and 1)\n            float scaleFactor = MIN_SCALE\n                    + (1 - MIN_SCALE) * (1 - Math.abs(position));\n            view.setScaleX(scaleFactor);\n            view.setScaleY(scaleFactor);\n\n        } else { // (1,+Infinity]\n            // This page is way off-screen to the right.\n            view.setAlpha(0);\n        }\n    }\n}\n```\n#### 3、实现Card翻转动画\n通过自定义Fragment实现Card翻转效果的view切换。[card](http://hukai.me/android-training-course-in-chinese/animations/anim_card_flip.mp4)\n- ##### 创建Animator\n  创建Card翻转动画，我们需要两个Animator。一个让正面的card的右侧向左翻转渐出，一个让背面的Card向右翻转渐入。我们还需要两个 Animator让背面的card的右侧向左翻转渐入，一个让向右翻转渐入。\n\n**card_flip_left_in.xml**\n```xml\n<set xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <!-- Before rotating, immediately set the alpha to 0. -->\n    <objectAnimator\n        android:valueFrom=\"1.0\"\n        android:valueTo=\"0.0\"\n        android:propertyName=\"alpha\"\n        android:duration=\"0\" />\n\n    <!-- Rotate. -->\n    <objectAnimator\n        android:valueFrom=\"-180\"\n        android:valueTo=\"0\"\n        android:propertyName=\"rotationY\"\n        android:interpolator=\"@android:interpolator/accelerate_decelerate\"\n        android:duration=\"@integer/card_flip_time_full\" />\n\n    <!-- Half-way through the rotation (see startOffset), set the alpha to 1. -->\n    <objectAnimator\n        android:valueFrom=\"0.0\"\n        android:valueTo=\"1.0\"\n        android:propertyName=\"alpha\"\n        android:startOffset=\"@integer/card_flip_time_half\"\n        android:duration=\"1\" />\n</set>\n```\n**card_flip_left_out.xml**\n```xml\n<set xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <!-- Rotate. -->\n    <objectAnimator\n        android:valueFrom=\"0\"\n        android:valueTo=\"180\"\n        android:propertyName=\"rotationY\"\n        android:interpolator=\"@android:interpolator/accelerate_decelerate\"\n        android:duration=\"@integer/card_flip_time_full\" />\n\n    <!-- Half-way through the rotation (see startOffset), set the alpha to 0. -->\n    <objectAnimator\n        android:valueFrom=\"1.0\"\n        android:valueTo=\"0.0\"\n        android:propertyName=\"alpha\"\n        android:startOffset=\"@integer/card_flip_time_half\"\n        android:duration=\"1\" />\n</set>\n```\n**card_flip_right_in.xml**\n```xml\n<set xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <!-- Before rotating, immediately set the alpha to 0. -->\n    <objectAnimator\n        android:valueFrom=\"1.0\"\n        android:valueTo=\"0.0\"\n        android:propertyName=\"alpha\"\n        android:duration=\"0\" />\n\n    <!-- Rotate. -->\n    <objectAnimator\n        android:valueFrom=\"180\"\n        android:valueTo=\"0\"\n        android:propertyName=\"rotationY\"\n        android:interpolator=\"@android:interpolator/accelerate_decelerate\"\n        android:duration=\"@integer/card_flip_time_full\" />\n\n    <!-- Half-way through the rotation (see startOffset), set the alpha to 1. -->\n    <objectAnimator\n        android:valueFrom=\"0.0\"\n        android:valueTo=\"1.0\"\n        android:propertyName=\"alpha\"\n        android:startOffset=\"@integer/card_flip_time_half\"\n        android:duration=\"1\" />\n</set>\n```\n**card_flip_right_out.xml**\n```xml\n<set xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <!-- Rotate. -->\n    <objectAnimator\n        android:valueFrom=\"0\"\n        android:valueTo=\"-180\"\n        android:propertyName=\"rotationY\"\n        android:interpolator=\"@android:interpolator/accelerate_decelerate\"\n        android:duration=\"@integer/card_flip_time_full\" />\n\n    <!-- Half-way through the rotation (see startOffset), set the alpha to 0. -->\n    <objectAnimator\n        android:valueFrom=\"1.0\"\n        android:valueTo=\"0.0\"\n        android:propertyName=\"alpha\"\n        android:startOffset=\"@integer/card_flip_time_half\"\n        android:duration=\"1\" />\n</set>\n```\n- ##### 创建View\n  card的每个面都是一个布局，需要在Fragment中关联展示\n```xml\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"vertical\"\n    android:background=\"#a6c\"\n    android:padding=\"16dp\"\n    android:gravity=\"bottom\">\n\n    <TextView android:id=\"@android:id/text1\"\n        style=\"?android:textAppearanceLarge\"\n        android:textStyle=\"bold\"\n        android:textColor=\"#fff\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"@string/card_back_title\" />\n\n    <TextView style=\"?android:textAppearanceSmall\"\n        android:textAllCaps=\"true\"\n        android:textColor=\"#80ffffff\"\n        android:textStyle=\"bold\"\n        android:lineSpacingMultiplier=\"1.2\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"@string/card_back_description\" />\n\n</LinearLayout>\n```\n另一面：\n```xml\n<ImageView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:src=\"@drawable/image1\"\n    android:scaleType=\"centerCrop\"\n    android:contentDescription=\"@string/description_image_1\" />\n```\n- ##### 创建Fragment\n  Card的正反面都是Fragment，需要创建并关联布局\n```java\npublic class CardFlipActivity extends Activity {\n    ...\n    /**\n     * A fragment representing the front of the card.\n     */\n    public class CardFrontFragment extends Fragment {\n        @Override\n        public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                Bundle savedInstanceState) {\n            return inflater.inflate(R.layout.fragment_card_front, container, false);\n        }\n    }\n\n    /**\n     * A fragment representing the back of the card.\n     */\n    public class CardBackFragment extends Fragment {\n        @Override\n        public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                Bundle savedInstanceState) {\n            return inflater.inflate(R.layout.fragment_card_back, container, false);\n        }\n    }\n}\n```\n- ##### 实现翻转Card动画\n  创建一个framelayout来用于activity展示fragment\n```xml\n<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:id=\"@+id/container\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\" />\n```\n在Activity中实现展示\n```java\npublic class CardFlipActivity extends Activity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_activity_card_flip);\n\n        if (savedInstanceState == null) {\n            getFragmentManager()\n                    .beginTransaction()\n                    .add(R.id.container, new CardFrontFragment())\n                    .commit();\n        }\n    }\n    ...\n}\n```\n如上默认展示了card的正面，需要适时创建card的背面，并实现翻转。\n\n1. 将Fragment转换设置我们刚做的自定义动画\n\n2. 用新Fragment替换当前显示的Fragment，并且应用之前创建的动画到该事件中。\n\n3. 添加之前显示的Fragment到Fragment的回退栈（back stack）中，所以当用户按下 Back 键时，Card会翻转回来。\n\n```java\nprivate void flipCard() {\n    if (mShowingBack) {\n        getFragmentManager().popBackStack();\n        return;\n    }\n\n    // 是否正在翻转\n\n    mShowingBack = true;\n\n    // 创建并执行一个事务，新增fragment并应用自定义动画，且将fragment加入回退栈\n\n    getFragmentManager()\n            .beginTransaction()\n\n            // 使用自定义动画\n            .setCustomAnimations(\n                    R.animator.card_flip_right_in, R.animator.card_flip_right_out,\n                    R.animator.card_flip_left_in, R.animator.card_flip_left_out)\n\n            // 翻转的fragment\n            .replace(R.id.container, new CardBackFragment())\n\n            // 新增事务到回退栈\n            .addToBackStack(null)\n\n            // 提交事务\n            .commit();\n}\n```\n#### 4、View的缩放\nView的动画缩放效果，常用语图片的浏览展示。[scale](http://hukai.me/android-training-course-in-chinese/animations/anim_zoom.mp4)\n- ##### 创建View\n  示例创建了大小两个版本的文件，\n```xml\n<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:id=\"@+id/container\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n    <LinearLayout android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"vertical\"\n        android:padding=\"16dp\">\n\n        <ImageButton\n            android:id=\"@+id/thumb_button_1\"\n            android:layout_width=\"100dp\"\n            android:layout_height=\"75dp\"\n            android:layout_marginRight=\"1dp\"\n            android:src=\"@drawable/thumb1\"\n            android:scaleType=\"centerCrop\"\n            android:contentDescription=\"@string/description_image_1\" />\n\n    </LinearLayout>\n\n    <!-- This initially-hidden ImageView will hold the expanded/zoomed version of\n         the images above. Without transformations applied, it takes up the entire\n         screen. To achieve the \"zoom\" animation, this view's bounds are animated\n         from the bounds of the thumbnail button above, to its final laid-out\n         bounds.\n         -->\n\n    <ImageView\n        android:id=\"@+id/expanded_image\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:visibility=\"invisible\"\n        android:contentDescription=\"@string/description_zoom_touch_close\" />\n\n</FrameLayout>\n```\n- ##### 设置缩放动画\n  监听点击事件，实现缩放效果\n```java\npublic class ZoomActivity extends FragmentActivity {\n    // Hold a reference to the current animator,\n    // so that it can be canceled mid-way.\n    private Animator mCurrentAnimator;\n\n    // The system \"short\" animation time duration, in milliseconds. This\n    // duration is ideal for subtle animations or animations that occur\n    // very frequently.\n    private int mShortAnimationDuration;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_zoom);\n\n        // Hook up clicks on the thumbnail views.\n\n        final View thumb1View = findViewById(R.id.thumb_button_1);\n        thumb1View.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                zoomImageFromThumb(thumb1View, R.drawable.image1);\n            }\n        });\n\n        // Retrieve and cache the system's default \"short\" animation time.\n        mShortAnimationDuration = getResources().getInteger(\n                android.R.integer.config_shortAnimTime);\n    }\n    ...\n}\n```\n- ##### 缩放View\n  缩放View的效果实现：\n1. 高清大图放在IamgeView中，用于放大后再显示。\n2. 计算image View的边界。\n3. 要同步改变四个边界，用`AnimatorSet`\n4. 缩小则是类似逆向如上操作。注意view的属性需要设置gone。\n```java\nprivate void zoomImageFromThumb(final View thumbView, int imageResId) {\n    // If there's an animation in progress, cancel it\n    // immediately and proceed with this one.\n    if (mCurrentAnimator != null) {\n        mCurrentAnimator.cancel();\n    }\n\n    // Load the high-resolution \"zoomed-in\" image.\n    final ImageView expandedImageView = (ImageView) findViewById(\n            R.id.expanded_image);\n    expandedImageView.setImageResource(imageResId);\n\n    // Calculate the starting and ending bounds for the zoomed-in image.\n    // This step involves lots of math. Yay, math.\n    final Rect startBounds = new Rect();\n    final Rect finalBounds = new Rect();\n    final Point globalOffset = new Point();\n\n    // The start bounds are the global visible rectangle of the thumbnail,\n    // and the final bounds are the global visible rectangle of the container\n    // view. Also set the container view's offset as the origin for the\n    // bounds, since that's the origin for the positioning animation\n    // properties (X, Y).\n    thumbView.getGlobalVisibleRect(startBounds);\n    findViewById(R.id.container)\n            .getGlobalVisibleRect(finalBounds, globalOffset);\n    startBounds.offset(-globalOffset.x, -globalOffset.y);\n    finalBounds.offset(-globalOffset.x, -globalOffset.y);\n\n    // Adjust the start bounds to be the same aspect ratio as the final\n    // bounds using the \"center crop\" technique. This prevents undesirable\n    // stretching during the animation. Also calculate the start scaling\n    // factor (the end scaling factor is always 1.0).\n    float startScale;\n    if ((float) finalBounds.width() / finalBounds.height()\n            > (float) startBounds.width() / startBounds.height()) {\n        // Extend start bounds horizontally\n        startScale = (float) startBounds.height() / finalBounds.height();\n        float startWidth = startScale * finalBounds.width();\n        float deltaWidth = (startWidth - startBounds.width()) / 2;\n        startBounds.left -= deltaWidth;\n        startBounds.right += deltaWidth;\n    } else {\n        // Extend start bounds vertically\n        startScale = (float) startBounds.width() / finalBounds.width();\n        float startHeight = startScale * finalBounds.height();\n        float deltaHeight = (startHeight - startBounds.height()) / 2;\n        startBounds.top -= deltaHeight;\n        startBounds.bottom += deltaHeight;\n    }\n\n    // Hide the thumbnail and show the zoomed-in view. When the animation\n    // begins, it will position the zoomed-in view in the place of the\n    // thumbnail.\n    thumbView.setAlpha(0f);\n    expandedImageView.setVisibility(View.VISIBLE);\n\n    // Set the pivot point for SCALE_X and SCALE_Y transformations\n    // to the top-left corner of the zoomed-in view (the default\n    // is the center of the view).\n    expandedImageView.setPivotX(0f);\n    expandedImageView.setPivotY(0f);\n\n    // Construct and run the parallel animation of the four translation and\n    // scale properties (X, Y, SCALE_X, and SCALE_Y).\n    AnimatorSet set = new AnimatorSet();\n    set\n            .play(ObjectAnimator.ofFloat(expandedImageView, View.X,\n                    startBounds.left, finalBounds.left))\n            .with(ObjectAnimator.ofFloat(expandedImageView, View.Y,\n                    startBounds.top, finalBounds.top))\n            .with(ObjectAnimator.ofFloat(expandedImageView, View.SCALE_X,\n            startScale, 1f)).with(ObjectAnimator.ofFloat(expandedImageView,\n                    View.SCALE_Y, startScale, 1f));\n    set.setDuration(mShortAnimationDuration);\n    set.setInterpolator(new DecelerateInterpolator());\n    set.addListener(new AnimatorListenerAdapter() {\n        @Override\n        public void onAnimationEnd(Animator animation) {\n            mCurrentAnimator = null;\n        }\n\n        @Override\n        public void onAnimationCancel(Animator animation) {\n            mCurrentAnimator = null;\n        }\n    });\n    set.start();\n    mCurrentAnimator = set;\n\n    // Upon clicking the zoomed-in image, it should zoom back down\n    // to the original bounds and show the thumbnail instead of\n    // the expanded image.\n    final float startScaleFinal = startScale;\n    expandedImageView.setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View view) {\n            if (mCurrentAnimator != null) {\n                mCurrentAnimator.cancel();\n            }\n\n            // Animate the four positioning/sizing properties in parallel,\n            // back to their original values.\n            AnimatorSet set = new AnimatorSet();\n            set.play(ObjectAnimator\n                        .ofFloat(expandedImageView, View.X, startBounds.left))\n                        .with(ObjectAnimator\n                                .ofFloat(expandedImageView,\n                                        View.Y,startBounds.top))\n                        .with(ObjectAnimator\n                                .ofFloat(expandedImageView,\n                                        View.SCALE_X, startScaleFinal))\n                        .with(ObjectAnimator\n                                .ofFloat(expandedImageView,\n                                        View.SCALE_Y, startScaleFinal));\n            set.setDuration(mShortAnimationDuration);\n            set.setInterpolator(new DecelerateInterpolator());\n            set.addListener(new AnimatorListenerAdapter() {\n                @Override\n                public void onAnimationEnd(Animator animation) {\n                    thumbView.setAlpha(1f);\n                    expandedImageView.setVisibility(View.GONE);\n                    mCurrentAnimator = null;\n                }\n\n                @Override\n                public void onAnimationCancel(Animator animation) {\n                    thumbView.setAlpha(1f);\n                    expandedImageView.setVisibility(View.GONE);\n                    mCurrentAnimator = null;\n                }\n            });\n            set.start();\n            mCurrentAnimator = set;\n        }\n    });\n}\n```\n#### 5、布局动画\n布局动画是一种预加载动画，可以通过创建Layout Transition ，setLayoutTransition（）实现。\n[layout](http://hukai.me/android-training-course-in-chinese/animations/anim_layout_changes.mp4)\n- ##### 创建布局\n  为想开启动画的布局设置`android:animateLayoutChanges`属性为`true`。\n```xml\n<LinearLayout android:id=\"@+id/container\"\n    android:animateLayoutChanges=\"true\"\n    ...\n/>\n```\n- ##### 从布局中增删项目\n  代码中动态修改布局项目，实现动画\n```java\nprivate ViewGroup mContainerView;\n...\nprivate void addItem() {\n    View newView;\n    ...\n    mContainerView.addView(newView, 0);\n}\n```","source":"_posts/第四篇、Android图像与动画.md","raw":"---\ntitle: \"Android图像与动画\"\ndate: 2017-03-27 16:57\nauthor: 冰路梦\ntag:\n    - Android\ncategories:\n    - Android\n---\n## 第四篇、Android图像与动画\n[TOC]\n### 第1章、高效显示Bitmap\n\n本节主要介绍加载处理Bitmap对象常用方法，以避免UI线程阻塞与OOM问题。由于Android设备\n\n- Android单个应用至少16M内存，不同分辨率屏幕的设备要求不同。`国内自定义ROM限制也有差异。`\n- Bitmap消耗内存，一张5M的高清照片，使用ARGB_8888方式加载Bitmap，则需要19M左右的内存。\n- Android应用一般加载多个Bitmap，预先加载以备显示。\n\n所以如上三条，需要我们对Bitmap做优化处理。\n\n#### 1、高效加载大图（Loading Large Bitmap Efficiently）\n\n本节介绍加载缩小的图片，来避免过多消耗内存，原始大小的图片和超过控件大小和设备分辨率的图片加载，在显示上并无意义，反而带来内存风险。\n\n- ##### 读取位图尺寸与类型（Read Bitmap Dimensions and Type）\n\n  `BitmapFactory`提供了不同类型的decode方法，配有`BitmapFactory.Options`选项来标记解码方式。\n\n  设置`inJustDecodeBounds=true`属性可以避免解码时候分配内存。其返回`null`的Bitmap，但是可以用于获取长宽和类型。\n\n  ```java\n  BitmapFactory.Options options = new BitmapFactory.Options();\n  options.inJustDecodeBounds = true;//不加载分配内存\n  BitmapFactory.decodeResource(getResource(),R.drawable.iclauncher,options);\n  //图像长宽\n  int imgWidth = options.outWidth;\n  int imgHeight = options.outHeight;\n  String imgType = options.outMimeType;//图像类型\n  ```\n\n  *一般需要在加载图片前判断图片大小，避免OOM，除非你确保不会OOM*\n\n- ##### 加载缩小版图片到内存（Load a Scale Down Version into Memory）\n\n  加载缩小版图片也需要考虑一些因素：\n\n  - 评估完整图片加载需耗内存。\n  - 加载图片可能涉及到的其他内存需求。\n  - 显示图片的控件尺寸。\n  - 设备屏幕的密度和大小。\n\n  BitmapFactory.Options中设置`inSampleSize`来确定缩放比。\n\n  ```java\n  /**\n   * 计算图像缩放比\n   */\n  public static int calculateInSampleSize(\n              BitmapFactory.Options options, int reqWidth, int reqHeight) {\n      // 获取图像的原始大小\n      final int height = options.outHeight;\n      final int width = options.outWidth;\n      int inSampleSize = 1;\n      if (height > reqHeight || width > reqWidth) {\n          final int halfHeight = height / 2;\n          final int halfWidth = width / 2;\n          //保持宽高大于请求的宽高，缩放比为计算值的2倍\n          while ((halfHeight / inSampleSize) > reqHeight\n                  && (halfWidth / inSampleSize) > reqWidth) {\n              inSampleSize *= 2;\n          }\n      }\n      return inSampleSize;\n  }\n  ```\n\n  ==*设置缩放比`inSampleSize`为2的倍数，是因为解码器对非2倍数会就近处理为2的倍数。*==\n\n  先设置`inJustDecodeBounds=true`来设置`inSampleSize`之后在设置`inJustDecodeBounds=false`加载缩放后的Bitmap\n\n  ```java\n  mImageView.setImageBitmap(decodeSampleBitmapFromResource(getResource(),R.drawable.iclauncher,100,100));//加载大小100长宽的图片\n  /*\n   * 根据控件大小，加载缩放图片\n   */\n  public static Bitmap decodeSampleBitmapFromResource(Resource res,int resId,int reqWidth,int reqHeight){\n    //先空加载图片，计算缩放比\n    final BitmapFactory.Options options = new BitmapFactory.Options();\n    options.inJustDecodeBounds = true;\n    BitmapFactory.decodeResource(res,resId,options);\n    options.inSampleSize = calculateInSampleSize(options,reqWidth,reqHeight);\n    //解码缩放后的图像\n    options.inJustDecodeBounds = false;\n    returen BitmapFactory.decodeResource(res,resId,options);\n  }\n  ```\n\n#### 2、非UI线程处理Bitmap\n\n上一节仅仅介绍了如何缩放加载图像，若是获取网络图像或者其他储存设备，则应避免在UI线程执行加载操作，避免ANR。\n\n- ##### 使用AsyncTask（Use a AsyncTask）\n\n  AsyncTask是Android提供的一个封装好的后台线程操作方式，并可以实现前后台信息传递。\n\n  ```java\n  class BitmapWorkerTask extends AsyncTask{\n    private final WeakReference imageViewReference;\n    private int data = 0;\n    public BitmapWorkerTask(ImageView imageView){\n      //使用弱引用，确保图像会被及时的GC回收。\n      imageViewReference = new WeakReference(imageView);\n    }\n    //后台解码图片\n    @override\n    protected Bitmap doInBackground(Integer... params){\n      data = params[0];\n      return decodeSampleBitmapFromResource(getResource(),data,100,100);\n    }\n    //完成解码后，加载图像到控件显示\n    //要判断引用对象是否还存在，控件是否存在等，避免空指针。\n    @override\n    protected void onPostExecute(Bitmap bitmap){\n      if(imageViewReference !=null && bitmap !=null){\n        final ImageView imageView = imageViewReference.get();\n        if(imageView!=null){\n          imageView.setImageBitmap(bitmap);\n        }\n      }\n    }\n  }\n  //创建一个任务task，执行异步加载\n  public void loadBitmap(int resId,ImageView imageView){\n    BitmapWorkerTask task = new BitmapWorkerTask(imageView);\n    task.execute(resId);//执行Task\n  }\n  ```\n\n- ##### 处理并发问题（Handle Concurrency）\n\n  List View和Grid View控件显示多个位图结合AsyncTask使用时会产生并发问题。每个item都执行task的话，启动顺序，任务顺序都很难保持一致性。为此可以使用Image View来保存最近使用的AsyncTask引用，创建一个专用的`Drawable`子类来存储任务引用，如`BitmapDrawable`,并提供占位图像:\n\n  ```java\n  static class AsyncDrawable extends BitmapDrawable{\n    private final WeakReference bitmapWorkerTaskReference;\n    public AsyncDrawable(Resource res,Bitmap bitmap,BitmapWorkerTask bitmapWorkerTask){\n      super(res,bitmap);\n      //初始化弱引用对象\n      bitmapWorkerTaskReference = new BitmapWorkerTaskReference(bitmapWorkerTask);\n    }\n    //对外公开task的引用。\n    public BitmapWorkerTask getBitmapWorkerTask(){\n      return bitmapWorkerTaskReference.get();\n    }\n  }\n  ```\n\n  在执行BitmapWorkerTask之前需要创建AsyncDrawable并绑定到ImageView上：\n\n  ```java\n  public void loadBitmap(int resId,ImageView imageView){\n    if(cancelPotentialWork(resId,imageView)){\n      final BitmapWorkerTask task = new BitmapWorkerTask(imageView);\n      final AsyncDrawable asyncDrawable = new \t\t\t\t\t\t\t   AsyncDrawable(getResource(),mPlaceHolderBitmap,task);\n      imageView.setImageDrawable(asyncDrawable);\n      task.execute(resId);\n    }\n  }\n  //该方法用于检测是否有已存在的任务在执行该Image View控件的请求。\n  public static boolean cancelPotentialWork(int data, ImageView imageView) {\n  \t//检索AsyncTask是否已经被分配到指定的ImageView控件。\n    final BitmapWorkerTask bitmapWorkerTask = getBitmapWorkerTask(imageView);\n      if (bitmapWorkerTask != null) {\n          final int bitmapData = bitmapWorkerTask.data;\n          if (bitmapData == 0 || bitmapData != data) {\n              //取消先前的任务\n              bitmapWorkerTask.cancel(true);\n          } else {\n              //同样的请求任务已经在执行\n              return false;\n          }\n      }\n      //没有符合当下请求的任务绑定在ImageView控件上，或者之前的取消了。\n      return true;\n  }\n  //获取控件相关的task\n  private static BitmapWorkerTask getBitmapWorkerTask(ImageView imageView) {\n     if (imageView != null) {\n         final Drawable drawable = imageView.getDrawable();\n         if (drawable instanceof AsyncDrawable) {\n             final AsyncDrawable asyncDrawable = (AsyncDrawable) drawable;\n           //获取AsyncDrawable中定义的绑定task引用\n             return asyncDrawable.getBitmapWorkerTask();\n         }\n      }\n      return null;\n  }\n  ```\n\n  完成异步task的绑定后，在`onPostExecute()`中更新view\n\n  ```java\n  class BitmapWorkerTask extends AsyncTask {\n      ...\n\n      @Override\n      protected void onPostExecute(Bitmap bitmap) {\n          if (isCancelled()) {\n              bitmap = null;\n          }\n  \t\t//更新View前，判断资源和控件的非空\n          if (imageViewReference != null && bitmap != null) {\n              final ImageView imageView = imageViewReference.get();\n              final BitmapWorkerTask bitmapWorkerTask =\n                      getBitmapWorkerTask(imageView);\n              if (this == bitmapWorkerTask && imageView != null) {\n                  imageView.setImageBitmap(bitmap);\n              }\n          }\n      }\n  }\n  ```\n\n  应用与listView和GridView等，循环利用子视图的控件，只要在设置ImageView的地方调用loadBitmap方法即可。如GridView的`getView()`中。\n\n#### 3、缓存Bitmap\n\n在List View或GridView控件场景中，可能需要大量图片展示，而且存在图片复用现象，此时就需要用到缓存，以提高效能和用户体验。\n\n- ##### 使用内存缓存（Use a Memory Cache）\n\n  使用内存缓存实现以_空间换时间_，提高速度。`LruCache`类用于缓存Bitmaps，其使用强引用`LinkedHashMap`保存最近引用对象，在缓存超出设置大小时候剔除最近最少使用的对象。\n\n  > **注意：**以前多使用`软引用`或`弱引用`但是现在并不推荐，由于Android版本的GC频率增高，引用效率也大为降低。\n\n  为LruCache设置合适的大小，考虑一下因素：\n\n  - 应用剩余可用内存大小\n  - 同时显示图像数量，以及预加载图片数量\n  - 设备屏幕尺寸与密度\n  - 图像尺寸、类型\n  - 图像被访问的频率高低\n  - 显示图像的质量和数量的平衡\n\n  以上因素都需要具体分析，如下创建一个Bitmap的LruCache的示例：\n\n  ```java\n  private LruCache<String, Bitmap> mMemoryCache;\n\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n      ...\n      // 获取应用VM最大可用内存\n      final int maxMemory = (int) (Runtime.getRuntime().maxMemory() / 1024);\n\n      // 使用可用内存的1/8来缓存\n      final int cacheSize = maxMemory / 8;\n  \t//建立LruCache缓存对象\n      mMemoryCache = new LruCache<String, Bitmap>(cacheSize) {\n          @Override\n          protected int sizeOf(String key, Bitmap bitmap) {\n              // 缓存以KB为单位计算，而非对象item个数\n              return bitmap.getByteCount() / 1024;\n          }\n      };\n      ...\n  }\n  //加入bitmap对象到lrucache\n  public void addBitmapToMemoryCache(String key, Bitmap bitmap) {\n      if (getBitmapFromMemCache(key) == null) {\n          mMemoryCache.put(key, bitmap);\n      }\n  }\n  //从lrucache获取bitmap缓存\n  public Bitmap getBitmapFromMemCache(String key) {\n      return mMemoryCache.get(key);\n  }\n  ```\n\n  > **Note:**在上面的例子中, 有1/8的内存空间被用作缓存。 这意味着在常见的设备上（hdpi），最少大概有4MB的缓存空间（32/8）。如果一个填满图片的GridView控件放置在800x480像素的手机屏幕上，大概会花费1.5MB的缓存空间（800x480x4 bytes），因此缓存的容量大概可以缓存2.5页的图片内容。\n\n  加入缓存的bitmap亦是已经优化过的图像：\n\n  ```java\n  class BitmapWorkerTask extends AsyncTask<Integer, Void, Bitmap> {\n      ...\n      //异步线程解码图像\n      @Override\n      protected Bitmap doInBackground(Integer... params) {\n        //缩放图像\n          final Bitmap bitmap = decodeSampledBitmapFromResource(\n                  getResources(), params[0], 100, 100));\n        //添加到lrucache缓存\n          addBitmapToMemoryCache(String.valueOf(params[0]), bitmap);\n          return bitmap;\n      }\n      ...\n  }\n  ```\n\n- ##### 使用磁盘缓存（Use a Disk Cache）\n\n  使用内存作为缓存虽然有较高的速度，但也可能因为应用被后台化，系统资源不足，亦或者过于大量的图像加载，而导致效果不佳，体验不好。因而可以使用磁盘缓存，需要异步处理，避免ANR。\n\n  > **Note:**如果图像过于频繁访问，可以使用`ContentProvider`更为合适。\n\n  如下示例`DiskLruCache`为Android源码基础上优化的：\n\n  ```java\n  private DiskLruCache mDiskLruCache;//DiskLruCache对象\n  private final Object mDiskCacheLock = new Object();//常量化同步锁\n  private boolean mDiskCacheStarting = true;//是否开启缓存\n  private static final int DISK_CACHE_SIZE = 1024 * 1024 * 10; // 10MB\n  private static final String DISK_CACHE_SUBDIR = \"thumbnails\";//缓存文件夹\n\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n      ...\n      // 初始化内存缓存\n      ...\n      // 后台线程初始化磁盘缓存\n      File cacheDir = getDiskCacheDir(this, DISK_CACHE_SUBDIR);//从磁盘加载出缓存文件\n      new InitDiskCacheTask().execute(cacheDir);//异步开始加载到缓存文件\n      ...\n  }\n  //内部类，初始化磁盘加载task\n  class InitDiskCacheTask extends AsyncTask<File, Void, Void> {\n      @Override\n      protected Void doInBackground(File... params) {\n          synchronized (mDiskCacheLock) {//同步锁\n              File cacheDir = params[0];//缓存文件\n              mDiskLruCache = DiskLruCache.open(cacheDir, DISK_CACHE_SIZE);\n              mDiskCacheStarting = false; //完成初始化磁盘加载\n              mDiskCacheLock.notifyAll(); //唤起其他休眠线程\n          }\n          return null;\n      }\n  }\n  //异步加载图片的task，\n  class BitmapWorkerTask extends AsyncTask<Integer, Void, Bitmap> {\n      ...\n      // 解码图像\n      @Override\n      protected Bitmap doInBackground(Integer... params) {\n          final String imageKey = String.valueOf(params[0]);\n\n          //后台线程检查磁盘缓存\n          Bitmap bitmap = getBitmapFromDiskCache(imageKey);\n\n          if (bitmap == null) { // 磁盘缓存没有所需图像\n              // 正常途径加载\n              final Bitmap bitmap = decodeSampledBitmapFromResource(\n                      getResources(), params[0], 100, 100));\n          }\n\n          //并将优化后的图像加入磁盘缓存\n          addBitmapToCache(imageKey, bitmap);\n\n          return bitmap;\n      }\n      ...\n  }\n  //加入磁盘缓存\n  public void addBitmapToCache(String key, Bitmap bitmap) {\n      // 先加入内存缓存\n      if (getBitmapFromMemCache(key) == null) {\n          mMemoryCache.put(key, bitmap);\n      }\n\n      // 然后加入到磁盘缓存\n      synchronized (mDiskCacheLock) {\n          if (mDiskLruCache != null && mDiskLruCache.get(key) == null) {\n              mDiskLruCache.put(key, bitmap);\n          }\n      }\n  }\n  //从磁盘缓存获取图像\n  public Bitmap getBitmapFromDiskCache(String key) {\n      synchronized (mDiskCacheLock) {//同步获取锁\n          // 等待后台线程获取磁盘缓存\n          while (mDiskCacheStarting) {\n              try {\n                  mDiskCacheLock.wait();\n              } catch (InterruptedException e) {}\n          }\n          if (mDiskLruCache != null) {\n              return mDiskLruCache.get(key);\n          }\n      }\n      return null;\n  }\n\n  // 为特定的app创建唯一的子文件夹，优先使用外部sd卡，若没有，就使用内部sd卡\n  public static File getDiskCacheDir(Context context, String uniqueName) {\n      // 检查是否有外部存储，否则用内部存储\n      final String cachePath =\n              Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState()) ||\n                      !isExternalStorageRemovable() ? getExternalCacheDir(context).getPath() :\n                              context.getCacheDir().getPath();\n\n      return new File(cachePath + File.separator + uniqueName);\n  }\n  ```\n\n  > **注意：**如上使用==同步锁==是为了防止在后台异步I/O操作时候，错误读取。\n\n  内存缓存检查可以在UI线程操作，而磁盘缓存需要在后台线程。\n\n- ##### 处理配置改变（Handle Configuration Changes）\n\n  Android的配置信息发生变化，Activity可能会随之变化、销毁重建。平滑恢复原有图像，创造良好用户体验，`setRetainInstance(true)`保留的一个`Fragement`实例可以将缓存重新附着与Activity上。\n\n  ```java\n  private LruCache<String, Bitmap> mMemoryCache;\n\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n      ...\n        //RetainFragment\n      RetainFragment retainFragment =\n              RetainFragment.findOrCreateRetainFragment(getFragmentManager());\n    //获取缓存对象  \n    mMemoryCache = retainFragment.mRetainedCache;\n      if (mMemoryCache == null) {\n          mMemoryCache = new LruCache<String, Bitmap>(cacheSize) {\n              ... // 初始化缓存\n          }\n          retainFragment.mRetainedCache = mMemoryCache;\n      }\n      ...\n  }\n  //自定义内部类Fragment，用于存储缓存对象？？\n  class RetainFragment extends Fragment {\n      private static final String TAG = \"RetainFragment\";\n      public LruCache<String, Bitmap> mRetainedCache;\n\n      public RetainFragment() {}\n\n      public static RetainFragment findOrCreateRetainFragment(FragmentManager fm) {\n          RetainFragment fragment = (RetainFragment) fm.findFragmentByTag(TAG);\n          if (fragment == null) {\n              fragment = new RetainFragment();\n              fm.beginTransaction().add(fragment, TAG).commit();\n          }\n          return fragment;\n      }\n\n      @Override\n      public void onCreate(Bundle savedInstanceState) {\n          super.onCreate(savedInstanceState);\n          setRetainInstance(true);\n      }\n  }\n  ```\n\n#### 4、管理Bitmap的内存\n\n关于Bitmap内存管理了解两点：1、Android2.3之后GC回收并发执行，内存不引用，会被立即回收。2、Android3.0以后bitmap引用和数据一同存放在`Dalvik堆`内存中。\n\n- ##### Android2.3以下版本的内存管理\n\n  推荐使用`recycle()`方法，低版本Android单线程GC。使用引用计数法：\n\n  ```java\n  private int mCacheRefCount=0;//引用计数\n  private int mDisplayRefCount = 0;//引用计数\n  ...\n  //通知drawable显示状态发生改变，drawable引用计数来决定引用状态和显示\n  public void setIsDisplayed(boolean isDisplayed) {\n      synchronized (this) {\n          if (isDisplayed) {\n              mDisplayRefCount++;\n              mHasBeenDisplayed = true;\n          } else {\n              mDisplayRefCount--;\n          }\n      }\n      // Check to see if recycle() can be called.\n      checkState();\n  }\n  // Notify the drawable that the cache state has changed.\n  // Keep a count to determine when the drawable is no longer being cached.\n  public void setIsCached(boolean isCached) {\n      synchronized (this) {\n          if (isCached) {\n              mCacheRefCount++;\n          } else {\n              mCacheRefCount--;\n          }\n      }\n      // Check to see if recycle() can be called.\n      checkState();\n  }\n\n  private synchronized void checkState() {\n      // If the drawable cache and display ref counts = 0, and this drawable\n      // has been displayed, then recycle.\n      if (mCacheRefCount <= 0 && mDisplayRefCount <= 0 && mHasBeenDisplayed\n              && hasValidBitmap()) {\n          getBitmap().recycle();\n      }\n  }\n  private synchronized boolean hasValidBitmap() {\n      Bitmap bitmap = getBitmap();\n      return bitmap != null && !bitmap.isRecycled();\n  }\n  ```\n\n- ##### Android3.0以上版本内存管理\n\n  API 11引入`BitmapFactory.Options.inBitmap`使Bitmap在加载时候可以重中已存在的，但是大小一样的位图（< API 19时候）。\n\n- 保存Bitmap以备复用\n\n  android3.0以上，bitmap从L如Cache移除时，Bitmap的软引用会被村房子啊Hashset中，以便`inBitmap`复用。\n\n  ```java\n  Set<SoftReference<Bitmap>> mReusableBitmaps;\n  private LruCache<String, BitmapDrawable> mMemoryCache;\n\n  // If you're running on Honeycomb or newer, create a\n  // synchronized HashSet of references to reusable bitmaps.\n  if (Utils.hasHoneycomb()) {\n      mReusableBitmaps =\n              Collections.synchronizedSet(new HashSet<SoftReference<Bitmap>>());\n  }\n\n  mMemoryCache = new LruCache<String, BitmapDrawable>(mCacheParams.memCacheSize) {\n\n      // Notify the removed entry that is no longer being cached.\n      @Override\n      protected void entryRemoved(boolean evicted, String key,\n              BitmapDrawable oldValue, BitmapDrawable newValue) {\n          if (RecyclingBitmapDrawable.class.isInstance(oldValue)) {\n              // The removed entry is a recycling drawable, so notify it\n              // that it has been removed from the memory cache.\n              ((RecyclingBitmapDrawable) oldValue).setIsCached(false);\n          } else {\n              // The removed entry is a standard BitmapDrawable.\n              if (Utils.hasHoneycomb()) {\n                  // We're running on Honeycomb or later, so add the bitmap\n                  // to a SoftReference set for possible use with inBitmap later.\n                  mReusableBitmaps.add\n                          (new SoftReference<Bitmap>(oldValue.getBitmap()));\n              }\n          }\n      }\n  ....\n  }\n  ```\n\n- ##### 使用已经存在的Bitmap\n\n  ```java\n  public static Bitmap decodeSampledBitmapFromFile(String filename,\n          int reqWidth, int reqHeight, ImageCache cache) {\n\n      final BitmapFactory.Options options = new BitmapFactory.Options();\n      ...\n      BitmapFactory.decodeFile(filename, options);\n      ...\n\n      // If we're running on Honeycomb or newer, try to use inBitmap.\n      if (Utils.hasHoneycomb()) {\n          addInBitmapOptions(options, cache);\n      }\n      ...\n      return BitmapFactory.decodeFile(filename, options);\n  }\n  //查找适合且可复用的bitmap，设置到inBitmap的属性值，\n  private static void addInBitmapOptions(BitmapFactory.Options options,\n          ImageCache cache) {\n      // inBitmap only works with mutable bitmaps, so force the decoder to\n      // return mutable bitmaps.\n      options.inMutable = true;\n\n      if (cache != null) {\n          // Try to find a bitmap to use for inBitmap.\n          Bitmap inBitmap = cache.getBitmapFromReusableSet(options);\n\n          if (inBitmap != null) {\n              // If a suitable bitmap has been found, set it as the value of\n              // inBitmap.\n              options.inBitmap = inBitmap;\n          }\n      }\n  }\n\n  // This method iterates through the reusable bitmaps, looking for one\n  // to use for inBitmap:\n  protected Bitmap getBitmapFromReusableSet(BitmapFactory.Options options) {\n          Bitmap bitmap = null;\n\n      if (mReusableBitmaps != null && !mReusableBitmaps.isEmpty()) {\n          synchronized (mReusableBitmaps) {\n              final Iterator<SoftReference<Bitmap>> iterator\n                      = mReusableBitmaps.iterator();\n              Bitmap item;\n\n              while (iterator.hasNext()) {\n                  item = iterator.next().get();\n\n                  if (null != item && item.isMutable()) {\n                      // Check to see it the item can be used for inBitmap.\n                      if (canUseForInBitmap(item, options)) {\n                          bitmap = item;\n\n                          // Remove from reusable set so it can't be used again.\n                          iterator.remove();\n                          break;\n                      }\n                  } else {\n                      // Remove from the set if the reference has been cleared.\n                      iterator.remove();\n                  }\n              }\n          }\n      }\n      return bitmap;\n  }\n  ```\n\n  判断Bitmap是否符合inBitmap的要求：\n\n  ```java\n  static boolean canUseForInBitmap(\n          Bitmap candidate, BitmapFactory.Options targetOptions) {\n\n      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n          // From Android 4.4 (KitKat) onward we can re-use if the byte size of\n          // the new bitmap is smaller than the reusable bitmap candidate\n          // allocation byte count.\n          int width = targetOptions.outWidth / targetOptions.inSampleSize;\n          int height = targetOptions.outHeight / targetOptions.inSampleSize;\n          int byteCount = width * height * getBytesPerPixel(candidate.getConfig());\n          return byteCount <= candidate.getAllocationByteCount();\n      }\n\n      // On earlier versions, the dimensions must match exactly and the inSampleSize must be 1\n      return candidate.getWidth() == targetOptions.outWidth\n              && candidate.getHeight() == targetOptions.outHeight\n              && targetOptions.inSampleSize == 1;\n  }\n\n  /**\n   * A helper function to return the byte usage per pixel of a bitmap based on its configuration.\n   */\n  static int getBytesPerPixel(Config config) {\n      if (config == Config.ARGB_8888) {\n          return 4;\n      } else if (config == Config.RGB_565) {\n          return 2;\n      } else if (config == Config.ARGB_4444) {\n          return 2;\n      } else if (config == Config.ALPHA_8) {\n          return 1;\n      }\n      return 1;\n  }\n  ```\n\n#### 5、在UI上显示Bitmap\n\n本节学习如何综合使用后台线程与缓存机制，将图像加载到ViewPager或Grid View控件上，并处理并发与配置改变的问题。\n\n- ##### 实现加载图片到View Pager\n\n  `Swipe View Pattern`是滑动显示的设计模型。可通过`PagerAdapter`与`ViewPager`控件实现该效果。而`FragmentStatePagerAdapter`更为合适，因为其能在Fragment状态改变时保存状态值。减少内存消耗。少量图片的话，`PagerAdapter与FragmentPagerAdapter`都可。\n\n  ```java\n  public class ImageDetailActivity extends FragmentActivity {\n      public static final String EXTRA_IMAGE = \"extra_image\";\n\n      private ImagePagerAdapter mAdapter;//adapter\n      private ViewPager mPager;//viewpager\n\n      // 用于传递给viewpager 的adapter的图片数据资源\n      public final static Integer[] imageResIds = new Integer[] {\n              R.drawable.sample_image_1, R.drawable.sample_image_2, R.drawable.sample_image_3,\n              R.drawable.sample_image_4, R.drawable.sample_image_5, R.drawable.sample_image_6,\n              R.drawable.sample_image_7, R.drawable.sample_image_8, R.drawable.sample_image_9};\n\n      @Override\n      public void onCreate(Bundle savedInstanceState) {\n          super.onCreate(savedInstanceState);\n          setContentView(R.layout.image_detail_pager); // 就一个viewpager\n  \t\t//初始化控件，并绑定适配器\n          mAdapter = new ImagePagerAdapter(getSupportFragmentManager(), imageResIds.length);\n          mPager = (ViewPager) findViewById(R.id.pager);\n          mPager.setAdapter(mAdapter);\n      }\n\n      public static class ImagePagerAdapter extends FragmentStatePagerAdapter {\n          private final int mSize;\n  \t\t//\n          public ImagePagerAdapter(FragmentManager fm, int size) {\n              super(fm);\n              mSize = size;\n          }\n\n          @Override\n          public int getCount() {\n              return mSize;\n          }\n  \t\t//返回fragment对象\n          @Override\n          public Fragment getItem(int position) {\n              return ImageDetailFragment.newInstance(position);\n          }\n      }\n  }\n  ```\n\n  Fragment里面包含Image View控件\n\n  ```java\n  public class ImageDetailFragment extends Fragment {\n      private static final String IMAGE_DATA_EXTRA = \"resId\";\n      private int mImageNum;//图像数目\n      private ImageView mImageView;//image view控件\n  \t//构造函数，接收图片数目参数\n      static ImageDetailFragment newInstance(int imageNum) {\n          final ImageDetailFragment f = new ImageDetailFragment();\n          final Bundle args = new Bundle();\n          args.putInt(IMAGE_DATA_EXTRA, imageNum);\n          f.setArguments(args);\n          return f;\n      }\n\n      // Empty constructor, required as per Fragment docs\n      public ImageDetailFragment() {}\n\n      @Override\n      public void onCreate(Bundle savedInstanceState) {\n          super.onCreate(savedInstanceState);\n          mImageNum = getArguments() != null ? getArguments().getInt(IMAGE_DATA_EXTRA) : -1;\n      }\n\n      @Override\n      public View onCreateView(LayoutInflater inflater, ViewGroup container,\n              Bundle savedInstanceState) {\n          // image_detail_fragment.xml contains just an ImageView\n          final View v = inflater.inflate(R.layout.image_detail_fragment, container, false);\n          mImageView = (ImageView) v.findViewById(R.id.imageView);\n          return v;\n      }\n\n      @Override\n      public void onActivityCreated(Bundle savedInstanceState) {\n          super.onActivityCreated(savedInstanceState);\n          final int resId = ImageDetailActivity.imageResIds[mImageNum];\n          mImageView.setImageResource(resId); // Load image into ImageView\n      }\n  }\n  ```\n\n  ==**如上方式，可能会阻塞UI线程**==，改用AsyncTask最好：\n\n  ```java\n  public class ImageDetailActivity extends FragmentActivity {\n      ...\n  \t//后台加载图片\n      public void loadBitmap(int resId, ImageView imageView) {\n          mImageView.setImageResource(R.drawable.image_placeholder);\n        //后台执行\n          BitmapWorkerTask task = new BitmapWorkerTask(mImageView);\n          task.execute(resId);\n      }\n\n      ... // include BitmapWorkerTask class\n  }\n\n  public class ImageDetailFragment extends Fragment {\n      ...\n\n      @Override\n      public void onActivityCreated(Bundle savedInstanceState) {\n          super.onActivityCreated(savedInstanceState);\n          if (ImageDetailActivity.class.isInstance(getActivity())) {\n              final int resId = ImageDetailActivity.imageResIds[mImageNum];\n              //调用上面的后台加载图片\n              ((ImageDetailActivity) getActivity()).loadBitmap(resId, mImageView);\n          }\n      }\n  }\n  ```\n\n  后台的操作可以更为合理，加载并缓存图像\n\n  ```java\n  public class ImageDetailActivity extends FragmentActivity {\n      ...\n      private LruCache mMemoryCache;\n      @Override\n      public void onCreate(Bundle savedInstanceState) {\n          ...\n          // initialize LruCache as per Use a Memory Cache section\n      }\n      public void loadBitmap(int resId, ImageView imageView) {\n          final String imageKey = String.valueOf(resId);\n\n          final Bitmap bitmap = mMemoryCache.get(imageKey);\n          if (bitmap != null) {\n              mImageView.setImageBitmap(bitmap);\n          } else {\n              mImageView.setImageResource(R.drawable.image_placeholder);\n              BitmapWorkerTask task = new BitmapWorkerTask(mImageView);\n              task.execute(resId);\n          }\n      }\n      ... // include updated BitmapWorkerTask from Use a Memory Cache section\n  }\n  ```\n\n- ##### 实现加载图片到GridView\n\n  如下场景，Fragment内置Grid View，item是Image View：\n\n  ```java\n  public class ImageGridFragment extends Fragment implements AdapterView.OnItemClickListener {\n      private ImageAdapter mAdapter;\n\n      //静态加载的图片资源，用于适配器\n      public final static Integer[] imageResIds = new Integer[] {\n              R.drawable.sample_image_1, R.drawable.sample_image_2, R.drawable.sample_image_3,\n              R.drawable.sample_image_4, R.drawable.sample_image_5, R.drawable.sample_image_6,\n              R.drawable.sample_image_7, R.drawable.sample_image_8, R.drawable.sample_image_9};\n\n      // Empty constructor as per Fragment docs\n      public ImageGridFragment() {}\n\n      @Override\n      public void onCreate(Bundle savedInstanceState) {\n          super.onCreate(savedInstanceState);\n          mAdapter = new ImageAdapter(getActivity());\n      }\n\n      @Override\n      public View onCreateView(\n              LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        //初始化控件，并绑定适配器，注册监听  \n        final View v = inflater.inflate(R.layout.image_grid_fragment, container, false);\n          final GridView mGridView = (GridView) v.findViewById(R.id.gridView);\n          mGridView.setAdapter(mAdapter);\n          mGridView.setOnItemClickListener(this);\n          return v;\n      }\n\n      @Override\n      public void onItemClick(AdapterView parent, View v, int position, long id) {\n          final Intent i = new Intent(getActivity(), ImageDetailActivity.class);\n          i.putExtra(ImageDetailActivity.EXTRA_IMAGE, position);\n          startActivity(i);\n      }\n\n      private class ImageAdapter extends BaseAdapter {\n          private final Context mContext;\n\n          public ImageAdapter(Context context) {\n              super();\n              mContext = context;\n          }\n\n          @Override\n          public int getCount() {\n              return imageResIds.length;\n          }\n\n          @Override\n          public Object getItem(int position) {\n              return imageResIds[position];\n          }\n\n          @Override\n          public long getItemId(int position) {\n              return position;\n          }\n\n          @Override\n          public View getView(int position, View convertView, ViewGroup container) {\n              ImageView imageView;\n              if (convertView == null) { // 判断是否是循环复用的item view，不是的话，需要初始化一些属性。\n                  imageView = new ImageView(mContext);\n                  imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);\n                  imageView.setLayoutParams(new GridView.LayoutParams(\n                          LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n              } else {\n                  imageView = (ImageView) convertView;\n              }\n          //请注意下面的代码，如此可能会耗时，阻塞UI\n          imageView.setImageResource(imageResIds[position]); // Load image into ImageView\n          return imageView;\n      }\n  }\n  ```\n\n  考虑UI的可能阻塞，以及GridView引起的并发问题，代码优化如下：\n\n  ```java\n  public class ImageGridFragment extends Fragment implements AdapterView.OnItemClickListener {\n      ...\n\n      private class ImageAdapter extends BaseAdapter {\n          ...\n\n          @Override\n          public View getView(int position, View convertView, ViewGroup container) {\n              ...\n              loadBitmap(imageResIds[position], imageView)\n              return imageView;\n          }\n      }\n  \t//异步加载图像\n      public void loadBitmap(int resId, ImageView imageView) {\n          if (cancelPotentialWork(resId, imageView)) {\n              final BitmapWorkerTask task = new BitmapWorkerTask(imageView);\n              final AsyncDrawable asyncDrawable =\n                      new AsyncDrawable(getResources(), mPlaceHolderBitmap, task);\n              imageView.setImageDrawable(asyncDrawable);\n              task.execute(resId);\n          }\n      }\n  \t//用于绑定到imageView的drawable\n      static class AsyncDrawable extends BitmapDrawable {\n          private final WeakReference bitmapWorkerTaskReference;\n\n          public AsyncDrawable(Resources res, Bitmap bitmap,\n                  BitmapWorkerTask bitmapWorkerTask) {\n              super(res, bitmap);\n              bitmapWorkerTaskReference =\n                  new WeakReference(bitmapWorkerTask);\n          }\n\n          public BitmapWorkerTask getBitmapWorkerTask() {\n              return bitmapWorkerTaskReference.get();\n          }\n      }\n  \t//判断imageview是否已经有加载图像的task\n      public static boolean cancelPotentialWork(int data, ImageView imageView) {\n          final BitmapWorkerTask bitmapWorkerTask = getBitmapWorkerTask(imageView);\n\n          if (bitmapWorkerTask != null) {\n              final int bitmapData = bitmapWorkerTask.data;\n              if (bitmapData != data) {\n                  // Cancel previous task\n                  bitmapWorkerTask.cancel(true);\n              } else {\n                  // The same work is already in progress\n                  return false;\n              }\n          }\n          // No task associated with the ImageView, or an existing task was cancelled\n          return true;\n      }\n  \t//获取图像加载task\n      private static BitmapWorkerTask getBitmapWorkerTask(ImageView imageView) {\n         if (imageView != null) {\n             final Drawable drawable = imageView.getDrawable();\n             if (drawable instanceof AsyncDrawable) {\n                 final AsyncDrawable asyncDrawable = (AsyncDrawable) drawable;\n                 return asyncDrawable.getBitmapWorkerTask();\n             }\n          }\n          return null;\n      }\n\n      ... // include updated BitmapWorkerTask class\n  ```\n\n### 2、使用OpenGL ES显示图像\n\nAndroid平台提供了OpenGL ES接口，帮助我们实现更为丰富的图像显示效果。本章记述OpenGL构建应用的基础知识，包括配置、绘制对象、移动图形以及响应事件。\n\n**注意，不要混用OpenGL ES 1.x版和2.x版本的接口，因为并不通用。**\n\n#### 1、建立OpenGL ES的环境\n\n在应用中使用OpenGL ES来绘制图像，需要给它一个容器。通常实现`GLSurfaceView`做容器和`GLSurfaceView.Renderer`类来控制绘制。`GLSurfaceView`一般用于全屏或者接近全屏的View绘制，若是小范围，可以用`TextureView`。亦或者自定义View继承SurfaceView，但是会费事。\n\n- ##### 在Manifest中声明使用OpenGL ES\n\n  ```xml\n  <uses-feature android.glEsVersion=\"0x00020000\" android.required=\"true\"/>\n  ```\n\n  如果使用图像纹理压缩，则必须在清单中声明支持的压缩格式：\n\n  ```xml\n  <supports-gl-texture android:name=\"GL_OES_compressed_ETC1_RGB8_texture\"/>\n  <supports-gl-texture android:name=\"GL_OES_compressed_paletted_texture\"/>\n  ...\n  ```\n\n  使用OpenGL ES的App可以Activity中使用GLSurfaceView布局。\n\n  ```java\n  //要求api>=8\n  public class OpenGLES20Activity extends Activity {\n\n      private GLSurfaceView mGLView;\n\n      @Override\n      public void onCreate(Bundle savedInstanceState) {\n          super.onCreate(savedInstanceState);\n  \t\t//创建GLSurfaceView对象，设置为Activity布局。\n          mGLView = new MyGLSurfaceView(this);\n          setContentView(mGLView);\n      }\n  }\n  ```\n- ##### 构建一个GLSurfaceView对象\n    GLSurfaceView是一个特殊的view，用于绘制OpenGL ES图像的一个容器。其内部类GLSurfaceView.Renderer用于控制绘制。\n    一般需要继承`GLSurfaceView`来用于自主控制各类触控事件。\n    ```java\n    class MyGLSurfaceView extends GLSurfaceView {\n\n        private final MyGLRenderer mRenderer;\n\n        public MyGLSurfaceView(Context context){\n            super(context);\n\n            // Create an OpenGL ES 2.0 context\n            setEGLContextClientVersion(2);\n\n            mRenderer = new MyGLRenderer();\n\n            // Set the Renderer for drawing on the GLSurfaceView\n            setRenderer(mRenderer);\n            // Render the view only when there is a change in the drawing data\n            //设置此属性的话，除非调用requestRender()，否则GLSurfaceView不会刷新。只当有图像变化才会刷新。\n            setRenderMode(GLSurfaceView.RENDERMODE_WHEN_DIRTY);\n        }\n    }\n    ```\n- ##### 构建一个渲染类\n    `GLSurfaceView.Renderer`被称为渲染器，控制图像绘制。Android可调用：\n\n    - onSurfaceCreated();调用一次，用于创建OpenGL ES环境\n    - onDrawFrame();每次重绘View时调用。\n    - onSurfaceChanged();View的几何形态变化时调用。\n\n    示例：\n    ```java\n    public class MyGLRenderer implements GLSurfaceView.Renderer {\n\n        public void onSurfaceCreated(GL10 unused, EGLConfig config) {\n            // 设置背景框架颜色，此处为黑色，ARGB值\n            GLES20.glClearColor(0.0f, 0.0f, 0.0f, 1.0f);\n        }\n\n        public void onDrawFrame(GL10 unused) {\n            // 重绘背景色\n            GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT);\n        }\n\n        public void onSurfaceChanged(GL10 unused, int width, int height) {\n            GLES20.glViewport(0, 0, width, height);\n        }\n    }\n    ```\n#### 2、定义shapes\n了解了OpenGL ES的基本概念后，便可以学习如何绘制基本图形。\n- 定义一个三角形\n    OpenGL ES允许我们使用三维空间坐标来绘制图形，通常会定义float坐标数组，为了高效此处使用了\n    ByteBuffer：\n    ```java\n    public class Triangle {\n\n        private FloatBuffer vertexBuffer;//浮点数组\n\n        // 数组中含有的坐标点数\n        static final int COORDS_PER_VERTEX = 3;\n        static float triangleCoords[] = {   //坐标点逆时针顺序\n                0.0f,  0.622008459f, 0.0f, // 顶点\n                -0.5f, -0.311004243f, 0.0f, // 左下角\n                0.5f, -0.311004243f, 0.0f  //右下角\n        };\n\n        //设置RGB，Alpha\n        float color[] = { 0.63671875f, 0.76953125f, 0.22265625f, 1.0f };\n\n        public Triangle() {\n            // initialize vertex byte buffer for shape coordinates\n            ByteBuffer bb = ByteBuffer.allocateDirect(\n                    // (number of coordinate values * 4 bytes per float)\n                    triangleCoords.length * 4);\n            // use the device hardware's native byte order\n            bb.order(ByteOrder.nativeOrder());\n\n            // create a floating point buffer from the ByteBuffer\n            vertexBuffer = bb.asFloatBuffer();\n            // add the coordinates to the FloatBuffer\n            vertexBuffer.put(triangleCoords);\n            // set the buffer to read the first coordinate\n            vertexBuffer.position(0);\n        }\n    }\n    ```\n    默认情况下，OpenGL ES会有一个[0,0,0]的三维坐标系。更多的需要参考OpenGL手册。\n- 定义一个矩形\n    如下示例演示通过定义两个三角形来实现一个矩形。\n    ![矩形](第四篇、Android图像与动画/ccw-square.png)\n      ```java\n      //绘制两个三角形，所以使用一个绘制列表来通知OpenGL如何绘制顶点。\n      public class Square {\n\n          private FloatBuffer vertexBuffer;\n          private ShortBuffer drawListBuffer;\n\n          // number of coordinates per vertex in this array\n          static final int COORDS_PER_VERTEX = 3;\n          static float squareCoords[] = {\n                  -0.5f,  0.5f, 0.0f,   // top left\n                  -0.5f, -0.5f, 0.0f,   // bottom left\n                  0.5f, -0.5f, 0.0f,   // bottom right\n                  0.5f,  0.5f, 0.0f }; // top right\n\n          private short drawOrder[] = { 0, 1, 2, 0, 2, 3 }; // order to draw vertices\n\n          public Square() {\n              // initialize vertex byte buffer for shape coordinates\n              ByteBuffer bb = ByteBuffer.allocateDirect(\n              // (# of coordinate values * 4 bytes per float)\n                      squareCoords.length * 4);\n              bb.order(ByteOrder.nativeOrder());\n              vertexBuffer = bb.asFloatBuffer();\n              vertexBuffer.put(squareCoords);\n              vertexBuffer.position(0);\n\n              // initialize byte buffer for the draw list\n              ByteBuffer dlb = ByteBuffer.allocateDirect(\n              // (# of coordinate values * 2 bytes per short)\n                      drawOrder.length * 2);\n              dlb.order(ByteOrder.nativeOrder());\n              drawListBuffer = dlb.asShortBuffer();\n              drawListBuffer.put(drawOrder);\n              drawListBuffer.position(0);\n          }\n      }\n      ```\n#### 3、绘制shapes\n\n如上小节只是介绍了如何定义一个shape图形，本节将介绍如何绘制出需要的图形。出于内存和效率考虑，\n除非加载的图形变化，一般都在`onSurfaceCreated()`中初始化shape图形。\n- ##### 初始化图形\n    ```java\n    public class MyGLRenderer implements GLSurfaceView.Renderer {\n\n        ...\n        private Triangle mTriangle;\n        private Square   mSquare;\n\n        public void onSurfaceCreated(GL10 unused, EGLConfig config) {\n            ...\n\n            // initialize a triangle\n            mTriangle = new Triangle();\n            // initialize a square\n            mSquare = new Square();\n        }\n        ...\n    }\n    ```\n\n    使用OpenGL ES 绘制一个定义好的图形，需要如下步骤：\n\n    - 顶点着色器（Vertex Shader）：用于渲染顶点的OpenGL ES 代码\n    - 片段着色器（Fragment Shader）：使用颜色和纹理渲染图形表面的OpenGL ES 代码\n    - 程式（Program）： OpenGL ES对象，包含各类着色器等。\n\n    示例:\n    ```java\n    private final String vertexShaderCode =\n        \"attribute vec4 vPosition;\" +\n        \"void main() {\" +\n        \"  gl_Position = vPosition;\" +\n        \"}\";\n\n    private final String fragmentShaderCode =\n        \"precision mediump float;\" +\n        \"uniform vec4 vColor;\" +\n        \"void main() {\" +\n        \"  gl_FragColor = vColor;\" +\n        \"}\";\n\n    ...\n    ```\n    着色器包含OpenGL Shading Language（GLSL）代码，需要先编译，\n    ```java\n    public static int loadShader(int type, String shaderCode){\n\n        // create a vertex shader type (GLES20.GL_VERTEX_SHADER)\n        // or a fragment shader type (GLES20.GL_FRAGMENT_SHADER)\n        int shader = GLES20.glCreateShader(type);\n\n        // add the source code to the shader and compile it\n        GLES20.glShaderSource(shader, shaderCode);\n        GLES20.glCompileShader(shader);\n\n        return shader;\n    }\n    ```\n- ##### 画图\n    为了绘制你的图形，你必须编译着色器代码，将它们添加至一个OpenGL ES Program对象中，然后执行链接。\n    在你的绘制对象的构造函数里做这些事情，这样上述步骤就只用执行一次。\n\n    > Note：编译OpenGL ES着色器及链接操作对于CPU周期和处理时间而言，消耗是巨大的，所以你应该避免重复执行这些事情。\n    > 如果在执行期间不知道着色器的内容，那么你应该在构建你的应用时，确保它们只被创建了一次，并且缓存以备后续使用。\n\n    ```java\n    public class Triangle() {\n        ...\n\n         private final int mProgram;\n\n        public Triangle() {\n            ...\n\n            int vertexShader = MyGLRenderer.loadShader(GLES20.GL_VERTEX_SHADER,\n                                                vertexShaderCode);\n            int fragmentShader = MyGLRenderer.loadShader(GLES20.GL_FRAGMENT_SHADER,\n                                                fragmentShaderCode);\n\n            // create empty OpenGL ES Program\n            mProgram = GLES20.glCreateProgram();\n\n            // add the vertex shader to program\n            GLES20.glAttachShader(mProgram, vertexShader);\n            // add the fragment shader to program\n            GLES20.glAttachShader(mProgram, fragmentShader);\n\n            // creates OpenGL ES program executables\n            GLES20.glLinkProgram(mProgram);\n        }\n    }\n    ```\n    绘制属性会根据图形而变化，就需要将变化逻辑一同写入绘制参数，\n    ```java\n    private int mPositionHandle;\n    private int mColorHandle;\n\n    private final int vertexCount = triangleCoords.length / COORDS_PER_VERTEX;\n    private final int vertexStride = COORDS_PER_VERTEX * 4; // 4 bytes per vertex\n\n    public void draw() {\n        // Add program to OpenGL ES environment\n        GLES20.glUseProgram(mProgram);\n\n        // get handle to vertex shader's vPosition member\n        mPositionHandle = GLES20.glGetAttribLocation(mProgram, \"vPosition\");\n\n        // Enable a handle to the triangle vertices\n        GLES20.glEnableVertexAttribArray(mPositionHandle);\n\n        // Prepare the triangle coordinate data\n        GLES20.glVertexAttribPointer(mPositionHandle, COORDS_PER_VERTEX,\n                                    GLES20.GL_FLOAT, false,\n                                    vertexStride, vertexBuffer);\n\n        // get handle to fragment shader's vColor member\n        mColorHandle = GLES20.glGetUniformLocation(mProgram, \"vColor\");\n\n        // Set color for drawing the triangle\n        GLES20.glUniform4fv(mColorHandle, 1, color, 0);\n\n        // Draw the triangle\n        GLES20.glDrawArrays(GLES20.GL_TRIANGLES, 0, vertexCount);\n\n        // Disable vertex array\n        GLES20.glDisableVertexAttribArray(mPositionHandle);\n    }\n    ```\n    如此只需要在渲染器的`onDrawFrame()`中调用上面的`onDraw()`方法即可。\n    ![绘制图形](第四篇、Android图像与动画/ogl-triangle.png)\n#### 3、运用投影和相机视角\n在OpenGL ES 环境中，利用投影和相机视角可以将图像更为逼真的显示。\n1. 投影(Projection)：此类变化基于GLSurfaceView的长宽。\n2. 相机视角(Camera View):此类变化基于OpenGL ES 的虚拟相机。\n\n- ##### 定义一个投影\n  投影变换的数据计算在GLSurfaceView.Render类中的onSurfaceChanged()中执行。\n```java\n// mMVPMatrix is an abbreviation for \"Model View Projection Matrix\"\nprivate final float[] mMVPMatrix = new float[16];\nprivate final float[] mProjectionMatrix = new float[16];\nprivate final float[] mViewMatrix = new float[16];\n\n@Override\npublic void onSurfaceChanged(GL10 unused, int width, int height) {\n    GLES20.glViewport(0, 0, width, height);\n\n    float ratio = (float) width / height;\n\n    // this projection matrix is applied to object coordinates\n    // in the onDrawFrame() method\n    Matrix.frustumM(mProjectionMatrix, 0, -ratio, ratio, -1, 1, 3, 7);\n}\n```\n> 若是绘图只是用投影，会让图像显得空旷，最好结合相机视角来绘制。\n\n- ##### 定义一个相机视角\n  使用`Matrix.setLookAtM()`来换算计算，再结合如上投影换算：\n```java\n@Override\npublic void onDrawFrame(GL10 unused) {\n    ...\n    // Set the camera position (View matrix)\n    Matrix.setLookAtM(mViewMatrix, 0, 0, 0, -3, 0f, 0f, 0f, 0f, 1.0f, 0.0f);\n\n    // Calculate the projection and view transformation\n    Matrix.multiplyMM(mMVPMatrix, 0, mProjectionMatrix, 0, mViewMatrix, 0);\n\n    // Draw shape\n    mTriangle.draw(mMVPMatrix);\n}\n```\n将上一节的三角形使用投影和视角绘制：\n```java\npublic class Triangle {\n    //为顶点添加渲染着色器，Matrix\n    private final String vertexShaderCode =\n        // This matrix member variable provides a hook to manipulate\n        // the coordinates of the objects that use this vertex shader\n        \"uniform mat4 uMVPMatrix;\" +\n        \"attribute vec4 vPosition;\" +\n        \"void main() {\" +\n        // the matrix must be included as a modifier of gl_Position\n        // Note that the uMVPMatrix factor *must be first* in order\n        // for the matrix multiplication product to be correct.\n        \"  gl_Position = uMVPMatrix * vPosition;\" +\n        \"}\";\n\n    // Use to access and set the view transformation\n    private int mMVPMatrixHandle;\n\n    ...\n}\n```\n修改`onDraw ()`方法\n```java\npublic void draw(float[] mvpMatrix) { // pass in the calculated transformation matrix\n    ...\n\n    // get handle to shape's transformation matrix\n    mMVPMatrixHandle = GLES20.glGetUniformLocation(mProgram, \"uMVPMatrix\");\n\n    // Pass the projection and view transformation to the shader\n    GLES20.glUniformMatrix4fv(mMVPMatrixHandle, 1, false, mvpMatrix, 0);\n\n    // Draw the triangle\n    GLES20.glDrawArrays(GLES20.GL_TRIANGLES, 0, vertexCount);\n\n    // Disable vertex array\n    GLES20.glDisableVertexAttribArray(mPositionHandle);\n}\n```\n效果如图：![视角绘图](第四篇、Android图像与动画/ogl-triangle-projected.png)\n#### 4、添加移动\nOpenGL 区别于Android的canvas和Drawable图形框架，在于其提供的特殊功能，如3D效果等。\n- ##### 旋转图像\n  在OpenGL ES2.0中新增一个变化矩阵，结合之前的投影和视角，来绘制图形移动。\n```java\nprivate float[] mRotationMatrix = new float[16];\npublic void onDrawFrame(GL10 gl) {\n    float[] scratch = new float[16];\n\n    ...\n\n    // Create a rotation transformation for the triangle\n    long time = SystemClock.uptimeMillis() % 4000L;\n    float angle = 0.090f * ((int) time);\n    Matrix.setRotateM(mRotationMatrix, 0, angle, 0, 0, -1.0f);\n\n    // Combine the rotation matrix with the projection and camera view\n    // Note that the mMVPMatrix factor *must be first* in order\n    // for the matrix multiplication product to be correct.\n    Matrix.multiplyMM(scratch, 0, mMVPMatrix, 0, mRotationMatrix, 0);\n\n    // Draw triangle\n    mTriangle.draw(scratch);\n}\n```\n> **Note:** 不要将`GLSurfaceView.RENDERMODE_WHEN_DIRTY`注释掉，否则就可能不会移动，也不会渲染。\n\n- ##### 启用连续渲染\n```java\npublic MyGLSurfaceView(Context context) {\n    ...\n    // Render the view only when there is a change in the drawing data.\n    // To allow the triangle to rotate automatically, this line is commented out:\n    //setRenderMode(GLSurfaceView.RENDERMODE_WHEN_DIRTY);\n}\n```\n#### 5、响应触摸事件\n炫酷的图形图像，也可以和用户有良好的交互体验。重写`GLSurfaceView`类的`onTouchEvent()`方法\n来响应触摸事件。\n- ##### 注册监听\n  在重写`onTouchEvent()`方法后，想要完成事件相应，就需要注册监听。\n```java\nprivate final float TOUCH_SCALE_FACTOR = 180.0f / 320;\nprivate float mPreviousX;\nprivate float mPreviousY;\n//复写onTouchEvent方法，本文用于响应MotionEvent.ACTION_MOVE事件\n@Override\npublic boolean onTouchEvent(MotionEvent e) {\n    // MotionEvent reports input details from the touch screen\n    // and other input controls. In this case, you are only\n    // interested in events where the touch position changed.\n\n    float x = e.getX();\n    float y = e.getY();\n\n    switch (e.getAction()) {\n        case MotionEvent.ACTION_MOVE:\n\n            float dx = x - mPreviousX;\n            float dy = y - mPreviousY;\n\n            // reverse direction of rotation above the mid-line\n            if (y > getHeight() / 2) {\n              dx = dx * -1 ;\n            }\n\n            // reverse direction of rotation to left of the mid-line\n            if (x < getWidth() / 2) {\n              dy = dy * -1 ;\n            }\n\n            mRenderer.setAngle(\n                    mRenderer.getAngle() +\n                    ((dx + dy) * TOUCH_SCALE_FACTOR));\n            requestRender();\n    }\n\n    mPreviousX = x;\n    mPreviousY = y;\n    return true;\n}\n```\n如上代码调用`requestRender()`来刷新绘制，通过`setRenderMode()`来提高效率，只有变化时候才绘制：\n```java\npublic MyGLSurfaceView(Context context) {\n    ...\n    // Render the view only when there is a change in the drawing data\n    setRenderMode(GLSurfaceView.RENDERMODE_WHEN_DIRTY);\n}\n```\n- ##### 公开变量旋转角度\n  旋转角度的变量需要public，包括get和set方法\n```java\npublic class MyGLRenderer implements GLSurfaceView.Renderer {\n    ...\n\n    public volatile float mAngle;\n\n    public float getAngle() {\n        return mAngle;\n    }\n\n    public void setAngle(float angle) {\n        mAngle = angle;\n    }\n}\n```\n然后在调用绘制图形的地方，填入角度值，启动旋转。\n```java\npublic void onDrawFrame(GL10 gl) {\n    ...\n    float[] scratch = new float[16];\n\n    // Create a rotation for the triangle\n    // long time = SystemClock.uptimeMillis() % 4000L;\n    // float angle = 0.090f * ((int) time);\n    Matrix.setRotateM(mRotationMatrix, 0, mAngle, 0, 0, -1.0f);\n\n    // Combine the rotation matrix with the projection and camera view\n    // Note that the mMVPMatrix factor *must be first* in order\n    // for the matrix multiplication product to be correct.\n    Matrix.multiplyMM(scratch, 0, mMVPMatrix, 0, mRotationMatrix, 0);\n\n    // Draw triangle\n    mTriangle.draw(scratch);\n}\n```\n滑动效果：![滑动效果](第四篇、Android图像与动画/ogl-triangle-touch.png)\n\n### 3、添加动画\n动画效果可以让我们的App更为炫酷，但是也要在适当的地方和时机使用它。本章主要介绍Android的一些动画效果实现。\n#### 1、View间渐变\n渐变动画通常用于View的切换，淡入淡出效果。[渐变动画](http://hukai.me/android-training-course-in-chinese/animations/anim_crossfade.mp4)\n- ##### 创建View\n  示例，一个进度圈和可滑动的view\n```xml\n<FrameLayout xmlns:android=\"/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n    <ScrollView xmlns:android=\"/apk/res/android\"\n        android:id=\"@+id/content\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\">\n\n        <TextView style=\"?android:textAppearanceMedium\"\n            android:lineSpacingMultiplier=\"1.2\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"@string/lorem_ipsum\"\n            android:padding=\"16dp\" />\n\n    </ScrollView>\n\n    <ProgressBar android:id=\"@+id/loading_spinner\"\n        style=\"?android:progressBarStyleLarge\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_gravity=\"center\" />\n\n</FrameLayout>\n```\n- ##### view设置动画\n  为上面的view设置动画效果，步骤如下：\n\n1. 设置view的成员变量，以备后用。\n2. 先设置淡入的View的visible为gone\n3. 将`config_shortAnimTime`系统属性暂存到成员变量。\n\n示例：\n```java\npublic class CrossfadeActivity extends Activity {\n\n    private View mContentView;\n    private View mLoadingView;\n    private int mShortAnimationDuration;\n\n    ...\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_crossfade);\n\n        mContentView = findViewById(R.id.content);\n        mLoadingView = findViewById(R.id.loading_spinner);\n\n        // Initially hide the content view.\n        mContentView.setVisibility(View.GONE);\n\n        // Retrieve and cache the system's default \"short\" animation time.\n        mShortAnimationDuration = getResources().getInteger(\n                android.R.integer.config_shortAnimTime);\n    }\n}\n```\n- ##### 渐变View\n  完成如上设置后，开始实现View的渐变效果：\n1. 将需要淡入的View的Visible改为VISIBLE，透明度alpha=0\n2. 将淡入的View，alpha从0--1，淡出的View，alpha从1--0\n3. 使用`Animator.AnimatorListener`中的`onAnimationEnd()`来设置淡出的view的visible为gone，即使alpha=0，但是也会占用布局资源，所以需要gone。\n```java\nprivate View mContentView;\nprivate View mLoadingView;\nprivate int mShortAnimationDuration;\n\n...\n\nprivate void crossfade() {\n\n    // Set the content view to 0% opacity but visible, so that it is visible\n    // (but fully transparent) during the animation.\n    mContentView.setAlpha(0f);\n    mContentView.setVisibility(View.VISIBLE);\n\n    // Animate the content view to 100% opacity, and clear any animation\n    // listener set on the view.\n    mContentView.animate()\n            .alpha(1f)\n            .setDuration(mShortAnimationDuration)\n            .setListener(null);\n\n    // Animate the loading view to 0% opacity. After the animation ends,\n    // set its visibility to GONE as an optimization step (it won't\n    // participate in layout passes, etc.)\n    mLoadingView.animate()\n            .alpha(0f)\n            .setDuration(mShortAnimationDuration)\n            .setListener(new AnimatorListenerAdapter() {\n                @Override\n                public void onAnimationEnd(Animator animation) {\n                    mLoadingView.setVisibility(View.GONE);\n                }\n            });\n}\n```\n#### 2、使用Viewpager实现屏幕滑动\n类似View的淡入淡出切换，而屏幕的切换是整个的界面转换，使用`supports library`的ViewPager来实现。\n[ViewPager](http://hukai.me/android-training-course-in-chinese/animations/anim_screenslide.mp4)\n- ##### 创建View\n```xml\n<!-- fragment_screen_slide_page.xml -->\n<ScrollView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:id=\"@+id/content\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\" >\n\n    <TextView style=\"?android:textAppearanceMedium\"\n        android:padding=\"16dp\"\n        android:lineSpacingMultiplier=\"1.2\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"@string/lorem_ipsum\" />\n</ScrollView>\n```\n如上定义一个fragment和text view\n- ##### 创建Fragment\n  创建一个Fragment对象实例来展示view布局。\n```java\nimport android.support.v4.app.Fragment;\n...\npublic class ScreenSlidePageFragment extends Fragment {\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n            Bundle savedInstanceState) {\n        ViewGroup rootView = (ViewGroup) inflater.inflate(\n                R.layout.fragment_screen_slide_page, container, false);\n\n        return rootView;\n    }\n}\n```\n- ##### 添加viewPager\n  ViewPager有内建的滑动手势，配合PagerAdapter来适配数据。需要创建一个包含ViewPager的布局\n```xml\n<!-- activity_screen_slide.xml -->\n<android.support.v4.view.ViewPager\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:id=\"@+id/pager\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\" />\n```\n接下来就是创建一个Activity来关联布局，实现逻辑：\n1. content View中包含上述布局文件\n2. 创建`FragmentStatePagerAdapter`的子类，实现`getItem()`方法，把ScreenSlidePageFragment实例作为新页面补充进来。\n   PagerAdapter还需要实现getCount()方法，它返回 Adapter将要创建页面的总数（例如5个）。\n3. 关联`ViewPager`和`PagerAdapter`\n4. 处理Back按钮，按下变为在虚拟的Fragment栈中回退。如果用户已经在第一个页面了，\n   则在Activity的回退栈（back stack）中回退。\n```java\nimport android.support.v4.app.Fragment;\nimport android.support.v4.app.FragmentManager;\n...\npublic class ScreenSlidePagerActivity extends FragmentActivity {\n    //屏幕页面数目\n    private static final int NUM_PAGES = 5;\n\n    //View Pager对象，用于处理页面切换的容器\n    private ViewPager mPager;\n\n    //页面数据适配器\n    private PagerAdapter mPagerAdapter;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_screen_slide);\n\n        // 初始化数据\n        mPager = (ViewPager) findViewById(R.id.pager);\n        mPagerAdapter = new ScreenSlidePagerAdapter(getSupportFragmentManager());\n        mPager.setAdapter(mPagerAdapter);\n    }\n    //处理返回按钮的点击事件\n    @Override\n    public void onBackPressed() {\n        if (mPager.getCurrentItem() == 0) {\n            //要是第一个页面，返回按钮就是退出\n            super.onBackPressed();\n        } else {\n            //不是第一个页面，返回按钮就是返回上一个页面\n            mPager.setCurrentItem(mPager.getCurrentItem() - 1);\n        }\n    }\n\n    //简单的适配器，用于加入几个页面\n    private class ScreenSlidePagerAdapter extends FragmentStatePagerAdapter {\n        public ScreenSlidePagerAdapter(FragmentManager fm) {\n            super(fm);\n        }\n\n        @Override\n        public Fragment getItem(int position) {\n            return new ScreenSlidePageFragment();\n        }\n\n        @Override\n        public int getCount() {\n            return NUM_PAGES;\n        }\n    }\n}\n```\nViewPager包含有默认的滑屏动画，若要自定义切换动画需要实现`viewpager.transformer`接口，并补充道Viewpager中\n，实现其方法`transformPage()`。该方法会在显示页面滑动时，于其相邻的两个页面间调用。重要的参数就是当前页面\n的位置position，可以根据页面位置来设置不同的动画效果。\n```java\nViewPager mPager = (ViewPager) findViewById(R.id.pager);\n...\nmPager.setPagerTransformer(true,new ZoomOutPagerTransformer());\n```\n- ##### ZoomOutPagerTransformer\n  效果是逐渐褪色的淡出模式[演示](http://hukai.me/android-training-course-in-chinese/animations/anim_page_transformer_zoomout.mp4)\n```java\npublic class ZoomOutPageTransformer implements ViewPager.PageTransformer {\n    private static final float MIN_SCALE = 0.85f;\n    private static final float MIN_ALPHA = 0.5f;\n\n    public void transformPage(View view, float position) {\n        int pageWidth = view.getWidth();\n        int pageHeight = view.getHeight();\n\n        if (position < -1) { // [-Infinity,-1)\n            // This page is way off-screen to the left.\n            view.setAlpha(0);\n\n        } else if (position <= 1) { // [-1,1]\n            // Modify the default slide transition to shrink the page as well\n            float scaleFactor = Math.max(MIN_SCALE, 1 - Math.abs(position));\n            float vertMargin = pageHeight * (1 - scaleFactor) / 2;\n            float horzMargin = pageWidth * (1 - scaleFactor) / 2;\n            if (position < 0) {\n                view.setTranslationX(horzMargin - vertMargin / 2);\n            } else {\n                view.setTranslationX(-horzMargin + vertMargin / 2);\n            }\n\n            // Scale the page down (between MIN_SCALE and 1)\n            view.setScaleX(scaleFactor);\n            view.setScaleY(scaleFactor);\n\n            // Fade the page relative to its size.\n            view.setAlpha(MIN_ALPHA +\n                    (scaleFactor - MIN_SCALE) /\n                    (1 - MIN_SCALE) * (1 - MIN_ALPHA));\n\n        } else { // (1,+Infinity]\n            // This page is way off-screen to the right.\n            view.setAlpha(0);\n        }\n    }\n}\n```\n- ##### Depth Pager Transformer\n  右滑动潜藏效果[video](http://hukai.me/android-training-course-in-chinese/animations/anim_page_transformer_depth.mp4)\n```java\npublic class DepthPageTransformer implements ViewPager.PageTransformer {\n    private static final float MIN_SCALE = 0.75f;\n\n    public void transformPage(View view, float position) {\n        int pageWidth = view.getWidth();\n\n        if (position < -1) { // [-Infinity,-1)\n            // This page is way off-screen to the left.\n            view.setAlpha(0);\n\n        } else if (position <= 0) { // [-1,0]\n            // Use the default slide transition when moving to the left page\n            view.setAlpha(1);\n            view.setTranslationX(0);\n            view.setScaleX(1);\n            view.setScaleY(1);\n\n        } else if (position <= 1) { // (0,1]\n            // Fade the page out.\n            view.setAlpha(1 - position);\n\n            // Counteract the default slide transition\n            view.setTranslationX(pageWidth * -position);\n\n            // Scale the page down (between MIN_SCALE and 1)\n            float scaleFactor = MIN_SCALE\n                    + (1 - MIN_SCALE) * (1 - Math.abs(position));\n            view.setScaleX(scaleFactor);\n            view.setScaleY(scaleFactor);\n\n        } else { // (1,+Infinity]\n            // This page is way off-screen to the right.\n            view.setAlpha(0);\n        }\n    }\n}\n```\n#### 3、实现Card翻转动画\n通过自定义Fragment实现Card翻转效果的view切换。[card](http://hukai.me/android-training-course-in-chinese/animations/anim_card_flip.mp4)\n- ##### 创建Animator\n  创建Card翻转动画，我们需要两个Animator。一个让正面的card的右侧向左翻转渐出，一个让背面的Card向右翻转渐入。我们还需要两个 Animator让背面的card的右侧向左翻转渐入，一个让向右翻转渐入。\n\n**card_flip_left_in.xml**\n```xml\n<set xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <!-- Before rotating, immediately set the alpha to 0. -->\n    <objectAnimator\n        android:valueFrom=\"1.0\"\n        android:valueTo=\"0.0\"\n        android:propertyName=\"alpha\"\n        android:duration=\"0\" />\n\n    <!-- Rotate. -->\n    <objectAnimator\n        android:valueFrom=\"-180\"\n        android:valueTo=\"0\"\n        android:propertyName=\"rotationY\"\n        android:interpolator=\"@android:interpolator/accelerate_decelerate\"\n        android:duration=\"@integer/card_flip_time_full\" />\n\n    <!-- Half-way through the rotation (see startOffset), set the alpha to 1. -->\n    <objectAnimator\n        android:valueFrom=\"0.0\"\n        android:valueTo=\"1.0\"\n        android:propertyName=\"alpha\"\n        android:startOffset=\"@integer/card_flip_time_half\"\n        android:duration=\"1\" />\n</set>\n```\n**card_flip_left_out.xml**\n```xml\n<set xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <!-- Rotate. -->\n    <objectAnimator\n        android:valueFrom=\"0\"\n        android:valueTo=\"180\"\n        android:propertyName=\"rotationY\"\n        android:interpolator=\"@android:interpolator/accelerate_decelerate\"\n        android:duration=\"@integer/card_flip_time_full\" />\n\n    <!-- Half-way through the rotation (see startOffset), set the alpha to 0. -->\n    <objectAnimator\n        android:valueFrom=\"1.0\"\n        android:valueTo=\"0.0\"\n        android:propertyName=\"alpha\"\n        android:startOffset=\"@integer/card_flip_time_half\"\n        android:duration=\"1\" />\n</set>\n```\n**card_flip_right_in.xml**\n```xml\n<set xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <!-- Before rotating, immediately set the alpha to 0. -->\n    <objectAnimator\n        android:valueFrom=\"1.0\"\n        android:valueTo=\"0.0\"\n        android:propertyName=\"alpha\"\n        android:duration=\"0\" />\n\n    <!-- Rotate. -->\n    <objectAnimator\n        android:valueFrom=\"180\"\n        android:valueTo=\"0\"\n        android:propertyName=\"rotationY\"\n        android:interpolator=\"@android:interpolator/accelerate_decelerate\"\n        android:duration=\"@integer/card_flip_time_full\" />\n\n    <!-- Half-way through the rotation (see startOffset), set the alpha to 1. -->\n    <objectAnimator\n        android:valueFrom=\"0.0\"\n        android:valueTo=\"1.0\"\n        android:propertyName=\"alpha\"\n        android:startOffset=\"@integer/card_flip_time_half\"\n        android:duration=\"1\" />\n</set>\n```\n**card_flip_right_out.xml**\n```xml\n<set xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <!-- Rotate. -->\n    <objectAnimator\n        android:valueFrom=\"0\"\n        android:valueTo=\"-180\"\n        android:propertyName=\"rotationY\"\n        android:interpolator=\"@android:interpolator/accelerate_decelerate\"\n        android:duration=\"@integer/card_flip_time_full\" />\n\n    <!-- Half-way through the rotation (see startOffset), set the alpha to 0. -->\n    <objectAnimator\n        android:valueFrom=\"1.0\"\n        android:valueTo=\"0.0\"\n        android:propertyName=\"alpha\"\n        android:startOffset=\"@integer/card_flip_time_half\"\n        android:duration=\"1\" />\n</set>\n```\n- ##### 创建View\n  card的每个面都是一个布局，需要在Fragment中关联展示\n```xml\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"vertical\"\n    android:background=\"#a6c\"\n    android:padding=\"16dp\"\n    android:gravity=\"bottom\">\n\n    <TextView android:id=\"@android:id/text1\"\n        style=\"?android:textAppearanceLarge\"\n        android:textStyle=\"bold\"\n        android:textColor=\"#fff\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"@string/card_back_title\" />\n\n    <TextView style=\"?android:textAppearanceSmall\"\n        android:textAllCaps=\"true\"\n        android:textColor=\"#80ffffff\"\n        android:textStyle=\"bold\"\n        android:lineSpacingMultiplier=\"1.2\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"@string/card_back_description\" />\n\n</LinearLayout>\n```\n另一面：\n```xml\n<ImageView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:src=\"@drawable/image1\"\n    android:scaleType=\"centerCrop\"\n    android:contentDescription=\"@string/description_image_1\" />\n```\n- ##### 创建Fragment\n  Card的正反面都是Fragment，需要创建并关联布局\n```java\npublic class CardFlipActivity extends Activity {\n    ...\n    /**\n     * A fragment representing the front of the card.\n     */\n    public class CardFrontFragment extends Fragment {\n        @Override\n        public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                Bundle savedInstanceState) {\n            return inflater.inflate(R.layout.fragment_card_front, container, false);\n        }\n    }\n\n    /**\n     * A fragment representing the back of the card.\n     */\n    public class CardBackFragment extends Fragment {\n        @Override\n        public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                Bundle savedInstanceState) {\n            return inflater.inflate(R.layout.fragment_card_back, container, false);\n        }\n    }\n}\n```\n- ##### 实现翻转Card动画\n  创建一个framelayout来用于activity展示fragment\n```xml\n<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:id=\"@+id/container\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\" />\n```\n在Activity中实现展示\n```java\npublic class CardFlipActivity extends Activity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_activity_card_flip);\n\n        if (savedInstanceState == null) {\n            getFragmentManager()\n                    .beginTransaction()\n                    .add(R.id.container, new CardFrontFragment())\n                    .commit();\n        }\n    }\n    ...\n}\n```\n如上默认展示了card的正面，需要适时创建card的背面，并实现翻转。\n\n1. 将Fragment转换设置我们刚做的自定义动画\n\n2. 用新Fragment替换当前显示的Fragment，并且应用之前创建的动画到该事件中。\n\n3. 添加之前显示的Fragment到Fragment的回退栈（back stack）中，所以当用户按下 Back 键时，Card会翻转回来。\n\n```java\nprivate void flipCard() {\n    if (mShowingBack) {\n        getFragmentManager().popBackStack();\n        return;\n    }\n\n    // 是否正在翻转\n\n    mShowingBack = true;\n\n    // 创建并执行一个事务，新增fragment并应用自定义动画，且将fragment加入回退栈\n\n    getFragmentManager()\n            .beginTransaction()\n\n            // 使用自定义动画\n            .setCustomAnimations(\n                    R.animator.card_flip_right_in, R.animator.card_flip_right_out,\n                    R.animator.card_flip_left_in, R.animator.card_flip_left_out)\n\n            // 翻转的fragment\n            .replace(R.id.container, new CardBackFragment())\n\n            // 新增事务到回退栈\n            .addToBackStack(null)\n\n            // 提交事务\n            .commit();\n}\n```\n#### 4、View的缩放\nView的动画缩放效果，常用语图片的浏览展示。[scale](http://hukai.me/android-training-course-in-chinese/animations/anim_zoom.mp4)\n- ##### 创建View\n  示例创建了大小两个版本的文件，\n```xml\n<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:id=\"@+id/container\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n    <LinearLayout android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"vertical\"\n        android:padding=\"16dp\">\n\n        <ImageButton\n            android:id=\"@+id/thumb_button_1\"\n            android:layout_width=\"100dp\"\n            android:layout_height=\"75dp\"\n            android:layout_marginRight=\"1dp\"\n            android:src=\"@drawable/thumb1\"\n            android:scaleType=\"centerCrop\"\n            android:contentDescription=\"@string/description_image_1\" />\n\n    </LinearLayout>\n\n    <!-- This initially-hidden ImageView will hold the expanded/zoomed version of\n         the images above. Without transformations applied, it takes up the entire\n         screen. To achieve the \"zoom\" animation, this view's bounds are animated\n         from the bounds of the thumbnail button above, to its final laid-out\n         bounds.\n         -->\n\n    <ImageView\n        android:id=\"@+id/expanded_image\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:visibility=\"invisible\"\n        android:contentDescription=\"@string/description_zoom_touch_close\" />\n\n</FrameLayout>\n```\n- ##### 设置缩放动画\n  监听点击事件，实现缩放效果\n```java\npublic class ZoomActivity extends FragmentActivity {\n    // Hold a reference to the current animator,\n    // so that it can be canceled mid-way.\n    private Animator mCurrentAnimator;\n\n    // The system \"short\" animation time duration, in milliseconds. This\n    // duration is ideal for subtle animations or animations that occur\n    // very frequently.\n    private int mShortAnimationDuration;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_zoom);\n\n        // Hook up clicks on the thumbnail views.\n\n        final View thumb1View = findViewById(R.id.thumb_button_1);\n        thumb1View.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                zoomImageFromThumb(thumb1View, R.drawable.image1);\n            }\n        });\n\n        // Retrieve and cache the system's default \"short\" animation time.\n        mShortAnimationDuration = getResources().getInteger(\n                android.R.integer.config_shortAnimTime);\n    }\n    ...\n}\n```\n- ##### 缩放View\n  缩放View的效果实现：\n1. 高清大图放在IamgeView中，用于放大后再显示。\n2. 计算image View的边界。\n3. 要同步改变四个边界，用`AnimatorSet`\n4. 缩小则是类似逆向如上操作。注意view的属性需要设置gone。\n```java\nprivate void zoomImageFromThumb(final View thumbView, int imageResId) {\n    // If there's an animation in progress, cancel it\n    // immediately and proceed with this one.\n    if (mCurrentAnimator != null) {\n        mCurrentAnimator.cancel();\n    }\n\n    // Load the high-resolution \"zoomed-in\" image.\n    final ImageView expandedImageView = (ImageView) findViewById(\n            R.id.expanded_image);\n    expandedImageView.setImageResource(imageResId);\n\n    // Calculate the starting and ending bounds for the zoomed-in image.\n    // This step involves lots of math. Yay, math.\n    final Rect startBounds = new Rect();\n    final Rect finalBounds = new Rect();\n    final Point globalOffset = new Point();\n\n    // The start bounds are the global visible rectangle of the thumbnail,\n    // and the final bounds are the global visible rectangle of the container\n    // view. Also set the container view's offset as the origin for the\n    // bounds, since that's the origin for the positioning animation\n    // properties (X, Y).\n    thumbView.getGlobalVisibleRect(startBounds);\n    findViewById(R.id.container)\n            .getGlobalVisibleRect(finalBounds, globalOffset);\n    startBounds.offset(-globalOffset.x, -globalOffset.y);\n    finalBounds.offset(-globalOffset.x, -globalOffset.y);\n\n    // Adjust the start bounds to be the same aspect ratio as the final\n    // bounds using the \"center crop\" technique. This prevents undesirable\n    // stretching during the animation. Also calculate the start scaling\n    // factor (the end scaling factor is always 1.0).\n    float startScale;\n    if ((float) finalBounds.width() / finalBounds.height()\n            > (float) startBounds.width() / startBounds.height()) {\n        // Extend start bounds horizontally\n        startScale = (float) startBounds.height() / finalBounds.height();\n        float startWidth = startScale * finalBounds.width();\n        float deltaWidth = (startWidth - startBounds.width()) / 2;\n        startBounds.left -= deltaWidth;\n        startBounds.right += deltaWidth;\n    } else {\n        // Extend start bounds vertically\n        startScale = (float) startBounds.width() / finalBounds.width();\n        float startHeight = startScale * finalBounds.height();\n        float deltaHeight = (startHeight - startBounds.height()) / 2;\n        startBounds.top -= deltaHeight;\n        startBounds.bottom += deltaHeight;\n    }\n\n    // Hide the thumbnail and show the zoomed-in view. When the animation\n    // begins, it will position the zoomed-in view in the place of the\n    // thumbnail.\n    thumbView.setAlpha(0f);\n    expandedImageView.setVisibility(View.VISIBLE);\n\n    // Set the pivot point for SCALE_X and SCALE_Y transformations\n    // to the top-left corner of the zoomed-in view (the default\n    // is the center of the view).\n    expandedImageView.setPivotX(0f);\n    expandedImageView.setPivotY(0f);\n\n    // Construct and run the parallel animation of the four translation and\n    // scale properties (X, Y, SCALE_X, and SCALE_Y).\n    AnimatorSet set = new AnimatorSet();\n    set\n            .play(ObjectAnimator.ofFloat(expandedImageView, View.X,\n                    startBounds.left, finalBounds.left))\n            .with(ObjectAnimator.ofFloat(expandedImageView, View.Y,\n                    startBounds.top, finalBounds.top))\n            .with(ObjectAnimator.ofFloat(expandedImageView, View.SCALE_X,\n            startScale, 1f)).with(ObjectAnimator.ofFloat(expandedImageView,\n                    View.SCALE_Y, startScale, 1f));\n    set.setDuration(mShortAnimationDuration);\n    set.setInterpolator(new DecelerateInterpolator());\n    set.addListener(new AnimatorListenerAdapter() {\n        @Override\n        public void onAnimationEnd(Animator animation) {\n            mCurrentAnimator = null;\n        }\n\n        @Override\n        public void onAnimationCancel(Animator animation) {\n            mCurrentAnimator = null;\n        }\n    });\n    set.start();\n    mCurrentAnimator = set;\n\n    // Upon clicking the zoomed-in image, it should zoom back down\n    // to the original bounds and show the thumbnail instead of\n    // the expanded image.\n    final float startScaleFinal = startScale;\n    expandedImageView.setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View view) {\n            if (mCurrentAnimator != null) {\n                mCurrentAnimator.cancel();\n            }\n\n            // Animate the four positioning/sizing properties in parallel,\n            // back to their original values.\n            AnimatorSet set = new AnimatorSet();\n            set.play(ObjectAnimator\n                        .ofFloat(expandedImageView, View.X, startBounds.left))\n                        .with(ObjectAnimator\n                                .ofFloat(expandedImageView,\n                                        View.Y,startBounds.top))\n                        .with(ObjectAnimator\n                                .ofFloat(expandedImageView,\n                                        View.SCALE_X, startScaleFinal))\n                        .with(ObjectAnimator\n                                .ofFloat(expandedImageView,\n                                        View.SCALE_Y, startScaleFinal));\n            set.setDuration(mShortAnimationDuration);\n            set.setInterpolator(new DecelerateInterpolator());\n            set.addListener(new AnimatorListenerAdapter() {\n                @Override\n                public void onAnimationEnd(Animator animation) {\n                    thumbView.setAlpha(1f);\n                    expandedImageView.setVisibility(View.GONE);\n                    mCurrentAnimator = null;\n                }\n\n                @Override\n                public void onAnimationCancel(Animator animation) {\n                    thumbView.setAlpha(1f);\n                    expandedImageView.setVisibility(View.GONE);\n                    mCurrentAnimator = null;\n                }\n            });\n            set.start();\n            mCurrentAnimator = set;\n        }\n    });\n}\n```\n#### 5、布局动画\n布局动画是一种预加载动画，可以通过创建Layout Transition ，setLayoutTransition（）实现。\n[layout](http://hukai.me/android-training-course-in-chinese/animations/anim_layout_changes.mp4)\n- ##### 创建布局\n  为想开启动画的布局设置`android:animateLayoutChanges`属性为`true`。\n```xml\n<LinearLayout android:id=\"@+id/container\"\n    android:animateLayoutChanges=\"true\"\n    ...\n/>\n```\n- ##### 从布局中增删项目\n  代码中动态修改布局项目，实现动画\n```java\nprivate ViewGroup mContainerView;\n...\nprivate void addItem() {\n    View newView;\n    ...\n    mContainerView.addView(newView, 0);\n}\n```","slug":"第四篇、Android图像与动画","published":1,"updated":"2017-03-28T10:16:48.523Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ndxcfg006488ow6duzijel","content":"<h2 id=\"第四篇、Android图像与动画\"><a href=\"#第四篇、Android图像与动画\" class=\"headerlink\" title=\"第四篇、Android图像与动画\"></a>第四篇、Android图像与动画</h2><p>[TOC]</p>\n<h3 id=\"第1章、高效显示Bitmap\"><a href=\"#第1章、高效显示Bitmap\" class=\"headerlink\" title=\"第1章、高效显示Bitmap\"></a>第1章、高效显示Bitmap</h3><p>本节主要介绍加载处理Bitmap对象常用方法，以避免UI线程阻塞与OOM问题。由于Android设备</p>\n<ul>\n<li>Android单个应用至少16M内存，不同分辨率屏幕的设备要求不同。<code>国内自定义ROM限制也有差异。</code></li>\n<li>Bitmap消耗内存，一张5M的高清照片，使用ARGB_8888方式加载Bitmap，则需要19M左右的内存。</li>\n<li>Android应用一般加载多个Bitmap，预先加载以备显示。</li>\n</ul>\n<p>所以如上三条，需要我们对Bitmap做优化处理。</p>\n<h4 id=\"1、高效加载大图（Loading-Large-Bitmap-Efficiently）\"><a href=\"#1、高效加载大图（Loading-Large-Bitmap-Efficiently）\" class=\"headerlink\" title=\"1、高效加载大图（Loading Large Bitmap Efficiently）\"></a>1、高效加载大图（Loading Large Bitmap Efficiently）</h4><p>本节介绍加载缩小的图片，来避免过多消耗内存，原始大小的图片和超过控件大小和设备分辨率的图片加载，在显示上并无意义，反而带来内存风险。</p>\n<ul>\n<li><h5 id=\"读取位图尺寸与类型（Read-Bitmap-Dimensions-and-Type）\"><a href=\"#读取位图尺寸与类型（Read-Bitmap-Dimensions-and-Type）\" class=\"headerlink\" title=\"读取位图尺寸与类型（Read Bitmap Dimensions and Type）\"></a>读取位图尺寸与类型（Read Bitmap Dimensions and Type）</h5><p><code>BitmapFactory</code>提供了不同类型的decode方法，配有<code>BitmapFactory.Options</code>选项来标记解码方式。</p>\n<p>设置<code>inJustDecodeBounds=true</code>属性可以避免解码时候分配内存。其返回<code>null</code>的Bitmap，但是可以用于获取长宽和类型。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">BitmapFactory.Options options = <span class=\"keyword\">new</span> BitmapFactory.Options();</div><div class=\"line\">options.inJustDecodeBounds = <span class=\"keyword\">true</span>;<span class=\"comment\">//不加载分配内存</span></div><div class=\"line\">BitmapFactory.decodeResource(getResource(),R.drawable.iclauncher,options);</div><div class=\"line\"><span class=\"comment\">//图像长宽</span></div><div class=\"line\"><span class=\"keyword\">int</span> imgWidth = options.outWidth;</div><div class=\"line\"><span class=\"keyword\">int</span> imgHeight = options.outHeight;</div><div class=\"line\">String imgType = options.outMimeType;<span class=\"comment\">//图像类型</span></div></pre></td></tr></table></figure>\n<p><em>一般需要在加载图片前判断图片大小，避免OOM，除非你确保不会OOM</em></p>\n</li>\n<li><h5 id=\"加载缩小版图片到内存（Load-a-Scale-Down-Version-into-Memory）\"><a href=\"#加载缩小版图片到内存（Load-a-Scale-Down-Version-into-Memory）\" class=\"headerlink\" title=\"加载缩小版图片到内存（Load a Scale Down Version into Memory）\"></a>加载缩小版图片到内存（Load a Scale Down Version into Memory）</h5><p>加载缩小版图片也需要考虑一些因素：</p>\n<ul>\n<li>评估完整图片加载需耗内存。</li>\n<li>加载图片可能涉及到的其他内存需求。</li>\n<li>显示图片的控件尺寸。</li>\n<li>设备屏幕的密度和大小。</li>\n</ul>\n<p>BitmapFactory.Options中设置<code>inSampleSize</code>来确定缩放比。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 计算图像缩放比</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">calculateInSampleSize</span><span class=\"params\">(</span></span></div><div class=\"line\">            BitmapFactory.Options options, <span class=\"keyword\">int</span> reqWidth, <span class=\"keyword\">int</span> reqHeight) &#123;</div><div class=\"line\">    <span class=\"comment\">// 获取图像的原始大小</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> height = options.outHeight;</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> width = options.outWidth;</div><div class=\"line\">    <span class=\"keyword\">int</span> inSampleSize = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (height &gt; reqHeight || width &gt; reqWidth) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> halfHeight = height / <span class=\"number\">2</span>;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> halfWidth = width / <span class=\"number\">2</span>;</div><div class=\"line\">        <span class=\"comment\">//保持宽高大于请求的宽高，缩放比为计算值的2倍</span></div><div class=\"line\">        <span class=\"keyword\">while</span> ((halfHeight / inSampleSize) &gt; reqHeight</div><div class=\"line\">                &amp;&amp; (halfWidth / inSampleSize) &gt; reqWidth) &#123;</div><div class=\"line\">            inSampleSize *= <span class=\"number\">2</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> inSampleSize;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>==<em>设置缩放比<code>inSampleSize</code>为2的倍数，是因为解码器对非2倍数会就近处理为2的倍数。</em>==</p>\n<p>先设置<code>inJustDecodeBounds=true</code>来设置<code>inSampleSize</code>之后在设置<code>inJustDecodeBounds=false</code>加载缩放后的Bitmap</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">mImageView.setImageBitmap(decodeSampleBitmapFromResource(getResource(),R.drawable.iclauncher,<span class=\"number\">100</span>,<span class=\"number\">100</span>));<span class=\"comment\">//加载大小100长宽的图片</span></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> * 根据控件大小，加载缩放图片</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Bitmap <span class=\"title\">decodeSampleBitmapFromResource</span><span class=\"params\">(Resource res,<span class=\"keyword\">int</span> resId,<span class=\"keyword\">int</span> reqWidth,<span class=\"keyword\">int</span> reqHeight)</span></span>&#123;</div><div class=\"line\">  <span class=\"comment\">//先空加载图片，计算缩放比</span></div><div class=\"line\">  <span class=\"keyword\">final</span> BitmapFactory.Options options = <span class=\"keyword\">new</span> BitmapFactory.Options();</div><div class=\"line\">  options.inJustDecodeBounds = <span class=\"keyword\">true</span>;</div><div class=\"line\">  BitmapFactory.decodeResource(res,resId,options);</div><div class=\"line\">  options.inSampleSize = calculateInSampleSize(options,reqWidth,reqHeight);</div><div class=\"line\">  <span class=\"comment\">//解码缩放后的图像</span></div><div class=\"line\">  options.inJustDecodeBounds = <span class=\"keyword\">false</span>;</div><div class=\"line\">  returen BitmapFactory.decodeResource(res,resId,options);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"2、非UI线程处理Bitmap\"><a href=\"#2、非UI线程处理Bitmap\" class=\"headerlink\" title=\"2、非UI线程处理Bitmap\"></a>2、非UI线程处理Bitmap</h4><p>上一节仅仅介绍了如何缩放加载图像，若是获取网络图像或者其他储存设备，则应避免在UI线程执行加载操作，避免ANR。</p>\n<ul>\n<li><h5 id=\"使用AsyncTask（Use-a-AsyncTask）\"><a href=\"#使用AsyncTask（Use-a-AsyncTask）\" class=\"headerlink\" title=\"使用AsyncTask（Use a AsyncTask）\"></a>使用AsyncTask（Use a AsyncTask）</h5><p>AsyncTask是Android提供的一个封装好的后台线程操作方式，并可以实现前后台信息传递。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BitmapWorkerTask</span> <span class=\"keyword\">extends</span> <span class=\"title\">AsyncTask</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> WeakReference imageViewReference;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> data = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BitmapWorkerTask</span><span class=\"params\">(ImageView imageView)</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">//使用弱引用，确保图像会被及时的GC回收。</span></div><div class=\"line\">    imageViewReference = <span class=\"keyword\">new</span> WeakReference(imageView);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//后台解码图片</span></div><div class=\"line\">  <span class=\"meta\">@override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> Bitmap <span class=\"title\">doInBackground</span><span class=\"params\">(Integer... params)</span></span>&#123;</div><div class=\"line\">    data = params[<span class=\"number\">0</span>];</div><div class=\"line\">    <span class=\"keyword\">return</span> decodeSampleBitmapFromResource(getResource(),data,<span class=\"number\">100</span>,<span class=\"number\">100</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//完成解码后，加载图像到控件显示</span></div><div class=\"line\">  <span class=\"comment\">//要判断引用对象是否还存在，控件是否存在等，避免空指针。</span></div><div class=\"line\">  <span class=\"meta\">@override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onPostExecute</span><span class=\"params\">(Bitmap bitmap)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(imageViewReference !=<span class=\"keyword\">null</span> &amp;&amp; bitmap !=<span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">      <span class=\"keyword\">final</span> ImageView imageView = imageViewReference.get();</div><div class=\"line\">      <span class=\"keyword\">if</span>(imageView!=<span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">        imageView.setImageBitmap(bitmap);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//创建一个任务task，执行异步加载</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">loadBitmap</span><span class=\"params\">(<span class=\"keyword\">int</span> resId,ImageView imageView)</span></span>&#123;</div><div class=\"line\">  BitmapWorkerTask task = <span class=\"keyword\">new</span> BitmapWorkerTask(imageView);</div><div class=\"line\">  task.execute(resId);<span class=\"comment\">//执行Task</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"处理并发问题（Handle-Concurrency）\"><a href=\"#处理并发问题（Handle-Concurrency）\" class=\"headerlink\" title=\"处理并发问题（Handle Concurrency）\"></a>处理并发问题（Handle Concurrency）</h5><p>List View和Grid View控件显示多个位图结合AsyncTask使用时会产生并发问题。每个item都执行task的话，启动顺序，任务顺序都很难保持一致性。为此可以使用Image View来保存最近使用的AsyncTask引用，创建一个专用的<code>Drawable</code>子类来存储任务引用，如<code>BitmapDrawable</code>,并提供占位图像:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AsyncDrawable</span> <span class=\"keyword\">extends</span> <span class=\"title\">BitmapDrawable</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> WeakReference bitmapWorkerTaskReference;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AsyncDrawable</span><span class=\"params\">(Resource res,Bitmap bitmap,BitmapWorkerTask bitmapWorkerTask)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(res,bitmap);</div><div class=\"line\">    <span class=\"comment\">//初始化弱引用对象</span></div><div class=\"line\">    bitmapWorkerTaskReference = <span class=\"keyword\">new</span> BitmapWorkerTaskReference(bitmapWorkerTask);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//对外公开task的引用。</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> BitmapWorkerTask <span class=\"title\">getBitmapWorkerTask</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> bitmapWorkerTaskReference.get();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在执行BitmapWorkerTask之前需要创建AsyncDrawable并绑定到ImageView上：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">loadBitmap</span><span class=\"params\">(<span class=\"keyword\">int</span> resId,ImageView imageView)</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(cancelPotentialWork(resId,imageView))&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> BitmapWorkerTask task = <span class=\"keyword\">new</span> BitmapWorkerTask(imageView);</div><div class=\"line\">    <span class=\"keyword\">final</span> AsyncDrawable asyncDrawable = <span class=\"keyword\">new</span> \t\t\t\t\t\t\t   AsyncDrawable(getResource(),mPlaceHolderBitmap,task);</div><div class=\"line\">    imageView.setImageDrawable(asyncDrawable);</div><div class=\"line\">    task.execute(resId);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//该方法用于检测是否有已存在的任务在执行该Image View控件的请求。</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">cancelPotentialWork</span><span class=\"params\">(<span class=\"keyword\">int</span> data, ImageView imageView)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//检索AsyncTask是否已经被分配到指定的ImageView控件。</span></div><div class=\"line\">  <span class=\"keyword\">final</span> BitmapWorkerTask bitmapWorkerTask = getBitmapWorkerTask(imageView);</div><div class=\"line\">    <span class=\"keyword\">if</span> (bitmapWorkerTask != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> bitmapData = bitmapWorkerTask.data;</div><div class=\"line\">        <span class=\"keyword\">if</span> (bitmapData == <span class=\"number\">0</span> || bitmapData != data) &#123;</div><div class=\"line\">            <span class=\"comment\">//取消先前的任务</span></div><div class=\"line\">            bitmapWorkerTask.cancel(<span class=\"keyword\">true</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">//同样的请求任务已经在执行</span></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//没有符合当下请求的任务绑定在ImageView控件上，或者之前的取消了。</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//获取控件相关的task</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> BitmapWorkerTask <span class=\"title\">getBitmapWorkerTask</span><span class=\"params\">(ImageView imageView)</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">if</span> (imageView != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">       <span class=\"keyword\">final</span> Drawable drawable = imageView.getDrawable();</div><div class=\"line\">       <span class=\"keyword\">if</span> (drawable <span class=\"keyword\">instanceof</span> AsyncDrawable) &#123;</div><div class=\"line\">           <span class=\"keyword\">final</span> AsyncDrawable asyncDrawable = (AsyncDrawable) drawable;</div><div class=\"line\">         <span class=\"comment\">//获取AsyncDrawable中定义的绑定task引用</span></div><div class=\"line\">           <span class=\"keyword\">return</span> asyncDrawable.getBitmapWorkerTask();</div><div class=\"line\">       &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>完成异步task的绑定后，在<code>onPostExecute()</code>中更新view</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BitmapWorkerTask</span> <span class=\"keyword\">extends</span> <span class=\"title\">AsyncTask</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onPostExecute</span><span class=\"params\">(Bitmap bitmap)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (isCancelled()) &#123;</div><div class=\"line\">            bitmap = <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">\t\t<span class=\"comment\">//更新View前，判断资源和控件的非空</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (imageViewReference != <span class=\"keyword\">null</span> &amp;&amp; bitmap != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> ImageView imageView = imageViewReference.get();</div><div class=\"line\">            <span class=\"keyword\">final</span> BitmapWorkerTask bitmapWorkerTask =</div><div class=\"line\">                    getBitmapWorkerTask(imageView);</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == bitmapWorkerTask &amp;&amp; imageView != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                imageView.setImageBitmap(bitmap);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>应用与listView和GridView等，循环利用子视图的控件，只要在设置ImageView的地方调用loadBitmap方法即可。如GridView的<code>getView()</code>中。</p>\n</li>\n</ul>\n<h4 id=\"3、缓存Bitmap\"><a href=\"#3、缓存Bitmap\" class=\"headerlink\" title=\"3、缓存Bitmap\"></a>3、缓存Bitmap</h4><p>在List View或GridView控件场景中，可能需要大量图片展示，而且存在图片复用现象，此时就需要用到缓存，以提高效能和用户体验。</p>\n<ul>\n<li><h5 id=\"使用内存缓存（Use-a-Memory-Cache）\"><a href=\"#使用内存缓存（Use-a-Memory-Cache）\" class=\"headerlink\" title=\"使用内存缓存（Use a Memory Cache）\"></a>使用内存缓存（Use a Memory Cache）</h5><p>使用内存缓存实现以<em>空间换时间</em>，提高速度。<code>LruCache</code>类用于缓存Bitmaps，其使用强引用<code>LinkedHashMap</code>保存最近引用对象，在缓存超出设置大小时候剔除最近最少使用的对象。</p>\n<blockquote>\n<p><strong>注意：</strong>以前多使用<code>软引用</code>或<code>弱引用</code>但是现在并不推荐，由于Android版本的GC频率增高，引用效率也大为降低。</p>\n</blockquote>\n<p>为LruCache设置合适的大小，考虑一下因素：</p>\n<ul>\n<li>应用剩余可用内存大小</li>\n<li>同时显示图像数量，以及预加载图片数量</li>\n<li>设备屏幕尺寸与密度</li>\n<li>图像尺寸、类型</li>\n<li>图像被访问的频率高低</li>\n<li>显示图像的质量和数量的平衡</li>\n</ul>\n<p>以上因素都需要具体分析，如下创建一个Bitmap的LruCache的示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> LruCache&lt;String, Bitmap&gt; mMemoryCache;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// 获取应用VM最大可用内存</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> maxMemory = (<span class=\"keyword\">int</span>) (Runtime.getRuntime().maxMemory() / <span class=\"number\">1024</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 使用可用内存的1/8来缓存</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> cacheSize = maxMemory / <span class=\"number\">8</span>;</div><div class=\"line\">\t<span class=\"comment\">//建立LruCache缓存对象</span></div><div class=\"line\">    mMemoryCache = <span class=\"keyword\">new</span> LruCache&lt;String, Bitmap&gt;(cacheSize) &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> <span class=\"title\">sizeOf</span><span class=\"params\">(String key, Bitmap bitmap)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// 缓存以KB为单位计算，而非对象item个数</span></div><div class=\"line\">            <span class=\"keyword\">return</span> bitmap.getByteCount() / <span class=\"number\">1024</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//加入bitmap对象到lrucache</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addBitmapToMemoryCache</span><span class=\"params\">(String key, Bitmap bitmap)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (getBitmapFromMemCache(key) == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        mMemoryCache.put(key, bitmap);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//从lrucache获取bitmap缓存</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Bitmap <span class=\"title\">getBitmapFromMemCache</span><span class=\"params\">(String key)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> mMemoryCache.get(key);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>Note:</strong>在上面的例子中, 有1/8的内存空间被用作缓存。 这意味着在常见的设备上（hdpi），最少大概有4MB的缓存空间（32/8）。如果一个填满图片的GridView控件放置在800x480像素的手机屏幕上，大概会花费1.5MB的缓存空间（800x480x4 bytes），因此缓存的容量大概可以缓存2.5页的图片内容。</p>\n</blockquote>\n<p>加入缓存的bitmap亦是已经优化过的图像：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BitmapWorkerTask</span> <span class=\"keyword\">extends</span> <span class=\"title\">AsyncTask</span>&lt;<span class=\"title\">Integer</span>, <span class=\"title\">Void</span>, <span class=\"title\">Bitmap</span>&gt; </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">//异步线程解码图像</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Bitmap <span class=\"title\">doInBackground</span><span class=\"params\">(Integer... params)</span> </span>&#123;</div><div class=\"line\">      <span class=\"comment\">//缩放图像</span></div><div class=\"line\">        <span class=\"keyword\">final</span> Bitmap bitmap = decodeSampledBitmapFromResource(</div><div class=\"line\">                getResources(), params[<span class=\"number\">0</span>], <span class=\"number\">100</span>, <span class=\"number\">100</span>));</div><div class=\"line\">      <span class=\"comment\">//添加到lrucache缓存</span></div><div class=\"line\">        addBitmapToMemoryCache(String.valueOf(params[<span class=\"number\">0</span>]), bitmap);</div><div class=\"line\">        <span class=\"keyword\">return</span> bitmap;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"使用磁盘缓存（Use-a-Disk-Cache）\"><a href=\"#使用磁盘缓存（Use-a-Disk-Cache）\" class=\"headerlink\" title=\"使用磁盘缓存（Use a Disk Cache）\"></a>使用磁盘缓存（Use a Disk Cache）</h5><p>使用内存作为缓存虽然有较高的速度，但也可能因为应用被后台化，系统资源不足，亦或者过于大量的图像加载，而导致效果不佳，体验不好。因而可以使用磁盘缓存，需要异步处理，避免ANR。</p>\n<blockquote>\n<p><strong>Note:</strong>如果图像过于频繁访问，可以使用<code>ContentProvider</code>更为合适。</p>\n</blockquote>\n<p>如下示例<code>DiskLruCache</code>为Android源码基础上优化的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> DiskLruCache mDiskLruCache;<span class=\"comment\">//DiskLruCache对象</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Object mDiskCacheLock = <span class=\"keyword\">new</span> Object();<span class=\"comment\">//常量化同步锁</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> mDiskCacheStarting = <span class=\"keyword\">true</span>;<span class=\"comment\">//是否开启缓存</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DISK_CACHE_SIZE = <span class=\"number\">1024</span> * <span class=\"number\">1024</span> * <span class=\"number\">10</span>; <span class=\"comment\">// 10MB</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DISK_CACHE_SUBDIR = <span class=\"string\">\"thumbnails\"</span>;<span class=\"comment\">//缓存文件夹</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// 初始化内存缓存</span></div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// 后台线程初始化磁盘缓存</span></div><div class=\"line\">    File cacheDir = getDiskCacheDir(<span class=\"keyword\">this</span>, DISK_CACHE_SUBDIR);<span class=\"comment\">//从磁盘加载出缓存文件</span></div><div class=\"line\">    <span class=\"keyword\">new</span> InitDiskCacheTask().execute(cacheDir);<span class=\"comment\">//异步开始加载到缓存文件</span></div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//内部类，初始化磁盘加载task</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InitDiskCacheTask</span> <span class=\"keyword\">extends</span> <span class=\"title\">AsyncTask</span>&lt;<span class=\"title\">File</span>, <span class=\"title\">Void</span>, <span class=\"title\">Void</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Void <span class=\"title\">doInBackground</span><span class=\"params\">(File... params)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (mDiskCacheLock) &#123;<span class=\"comment\">//同步锁</span></div><div class=\"line\">            File cacheDir = params[<span class=\"number\">0</span>];<span class=\"comment\">//缓存文件</span></div><div class=\"line\">            mDiskLruCache = DiskLruCache.open(cacheDir, DISK_CACHE_SIZE);</div><div class=\"line\">            mDiskCacheStarting = <span class=\"keyword\">false</span>; <span class=\"comment\">//完成初始化磁盘加载</span></div><div class=\"line\">            mDiskCacheLock.notifyAll(); <span class=\"comment\">//唤起其他休眠线程</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//异步加载图片的task，</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BitmapWorkerTask</span> <span class=\"keyword\">extends</span> <span class=\"title\">AsyncTask</span>&lt;<span class=\"title\">Integer</span>, <span class=\"title\">Void</span>, <span class=\"title\">Bitmap</span>&gt; </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// 解码图像</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Bitmap <span class=\"title\">doInBackground</span><span class=\"params\">(Integer... params)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> String imageKey = String.valueOf(params[<span class=\"number\">0</span>]);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//后台线程检查磁盘缓存</span></div><div class=\"line\">        Bitmap bitmap = getBitmapFromDiskCache(imageKey);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (bitmap == <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">// 磁盘缓存没有所需图像</span></div><div class=\"line\">            <span class=\"comment\">// 正常途径加载</span></div><div class=\"line\">            <span class=\"keyword\">final</span> Bitmap bitmap = decodeSampledBitmapFromResource(</div><div class=\"line\">                    getResources(), params[<span class=\"number\">0</span>], <span class=\"number\">100</span>, <span class=\"number\">100</span>));</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//并将优化后的图像加入磁盘缓存</span></div><div class=\"line\">        addBitmapToCache(imageKey, bitmap);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> bitmap;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//加入磁盘缓存</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addBitmapToCache</span><span class=\"params\">(String key, Bitmap bitmap)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 先加入内存缓存</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (getBitmapFromMemCache(key) == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        mMemoryCache.put(key, bitmap);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 然后加入到磁盘缓存</span></div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (mDiskCacheLock) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mDiskLruCache != <span class=\"keyword\">null</span> &amp;&amp; mDiskLruCache.get(key) == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            mDiskLruCache.put(key, bitmap);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//从磁盘缓存获取图像</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Bitmap <span class=\"title\">getBitmapFromDiskCache</span><span class=\"params\">(String key)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (mDiskCacheLock) &#123;<span class=\"comment\">//同步获取锁</span></div><div class=\"line\">        <span class=\"comment\">// 等待后台线程获取磁盘缓存</span></div><div class=\"line\">        <span class=\"keyword\">while</span> (mDiskCacheStarting) &#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                mDiskCacheLock.wait();</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;&#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mDiskLruCache != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> mDiskLruCache.get(key);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 为特定的app创建唯一的子文件夹，优先使用外部sd卡，若没有，就使用内部sd卡</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> File <span class=\"title\">getDiskCacheDir</span><span class=\"params\">(Context context, String uniqueName)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 检查是否有外部存储，否则用内部存储</span></div><div class=\"line\">    <span class=\"keyword\">final</span> String cachePath =</div><div class=\"line\">            Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState()) ||</div><div class=\"line\">                    !isExternalStorageRemovable() ? getExternalCacheDir(context).getPath() :</div><div class=\"line\">                            context.getCacheDir().getPath();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> File(cachePath + File.separator + uniqueName);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>注意：</strong>如上使用==同步锁==是为了防止在后台异步I/O操作时候，错误读取。</p>\n</blockquote>\n<p>内存缓存检查可以在UI线程操作，而磁盘缓存需要在后台线程。</p>\n</li>\n<li><h5 id=\"处理配置改变（Handle-Configuration-Changes）\"><a href=\"#处理配置改变（Handle-Configuration-Changes）\" class=\"headerlink\" title=\"处理配置改变（Handle Configuration Changes）\"></a>处理配置改变（Handle Configuration Changes）</h5><p>Android的配置信息发生变化，Activity可能会随之变化、销毁重建。平滑恢复原有图像，创造良好用户体验，<code>setRetainInstance(true)</code>保留的一个<code>Fragement</code>实例可以将缓存重新附着与Activity上。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> LruCache&lt;String, Bitmap&gt; mMemoryCache;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">      <span class=\"comment\">//RetainFragment</span></div><div class=\"line\">    RetainFragment retainFragment =</div><div class=\"line\">            RetainFragment.findOrCreateRetainFragment(getFragmentManager());</div><div class=\"line\">  <span class=\"comment\">//获取缓存对象  </span></div><div class=\"line\">  mMemoryCache = retainFragment.mRetainedCache;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mMemoryCache == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        mMemoryCache = <span class=\"keyword\">new</span> LruCache&lt;String, Bitmap&gt;(cacheSize) &#123;</div><div class=\"line\">            ... <span class=\"comment\">// 初始化缓存</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        retainFragment.mRetainedCache = mMemoryCache;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//自定义内部类Fragment，用于存储缓存对象？？</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RetainFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"RetainFragment\"</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> LruCache&lt;String, Bitmap&gt; mRetainedCache;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RetainFragment</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> RetainFragment <span class=\"title\">findOrCreateRetainFragment</span><span class=\"params\">(FragmentManager fm)</span> </span>&#123;</div><div class=\"line\">        RetainFragment fragment = (RetainFragment) fm.findFragmentByTag(TAG);</div><div class=\"line\">        <span class=\"keyword\">if</span> (fragment == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            fragment = <span class=\"keyword\">new</span> RetainFragment();</div><div class=\"line\">            fm.beginTransaction().add(fragment, TAG).commit();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> fragment;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setRetainInstance(<span class=\"keyword\">true</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"4、管理Bitmap的内存\"><a href=\"#4、管理Bitmap的内存\" class=\"headerlink\" title=\"4、管理Bitmap的内存\"></a>4、管理Bitmap的内存</h4><p>关于Bitmap内存管理了解两点：1、Android2.3之后GC回收并发执行，内存不引用，会被立即回收。2、Android3.0以后bitmap引用和数据一同存放在<code>Dalvik堆</code>内存中。</p>\n<ul>\n<li><h5 id=\"Android2-3以下版本的内存管理\"><a href=\"#Android2-3以下版本的内存管理\" class=\"headerlink\" title=\"Android2.3以下版本的内存管理\"></a>Android2.3以下版本的内存管理</h5><p>推荐使用<code>recycle()</code>方法，低版本Android单线程GC。使用引用计数法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mCacheRefCount=<span class=\"number\">0</span>;<span class=\"comment\">//引用计数</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mDisplayRefCount = <span class=\"number\">0</span>;<span class=\"comment\">//引用计数</span></div><div class=\"line\">...</div><div class=\"line\"><span class=\"comment\">//通知drawable显示状态发生改变，drawable引用计数来决定引用状态和显示</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setIsDisplayed</span><span class=\"params\">(<span class=\"keyword\">boolean</span> isDisplayed)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (isDisplayed) &#123;</div><div class=\"line\">            mDisplayRefCount++;</div><div class=\"line\">            mHasBeenDisplayed = <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            mDisplayRefCount--;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// Check to see if recycle() can be called.</span></div><div class=\"line\">    checkState();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// Notify the drawable that the cache state has changed.</span></div><div class=\"line\"><span class=\"comment\">// Keep a count to determine when the drawable is no longer being cached.</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setIsCached</span><span class=\"params\">(<span class=\"keyword\">boolean</span> isCached)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (isCached) &#123;</div><div class=\"line\">            mCacheRefCount++;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            mCacheRefCount--;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// Check to see if recycle() can be called.</span></div><div class=\"line\">    checkState();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">checkState</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// If the drawable cache and display ref counts = 0, and this drawable</span></div><div class=\"line\">    <span class=\"comment\">// has been displayed, then recycle.</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (mCacheRefCount &lt;= <span class=\"number\">0</span> &amp;&amp; mDisplayRefCount &lt;= <span class=\"number\">0</span> &amp;&amp; mHasBeenDisplayed</div><div class=\"line\">            &amp;&amp; hasValidBitmap()) &#123;</div><div class=\"line\">        getBitmap().recycle();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasValidBitmap</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    Bitmap bitmap = getBitmap();</div><div class=\"line\">    <span class=\"keyword\">return</span> bitmap != <span class=\"keyword\">null</span> &amp;&amp; !bitmap.isRecycled();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"Android3-0以上版本内存管理\"><a href=\"#Android3-0以上版本内存管理\" class=\"headerlink\" title=\"Android3.0以上版本内存管理\"></a>Android3.0以上版本内存管理</h5><p>API 11引入<code>BitmapFactory.Options.inBitmap</code>使Bitmap在加载时候可以重中已存在的，但是大小一样的位图（&lt; API 19时候）。</p>\n</li>\n<li><p>保存Bitmap以备复用</p>\n<p>android3.0以上，bitmap从L如Cache移除时，Bitmap的软引用会被村房子啊Hashset中，以便<code>inBitmap</code>复用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">Set&lt;SoftReference&lt;Bitmap&gt;&gt; mReusableBitmaps;</div><div class=\"line\"><span class=\"keyword\">private</span> LruCache&lt;String, BitmapDrawable&gt; mMemoryCache;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// If you're running on Honeycomb or newer, create a</span></div><div class=\"line\"><span class=\"comment\">// synchronized HashSet of references to reusable bitmaps.</span></div><div class=\"line\"><span class=\"keyword\">if</span> (Utils.hasHoneycomb()) &#123;</div><div class=\"line\">    mReusableBitmaps =</div><div class=\"line\">            Collections.synchronizedSet(<span class=\"keyword\">new</span> HashSet&lt;SoftReference&lt;Bitmap&gt;&gt;());</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">mMemoryCache = <span class=\"keyword\">new</span> LruCache&lt;String, BitmapDrawable&gt;(mCacheParams.memCacheSize) &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Notify the removed entry that is no longer being cached.</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">entryRemoved</span><span class=\"params\">(<span class=\"keyword\">boolean</span> evicted, String key,</span></span></div><div class=\"line\">            BitmapDrawable oldValue, BitmapDrawable newValue) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (RecyclingBitmapDrawable.class.isInstance(oldValue)) &#123;</div><div class=\"line\">            <span class=\"comment\">// The removed entry is a recycling drawable, so notify it</span></div><div class=\"line\">            <span class=\"comment\">// that it has been removed from the memory cache.</span></div><div class=\"line\">            ((RecyclingBitmapDrawable) oldValue).setIsCached(<span class=\"keyword\">false</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// The removed entry is a standard BitmapDrawable.</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (Utils.hasHoneycomb()) &#123;</div><div class=\"line\">                <span class=\"comment\">// We're running on Honeycomb or later, so add the bitmap</span></div><div class=\"line\">                <span class=\"comment\">// to a SoftReference set for possible use with inBitmap later.</span></div><div class=\"line\">                mReusableBitmaps.add</div><div class=\"line\">                        (<span class=\"keyword\">new</span> SoftReference&lt;Bitmap&gt;(oldValue.getBitmap()));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">....</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"使用已经存在的Bitmap\"><a href=\"#使用已经存在的Bitmap\" class=\"headerlink\" title=\"使用已经存在的Bitmap\"></a>使用已经存在的Bitmap</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Bitmap <span class=\"title\">decodeSampledBitmapFromFile</span><span class=\"params\">(String filename,</span></span></div><div class=\"line\">        <span class=\"keyword\">int</span> reqWidth, <span class=\"keyword\">int</span> reqHeight, ImageCache cache) &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> BitmapFactory.Options options = <span class=\"keyword\">new</span> BitmapFactory.Options();</div><div class=\"line\">    ...</div><div class=\"line\">    BitmapFactory.decodeFile(filename, options);</div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// If we're running on Honeycomb or newer, try to use inBitmap.</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (Utils.hasHoneycomb()) &#123;</div><div class=\"line\">        addInBitmapOptions(options, cache);</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">return</span> BitmapFactory.decodeFile(filename, options);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//查找适合且可复用的bitmap，设置到inBitmap的属性值，</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">addInBitmapOptions</span><span class=\"params\">(BitmapFactory.Options options,</span></span></div><div class=\"line\">        ImageCache cache) &#123;</div><div class=\"line\">    <span class=\"comment\">// inBitmap only works with mutable bitmaps, so force the decoder to</span></div><div class=\"line\">    <span class=\"comment\">// return mutable bitmaps.</span></div><div class=\"line\">    options.inMutable = <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (cache != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// Try to find a bitmap to use for inBitmap.</span></div><div class=\"line\">        Bitmap inBitmap = cache.getBitmapFromReusableSet(options);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (inBitmap != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// If a suitable bitmap has been found, set it as the value of</span></div><div class=\"line\">            <span class=\"comment\">// inBitmap.</span></div><div class=\"line\">            options.inBitmap = inBitmap;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// This method iterates through the reusable bitmaps, looking for one</span></div><div class=\"line\"><span class=\"comment\">// to use for inBitmap:</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Bitmap <span class=\"title\">getBitmapFromReusableSet</span><span class=\"params\">(BitmapFactory.Options options)</span> </span>&#123;</div><div class=\"line\">        Bitmap bitmap = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (mReusableBitmaps != <span class=\"keyword\">null</span> &amp;&amp; !mReusableBitmaps.isEmpty()) &#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (mReusableBitmaps) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> Iterator&lt;SoftReference&lt;Bitmap&gt;&gt; iterator</div><div class=\"line\">                    = mReusableBitmaps.iterator();</div><div class=\"line\">            Bitmap item;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">while</span> (iterator.hasNext()) &#123;</div><div class=\"line\">                item = iterator.next().get();</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != item &amp;&amp; item.isMutable()) &#123;</div><div class=\"line\">                    <span class=\"comment\">// Check to see it the item can be used for inBitmap.</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (canUseForInBitmap(item, options)) &#123;</div><div class=\"line\">                        bitmap = item;</div><div class=\"line\"></div><div class=\"line\">                        <span class=\"comment\">// Remove from reusable set so it can't be used again.</span></div><div class=\"line\">                        iterator.remove();</div><div class=\"line\">                        <span class=\"keyword\">break</span>;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    <span class=\"comment\">// Remove from the set if the reference has been cleared.</span></div><div class=\"line\">                    iterator.remove();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> bitmap;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>判断Bitmap是否符合inBitmap的要求：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">canUseForInBitmap</span><span class=\"params\">(</span></span></div><div class=\"line\">        Bitmap candidate, BitmapFactory.Options targetOptions) &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</div><div class=\"line\">        <span class=\"comment\">// From Android 4.4 (KitKat) onward we can re-use if the byte size of</span></div><div class=\"line\">        <span class=\"comment\">// the new bitmap is smaller than the reusable bitmap candidate</span></div><div class=\"line\">        <span class=\"comment\">// allocation byte count.</span></div><div class=\"line\">        <span class=\"keyword\">int</span> width = targetOptions.outWidth / targetOptions.inSampleSize;</div><div class=\"line\">        <span class=\"keyword\">int</span> height = targetOptions.outHeight / targetOptions.inSampleSize;</div><div class=\"line\">        <span class=\"keyword\">int</span> byteCount = width * height * getBytesPerPixel(candidate.getConfig());</div><div class=\"line\">        <span class=\"keyword\">return</span> byteCount &lt;= candidate.getAllocationByteCount();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// On earlier versions, the dimensions must match exactly and the inSampleSize must be 1</span></div><div class=\"line\">    <span class=\"keyword\">return</span> candidate.getWidth() == targetOptions.outWidth</div><div class=\"line\">            &amp;&amp; candidate.getHeight() == targetOptions.outHeight</div><div class=\"line\">            &amp;&amp; targetOptions.inSampleSize == <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * A helper function to return the byte usage per pixel of a bitmap based on its configuration.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getBytesPerPixel</span><span class=\"params\">(Config config)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (config == Config.ARGB_8888) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">4</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (config == Config.RGB_565) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (config == Config.ARGB_4444) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (config == Config.ALPHA_8) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"5、在UI上显示Bitmap\"><a href=\"#5、在UI上显示Bitmap\" class=\"headerlink\" title=\"5、在UI上显示Bitmap\"></a>5、在UI上显示Bitmap</h4><p>本节学习如何综合使用后台线程与缓存机制，将图像加载到ViewPager或Grid View控件上，并处理并发与配置改变的问题。</p>\n<ul>\n<li><h5 id=\"实现加载图片到View-Pager\"><a href=\"#实现加载图片到View-Pager\" class=\"headerlink\" title=\"实现加载图片到View Pager\"></a>实现加载图片到View Pager</h5><p><code>Swipe View Pattern</code>是滑动显示的设计模型。可通过<code>PagerAdapter</code>与<code>ViewPager</code>控件实现该效果。而<code>FragmentStatePagerAdapter</code>更为合适，因为其能在Fragment状态改变时保存状态值。减少内存消耗。少量图片的话，<code>PagerAdapter与FragmentPagerAdapter</code>都可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageDetailActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">FragmentActivity</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String EXTRA_IMAGE = <span class=\"string\">\"extra_image\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> ImagePagerAdapter mAdapter;<span class=\"comment\">//adapter</span></div><div class=\"line\">    <span class=\"keyword\">private</span> ViewPager mPager;<span class=\"comment\">//viewpager</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 用于传递给viewpager 的adapter的图片数据资源</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Integer[] imageResIds = <span class=\"keyword\">new</span> Integer[] &#123;</div><div class=\"line\">            R.drawable.sample_image_1, R.drawable.sample_image_2, R.drawable.sample_image_3,</div><div class=\"line\">            R.drawable.sample_image_4, R.drawable.sample_image_5, R.drawable.sample_image_6,</div><div class=\"line\">            R.drawable.sample_image_7, R.drawable.sample_image_8, R.drawable.sample_image_9&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.image_detail_pager); <span class=\"comment\">// 就一个viewpager</span></div><div class=\"line\">\t\t<span class=\"comment\">//初始化控件，并绑定适配器</span></div><div class=\"line\">        mAdapter = <span class=\"keyword\">new</span> ImagePagerAdapter(getSupportFragmentManager(), imageResIds.length);</div><div class=\"line\">        mPager = (ViewPager) findViewById(R.id.pager);</div><div class=\"line\">        mPager.setAdapter(mAdapter);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImagePagerAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">FragmentStatePagerAdapter</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> mSize;</div><div class=\"line\">\t\t<span class=\"comment\">//</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ImagePagerAdapter</span><span class=\"params\">(FragmentManager fm, <span class=\"keyword\">int</span> size)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(fm);</div><div class=\"line\">            mSize = size;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getCount</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> mSize;</div><div class=\"line\">        &#125;</div><div class=\"line\">\t\t<span class=\"comment\">//返回fragment对象</span></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Fragment <span class=\"title\">getItem</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> ImageDetailFragment.newInstance(position);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Fragment里面包含Image View控件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageDetailFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String IMAGE_DATA_EXTRA = <span class=\"string\">\"resId\"</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mImageNum;<span class=\"comment\">//图像数目</span></div><div class=\"line\">    <span class=\"keyword\">private</span> ImageView mImageView;<span class=\"comment\">//image view控件</span></div><div class=\"line\">\t<span class=\"comment\">//构造函数，接收图片数目参数</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> ImageDetailFragment <span class=\"title\">newInstance</span><span class=\"params\">(<span class=\"keyword\">int</span> imageNum)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> ImageDetailFragment f = <span class=\"keyword\">new</span> ImageDetailFragment();</div><div class=\"line\">        <span class=\"keyword\">final</span> Bundle args = <span class=\"keyword\">new</span> Bundle();</div><div class=\"line\">        args.putInt(IMAGE_DATA_EXTRA, imageNum);</div><div class=\"line\">        f.setArguments(args);</div><div class=\"line\">        <span class=\"keyword\">return</span> f;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Empty constructor, required as per Fragment docs</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ImageDetailFragment</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        mImageNum = getArguments() != <span class=\"keyword\">null</span> ? getArguments().getInt(IMAGE_DATA_EXTRA) : -<span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, ViewGroup container,</span></span></div><div class=\"line\">            Bundle savedInstanceState) &#123;</div><div class=\"line\">        <span class=\"comment\">// image_detail_fragment.xml contains just an ImageView</span></div><div class=\"line\">        <span class=\"keyword\">final</span> View v = inflater.inflate(R.layout.image_detail_fragment, container, <span class=\"keyword\">false</span>);</div><div class=\"line\">        mImageView = (ImageView) v.findViewById(R.id.imageView);</div><div class=\"line\">        <span class=\"keyword\">return</span> v;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityCreated</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onActivityCreated(savedInstanceState);</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> resId = ImageDetailActivity.imageResIds[mImageNum];</div><div class=\"line\">        mImageView.setImageResource(resId); <span class=\"comment\">// Load image into ImageView</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>==<strong>如上方式，可能会阻塞UI线程</strong>==，改用AsyncTask最好：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageDetailActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">FragmentActivity</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">\t<span class=\"comment\">//后台加载图片</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">loadBitmap</span><span class=\"params\">(<span class=\"keyword\">int</span> resId, ImageView imageView)</span> </span>&#123;</div><div class=\"line\">        mImageView.setImageResource(R.drawable.image_placeholder);</div><div class=\"line\">      <span class=\"comment\">//后台执行</span></div><div class=\"line\">        BitmapWorkerTask task = <span class=\"keyword\">new</span> BitmapWorkerTask(mImageView);</div><div class=\"line\">        task.execute(resId);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    ... <span class=\"comment\">// include BitmapWorkerTask class</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageDetailFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityCreated</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onActivityCreated(savedInstanceState);</div><div class=\"line\">        <span class=\"keyword\">if</span> (ImageDetailActivity.class.isInstance(getActivity())) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> resId = ImageDetailActivity.imageResIds[mImageNum];</div><div class=\"line\">            <span class=\"comment\">//调用上面的后台加载图片</span></div><div class=\"line\">            ((ImageDetailActivity) getActivity()).loadBitmap(resId, mImageView);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>后台的操作可以更为合理，加载并缓存图像</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageDetailActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">FragmentActivity</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">private</span> LruCache mMemoryCache;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"comment\">// initialize LruCache as per Use a Memory Cache section</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">loadBitmap</span><span class=\"params\">(<span class=\"keyword\">int</span> resId, ImageView imageView)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> String imageKey = String.valueOf(resId);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> Bitmap bitmap = mMemoryCache.get(imageKey);</div><div class=\"line\">        <span class=\"keyword\">if</span> (bitmap != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            mImageView.setImageBitmap(bitmap);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            mImageView.setImageResource(R.drawable.image_placeholder);</div><div class=\"line\">            BitmapWorkerTask task = <span class=\"keyword\">new</span> BitmapWorkerTask(mImageView);</div><div class=\"line\">            task.execute(resId);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ... <span class=\"comment\">// include updated BitmapWorkerTask from Use a Memory Cache section</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"实现加载图片到GridView\"><a href=\"#实现加载图片到GridView\" class=\"headerlink\" title=\"实现加载图片到GridView\"></a>实现加载图片到GridView</h5><p>如下场景，Fragment内置Grid View，item是Image View：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageGridFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> <span class=\"keyword\">implements</span> <span class=\"title\">AdapterView</span>.<span class=\"title\">OnItemClickListener</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> ImageAdapter mAdapter;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//静态加载的图片资源，用于适配器</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Integer[] imageResIds = <span class=\"keyword\">new</span> Integer[] &#123;</div><div class=\"line\">            R.drawable.sample_image_1, R.drawable.sample_image_2, R.drawable.sample_image_3,</div><div class=\"line\">            R.drawable.sample_image_4, R.drawable.sample_image_5, R.drawable.sample_image_6,</div><div class=\"line\">            R.drawable.sample_image_7, R.drawable.sample_image_8, R.drawable.sample_image_9&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Empty constructor as per Fragment docs</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ImageGridFragment</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        mAdapter = <span class=\"keyword\">new</span> ImageAdapter(getActivity());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(</span></span></div><div class=\"line\">            LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) &#123;</div><div class=\"line\">      <span class=\"comment\">//初始化控件，并绑定适配器，注册监听  </span></div><div class=\"line\">      <span class=\"keyword\">final</span> View v = inflater.inflate(R.layout.image_grid_fragment, container, <span class=\"keyword\">false</span>);</div><div class=\"line\">        <span class=\"keyword\">final</span> GridView mGridView = (GridView) v.findViewById(R.id.gridView);</div><div class=\"line\">        mGridView.setAdapter(mAdapter);</div><div class=\"line\">        mGridView.setOnItemClickListener(<span class=\"keyword\">this</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> v;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onItemClick</span><span class=\"params\">(AdapterView parent, View v, <span class=\"keyword\">int</span> position, <span class=\"keyword\">long</span> id)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Intent i = <span class=\"keyword\">new</span> Intent(getActivity(), ImageDetailActivity.class);</div><div class=\"line\">        i.putExtra(ImageDetailActivity.EXTRA_IMAGE, position);</div><div class=\"line\">        startActivity(i);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseAdapter</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Context mContext;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ImageAdapter</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>();</div><div class=\"line\">            mContext = context;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getCount</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> imageResIds.length;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getItem</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> imageResIds[position];</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">getItemId</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> position;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">getView</span><span class=\"params\">(<span class=\"keyword\">int</span> position, View convertView, ViewGroup container)</span> </span>&#123;</div><div class=\"line\">            ImageView imageView;</div><div class=\"line\">            <span class=\"keyword\">if</span> (convertView == <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">// 判断是否是循环复用的item view，不是的话，需要初始化一些属性。</span></div><div class=\"line\">                imageView = <span class=\"keyword\">new</span> ImageView(mContext);</div><div class=\"line\">                imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);</div><div class=\"line\">                imageView.setLayoutParams(<span class=\"keyword\">new</span> GridView.LayoutParams(</div><div class=\"line\">                        LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                imageView = (ImageView) convertView;</div><div class=\"line\">            &#125;</div><div class=\"line\">        <span class=\"comment\">//请注意下面的代码，如此可能会耗时，阻塞UI</span></div><div class=\"line\">        imageView.setImageResource(imageResIds[position]); <span class=\"comment\">// Load image into ImageView</span></div><div class=\"line\">        <span class=\"keyword\">return</span> imageView;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>考虑UI的可能阻塞，以及GridView引起的并发问题，代码优化如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageGridFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> <span class=\"keyword\">implements</span> <span class=\"title\">AdapterView</span>.<span class=\"title\">OnItemClickListener</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseAdapter</span> </span>&#123;</div><div class=\"line\">        ...</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">getView</span><span class=\"params\">(<span class=\"keyword\">int</span> position, View convertView, ViewGroup container)</span> </span>&#123;</div><div class=\"line\">            ...</div><div class=\"line\">            loadBitmap(imageResIds[position], imageView)</div><div class=\"line\">            <span class=\"keyword\">return</span> imageView;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t<span class=\"comment\">//异步加载图像</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">loadBitmap</span><span class=\"params\">(<span class=\"keyword\">int</span> resId, ImageView imageView)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (cancelPotentialWork(resId, imageView)) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> BitmapWorkerTask task = <span class=\"keyword\">new</span> BitmapWorkerTask(imageView);</div><div class=\"line\">            <span class=\"keyword\">final</span> AsyncDrawable asyncDrawable =</div><div class=\"line\">                    <span class=\"keyword\">new</span> AsyncDrawable(getResources(), mPlaceHolderBitmap, task);</div><div class=\"line\">            imageView.setImageDrawable(asyncDrawable);</div><div class=\"line\">            task.execute(resId);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t<span class=\"comment\">//用于绑定到imageView的drawable</span></div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AsyncDrawable</span> <span class=\"keyword\">extends</span> <span class=\"title\">BitmapDrawable</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> WeakReference bitmapWorkerTaskReference;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AsyncDrawable</span><span class=\"params\">(Resources res, Bitmap bitmap,</span></span></div><div class=\"line\">                BitmapWorkerTask bitmapWorkerTask) &#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(res, bitmap);</div><div class=\"line\">            bitmapWorkerTaskReference =</div><div class=\"line\">                <span class=\"keyword\">new</span> WeakReference(bitmapWorkerTask);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> BitmapWorkerTask <span class=\"title\">getBitmapWorkerTask</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> bitmapWorkerTaskReference.get();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t<span class=\"comment\">//判断imageview是否已经有加载图像的task</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">cancelPotentialWork</span><span class=\"params\">(<span class=\"keyword\">int</span> data, ImageView imageView)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> BitmapWorkerTask bitmapWorkerTask = getBitmapWorkerTask(imageView);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (bitmapWorkerTask != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> bitmapData = bitmapWorkerTask.data;</div><div class=\"line\">            <span class=\"keyword\">if</span> (bitmapData != data) &#123;</div><div class=\"line\">                <span class=\"comment\">// Cancel previous task</span></div><div class=\"line\">                bitmapWorkerTask.cancel(<span class=\"keyword\">true</span>);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"comment\">// The same work is already in progress</span></div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// No task associated with the ImageView, or an existing task was cancelled</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t<span class=\"comment\">//获取图像加载task</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> BitmapWorkerTask <span class=\"title\">getBitmapWorkerTask</span><span class=\"params\">(ImageView imageView)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (imageView != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">final</span> Drawable drawable = imageView.getDrawable();</div><div class=\"line\">           <span class=\"keyword\">if</span> (drawable <span class=\"keyword\">instanceof</span> AsyncDrawable) &#123;</div><div class=\"line\">               <span class=\"keyword\">final</span> AsyncDrawable asyncDrawable = (AsyncDrawable) drawable;</div><div class=\"line\">               <span class=\"keyword\">return</span> asyncDrawable.getBitmapWorkerTask();</div><div class=\"line\">           &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    ... <span class=\"comment\">// include updated BitmapWorkerTask class</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"2、使用OpenGL-ES显示图像\"><a href=\"#2、使用OpenGL-ES显示图像\" class=\"headerlink\" title=\"2、使用OpenGL ES显示图像\"></a>2、使用OpenGL ES显示图像</h3><p>Android平台提供了OpenGL ES接口，帮助我们实现更为丰富的图像显示效果。本章记述OpenGL构建应用的基础知识，包括配置、绘制对象、移动图形以及响应事件。</p>\n<p><strong>注意，不要混用OpenGL ES 1.x版和2.x版本的接口，因为并不通用。</strong></p>\n<h4 id=\"1、建立OpenGL-ES的环境\"><a href=\"#1、建立OpenGL-ES的环境\" class=\"headerlink\" title=\"1、建立OpenGL ES的环境\"></a>1、建立OpenGL ES的环境</h4><p>在应用中使用OpenGL ES来绘制图像，需要给它一个容器。通常实现<code>GLSurfaceView</code>做容器和<code>GLSurfaceView.Renderer</code>类来控制绘制。<code>GLSurfaceView</code>一般用于全屏或者接近全屏的View绘制，若是小范围，可以用<code>TextureView</code>。亦或者自定义View继承SurfaceView，但是会费事。</p>\n<ul>\n<li><h5 id=\"在Manifest中声明使用OpenGL-ES\"><a href=\"#在Manifest中声明使用OpenGL-ES\" class=\"headerlink\" title=\"在Manifest中声明使用OpenGL ES\"></a>在Manifest中声明使用OpenGL ES</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-feature</span> <span class=\"attr\">android.glEsVersion</span>=<span class=\"string\">\"0x00020000\"</span> <span class=\"attr\">android.required</span>=<span class=\"string\">\"true\"</span>/&gt;</span></div></pre></td></tr></table></figure>\n<p>如果使用图像纹理压缩，则必须在清单中声明支持的压缩格式：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">supports-gl-texture</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"GL_OES_compressed_ETC1_RGB8_texture\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">supports-gl-texture</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"GL_OES_compressed_paletted_texture\"</span>/&gt;</span></div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>使用OpenGL ES的App可以Activity中使用GLSurfaceView布局。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//要求api&gt;=8</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OpenGLES20Activity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> GLSurfaceView mGLView;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">\t\t<span class=\"comment\">//创建GLSurfaceView对象，设置为Activity布局。</span></div><div class=\"line\">        mGLView = <span class=\"keyword\">new</span> MyGLSurfaceView(<span class=\"keyword\">this</span>);</div><div class=\"line\">        setContentView(mGLView);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"构建一个GLSurfaceView对象\"><a href=\"#构建一个GLSurfaceView对象\" class=\"headerlink\" title=\"构建一个GLSurfaceView对象\"></a>构建一个GLSurfaceView对象</h5><p>  GLSurfaceView是一个特殊的view，用于绘制OpenGL ES图像的一个容器。其内部类GLSurfaceView.Renderer用于控制绘制。<br>  一般需要继承<code>GLSurfaceView</code>来用于自主控制各类触控事件。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyGLSurfaceView</span> <span class=\"keyword\">extends</span> <span class=\"title\">GLSurfaceView</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> MyGLRenderer mRenderer;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyGLSurfaceView</span><span class=\"params\">(Context context)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Create an OpenGL ES 2.0 context</span></div><div class=\"line\">        setEGLContextClientVersion(<span class=\"number\">2</span>);</div><div class=\"line\"></div><div class=\"line\">        mRenderer = <span class=\"keyword\">new</span> MyGLRenderer();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Set the Renderer for drawing on the GLSurfaceView</span></div><div class=\"line\">        setRenderer(mRenderer);</div><div class=\"line\">        <span class=\"comment\">// Render the view only when there is a change in the drawing data</span></div><div class=\"line\">        <span class=\"comment\">//设置此属性的话，除非调用requestRender()，否则GLSurfaceView不会刷新。只当有图像变化才会刷新。</span></div><div class=\"line\">        setRenderMode(GLSurfaceView.RENDERMODE_WHEN_DIRTY);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"构建一个渲染类\"><a href=\"#构建一个渲染类\" class=\"headerlink\" title=\"构建一个渲染类\"></a>构建一个渲染类</h5><p>  <code>GLSurfaceView.Renderer</code>被称为渲染器，控制图像绘制。Android可调用：</p>\n<ul>\n<li>onSurfaceCreated();调用一次，用于创建OpenGL ES环境</li>\n<li>onDrawFrame();每次重绘View时调用。</li>\n<li><p>onSurfaceChanged();View的几何形态变化时调用。</p>\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyGLRenderer</span> <span class=\"keyword\">implements</span> <span class=\"title\">GLSurfaceView</span>.<span class=\"title\">Renderer</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSurfaceCreated</span><span class=\"params\">(GL10 unused, EGLConfig config)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 设置背景框架颜色，此处为黑色，ARGB值</span></div><div class=\"line\">        GLES20.glClearColor(<span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>, <span class=\"number\">1.0f</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDrawFrame</span><span class=\"params\">(GL10 unused)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 重绘背景色</span></div><div class=\"line\">        GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSurfaceChanged</span><span class=\"params\">(GL10 unused, <span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height)</span> </span>&#123;</div><div class=\"line\">        GLES20.glViewport(<span class=\"number\">0</span>, <span class=\"number\">0</span>, width, height);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2、定义shapes\"><a href=\"#2、定义shapes\" class=\"headerlink\" title=\"2、定义shapes\"></a>2、定义shapes</h4><p>了解了OpenGL ES的基本概念后，便可以学习如何绘制基本图形。</p>\n<ul>\n<li><p>定义一个三角形<br>  OpenGL ES允许我们使用三维空间坐标来绘制图形，通常会定义float坐标数组，为了高效此处使用了<br>  ByteBuffer：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Triangle</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> FloatBuffer vertexBuffer;<span class=\"comment\">//浮点数组</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 数组中含有的坐标点数</span></div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> COORDS_PER_VERTEX = <span class=\"number\">3</span>;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">float</span> triangleCoords[] = &#123;   <span class=\"comment\">//坐标点逆时针顺序</span></div><div class=\"line\">            <span class=\"number\">0.0f</span>,  <span class=\"number\">0.622008459f</span>, <span class=\"number\">0.0f</span>, <span class=\"comment\">// 顶点</span></div><div class=\"line\">            -<span class=\"number\">0.5f</span>, -<span class=\"number\">0.311004243f</span>, <span class=\"number\">0.0f</span>, <span class=\"comment\">// 左下角</span></div><div class=\"line\">            <span class=\"number\">0.5f</span>, -<span class=\"number\">0.311004243f</span>, <span class=\"number\">0.0f</span>  <span class=\"comment\">//右下角</span></div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//设置RGB，Alpha</span></div><div class=\"line\">    <span class=\"keyword\">float</span> color[] = &#123; <span class=\"number\">0.63671875f</span>, <span class=\"number\">0.76953125f</span>, <span class=\"number\">0.22265625f</span>, <span class=\"number\">1.0f</span> &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Triangle</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// initialize vertex byte buffer for shape coordinates</span></div><div class=\"line\">        ByteBuffer bb = ByteBuffer.allocateDirect(</div><div class=\"line\">                <span class=\"comment\">// (number of coordinate values * 4 bytes per float)</span></div><div class=\"line\">                triangleCoords.length * <span class=\"number\">4</span>);</div><div class=\"line\">        <span class=\"comment\">// use the device hardware's native byte order</span></div><div class=\"line\">        bb.order(ByteOrder.nativeOrder());</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// create a floating point buffer from the ByteBuffer</span></div><div class=\"line\">        vertexBuffer = bb.asFloatBuffer();</div><div class=\"line\">        <span class=\"comment\">// add the coordinates to the FloatBuffer</span></div><div class=\"line\">        vertexBuffer.put(triangleCoords);</div><div class=\"line\">        <span class=\"comment\">// set the buffer to read the first coordinate</span></div><div class=\"line\">        vertexBuffer.position(<span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  默认情况下，OpenGL ES会有一个[0,0,0]的三维坐标系。更多的需要参考OpenGL手册。</p>\n</li>\n<li>定义一个矩形<br>  如下示例演示通过定义两个三角形来实现一个矩形。<br>  <img src=\"/2017/03/27/第四篇、Android图像与动画/ccw-square.png\" alt=\"矩形\"><pre><code><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//绘制两个三角形，所以使用一个绘制列表来通知OpenGL如何绘制顶点。</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> FloatBuffer vertexBuffer;</div><div class=\"line\">    <span class=\"keyword\">private</span> ShortBuffer drawListBuffer;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// number of coordinates per vertex in this array</span></div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> COORDS_PER_VERTEX = <span class=\"number\">3</span>;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">float</span> squareCoords[] = &#123;</div><div class=\"line\">            -<span class=\"number\">0.5f</span>,  <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>,   <span class=\"comment\">// top left</span></div><div class=\"line\">            -<span class=\"number\">0.5f</span>, -<span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>,   <span class=\"comment\">// bottom left</span></div><div class=\"line\">            <span class=\"number\">0.5f</span>, -<span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>,   <span class=\"comment\">// bottom right</span></div><div class=\"line\">            <span class=\"number\">0.5f</span>,  <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span> &#125;; <span class=\"comment\">// top right</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">short</span> drawOrder[] = &#123; <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> &#125;; <span class=\"comment\">// order to draw vertices</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Square</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// initialize vertex byte buffer for shape coordinates</span></div><div class=\"line\">        ByteBuffer bb = ByteBuffer.allocateDirect(</div><div class=\"line\">        <span class=\"comment\">// (# of coordinate values * 4 bytes per float)</span></div><div class=\"line\">                squareCoords.length * <span class=\"number\">4</span>);</div><div class=\"line\">        bb.order(ByteOrder.nativeOrder());</div><div class=\"line\">        vertexBuffer = bb.asFloatBuffer();</div><div class=\"line\">        vertexBuffer.put(squareCoords);</div><div class=\"line\">        vertexBuffer.position(<span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// initialize byte buffer for the draw list</span></div><div class=\"line\">        ByteBuffer dlb = ByteBuffer.allocateDirect(</div><div class=\"line\">        <span class=\"comment\">// (# of coordinate values * 2 bytes per short)</span></div><div class=\"line\">                drawOrder.length * <span class=\"number\">2</span>);</div><div class=\"line\">        dlb.order(ByteOrder.nativeOrder());</div><div class=\"line\">        drawListBuffer = dlb.asShortBuffer();</div><div class=\"line\">        drawListBuffer.put(drawOrder);</div><div class=\"line\">        drawListBuffer.position(<span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</code></pre></li>\n</ul>\n<h4 id=\"3、绘制shapes\"><a href=\"#3、绘制shapes\" class=\"headerlink\" title=\"3、绘制shapes\"></a>3、绘制shapes</h4><p>如上小节只是介绍了如何定义一个shape图形，本节将介绍如何绘制出需要的图形。出于内存和效率考虑，<br>除非加载的图形变化，一般都在<code>onSurfaceCreated()</code>中初始化shape图形。</p>\n<ul>\n<li><h5 id=\"初始化图形\"><a href=\"#初始化图形\" class=\"headerlink\" title=\"初始化图形\"></a>初始化图形</h5>  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyGLRenderer</span> <span class=\"keyword\">implements</span> <span class=\"title\">GLSurfaceView</span>.<span class=\"title\">Renderer</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">private</span> Triangle mTriangle;</div><div class=\"line\">    <span class=\"keyword\">private</span> Square   mSquare;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSurfaceCreated</span><span class=\"params\">(GL10 unused, EGLConfig config)</span> </span>&#123;</div><div class=\"line\">        ...</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// initialize a triangle</span></div><div class=\"line\">        mTriangle = <span class=\"keyword\">new</span> Triangle();</div><div class=\"line\">        <span class=\"comment\">// initialize a square</span></div><div class=\"line\">        mSquare = <span class=\"keyword\">new</span> Square();</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  使用OpenGL ES 绘制一个定义好的图形，需要如下步骤：</p>\n<ul>\n<li>顶点着色器（Vertex Shader）：用于渲染顶点的OpenGL ES 代码</li>\n<li>片段着色器（Fragment Shader）：使用颜色和纹理渲染图形表面的OpenGL ES 代码</li>\n<li><p>程式（Program）： OpenGL ES对象，包含各类着色器等。</p>\n<p>示例:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String vertexShaderCode =</div><div class=\"line\">    <span class=\"string\">\"attribute vec4 vPosition;\"</span> +</div><div class=\"line\">    <span class=\"string\">\"void main() &#123;\"</span> +</div><div class=\"line\">    <span class=\"string\">\"  gl_Position = vPosition;\"</span> +</div><div class=\"line\">    <span class=\"string\">\"&#125;\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String fragmentShaderCode =</div><div class=\"line\">    <span class=\"string\">\"precision mediump float;\"</span> +</div><div class=\"line\">    <span class=\"string\">\"uniform vec4 vColor;\"</span> +</div><div class=\"line\">    <span class=\"string\">\"void main() &#123;\"</span> +</div><div class=\"line\">    <span class=\"string\">\"  gl_FragColor = vColor;\"</span> +</div><div class=\"line\">    <span class=\"string\">\"&#125;\"</span>;</div><div class=\"line\"></div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>着色器包含OpenGL Shading Language（GLSL）代码，需要先编译，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">loadShader</span><span class=\"params\">(<span class=\"keyword\">int</span> type, String shaderCode)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// create a vertex shader type (GLES20.GL_VERTEX_SHADER)</span></div><div class=\"line\">    <span class=\"comment\">// or a fragment shader type (GLES20.GL_FRAGMENT_SHADER)</span></div><div class=\"line\">    <span class=\"keyword\">int</span> shader = GLES20.glCreateShader(type);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// add the source code to the shader and compile it</span></div><div class=\"line\">    GLES20.glShaderSource(shader, shaderCode);</div><div class=\"line\">    GLES20.glCompileShader(shader);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> shader;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><h5 id=\"画图\"><a href=\"#画图\" class=\"headerlink\" title=\"画图\"></a>画图</h5><p>  为了绘制你的图形，你必须编译着色器代码，将它们添加至一个OpenGL ES Program对象中，然后执行链接。<br>  在你的绘制对象的构造函数里做这些事情，这样上述步骤就只用执行一次。</p>\n<blockquote>\n<p>Note：编译OpenGL ES着色器及链接操作对于CPU周期和处理时间而言，消耗是巨大的，所以你应该避免重复执行这些事情。<br>如果在执行期间不知道着色器的内容，那么你应该在构建你的应用时，确保它们只被创建了一次，并且缓存以备后续使用。</p>\n</blockquote>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> class <span class=\"title\">Triangle</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> mProgram;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Triangle</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        ...</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">int</span> vertexShader = MyGLRenderer.loadShader(GLES20.GL_VERTEX_SHADER,</div><div class=\"line\">                                            vertexShaderCode);</div><div class=\"line\">        <span class=\"keyword\">int</span> fragmentShader = MyGLRenderer.loadShader(GLES20.GL_FRAGMENT_SHADER,</div><div class=\"line\">                                            fragmentShaderCode);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// create empty OpenGL ES Program</span></div><div class=\"line\">        mProgram = GLES20.glCreateProgram();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// add the vertex shader to program</span></div><div class=\"line\">        GLES20.glAttachShader(mProgram, vertexShader);</div><div class=\"line\">        <span class=\"comment\">// add the fragment shader to program</span></div><div class=\"line\">        GLES20.glAttachShader(mProgram, fragmentShader);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// creates OpenGL ES program executables</span></div><div class=\"line\">        GLES20.glLinkProgram(mProgram);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  绘制属性会根据图形而变化，就需要将变化逻辑一同写入绘制参数，</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mPositionHandle;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mColorHandle;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> vertexCount = triangleCoords.length / COORDS_PER_VERTEX;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> vertexStride = COORDS_PER_VERTEX * <span class=\"number\">4</span>; <span class=\"comment\">// 4 bytes per vertex</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Add program to OpenGL ES environment</span></div><div class=\"line\">    GLES20.glUseProgram(mProgram);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// get handle to vertex shader's vPosition member</span></div><div class=\"line\">    mPositionHandle = GLES20.glGetAttribLocation(mProgram, <span class=\"string\">\"vPosition\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Enable a handle to the triangle vertices</span></div><div class=\"line\">    GLES20.glEnableVertexAttribArray(mPositionHandle);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Prepare the triangle coordinate data</span></div><div class=\"line\">    GLES20.glVertexAttribPointer(mPositionHandle, COORDS_PER_VERTEX,</div><div class=\"line\">                                GLES20.GL_FLOAT, <span class=\"keyword\">false</span>,</div><div class=\"line\">                                vertexStride, vertexBuffer);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// get handle to fragment shader's vColor member</span></div><div class=\"line\">    mColorHandle = GLES20.glGetUniformLocation(mProgram, <span class=\"string\">\"vColor\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Set color for drawing the triangle</span></div><div class=\"line\">    GLES20.glUniform4fv(mColorHandle, <span class=\"number\">1</span>, color, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Draw the triangle</span></div><div class=\"line\">    GLES20.glDrawArrays(GLES20.GL_TRIANGLES, <span class=\"number\">0</span>, vertexCount);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Disable vertex array</span></div><div class=\"line\">    GLES20.glDisableVertexAttribArray(mPositionHandle);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  如此只需要在渲染器的<code>onDrawFrame()</code>中调用上面的<code>onDraw()</code>方法即可。<br>  <img src=\"/2017/03/27/第四篇、Android图像与动画/ogl-triangle.png\" alt=\"绘制图形\"></p>\n<h4 id=\"3、运用投影和相机视角\"><a href=\"#3、运用投影和相机视角\" class=\"headerlink\" title=\"3、运用投影和相机视角\"></a>3、运用投影和相机视角</h4><p>在OpenGL ES 环境中，利用投影和相机视角可以将图像更为逼真的显示。</p>\n</li>\n</ul>\n<ol>\n<li>投影(Projection)：此类变化基于GLSurfaceView的长宽。</li>\n<li>相机视角(Camera View):此类变化基于OpenGL ES 的虚拟相机。</li>\n</ol>\n<ul>\n<li><h5 id=\"定义一个投影\"><a href=\"#定义一个投影\" class=\"headerlink\" title=\"定义一个投影\"></a>定义一个投影</h5>投影变换的数据计算在GLSurfaceView.Render类中的onSurfaceChanged()中执行。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// mMVPMatrix is an abbreviation for \"Model View Projection Matrix\"</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">float</span>[] mMVPMatrix = <span class=\"keyword\">new</span> <span class=\"keyword\">float</span>[<span class=\"number\">16</span>];</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">float</span>[] mProjectionMatrix = <span class=\"keyword\">new</span> <span class=\"keyword\">float</span>[<span class=\"number\">16</span>];</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">float</span>[] mViewMatrix = <span class=\"keyword\">new</span> <span class=\"keyword\">float</span>[<span class=\"number\">16</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSurfaceChanged</span><span class=\"params\">(GL10 unused, <span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height)</span> </span>&#123;</div><div class=\"line\">    GLES20.glViewport(<span class=\"number\">0</span>, <span class=\"number\">0</span>, width, height);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">float</span> ratio = (<span class=\"keyword\">float</span>) width / height;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// this projection matrix is applied to object coordinates</span></div><div class=\"line\">    <span class=\"comment\">// in the onDrawFrame() method</span></div><div class=\"line\">    Matrix.frustumM(mProjectionMatrix, <span class=\"number\">0</span>, -ratio, ratio, -<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">7</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>若是绘图只是用投影，会让图像显得空旷，最好结合相机视角来绘制。</p>\n</blockquote>\n<ul>\n<li><h5 id=\"定义一个相机视角\"><a href=\"#定义一个相机视角\" class=\"headerlink\" title=\"定义一个相机视角\"></a>定义一个相机视角</h5>使用<code>Matrix.setLookAtM()</code>来换算计算，再结合如上投影换算：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDrawFrame</span><span class=\"params\">(GL10 unused)</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// Set the camera position (View matrix)</span></div><div class=\"line\">    Matrix.setLookAtM(mViewMatrix, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, -<span class=\"number\">3</span>, <span class=\"number\">0f</span>, <span class=\"number\">0f</span>, <span class=\"number\">0f</span>, <span class=\"number\">0f</span>, <span class=\"number\">1.0f</span>, <span class=\"number\">0.0f</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Calculate the projection and view transformation</span></div><div class=\"line\">    Matrix.multiplyMM(mMVPMatrix, <span class=\"number\">0</span>, mProjectionMatrix, <span class=\"number\">0</span>, mViewMatrix, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Draw shape</span></div><div class=\"line\">    mTriangle.draw(mMVPMatrix);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>将上一节的三角形使用投影和视角绘制：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Triangle</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//为顶点添加渲染着色器，Matrix</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String vertexShaderCode =</div><div class=\"line\">        <span class=\"comment\">// This matrix member variable provides a hook to manipulate</span></div><div class=\"line\">        <span class=\"comment\">// the coordinates of the objects that use this vertex shader</span></div><div class=\"line\">        <span class=\"string\">\"uniform mat4 uMVPMatrix;\"</span> +</div><div class=\"line\">        <span class=\"string\">\"attribute vec4 vPosition;\"</span> +</div><div class=\"line\">        <span class=\"string\">\"void main() &#123;\"</span> +</div><div class=\"line\">        <span class=\"comment\">// the matrix must be included as a modifier of gl_Position</span></div><div class=\"line\">        <span class=\"comment\">// Note that the uMVPMatrix factor *must be first* in order</span></div><div class=\"line\">        <span class=\"comment\">// for the matrix multiplication product to be correct.</span></div><div class=\"line\">        <span class=\"string\">\"  gl_Position = uMVPMatrix * vPosition;\"</span> +</div><div class=\"line\">        <span class=\"string\">\"&#125;\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Use to access and set the view transformation</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mMVPMatrixHandle;</div><div class=\"line\"></div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>修改<code>onDraw ()</code>方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">(<span class=\"keyword\">float</span>[] mvpMatrix)</span> </span>&#123; <span class=\"comment\">// pass in the calculated transformation matrix</span></div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// get handle to shape's transformation matrix</span></div><div class=\"line\">    mMVPMatrixHandle = GLES20.glGetUniformLocation(mProgram, <span class=\"string\">\"uMVPMatrix\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Pass the projection and view transformation to the shader</span></div><div class=\"line\">    GLES20.glUniformMatrix4fv(mMVPMatrixHandle, <span class=\"number\">1</span>, <span class=\"keyword\">false</span>, mvpMatrix, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Draw the triangle</span></div><div class=\"line\">    GLES20.glDrawArrays(GLES20.GL_TRIANGLES, <span class=\"number\">0</span>, vertexCount);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Disable vertex array</span></div><div class=\"line\">    GLES20.glDisableVertexAttribArray(mPositionHandle);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>效果如图：<img src=\"/2017/03/27/第四篇、Android图像与动画/ogl-triangle-projected.png\" alt=\"视角绘图\"></p>\n<h4 id=\"4、添加移动\"><a href=\"#4、添加移动\" class=\"headerlink\" title=\"4、添加移动\"></a>4、添加移动</h4><p>OpenGL 区别于Android的canvas和Drawable图形框架，在于其提供的特殊功能，如3D效果等。</p>\n<ul>\n<li><h5 id=\"旋转图像\"><a href=\"#旋转图像\" class=\"headerlink\" title=\"旋转图像\"></a>旋转图像</h5>在OpenGL ES2.0中新增一个变化矩阵，结合之前的投影和视角，来绘制图形移动。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">float</span>[] mRotationMatrix = <span class=\"keyword\">new</span> <span class=\"keyword\">float</span>[<span class=\"number\">16</span>];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDrawFrame</span><span class=\"params\">(GL10 gl)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">float</span>[] scratch = <span class=\"keyword\">new</span> <span class=\"keyword\">float</span>[<span class=\"number\">16</span>];</div><div class=\"line\"></div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Create a rotation transformation for the triangle</span></div><div class=\"line\">    <span class=\"keyword\">long</span> time = SystemClock.uptimeMillis() % <span class=\"number\">4000L</span>;</div><div class=\"line\">    <span class=\"keyword\">float</span> angle = <span class=\"number\">0.090f</span> * ((<span class=\"keyword\">int</span>) time);</div><div class=\"line\">    Matrix.setRotateM(mRotationMatrix, <span class=\"number\">0</span>, angle, <span class=\"number\">0</span>, <span class=\"number\">0</span>, -<span class=\"number\">1.0f</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Combine the rotation matrix with the projection and camera view</span></div><div class=\"line\">    <span class=\"comment\">// Note that the mMVPMatrix factor *must be first* in order</span></div><div class=\"line\">    <span class=\"comment\">// for the matrix multiplication product to be correct.</span></div><div class=\"line\">    Matrix.multiplyMM(scratch, <span class=\"number\">0</span>, mMVPMatrix, <span class=\"number\">0</span>, mRotationMatrix, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Draw triangle</span></div><div class=\"line\">    mTriangle.draw(scratch);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p><strong>Note:</strong> 不要将<code>GLSurfaceView.RENDERMODE_WHEN_DIRTY</code>注释掉，否则就可能不会移动，也不会渲染。</p>\n</blockquote>\n<ul>\n<li><h5 id=\"启用连续渲染\"><a href=\"#启用连续渲染\" class=\"headerlink\" title=\"启用连续渲染\"></a>启用连续渲染</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyGLSurfaceView</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// Render the view only when there is a change in the drawing data.</span></div><div class=\"line\">    <span class=\"comment\">// To allow the triangle to rotate automatically, this line is commented out:</span></div><div class=\"line\">    <span class=\"comment\">//setRenderMode(GLSurfaceView.RENDERMODE_WHEN_DIRTY);</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"5、响应触摸事件\"><a href=\"#5、响应触摸事件\" class=\"headerlink\" title=\"5、响应触摸事件\"></a>5、响应触摸事件</h4><p>炫酷的图形图像，也可以和用户有良好的交互体验。重写<code>GLSurfaceView</code>类的<code>onTouchEvent()</code>方法<br>来响应触摸事件。</p>\n<ul>\n<li><h5 id=\"注册监听\"><a href=\"#注册监听\" class=\"headerlink\" title=\"注册监听\"></a>注册监听</h5>在重写<code>onTouchEvent()</code>方法后，想要完成事件相应，就需要注册监听。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> TOUCH_SCALE_FACTOR = <span class=\"number\">180.0f</span> / <span class=\"number\">320</span>;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">float</span> mPreviousX;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">float</span> mPreviousY;</div><div class=\"line\"><span class=\"comment\">//复写onTouchEvent方法，本文用于响应MotionEvent.ACTION_MOVE事件</span></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouchEvent</span><span class=\"params\">(MotionEvent e)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// MotionEvent reports input details from the touch screen</span></div><div class=\"line\">    <span class=\"comment\">// and other input controls. In this case, you are only</span></div><div class=\"line\">    <span class=\"comment\">// interested in events where the touch position changed.</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">float</span> x = e.getX();</div><div class=\"line\">    <span class=\"keyword\">float</span> y = e.getY();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">switch</span> (e.getAction()) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE:</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">float</span> dx = x - mPreviousX;</div><div class=\"line\">            <span class=\"keyword\">float</span> dy = y - mPreviousY;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// reverse direction of rotation above the mid-line</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (y &gt; getHeight() / <span class=\"number\">2</span>) &#123;</div><div class=\"line\">              dx = dx * -<span class=\"number\">1</span> ;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// reverse direction of rotation to left of the mid-line</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (x &lt; getWidth() / <span class=\"number\">2</span>) &#123;</div><div class=\"line\">              dy = dy * -<span class=\"number\">1</span> ;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            mRenderer.setAngle(</div><div class=\"line\">                    mRenderer.getAngle() +</div><div class=\"line\">                    ((dx + dy) * TOUCH_SCALE_FACTOR));</div><div class=\"line\">            requestRender();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    mPreviousX = x;</div><div class=\"line\">    mPreviousY = y;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>如上代码调用<code>requestRender()</code>来刷新绘制，通过<code>setRenderMode()</code>来提高效率，只有变化时候才绘制：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyGLSurfaceView</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// Render the view only when there is a change in the drawing data</span></div><div class=\"line\">    setRenderMode(GLSurfaceView.RENDERMODE_WHEN_DIRTY);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li><h5 id=\"公开变量旋转角度\"><a href=\"#公开变量旋转角度\" class=\"headerlink\" title=\"公开变量旋转角度\"></a>公开变量旋转角度</h5>旋转角度的变量需要public，包括get和set方法<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyGLRenderer</span> <span class=\"keyword\">implements</span> <span class=\"title\">GLSurfaceView</span>.<span class=\"title\">Renderer</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">float</span> mAngle;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">float</span> <span class=\"title\">getAngle</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mAngle;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAngle</span><span class=\"params\">(<span class=\"keyword\">float</span> angle)</span> </span>&#123;</div><div class=\"line\">        mAngle = angle;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>然后在调用绘制图形的地方，填入角度值，启动旋转。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDrawFrame</span><span class=\"params\">(GL10 gl)</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">float</span>[] scratch = <span class=\"keyword\">new</span> <span class=\"keyword\">float</span>[<span class=\"number\">16</span>];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Create a rotation for the triangle</span></div><div class=\"line\">    <span class=\"comment\">// long time = SystemClock.uptimeMillis() % 4000L;</span></div><div class=\"line\">    <span class=\"comment\">// float angle = 0.090f * ((int) time);</span></div><div class=\"line\">    Matrix.setRotateM(mRotationMatrix, <span class=\"number\">0</span>, mAngle, <span class=\"number\">0</span>, <span class=\"number\">0</span>, -<span class=\"number\">1.0f</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Combine the rotation matrix with the projection and camera view</span></div><div class=\"line\">    <span class=\"comment\">// Note that the mMVPMatrix factor *must be first* in order</span></div><div class=\"line\">    <span class=\"comment\">// for the matrix multiplication product to be correct.</span></div><div class=\"line\">    Matrix.multiplyMM(scratch, <span class=\"number\">0</span>, mMVPMatrix, <span class=\"number\">0</span>, mRotationMatrix, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Draw triangle</span></div><div class=\"line\">    mTriangle.draw(scratch);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>滑动效果：<img src=\"/2017/03/27/第四篇、Android图像与动画/ogl-triangle-touch.png\" alt=\"滑动效果\"></p>\n<h3 id=\"3、添加动画\"><a href=\"#3、添加动画\" class=\"headerlink\" title=\"3、添加动画\"></a>3、添加动画</h3><p>动画效果可以让我们的App更为炫酷，但是也要在适当的地方和时机使用它。本章主要介绍Android的一些动画效果实现。</p>\n<h4 id=\"1、View间渐变\"><a href=\"#1、View间渐变\" class=\"headerlink\" title=\"1、View间渐变\"></a>1、View间渐变</h4><p>渐变动画通常用于View的切换，淡入淡出效果。<a href=\"http://hukai.me/android-training-course-in-chinese/animations/anim_crossfade.mp4\" target=\"_blank\" rel=\"external\">渐变动画</a></p>\n<ul>\n<li><h5 id=\"创建View\"><a href=\"#创建View\" class=\"headerlink\" title=\"创建View\"></a>创建View</h5><p>示例，一个进度圈和可滑动的view</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">FrameLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ScrollView</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"/apk/res/android\"</span></span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span> <span class=\"attr\">style</span>=<span class=\"string\">\"?android:textAppearanceMedium\"</span></span></div><div class=\"line\">            <span class=\"attr\">android:lineSpacingMultiplier</span>=<span class=\"string\">\"1.2\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">            <span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/lorem_ipsum\"</span></div><div class=\"line\">            <span class=\"attr\">android:padding</span>=<span class=\"string\">\"16dp\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ScrollView</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ProgressBar</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/loading_spinner\"</span></span></div><div class=\"line\">        <span class=\"attr\">style</span>=<span class=\"string\">\"?android:progressBarStyleLarge\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">\"center\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">FrameLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"view设置动画\"><a href=\"#view设置动画\" class=\"headerlink\" title=\"view设置动画\"></a>view设置动画</h5><p>为上面的view设置动画效果，步骤如下：</p>\n</li>\n</ul>\n<ol>\n<li>设置view的成员变量，以备后用。</li>\n<li>先设置淡入的View的visible为gone</li>\n<li>将<code>config_shortAnimTime</code>系统属性暂存到成员变量。</li>\n</ol>\n<p>示例：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CrossfadeActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> View mContentView;</div><div class=\"line\">    <span class=\"keyword\">private</span> View mLoadingView;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mShortAnimationDuration;</div><div class=\"line\"></div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_crossfade);</div><div class=\"line\"></div><div class=\"line\">        mContentView = findViewById(R.id.content);</div><div class=\"line\">        mLoadingView = findViewById(R.id.loading_spinner);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Initially hide the content view.</span></div><div class=\"line\">        mContentView.setVisibility(View.GONE);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Retrieve and cache the system's default \"short\" animation time.</span></div><div class=\"line\">        mShortAnimationDuration = getResources().getInteger(</div><div class=\"line\">                android.R.integer.config_shortAnimTime);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li><h5 id=\"渐变View\"><a href=\"#渐变View\" class=\"headerlink\" title=\"渐变View\"></a>渐变View</h5>完成如上设置后，开始实现View的渐变效果：</li>\n</ul>\n<ol>\n<li>将需要淡入的View的Visible改为VISIBLE，透明度alpha=0</li>\n<li>将淡入的View，alpha从0–1，淡出的View，alpha从1–0</li>\n<li>使用<code>Animator.AnimatorListener</code>中的<code>onAnimationEnd()</code>来设置淡出的view的visible为gone，即使alpha=0，但是也会占用布局资源，所以需要gone。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> View mContentView;</div><div class=\"line\"><span class=\"keyword\">private</span> View mLoadingView;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mShortAnimationDuration;</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">crossfade</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Set the content view to 0% opacity but visible, so that it is visible</span></div><div class=\"line\">    <span class=\"comment\">// (but fully transparent) during the animation.</span></div><div class=\"line\">    mContentView.setAlpha(<span class=\"number\">0f</span>);</div><div class=\"line\">    mContentView.setVisibility(View.VISIBLE);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Animate the content view to 100% opacity, and clear any animation</span></div><div class=\"line\">    <span class=\"comment\">// listener set on the view.</span></div><div class=\"line\">    mContentView.animate()</div><div class=\"line\">            .alpha(<span class=\"number\">1f</span>)</div><div class=\"line\">            .setDuration(mShortAnimationDuration)</div><div class=\"line\">            .setListener(<span class=\"keyword\">null</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Animate the loading view to 0% opacity. After the animation ends,</span></div><div class=\"line\">    <span class=\"comment\">// set its visibility to GONE as an optimization step (it won't</span></div><div class=\"line\">    <span class=\"comment\">// participate in layout passes, etc.)</span></div><div class=\"line\">    mLoadingView.animate()</div><div class=\"line\">            .alpha(<span class=\"number\">0f</span>)</div><div class=\"line\">            .setDuration(mShortAnimationDuration)</div><div class=\"line\">            .setListener(<span class=\"keyword\">new</span> AnimatorListenerAdapter() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationEnd</span><span class=\"params\">(Animator animation)</span> </span>&#123;</div><div class=\"line\">                    mLoadingView.setVisibility(View.GONE);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"2、使用Viewpager实现屏幕滑动\"><a href=\"#2、使用Viewpager实现屏幕滑动\" class=\"headerlink\" title=\"2、使用Viewpager实现屏幕滑动\"></a>2、使用Viewpager实现屏幕滑动</h4><p>类似View的淡入淡出切换，而屏幕的切换是整个的界面转换，使用<code>supports library</code>的ViewPager来实现。<br><a href=\"http://hukai.me/android-training-course-in-chinese/animations/anim_screenslide.mp4\" target=\"_blank\" rel=\"external\">ViewPager</a></p>\n<ul>\n<li><h5 id=\"创建View-1\"><a href=\"#创建View-1\" class=\"headerlink\" title=\"创建View\"></a>创建View</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- fragment_screen_slide_page.xml --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ScrollView</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/content\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span> &gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span> <span class=\"attr\">style</span>=<span class=\"string\">\"?android:textAppearanceMedium\"</span></span></div><div class=\"line\">        <span class=\"attr\">android:padding</span>=<span class=\"string\">\"16dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:lineSpacingMultiplier</span>=<span class=\"string\">\"1.2\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/lorem_ipsum\"</span> /&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ScrollView</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>如上定义一个fragment和text view</p>\n<ul>\n<li><h5 id=\"创建Fragment\"><a href=\"#创建Fragment\" class=\"headerlink\" title=\"创建Fragment\"></a>创建Fragment</h5><p>创建一个Fragment对象实例来展示view布局。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.app.Fragment;</div><div class=\"line\">...</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScreenSlidePageFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, ViewGroup container,</span></span></div><div class=\"line\">            Bundle savedInstanceState) &#123;</div><div class=\"line\">        ViewGroup rootView = (ViewGroup) inflater.inflate(</div><div class=\"line\">                R.layout.fragment_screen_slide_page, container, <span class=\"keyword\">false</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> rootView;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"添加viewPager\"><a href=\"#添加viewPager\" class=\"headerlink\" title=\"添加viewPager\"></a>添加viewPager</h5><p>ViewPager有内建的滑动手势，配合PagerAdapter来适配数据。需要创建一个包含ViewPager的布局</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- activity_screen_slide.xml --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.v4.view.ViewPager</span></span></div><div class=\"line\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/pager\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span> /&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>接下来就是创建一个Activity来关联布局，实现逻辑：</p>\n<ol>\n<li>content View中包含上述布局文件</li>\n<li>创建<code>FragmentStatePagerAdapter</code>的子类，实现<code>getItem()</code>方法，把ScreenSlidePageFragment实例作为新页面补充进来。<br>PagerAdapter还需要实现getCount()方法，它返回 Adapter将要创建页面的总数（例如5个）。</li>\n<li>关联<code>ViewPager</code>和<code>PagerAdapter</code></li>\n<li>处理Back按钮，按下变为在虚拟的Fragment栈中回退。如果用户已经在第一个页面了，<br>则在Activity的回退栈（back stack）中回退。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.app.Fragment;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.app.FragmentManager;</div><div class=\"line\">...</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScreenSlidePagerActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">FragmentActivity</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//屏幕页面数目</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> NUM_PAGES = <span class=\"number\">5</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//View Pager对象，用于处理页面切换的容器</span></div><div class=\"line\">    <span class=\"keyword\">private</span> ViewPager mPager;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//页面数据适配器</span></div><div class=\"line\">    <span class=\"keyword\">private</span> PagerAdapter mPagerAdapter;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_screen_slide);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 初始化数据</span></div><div class=\"line\">        mPager = (ViewPager) findViewById(R.id.pager);</div><div class=\"line\">        mPagerAdapter = <span class=\"keyword\">new</span> ScreenSlidePagerAdapter(getSupportFragmentManager());</div><div class=\"line\">        mPager.setAdapter(mPagerAdapter);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//处理返回按钮的点击事件</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onBackPressed</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mPager.getCurrentItem() == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">//要是第一个页面，返回按钮就是退出</span></div><div class=\"line\">            <span class=\"keyword\">super</span>.onBackPressed();</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">//不是第一个页面，返回按钮就是返回上一个页面</span></div><div class=\"line\">            mPager.setCurrentItem(mPager.getCurrentItem() - <span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//简单的适配器，用于加入几个页面</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScreenSlidePagerAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">FragmentStatePagerAdapter</span> </span>&#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ScreenSlidePagerAdapter</span><span class=\"params\">(FragmentManager fm)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(fm);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Fragment <span class=\"title\">getItem</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ScreenSlidePageFragment();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getCount</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> NUM_PAGES;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>ViewPager包含有默认的滑屏动画，若要自定义切换动画需要实现<code>viewpager.transformer</code>接口，并补充道Viewpager中<br>，实现其方法<code>transformPage()</code>。该方法会在显示页面滑动时，于其相邻的两个页面间调用。重要的参数就是当前页面<br>的位置position，可以根据页面位置来设置不同的动画效果。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ViewPager mPager = (ViewPager) findViewById(R.id.pager);</div><div class=\"line\">...</div><div class=\"line\">mPager.setPagerTransformer(<span class=\"keyword\">true</span>,<span class=\"keyword\">new</span> ZoomOutPagerTransformer());</div></pre></td></tr></table></figure></p>\n<ul>\n<li><h5 id=\"ZoomOutPagerTransformer\"><a href=\"#ZoomOutPagerTransformer\" class=\"headerlink\" title=\"ZoomOutPagerTransformer\"></a>ZoomOutPagerTransformer</h5><p>效果是逐渐褪色的淡出模式<a href=\"http://hukai.me/android-training-course-in-chinese/animations/anim_page_transformer_zoomout.mp4\" target=\"_blank\" rel=\"external\">演示</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ZoomOutPageTransformer</span> <span class=\"keyword\">implements</span> <span class=\"title\">ViewPager</span>.<span class=\"title\">PageTransformer</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> MIN_SCALE = <span class=\"number\">0.85f</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> MIN_ALPHA = <span class=\"number\">0.5f</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">transformPage</span><span class=\"params\">(View view, <span class=\"keyword\">float</span> position)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> pageWidth = view.getWidth();</div><div class=\"line\">        <span class=\"keyword\">int</span> pageHeight = view.getHeight();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (position &lt; -<span class=\"number\">1</span>) &#123; <span class=\"comment\">// [-Infinity,-1)</span></div><div class=\"line\">            <span class=\"comment\">// This page is way off-screen to the left.</span></div><div class=\"line\">            view.setAlpha(<span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (position &lt;= <span class=\"number\">1</span>) &#123; <span class=\"comment\">// [-1,1]</span></div><div class=\"line\">            <span class=\"comment\">// Modify the default slide transition to shrink the page as well</span></div><div class=\"line\">            <span class=\"keyword\">float</span> scaleFactor = Math.max(MIN_SCALE, <span class=\"number\">1</span> - Math.abs(position));</div><div class=\"line\">            <span class=\"keyword\">float</span> vertMargin = pageHeight * (<span class=\"number\">1</span> - scaleFactor) / <span class=\"number\">2</span>;</div><div class=\"line\">            <span class=\"keyword\">float</span> horzMargin = pageWidth * (<span class=\"number\">1</span> - scaleFactor) / <span class=\"number\">2</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (position &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                view.setTranslationX(horzMargin - vertMargin / <span class=\"number\">2</span>);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                view.setTranslationX(-horzMargin + vertMargin / <span class=\"number\">2</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// Scale the page down (between MIN_SCALE and 1)</span></div><div class=\"line\">            view.setScaleX(scaleFactor);</div><div class=\"line\">            view.setScaleY(scaleFactor);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// Fade the page relative to its size.</span></div><div class=\"line\">            view.setAlpha(MIN_ALPHA +</div><div class=\"line\">                    (scaleFactor - MIN_SCALE) /</div><div class=\"line\">                    (<span class=\"number\">1</span> - MIN_SCALE) * (<span class=\"number\">1</span> - MIN_ALPHA));</div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// (1,+Infinity]</span></div><div class=\"line\">            <span class=\"comment\">// This page is way off-screen to the right.</span></div><div class=\"line\">            view.setAlpha(<span class=\"number\">0</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"Depth-Pager-Transformer\"><a href=\"#Depth-Pager-Transformer\" class=\"headerlink\" title=\"Depth Pager Transformer\"></a>Depth Pager Transformer</h5><p>右滑动潜藏效果<a href=\"http://hukai.me/android-training-course-in-chinese/animations/anim_page_transformer_depth.mp4\" target=\"_blank\" rel=\"external\">video</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DepthPageTransformer</span> <span class=\"keyword\">implements</span> <span class=\"title\">ViewPager</span>.<span class=\"title\">PageTransformer</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> MIN_SCALE = <span class=\"number\">0.75f</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">transformPage</span><span class=\"params\">(View view, <span class=\"keyword\">float</span> position)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> pageWidth = view.getWidth();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (position &lt; -<span class=\"number\">1</span>) &#123; <span class=\"comment\">// [-Infinity,-1)</span></div><div class=\"line\">            <span class=\"comment\">// This page is way off-screen to the left.</span></div><div class=\"line\">            view.setAlpha(<span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (position &lt;= <span class=\"number\">0</span>) &#123; <span class=\"comment\">// [-1,0]</span></div><div class=\"line\">            <span class=\"comment\">// Use the default slide transition when moving to the left page</span></div><div class=\"line\">            view.setAlpha(<span class=\"number\">1</span>);</div><div class=\"line\">            view.setTranslationX(<span class=\"number\">0</span>);</div><div class=\"line\">            view.setScaleX(<span class=\"number\">1</span>);</div><div class=\"line\">            view.setScaleY(<span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (position &lt;= <span class=\"number\">1</span>) &#123; <span class=\"comment\">// (0,1]</span></div><div class=\"line\">            <span class=\"comment\">// Fade the page out.</span></div><div class=\"line\">            view.setAlpha(<span class=\"number\">1</span> - position);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// Counteract the default slide transition</span></div><div class=\"line\">            view.setTranslationX(pageWidth * -position);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// Scale the page down (between MIN_SCALE and 1)</span></div><div class=\"line\">            <span class=\"keyword\">float</span> scaleFactor = MIN_SCALE</div><div class=\"line\">                    + (<span class=\"number\">1</span> - MIN_SCALE) * (<span class=\"number\">1</span> - Math.abs(position));</div><div class=\"line\">            view.setScaleX(scaleFactor);</div><div class=\"line\">            view.setScaleY(scaleFactor);</div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// (1,+Infinity]</span></div><div class=\"line\">            <span class=\"comment\">// This page is way off-screen to the right.</span></div><div class=\"line\">            view.setAlpha(<span class=\"number\">0</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"3、实现Card翻转动画\"><a href=\"#3、实现Card翻转动画\" class=\"headerlink\" title=\"3、实现Card翻转动画\"></a>3、实现Card翻转动画</h4><p>通过自定义Fragment实现Card翻转效果的view切换。<a href=\"http://hukai.me/android-training-course-in-chinese/animations/anim_card_flip.mp4\" target=\"_blank\" rel=\"external\">card</a></p>\n<ul>\n<li><h5 id=\"创建Animator\"><a href=\"#创建Animator\" class=\"headerlink\" title=\"创建Animator\"></a>创建Animator</h5>创建Card翻转动画，我们需要两个Animator。一个让正面的card的右侧向左翻转渐出，一个让背面的Card向右翻转渐入。我们还需要两个 Animator让背面的card的右侧向左翻转渐入，一个让向右翻转渐入。</li>\n</ul>\n<p><strong>card_flip_left_in.xml</strong><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">set</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Before rotating, immediately set the alpha to 0. --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">objectAnimator</span></span></div><div class=\"line\">        <span class=\"attr\">android:valueFrom</span>=<span class=\"string\">\"1.0\"</span></div><div class=\"line\">        <span class=\"attr\">android:valueTo</span>=<span class=\"string\">\"0.0\"</span></div><div class=\"line\">        <span class=\"attr\">android:propertyName</span>=<span class=\"string\">\"alpha\"</span></div><div class=\"line\">        <span class=\"attr\">android:duration</span>=<span class=\"string\">\"0\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Rotate. --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">objectAnimator</span></span></div><div class=\"line\">        <span class=\"attr\">android:valueFrom</span>=<span class=\"string\">\"-180\"</span></div><div class=\"line\">        <span class=\"attr\">android:valueTo</span>=<span class=\"string\">\"0\"</span></div><div class=\"line\">        <span class=\"attr\">android:propertyName</span>=<span class=\"string\">\"rotationY\"</span></div><div class=\"line\">        <span class=\"attr\">android:interpolator</span>=<span class=\"string\">\"@android:interpolator/accelerate_decelerate\"</span></div><div class=\"line\">        <span class=\"attr\">android:duration</span>=<span class=\"string\">\"@integer/card_flip_time_full\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Half-way through the rotation (see startOffset), set the alpha to 1. --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">objectAnimator</span></span></div><div class=\"line\">        <span class=\"attr\">android:valueFrom</span>=<span class=\"string\">\"0.0\"</span></div><div class=\"line\">        <span class=\"attr\">android:valueTo</span>=<span class=\"string\">\"1.0\"</span></div><div class=\"line\">        <span class=\"attr\">android:propertyName</span>=<span class=\"string\">\"alpha\"</span></div><div class=\"line\">        <span class=\"attr\">android:startOffset</span>=<span class=\"string\">\"@integer/card_flip_time_half\"</span></div><div class=\"line\">        <span class=\"attr\">android:duration</span>=<span class=\"string\">\"1\"</span> /&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">set</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><strong>card_flip_left_out.xml</strong><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">set</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Rotate. --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">objectAnimator</span></span></div><div class=\"line\">        <span class=\"attr\">android:valueFrom</span>=<span class=\"string\">\"0\"</span></div><div class=\"line\">        <span class=\"attr\">android:valueTo</span>=<span class=\"string\">\"180\"</span></div><div class=\"line\">        <span class=\"attr\">android:propertyName</span>=<span class=\"string\">\"rotationY\"</span></div><div class=\"line\">        <span class=\"attr\">android:interpolator</span>=<span class=\"string\">\"@android:interpolator/accelerate_decelerate\"</span></div><div class=\"line\">        <span class=\"attr\">android:duration</span>=<span class=\"string\">\"@integer/card_flip_time_full\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Half-way through the rotation (see startOffset), set the alpha to 0. --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">objectAnimator</span></span></div><div class=\"line\">        <span class=\"attr\">android:valueFrom</span>=<span class=\"string\">\"1.0\"</span></div><div class=\"line\">        <span class=\"attr\">android:valueTo</span>=<span class=\"string\">\"0.0\"</span></div><div class=\"line\">        <span class=\"attr\">android:propertyName</span>=<span class=\"string\">\"alpha\"</span></div><div class=\"line\">        <span class=\"attr\">android:startOffset</span>=<span class=\"string\">\"@integer/card_flip_time_half\"</span></div><div class=\"line\">        <span class=\"attr\">android:duration</span>=<span class=\"string\">\"1\"</span> /&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">set</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><strong>card_flip_right_in.xml</strong><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">set</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Before rotating, immediately set the alpha to 0. --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">objectAnimator</span></span></div><div class=\"line\">        <span class=\"attr\">android:valueFrom</span>=<span class=\"string\">\"1.0\"</span></div><div class=\"line\">        <span class=\"attr\">android:valueTo</span>=<span class=\"string\">\"0.0\"</span></div><div class=\"line\">        <span class=\"attr\">android:propertyName</span>=<span class=\"string\">\"alpha\"</span></div><div class=\"line\">        <span class=\"attr\">android:duration</span>=<span class=\"string\">\"0\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Rotate. --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">objectAnimator</span></span></div><div class=\"line\">        <span class=\"attr\">android:valueFrom</span>=<span class=\"string\">\"180\"</span></div><div class=\"line\">        <span class=\"attr\">android:valueTo</span>=<span class=\"string\">\"0\"</span></div><div class=\"line\">        <span class=\"attr\">android:propertyName</span>=<span class=\"string\">\"rotationY\"</span></div><div class=\"line\">        <span class=\"attr\">android:interpolator</span>=<span class=\"string\">\"@android:interpolator/accelerate_decelerate\"</span></div><div class=\"line\">        <span class=\"attr\">android:duration</span>=<span class=\"string\">\"@integer/card_flip_time_full\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Half-way through the rotation (see startOffset), set the alpha to 1. --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">objectAnimator</span></span></div><div class=\"line\">        <span class=\"attr\">android:valueFrom</span>=<span class=\"string\">\"0.0\"</span></div><div class=\"line\">        <span class=\"attr\">android:valueTo</span>=<span class=\"string\">\"1.0\"</span></div><div class=\"line\">        <span class=\"attr\">android:propertyName</span>=<span class=\"string\">\"alpha\"</span></div><div class=\"line\">        <span class=\"attr\">android:startOffset</span>=<span class=\"string\">\"@integer/card_flip_time_half\"</span></div><div class=\"line\">        <span class=\"attr\">android:duration</span>=<span class=\"string\">\"1\"</span> /&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">set</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><strong>card_flip_right_out.xml</strong><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">set</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Rotate. --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">objectAnimator</span></span></div><div class=\"line\">        <span class=\"attr\">android:valueFrom</span>=<span class=\"string\">\"0\"</span></div><div class=\"line\">        <span class=\"attr\">android:valueTo</span>=<span class=\"string\">\"-180\"</span></div><div class=\"line\">        <span class=\"attr\">android:propertyName</span>=<span class=\"string\">\"rotationY\"</span></div><div class=\"line\">        <span class=\"attr\">android:interpolator</span>=<span class=\"string\">\"@android:interpolator/accelerate_decelerate\"</span></div><div class=\"line\">        <span class=\"attr\">android:duration</span>=<span class=\"string\">\"@integer/card_flip_time_full\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Half-way through the rotation (see startOffset), set the alpha to 0. --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">objectAnimator</span></span></div><div class=\"line\">        <span class=\"attr\">android:valueFrom</span>=<span class=\"string\">\"1.0\"</span></div><div class=\"line\">        <span class=\"attr\">android:valueTo</span>=<span class=\"string\">\"0.0\"</span></div><div class=\"line\">        <span class=\"attr\">android:propertyName</span>=<span class=\"string\">\"alpha\"</span></div><div class=\"line\">        <span class=\"attr\">android:startOffset</span>=<span class=\"string\">\"@integer/card_flip_time_half\"</span></div><div class=\"line\">        <span class=\"attr\">android:duration</span>=<span class=\"string\">\"1\"</span> /&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">set</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<ul>\n<li><h5 id=\"创建View-2\"><a href=\"#创建View-2\" class=\"headerlink\" title=\"创建View\"></a>创建View</h5>card的每个面都是一个布局，需要在Fragment中关联展示<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></div><div class=\"line\">    <span class=\"attr\">android:background</span>=<span class=\"string\">\"#a6c\"</span></div><div class=\"line\">    <span class=\"attr\">android:padding</span>=<span class=\"string\">\"16dp\"</span></div><div class=\"line\">    <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"bottom\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@android:id/text1\"</span></span></div><div class=\"line\">        <span class=\"attr\">style</span>=<span class=\"string\">\"?android:textAppearanceLarge\"</span></div><div class=\"line\">        <span class=\"attr\">android:textStyle</span>=<span class=\"string\">\"bold\"</span></div><div class=\"line\">        <span class=\"attr\">android:textColor</span>=<span class=\"string\">\"#fff\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/card_back_title\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span> <span class=\"attr\">style</span>=<span class=\"string\">\"?android:textAppearanceSmall\"</span></span></div><div class=\"line\">        <span class=\"attr\">android:textAllCaps</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">        <span class=\"attr\">android:textColor</span>=<span class=\"string\">\"#80ffffff\"</span></div><div class=\"line\">        <span class=\"attr\">android:textStyle</span>=<span class=\"string\">\"bold\"</span></div><div class=\"line\">        <span class=\"attr\">android:lineSpacingMultiplier</span>=<span class=\"string\">\"1.2\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/card_back_description\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>另一面：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ImageView</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:src</span>=<span class=\"string\">\"@drawable/image1\"</span></div><div class=\"line\">    <span class=\"attr\">android:scaleType</span>=<span class=\"string\">\"centerCrop\"</span></div><div class=\"line\">    <span class=\"attr\">android:contentDescription</span>=<span class=\"string\">\"@string/description_image_1\"</span> /&gt;</div></pre></td></tr></table></figure></p>\n<ul>\n<li><h5 id=\"创建Fragment-1\"><a href=\"#创建Fragment-1\" class=\"headerlink\" title=\"创建Fragment\"></a>创建Fragment</h5><p>Card的正反面都是Fragment，需要创建并关联布局</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CardFlipActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * A fragment representing the front of the card.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CardFrontFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, ViewGroup container,</span></span></div><div class=\"line\">                Bundle savedInstanceState) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> inflater.inflate(R.layout.fragment_card_front, container, <span class=\"keyword\">false</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * A fragment representing the back of the card.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CardBackFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, ViewGroup container,</span></span></div><div class=\"line\">                Bundle savedInstanceState) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> inflater.inflate(R.layout.fragment_card_back, container, <span class=\"keyword\">false</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"实现翻转Card动画\"><a href=\"#实现翻转Card动画\" class=\"headerlink\" title=\"实现翻转Card动画\"></a>实现翻转Card动画</h5><p>创建一个framelayout来用于activity展示fragment</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">FrameLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/container\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span> /&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>在Activity中实现展示<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CardFlipActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_activity_card_flip);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (savedInstanceState == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            getFragmentManager()</div><div class=\"line\">                    .beginTransaction()</div><div class=\"line\">                    .add(R.id.container, <span class=\"keyword\">new</span> CardFrontFragment())</div><div class=\"line\">                    .commit();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如上默认展示了card的正面，需要适时创建card的背面，并实现翻转。</p>\n<ol>\n<li><p>将Fragment转换设置我们刚做的自定义动画</p>\n</li>\n<li><p>用新Fragment替换当前显示的Fragment，并且应用之前创建的动画到该事件中。</p>\n</li>\n<li><p>添加之前显示的Fragment到Fragment的回退栈（back stack）中，所以当用户按下 Back 键时，Card会翻转回来。</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">flipCard</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mShowingBack) &#123;</div><div class=\"line\">        getFragmentManager().popBackStack();</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 是否正在翻转</span></div><div class=\"line\"></div><div class=\"line\">    mShowingBack = <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 创建并执行一个事务，新增fragment并应用自定义动画，且将fragment加入回退栈</span></div><div class=\"line\"></div><div class=\"line\">    getFragmentManager()</div><div class=\"line\">            .beginTransaction()</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 使用自定义动画</span></div><div class=\"line\">            .setCustomAnimations(</div><div class=\"line\">                    R.animator.card_flip_right_in, R.animator.card_flip_right_out,</div><div class=\"line\">                    R.animator.card_flip_left_in, R.animator.card_flip_left_out)</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 翻转的fragment</span></div><div class=\"line\">            .replace(R.id.container, <span class=\"keyword\">new</span> CardBackFragment())</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 新增事务到回退栈</span></div><div class=\"line\">            .addToBackStack(<span class=\"keyword\">null</span>)</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 提交事务</span></div><div class=\"line\">            .commit();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"4、View的缩放\"><a href=\"#4、View的缩放\" class=\"headerlink\" title=\"4、View的缩放\"></a>4、View的缩放</h4><p>View的动画缩放效果，常用语图片的浏览展示。<a href=\"http://hukai.me/android-training-course-in-chinese/animations/anim_zoom.mp4\" target=\"_blank\" rel=\"external\">scale</a></p>\n<ul>\n<li><h5 id=\"创建View-3\"><a href=\"#创建View-3\" class=\"headerlink\" title=\"创建View\"></a>创建View</h5><p>示例创建了大小两个版本的文件，</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">FrameLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/container\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></div><div class=\"line\">        <span class=\"attr\">android:padding</span>=<span class=\"string\">\"16dp\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ImageButton</span></span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/thumb_button_1\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"100dp\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"75dp\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_marginRight</span>=<span class=\"string\">\"1dp\"</span></div><div class=\"line\">            <span class=\"attr\">android:src</span>=<span class=\"string\">\"@drawable/thumb1\"</span></div><div class=\"line\">            <span class=\"attr\">android:scaleType</span>=<span class=\"string\">\"centerCrop\"</span></div><div class=\"line\">            <span class=\"attr\">android:contentDescription</span>=<span class=\"string\">\"@string/description_image_1\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- This initially-hidden ImageView will hold the expanded/zoomed version of</span></div><div class=\"line\">         the images above. Without transformations applied, it takes up the entire</div><div class=\"line\">         screen. To achieve the \"zoom\" animation, this view's bounds are animated</div><div class=\"line\">         from the bounds of the thumbnail button above, to its final laid-out</div><div class=\"line\">         bounds.</div><div class=\"line\">         --&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ImageView</span></span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/expanded_image\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:visibility</span>=<span class=\"string\">\"invisible\"</span></div><div class=\"line\">        <span class=\"attr\">android:contentDescription</span>=<span class=\"string\">\"@string/description_zoom_touch_close\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">FrameLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"设置缩放动画\"><a href=\"#设置缩放动画\" class=\"headerlink\" title=\"设置缩放动画\"></a>设置缩放动画</h5><p>监听点击事件，实现缩放效果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ZoomActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">FragmentActivity</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Hold a reference to the current animator,</span></div><div class=\"line\">    <span class=\"comment\">// so that it can be canceled mid-way.</span></div><div class=\"line\">    <span class=\"keyword\">private</span> Animator mCurrentAnimator;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// The system \"short\" animation time duration, in milliseconds. This</span></div><div class=\"line\">    <span class=\"comment\">// duration is ideal for subtle animations or animations that occur</span></div><div class=\"line\">    <span class=\"comment\">// very frequently.</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mShortAnimationDuration;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_zoom);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Hook up clicks on the thumbnail views.</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> View thumb1View = findViewById(R.id.thumb_button_1);</div><div class=\"line\">        thumb1View.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">                zoomImageFromThumb(thumb1View, R.drawable.image1);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Retrieve and cache the system's default \"short\" animation time.</span></div><div class=\"line\">        mShortAnimationDuration = getResources().getInteger(</div><div class=\"line\">                android.R.integer.config_shortAnimTime);</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"缩放View\"><a href=\"#缩放View\" class=\"headerlink\" title=\"缩放View\"></a>缩放View</h5><p>缩放View的效果实现：</p>\n</li>\n</ul>\n<ol>\n<li>高清大图放在IamgeView中，用于放大后再显示。</li>\n<li>计算image View的边界。</li>\n<li>要同步改变四个边界，用<code>AnimatorSet</code></li>\n<li>缩小则是类似逆向如上操作。注意view的属性需要设置gone。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">zoomImageFromThumb</span><span class=\"params\">(<span class=\"keyword\">final</span> View thumbView, <span class=\"keyword\">int</span> imageResId)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// If there's an animation in progress, cancel it</span></div><div class=\"line\">    <span class=\"comment\">// immediately and proceed with this one.</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (mCurrentAnimator != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        mCurrentAnimator.cancel();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Load the high-resolution \"zoomed-in\" image.</span></div><div class=\"line\">    <span class=\"keyword\">final</span> ImageView expandedImageView = (ImageView) findViewById(</div><div class=\"line\">            R.id.expanded_image);</div><div class=\"line\">    expandedImageView.setImageResource(imageResId);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Calculate the starting and ending bounds for the zoomed-in image.</span></div><div class=\"line\">    <span class=\"comment\">// This step involves lots of math. Yay, math.</span></div><div class=\"line\">    <span class=\"keyword\">final</span> Rect startBounds = <span class=\"keyword\">new</span> Rect();</div><div class=\"line\">    <span class=\"keyword\">final</span> Rect finalBounds = <span class=\"keyword\">new</span> Rect();</div><div class=\"line\">    <span class=\"keyword\">final</span> Point globalOffset = <span class=\"keyword\">new</span> Point();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// The start bounds are the global visible rectangle of the thumbnail,</span></div><div class=\"line\">    <span class=\"comment\">// and the final bounds are the global visible rectangle of the container</span></div><div class=\"line\">    <span class=\"comment\">// view. Also set the container view's offset as the origin for the</span></div><div class=\"line\">    <span class=\"comment\">// bounds, since that's the origin for the positioning animation</span></div><div class=\"line\">    <span class=\"comment\">// properties (X, Y).</span></div><div class=\"line\">    thumbView.getGlobalVisibleRect(startBounds);</div><div class=\"line\">    findViewById(R.id.container)</div><div class=\"line\">            .getGlobalVisibleRect(finalBounds, globalOffset);</div><div class=\"line\">    startBounds.offset(-globalOffset.x, -globalOffset.y);</div><div class=\"line\">    finalBounds.offset(-globalOffset.x, -globalOffset.y);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Adjust the start bounds to be the same aspect ratio as the final</span></div><div class=\"line\">    <span class=\"comment\">// bounds using the \"center crop\" technique. This prevents undesirable</span></div><div class=\"line\">    <span class=\"comment\">// stretching during the animation. Also calculate the start scaling</span></div><div class=\"line\">    <span class=\"comment\">// factor (the end scaling factor is always 1.0).</span></div><div class=\"line\">    <span class=\"keyword\">float</span> startScale;</div><div class=\"line\">    <span class=\"keyword\">if</span> ((<span class=\"keyword\">float</span>) finalBounds.width() / finalBounds.height()</div><div class=\"line\">            &gt; (<span class=\"keyword\">float</span>) startBounds.width() / startBounds.height()) &#123;</div><div class=\"line\">        <span class=\"comment\">// Extend start bounds horizontally</span></div><div class=\"line\">        startScale = (<span class=\"keyword\">float</span>) startBounds.height() / finalBounds.height();</div><div class=\"line\">        <span class=\"keyword\">float</span> startWidth = startScale * finalBounds.width();</div><div class=\"line\">        <span class=\"keyword\">float</span> deltaWidth = (startWidth - startBounds.width()) / <span class=\"number\">2</span>;</div><div class=\"line\">        startBounds.left -= deltaWidth;</div><div class=\"line\">        startBounds.right += deltaWidth;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// Extend start bounds vertically</span></div><div class=\"line\">        startScale = (<span class=\"keyword\">float</span>) startBounds.width() / finalBounds.width();</div><div class=\"line\">        <span class=\"keyword\">float</span> startHeight = startScale * finalBounds.height();</div><div class=\"line\">        <span class=\"keyword\">float</span> deltaHeight = (startHeight - startBounds.height()) / <span class=\"number\">2</span>;</div><div class=\"line\">        startBounds.top -= deltaHeight;</div><div class=\"line\">        startBounds.bottom += deltaHeight;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Hide the thumbnail and show the zoomed-in view. When the animation</span></div><div class=\"line\">    <span class=\"comment\">// begins, it will position the zoomed-in view in the place of the</span></div><div class=\"line\">    <span class=\"comment\">// thumbnail.</span></div><div class=\"line\">    thumbView.setAlpha(<span class=\"number\">0f</span>);</div><div class=\"line\">    expandedImageView.setVisibility(View.VISIBLE);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Set the pivot point for SCALE_X and SCALE_Y transformations</span></div><div class=\"line\">    <span class=\"comment\">// to the top-left corner of the zoomed-in view (the default</span></div><div class=\"line\">    <span class=\"comment\">// is the center of the view).</span></div><div class=\"line\">    expandedImageView.setPivotX(<span class=\"number\">0f</span>);</div><div class=\"line\">    expandedImageView.setPivotY(<span class=\"number\">0f</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Construct and run the parallel animation of the four translation and</span></div><div class=\"line\">    <span class=\"comment\">// scale properties (X, Y, SCALE_X, and SCALE_Y).</span></div><div class=\"line\">    AnimatorSet set = <span class=\"keyword\">new</span> AnimatorSet();</div><div class=\"line\">    set</div><div class=\"line\">            .play(ObjectAnimator.ofFloat(expandedImageView, View.X,</div><div class=\"line\">                    startBounds.left, finalBounds.left))</div><div class=\"line\">            .with(ObjectAnimator.ofFloat(expandedImageView, View.Y,</div><div class=\"line\">                    startBounds.top, finalBounds.top))</div><div class=\"line\">            .with(ObjectAnimator.ofFloat(expandedImageView, View.SCALE_X,</div><div class=\"line\">            startScale, <span class=\"number\">1f</span>)).with(ObjectAnimator.ofFloat(expandedImageView,</div><div class=\"line\">                    View.SCALE_Y, startScale, <span class=\"number\">1f</span>));</div><div class=\"line\">    set.setDuration(mShortAnimationDuration);</div><div class=\"line\">    set.setInterpolator(<span class=\"keyword\">new</span> DecelerateInterpolator());</div><div class=\"line\">    set.addListener(<span class=\"keyword\">new</span> AnimatorListenerAdapter() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationEnd</span><span class=\"params\">(Animator animation)</span> </span>&#123;</div><div class=\"line\">            mCurrentAnimator = <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationCancel</span><span class=\"params\">(Animator animation)</span> </span>&#123;</div><div class=\"line\">            mCurrentAnimator = <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    set.start();</div><div class=\"line\">    mCurrentAnimator = set;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Upon clicking the zoomed-in image, it should zoom back down</span></div><div class=\"line\">    <span class=\"comment\">// to the original bounds and show the thumbnail instead of</span></div><div class=\"line\">    <span class=\"comment\">// the expanded image.</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> startScaleFinal = startScale;</div><div class=\"line\">    expandedImageView.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (mCurrentAnimator != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                mCurrentAnimator.cancel();</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// Animate the four positioning/sizing properties in parallel,</span></div><div class=\"line\">            <span class=\"comment\">// back to their original values.</span></div><div class=\"line\">            AnimatorSet set = <span class=\"keyword\">new</span> AnimatorSet();</div><div class=\"line\">            set.play(ObjectAnimator</div><div class=\"line\">                        .ofFloat(expandedImageView, View.X, startBounds.left))</div><div class=\"line\">                        .with(ObjectAnimator</div><div class=\"line\">                                .ofFloat(expandedImageView,</div><div class=\"line\">                                        View.Y,startBounds.top))</div><div class=\"line\">                        .with(ObjectAnimator</div><div class=\"line\">                                .ofFloat(expandedImageView,</div><div class=\"line\">                                        View.SCALE_X, startScaleFinal))</div><div class=\"line\">                        .with(ObjectAnimator</div><div class=\"line\">                                .ofFloat(expandedImageView,</div><div class=\"line\">                                        View.SCALE_Y, startScaleFinal));</div><div class=\"line\">            set.setDuration(mShortAnimationDuration);</div><div class=\"line\">            set.setInterpolator(<span class=\"keyword\">new</span> DecelerateInterpolator());</div><div class=\"line\">            set.addListener(<span class=\"keyword\">new</span> AnimatorListenerAdapter() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationEnd</span><span class=\"params\">(Animator animation)</span> </span>&#123;</div><div class=\"line\">                    thumbView.setAlpha(<span class=\"number\">1f</span>);</div><div class=\"line\">                    expandedImageView.setVisibility(View.GONE);</div><div class=\"line\">                    mCurrentAnimator = <span class=\"keyword\">null</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationCancel</span><span class=\"params\">(Animator animation)</span> </span>&#123;</div><div class=\"line\">                    thumbView.setAlpha(<span class=\"number\">1f</span>);</div><div class=\"line\">                    expandedImageView.setVisibility(View.GONE);</div><div class=\"line\">                    mCurrentAnimator = <span class=\"keyword\">null</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">            set.start();</div><div class=\"line\">            mCurrentAnimator = set;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"5、布局动画\"><a href=\"#5、布局动画\" class=\"headerlink\" title=\"5、布局动画\"></a>5、布局动画</h4><p>布局动画是一种预加载动画，可以通过创建Layout Transition ，setLayoutTransition（）实现。<br><a href=\"http://hukai.me/android-training-course-in-chinese/animations/anim_layout_changes.mp4\" target=\"_blank\" rel=\"external\">layout</a></p>\n<ul>\n<li><h5 id=\"创建布局\"><a href=\"#创建布局\" class=\"headerlink\" title=\"创建布局\"></a>创建布局</h5><p>为想开启动画的布局设置<code>android:animateLayoutChanges</code>属性为<code>true</code>。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/container\"</span></span></div><div class=\"line\">    <span class=\"attr\">android:animateLayoutChanges</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">    <span class=\"attr\">...</span></div><div class=\"line\">/&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"从布局中增删项目\"><a href=\"#从布局中增删项目\" class=\"headerlink\" title=\"从布局中增删项目\"></a>从布局中增删项目</h5><p>代码中动态修改布局项目，实现动画</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> ViewGroup mContainerView;</div><div class=\"line\">...</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">addItem</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    View newView;</div><div class=\"line\">    ...</div><div class=\"line\">    mContainerView.addView(newView, <span class=\"number\">0</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"第四篇、Android图像与动画\"><a href=\"#第四篇、Android图像与动画\" class=\"headerlink\" title=\"第四篇、Android图像与动画\"></a>第四篇、Android图像与动画</h2><p>[TOC]</p>\n<h3 id=\"第1章、高效显示Bitmap\"><a href=\"#第1章、高效显示Bitmap\" class=\"headerlink\" title=\"第1章、高效显示Bitmap\"></a>第1章、高效显示Bitmap</h3><p>本节主要介绍加载处理Bitmap对象常用方法，以避免UI线程阻塞与OOM问题。由于Android设备</p>\n<ul>\n<li>Android单个应用至少16M内存，不同分辨率屏幕的设备要求不同。<code>国内自定义ROM限制也有差异。</code></li>\n<li>Bitmap消耗内存，一张5M的高清照片，使用ARGB_8888方式加载Bitmap，则需要19M左右的内存。</li>\n<li>Android应用一般加载多个Bitmap，预先加载以备显示。</li>\n</ul>\n<p>所以如上三条，需要我们对Bitmap做优化处理。</p>\n<h4 id=\"1、高效加载大图（Loading-Large-Bitmap-Efficiently）\"><a href=\"#1、高效加载大图（Loading-Large-Bitmap-Efficiently）\" class=\"headerlink\" title=\"1、高效加载大图（Loading Large Bitmap Efficiently）\"></a>1、高效加载大图（Loading Large Bitmap Efficiently）</h4><p>本节介绍加载缩小的图片，来避免过多消耗内存，原始大小的图片和超过控件大小和设备分辨率的图片加载，在显示上并无意义，反而带来内存风险。</p>\n<ul>\n<li><h5 id=\"读取位图尺寸与类型（Read-Bitmap-Dimensions-and-Type）\"><a href=\"#读取位图尺寸与类型（Read-Bitmap-Dimensions-and-Type）\" class=\"headerlink\" title=\"读取位图尺寸与类型（Read Bitmap Dimensions and Type）\"></a>读取位图尺寸与类型（Read Bitmap Dimensions and Type）</h5><p><code>BitmapFactory</code>提供了不同类型的decode方法，配有<code>BitmapFactory.Options</code>选项来标记解码方式。</p>\n<p>设置<code>inJustDecodeBounds=true</code>属性可以避免解码时候分配内存。其返回<code>null</code>的Bitmap，但是可以用于获取长宽和类型。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">BitmapFactory.Options options = <span class=\"keyword\">new</span> BitmapFactory.Options();</div><div class=\"line\">options.inJustDecodeBounds = <span class=\"keyword\">true</span>;<span class=\"comment\">//不加载分配内存</span></div><div class=\"line\">BitmapFactory.decodeResource(getResource(),R.drawable.iclauncher,options);</div><div class=\"line\"><span class=\"comment\">//图像长宽</span></div><div class=\"line\"><span class=\"keyword\">int</span> imgWidth = options.outWidth;</div><div class=\"line\"><span class=\"keyword\">int</span> imgHeight = options.outHeight;</div><div class=\"line\">String imgType = options.outMimeType;<span class=\"comment\">//图像类型</span></div></pre></td></tr></table></figure>\n<p><em>一般需要在加载图片前判断图片大小，避免OOM，除非你确保不会OOM</em></p>\n</li>\n<li><h5 id=\"加载缩小版图片到内存（Load-a-Scale-Down-Version-into-Memory）\"><a href=\"#加载缩小版图片到内存（Load-a-Scale-Down-Version-into-Memory）\" class=\"headerlink\" title=\"加载缩小版图片到内存（Load a Scale Down Version into Memory）\"></a>加载缩小版图片到内存（Load a Scale Down Version into Memory）</h5><p>加载缩小版图片也需要考虑一些因素：</p>\n<ul>\n<li>评估完整图片加载需耗内存。</li>\n<li>加载图片可能涉及到的其他内存需求。</li>\n<li>显示图片的控件尺寸。</li>\n<li>设备屏幕的密度和大小。</li>\n</ul>\n<p>BitmapFactory.Options中设置<code>inSampleSize</code>来确定缩放比。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 计算图像缩放比</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">calculateInSampleSize</span><span class=\"params\">(</span></span></div><div class=\"line\">            BitmapFactory.Options options, <span class=\"keyword\">int</span> reqWidth, <span class=\"keyword\">int</span> reqHeight) &#123;</div><div class=\"line\">    <span class=\"comment\">// 获取图像的原始大小</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> height = options.outHeight;</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> width = options.outWidth;</div><div class=\"line\">    <span class=\"keyword\">int</span> inSampleSize = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (height &gt; reqHeight || width &gt; reqWidth) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> halfHeight = height / <span class=\"number\">2</span>;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> halfWidth = width / <span class=\"number\">2</span>;</div><div class=\"line\">        <span class=\"comment\">//保持宽高大于请求的宽高，缩放比为计算值的2倍</span></div><div class=\"line\">        <span class=\"keyword\">while</span> ((halfHeight / inSampleSize) &gt; reqHeight</div><div class=\"line\">                &amp;&amp; (halfWidth / inSampleSize) &gt; reqWidth) &#123;</div><div class=\"line\">            inSampleSize *= <span class=\"number\">2</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> inSampleSize;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>==<em>设置缩放比<code>inSampleSize</code>为2的倍数，是因为解码器对非2倍数会就近处理为2的倍数。</em>==</p>\n<p>先设置<code>inJustDecodeBounds=true</code>来设置<code>inSampleSize</code>之后在设置<code>inJustDecodeBounds=false</code>加载缩放后的Bitmap</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">mImageView.setImageBitmap(decodeSampleBitmapFromResource(getResource(),R.drawable.iclauncher,<span class=\"number\">100</span>,<span class=\"number\">100</span>));<span class=\"comment\">//加载大小100长宽的图片</span></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> * 根据控件大小，加载缩放图片</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Bitmap <span class=\"title\">decodeSampleBitmapFromResource</span><span class=\"params\">(Resource res,<span class=\"keyword\">int</span> resId,<span class=\"keyword\">int</span> reqWidth,<span class=\"keyword\">int</span> reqHeight)</span></span>&#123;</div><div class=\"line\">  <span class=\"comment\">//先空加载图片，计算缩放比</span></div><div class=\"line\">  <span class=\"keyword\">final</span> BitmapFactory.Options options = <span class=\"keyword\">new</span> BitmapFactory.Options();</div><div class=\"line\">  options.inJustDecodeBounds = <span class=\"keyword\">true</span>;</div><div class=\"line\">  BitmapFactory.decodeResource(res,resId,options);</div><div class=\"line\">  options.inSampleSize = calculateInSampleSize(options,reqWidth,reqHeight);</div><div class=\"line\">  <span class=\"comment\">//解码缩放后的图像</span></div><div class=\"line\">  options.inJustDecodeBounds = <span class=\"keyword\">false</span>;</div><div class=\"line\">  returen BitmapFactory.decodeResource(res,resId,options);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"2、非UI线程处理Bitmap\"><a href=\"#2、非UI线程处理Bitmap\" class=\"headerlink\" title=\"2、非UI线程处理Bitmap\"></a>2、非UI线程处理Bitmap</h4><p>上一节仅仅介绍了如何缩放加载图像，若是获取网络图像或者其他储存设备，则应避免在UI线程执行加载操作，避免ANR。</p>\n<ul>\n<li><h5 id=\"使用AsyncTask（Use-a-AsyncTask）\"><a href=\"#使用AsyncTask（Use-a-AsyncTask）\" class=\"headerlink\" title=\"使用AsyncTask（Use a AsyncTask）\"></a>使用AsyncTask（Use a AsyncTask）</h5><p>AsyncTask是Android提供的一个封装好的后台线程操作方式，并可以实现前后台信息传递。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BitmapWorkerTask</span> <span class=\"keyword\">extends</span> <span class=\"title\">AsyncTask</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> WeakReference imageViewReference;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> data = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BitmapWorkerTask</span><span class=\"params\">(ImageView imageView)</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">//使用弱引用，确保图像会被及时的GC回收。</span></div><div class=\"line\">    imageViewReference = <span class=\"keyword\">new</span> WeakReference(imageView);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//后台解码图片</span></div><div class=\"line\">  <span class=\"meta\">@override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> Bitmap <span class=\"title\">doInBackground</span><span class=\"params\">(Integer... params)</span></span>&#123;</div><div class=\"line\">    data = params[<span class=\"number\">0</span>];</div><div class=\"line\">    <span class=\"keyword\">return</span> decodeSampleBitmapFromResource(getResource(),data,<span class=\"number\">100</span>,<span class=\"number\">100</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//完成解码后，加载图像到控件显示</span></div><div class=\"line\">  <span class=\"comment\">//要判断引用对象是否还存在，控件是否存在等，避免空指针。</span></div><div class=\"line\">  <span class=\"meta\">@override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onPostExecute</span><span class=\"params\">(Bitmap bitmap)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(imageViewReference !=<span class=\"keyword\">null</span> &amp;&amp; bitmap !=<span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">      <span class=\"keyword\">final</span> ImageView imageView = imageViewReference.get();</div><div class=\"line\">      <span class=\"keyword\">if</span>(imageView!=<span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">        imageView.setImageBitmap(bitmap);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//创建一个任务task，执行异步加载</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">loadBitmap</span><span class=\"params\">(<span class=\"keyword\">int</span> resId,ImageView imageView)</span></span>&#123;</div><div class=\"line\">  BitmapWorkerTask task = <span class=\"keyword\">new</span> BitmapWorkerTask(imageView);</div><div class=\"line\">  task.execute(resId);<span class=\"comment\">//执行Task</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"处理并发问题（Handle-Concurrency）\"><a href=\"#处理并发问题（Handle-Concurrency）\" class=\"headerlink\" title=\"处理并发问题（Handle Concurrency）\"></a>处理并发问题（Handle Concurrency）</h5><p>List View和Grid View控件显示多个位图结合AsyncTask使用时会产生并发问题。每个item都执行task的话，启动顺序，任务顺序都很难保持一致性。为此可以使用Image View来保存最近使用的AsyncTask引用，创建一个专用的<code>Drawable</code>子类来存储任务引用，如<code>BitmapDrawable</code>,并提供占位图像:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AsyncDrawable</span> <span class=\"keyword\">extends</span> <span class=\"title\">BitmapDrawable</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> WeakReference bitmapWorkerTaskReference;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AsyncDrawable</span><span class=\"params\">(Resource res,Bitmap bitmap,BitmapWorkerTask bitmapWorkerTask)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(res,bitmap);</div><div class=\"line\">    <span class=\"comment\">//初始化弱引用对象</span></div><div class=\"line\">    bitmapWorkerTaskReference = <span class=\"keyword\">new</span> BitmapWorkerTaskReference(bitmapWorkerTask);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//对外公开task的引用。</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> BitmapWorkerTask <span class=\"title\">getBitmapWorkerTask</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> bitmapWorkerTaskReference.get();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在执行BitmapWorkerTask之前需要创建AsyncDrawable并绑定到ImageView上：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">loadBitmap</span><span class=\"params\">(<span class=\"keyword\">int</span> resId,ImageView imageView)</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(cancelPotentialWork(resId,imageView))&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> BitmapWorkerTask task = <span class=\"keyword\">new</span> BitmapWorkerTask(imageView);</div><div class=\"line\">    <span class=\"keyword\">final</span> AsyncDrawable asyncDrawable = <span class=\"keyword\">new</span> \t\t\t\t\t\t\t   AsyncDrawable(getResource(),mPlaceHolderBitmap,task);</div><div class=\"line\">    imageView.setImageDrawable(asyncDrawable);</div><div class=\"line\">    task.execute(resId);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//该方法用于检测是否有已存在的任务在执行该Image View控件的请求。</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">cancelPotentialWork</span><span class=\"params\">(<span class=\"keyword\">int</span> data, ImageView imageView)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//检索AsyncTask是否已经被分配到指定的ImageView控件。</span></div><div class=\"line\">  <span class=\"keyword\">final</span> BitmapWorkerTask bitmapWorkerTask = getBitmapWorkerTask(imageView);</div><div class=\"line\">    <span class=\"keyword\">if</span> (bitmapWorkerTask != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> bitmapData = bitmapWorkerTask.data;</div><div class=\"line\">        <span class=\"keyword\">if</span> (bitmapData == <span class=\"number\">0</span> || bitmapData != data) &#123;</div><div class=\"line\">            <span class=\"comment\">//取消先前的任务</span></div><div class=\"line\">            bitmapWorkerTask.cancel(<span class=\"keyword\">true</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">//同样的请求任务已经在执行</span></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//没有符合当下请求的任务绑定在ImageView控件上，或者之前的取消了。</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//获取控件相关的task</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> BitmapWorkerTask <span class=\"title\">getBitmapWorkerTask</span><span class=\"params\">(ImageView imageView)</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">if</span> (imageView != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">       <span class=\"keyword\">final</span> Drawable drawable = imageView.getDrawable();</div><div class=\"line\">       <span class=\"keyword\">if</span> (drawable <span class=\"keyword\">instanceof</span> AsyncDrawable) &#123;</div><div class=\"line\">           <span class=\"keyword\">final</span> AsyncDrawable asyncDrawable = (AsyncDrawable) drawable;</div><div class=\"line\">         <span class=\"comment\">//获取AsyncDrawable中定义的绑定task引用</span></div><div class=\"line\">           <span class=\"keyword\">return</span> asyncDrawable.getBitmapWorkerTask();</div><div class=\"line\">       &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>完成异步task的绑定后，在<code>onPostExecute()</code>中更新view</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BitmapWorkerTask</span> <span class=\"keyword\">extends</span> <span class=\"title\">AsyncTask</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onPostExecute</span><span class=\"params\">(Bitmap bitmap)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (isCancelled()) &#123;</div><div class=\"line\">            bitmap = <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">\t\t<span class=\"comment\">//更新View前，判断资源和控件的非空</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (imageViewReference != <span class=\"keyword\">null</span> &amp;&amp; bitmap != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> ImageView imageView = imageViewReference.get();</div><div class=\"line\">            <span class=\"keyword\">final</span> BitmapWorkerTask bitmapWorkerTask =</div><div class=\"line\">                    getBitmapWorkerTask(imageView);</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == bitmapWorkerTask &amp;&amp; imageView != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                imageView.setImageBitmap(bitmap);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>应用与listView和GridView等，循环利用子视图的控件，只要在设置ImageView的地方调用loadBitmap方法即可。如GridView的<code>getView()</code>中。</p>\n</li>\n</ul>\n<h4 id=\"3、缓存Bitmap\"><a href=\"#3、缓存Bitmap\" class=\"headerlink\" title=\"3、缓存Bitmap\"></a>3、缓存Bitmap</h4><p>在List View或GridView控件场景中，可能需要大量图片展示，而且存在图片复用现象，此时就需要用到缓存，以提高效能和用户体验。</p>\n<ul>\n<li><h5 id=\"使用内存缓存（Use-a-Memory-Cache）\"><a href=\"#使用内存缓存（Use-a-Memory-Cache）\" class=\"headerlink\" title=\"使用内存缓存（Use a Memory Cache）\"></a>使用内存缓存（Use a Memory Cache）</h5><p>使用内存缓存实现以<em>空间换时间</em>，提高速度。<code>LruCache</code>类用于缓存Bitmaps，其使用强引用<code>LinkedHashMap</code>保存最近引用对象，在缓存超出设置大小时候剔除最近最少使用的对象。</p>\n<blockquote>\n<p><strong>注意：</strong>以前多使用<code>软引用</code>或<code>弱引用</code>但是现在并不推荐，由于Android版本的GC频率增高，引用效率也大为降低。</p>\n</blockquote>\n<p>为LruCache设置合适的大小，考虑一下因素：</p>\n<ul>\n<li>应用剩余可用内存大小</li>\n<li>同时显示图像数量，以及预加载图片数量</li>\n<li>设备屏幕尺寸与密度</li>\n<li>图像尺寸、类型</li>\n<li>图像被访问的频率高低</li>\n<li>显示图像的质量和数量的平衡</li>\n</ul>\n<p>以上因素都需要具体分析，如下创建一个Bitmap的LruCache的示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> LruCache&lt;String, Bitmap&gt; mMemoryCache;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// 获取应用VM最大可用内存</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> maxMemory = (<span class=\"keyword\">int</span>) (Runtime.getRuntime().maxMemory() / <span class=\"number\">1024</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 使用可用内存的1/8来缓存</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> cacheSize = maxMemory / <span class=\"number\">8</span>;</div><div class=\"line\">\t<span class=\"comment\">//建立LruCache缓存对象</span></div><div class=\"line\">    mMemoryCache = <span class=\"keyword\">new</span> LruCache&lt;String, Bitmap&gt;(cacheSize) &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> <span class=\"title\">sizeOf</span><span class=\"params\">(String key, Bitmap bitmap)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// 缓存以KB为单位计算，而非对象item个数</span></div><div class=\"line\">            <span class=\"keyword\">return</span> bitmap.getByteCount() / <span class=\"number\">1024</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//加入bitmap对象到lrucache</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addBitmapToMemoryCache</span><span class=\"params\">(String key, Bitmap bitmap)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (getBitmapFromMemCache(key) == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        mMemoryCache.put(key, bitmap);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//从lrucache获取bitmap缓存</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Bitmap <span class=\"title\">getBitmapFromMemCache</span><span class=\"params\">(String key)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> mMemoryCache.get(key);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>Note:</strong>在上面的例子中, 有1/8的内存空间被用作缓存。 这意味着在常见的设备上（hdpi），最少大概有4MB的缓存空间（32/8）。如果一个填满图片的GridView控件放置在800x480像素的手机屏幕上，大概会花费1.5MB的缓存空间（800x480x4 bytes），因此缓存的容量大概可以缓存2.5页的图片内容。</p>\n</blockquote>\n<p>加入缓存的bitmap亦是已经优化过的图像：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BitmapWorkerTask</span> <span class=\"keyword\">extends</span> <span class=\"title\">AsyncTask</span>&lt;<span class=\"title\">Integer</span>, <span class=\"title\">Void</span>, <span class=\"title\">Bitmap</span>&gt; </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">//异步线程解码图像</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Bitmap <span class=\"title\">doInBackground</span><span class=\"params\">(Integer... params)</span> </span>&#123;</div><div class=\"line\">      <span class=\"comment\">//缩放图像</span></div><div class=\"line\">        <span class=\"keyword\">final</span> Bitmap bitmap = decodeSampledBitmapFromResource(</div><div class=\"line\">                getResources(), params[<span class=\"number\">0</span>], <span class=\"number\">100</span>, <span class=\"number\">100</span>));</div><div class=\"line\">      <span class=\"comment\">//添加到lrucache缓存</span></div><div class=\"line\">        addBitmapToMemoryCache(String.valueOf(params[<span class=\"number\">0</span>]), bitmap);</div><div class=\"line\">        <span class=\"keyword\">return</span> bitmap;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"使用磁盘缓存（Use-a-Disk-Cache）\"><a href=\"#使用磁盘缓存（Use-a-Disk-Cache）\" class=\"headerlink\" title=\"使用磁盘缓存（Use a Disk Cache）\"></a>使用磁盘缓存（Use a Disk Cache）</h5><p>使用内存作为缓存虽然有较高的速度，但也可能因为应用被后台化，系统资源不足，亦或者过于大量的图像加载，而导致效果不佳，体验不好。因而可以使用磁盘缓存，需要异步处理，避免ANR。</p>\n<blockquote>\n<p><strong>Note:</strong>如果图像过于频繁访问，可以使用<code>ContentProvider</code>更为合适。</p>\n</blockquote>\n<p>如下示例<code>DiskLruCache</code>为Android源码基础上优化的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> DiskLruCache mDiskLruCache;<span class=\"comment\">//DiskLruCache对象</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Object mDiskCacheLock = <span class=\"keyword\">new</span> Object();<span class=\"comment\">//常量化同步锁</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> mDiskCacheStarting = <span class=\"keyword\">true</span>;<span class=\"comment\">//是否开启缓存</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DISK_CACHE_SIZE = <span class=\"number\">1024</span> * <span class=\"number\">1024</span> * <span class=\"number\">10</span>; <span class=\"comment\">// 10MB</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DISK_CACHE_SUBDIR = <span class=\"string\">\"thumbnails\"</span>;<span class=\"comment\">//缓存文件夹</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// 初始化内存缓存</span></div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// 后台线程初始化磁盘缓存</span></div><div class=\"line\">    File cacheDir = getDiskCacheDir(<span class=\"keyword\">this</span>, DISK_CACHE_SUBDIR);<span class=\"comment\">//从磁盘加载出缓存文件</span></div><div class=\"line\">    <span class=\"keyword\">new</span> InitDiskCacheTask().execute(cacheDir);<span class=\"comment\">//异步开始加载到缓存文件</span></div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//内部类，初始化磁盘加载task</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InitDiskCacheTask</span> <span class=\"keyword\">extends</span> <span class=\"title\">AsyncTask</span>&lt;<span class=\"title\">File</span>, <span class=\"title\">Void</span>, <span class=\"title\">Void</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Void <span class=\"title\">doInBackground</span><span class=\"params\">(File... params)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (mDiskCacheLock) &#123;<span class=\"comment\">//同步锁</span></div><div class=\"line\">            File cacheDir = params[<span class=\"number\">0</span>];<span class=\"comment\">//缓存文件</span></div><div class=\"line\">            mDiskLruCache = DiskLruCache.open(cacheDir, DISK_CACHE_SIZE);</div><div class=\"line\">            mDiskCacheStarting = <span class=\"keyword\">false</span>; <span class=\"comment\">//完成初始化磁盘加载</span></div><div class=\"line\">            mDiskCacheLock.notifyAll(); <span class=\"comment\">//唤起其他休眠线程</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//异步加载图片的task，</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BitmapWorkerTask</span> <span class=\"keyword\">extends</span> <span class=\"title\">AsyncTask</span>&lt;<span class=\"title\">Integer</span>, <span class=\"title\">Void</span>, <span class=\"title\">Bitmap</span>&gt; </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// 解码图像</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Bitmap <span class=\"title\">doInBackground</span><span class=\"params\">(Integer... params)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> String imageKey = String.valueOf(params[<span class=\"number\">0</span>]);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//后台线程检查磁盘缓存</span></div><div class=\"line\">        Bitmap bitmap = getBitmapFromDiskCache(imageKey);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (bitmap == <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">// 磁盘缓存没有所需图像</span></div><div class=\"line\">            <span class=\"comment\">// 正常途径加载</span></div><div class=\"line\">            <span class=\"keyword\">final</span> Bitmap bitmap = decodeSampledBitmapFromResource(</div><div class=\"line\">                    getResources(), params[<span class=\"number\">0</span>], <span class=\"number\">100</span>, <span class=\"number\">100</span>));</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//并将优化后的图像加入磁盘缓存</span></div><div class=\"line\">        addBitmapToCache(imageKey, bitmap);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> bitmap;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//加入磁盘缓存</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addBitmapToCache</span><span class=\"params\">(String key, Bitmap bitmap)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 先加入内存缓存</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (getBitmapFromMemCache(key) == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        mMemoryCache.put(key, bitmap);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 然后加入到磁盘缓存</span></div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (mDiskCacheLock) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mDiskLruCache != <span class=\"keyword\">null</span> &amp;&amp; mDiskLruCache.get(key) == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            mDiskLruCache.put(key, bitmap);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//从磁盘缓存获取图像</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Bitmap <span class=\"title\">getBitmapFromDiskCache</span><span class=\"params\">(String key)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (mDiskCacheLock) &#123;<span class=\"comment\">//同步获取锁</span></div><div class=\"line\">        <span class=\"comment\">// 等待后台线程获取磁盘缓存</span></div><div class=\"line\">        <span class=\"keyword\">while</span> (mDiskCacheStarting) &#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                mDiskCacheLock.wait();</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;&#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mDiskLruCache != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> mDiskLruCache.get(key);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 为特定的app创建唯一的子文件夹，优先使用外部sd卡，若没有，就使用内部sd卡</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> File <span class=\"title\">getDiskCacheDir</span><span class=\"params\">(Context context, String uniqueName)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 检查是否有外部存储，否则用内部存储</span></div><div class=\"line\">    <span class=\"keyword\">final</span> String cachePath =</div><div class=\"line\">            Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState()) ||</div><div class=\"line\">                    !isExternalStorageRemovable() ? getExternalCacheDir(context).getPath() :</div><div class=\"line\">                            context.getCacheDir().getPath();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> File(cachePath + File.separator + uniqueName);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>注意：</strong>如上使用==同步锁==是为了防止在后台异步I/O操作时候，错误读取。</p>\n</blockquote>\n<p>内存缓存检查可以在UI线程操作，而磁盘缓存需要在后台线程。</p>\n</li>\n<li><h5 id=\"处理配置改变（Handle-Configuration-Changes）\"><a href=\"#处理配置改变（Handle-Configuration-Changes）\" class=\"headerlink\" title=\"处理配置改变（Handle Configuration Changes）\"></a>处理配置改变（Handle Configuration Changes）</h5><p>Android的配置信息发生变化，Activity可能会随之变化、销毁重建。平滑恢复原有图像，创造良好用户体验，<code>setRetainInstance(true)</code>保留的一个<code>Fragement</code>实例可以将缓存重新附着与Activity上。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> LruCache&lt;String, Bitmap&gt; mMemoryCache;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">      <span class=\"comment\">//RetainFragment</span></div><div class=\"line\">    RetainFragment retainFragment =</div><div class=\"line\">            RetainFragment.findOrCreateRetainFragment(getFragmentManager());</div><div class=\"line\">  <span class=\"comment\">//获取缓存对象  </span></div><div class=\"line\">  mMemoryCache = retainFragment.mRetainedCache;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mMemoryCache == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        mMemoryCache = <span class=\"keyword\">new</span> LruCache&lt;String, Bitmap&gt;(cacheSize) &#123;</div><div class=\"line\">            ... <span class=\"comment\">// 初始化缓存</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        retainFragment.mRetainedCache = mMemoryCache;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//自定义内部类Fragment，用于存储缓存对象？？</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RetainFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"RetainFragment\"</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> LruCache&lt;String, Bitmap&gt; mRetainedCache;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RetainFragment</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> RetainFragment <span class=\"title\">findOrCreateRetainFragment</span><span class=\"params\">(FragmentManager fm)</span> </span>&#123;</div><div class=\"line\">        RetainFragment fragment = (RetainFragment) fm.findFragmentByTag(TAG);</div><div class=\"line\">        <span class=\"keyword\">if</span> (fragment == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            fragment = <span class=\"keyword\">new</span> RetainFragment();</div><div class=\"line\">            fm.beginTransaction().add(fragment, TAG).commit();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> fragment;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setRetainInstance(<span class=\"keyword\">true</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"4、管理Bitmap的内存\"><a href=\"#4、管理Bitmap的内存\" class=\"headerlink\" title=\"4、管理Bitmap的内存\"></a>4、管理Bitmap的内存</h4><p>关于Bitmap内存管理了解两点：1、Android2.3之后GC回收并发执行，内存不引用，会被立即回收。2、Android3.0以后bitmap引用和数据一同存放在<code>Dalvik堆</code>内存中。</p>\n<ul>\n<li><h5 id=\"Android2-3以下版本的内存管理\"><a href=\"#Android2-3以下版本的内存管理\" class=\"headerlink\" title=\"Android2.3以下版本的内存管理\"></a>Android2.3以下版本的内存管理</h5><p>推荐使用<code>recycle()</code>方法，低版本Android单线程GC。使用引用计数法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mCacheRefCount=<span class=\"number\">0</span>;<span class=\"comment\">//引用计数</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mDisplayRefCount = <span class=\"number\">0</span>;<span class=\"comment\">//引用计数</span></div><div class=\"line\">...</div><div class=\"line\"><span class=\"comment\">//通知drawable显示状态发生改变，drawable引用计数来决定引用状态和显示</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setIsDisplayed</span><span class=\"params\">(<span class=\"keyword\">boolean</span> isDisplayed)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (isDisplayed) &#123;</div><div class=\"line\">            mDisplayRefCount++;</div><div class=\"line\">            mHasBeenDisplayed = <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            mDisplayRefCount--;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// Check to see if recycle() can be called.</span></div><div class=\"line\">    checkState();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// Notify the drawable that the cache state has changed.</span></div><div class=\"line\"><span class=\"comment\">// Keep a count to determine when the drawable is no longer being cached.</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setIsCached</span><span class=\"params\">(<span class=\"keyword\">boolean</span> isCached)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (isCached) &#123;</div><div class=\"line\">            mCacheRefCount++;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            mCacheRefCount--;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// Check to see if recycle() can be called.</span></div><div class=\"line\">    checkState();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">checkState</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// If the drawable cache and display ref counts = 0, and this drawable</span></div><div class=\"line\">    <span class=\"comment\">// has been displayed, then recycle.</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (mCacheRefCount &lt;= <span class=\"number\">0</span> &amp;&amp; mDisplayRefCount &lt;= <span class=\"number\">0</span> &amp;&amp; mHasBeenDisplayed</div><div class=\"line\">            &amp;&amp; hasValidBitmap()) &#123;</div><div class=\"line\">        getBitmap().recycle();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasValidBitmap</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    Bitmap bitmap = getBitmap();</div><div class=\"line\">    <span class=\"keyword\">return</span> bitmap != <span class=\"keyword\">null</span> &amp;&amp; !bitmap.isRecycled();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"Android3-0以上版本内存管理\"><a href=\"#Android3-0以上版本内存管理\" class=\"headerlink\" title=\"Android3.0以上版本内存管理\"></a>Android3.0以上版本内存管理</h5><p>API 11引入<code>BitmapFactory.Options.inBitmap</code>使Bitmap在加载时候可以重中已存在的，但是大小一样的位图（&lt; API 19时候）。</p>\n</li>\n<li><p>保存Bitmap以备复用</p>\n<p>android3.0以上，bitmap从L如Cache移除时，Bitmap的软引用会被村房子啊Hashset中，以便<code>inBitmap</code>复用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">Set&lt;SoftReference&lt;Bitmap&gt;&gt; mReusableBitmaps;</div><div class=\"line\"><span class=\"keyword\">private</span> LruCache&lt;String, BitmapDrawable&gt; mMemoryCache;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// If you're running on Honeycomb or newer, create a</span></div><div class=\"line\"><span class=\"comment\">// synchronized HashSet of references to reusable bitmaps.</span></div><div class=\"line\"><span class=\"keyword\">if</span> (Utils.hasHoneycomb()) &#123;</div><div class=\"line\">    mReusableBitmaps =</div><div class=\"line\">            Collections.synchronizedSet(<span class=\"keyword\">new</span> HashSet&lt;SoftReference&lt;Bitmap&gt;&gt;());</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">mMemoryCache = <span class=\"keyword\">new</span> LruCache&lt;String, BitmapDrawable&gt;(mCacheParams.memCacheSize) &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Notify the removed entry that is no longer being cached.</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">entryRemoved</span><span class=\"params\">(<span class=\"keyword\">boolean</span> evicted, String key,</span></span></div><div class=\"line\">            BitmapDrawable oldValue, BitmapDrawable newValue) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (RecyclingBitmapDrawable.class.isInstance(oldValue)) &#123;</div><div class=\"line\">            <span class=\"comment\">// The removed entry is a recycling drawable, so notify it</span></div><div class=\"line\">            <span class=\"comment\">// that it has been removed from the memory cache.</span></div><div class=\"line\">            ((RecyclingBitmapDrawable) oldValue).setIsCached(<span class=\"keyword\">false</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// The removed entry is a standard BitmapDrawable.</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (Utils.hasHoneycomb()) &#123;</div><div class=\"line\">                <span class=\"comment\">// We're running on Honeycomb or later, so add the bitmap</span></div><div class=\"line\">                <span class=\"comment\">// to a SoftReference set for possible use with inBitmap later.</span></div><div class=\"line\">                mReusableBitmaps.add</div><div class=\"line\">                        (<span class=\"keyword\">new</span> SoftReference&lt;Bitmap&gt;(oldValue.getBitmap()));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">....</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"使用已经存在的Bitmap\"><a href=\"#使用已经存在的Bitmap\" class=\"headerlink\" title=\"使用已经存在的Bitmap\"></a>使用已经存在的Bitmap</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Bitmap <span class=\"title\">decodeSampledBitmapFromFile</span><span class=\"params\">(String filename,</span></span></div><div class=\"line\">        <span class=\"keyword\">int</span> reqWidth, <span class=\"keyword\">int</span> reqHeight, ImageCache cache) &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> BitmapFactory.Options options = <span class=\"keyword\">new</span> BitmapFactory.Options();</div><div class=\"line\">    ...</div><div class=\"line\">    BitmapFactory.decodeFile(filename, options);</div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// If we're running on Honeycomb or newer, try to use inBitmap.</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (Utils.hasHoneycomb()) &#123;</div><div class=\"line\">        addInBitmapOptions(options, cache);</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">return</span> BitmapFactory.decodeFile(filename, options);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//查找适合且可复用的bitmap，设置到inBitmap的属性值，</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">addInBitmapOptions</span><span class=\"params\">(BitmapFactory.Options options,</span></span></div><div class=\"line\">        ImageCache cache) &#123;</div><div class=\"line\">    <span class=\"comment\">// inBitmap only works with mutable bitmaps, so force the decoder to</span></div><div class=\"line\">    <span class=\"comment\">// return mutable bitmaps.</span></div><div class=\"line\">    options.inMutable = <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (cache != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// Try to find a bitmap to use for inBitmap.</span></div><div class=\"line\">        Bitmap inBitmap = cache.getBitmapFromReusableSet(options);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (inBitmap != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// If a suitable bitmap has been found, set it as the value of</span></div><div class=\"line\">            <span class=\"comment\">// inBitmap.</span></div><div class=\"line\">            options.inBitmap = inBitmap;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// This method iterates through the reusable bitmaps, looking for one</span></div><div class=\"line\"><span class=\"comment\">// to use for inBitmap:</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Bitmap <span class=\"title\">getBitmapFromReusableSet</span><span class=\"params\">(BitmapFactory.Options options)</span> </span>&#123;</div><div class=\"line\">        Bitmap bitmap = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (mReusableBitmaps != <span class=\"keyword\">null</span> &amp;&amp; !mReusableBitmaps.isEmpty()) &#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (mReusableBitmaps) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> Iterator&lt;SoftReference&lt;Bitmap&gt;&gt; iterator</div><div class=\"line\">                    = mReusableBitmaps.iterator();</div><div class=\"line\">            Bitmap item;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">while</span> (iterator.hasNext()) &#123;</div><div class=\"line\">                item = iterator.next().get();</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != item &amp;&amp; item.isMutable()) &#123;</div><div class=\"line\">                    <span class=\"comment\">// Check to see it the item can be used for inBitmap.</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (canUseForInBitmap(item, options)) &#123;</div><div class=\"line\">                        bitmap = item;</div><div class=\"line\"></div><div class=\"line\">                        <span class=\"comment\">// Remove from reusable set so it can't be used again.</span></div><div class=\"line\">                        iterator.remove();</div><div class=\"line\">                        <span class=\"keyword\">break</span>;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    <span class=\"comment\">// Remove from the set if the reference has been cleared.</span></div><div class=\"line\">                    iterator.remove();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> bitmap;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>判断Bitmap是否符合inBitmap的要求：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">canUseForInBitmap</span><span class=\"params\">(</span></span></div><div class=\"line\">        Bitmap candidate, BitmapFactory.Options targetOptions) &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</div><div class=\"line\">        <span class=\"comment\">// From Android 4.4 (KitKat) onward we can re-use if the byte size of</span></div><div class=\"line\">        <span class=\"comment\">// the new bitmap is smaller than the reusable bitmap candidate</span></div><div class=\"line\">        <span class=\"comment\">// allocation byte count.</span></div><div class=\"line\">        <span class=\"keyword\">int</span> width = targetOptions.outWidth / targetOptions.inSampleSize;</div><div class=\"line\">        <span class=\"keyword\">int</span> height = targetOptions.outHeight / targetOptions.inSampleSize;</div><div class=\"line\">        <span class=\"keyword\">int</span> byteCount = width * height * getBytesPerPixel(candidate.getConfig());</div><div class=\"line\">        <span class=\"keyword\">return</span> byteCount &lt;= candidate.getAllocationByteCount();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// On earlier versions, the dimensions must match exactly and the inSampleSize must be 1</span></div><div class=\"line\">    <span class=\"keyword\">return</span> candidate.getWidth() == targetOptions.outWidth</div><div class=\"line\">            &amp;&amp; candidate.getHeight() == targetOptions.outHeight</div><div class=\"line\">            &amp;&amp; targetOptions.inSampleSize == <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * A helper function to return the byte usage per pixel of a bitmap based on its configuration.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getBytesPerPixel</span><span class=\"params\">(Config config)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (config == Config.ARGB_8888) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">4</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (config == Config.RGB_565) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (config == Config.ARGB_4444) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (config == Config.ALPHA_8) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"5、在UI上显示Bitmap\"><a href=\"#5、在UI上显示Bitmap\" class=\"headerlink\" title=\"5、在UI上显示Bitmap\"></a>5、在UI上显示Bitmap</h4><p>本节学习如何综合使用后台线程与缓存机制，将图像加载到ViewPager或Grid View控件上，并处理并发与配置改变的问题。</p>\n<ul>\n<li><h5 id=\"实现加载图片到View-Pager\"><a href=\"#实现加载图片到View-Pager\" class=\"headerlink\" title=\"实现加载图片到View Pager\"></a>实现加载图片到View Pager</h5><p><code>Swipe View Pattern</code>是滑动显示的设计模型。可通过<code>PagerAdapter</code>与<code>ViewPager</code>控件实现该效果。而<code>FragmentStatePagerAdapter</code>更为合适，因为其能在Fragment状态改变时保存状态值。减少内存消耗。少量图片的话，<code>PagerAdapter与FragmentPagerAdapter</code>都可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageDetailActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">FragmentActivity</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String EXTRA_IMAGE = <span class=\"string\">\"extra_image\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> ImagePagerAdapter mAdapter;<span class=\"comment\">//adapter</span></div><div class=\"line\">    <span class=\"keyword\">private</span> ViewPager mPager;<span class=\"comment\">//viewpager</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 用于传递给viewpager 的adapter的图片数据资源</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Integer[] imageResIds = <span class=\"keyword\">new</span> Integer[] &#123;</div><div class=\"line\">            R.drawable.sample_image_1, R.drawable.sample_image_2, R.drawable.sample_image_3,</div><div class=\"line\">            R.drawable.sample_image_4, R.drawable.sample_image_5, R.drawable.sample_image_6,</div><div class=\"line\">            R.drawable.sample_image_7, R.drawable.sample_image_8, R.drawable.sample_image_9&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.image_detail_pager); <span class=\"comment\">// 就一个viewpager</span></div><div class=\"line\">\t\t<span class=\"comment\">//初始化控件，并绑定适配器</span></div><div class=\"line\">        mAdapter = <span class=\"keyword\">new</span> ImagePagerAdapter(getSupportFragmentManager(), imageResIds.length);</div><div class=\"line\">        mPager = (ViewPager) findViewById(R.id.pager);</div><div class=\"line\">        mPager.setAdapter(mAdapter);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImagePagerAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">FragmentStatePagerAdapter</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> mSize;</div><div class=\"line\">\t\t<span class=\"comment\">//</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ImagePagerAdapter</span><span class=\"params\">(FragmentManager fm, <span class=\"keyword\">int</span> size)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(fm);</div><div class=\"line\">            mSize = size;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getCount</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> mSize;</div><div class=\"line\">        &#125;</div><div class=\"line\">\t\t<span class=\"comment\">//返回fragment对象</span></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Fragment <span class=\"title\">getItem</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> ImageDetailFragment.newInstance(position);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Fragment里面包含Image View控件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageDetailFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String IMAGE_DATA_EXTRA = <span class=\"string\">\"resId\"</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mImageNum;<span class=\"comment\">//图像数目</span></div><div class=\"line\">    <span class=\"keyword\">private</span> ImageView mImageView;<span class=\"comment\">//image view控件</span></div><div class=\"line\">\t<span class=\"comment\">//构造函数，接收图片数目参数</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> ImageDetailFragment <span class=\"title\">newInstance</span><span class=\"params\">(<span class=\"keyword\">int</span> imageNum)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> ImageDetailFragment f = <span class=\"keyword\">new</span> ImageDetailFragment();</div><div class=\"line\">        <span class=\"keyword\">final</span> Bundle args = <span class=\"keyword\">new</span> Bundle();</div><div class=\"line\">        args.putInt(IMAGE_DATA_EXTRA, imageNum);</div><div class=\"line\">        f.setArguments(args);</div><div class=\"line\">        <span class=\"keyword\">return</span> f;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Empty constructor, required as per Fragment docs</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ImageDetailFragment</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        mImageNum = getArguments() != <span class=\"keyword\">null</span> ? getArguments().getInt(IMAGE_DATA_EXTRA) : -<span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, ViewGroup container,</span></span></div><div class=\"line\">            Bundle savedInstanceState) &#123;</div><div class=\"line\">        <span class=\"comment\">// image_detail_fragment.xml contains just an ImageView</span></div><div class=\"line\">        <span class=\"keyword\">final</span> View v = inflater.inflate(R.layout.image_detail_fragment, container, <span class=\"keyword\">false</span>);</div><div class=\"line\">        mImageView = (ImageView) v.findViewById(R.id.imageView);</div><div class=\"line\">        <span class=\"keyword\">return</span> v;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityCreated</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onActivityCreated(savedInstanceState);</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> resId = ImageDetailActivity.imageResIds[mImageNum];</div><div class=\"line\">        mImageView.setImageResource(resId); <span class=\"comment\">// Load image into ImageView</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>==<strong>如上方式，可能会阻塞UI线程</strong>==，改用AsyncTask最好：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageDetailActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">FragmentActivity</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">\t<span class=\"comment\">//后台加载图片</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">loadBitmap</span><span class=\"params\">(<span class=\"keyword\">int</span> resId, ImageView imageView)</span> </span>&#123;</div><div class=\"line\">        mImageView.setImageResource(R.drawable.image_placeholder);</div><div class=\"line\">      <span class=\"comment\">//后台执行</span></div><div class=\"line\">        BitmapWorkerTask task = <span class=\"keyword\">new</span> BitmapWorkerTask(mImageView);</div><div class=\"line\">        task.execute(resId);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    ... <span class=\"comment\">// include BitmapWorkerTask class</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageDetailFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityCreated</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onActivityCreated(savedInstanceState);</div><div class=\"line\">        <span class=\"keyword\">if</span> (ImageDetailActivity.class.isInstance(getActivity())) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> resId = ImageDetailActivity.imageResIds[mImageNum];</div><div class=\"line\">            <span class=\"comment\">//调用上面的后台加载图片</span></div><div class=\"line\">            ((ImageDetailActivity) getActivity()).loadBitmap(resId, mImageView);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>后台的操作可以更为合理，加载并缓存图像</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageDetailActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">FragmentActivity</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">private</span> LruCache mMemoryCache;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"comment\">// initialize LruCache as per Use a Memory Cache section</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">loadBitmap</span><span class=\"params\">(<span class=\"keyword\">int</span> resId, ImageView imageView)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> String imageKey = String.valueOf(resId);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> Bitmap bitmap = mMemoryCache.get(imageKey);</div><div class=\"line\">        <span class=\"keyword\">if</span> (bitmap != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            mImageView.setImageBitmap(bitmap);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            mImageView.setImageResource(R.drawable.image_placeholder);</div><div class=\"line\">            BitmapWorkerTask task = <span class=\"keyword\">new</span> BitmapWorkerTask(mImageView);</div><div class=\"line\">            task.execute(resId);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ... <span class=\"comment\">// include updated BitmapWorkerTask from Use a Memory Cache section</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"实现加载图片到GridView\"><a href=\"#实现加载图片到GridView\" class=\"headerlink\" title=\"实现加载图片到GridView\"></a>实现加载图片到GridView</h5><p>如下场景，Fragment内置Grid View，item是Image View：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageGridFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> <span class=\"keyword\">implements</span> <span class=\"title\">AdapterView</span>.<span class=\"title\">OnItemClickListener</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> ImageAdapter mAdapter;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//静态加载的图片资源，用于适配器</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Integer[] imageResIds = <span class=\"keyword\">new</span> Integer[] &#123;</div><div class=\"line\">            R.drawable.sample_image_1, R.drawable.sample_image_2, R.drawable.sample_image_3,</div><div class=\"line\">            R.drawable.sample_image_4, R.drawable.sample_image_5, R.drawable.sample_image_6,</div><div class=\"line\">            R.drawable.sample_image_7, R.drawable.sample_image_8, R.drawable.sample_image_9&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Empty constructor as per Fragment docs</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ImageGridFragment</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        mAdapter = <span class=\"keyword\">new</span> ImageAdapter(getActivity());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(</span></span></div><div class=\"line\">            LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) &#123;</div><div class=\"line\">      <span class=\"comment\">//初始化控件，并绑定适配器，注册监听  </span></div><div class=\"line\">      <span class=\"keyword\">final</span> View v = inflater.inflate(R.layout.image_grid_fragment, container, <span class=\"keyword\">false</span>);</div><div class=\"line\">        <span class=\"keyword\">final</span> GridView mGridView = (GridView) v.findViewById(R.id.gridView);</div><div class=\"line\">        mGridView.setAdapter(mAdapter);</div><div class=\"line\">        mGridView.setOnItemClickListener(<span class=\"keyword\">this</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> v;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onItemClick</span><span class=\"params\">(AdapterView parent, View v, <span class=\"keyword\">int</span> position, <span class=\"keyword\">long</span> id)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Intent i = <span class=\"keyword\">new</span> Intent(getActivity(), ImageDetailActivity.class);</div><div class=\"line\">        i.putExtra(ImageDetailActivity.EXTRA_IMAGE, position);</div><div class=\"line\">        startActivity(i);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseAdapter</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Context mContext;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ImageAdapter</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>();</div><div class=\"line\">            mContext = context;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getCount</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> imageResIds.length;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getItem</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> imageResIds[position];</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">getItemId</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> position;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">getView</span><span class=\"params\">(<span class=\"keyword\">int</span> position, View convertView, ViewGroup container)</span> </span>&#123;</div><div class=\"line\">            ImageView imageView;</div><div class=\"line\">            <span class=\"keyword\">if</span> (convertView == <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">// 判断是否是循环复用的item view，不是的话，需要初始化一些属性。</span></div><div class=\"line\">                imageView = <span class=\"keyword\">new</span> ImageView(mContext);</div><div class=\"line\">                imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);</div><div class=\"line\">                imageView.setLayoutParams(<span class=\"keyword\">new</span> GridView.LayoutParams(</div><div class=\"line\">                        LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                imageView = (ImageView) convertView;</div><div class=\"line\">            &#125;</div><div class=\"line\">        <span class=\"comment\">//请注意下面的代码，如此可能会耗时，阻塞UI</span></div><div class=\"line\">        imageView.setImageResource(imageResIds[position]); <span class=\"comment\">// Load image into ImageView</span></div><div class=\"line\">        <span class=\"keyword\">return</span> imageView;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>考虑UI的可能阻塞，以及GridView引起的并发问题，代码优化如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageGridFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> <span class=\"keyword\">implements</span> <span class=\"title\">AdapterView</span>.<span class=\"title\">OnItemClickListener</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseAdapter</span> </span>&#123;</div><div class=\"line\">        ...</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">getView</span><span class=\"params\">(<span class=\"keyword\">int</span> position, View convertView, ViewGroup container)</span> </span>&#123;</div><div class=\"line\">            ...</div><div class=\"line\">            loadBitmap(imageResIds[position], imageView)</div><div class=\"line\">            <span class=\"keyword\">return</span> imageView;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t<span class=\"comment\">//异步加载图像</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">loadBitmap</span><span class=\"params\">(<span class=\"keyword\">int</span> resId, ImageView imageView)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (cancelPotentialWork(resId, imageView)) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> BitmapWorkerTask task = <span class=\"keyword\">new</span> BitmapWorkerTask(imageView);</div><div class=\"line\">            <span class=\"keyword\">final</span> AsyncDrawable asyncDrawable =</div><div class=\"line\">                    <span class=\"keyword\">new</span> AsyncDrawable(getResources(), mPlaceHolderBitmap, task);</div><div class=\"line\">            imageView.setImageDrawable(asyncDrawable);</div><div class=\"line\">            task.execute(resId);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t<span class=\"comment\">//用于绑定到imageView的drawable</span></div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AsyncDrawable</span> <span class=\"keyword\">extends</span> <span class=\"title\">BitmapDrawable</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> WeakReference bitmapWorkerTaskReference;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AsyncDrawable</span><span class=\"params\">(Resources res, Bitmap bitmap,</span></span></div><div class=\"line\">                BitmapWorkerTask bitmapWorkerTask) &#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(res, bitmap);</div><div class=\"line\">            bitmapWorkerTaskReference =</div><div class=\"line\">                <span class=\"keyword\">new</span> WeakReference(bitmapWorkerTask);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> BitmapWorkerTask <span class=\"title\">getBitmapWorkerTask</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> bitmapWorkerTaskReference.get();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t<span class=\"comment\">//判断imageview是否已经有加载图像的task</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">cancelPotentialWork</span><span class=\"params\">(<span class=\"keyword\">int</span> data, ImageView imageView)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> BitmapWorkerTask bitmapWorkerTask = getBitmapWorkerTask(imageView);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (bitmapWorkerTask != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> bitmapData = bitmapWorkerTask.data;</div><div class=\"line\">            <span class=\"keyword\">if</span> (bitmapData != data) &#123;</div><div class=\"line\">                <span class=\"comment\">// Cancel previous task</span></div><div class=\"line\">                bitmapWorkerTask.cancel(<span class=\"keyword\">true</span>);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"comment\">// The same work is already in progress</span></div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// No task associated with the ImageView, or an existing task was cancelled</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t<span class=\"comment\">//获取图像加载task</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> BitmapWorkerTask <span class=\"title\">getBitmapWorkerTask</span><span class=\"params\">(ImageView imageView)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (imageView != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">final</span> Drawable drawable = imageView.getDrawable();</div><div class=\"line\">           <span class=\"keyword\">if</span> (drawable <span class=\"keyword\">instanceof</span> AsyncDrawable) &#123;</div><div class=\"line\">               <span class=\"keyword\">final</span> AsyncDrawable asyncDrawable = (AsyncDrawable) drawable;</div><div class=\"line\">               <span class=\"keyword\">return</span> asyncDrawable.getBitmapWorkerTask();</div><div class=\"line\">           &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    ... <span class=\"comment\">// include updated BitmapWorkerTask class</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"2、使用OpenGL-ES显示图像\"><a href=\"#2、使用OpenGL-ES显示图像\" class=\"headerlink\" title=\"2、使用OpenGL ES显示图像\"></a>2、使用OpenGL ES显示图像</h3><p>Android平台提供了OpenGL ES接口，帮助我们实现更为丰富的图像显示效果。本章记述OpenGL构建应用的基础知识，包括配置、绘制对象、移动图形以及响应事件。</p>\n<p><strong>注意，不要混用OpenGL ES 1.x版和2.x版本的接口，因为并不通用。</strong></p>\n<h4 id=\"1、建立OpenGL-ES的环境\"><a href=\"#1、建立OpenGL-ES的环境\" class=\"headerlink\" title=\"1、建立OpenGL ES的环境\"></a>1、建立OpenGL ES的环境</h4><p>在应用中使用OpenGL ES来绘制图像，需要给它一个容器。通常实现<code>GLSurfaceView</code>做容器和<code>GLSurfaceView.Renderer</code>类来控制绘制。<code>GLSurfaceView</code>一般用于全屏或者接近全屏的View绘制，若是小范围，可以用<code>TextureView</code>。亦或者自定义View继承SurfaceView，但是会费事。</p>\n<ul>\n<li><h5 id=\"在Manifest中声明使用OpenGL-ES\"><a href=\"#在Manifest中声明使用OpenGL-ES\" class=\"headerlink\" title=\"在Manifest中声明使用OpenGL ES\"></a>在Manifest中声明使用OpenGL ES</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-feature</span> <span class=\"attr\">android.glEsVersion</span>=<span class=\"string\">\"0x00020000\"</span> <span class=\"attr\">android.required</span>=<span class=\"string\">\"true\"</span>/&gt;</span></div></pre></td></tr></table></figure>\n<p>如果使用图像纹理压缩，则必须在清单中声明支持的压缩格式：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">supports-gl-texture</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"GL_OES_compressed_ETC1_RGB8_texture\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">supports-gl-texture</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"GL_OES_compressed_paletted_texture\"</span>/&gt;</span></div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>使用OpenGL ES的App可以Activity中使用GLSurfaceView布局。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//要求api&gt;=8</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OpenGLES20Activity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> GLSurfaceView mGLView;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">\t\t<span class=\"comment\">//创建GLSurfaceView对象，设置为Activity布局。</span></div><div class=\"line\">        mGLView = <span class=\"keyword\">new</span> MyGLSurfaceView(<span class=\"keyword\">this</span>);</div><div class=\"line\">        setContentView(mGLView);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"构建一个GLSurfaceView对象\"><a href=\"#构建一个GLSurfaceView对象\" class=\"headerlink\" title=\"构建一个GLSurfaceView对象\"></a>构建一个GLSurfaceView对象</h5><p>  GLSurfaceView是一个特殊的view，用于绘制OpenGL ES图像的一个容器。其内部类GLSurfaceView.Renderer用于控制绘制。<br>  一般需要继承<code>GLSurfaceView</code>来用于自主控制各类触控事件。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyGLSurfaceView</span> <span class=\"keyword\">extends</span> <span class=\"title\">GLSurfaceView</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> MyGLRenderer mRenderer;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyGLSurfaceView</span><span class=\"params\">(Context context)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Create an OpenGL ES 2.0 context</span></div><div class=\"line\">        setEGLContextClientVersion(<span class=\"number\">2</span>);</div><div class=\"line\"></div><div class=\"line\">        mRenderer = <span class=\"keyword\">new</span> MyGLRenderer();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Set the Renderer for drawing on the GLSurfaceView</span></div><div class=\"line\">        setRenderer(mRenderer);</div><div class=\"line\">        <span class=\"comment\">// Render the view only when there is a change in the drawing data</span></div><div class=\"line\">        <span class=\"comment\">//设置此属性的话，除非调用requestRender()，否则GLSurfaceView不会刷新。只当有图像变化才会刷新。</span></div><div class=\"line\">        setRenderMode(GLSurfaceView.RENDERMODE_WHEN_DIRTY);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"构建一个渲染类\"><a href=\"#构建一个渲染类\" class=\"headerlink\" title=\"构建一个渲染类\"></a>构建一个渲染类</h5><p>  <code>GLSurfaceView.Renderer</code>被称为渲染器，控制图像绘制。Android可调用：</p>\n<ul>\n<li>onSurfaceCreated();调用一次，用于创建OpenGL ES环境</li>\n<li>onDrawFrame();每次重绘View时调用。</li>\n<li><p>onSurfaceChanged();View的几何形态变化时调用。</p>\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyGLRenderer</span> <span class=\"keyword\">implements</span> <span class=\"title\">GLSurfaceView</span>.<span class=\"title\">Renderer</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSurfaceCreated</span><span class=\"params\">(GL10 unused, EGLConfig config)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 设置背景框架颜色，此处为黑色，ARGB值</span></div><div class=\"line\">        GLES20.glClearColor(<span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>, <span class=\"number\">1.0f</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDrawFrame</span><span class=\"params\">(GL10 unused)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 重绘背景色</span></div><div class=\"line\">        GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSurfaceChanged</span><span class=\"params\">(GL10 unused, <span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height)</span> </span>&#123;</div><div class=\"line\">        GLES20.glViewport(<span class=\"number\">0</span>, <span class=\"number\">0</span>, width, height);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2、定义shapes\"><a href=\"#2、定义shapes\" class=\"headerlink\" title=\"2、定义shapes\"></a>2、定义shapes</h4><p>了解了OpenGL ES的基本概念后，便可以学习如何绘制基本图形。</p>\n<ul>\n<li><p>定义一个三角形<br>  OpenGL ES允许我们使用三维空间坐标来绘制图形，通常会定义float坐标数组，为了高效此处使用了<br>  ByteBuffer：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Triangle</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> FloatBuffer vertexBuffer;<span class=\"comment\">//浮点数组</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 数组中含有的坐标点数</span></div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> COORDS_PER_VERTEX = <span class=\"number\">3</span>;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">float</span> triangleCoords[] = &#123;   <span class=\"comment\">//坐标点逆时针顺序</span></div><div class=\"line\">            <span class=\"number\">0.0f</span>,  <span class=\"number\">0.622008459f</span>, <span class=\"number\">0.0f</span>, <span class=\"comment\">// 顶点</span></div><div class=\"line\">            -<span class=\"number\">0.5f</span>, -<span class=\"number\">0.311004243f</span>, <span class=\"number\">0.0f</span>, <span class=\"comment\">// 左下角</span></div><div class=\"line\">            <span class=\"number\">0.5f</span>, -<span class=\"number\">0.311004243f</span>, <span class=\"number\">0.0f</span>  <span class=\"comment\">//右下角</span></div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//设置RGB，Alpha</span></div><div class=\"line\">    <span class=\"keyword\">float</span> color[] = &#123; <span class=\"number\">0.63671875f</span>, <span class=\"number\">0.76953125f</span>, <span class=\"number\">0.22265625f</span>, <span class=\"number\">1.0f</span> &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Triangle</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// initialize vertex byte buffer for shape coordinates</span></div><div class=\"line\">        ByteBuffer bb = ByteBuffer.allocateDirect(</div><div class=\"line\">                <span class=\"comment\">// (number of coordinate values * 4 bytes per float)</span></div><div class=\"line\">                triangleCoords.length * <span class=\"number\">4</span>);</div><div class=\"line\">        <span class=\"comment\">// use the device hardware's native byte order</span></div><div class=\"line\">        bb.order(ByteOrder.nativeOrder());</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// create a floating point buffer from the ByteBuffer</span></div><div class=\"line\">        vertexBuffer = bb.asFloatBuffer();</div><div class=\"line\">        <span class=\"comment\">// add the coordinates to the FloatBuffer</span></div><div class=\"line\">        vertexBuffer.put(triangleCoords);</div><div class=\"line\">        <span class=\"comment\">// set the buffer to read the first coordinate</span></div><div class=\"line\">        vertexBuffer.position(<span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  默认情况下，OpenGL ES会有一个[0,0,0]的三维坐标系。更多的需要参考OpenGL手册。</p>\n</li>\n<li>定义一个矩形<br>  如下示例演示通过定义两个三角形来实现一个矩形。<br>  <img src=\"/2017/03/27/第四篇、Android图像与动画/ccw-square.png\" alt=\"矩形\"><pre><code><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//绘制两个三角形，所以使用一个绘制列表来通知OpenGL如何绘制顶点。</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> FloatBuffer vertexBuffer;</div><div class=\"line\">    <span class=\"keyword\">private</span> ShortBuffer drawListBuffer;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// number of coordinates per vertex in this array</span></div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> COORDS_PER_VERTEX = <span class=\"number\">3</span>;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">float</span> squareCoords[] = &#123;</div><div class=\"line\">            -<span class=\"number\">0.5f</span>,  <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>,   <span class=\"comment\">// top left</span></div><div class=\"line\">            -<span class=\"number\">0.5f</span>, -<span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>,   <span class=\"comment\">// bottom left</span></div><div class=\"line\">            <span class=\"number\">0.5f</span>, -<span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>,   <span class=\"comment\">// bottom right</span></div><div class=\"line\">            <span class=\"number\">0.5f</span>,  <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span> &#125;; <span class=\"comment\">// top right</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">short</span> drawOrder[] = &#123; <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> &#125;; <span class=\"comment\">// order to draw vertices</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Square</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// initialize vertex byte buffer for shape coordinates</span></div><div class=\"line\">        ByteBuffer bb = ByteBuffer.allocateDirect(</div><div class=\"line\">        <span class=\"comment\">// (# of coordinate values * 4 bytes per float)</span></div><div class=\"line\">                squareCoords.length * <span class=\"number\">4</span>);</div><div class=\"line\">        bb.order(ByteOrder.nativeOrder());</div><div class=\"line\">        vertexBuffer = bb.asFloatBuffer();</div><div class=\"line\">        vertexBuffer.put(squareCoords);</div><div class=\"line\">        vertexBuffer.position(<span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// initialize byte buffer for the draw list</span></div><div class=\"line\">        ByteBuffer dlb = ByteBuffer.allocateDirect(</div><div class=\"line\">        <span class=\"comment\">// (# of coordinate values * 2 bytes per short)</span></div><div class=\"line\">                drawOrder.length * <span class=\"number\">2</span>);</div><div class=\"line\">        dlb.order(ByteOrder.nativeOrder());</div><div class=\"line\">        drawListBuffer = dlb.asShortBuffer();</div><div class=\"line\">        drawListBuffer.put(drawOrder);</div><div class=\"line\">        drawListBuffer.position(<span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</code></pre></li>\n</ul>\n<h4 id=\"3、绘制shapes\"><a href=\"#3、绘制shapes\" class=\"headerlink\" title=\"3、绘制shapes\"></a>3、绘制shapes</h4><p>如上小节只是介绍了如何定义一个shape图形，本节将介绍如何绘制出需要的图形。出于内存和效率考虑，<br>除非加载的图形变化，一般都在<code>onSurfaceCreated()</code>中初始化shape图形。</p>\n<ul>\n<li><h5 id=\"初始化图形\"><a href=\"#初始化图形\" class=\"headerlink\" title=\"初始化图形\"></a>初始化图形</h5>  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyGLRenderer</span> <span class=\"keyword\">implements</span> <span class=\"title\">GLSurfaceView</span>.<span class=\"title\">Renderer</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">private</span> Triangle mTriangle;</div><div class=\"line\">    <span class=\"keyword\">private</span> Square   mSquare;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSurfaceCreated</span><span class=\"params\">(GL10 unused, EGLConfig config)</span> </span>&#123;</div><div class=\"line\">        ...</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// initialize a triangle</span></div><div class=\"line\">        mTriangle = <span class=\"keyword\">new</span> Triangle();</div><div class=\"line\">        <span class=\"comment\">// initialize a square</span></div><div class=\"line\">        mSquare = <span class=\"keyword\">new</span> Square();</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  使用OpenGL ES 绘制一个定义好的图形，需要如下步骤：</p>\n<ul>\n<li>顶点着色器（Vertex Shader）：用于渲染顶点的OpenGL ES 代码</li>\n<li>片段着色器（Fragment Shader）：使用颜色和纹理渲染图形表面的OpenGL ES 代码</li>\n<li><p>程式（Program）： OpenGL ES对象，包含各类着色器等。</p>\n<p>示例:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String vertexShaderCode =</div><div class=\"line\">    <span class=\"string\">\"attribute vec4 vPosition;\"</span> +</div><div class=\"line\">    <span class=\"string\">\"void main() &#123;\"</span> +</div><div class=\"line\">    <span class=\"string\">\"  gl_Position = vPosition;\"</span> +</div><div class=\"line\">    <span class=\"string\">\"&#125;\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String fragmentShaderCode =</div><div class=\"line\">    <span class=\"string\">\"precision mediump float;\"</span> +</div><div class=\"line\">    <span class=\"string\">\"uniform vec4 vColor;\"</span> +</div><div class=\"line\">    <span class=\"string\">\"void main() &#123;\"</span> +</div><div class=\"line\">    <span class=\"string\">\"  gl_FragColor = vColor;\"</span> +</div><div class=\"line\">    <span class=\"string\">\"&#125;\"</span>;</div><div class=\"line\"></div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>着色器包含OpenGL Shading Language（GLSL）代码，需要先编译，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">loadShader</span><span class=\"params\">(<span class=\"keyword\">int</span> type, String shaderCode)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// create a vertex shader type (GLES20.GL_VERTEX_SHADER)</span></div><div class=\"line\">    <span class=\"comment\">// or a fragment shader type (GLES20.GL_FRAGMENT_SHADER)</span></div><div class=\"line\">    <span class=\"keyword\">int</span> shader = GLES20.glCreateShader(type);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// add the source code to the shader and compile it</span></div><div class=\"line\">    GLES20.glShaderSource(shader, shaderCode);</div><div class=\"line\">    GLES20.glCompileShader(shader);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> shader;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><h5 id=\"画图\"><a href=\"#画图\" class=\"headerlink\" title=\"画图\"></a>画图</h5><p>  为了绘制你的图形，你必须编译着色器代码，将它们添加至一个OpenGL ES Program对象中，然后执行链接。<br>  在你的绘制对象的构造函数里做这些事情，这样上述步骤就只用执行一次。</p>\n<blockquote>\n<p>Note：编译OpenGL ES着色器及链接操作对于CPU周期和处理时间而言，消耗是巨大的，所以你应该避免重复执行这些事情。<br>如果在执行期间不知道着色器的内容，那么你应该在构建你的应用时，确保它们只被创建了一次，并且缓存以备后续使用。</p>\n</blockquote>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> class <span class=\"title\">Triangle</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> mProgram;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Triangle</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        ...</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">int</span> vertexShader = MyGLRenderer.loadShader(GLES20.GL_VERTEX_SHADER,</div><div class=\"line\">                                            vertexShaderCode);</div><div class=\"line\">        <span class=\"keyword\">int</span> fragmentShader = MyGLRenderer.loadShader(GLES20.GL_FRAGMENT_SHADER,</div><div class=\"line\">                                            fragmentShaderCode);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// create empty OpenGL ES Program</span></div><div class=\"line\">        mProgram = GLES20.glCreateProgram();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// add the vertex shader to program</span></div><div class=\"line\">        GLES20.glAttachShader(mProgram, vertexShader);</div><div class=\"line\">        <span class=\"comment\">// add the fragment shader to program</span></div><div class=\"line\">        GLES20.glAttachShader(mProgram, fragmentShader);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// creates OpenGL ES program executables</span></div><div class=\"line\">        GLES20.glLinkProgram(mProgram);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  绘制属性会根据图形而变化，就需要将变化逻辑一同写入绘制参数，</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mPositionHandle;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mColorHandle;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> vertexCount = triangleCoords.length / COORDS_PER_VERTEX;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> vertexStride = COORDS_PER_VERTEX * <span class=\"number\">4</span>; <span class=\"comment\">// 4 bytes per vertex</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Add program to OpenGL ES environment</span></div><div class=\"line\">    GLES20.glUseProgram(mProgram);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// get handle to vertex shader's vPosition member</span></div><div class=\"line\">    mPositionHandle = GLES20.glGetAttribLocation(mProgram, <span class=\"string\">\"vPosition\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Enable a handle to the triangle vertices</span></div><div class=\"line\">    GLES20.glEnableVertexAttribArray(mPositionHandle);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Prepare the triangle coordinate data</span></div><div class=\"line\">    GLES20.glVertexAttribPointer(mPositionHandle, COORDS_PER_VERTEX,</div><div class=\"line\">                                GLES20.GL_FLOAT, <span class=\"keyword\">false</span>,</div><div class=\"line\">                                vertexStride, vertexBuffer);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// get handle to fragment shader's vColor member</span></div><div class=\"line\">    mColorHandle = GLES20.glGetUniformLocation(mProgram, <span class=\"string\">\"vColor\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Set color for drawing the triangle</span></div><div class=\"line\">    GLES20.glUniform4fv(mColorHandle, <span class=\"number\">1</span>, color, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Draw the triangle</span></div><div class=\"line\">    GLES20.glDrawArrays(GLES20.GL_TRIANGLES, <span class=\"number\">0</span>, vertexCount);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Disable vertex array</span></div><div class=\"line\">    GLES20.glDisableVertexAttribArray(mPositionHandle);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  如此只需要在渲染器的<code>onDrawFrame()</code>中调用上面的<code>onDraw()</code>方法即可。<br>  <img src=\"/2017/03/27/第四篇、Android图像与动画/ogl-triangle.png\" alt=\"绘制图形\"></p>\n<h4 id=\"3、运用投影和相机视角\"><a href=\"#3、运用投影和相机视角\" class=\"headerlink\" title=\"3、运用投影和相机视角\"></a>3、运用投影和相机视角</h4><p>在OpenGL ES 环境中，利用投影和相机视角可以将图像更为逼真的显示。</p>\n</li>\n</ul>\n<ol>\n<li>投影(Projection)：此类变化基于GLSurfaceView的长宽。</li>\n<li>相机视角(Camera View):此类变化基于OpenGL ES 的虚拟相机。</li>\n</ol>\n<ul>\n<li><h5 id=\"定义一个投影\"><a href=\"#定义一个投影\" class=\"headerlink\" title=\"定义一个投影\"></a>定义一个投影</h5>投影变换的数据计算在GLSurfaceView.Render类中的onSurfaceChanged()中执行。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// mMVPMatrix is an abbreviation for \"Model View Projection Matrix\"</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">float</span>[] mMVPMatrix = <span class=\"keyword\">new</span> <span class=\"keyword\">float</span>[<span class=\"number\">16</span>];</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">float</span>[] mProjectionMatrix = <span class=\"keyword\">new</span> <span class=\"keyword\">float</span>[<span class=\"number\">16</span>];</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">float</span>[] mViewMatrix = <span class=\"keyword\">new</span> <span class=\"keyword\">float</span>[<span class=\"number\">16</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSurfaceChanged</span><span class=\"params\">(GL10 unused, <span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height)</span> </span>&#123;</div><div class=\"line\">    GLES20.glViewport(<span class=\"number\">0</span>, <span class=\"number\">0</span>, width, height);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">float</span> ratio = (<span class=\"keyword\">float</span>) width / height;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// this projection matrix is applied to object coordinates</span></div><div class=\"line\">    <span class=\"comment\">// in the onDrawFrame() method</span></div><div class=\"line\">    Matrix.frustumM(mProjectionMatrix, <span class=\"number\">0</span>, -ratio, ratio, -<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">7</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>若是绘图只是用投影，会让图像显得空旷，最好结合相机视角来绘制。</p>\n</blockquote>\n<ul>\n<li><h5 id=\"定义一个相机视角\"><a href=\"#定义一个相机视角\" class=\"headerlink\" title=\"定义一个相机视角\"></a>定义一个相机视角</h5>使用<code>Matrix.setLookAtM()</code>来换算计算，再结合如上投影换算：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDrawFrame</span><span class=\"params\">(GL10 unused)</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// Set the camera position (View matrix)</span></div><div class=\"line\">    Matrix.setLookAtM(mViewMatrix, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, -<span class=\"number\">3</span>, <span class=\"number\">0f</span>, <span class=\"number\">0f</span>, <span class=\"number\">0f</span>, <span class=\"number\">0f</span>, <span class=\"number\">1.0f</span>, <span class=\"number\">0.0f</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Calculate the projection and view transformation</span></div><div class=\"line\">    Matrix.multiplyMM(mMVPMatrix, <span class=\"number\">0</span>, mProjectionMatrix, <span class=\"number\">0</span>, mViewMatrix, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Draw shape</span></div><div class=\"line\">    mTriangle.draw(mMVPMatrix);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>将上一节的三角形使用投影和视角绘制：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Triangle</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//为顶点添加渲染着色器，Matrix</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String vertexShaderCode =</div><div class=\"line\">        <span class=\"comment\">// This matrix member variable provides a hook to manipulate</span></div><div class=\"line\">        <span class=\"comment\">// the coordinates of the objects that use this vertex shader</span></div><div class=\"line\">        <span class=\"string\">\"uniform mat4 uMVPMatrix;\"</span> +</div><div class=\"line\">        <span class=\"string\">\"attribute vec4 vPosition;\"</span> +</div><div class=\"line\">        <span class=\"string\">\"void main() &#123;\"</span> +</div><div class=\"line\">        <span class=\"comment\">// the matrix must be included as a modifier of gl_Position</span></div><div class=\"line\">        <span class=\"comment\">// Note that the uMVPMatrix factor *must be first* in order</span></div><div class=\"line\">        <span class=\"comment\">// for the matrix multiplication product to be correct.</span></div><div class=\"line\">        <span class=\"string\">\"  gl_Position = uMVPMatrix * vPosition;\"</span> +</div><div class=\"line\">        <span class=\"string\">\"&#125;\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Use to access and set the view transformation</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mMVPMatrixHandle;</div><div class=\"line\"></div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>修改<code>onDraw ()</code>方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">(<span class=\"keyword\">float</span>[] mvpMatrix)</span> </span>&#123; <span class=\"comment\">// pass in the calculated transformation matrix</span></div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// get handle to shape's transformation matrix</span></div><div class=\"line\">    mMVPMatrixHandle = GLES20.glGetUniformLocation(mProgram, <span class=\"string\">\"uMVPMatrix\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Pass the projection and view transformation to the shader</span></div><div class=\"line\">    GLES20.glUniformMatrix4fv(mMVPMatrixHandle, <span class=\"number\">1</span>, <span class=\"keyword\">false</span>, mvpMatrix, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Draw the triangle</span></div><div class=\"line\">    GLES20.glDrawArrays(GLES20.GL_TRIANGLES, <span class=\"number\">0</span>, vertexCount);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Disable vertex array</span></div><div class=\"line\">    GLES20.glDisableVertexAttribArray(mPositionHandle);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>效果如图：<img src=\"/2017/03/27/第四篇、Android图像与动画/ogl-triangle-projected.png\" alt=\"视角绘图\"></p>\n<h4 id=\"4、添加移动\"><a href=\"#4、添加移动\" class=\"headerlink\" title=\"4、添加移动\"></a>4、添加移动</h4><p>OpenGL 区别于Android的canvas和Drawable图形框架，在于其提供的特殊功能，如3D效果等。</p>\n<ul>\n<li><h5 id=\"旋转图像\"><a href=\"#旋转图像\" class=\"headerlink\" title=\"旋转图像\"></a>旋转图像</h5>在OpenGL ES2.0中新增一个变化矩阵，结合之前的投影和视角，来绘制图形移动。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">float</span>[] mRotationMatrix = <span class=\"keyword\">new</span> <span class=\"keyword\">float</span>[<span class=\"number\">16</span>];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDrawFrame</span><span class=\"params\">(GL10 gl)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">float</span>[] scratch = <span class=\"keyword\">new</span> <span class=\"keyword\">float</span>[<span class=\"number\">16</span>];</div><div class=\"line\"></div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Create a rotation transformation for the triangle</span></div><div class=\"line\">    <span class=\"keyword\">long</span> time = SystemClock.uptimeMillis() % <span class=\"number\">4000L</span>;</div><div class=\"line\">    <span class=\"keyword\">float</span> angle = <span class=\"number\">0.090f</span> * ((<span class=\"keyword\">int</span>) time);</div><div class=\"line\">    Matrix.setRotateM(mRotationMatrix, <span class=\"number\">0</span>, angle, <span class=\"number\">0</span>, <span class=\"number\">0</span>, -<span class=\"number\">1.0f</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Combine the rotation matrix with the projection and camera view</span></div><div class=\"line\">    <span class=\"comment\">// Note that the mMVPMatrix factor *must be first* in order</span></div><div class=\"line\">    <span class=\"comment\">// for the matrix multiplication product to be correct.</span></div><div class=\"line\">    Matrix.multiplyMM(scratch, <span class=\"number\">0</span>, mMVPMatrix, <span class=\"number\">0</span>, mRotationMatrix, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Draw triangle</span></div><div class=\"line\">    mTriangle.draw(scratch);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p><strong>Note:</strong> 不要将<code>GLSurfaceView.RENDERMODE_WHEN_DIRTY</code>注释掉，否则就可能不会移动，也不会渲染。</p>\n</blockquote>\n<ul>\n<li><h5 id=\"启用连续渲染\"><a href=\"#启用连续渲染\" class=\"headerlink\" title=\"启用连续渲染\"></a>启用连续渲染</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyGLSurfaceView</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// Render the view only when there is a change in the drawing data.</span></div><div class=\"line\">    <span class=\"comment\">// To allow the triangle to rotate automatically, this line is commented out:</span></div><div class=\"line\">    <span class=\"comment\">//setRenderMode(GLSurfaceView.RENDERMODE_WHEN_DIRTY);</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"5、响应触摸事件\"><a href=\"#5、响应触摸事件\" class=\"headerlink\" title=\"5、响应触摸事件\"></a>5、响应触摸事件</h4><p>炫酷的图形图像，也可以和用户有良好的交互体验。重写<code>GLSurfaceView</code>类的<code>onTouchEvent()</code>方法<br>来响应触摸事件。</p>\n<ul>\n<li><h5 id=\"注册监听\"><a href=\"#注册监听\" class=\"headerlink\" title=\"注册监听\"></a>注册监听</h5>在重写<code>onTouchEvent()</code>方法后，想要完成事件相应，就需要注册监听。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> TOUCH_SCALE_FACTOR = <span class=\"number\">180.0f</span> / <span class=\"number\">320</span>;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">float</span> mPreviousX;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">float</span> mPreviousY;</div><div class=\"line\"><span class=\"comment\">//复写onTouchEvent方法，本文用于响应MotionEvent.ACTION_MOVE事件</span></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouchEvent</span><span class=\"params\">(MotionEvent e)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// MotionEvent reports input details from the touch screen</span></div><div class=\"line\">    <span class=\"comment\">// and other input controls. In this case, you are only</span></div><div class=\"line\">    <span class=\"comment\">// interested in events where the touch position changed.</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">float</span> x = e.getX();</div><div class=\"line\">    <span class=\"keyword\">float</span> y = e.getY();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">switch</span> (e.getAction()) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE:</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">float</span> dx = x - mPreviousX;</div><div class=\"line\">            <span class=\"keyword\">float</span> dy = y - mPreviousY;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// reverse direction of rotation above the mid-line</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (y &gt; getHeight() / <span class=\"number\">2</span>) &#123;</div><div class=\"line\">              dx = dx * -<span class=\"number\">1</span> ;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// reverse direction of rotation to left of the mid-line</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (x &lt; getWidth() / <span class=\"number\">2</span>) &#123;</div><div class=\"line\">              dy = dy * -<span class=\"number\">1</span> ;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            mRenderer.setAngle(</div><div class=\"line\">                    mRenderer.getAngle() +</div><div class=\"line\">                    ((dx + dy) * TOUCH_SCALE_FACTOR));</div><div class=\"line\">            requestRender();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    mPreviousX = x;</div><div class=\"line\">    mPreviousY = y;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>如上代码调用<code>requestRender()</code>来刷新绘制，通过<code>setRenderMode()</code>来提高效率，只有变化时候才绘制：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyGLSurfaceView</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">// Render the view only when there is a change in the drawing data</span></div><div class=\"line\">    setRenderMode(GLSurfaceView.RENDERMODE_WHEN_DIRTY);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li><h5 id=\"公开变量旋转角度\"><a href=\"#公开变量旋转角度\" class=\"headerlink\" title=\"公开变量旋转角度\"></a>公开变量旋转角度</h5>旋转角度的变量需要public，包括get和set方法<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyGLRenderer</span> <span class=\"keyword\">implements</span> <span class=\"title\">GLSurfaceView</span>.<span class=\"title\">Renderer</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">float</span> mAngle;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">float</span> <span class=\"title\">getAngle</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mAngle;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAngle</span><span class=\"params\">(<span class=\"keyword\">float</span> angle)</span> </span>&#123;</div><div class=\"line\">        mAngle = angle;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>然后在调用绘制图形的地方，填入角度值，启动旋转。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDrawFrame</span><span class=\"params\">(GL10 gl)</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">float</span>[] scratch = <span class=\"keyword\">new</span> <span class=\"keyword\">float</span>[<span class=\"number\">16</span>];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Create a rotation for the triangle</span></div><div class=\"line\">    <span class=\"comment\">// long time = SystemClock.uptimeMillis() % 4000L;</span></div><div class=\"line\">    <span class=\"comment\">// float angle = 0.090f * ((int) time);</span></div><div class=\"line\">    Matrix.setRotateM(mRotationMatrix, <span class=\"number\">0</span>, mAngle, <span class=\"number\">0</span>, <span class=\"number\">0</span>, -<span class=\"number\">1.0f</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Combine the rotation matrix with the projection and camera view</span></div><div class=\"line\">    <span class=\"comment\">// Note that the mMVPMatrix factor *must be first* in order</span></div><div class=\"line\">    <span class=\"comment\">// for the matrix multiplication product to be correct.</span></div><div class=\"line\">    Matrix.multiplyMM(scratch, <span class=\"number\">0</span>, mMVPMatrix, <span class=\"number\">0</span>, mRotationMatrix, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Draw triangle</span></div><div class=\"line\">    mTriangle.draw(scratch);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>滑动效果：<img src=\"/2017/03/27/第四篇、Android图像与动画/ogl-triangle-touch.png\" alt=\"滑动效果\"></p>\n<h3 id=\"3、添加动画\"><a href=\"#3、添加动画\" class=\"headerlink\" title=\"3、添加动画\"></a>3、添加动画</h3><p>动画效果可以让我们的App更为炫酷，但是也要在适当的地方和时机使用它。本章主要介绍Android的一些动画效果实现。</p>\n<h4 id=\"1、View间渐变\"><a href=\"#1、View间渐变\" class=\"headerlink\" title=\"1、View间渐变\"></a>1、View间渐变</h4><p>渐变动画通常用于View的切换，淡入淡出效果。<a href=\"http://hukai.me/android-training-course-in-chinese/animations/anim_crossfade.mp4\">渐变动画</a></p>\n<ul>\n<li><h5 id=\"创建View\"><a href=\"#创建View\" class=\"headerlink\" title=\"创建View\"></a>创建View</h5><p>示例，一个进度圈和可滑动的view</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">FrameLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ScrollView</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"/apk/res/android\"</span></span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span> <span class=\"attr\">style</span>=<span class=\"string\">\"?android:textAppearanceMedium\"</span></span></div><div class=\"line\">            <span class=\"attr\">android:lineSpacingMultiplier</span>=<span class=\"string\">\"1.2\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">            <span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/lorem_ipsum\"</span></div><div class=\"line\">            <span class=\"attr\">android:padding</span>=<span class=\"string\">\"16dp\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ScrollView</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ProgressBar</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/loading_spinner\"</span></span></div><div class=\"line\">        <span class=\"attr\">style</span>=<span class=\"string\">\"?android:progressBarStyleLarge\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">\"center\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">FrameLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"view设置动画\"><a href=\"#view设置动画\" class=\"headerlink\" title=\"view设置动画\"></a>view设置动画</h5><p>为上面的view设置动画效果，步骤如下：</p>\n</li>\n</ul>\n<ol>\n<li>设置view的成员变量，以备后用。</li>\n<li>先设置淡入的View的visible为gone</li>\n<li>将<code>config_shortAnimTime</code>系统属性暂存到成员变量。</li>\n</ol>\n<p>示例：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CrossfadeActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> View mContentView;</div><div class=\"line\">    <span class=\"keyword\">private</span> View mLoadingView;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mShortAnimationDuration;</div><div class=\"line\"></div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_crossfade);</div><div class=\"line\"></div><div class=\"line\">        mContentView = findViewById(R.id.content);</div><div class=\"line\">        mLoadingView = findViewById(R.id.loading_spinner);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Initially hide the content view.</span></div><div class=\"line\">        mContentView.setVisibility(View.GONE);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Retrieve and cache the system's default \"short\" animation time.</span></div><div class=\"line\">        mShortAnimationDuration = getResources().getInteger(</div><div class=\"line\">                android.R.integer.config_shortAnimTime);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li><h5 id=\"渐变View\"><a href=\"#渐变View\" class=\"headerlink\" title=\"渐变View\"></a>渐变View</h5>完成如上设置后，开始实现View的渐变效果：</li>\n</ul>\n<ol>\n<li>将需要淡入的View的Visible改为VISIBLE，透明度alpha=0</li>\n<li>将淡入的View，alpha从0–1，淡出的View，alpha从1–0</li>\n<li>使用<code>Animator.AnimatorListener</code>中的<code>onAnimationEnd()</code>来设置淡出的view的visible为gone，即使alpha=0，但是也会占用布局资源，所以需要gone。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> View mContentView;</div><div class=\"line\"><span class=\"keyword\">private</span> View mLoadingView;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mShortAnimationDuration;</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">crossfade</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Set the content view to 0% opacity but visible, so that it is visible</span></div><div class=\"line\">    <span class=\"comment\">// (but fully transparent) during the animation.</span></div><div class=\"line\">    mContentView.setAlpha(<span class=\"number\">0f</span>);</div><div class=\"line\">    mContentView.setVisibility(View.VISIBLE);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Animate the content view to 100% opacity, and clear any animation</span></div><div class=\"line\">    <span class=\"comment\">// listener set on the view.</span></div><div class=\"line\">    mContentView.animate()</div><div class=\"line\">            .alpha(<span class=\"number\">1f</span>)</div><div class=\"line\">            .setDuration(mShortAnimationDuration)</div><div class=\"line\">            .setListener(<span class=\"keyword\">null</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Animate the loading view to 0% opacity. After the animation ends,</span></div><div class=\"line\">    <span class=\"comment\">// set its visibility to GONE as an optimization step (it won't</span></div><div class=\"line\">    <span class=\"comment\">// participate in layout passes, etc.)</span></div><div class=\"line\">    mLoadingView.animate()</div><div class=\"line\">            .alpha(<span class=\"number\">0f</span>)</div><div class=\"line\">            .setDuration(mShortAnimationDuration)</div><div class=\"line\">            .setListener(<span class=\"keyword\">new</span> AnimatorListenerAdapter() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationEnd</span><span class=\"params\">(Animator animation)</span> </span>&#123;</div><div class=\"line\">                    mLoadingView.setVisibility(View.GONE);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"2、使用Viewpager实现屏幕滑动\"><a href=\"#2、使用Viewpager实现屏幕滑动\" class=\"headerlink\" title=\"2、使用Viewpager实现屏幕滑动\"></a>2、使用Viewpager实现屏幕滑动</h4><p>类似View的淡入淡出切换，而屏幕的切换是整个的界面转换，使用<code>supports library</code>的ViewPager来实现。<br><a href=\"http://hukai.me/android-training-course-in-chinese/animations/anim_screenslide.mp4\">ViewPager</a></p>\n<ul>\n<li><h5 id=\"创建View-1\"><a href=\"#创建View-1\" class=\"headerlink\" title=\"创建View\"></a>创建View</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- fragment_screen_slide_page.xml --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ScrollView</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/content\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span> &gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span> <span class=\"attr\">style</span>=<span class=\"string\">\"?android:textAppearanceMedium\"</span></span></div><div class=\"line\">        <span class=\"attr\">android:padding</span>=<span class=\"string\">\"16dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:lineSpacingMultiplier</span>=<span class=\"string\">\"1.2\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/lorem_ipsum\"</span> /&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ScrollView</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>如上定义一个fragment和text view</p>\n<ul>\n<li><h5 id=\"创建Fragment\"><a href=\"#创建Fragment\" class=\"headerlink\" title=\"创建Fragment\"></a>创建Fragment</h5><p>创建一个Fragment对象实例来展示view布局。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.app.Fragment;</div><div class=\"line\">...</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScreenSlidePageFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, ViewGroup container,</span></span></div><div class=\"line\">            Bundle savedInstanceState) &#123;</div><div class=\"line\">        ViewGroup rootView = (ViewGroup) inflater.inflate(</div><div class=\"line\">                R.layout.fragment_screen_slide_page, container, <span class=\"keyword\">false</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> rootView;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"添加viewPager\"><a href=\"#添加viewPager\" class=\"headerlink\" title=\"添加viewPager\"></a>添加viewPager</h5><p>ViewPager有内建的滑动手势，配合PagerAdapter来适配数据。需要创建一个包含ViewPager的布局</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- activity_screen_slide.xml --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.v4.view.ViewPager</span></span></div><div class=\"line\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/pager\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span> /&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>接下来就是创建一个Activity来关联布局，实现逻辑：</p>\n<ol>\n<li>content View中包含上述布局文件</li>\n<li>创建<code>FragmentStatePagerAdapter</code>的子类，实现<code>getItem()</code>方法，把ScreenSlidePageFragment实例作为新页面补充进来。<br>PagerAdapter还需要实现getCount()方法，它返回 Adapter将要创建页面的总数（例如5个）。</li>\n<li>关联<code>ViewPager</code>和<code>PagerAdapter</code></li>\n<li>处理Back按钮，按下变为在虚拟的Fragment栈中回退。如果用户已经在第一个页面了，<br>则在Activity的回退栈（back stack）中回退。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.app.Fragment;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.app.FragmentManager;</div><div class=\"line\">...</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScreenSlidePagerActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">FragmentActivity</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//屏幕页面数目</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> NUM_PAGES = <span class=\"number\">5</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//View Pager对象，用于处理页面切换的容器</span></div><div class=\"line\">    <span class=\"keyword\">private</span> ViewPager mPager;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//页面数据适配器</span></div><div class=\"line\">    <span class=\"keyword\">private</span> PagerAdapter mPagerAdapter;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_screen_slide);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 初始化数据</span></div><div class=\"line\">        mPager = (ViewPager) findViewById(R.id.pager);</div><div class=\"line\">        mPagerAdapter = <span class=\"keyword\">new</span> ScreenSlidePagerAdapter(getSupportFragmentManager());</div><div class=\"line\">        mPager.setAdapter(mPagerAdapter);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//处理返回按钮的点击事件</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onBackPressed</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mPager.getCurrentItem() == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">//要是第一个页面，返回按钮就是退出</span></div><div class=\"line\">            <span class=\"keyword\">super</span>.onBackPressed();</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">//不是第一个页面，返回按钮就是返回上一个页面</span></div><div class=\"line\">            mPager.setCurrentItem(mPager.getCurrentItem() - <span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//简单的适配器，用于加入几个页面</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScreenSlidePagerAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">FragmentStatePagerAdapter</span> </span>&#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ScreenSlidePagerAdapter</span><span class=\"params\">(FragmentManager fm)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(fm);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Fragment <span class=\"title\">getItem</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ScreenSlidePageFragment();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getCount</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> NUM_PAGES;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>ViewPager包含有默认的滑屏动画，若要自定义切换动画需要实现<code>viewpager.transformer</code>接口，并补充道Viewpager中<br>，实现其方法<code>transformPage()</code>。该方法会在显示页面滑动时，于其相邻的两个页面间调用。重要的参数就是当前页面<br>的位置position，可以根据页面位置来设置不同的动画效果。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ViewPager mPager = (ViewPager) findViewById(R.id.pager);</div><div class=\"line\">...</div><div class=\"line\">mPager.setPagerTransformer(<span class=\"keyword\">true</span>,<span class=\"keyword\">new</span> ZoomOutPagerTransformer());</div></pre></td></tr></table></figure></p>\n<ul>\n<li><h5 id=\"ZoomOutPagerTransformer\"><a href=\"#ZoomOutPagerTransformer\" class=\"headerlink\" title=\"ZoomOutPagerTransformer\"></a>ZoomOutPagerTransformer</h5><p>效果是逐渐褪色的淡出模式<a href=\"http://hukai.me/android-training-course-in-chinese/animations/anim_page_transformer_zoomout.mp4\">演示</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ZoomOutPageTransformer</span> <span class=\"keyword\">implements</span> <span class=\"title\">ViewPager</span>.<span class=\"title\">PageTransformer</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> MIN_SCALE = <span class=\"number\">0.85f</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> MIN_ALPHA = <span class=\"number\">0.5f</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">transformPage</span><span class=\"params\">(View view, <span class=\"keyword\">float</span> position)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> pageWidth = view.getWidth();</div><div class=\"line\">        <span class=\"keyword\">int</span> pageHeight = view.getHeight();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (position &lt; -<span class=\"number\">1</span>) &#123; <span class=\"comment\">// [-Infinity,-1)</span></div><div class=\"line\">            <span class=\"comment\">// This page is way off-screen to the left.</span></div><div class=\"line\">            view.setAlpha(<span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (position &lt;= <span class=\"number\">1</span>) &#123; <span class=\"comment\">// [-1,1]</span></div><div class=\"line\">            <span class=\"comment\">// Modify the default slide transition to shrink the page as well</span></div><div class=\"line\">            <span class=\"keyword\">float</span> scaleFactor = Math.max(MIN_SCALE, <span class=\"number\">1</span> - Math.abs(position));</div><div class=\"line\">            <span class=\"keyword\">float</span> vertMargin = pageHeight * (<span class=\"number\">1</span> - scaleFactor) / <span class=\"number\">2</span>;</div><div class=\"line\">            <span class=\"keyword\">float</span> horzMargin = pageWidth * (<span class=\"number\">1</span> - scaleFactor) / <span class=\"number\">2</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (position &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                view.setTranslationX(horzMargin - vertMargin / <span class=\"number\">2</span>);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                view.setTranslationX(-horzMargin + vertMargin / <span class=\"number\">2</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// Scale the page down (between MIN_SCALE and 1)</span></div><div class=\"line\">            view.setScaleX(scaleFactor);</div><div class=\"line\">            view.setScaleY(scaleFactor);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// Fade the page relative to its size.</span></div><div class=\"line\">            view.setAlpha(MIN_ALPHA +</div><div class=\"line\">                    (scaleFactor - MIN_SCALE) /</div><div class=\"line\">                    (<span class=\"number\">1</span> - MIN_SCALE) * (<span class=\"number\">1</span> - MIN_ALPHA));</div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// (1,+Infinity]</span></div><div class=\"line\">            <span class=\"comment\">// This page is way off-screen to the right.</span></div><div class=\"line\">            view.setAlpha(<span class=\"number\">0</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"Depth-Pager-Transformer\"><a href=\"#Depth-Pager-Transformer\" class=\"headerlink\" title=\"Depth Pager Transformer\"></a>Depth Pager Transformer</h5><p>右滑动潜藏效果<a href=\"http://hukai.me/android-training-course-in-chinese/animations/anim_page_transformer_depth.mp4\">video</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DepthPageTransformer</span> <span class=\"keyword\">implements</span> <span class=\"title\">ViewPager</span>.<span class=\"title\">PageTransformer</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> MIN_SCALE = <span class=\"number\">0.75f</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">transformPage</span><span class=\"params\">(View view, <span class=\"keyword\">float</span> position)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> pageWidth = view.getWidth();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (position &lt; -<span class=\"number\">1</span>) &#123; <span class=\"comment\">// [-Infinity,-1)</span></div><div class=\"line\">            <span class=\"comment\">// This page is way off-screen to the left.</span></div><div class=\"line\">            view.setAlpha(<span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (position &lt;= <span class=\"number\">0</span>) &#123; <span class=\"comment\">// [-1,0]</span></div><div class=\"line\">            <span class=\"comment\">// Use the default slide transition when moving to the left page</span></div><div class=\"line\">            view.setAlpha(<span class=\"number\">1</span>);</div><div class=\"line\">            view.setTranslationX(<span class=\"number\">0</span>);</div><div class=\"line\">            view.setScaleX(<span class=\"number\">1</span>);</div><div class=\"line\">            view.setScaleY(<span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (position &lt;= <span class=\"number\">1</span>) &#123; <span class=\"comment\">// (0,1]</span></div><div class=\"line\">            <span class=\"comment\">// Fade the page out.</span></div><div class=\"line\">            view.setAlpha(<span class=\"number\">1</span> - position);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// Counteract the default slide transition</span></div><div class=\"line\">            view.setTranslationX(pageWidth * -position);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// Scale the page down (between MIN_SCALE and 1)</span></div><div class=\"line\">            <span class=\"keyword\">float</span> scaleFactor = MIN_SCALE</div><div class=\"line\">                    + (<span class=\"number\">1</span> - MIN_SCALE) * (<span class=\"number\">1</span> - Math.abs(position));</div><div class=\"line\">            view.setScaleX(scaleFactor);</div><div class=\"line\">            view.setScaleY(scaleFactor);</div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// (1,+Infinity]</span></div><div class=\"line\">            <span class=\"comment\">// This page is way off-screen to the right.</span></div><div class=\"line\">            view.setAlpha(<span class=\"number\">0</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"3、实现Card翻转动画\"><a href=\"#3、实现Card翻转动画\" class=\"headerlink\" title=\"3、实现Card翻转动画\"></a>3、实现Card翻转动画</h4><p>通过自定义Fragment实现Card翻转效果的view切换。<a href=\"http://hukai.me/android-training-course-in-chinese/animations/anim_card_flip.mp4\">card</a></p>\n<ul>\n<li><h5 id=\"创建Animator\"><a href=\"#创建Animator\" class=\"headerlink\" title=\"创建Animator\"></a>创建Animator</h5>创建Card翻转动画，我们需要两个Animator。一个让正面的card的右侧向左翻转渐出，一个让背面的Card向右翻转渐入。我们还需要两个 Animator让背面的card的右侧向左翻转渐入，一个让向右翻转渐入。</li>\n</ul>\n<p><strong>card_flip_left_in.xml</strong><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">set</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Before rotating, immediately set the alpha to 0. --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">objectAnimator</span></span></div><div class=\"line\">        <span class=\"attr\">android:valueFrom</span>=<span class=\"string\">\"1.0\"</span></div><div class=\"line\">        <span class=\"attr\">android:valueTo</span>=<span class=\"string\">\"0.0\"</span></div><div class=\"line\">        <span class=\"attr\">android:propertyName</span>=<span class=\"string\">\"alpha\"</span></div><div class=\"line\">        <span class=\"attr\">android:duration</span>=<span class=\"string\">\"0\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Rotate. --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">objectAnimator</span></span></div><div class=\"line\">        <span class=\"attr\">android:valueFrom</span>=<span class=\"string\">\"-180\"</span></div><div class=\"line\">        <span class=\"attr\">android:valueTo</span>=<span class=\"string\">\"0\"</span></div><div class=\"line\">        <span class=\"attr\">android:propertyName</span>=<span class=\"string\">\"rotationY\"</span></div><div class=\"line\">        <span class=\"attr\">android:interpolator</span>=<span class=\"string\">\"@android:interpolator/accelerate_decelerate\"</span></div><div class=\"line\">        <span class=\"attr\">android:duration</span>=<span class=\"string\">\"@integer/card_flip_time_full\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Half-way through the rotation (see startOffset), set the alpha to 1. --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">objectAnimator</span></span></div><div class=\"line\">        <span class=\"attr\">android:valueFrom</span>=<span class=\"string\">\"0.0\"</span></div><div class=\"line\">        <span class=\"attr\">android:valueTo</span>=<span class=\"string\">\"1.0\"</span></div><div class=\"line\">        <span class=\"attr\">android:propertyName</span>=<span class=\"string\">\"alpha\"</span></div><div class=\"line\">        <span class=\"attr\">android:startOffset</span>=<span class=\"string\">\"@integer/card_flip_time_half\"</span></div><div class=\"line\">        <span class=\"attr\">android:duration</span>=<span class=\"string\">\"1\"</span> /&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">set</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><strong>card_flip_left_out.xml</strong><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">set</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Rotate. --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">objectAnimator</span></span></div><div class=\"line\">        <span class=\"attr\">android:valueFrom</span>=<span class=\"string\">\"0\"</span></div><div class=\"line\">        <span class=\"attr\">android:valueTo</span>=<span class=\"string\">\"180\"</span></div><div class=\"line\">        <span class=\"attr\">android:propertyName</span>=<span class=\"string\">\"rotationY\"</span></div><div class=\"line\">        <span class=\"attr\">android:interpolator</span>=<span class=\"string\">\"@android:interpolator/accelerate_decelerate\"</span></div><div class=\"line\">        <span class=\"attr\">android:duration</span>=<span class=\"string\">\"@integer/card_flip_time_full\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Half-way through the rotation (see startOffset), set the alpha to 0. --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">objectAnimator</span></span></div><div class=\"line\">        <span class=\"attr\">android:valueFrom</span>=<span class=\"string\">\"1.0\"</span></div><div class=\"line\">        <span class=\"attr\">android:valueTo</span>=<span class=\"string\">\"0.0\"</span></div><div class=\"line\">        <span class=\"attr\">android:propertyName</span>=<span class=\"string\">\"alpha\"</span></div><div class=\"line\">        <span class=\"attr\">android:startOffset</span>=<span class=\"string\">\"@integer/card_flip_time_half\"</span></div><div class=\"line\">        <span class=\"attr\">android:duration</span>=<span class=\"string\">\"1\"</span> /&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">set</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><strong>card_flip_right_in.xml</strong><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">set</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Before rotating, immediately set the alpha to 0. --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">objectAnimator</span></span></div><div class=\"line\">        <span class=\"attr\">android:valueFrom</span>=<span class=\"string\">\"1.0\"</span></div><div class=\"line\">        <span class=\"attr\">android:valueTo</span>=<span class=\"string\">\"0.0\"</span></div><div class=\"line\">        <span class=\"attr\">android:propertyName</span>=<span class=\"string\">\"alpha\"</span></div><div class=\"line\">        <span class=\"attr\">android:duration</span>=<span class=\"string\">\"0\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Rotate. --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">objectAnimator</span></span></div><div class=\"line\">        <span class=\"attr\">android:valueFrom</span>=<span class=\"string\">\"180\"</span></div><div class=\"line\">        <span class=\"attr\">android:valueTo</span>=<span class=\"string\">\"0\"</span></div><div class=\"line\">        <span class=\"attr\">android:propertyName</span>=<span class=\"string\">\"rotationY\"</span></div><div class=\"line\">        <span class=\"attr\">android:interpolator</span>=<span class=\"string\">\"@android:interpolator/accelerate_decelerate\"</span></div><div class=\"line\">        <span class=\"attr\">android:duration</span>=<span class=\"string\">\"@integer/card_flip_time_full\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Half-way through the rotation (see startOffset), set the alpha to 1. --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">objectAnimator</span></span></div><div class=\"line\">        <span class=\"attr\">android:valueFrom</span>=<span class=\"string\">\"0.0\"</span></div><div class=\"line\">        <span class=\"attr\">android:valueTo</span>=<span class=\"string\">\"1.0\"</span></div><div class=\"line\">        <span class=\"attr\">android:propertyName</span>=<span class=\"string\">\"alpha\"</span></div><div class=\"line\">        <span class=\"attr\">android:startOffset</span>=<span class=\"string\">\"@integer/card_flip_time_half\"</span></div><div class=\"line\">        <span class=\"attr\">android:duration</span>=<span class=\"string\">\"1\"</span> /&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">set</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><strong>card_flip_right_out.xml</strong><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">set</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Rotate. --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">objectAnimator</span></span></div><div class=\"line\">        <span class=\"attr\">android:valueFrom</span>=<span class=\"string\">\"0\"</span></div><div class=\"line\">        <span class=\"attr\">android:valueTo</span>=<span class=\"string\">\"-180\"</span></div><div class=\"line\">        <span class=\"attr\">android:propertyName</span>=<span class=\"string\">\"rotationY\"</span></div><div class=\"line\">        <span class=\"attr\">android:interpolator</span>=<span class=\"string\">\"@android:interpolator/accelerate_decelerate\"</span></div><div class=\"line\">        <span class=\"attr\">android:duration</span>=<span class=\"string\">\"@integer/card_flip_time_full\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Half-way through the rotation (see startOffset), set the alpha to 0. --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">objectAnimator</span></span></div><div class=\"line\">        <span class=\"attr\">android:valueFrom</span>=<span class=\"string\">\"1.0\"</span></div><div class=\"line\">        <span class=\"attr\">android:valueTo</span>=<span class=\"string\">\"0.0\"</span></div><div class=\"line\">        <span class=\"attr\">android:propertyName</span>=<span class=\"string\">\"alpha\"</span></div><div class=\"line\">        <span class=\"attr\">android:startOffset</span>=<span class=\"string\">\"@integer/card_flip_time_half\"</span></div><div class=\"line\">        <span class=\"attr\">android:duration</span>=<span class=\"string\">\"1\"</span> /&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">set</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<ul>\n<li><h5 id=\"创建View-2\"><a href=\"#创建View-2\" class=\"headerlink\" title=\"创建View\"></a>创建View</h5>card的每个面都是一个布局，需要在Fragment中关联展示<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></div><div class=\"line\">    <span class=\"attr\">android:background</span>=<span class=\"string\">\"#a6c\"</span></div><div class=\"line\">    <span class=\"attr\">android:padding</span>=<span class=\"string\">\"16dp\"</span></div><div class=\"line\">    <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"bottom\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@android:id/text1\"</span></span></div><div class=\"line\">        <span class=\"attr\">style</span>=<span class=\"string\">\"?android:textAppearanceLarge\"</span></div><div class=\"line\">        <span class=\"attr\">android:textStyle</span>=<span class=\"string\">\"bold\"</span></div><div class=\"line\">        <span class=\"attr\">android:textColor</span>=<span class=\"string\">\"#fff\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/card_back_title\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span> <span class=\"attr\">style</span>=<span class=\"string\">\"?android:textAppearanceSmall\"</span></span></div><div class=\"line\">        <span class=\"attr\">android:textAllCaps</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">        <span class=\"attr\">android:textColor</span>=<span class=\"string\">\"#80ffffff\"</span></div><div class=\"line\">        <span class=\"attr\">android:textStyle</span>=<span class=\"string\">\"bold\"</span></div><div class=\"line\">        <span class=\"attr\">android:lineSpacingMultiplier</span>=<span class=\"string\">\"1.2\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/card_back_description\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>另一面：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ImageView</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:src</span>=<span class=\"string\">\"@drawable/image1\"</span></div><div class=\"line\">    <span class=\"attr\">android:scaleType</span>=<span class=\"string\">\"centerCrop\"</span></div><div class=\"line\">    <span class=\"attr\">android:contentDescription</span>=<span class=\"string\">\"@string/description_image_1\"</span> /&gt;</div></pre></td></tr></table></figure></p>\n<ul>\n<li><h5 id=\"创建Fragment-1\"><a href=\"#创建Fragment-1\" class=\"headerlink\" title=\"创建Fragment\"></a>创建Fragment</h5><p>Card的正反面都是Fragment，需要创建并关联布局</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CardFlipActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * A fragment representing the front of the card.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CardFrontFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, ViewGroup container,</span></span></div><div class=\"line\">                Bundle savedInstanceState) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> inflater.inflate(R.layout.fragment_card_front, container, <span class=\"keyword\">false</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * A fragment representing the back of the card.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CardBackFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, ViewGroup container,</span></span></div><div class=\"line\">                Bundle savedInstanceState) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> inflater.inflate(R.layout.fragment_card_back, container, <span class=\"keyword\">false</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"实现翻转Card动画\"><a href=\"#实现翻转Card动画\" class=\"headerlink\" title=\"实现翻转Card动画\"></a>实现翻转Card动画</h5><p>创建一个framelayout来用于activity展示fragment</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">FrameLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/container\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span> /&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>在Activity中实现展示<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CardFlipActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_activity_card_flip);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (savedInstanceState == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            getFragmentManager()</div><div class=\"line\">                    .beginTransaction()</div><div class=\"line\">                    .add(R.id.container, <span class=\"keyword\">new</span> CardFrontFragment())</div><div class=\"line\">                    .commit();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如上默认展示了card的正面，需要适时创建card的背面，并实现翻转。</p>\n<ol>\n<li><p>将Fragment转换设置我们刚做的自定义动画</p>\n</li>\n<li><p>用新Fragment替换当前显示的Fragment，并且应用之前创建的动画到该事件中。</p>\n</li>\n<li><p>添加之前显示的Fragment到Fragment的回退栈（back stack）中，所以当用户按下 Back 键时，Card会翻转回来。</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">flipCard</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mShowingBack) &#123;</div><div class=\"line\">        getFragmentManager().popBackStack();</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 是否正在翻转</span></div><div class=\"line\"></div><div class=\"line\">    mShowingBack = <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 创建并执行一个事务，新增fragment并应用自定义动画，且将fragment加入回退栈</span></div><div class=\"line\"></div><div class=\"line\">    getFragmentManager()</div><div class=\"line\">            .beginTransaction()</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 使用自定义动画</span></div><div class=\"line\">            .setCustomAnimations(</div><div class=\"line\">                    R.animator.card_flip_right_in, R.animator.card_flip_right_out,</div><div class=\"line\">                    R.animator.card_flip_left_in, R.animator.card_flip_left_out)</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 翻转的fragment</span></div><div class=\"line\">            .replace(R.id.container, <span class=\"keyword\">new</span> CardBackFragment())</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 新增事务到回退栈</span></div><div class=\"line\">            .addToBackStack(<span class=\"keyword\">null</span>)</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 提交事务</span></div><div class=\"line\">            .commit();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"4、View的缩放\"><a href=\"#4、View的缩放\" class=\"headerlink\" title=\"4、View的缩放\"></a>4、View的缩放</h4><p>View的动画缩放效果，常用语图片的浏览展示。<a href=\"http://hukai.me/android-training-course-in-chinese/animations/anim_zoom.mp4\">scale</a></p>\n<ul>\n<li><h5 id=\"创建View-3\"><a href=\"#创建View-3\" class=\"headerlink\" title=\"创建View\"></a>创建View</h5><p>示例创建了大小两个版本的文件，</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">FrameLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/container\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></div><div class=\"line\">        <span class=\"attr\">android:padding</span>=<span class=\"string\">\"16dp\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ImageButton</span></span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/thumb_button_1\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"100dp\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"75dp\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_marginRight</span>=<span class=\"string\">\"1dp\"</span></div><div class=\"line\">            <span class=\"attr\">android:src</span>=<span class=\"string\">\"@drawable/thumb1\"</span></div><div class=\"line\">            <span class=\"attr\">android:scaleType</span>=<span class=\"string\">\"centerCrop\"</span></div><div class=\"line\">            <span class=\"attr\">android:contentDescription</span>=<span class=\"string\">\"@string/description_image_1\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- This initially-hidden ImageView will hold the expanded/zoomed version of</span></div><div class=\"line\">         the images above. Without transformations applied, it takes up the entire</div><div class=\"line\">         screen. To achieve the \"zoom\" animation, this view's bounds are animated</div><div class=\"line\">         from the bounds of the thumbnail button above, to its final laid-out</div><div class=\"line\">         bounds.</div><div class=\"line\">         --&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ImageView</span></span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/expanded_image\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:visibility</span>=<span class=\"string\">\"invisible\"</span></div><div class=\"line\">        <span class=\"attr\">android:contentDescription</span>=<span class=\"string\">\"@string/description_zoom_touch_close\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">FrameLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"设置缩放动画\"><a href=\"#设置缩放动画\" class=\"headerlink\" title=\"设置缩放动画\"></a>设置缩放动画</h5><p>监听点击事件，实现缩放效果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ZoomActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">FragmentActivity</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Hold a reference to the current animator,</span></div><div class=\"line\">    <span class=\"comment\">// so that it can be canceled mid-way.</span></div><div class=\"line\">    <span class=\"keyword\">private</span> Animator mCurrentAnimator;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// The system \"short\" animation time duration, in milliseconds. This</span></div><div class=\"line\">    <span class=\"comment\">// duration is ideal for subtle animations or animations that occur</span></div><div class=\"line\">    <span class=\"comment\">// very frequently.</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mShortAnimationDuration;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_zoom);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Hook up clicks on the thumbnail views.</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> View thumb1View = findViewById(R.id.thumb_button_1);</div><div class=\"line\">        thumb1View.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">                zoomImageFromThumb(thumb1View, R.drawable.image1);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Retrieve and cache the system's default \"short\" animation time.</span></div><div class=\"line\">        mShortAnimationDuration = getResources().getInteger(</div><div class=\"line\">                android.R.integer.config_shortAnimTime);</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"缩放View\"><a href=\"#缩放View\" class=\"headerlink\" title=\"缩放View\"></a>缩放View</h5><p>缩放View的效果实现：</p>\n</li>\n</ul>\n<ol>\n<li>高清大图放在IamgeView中，用于放大后再显示。</li>\n<li>计算image View的边界。</li>\n<li>要同步改变四个边界，用<code>AnimatorSet</code></li>\n<li>缩小则是类似逆向如上操作。注意view的属性需要设置gone。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">zoomImageFromThumb</span><span class=\"params\">(<span class=\"keyword\">final</span> View thumbView, <span class=\"keyword\">int</span> imageResId)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// If there's an animation in progress, cancel it</span></div><div class=\"line\">    <span class=\"comment\">// immediately and proceed with this one.</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (mCurrentAnimator != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        mCurrentAnimator.cancel();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Load the high-resolution \"zoomed-in\" image.</span></div><div class=\"line\">    <span class=\"keyword\">final</span> ImageView expandedImageView = (ImageView) findViewById(</div><div class=\"line\">            R.id.expanded_image);</div><div class=\"line\">    expandedImageView.setImageResource(imageResId);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Calculate the starting and ending bounds for the zoomed-in image.</span></div><div class=\"line\">    <span class=\"comment\">// This step involves lots of math. Yay, math.</span></div><div class=\"line\">    <span class=\"keyword\">final</span> Rect startBounds = <span class=\"keyword\">new</span> Rect();</div><div class=\"line\">    <span class=\"keyword\">final</span> Rect finalBounds = <span class=\"keyword\">new</span> Rect();</div><div class=\"line\">    <span class=\"keyword\">final</span> Point globalOffset = <span class=\"keyword\">new</span> Point();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// The start bounds are the global visible rectangle of the thumbnail,</span></div><div class=\"line\">    <span class=\"comment\">// and the final bounds are the global visible rectangle of the container</span></div><div class=\"line\">    <span class=\"comment\">// view. Also set the container view's offset as the origin for the</span></div><div class=\"line\">    <span class=\"comment\">// bounds, since that's the origin for the positioning animation</span></div><div class=\"line\">    <span class=\"comment\">// properties (X, Y).</span></div><div class=\"line\">    thumbView.getGlobalVisibleRect(startBounds);</div><div class=\"line\">    findViewById(R.id.container)</div><div class=\"line\">            .getGlobalVisibleRect(finalBounds, globalOffset);</div><div class=\"line\">    startBounds.offset(-globalOffset.x, -globalOffset.y);</div><div class=\"line\">    finalBounds.offset(-globalOffset.x, -globalOffset.y);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Adjust the start bounds to be the same aspect ratio as the final</span></div><div class=\"line\">    <span class=\"comment\">// bounds using the \"center crop\" technique. This prevents undesirable</span></div><div class=\"line\">    <span class=\"comment\">// stretching during the animation. Also calculate the start scaling</span></div><div class=\"line\">    <span class=\"comment\">// factor (the end scaling factor is always 1.0).</span></div><div class=\"line\">    <span class=\"keyword\">float</span> startScale;</div><div class=\"line\">    <span class=\"keyword\">if</span> ((<span class=\"keyword\">float</span>) finalBounds.width() / finalBounds.height()</div><div class=\"line\">            &gt; (<span class=\"keyword\">float</span>) startBounds.width() / startBounds.height()) &#123;</div><div class=\"line\">        <span class=\"comment\">// Extend start bounds horizontally</span></div><div class=\"line\">        startScale = (<span class=\"keyword\">float</span>) startBounds.height() / finalBounds.height();</div><div class=\"line\">        <span class=\"keyword\">float</span> startWidth = startScale * finalBounds.width();</div><div class=\"line\">        <span class=\"keyword\">float</span> deltaWidth = (startWidth - startBounds.width()) / <span class=\"number\">2</span>;</div><div class=\"line\">        startBounds.left -= deltaWidth;</div><div class=\"line\">        startBounds.right += deltaWidth;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// Extend start bounds vertically</span></div><div class=\"line\">        startScale = (<span class=\"keyword\">float</span>) startBounds.width() / finalBounds.width();</div><div class=\"line\">        <span class=\"keyword\">float</span> startHeight = startScale * finalBounds.height();</div><div class=\"line\">        <span class=\"keyword\">float</span> deltaHeight = (startHeight - startBounds.height()) / <span class=\"number\">2</span>;</div><div class=\"line\">        startBounds.top -= deltaHeight;</div><div class=\"line\">        startBounds.bottom += deltaHeight;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Hide the thumbnail and show the zoomed-in view. When the animation</span></div><div class=\"line\">    <span class=\"comment\">// begins, it will position the zoomed-in view in the place of the</span></div><div class=\"line\">    <span class=\"comment\">// thumbnail.</span></div><div class=\"line\">    thumbView.setAlpha(<span class=\"number\">0f</span>);</div><div class=\"line\">    expandedImageView.setVisibility(View.VISIBLE);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Set the pivot point for SCALE_X and SCALE_Y transformations</span></div><div class=\"line\">    <span class=\"comment\">// to the top-left corner of the zoomed-in view (the default</span></div><div class=\"line\">    <span class=\"comment\">// is the center of the view).</span></div><div class=\"line\">    expandedImageView.setPivotX(<span class=\"number\">0f</span>);</div><div class=\"line\">    expandedImageView.setPivotY(<span class=\"number\">0f</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Construct and run the parallel animation of the four translation and</span></div><div class=\"line\">    <span class=\"comment\">// scale properties (X, Y, SCALE_X, and SCALE_Y).</span></div><div class=\"line\">    AnimatorSet set = <span class=\"keyword\">new</span> AnimatorSet();</div><div class=\"line\">    set</div><div class=\"line\">            .play(ObjectAnimator.ofFloat(expandedImageView, View.X,</div><div class=\"line\">                    startBounds.left, finalBounds.left))</div><div class=\"line\">            .with(ObjectAnimator.ofFloat(expandedImageView, View.Y,</div><div class=\"line\">                    startBounds.top, finalBounds.top))</div><div class=\"line\">            .with(ObjectAnimator.ofFloat(expandedImageView, View.SCALE_X,</div><div class=\"line\">            startScale, <span class=\"number\">1f</span>)).with(ObjectAnimator.ofFloat(expandedImageView,</div><div class=\"line\">                    View.SCALE_Y, startScale, <span class=\"number\">1f</span>));</div><div class=\"line\">    set.setDuration(mShortAnimationDuration);</div><div class=\"line\">    set.setInterpolator(<span class=\"keyword\">new</span> DecelerateInterpolator());</div><div class=\"line\">    set.addListener(<span class=\"keyword\">new</span> AnimatorListenerAdapter() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationEnd</span><span class=\"params\">(Animator animation)</span> </span>&#123;</div><div class=\"line\">            mCurrentAnimator = <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationCancel</span><span class=\"params\">(Animator animation)</span> </span>&#123;</div><div class=\"line\">            mCurrentAnimator = <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    set.start();</div><div class=\"line\">    mCurrentAnimator = set;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Upon clicking the zoomed-in image, it should zoom back down</span></div><div class=\"line\">    <span class=\"comment\">// to the original bounds and show the thumbnail instead of</span></div><div class=\"line\">    <span class=\"comment\">// the expanded image.</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> startScaleFinal = startScale;</div><div class=\"line\">    expandedImageView.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (mCurrentAnimator != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                mCurrentAnimator.cancel();</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// Animate the four positioning/sizing properties in parallel,</span></div><div class=\"line\">            <span class=\"comment\">// back to their original values.</span></div><div class=\"line\">            AnimatorSet set = <span class=\"keyword\">new</span> AnimatorSet();</div><div class=\"line\">            set.play(ObjectAnimator</div><div class=\"line\">                        .ofFloat(expandedImageView, View.X, startBounds.left))</div><div class=\"line\">                        .with(ObjectAnimator</div><div class=\"line\">                                .ofFloat(expandedImageView,</div><div class=\"line\">                                        View.Y,startBounds.top))</div><div class=\"line\">                        .with(ObjectAnimator</div><div class=\"line\">                                .ofFloat(expandedImageView,</div><div class=\"line\">                                        View.SCALE_X, startScaleFinal))</div><div class=\"line\">                        .with(ObjectAnimator</div><div class=\"line\">                                .ofFloat(expandedImageView,</div><div class=\"line\">                                        View.SCALE_Y, startScaleFinal));</div><div class=\"line\">            set.setDuration(mShortAnimationDuration);</div><div class=\"line\">            set.setInterpolator(<span class=\"keyword\">new</span> DecelerateInterpolator());</div><div class=\"line\">            set.addListener(<span class=\"keyword\">new</span> AnimatorListenerAdapter() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationEnd</span><span class=\"params\">(Animator animation)</span> </span>&#123;</div><div class=\"line\">                    thumbView.setAlpha(<span class=\"number\">1f</span>);</div><div class=\"line\">                    expandedImageView.setVisibility(View.GONE);</div><div class=\"line\">                    mCurrentAnimator = <span class=\"keyword\">null</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationCancel</span><span class=\"params\">(Animator animation)</span> </span>&#123;</div><div class=\"line\">                    thumbView.setAlpha(<span class=\"number\">1f</span>);</div><div class=\"line\">                    expandedImageView.setVisibility(View.GONE);</div><div class=\"line\">                    mCurrentAnimator = <span class=\"keyword\">null</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">            set.start();</div><div class=\"line\">            mCurrentAnimator = set;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"5、布局动画\"><a href=\"#5、布局动画\" class=\"headerlink\" title=\"5、布局动画\"></a>5、布局动画</h4><p>布局动画是一种预加载动画，可以通过创建Layout Transition ，setLayoutTransition（）实现。<br><a href=\"http://hukai.me/android-training-course-in-chinese/animations/anim_layout_changes.mp4\">layout</a></p>\n<ul>\n<li><h5 id=\"创建布局\"><a href=\"#创建布局\" class=\"headerlink\" title=\"创建布局\"></a>创建布局</h5><p>为想开启动画的布局设置<code>android:animateLayoutChanges</code>属性为<code>true</code>。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/container\"</span></span></div><div class=\"line\">    <span class=\"attr\">android:animateLayoutChanges</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">    <span class=\"attr\">...</span></div><div class=\"line\">/&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"从布局中增删项目\"><a href=\"#从布局中增删项目\" class=\"headerlink\" title=\"从布局中增删项目\"></a>从布局中增删项目</h5><p>代码中动态修改布局项目，实现动画</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> ViewGroup mContainerView;</div><div class=\"line\">...</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">addItem</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    View newView;</div><div class=\"line\">    ...</div><div class=\"line\">    mContainerView.addView(newView, <span class=\"number\">0</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></li>\n</ul>\n"}],"PostAsset":[{"_id":"source/_posts/windows系统安装/安装完成.png","slug":"安装完成.png","post":"cj1ndxcdr002n88ow8xxn4lsq","modified":0,"renderable":0},{"_id":"source/_posts/windows系统安装/选择分区.png","slug":"选择分区.png","post":"cj1ndxcdr002n88ow8xxn4lsq","modified":0,"renderable":0},{"_id":"source/_posts/Android 通用流行框架简介/Android通用流行框架.png","slug":"Android通用流行框架.png","post":"cj1ndxcbl000188owv9tltkds","modified":0,"renderable":0},{"_id":"source/_posts/Android动态服务SPI的实现/spi.png","slug":"spi.png","post":"cj1ndxccf000h88owkmmjjcoq","modified":0,"renderable":0},{"_id":"source/_posts/第一篇、Android入门基础/basic-lifecycle.png","slug":"basic-lifecycle.png","post":"cj1ndxcdz003988ow87zbjnjx","modified":0,"renderable":0},{"_id":"source/_posts/局域网文件与打印共享/net.png","slug":"net.png","post":"cj1ndxce7003t88owfn9818s4","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio使用CMake编译jni的C-C++文件/config.jpg","slug":"config.jpg","post":"cj1ndxcbs000388ow4pi1semb","modified":0,"renderable":0},{"_id":"source/_posts/AndroidStudio使用CMake编译jni的C-C++文件/create.jpg","slug":"create.jpg","post":"cj1ndxcbs000388ow4pi1semb","modified":0,"renderable":0},{"_id":"source/_posts/Centos网络设置/p1.png","slug":"p1.png","post":"cj1ndxccm000s88owpd8ziith","modified":0,"renderable":0},{"_id":"source/_posts/Centos网络设置/p2.jpg","slug":"p2.jpg","post":"cj1ndxccm000s88owpd8ziith","modified":0,"renderable":0},{"_id":"source/_posts/Github上fork同步/clone.png","slug":"clone.png","post":"cj1ndxcd4001m88owfck3n4rn","modified":0,"renderable":0},{"_id":"source/_posts/Github上fork同步/update.png","slug":"update.png","post":"cj1ndxcd4001m88owfck3n4rn","modified":0,"renderable":0},{"_id":"source/_posts/windowsPE系统制作/pe.png","slug":"pe.png","post":"cj1ndxcds002r88owes6r5839","modified":0,"renderable":0},{"_id":"source/_posts/windowsPE系统制作/upan.png","slug":"upan.png","post":"cj1ndxcds002r88owes6r5839","modified":0,"renderable":0},{"_id":"source/_posts/windowsPE系统制作/view.png","slug":"view.png","post":"cj1ndxcds002r88owes6r5839","modified":0,"renderable":0},{"_id":"source/_posts/windowsPE系统制作/zhizuo.png","slug":"zhizuo.png","post":"cj1ndxcds002r88owes6r5839","modified":0,"renderable":0},{"_id":"source/_posts/windowsPE系统制作/zhizuo2.png","slug":"zhizuo2.png","post":"cj1ndxcds002r88owes6r5839","modified":0,"renderable":0},{"_id":"source/_posts/windows系统安装/msdn.png","slug":"msdn.png","post":"cj1ndxcdr002n88ow8xxn4lsq","modified":0,"renderable":0},{"_id":"source/_posts/windows系统安装/onekey.png","slug":"onekey.png","post":"cj1ndxcdr002n88ow8xxn4lsq","modified":0,"renderable":0},{"_id":"source/_posts/windows系统安装/pe.png","slug":"pe.png","post":"cj1ndxcdr002n88ow8xxn4lsq","modified":0,"renderable":0},{"_id":"source/_posts/windows系统安装/ultralISO.png","slug":"ultralISO.png","post":"cj1ndxcdr002n88ow8xxn4lsq","modified":0,"renderable":0},{"_id":"source/_posts/windows系统安装/写入.png","slug":"写入.png","post":"cj1ndxcdr002n88ow8xxn4lsq","modified":0,"renderable":0},{"_id":"source/_posts/windows系统安装/刻录.png","slug":"刻录.png","post":"cj1ndxcdr002n88ow8xxn4lsq","modified":0,"renderable":0},{"_id":"source/_posts/windows系统安装/安装.png","slug":"安装.png","post":"cj1ndxcdr002n88ow8xxn4lsq","modified":0,"renderable":0},{"_id":"source/_posts/windows系统安装/安装语言.png","slug":"安装语言.png","post":"cj1ndxcdr002n88ow8xxn4lsq","modified":0,"renderable":0},{"_id":"source/_posts/windows系统安装/引导.png","slug":"引导.png","post":"cj1ndxcdr002n88ow8xxn4lsq","modified":0,"renderable":0},{"_id":"source/_posts/windows系统安装/校验.png","slug":"校验.png","post":"cj1ndxcdr002n88ow8xxn4lsq","modified":0,"renderable":0},{"_id":"source/_posts/windows系统安装/镜像.png","slug":"镜像.png","post":"cj1ndxcdr002n88ow8xxn4lsq","modified":0,"renderable":0},{"_id":"source/_posts/windows系统安装/镜像2.png","slug":"镜像2.png","post":"cj1ndxcdr002n88ow8xxn4lsq","modified":0,"renderable":0},{"_id":"source/_posts/第四篇、Android图像与动画/ccw-square.png","slug":"ccw-square.png","post":"cj1ndxcfg006488ow6duzijel","modified":0,"renderable":0},{"_id":"source/_posts/第四篇、Android图像与动画/ogl-triangle-projected.png","slug":"ogl-triangle-projected.png","post":"cj1ndxcfg006488ow6duzijel","modified":0,"renderable":0},{"_id":"source/_posts/第四篇、Android图像与动画/ogl-triangle-touch.png","slug":"ogl-triangle-touch.png","post":"cj1ndxcfg006488ow6duzijel","modified":0,"renderable":0},{"_id":"source/_posts/第四篇、Android图像与动画/ogl-triangle.png","slug":"ogl-triangle.png","post":"cj1ndxcfg006488ow6duzijel","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cj1ndxcc4000988owlisn97r2","category_id":"cj1ndxcbx000588ow1adzii6d","_id":"cj1ndxccf000f88owunaadahr"},{"post_id":"cj1ndxcbl000188owv9tltkds","category_id":"cj1ndxcbx000588ow1adzii6d","_id":"cj1ndxcci000k88owf437z35t"},{"post_id":"cj1ndxcc8000a88ownc06z0r0","category_id":"cj1ndxcbx000588ow1adzii6d","_id":"cj1ndxccj000n88owtms67bpc"},{"post_id":"cj1ndxcce000e88owvixugmzw","category_id":"cj1ndxcbx000588ow1adzii6d","_id":"cj1ndxccm000r88owcvm4z83o"},{"post_id":"cj1ndxcbs000388ow4pi1semb","category_id":"cj1ndxcca000b88ow1hon3loy","_id":"cj1ndxccn000u88ow1fg6gdrm"},{"post_id":"cj1ndxccf000h88owkmmjjcoq","category_id":"cj1ndxcbx000588ow1adzii6d","_id":"cj1ndxcco000x88owjfd8cpc9"},{"post_id":"cj1ndxcci000l88owlbg8pxz2","category_id":"cj1ndxcca000b88ow1hon3loy","_id":"cj1ndxccr001088ow9gtelsma"},{"post_id":"cj1ndxcc0000788owtcuto0gx","category_id":"cj1ndxcbx000588ow1adzii6d","_id":"cj1ndxcct001388ow6522yoyv"},{"post_id":"cj1ndxccj000o88owa1oeeq2y","category_id":"cj1ndxcbx000588ow1adzii6d","_id":"cj1ndxccv001688owjrid406k"},{"post_id":"cj1ndxccn000v88ow0usxvyef","category_id":"cj1ndxcca000b88ow1hon3loy","_id":"cj1ndxccx001988owbgrfala5"},{"post_id":"cj1ndxcco000z88owvsrpjbmh","category_id":"cj1ndxcca000b88ow1hon3loy","_id":"cj1ndxcd0001d88owfsdbx9ah"},{"post_id":"cj1ndxccr001188owlvzsw623","category_id":"cj1ndxcca000b88ow1hon3loy","_id":"cj1ndxcd2001h88owg9ha8xrf"},{"post_id":"cj1ndxccm000s88owpd8ziith","category_id":"cj1ndxcco000w88owwo5ktt9i","_id":"cj1ndxcd4001l88owethdo7on"},{"post_id":"cj1ndxcct001488ow6hxb3jo7","category_id":"cj1ndxcca000b88ow1hon3loy","_id":"cj1ndxcd7001n88owcr7yb8jw"},{"post_id":"cj1ndxccv001888owszj4x85m","category_id":"cj1ndxcca000b88ow1hon3loy","_id":"cj1ndxcd8001r88owrhngf71l"},{"post_id":"cj1ndxcd0001f88owt8k83hak","category_id":"cj1ndxcco000w88owwo5ktt9i","_id":"cj1ndxcda001u88owbvexyu7f"},{"post_id":"cj1ndxcd4001m88owfck3n4rn","category_id":"cj1ndxcca000b88ow1hon3loy","_id":"cj1ndxcdd001x88owfujcjyaf"},{"post_id":"cj1ndxccy001b88owun7clppr","category_id":"cj1ndxcd2001g88owol87gczf","_id":"cj1ndxcdg002188owefibgl2p"},{"post_id":"cj1ndxcd7001o88owgqe4nri8","category_id":"cj1ndxcbx000588ow1adzii6d","_id":"cj1ndxcdi002488owhtolqlmy"},{"post_id":"cj1ndxcd8001s88owuvarh676","category_id":"cj1ndxcco000w88owwo5ktt9i","_id":"cj1ndxcdk002888ow02z7ukr0"},{"post_id":"cj1ndxcd2001j88owwsine4gw","category_id":"cj1ndxcd8001p88ow0fyt80nj","_id":"cj1ndxcdl002b88ow257ynicn"},{"post_id":"cj1ndxcdc001v88owk0d7fwvt","category_id":"cj1ndxcca000b88ow1hon3loy","_id":"cj1ndxcdn002e88ow78i3271q"},{"post_id":"cj1ndxcde001z88owree16e6c","category_id":"cj1ndxcco000w88owwo5ktt9i","_id":"cj1ndxcdp002g88owizcqb1hl"},{"post_id":"cj1ndxcdh002288owtop7skud","category_id":"cj1ndxcco000w88owwo5ktt9i","_id":"cj1ndxcdq002k88owgjkw7br6"},{"post_id":"cj1ndxcdj002688owg4swe95f","category_id":"cj1ndxcbx000588ow1adzii6d","_id":"cj1ndxcdr002m88owckqcgoa5"},{"post_id":"cj1ndxcdk002988ow2azctp3t","category_id":"cj1ndxcca000b88ow1hon3loy","_id":"cj1ndxcds002q88owc0shuz7g"},{"post_id":"cj1ndxcdl002d88ow2kbwpb2z","category_id":"cj1ndxcca000b88ow1hon3loy","_id":"cj1ndxcdt002u88owf97nis7u"},{"post_id":"cj1ndxcdq002l88owghhf4plj","category_id":"cj1ndxcco000w88owwo5ktt9i","_id":"cj1ndxcdu002y88owssorn13u"},{"post_id":"cj1ndxcdn002f88owksuczia2","category_id":"cj1ndxcdq002j88owogg718tw","_id":"cj1ndxcdw003188ow1u2jxucu"},{"post_id":"cj1ndxcdv002z88owllmlpuu5","category_id":"cj1ndxcbx000588ow1adzii6d","_id":"cj1ndxcdz003788owl5kgx0fb"},{"post_id":"cj1ndxcdr002n88ow8xxn4lsq","category_id":"cj1ndxcdt002s88owlzd9235t","_id":"cj1ndxce0003c88owrr3l96ai"},{"post_id":"cj1ndxcdy003688owgkjfjlty","category_id":"cj1ndxcbx000588ow1adzii6d","_id":"cj1ndxce1003f88ownpiz7zk2"},{"post_id":"cj1ndxcds002r88owes6r5839","category_id":"cj1ndxcdt002s88owlzd9235t","_id":"cj1ndxce3003k88owtgojt8eu"},{"post_id":"cj1ndxcdz003988ow87zbjnjx","category_id":"cj1ndxcbx000588ow1adzii6d","_id":"cj1ndxce4003n88owe35b3t9j"},{"post_id":"cj1ndxcdt002v88ow1au3olgl","category_id":"cj1ndxce0003a88owvukrtg7h","_id":"cj1ndxce6003r88ow4c5erfmf"},{"post_id":"cj1ndxce2003g88owh3mgfod1","category_id":"cj1ndxcbx000588ow1adzii6d","_id":"cj1ndxce8003v88owvdxeu52m"},{"post_id":"cj1ndxce3003l88owb46efqaa","category_id":"cj1ndxcbx000588ow1adzii6d","_id":"cj1ndxce9003z88owjfor4be5"},{"post_id":"cj1ndxcdw003288ow0z31pani","category_id":"cj1ndxce2003h88oww8tfyg3n","_id":"cj1ndxcea004288owvtbq6rct"},{"post_id":"cj1ndxce7003t88owfn9818s4","category_id":"cj1ndxcd8001p88ow0fyt80nj","_id":"cj1ndxcea004488owq6obb7rd"},{"post_id":"cj1ndxce1003d88owkt9mxzqm","category_id":"cj1ndxce2003h88oww8tfyg3n","_id":"cj1ndxceb004788ow0wnq358u"},{"post_id":"cj1ndxce8003w88owestervb1","category_id":"cj1ndxcbx000588ow1adzii6d","_id":"cj1ndxceb004988owj5j4mx8w"},{"post_id":"cj1ndxce5003o88owf1rz2cew","category_id":"cj1ndxce9003y88owxkhpi2ks","_id":"cj1ndxcec004c88owfvya1i2i"},{"post_id":"cj1ndxcfd006388owb3gqsbpj","category_id":"cj1ndxcco000w88owwo5ktt9i","_id":"cj1ndxcfk006688owql3cdx9g"},{"post_id":"cj1ndxcfg006488ow6duzijel","category_id":"cj1ndxcbx000588ow1adzii6d","_id":"cj1ndxcfs006888ow5gd2lg70"}],"PostTag":[{"post_id":"cj1ndxcc4000988owlisn97r2","tag_id":"cj1ndxcbz000688ow7t20jiq4","_id":"cj1ndxccd000d88ow8cb6zlsl"},{"post_id":"cj1ndxcc8000a88ownc06z0r0","tag_id":"cj1ndxcbz000688ow7t20jiq4","_id":"cj1ndxccf000g88owr564zmlm"},{"post_id":"cj1ndxcbl000188owv9tltkds","tag_id":"cj1ndxcbz000688ow7t20jiq4","_id":"cj1ndxccj000m88ow2ktfw2rn"},{"post_id":"cj1ndxcbl000188owv9tltkds","tag_id":"cj1ndxccb000c88ow2cjhsvma","_id":"cj1ndxcck000p88owgp3ewjhr"},{"post_id":"cj1ndxccj000o88owa1oeeq2y","tag_id":"cj1ndxcbz000688ow7t20jiq4","_id":"cj1ndxccn000t88owfhtwvlae"},{"post_id":"cj1ndxcco000z88owvsrpjbmh","tag_id":"cj1ndxccg000j88ow7sczwbmj","_id":"cj1ndxcct001288owk1p8l7jq"},{"post_id":"cj1ndxcbs000388ow4pi1semb","tag_id":"cj1ndxccg000j88ow7sczwbmj","_id":"cj1ndxccv001788owyrzowk89"},{"post_id":"cj1ndxcbs000388ow4pi1semb","tag_id":"cj1ndxccm000q88owj1lwrkrp","_id":"cj1ndxccy001a88ow63san7h4"},{"post_id":"cj1ndxcbs000388ow4pi1semb","tag_id":"cj1ndxcco000y88ow8thua5l3","_id":"cj1ndxcd0001e88owflyu6fge"},{"post_id":"cj1ndxcc0000788owtcuto0gx","tag_id":"cj1ndxcbz000688ow7t20jiq4","_id":"cj1ndxcd2001i88ow1uce51bt"},{"post_id":"cj1ndxcce000e88owvixugmzw","tag_id":"cj1ndxccy001c88ow9xvj2iuh","_id":"cj1ndxcda001t88owh5lvhb2r"},{"post_id":"cj1ndxcce000e88owvixugmzw","tag_id":"cj1ndxcbz000688ow7t20jiq4","_id":"cj1ndxcdd001w88ow2ndnyt8h"},{"post_id":"cj1ndxcce000e88owvixugmzw","tag_id":"cj1ndxcd3001k88owrsb38bgd","_id":"cj1ndxcdg002088ow9nnai6pl"},{"post_id":"cj1ndxccf000h88owkmmjjcoq","tag_id":"cj1ndxcbz000688ow7t20jiq4","_id":"cj1ndxcdh002388owr51cifdk"},{"post_id":"cj1ndxccf000h88owkmmjjcoq","tag_id":"cj1ndxcd8001q88owh1ajnlvy","_id":"cj1ndxcdj002788owuvzx1wwn"},{"post_id":"cj1ndxcci000l88owlbg8pxz2","tag_id":"cj1ndxccm000q88owj1lwrkrp","_id":"cj1ndxcdk002a88owanq9esdi"},{"post_id":"cj1ndxcdq002l88owghhf4plj","tag_id":"cj1ndxccy001c88ow9xvj2iuh","_id":"cj1ndxcds002p88owfbps6e1b"},{"post_id":"cj1ndxccm000s88owpd8ziith","tag_id":"cj1ndxccy001c88ow9xvj2iuh","_id":"cj1ndxcdt002t88owzfjjgv91"},{"post_id":"cj1ndxccm000s88owpd8ziith","tag_id":"cj1ndxcdl002c88owrttbko2u","_id":"cj1ndxcdu002x88owi0tkam6j"},{"post_id":"cj1ndxccm000s88owpd8ziith","tag_id":"cj1ndxcdq002i88ow9a25mtzp","_id":"cj1ndxcdw003088owcbeay0ue"},{"post_id":"cj1ndxccn000v88ow0usxvyef","tag_id":"cj1ndxcds002o88owe7uiermz","_id":"cj1ndxcdy003588ownzyfkfqv"},{"post_id":"cj1ndxccr001188owlvzsw623","tag_id":"cj1ndxcds002o88owe7uiermz","_id":"cj1ndxcdz003888owmpt98rxb"},{"post_id":"cj1ndxcct001488ow6hxb3jo7","tag_id":"cj1ndxcds002o88owe7uiermz","_id":"cj1ndxce1003e88owv80l7egn"},{"post_id":"cj1ndxcdz003988ow87zbjnjx","tag_id":"cj1ndxcbz000688ow7t20jiq4","_id":"cj1ndxce3003i88owex5qmerq"},{"post_id":"cj1ndxccv001888owszj4x85m","tag_id":"cj1ndxcds002o88owe7uiermz","_id":"cj1ndxce4003m88owbzew3cey"},{"post_id":"cj1ndxce2003g88owh3mgfod1","tag_id":"cj1ndxcbz000688ow7t20jiq4","_id":"cj1ndxce6003p88owa2c19f8i"},{"post_id":"cj1ndxce3003l88owb46efqaa","tag_id":"cj1ndxcbz000688ow7t20jiq4","_id":"cj1ndxce8003u88owspbewsk1"},{"post_id":"cj1ndxccy001b88owun7clppr","tag_id":"cj1ndxce3003j88owp36w5ag5","_id":"cj1ndxce9003x88owmqq3zvi8"},{"post_id":"cj1ndxccy001b88owun7clppr","tag_id":"cj1ndxccb000c88ow2cjhsvma","_id":"cj1ndxcea004188owfq7u91pz"},{"post_id":"cj1ndxce8003w88owestervb1","tag_id":"cj1ndxcbz000688ow7t20jiq4","_id":"cj1ndxcea004388owag4bb668"},{"post_id":"cj1ndxce8003w88owestervb1","tag_id":"cj1ndxccb000c88ow2cjhsvma","_id":"cj1ndxceb004688owzm8nbhcr"},{"post_id":"cj1ndxcd0001f88owt8k83hak","tag_id":"cj1ndxccy001c88ow9xvj2iuh","_id":"cj1ndxceb004888owkcb7wy3i"},{"post_id":"cj1ndxcd0001f88owt8k83hak","tag_id":"cj1ndxce6003s88owtwuxa07b","_id":"cj1ndxceb004a88owokwp3cj3"},{"post_id":"cj1ndxcd2001j88owwsine4gw","tag_id":"cj1ndxcea004088owuhc9v8xv","_id":"cj1ndxcec004d88owj0jy94s8"},{"post_id":"cj1ndxcd2001j88owwsine4gw","tag_id":"cj1ndxceb004588owlfp09j3l","_id":"cj1ndxced004e88owiuck7836"},{"post_id":"cj1ndxcd4001m88owfck3n4rn","tag_id":"cj1ndxcec004b88owltdf7maj","_id":"cj1ndxcee004g88ow80u4qwy9"},{"post_id":"cj1ndxcd7001o88owgqe4nri8","tag_id":"cj1ndxccy001c88ow9xvj2iuh","_id":"cj1ndxcee004i88ow1oe41n2d"},{"post_id":"cj1ndxcd7001o88owgqe4nri8","tag_id":"cj1ndxcbz000688ow7t20jiq4","_id":"cj1ndxcee004j88ow2dibsqff"},{"post_id":"cj1ndxcd7001o88owgqe4nri8","tag_id":"cj1ndxced004f88owt6m7ehq5","_id":"cj1ndxcef004l88ow7a5ehtqa"},{"post_id":"cj1ndxcd8001s88owuvarh676","tag_id":"cj1ndxccy001c88ow9xvj2iuh","_id":"cj1ndxcef004m88owfx8h5cku"},{"post_id":"cj1ndxcd8001s88owuvarh676","tag_id":"cj1ndxcee004h88owx0er3ngs","_id":"cj1ndxcef004o88owymsq1eiv"},{"post_id":"cj1ndxcdc001v88owk0d7fwvt","tag_id":"cj1ndxcee004k88ow58tu1vw3","_id":"cj1ndxcef004p88owjga4l2wg"},{"post_id":"cj1ndxcde001z88owree16e6c","tag_id":"cj1ndxccy001c88ow9xvj2iuh","_id":"cj1ndxceg004r88owfxph6c8k"},{"post_id":"cj1ndxcde001z88owree16e6c","tag_id":"cj1ndxcef004n88owcdqww6do","_id":"cj1ndxceg004s88ow3nbcv02a"},{"post_id":"cj1ndxcdh002288owtop7skud","tag_id":"cj1ndxccy001c88ow9xvj2iuh","_id":"cj1ndxceh004u88ow65scnklo"},{"post_id":"cj1ndxcdh002288owtop7skud","tag_id":"cj1ndxcef004q88owj4emvtb8","_id":"cj1ndxcei004v88ow0h0ybg2r"},{"post_id":"cj1ndxcdj002688owg4swe95f","tag_id":"cj1ndxcbz000688ow7t20jiq4","_id":"cj1ndxcej004y88owtqo71fcm"},{"post_id":"cj1ndxcdj002688owg4swe95f","tag_id":"cj1ndxceg004t88ow7tbmr6rh","_id":"cj1ndxcej004z88ownqwastkw"},{"post_id":"cj1ndxcdj002688owg4swe95f","tag_id":"cj1ndxcei004w88owjy45nkag","_id":"cj1ndxcek005188ownp3vw49x"},{"post_id":"cj1ndxcdk002988ow2azctp3t","tag_id":"cj1ndxcee004k88ow58tu1vw3","_id":"cj1ndxcek005288owyt2o1pk7"},{"post_id":"cj1ndxcdl002d88ow2kbwpb2z","tag_id":"cj1ndxcej005088owl3axg3dl","_id":"cj1ndxcel005488owdin20ztk"},{"post_id":"cj1ndxcdn002f88owksuczia2","tag_id":"cj1ndxcek005388owr2ykdnnv","_id":"cj1ndxcel005788ow7abh3jx9"},{"post_id":"cj1ndxcdn002f88owksuczia2","tag_id":"cj1ndxcel005588own82r1c22","_id":"cj1ndxcel005888ow5r6urn44"},{"post_id":"cj1ndxcdr002n88ow8xxn4lsq","tag_id":"cj1ndxcel005688owlu9p9ilz","_id":"cj1ndxcem005a88owdy89qqqm"},{"post_id":"cj1ndxcds002r88owes6r5839","tag_id":"cj1ndxcel005688owlu9p9ilz","_id":"cj1ndxcen005c88owc07ywm6o"},{"post_id":"cj1ndxcdt002v88ow1au3olgl","tag_id":"cj1ndxcel005688owlu9p9ilz","_id":"cj1ndxcen005e88owra2xi0sv"},{"post_id":"cj1ndxcdt002v88ow1au3olgl","tag_id":"cj1ndxccy001c88ow9xvj2iuh","_id":"cj1ndxcen005f88ow3wubpiud"},{"post_id":"cj1ndxcdv002z88owllmlpuu5","tag_id":"cj1ndxcen005d88owyqbw8ggd","_id":"cj1ndxceo005h88ow38inekuu"},{"post_id":"cj1ndxcdv002z88owllmlpuu5","tag_id":"cj1ndxcbz000688ow7t20jiq4","_id":"cj1ndxceo005i88owk2mgl3av"},{"post_id":"cj1ndxcdw003288ow0z31pani","tag_id":"cj1ndxcen005g88owvux9iyim","_id":"cj1ndxcep005m88owquhoh3qu"},{"post_id":"cj1ndxcdw003288ow0z31pani","tag_id":"cj1ndxceo005j88owas4oephe","_id":"cj1ndxcep005n88owkwgt3ccm"},{"post_id":"cj1ndxcdw003288ow0z31pani","tag_id":"cj1ndxceo005k88owbktl5uky","_id":"cj1ndxcep005p88ow3z2s1aw9"},{"post_id":"cj1ndxcdy003688owgkjfjlty","tag_id":"cj1ndxcbz000688ow7t20jiq4","_id":"cj1ndxceq005q88owygmihilk"},{"post_id":"cj1ndxcdy003688owgkjfjlty","tag_id":"cj1ndxceg004t88ow7tbmr6rh","_id":"cj1ndxceq005s88owxsps4oei"},{"post_id":"cj1ndxce1003d88owkt9mxzqm","tag_id":"cj1ndxcep005o88owu5lsijoe","_id":"cj1ndxceq005u88ow6jwy8brg"},{"post_id":"cj1ndxce1003d88owkt9mxzqm","tag_id":"cj1ndxceq005r88owapg806wz","_id":"cj1ndxceq005v88owy4q4qw75"},{"post_id":"cj1ndxce5003o88owf1rz2cew","tag_id":"cj1ndxceq005t88owh38swxiq","_id":"cj1ndxcer005y88owvrkiyx4p"},{"post_id":"cj1ndxce5003o88owf1rz2cew","tag_id":"cj1ndxcer005w88ow327zncxx","_id":"cj1ndxcer005z88owdfk5n2q8"},{"post_id":"cj1ndxce7003t88owfn9818s4","tag_id":"cj1ndxcer005x88owdqwj7y8w","_id":"cj1ndxces006188owexaxyjox"},{"post_id":"cj1ndxce7003t88owfn9818s4","tag_id":"cj1ndxces006088ow97o4mjvw","_id":"cj1ndxces006288owc8hidcgc"},{"post_id":"cj1ndxcfd006388owb3gqsbpj","tag_id":"cj1ndxccy001c88ow9xvj2iuh","_id":"cj1ndxcfj006588owsx7qjwdj"},{"post_id":"cj1ndxcfg006488ow6duzijel","tag_id":"cj1ndxcbz000688ow7t20jiq4","_id":"cj1ndxcfk006788owfe5ycrxx"}],"Tag":[{"name":"Android","_id":"cj1ndxcbz000688ow7t20jiq4"},{"name":"框架","_id":"cj1ndxccb000c88ow2cjhsvma"},{"name":"Android Studio","_id":"cj1ndxccg000j88ow7sczwbmj"},{"name":"C++","_id":"cj1ndxccm000q88owj1lwrkrp"},{"name":"JNI","_id":"cj1ndxcco000y88ow8thua5l3"},{"name":"Linux","_id":"cj1ndxccy001c88ow9xvj2iuh"},{"name":"make","_id":"cj1ndxcd3001k88owrsb38bgd"},{"name":"Service","_id":"cj1ndxcd8001q88owh1ajnlvy"},{"name":"Centos","_id":"cj1ndxcdl002c88owrttbko2u"},{"name":"网络设置","_id":"cj1ndxcdq002i88ow9a25mtzp"},{"name":"C","_id":"cj1ndxcds002o88owe7uiermz"},{"name":"IOS","_id":"cj1ndxce3003j88owp36w5ag5"},{"name":"Git","_id":"cj1ndxce6003s88owtwuxa07b"},{"name":"Hexo","_id":"cj1ndxcea004088owuhc9v8xv"},{"name":"博客","_id":"cj1ndxceb004588owlfp09j3l"},{"name":"github","_id":"cj1ndxcec004b88owltdf7maj"},{"name":"adb","_id":"cj1ndxced004f88owt6m7ehq5"},{"name":"中文","_id":"cj1ndxcee004h88owx0er3ngs"},{"name":"Markdown","_id":"cj1ndxcee004k88ow58tu1vw3"},{"name":"开发环境","_id":"cj1ndxcef004n88owcdqww6do"},{"name":"CD-ROM","_id":"cj1ndxcef004q88owj4emvtb8"},{"name":"xUtils","_id":"cj1ndxceg004t88ow7tbmr6rh"},{"name":"RK3288","_id":"cj1ndxcei004w88owjy45nkag"},{"name":"UML","_id":"cj1ndxcej005088owl3axg3dl"},{"name":"vmtools","_id":"cj1ndxcek005388owr2ykdnnv"},{"name":"虚拟机","_id":"cj1ndxcel005588own82r1c22"},{"name":"Windows","_id":"cj1ndxcel005688owlu9p9ilz"},{"name":"Lrucache","_id":"cj1ndxcen005d88owyqbw8ggd"},{"name":"斐波那契","_id":"cj1ndxcen005g88owvux9iyim"},{"name":"算法","_id":"cj1ndxceo005j88owas4oephe"},{"name":"兔子","_id":"cj1ndxceo005k88owbktl5uky"},{"name":"正则表达式","_id":"cj1ndxcep005o88owu5lsijoe"},{"name":"regular","_id":"cj1ndxceq005r88owapg806wz"},{"name":"电影","_id":"cj1ndxceq005t88owh38swxiq"},{"name":"动画","_id":"cj1ndxcer005w88ow327zncxx"},{"name":"局域网","_id":"cj1ndxcer005x88owdqwj7y8w"},{"name":"文件共享","_id":"cj1ndxces006088ow97o4mjvw"}]}}